<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DigitalRune.Game.Input</name>
    </assembly>
    <members>
        <member name="T:DigitalRune.Game.Input.ConfigurableInputCommand">
            <summary>
            Represents an input command that supports a flexible input mapping.
            <i>(Experimental: This class is experimental and subject to change.)</i>
            </summary>
            <remarks>
            This command can be triggered with keys and buttons defined in the 
            <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.PrimaryMapping"/> and <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.SecondaryMapping"/>. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.ConfigurableInputCommand.InputService">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.ConfigurableInputCommand.Name">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">
            It is not allowed to change the name of an input command while the command is added to an 
            input service.
            </exception>
        </member>
        <member name="P:DigitalRune.Game.Input.ConfigurableInputCommand.Value">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.ConfigurableInputCommand.Description">
            <summary>
            Gets or sets the description of this command.
            </summary>
            <value>
            The description of this command. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Input.ConfigurableInputCommand.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Game.Input.ConfigurableInputCommand"/> is 
            enabled. If the command is not enabled, the <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Value"/> is always 0.
            </summary>
            <value>
            <see langword="true"/> if enabled; otherwise, <see langword="false"/>.
            The default is <see langword="true"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Input.ConfigurableInputCommand.PrimaryMapping">
            <summary>
            Gets or sets the primary input mapping that triggers the command.
            </summary>
            <value>The primary input mapping. The default is <see langword="null"/>.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.ConfigurableInputCommand.SecondaryMapping">
            <summary>
            Gets or sets the secondary input mapping that triggers the command.
            This mapping is not evaluated if the <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.PrimaryMapping"/> has influenced
            the <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Value"/>.
            </summary>
            <value>The secondary mapping. The default is <see langword="null"/>.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.ConfigurableInputCommand.Scale">
            <summary>
            Gets or sets the scale that is applied to the <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Value"/>.
            </summary>
            <value>
            The scale that is applied to the <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Value"/>. The default value is 1.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Input.ConfigurableInputCommand.Sensitivity">
            <summary>
            Gets or sets the sensitivity that is used for analog input.
            </summary>
            <value>
            The sensitivity for analog input in the range ]0, âˆž]. The default value is 1. 
            </value>
            <remarks>
            <para>
            A <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Sensitivity"/> of 1 creates a linear response curve (default). A value of 1/2
            creates a quadratic response curve. A value of 1/3 creates a cubic response curve. Etc.
            </para>
            <para>
            The <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Sensitivity"/> does not change the minimal and maximal values of the
            <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Value"/>. But they change how the <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Value"/> changes in response to
            analog input. If a thumb stick is pressed half way and the <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Sensitivity"/> is 1,
            the output <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Value"/> is 0.5. If the <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Sensitivity"/> is less than 1, then
            the <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Value"/> would be less than 0.5f. If the <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Sensitivity"/> is greater
            than 1, then the <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Value"/> would be greater than 0.5f. In other words: If the 
            <see cref="P:DigitalRune.Game.Input.ConfigurableInputCommand.Sensitivity"/> is high, then a small thumb stick movement has a larger reaction.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Sensitivity is negative or equal to 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Game.Input.ConfigurableInputCommand.LogicalPlayerIndex">
            <summary>
            Gets or sets the index of the logical player.
            </summary>
            <value>
            The index of the logical player. The default value is 
            <see cref="F:DigitalRune.Game.Input.LogicalPlayerIndex.One"/>. This value must not be set to 
            <see cref="F:DigitalRune.Game.Input.LogicalPlayerIndex.Any"/>.
            </value>
            <exception cref="T:System.ArgumentException">
            Property is set to <see cref="F:DigitalRune.Game.Input.LogicalPlayerIndex.Any"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.Input.ConfigurableInputCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.Input.ConfigurableInputCommand"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.Input.ConfigurableInputCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.Input.ConfigurableInputCommand"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:DigitalRune.Game.Input.ConfigurableInputCommand.Update(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.Input.DeviceAxis">
            <summary>
            Describes an analog input source, like an axis of joystick.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.DeviceAxis.MouseXAbsolute">
            <summary>
            The x-coordinate of the absolute mouse position.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.DeviceAxis.MouseYAbsolute">
            <summary>
            The y-coordinate of the absolute mouse position.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.DeviceAxis.MouseXRelative">
            <summary>
            The x-coordinate of the mouse position change since the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.DeviceAxis.MouseYRelative">
            <summary>
            The y-coordinate of the mouse position change since the last frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.DeviceAxis.MouseWheel">
            <summary>
            The value of the mouse wheel.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.DeviceAxis.GamePadStickLeftX">
            <summary>
            The horizontal axis of the left thumb stick on a gamepad.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.DeviceAxis.GamePadStickLeftY">
            <summary>
            The vertical axis of the left thumb stick on a gamepad.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.DeviceAxis.GamePadStickRightX">
            <summary>
            The horizontal axis of the right thumb stick on a gamepad.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.DeviceAxis.GamePadStickRightY">
            <summary>
            The vertical axis of the right thumb stick on a gamepad.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.DeviceAxis.GamePadTriggerLeft">
            <summary>
            The value of the left trigger button on a gamepad.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.DeviceAxis.GamePadTriggerRight">
            <summary>
            The value of the right trigger button on a gamepad.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.Input.IInputCommand">
            <summary>
            Defines a command that is activated by user input.
            </summary>
            <remarks>
            <para>
            Input commands translate raw input into (such as button presses, key combinations, etc.) to 
            semantic actions (such as "Forward", "Jump", "Shoot", etc.).Input commands are managed by the 
            <see cref="P:DigitalRune.Game.Input.IInputCommand.InputService"/>. Input commands can be added or removed from the input service by 
            adding or removing them from the <see cref="P:DigitalRune.Game.Input.IInputService.Commands"/> collection. The input 
            commands are identified by their <see cref="P:DigitalRune.INamedObject.Name"/> in the 
            <see cref="P:DigitalRune.Game.Input.IInputService.Commands"/> collection.
            </para>
            <para>
            When the input service is updated it calls the method <see cref="M:DigitalRune.Game.Input.IInputCommand.Update(System.TimeSpan)"/> of all registered
            input commands. In this method the input commands can check the user input and update their 
            <see cref="P:DigitalRune.Game.Input.IInputCommand.Value"/> accordingly. For example, the input command "Jump" might check whether the
            user has pressed the SPACE key and set the value to 1 if the key is down.
            </para>
            <para>
            Other game components can check the command and do not need to know which user input triggered
            the action. For example:
            <code lang="csharp">
            <![CDATA[
            if (InputService.Commands["Jump"].Value > 0)
            {
              // Let the player character jump.
              ...
            }
            ]]>
            </code>
            The input mapping can be reconfigured at runtime without affecting other game components. 
            </para>
            <para>
            Input commands should have a unique <see cref="P:DigitalRune.INamedObject.Name"/>. The name must not be 
            changed while the command is added to an <see cref="T:DigitalRune.Game.Input.IInputService"/>. Here are examples for 
            command names in a game: "Forward", "Strafe", "Turn", "Jump", "Shoot", etc. Typically, 
            command names describe the <i>intention</i> of the player.
            </para>
            <para>
            The <see cref="P:DigitalRune.Game.Input.IInputCommand.Value"/> indicates whether the command is active. A value of 0 indicates that 
            the action is inactive. A value of 1 typically indicates that the command is active - the user 
            wants to perform the action. Depending on the type of action, the value can also be negative.
            For example, the "Forward" command might use a value of 1 to indicate that the user wants to
            move forward and a value of -1 to indicate that the user wants to move backward. A value of 
            0.5 can indicate that the user wants to move with half speed, which can result from an analog
            input device.
            </para>
            <para>
            The property <see cref="P:DigitalRune.Game.Input.IInputCommand.InputService"/> is automatically set when the command is added to
            an input service. The method <see cref="M:DigitalRune.Game.Input.IInputCommand.Update(System.TimeSpan)"/> is called in each frame by the 
            <see cref="P:DigitalRune.Game.Input.IInputCommand.InputService"/> to do any time intensive work. For instance, if the command
            smooths input values using a low-pass filter, this is best done in the <see cref="M:DigitalRune.Game.Input.IInputCommand.Update(System.TimeSpan)"/>
            method.
            </para>
            <para>
            This interface does not define how commands use the <strong>IsHandled</strong> flags
            (<see cref="P:DigitalRune.Game.Input.IInputService.IsKeyboardHandled"/>, etc.) of the input service. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputCommand.InputService">
            <summary>
            Gets or sets the input service.
            </summary>
            <value>The input service.</value>
            <remarks>
            This property is automatically set when the command is added to an 
            <see cref="T:DigitalRune.Game.Input.IInputService"/> (see <see cref="P:DigitalRune.Game.Input.IInputService.Commands"/>). This property is 
            <see langword="null"/> if this command is not added to an <see cref="T:DigitalRune.Game.Input.IInputService"/> .
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputCommand.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
            <remarks>
            This value typically represents the value of an analog input (e.g. a joystick axis) or a
            boolean value (where 0 means "false" or "command is not active", and 1 means "true" or
            "command is active in this frame"). 
            This value is typically polled in each frame by the game modules that react to this command.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputCommand.Update(System.TimeSpan)">
            <summary>
            Updates internal values of this command. This method is called automatically in each frame 
            by the input service.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
        </member>
        <member name="T:DigitalRune.Game.Input.InputCommandCollection">
            <summary>
            Manages a collection of <see cref="T:DigitalRune.Game.Input.IInputCommand"/>s.
            </summary>
            <remarks>
            Null items cannot be added to this collection.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.Input.InputCommandCollection.#ctor(DigitalRune.Game.Input.IInputService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.Input.InputCommandCollection"/> class.
            </summary>
            <param name="inputService">The input service.</param>
        </member>
        <member name="M:DigitalRune.Game.Input.InputCommandCollection.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:DigitalRune.Game.Input.InputCommandCollection"/>. 
            </summary>
        </member>
        <member name="M:DigitalRune.Game.Input.InputCommandCollection.InsertItem(System.Int32,DigitalRune.Game.Input.IInputCommand)">
            <summary>
            Inserts an element into the <see cref="T:DigitalRune.Game.Input.InputCommandCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0, or <paramref name="index"/> is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cannot add command to input service. The command is already added to an input service.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.Input.InputCommandCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:DigitalRune.Game.Input.InputCommandCollection"/>.
            </summary>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:DigitalRune.Game.Input.InputCommandCollection.SetItem(System.Int32,DigitalRune.Game.Input.IInputCommand)">
            <summary>
            Replaces the item at the specified index with the specified item.
            </summary>
            <param name="index">The zero-based index of the item to be replaced.</param>
            <param name="item">The new item.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cannot add command to input service. The command is already added to an input service.
            </exception>
        </member>
        <member name="T:DigitalRune.Game.Input.InputMapping">
            <summary>
            Defines a combination of keys, buttons and more that can be used to trigger an action.
            </summary>
            <remarks>
            <para>
            The user can trigger an action by pressing keyboard keys, gamepad buttons or mouse buttons.
            The user can also use analog input (see <see cref="P:DigitalRune.Game.Input.InputMapping.Axis"/>). The action is triggered if any of
            the given keys/buttons are pressed. 
            </para>
            <para>
            The mapping defines "positive" and "negative" keys/buttons. For example, for a "Shoot" 
            command, only the "positive" button is relevant. For a "Move Horizontal" command, the positive
            button can be used to move left, while the negative buttons can be used to move right. If
            mapped to a numeric value, the mapping creates -1 if the negative button is pressed and +1 if
            the positive button is pressed. If no button is pressed, or both positive and negative buttons
            are pressed concurrently, the value is 0.
            </para>
            <para>
            <strong>Modifiers:</strong> <see cref="P:DigitalRune.Game.Input.InputMapping.ModifierKeys"/> and <see cref="P:DigitalRune.Game.Input.InputMapping.ModifierButtons"/> can 
            also be specified. The action is only triggered if the modifiers are down while the 
            keys/buttons are pressed. <see cref="P:DigitalRune.Game.Input.InputMapping.ModifierKeys"/> are only relevant for keyboard and mouse 
            input. <see cref="P:DigitalRune.Game.Input.InputMapping.ModifierButtons"/> are only relevant for gamepad input.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.InputMapping.PositiveDescription">
            <summary>
            Gets or sets the description that describes the result of the "positive" buttons,
            e.g. "Move Right".
            </summary>
            <value>
            The description of the positive keys and buttons.
            The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputMapping.NegativeDescription">
            <summary>
            Gets or sets the description that describes the result of the "negative" buttons,
            e.g. "Move Left".
            </summary>
            <value>
            The description of the negative keys and buttons.
            The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputMapping.ModifierKeys">
            <summary>
            Gets or sets the modifier keys that must be down. Keys and mouse buttons do not trigger
            any actions if the modifier keys are released.
            </summary>
            <value>The modifier keys.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputMapping.ModifierButtons">
            <summary>
            Gets or sets the modifier buttons that must be down. Gamepad buttons do not trigger any 
            actions if the modifier buttons are released. (Not available in Silverlight.)
            </summary>
            <value>The modifier buttons.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputMapping.PressType">
            <summary>
            Gets or sets the type of the key or button press that triggers the action.
            </summary>
            <value>The type of the key or button press.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputMapping.Invert">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:DigitalRune.Game.Input.InputMapping.Axis"/> and the positive and negative
            keys/buttons are inverted.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="P:DigitalRune.Game.Input.InputMapping.Axis"/> and the positive and negative keys/buttons
            are inverted; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputMapping.PositiveKey">
            <summary>
            Gets or sets the key that triggers a positive action.
            </summary>
            <value>The key that triggers a positive action.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputMapping.NegativeKey">
            <summary>
            Gets or sets the key that triggers a negative action.
            </summary>
            <value>The key that triggers a negative action.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputMapping.PositiveButton">
            <summary>
            Gets or sets the gamepad button that triggers a positive action.
            (Not available in Silverlight.)
            </summary>
            <value>The gamepad button that triggers a positive action.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputMapping.NegativeButton">
            <summary>
            Gets or sets the gamepad button that triggers a negative action.
            (Not available in Silverlight.)
            </summary>
            <value>The gamepad button that triggers a negative action.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputMapping.PositiveMouseButton">
            <summary>
            Gets or sets the mouse button that triggers a positive action.
            </summary>
            <value>The mouse button that triggers a positive action.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputMapping.NegativeMouseButton">
            <summary>
            Gets or sets the mouse button that triggers a negative action.
            </summary>
            <value>The mouse button that triggers a negative action.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputMapping.Axis">
            <summary>
            Gets or sets the analog device input that controls the action.
            </summary>
            <value>The analog device input that controls the action.</value>
        </member>
        <member name="T:DigitalRune.Game.Input.PressType">
            <summary>
            Defines the type of a key or button press.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.PressType.Down">
            <summary>
            The button is currently held down. 
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.PressType.Press">
            <summary>
            The button was up in the previous frame and is pressed down in this frame.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.PressType.DoubleClick">
            <summary>
            The button was pressed twice within a short time.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.Input.IInputService">
            <summary>
            Manages user input from keyboard, mouse, Xbox 360 controllers and other devices.
            </summary>
            <remarks>
            <para>
            Note: Touch, accelerometer and gamepad input is not supported in Silverlight.
            (But those devices are supported on the Windows Phone.)
            </para>
            <para>
            The input manager is the central method that should be used to check for user input. It 
            contains many convenience methods that allow to detected key/button presses and double-clicks.
            </para>
            <para>
            Typically, many game components can handle the input. But often input should only be processed
            by the foremost game component (e.g. the top-most window). For this, game components can set 
            the flags <see cref="P:DigitalRune.Game.Input.IInputService.IsAccelerometerHandled"/>, <see cref="M:DigitalRune.Game.Input.IInputService.IsGamePadHandled(DigitalRune.Game.Input.LogicalPlayerIndex)"/>, 
            <see cref="P:DigitalRune.Game.Input.IInputService.IsKeyboardHandled"/>, and <see cref="P:DigitalRune.Game.Input.IInputService.IsMouseOrTouchHandled"/> to indicate that 
            input has already been processed and other game components should ignore the input. These 
            flags are reset by the input service in each frame, but otherwise the input service itself 
            does not read this flags. It is up to the game components to decide whether they want to
            consider these flags or not. (If, for example, <see cref="P:DigitalRune.Game.Input.IInputService.IsMouseOrTouchHandled"/> is set,
            methods like <see cref="M:DigitalRune.Game.Input.IInputService.IsDown(DigitalRune.Game.Input.MouseButtons)"/> still work normally.)
            </para>
            <para>
            <strong>Logical Players and Game Controllers: </strong>The <see cref="T:Microsoft.Xna.Framework.PlayerIndex"/> in XNA
            identifies a game controller. Beware that "Player One" may not be using the game controller
            that is assigned to <strong>PlayerIndex.One</strong>! A game needs to detect which player uses
            which game controller at runtime. (See example below.)
            </para>
            <para>
            The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> identifies a player. <see cref="M:DigitalRune.Game.Input.IInputService.SetLogicalPlayer(DigitalRune.Game.Input.LogicalPlayerIndex,System.Nullable{Microsoft.Xna.Framework.PlayerIndex})"/> must
            be called to assign a game controller to a player. Gamepad input can be queried using the 
            <see cref="T:Microsoft.Xna.Framework.PlayerIndex"/> to get the input of a certain game controller or the 
            <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> to get the input of a certain player.
            <strong>LogicalPlayerIndex.Any</strong> can be used to query the game controllers of all 
            players. Note that game controllers that are not associated with any player are ignored when
            <strong>LogicalPlayerIndex.Any</strong> is used.
            </para>
            <para>
            <strong>IMPORTANT: </strong>The methods that take the <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> as a
            parameter return default values when no game controller is assigned to the specified player.
            Be sure to call 
            <see cref="M:DigitalRune.Game.Input.IInputService.SetLogicalPlayer(DigitalRune.Game.Input.LogicalPlayerIndex,System.Nullable{Microsoft.Xna.Framework.PlayerIndex})"/> to assign game controllers to players.
            </para>
            <para>
            <strong>IsUp, IsDown and IsPressed: </strong>The input service defines simple methods that
            allow to check if a key or button is currently held down or not. This methods are called 
            <strong>IsDown</strong> and <strong>IsUp</strong>. The methods <strong>IsPressed</strong> and
            <strong>IsReleased</strong> check whether a key or button was pressed down or released exactly
            in this frame. That means, if a key is not held down, <strong>IsUp</strong> returns true and
            all other methods return false. Then when the key is pressed, <strong>IsDown
            </strong> is true and <strong>IsPressed</strong> is true. If the key is still held down in the
            next frame, <strong>IsDown</strong> is still true but <strong>IsPressed</strong> is false.
            </para>
            <para>
            <strong>Double-Clicks: </strong>The methods <strong>IsDoubleClick</strong> can be used to
            detect double-clicks. The two clicks must be within the 
            <see cref="P:DigitalRune.Game.Input.InputSettings.DoubleClickTime"/> to count as double-click. For GUI controls it is
            also necessary to check if both clicks were in the same region - but this is not checked by
            the input service and is left to the GUI system.
            </para>
            <para>
            <strong>Virtual Key/Button Presses: </strong>When a key or button is held down for longer than
            <see cref="P:DigitalRune.Game.Input.InputSettings.RepetitionDelay"/> the input service starts to create "IsPressed"
            events at a frequency defined by <see cref="P:DigitalRune.Game.Input.InputSettings.RepetitionInterval"/> - this is
            convenient for text input in text box controls and text editors. The property 
            <see cref="P:DigitalRune.Game.Input.IInputService.PressedKeys"/> contains a list of all keys that where pressed down in the current
            frame - including the virtual presses created by keys/buttons that were held down for a long
            time. In the <strong>IsPressed</strong> methods the second parameter allows to specify if
            virtual key/button repetitions events should be included or not.
            </para>
            <para>
            <strong>Accelerometer: </strong>The accelerometer can only be used on the Windows Phone 7
            device. In the Windows Phone 7 emulator the arrow keys and the space key can be used to
            create accelerometer readings.
            </para>
            </remarks>
            <example>
            At runtime an application needs to figure out which game controller is used to control the 
            game. This is typically done by prompting the user to press Start or button A at the start 
            screen. Include the following code in the <strong>Update</strong> method of the game:
            <code lang="csharp">
            <![CDATA[
            if (_inputManager.GetLogicalPlayer(LogicalPlayerIndex.One) == null)
            {
              // Wait until the user presses A or START on any connected gamepad.
              for (var controller = PlayerIndex.One; controller <= PlayerIndex.Four; controller++)
              {
                if (_inputManager.IsDown(Buttons.A, controller) || _inputManager.IsDown(Buttons.Start, controller))
                {
                  // A or START was pressed. Assign the controller to the first "logical player".
                  _inputManager.SetLogicalPlayer(LogicalPlayerIndex.One, controller);
                  break;
                }
              }
            }
            ]]>
            </code>
            All subsequent methods can use <strong>LogicalPlayerIndex.One</strong> to query the input of 
            the player.
            </example>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.Settings">
            <summary>
            Gets or sets the settings that define input handling, timing, etc.
            </summary>
            <value>The input settings.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.MaxNumberOfPlayers">
            <summary>
            Gets the max number of players (= max number of game controllers that can be connected).
            </summary>
            <value>The max number of players.</value>
            <remarks>
            This number shows the maximal number of game controllers that can be connected and are 
            supported by this input service.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.IsMouseOrTouchHandled">
            <summary>
            Gets or sets a value indicating whether mouse or touch input has already been handled.
            </summary>
            <value>
            <see langword="true"/> if mouse or touch input has already been handled; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            This value is automatically reset (= set to <see langword="false"/>) by the input service
            in each frame. Game components can set this flag to indicate that they have handled the
            mouse or touch input and other game components should not handle this input anymore. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.IsKeyboardHandled">
            <summary>
            Gets or sets a value indicating whether keyboard input has already been handled.
            </summary>
            <value>
            <see langword="true"/> if keyboard input has already been handled; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            This value is automatically reset (= set to <see langword="false"/>) by the input service
            in each frame. Game components can set this flag to indicate that they have handled the
            keyboard input and other game components should not handle this input anymore. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.GetLogicalPlayer(DigitalRune.Game.Input.LogicalPlayerIndex)">
            <summary>
            Gets the game controller assigned to the specified player. (Not available in Silverlight.)
            </summary>
            <param name="player">
            The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> that identifies the player.
            </param>
            <returns>
            The <see cref="T:Microsoft.Xna.Framework.PlayerIndex"/> that identifies the game controller. Returns 
            <see langword="null"/>, if no game controller is assigned to <paramref name="player"/>.
            </returns>
            <remarks>
            Use <see cref="M:DigitalRune.Game.Input.IInputService.SetLogicalPlayer(DigitalRune.Game.Input.LogicalPlayerIndex,System.Nullable{Microsoft.Xna.Framework.PlayerIndex})"/> to assign a game controller to a player.
            </remarks>
            <seealso cref="M:DigitalRune.Game.Input.IInputService.SetLogicalPlayer(DigitalRune.Game.Input.LogicalPlayerIndex,System.Nullable{Microsoft.Xna.Framework.PlayerIndex})"/>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.SetLogicalPlayer(DigitalRune.Game.Input.LogicalPlayerIndex,System.Nullable{Microsoft.Xna.Framework.PlayerIndex})">
            <summary>
            Assigns a game controller to a player. (Not available in Silverlight.)
            </summary>
            <param name="player">
            The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> that identifies the player.
            </param>
            <param name="controller">
            The <see cref="T:Microsoft.Xna.Framework.PlayerIndex"/> that identifies the game controller. (Can be 
            <see langword="null"/> to remove the current assignment.)
            </param>
            <seealso cref="M:DigitalRune.Game.Input.IInputService.GetLogicalPlayer(DigitalRune.Game.Input.LogicalPlayerIndex)"/>
            <exception cref="T:System.ArgumentException">
            <paramref name="player"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.SetGamePadHandled(DigitalRune.Game.Input.LogicalPlayerIndex,System.Boolean)">
            <overloads>
            <summary>
            Sets the <strong>IsGamePadHandled</strong> flags. (Not available in Silverlight.)
            </summary>
            </overloads>
            
            <summary>
            Sets the <strong>IsGamePadHandled</strong> flags for the given player. (Not available in Silverlight.)
            </summary>
            <param name="player">
            The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> that identifies the player. 
            (<see cref="F:DigitalRune.Game.Input.LogicalPlayerIndex.Any"/> to set the <strong>IsGamePadHandled</strong> flag of 
            all players.)
            </param>
            <param name="value">
            The new value for the <strong>IsGamePadHandled</strong> flag.
            </param>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.SetGamePadHandled(Microsoft.Xna.Framework.PlayerIndex,System.Boolean)">
            <summary>
            Sets the <strong>IsGamePadHandled</strong> flags of a given game controller. 
            (Not available in Silverlight.)
            </summary>
            <param name="controller">
            The <see cref="T:Microsoft.Xna.Framework.PlayerIndex"/> that identifies the game controller.
            </param>
            <param name="value">
            The new value for the <strong>IsGamePadHandled</strong> flag.
            </param>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsGamePadHandled(DigitalRune.Game.Input.LogicalPlayerIndex)">
            <overloads>
            <summary>
            Gets a value indicating whether gamepad input has already been handled. 
            (Not available in Silverlight.)
            </summary>
            </overloads>
            
            <summary>
            Gets a value indicating whether gamepad input of a given player has already been handled.
            </summary>
            <param name="player">
            The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> that identifies the player. 
            (<see cref="F:DigitalRune.Game.Input.LogicalPlayerIndex.Any"/> to check all of players.)
            </param>
            <returns>
            <see langword="true"/> if the input for the given <paramref name="player"/> was already 
            handled. If <paramref name="player"/> is <see langword="LogicalPlayerIndex.Any"/> 
            <see langword="true"/> is returned if any game controller input was already handled.
            </returns>
            <remarks>
            This flags are automatically reset (= set to <see langword="false"/>) by the input service
            in each frame. Game components can set this flag to indicate that they have handled the
            game controller input and other game components should not handle this input anymore.
            To set these flags use <see cref="M:DigitalRune.Game.Input.IInputService.SetGamePadHandled(DigitalRune.Game.Input.LogicalPlayerIndex,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsGamePadHandled(Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            Gets a value indicating whether the input of a given game controller has already been 
            handled. (Not available in Silverlight.)
            </summary>
            <param name="controller">
            The <see cref="T:Microsoft.Xna.Framework.PlayerIndex"/> that identifies the game controller.
            </param>
            <returns>
            <see langword="true"/> if the input for the given <paramref name="controller"/> was already 
            handled.
            </returns>
            <inheritdoc cref="M:DigitalRune.Game.Input.IInputService.IsGamePadHandled(DigitalRune.Game.Input.LogicalPlayerIndex)"/>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.SetAllHandled(System.Boolean)">
            <summary>
            Sets all "IsHandled" flags to the given value.
            </summary>
            <param name="value">The value for the flags.</param>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.IsAccelerometerHandled">
            <summary>
            Gets or sets a value indicating whether accelerometer input has already been handled.
            </summary>
            <value>
            <see langword="true"/> if accelerometer input has already been handled; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            This value is automatically reset (= set to <see langword="false"/>) by the input service
            in each frame. Game components can set this flag to indicate that they have handled the
            accelerometer input and other game components should not handle this input anymore. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.EnableMouseCentering">
            <summary>
            Gets or sets a value indicating whether the mouse position is reset in each frame.
            </summary>
            <value>
            <see langword="true"/> if the mouse position is reset in each frame; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            If <see cref="P:DigitalRune.Game.Input.IInputService.EnableMouseCentering"/> is <see langword="true"/>, the input service will
            reset the mouse position to <see cref="P:DigitalRune.Game.Input.InputSettings.MouseCenter"/> in each frame. This is 
            necessary, for example, for first-person shooters that need only relative mouse input.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.MouseState">
            <summary>
            Gets the state of the current mouse state.
            </summary>
            <value>The state of the current mouse state.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.PreviousMouseState">
            <summary>
            Gets the mouse state of the last frame.
            </summary>
            <value>The mouse state of the last frame.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.MouseWheelDelta">
            <summary>
            Gets a value representing the rotation change of the mouse wheel.
            </summary>
            <value>The rotation change of the mouse wheel.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.MousePositionRaw">
            <summary>
            Gets the raw mouse position.
            </summary>
            <value>The raw mouse position.</value>
            <remarks>
            <para>
            <see cref="P:DigitalRune.Game.Input.IInputService.MousePositionRaw"/> is the mouse position relative to the game window - as it 
            was read using the XNA <see cref="T:Microsoft.Xna.Framework.Input.Mouse"/> class. <see cref="P:DigitalRune.Game.Input.IInputService.MousePositionDeltaRaw"/> 
            is the mouse position change since the last frame. Both properties are read-only.
            </para>
            <para>
            The properties <see cref="P:DigitalRune.Game.Input.IInputService.MousePosition"/> and <see cref="P:DigitalRune.Game.Input.IInputService.MousePositionDelta"/> are set to
            the same values as <see cref="P:DigitalRune.Game.Input.IInputService.MousePositionRaw"/> and <see cref="P:DigitalRune.Game.Input.IInputService.MousePositionDeltaRaw"/> in 
            each frame. These properties have a setter and can therefore be modified by other game 
            components. <see cref="P:DigitalRune.Game.Input.IInputService.MousePosition"/> and <see cref="P:DigitalRune.Game.Input.IInputService.MousePositionDelta"/> store any 
            changed values for the rest of the frame. This is useful if the mouse position needs to be 
            transformed. For example, the mouse position can be transformed to be relative to a viewport 
            within the game window.
            </para>
            <para>
            If <see cref="P:DigitalRune.Game.Input.IInputService.MousePosition"/> is modified, <see cref="P:DigitalRune.Game.Input.IInputService.MousePositionDelta"/> should be
            modified accordingly.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.MousePositionDeltaRaw">
            <summary>
            Gets the raw mouse position change since the last frame.
            </summary>
            <value>The raw mouse position change.</value>
            <inheritdoc cref="P:DigitalRune.Game.Input.IInputService.MousePositionRaw"/>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.MousePosition">
            <summary>
            Gets or sets the mouse position.
            </summary>
            <value>The mouse position.</value>
            <inheritdoc cref="P:DigitalRune.Game.Input.IInputService.MousePositionRaw"/>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.MousePositionDelta">
            <summary>
            Gets or sets the mouse position change since the last frame.
            </summary>
            <value>The mouse position change.</value>
            <inheritdoc cref="P:DigitalRune.Game.Input.IInputService.MousePositionRaw"/>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.KeyboardState">
            <summary>
            Gets the state of the current keyboard state.
            </summary>
            <value>The state of the current keyboard state.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.PreviousKeyboardState">
            <summary>
            Gets the keyboard state of the last frame.
            </summary>
            <value>The keyboard state of the last frame.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.PressedKeys">
            <summary>
            Gets the pressed keys.
            </summary>
            <value>The pressed keys.</value>
            <remarks>
            This list includes keys that were "up" in the last frame and are "down" in this frame.
            The list also includes artificial key presses generated by the key repetition feature.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.ModifierKeys">
            <summary>
            Gets the pressed modifier keys.
            </summary>
            <value>The pressed modifier keys.</value>
            <remarks>
            The special keys ChatPadGreen and ChatPadOrange are ignored and not detected.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.GetGamePadState(DigitalRune.Game.Input.LogicalPlayerIndex)">
            <overloads>
            <summary>
            Gets the state of a game controller. (Not available in Silverlight.)
            </summary>
            </overloads>
            
            <summary>
            Gets the gamepad state for the given player.
            </summary>
            <param name="player">
            The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> that identifies the player. (Note: 
            <see cref="F:DigitalRune.Game.Input.LogicalPlayerIndex.Any"/> is not allowed.)
            </param>
            <returns>The gamepad state of the current frame.</returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.GetGamePadState(Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            Gets the gamepad state of the given game controller. (Not available in Silverlight.)
            </summary>
            <param name="controller">
            The <see cref="T:Microsoft.Xna.Framework.PlayerIndex"/> that identifies the game controller.
            </param>
            <returns>The gamepad state of the current frame.</returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.GetPreviousGamePadState(DigitalRune.Game.Input.LogicalPlayerIndex)">
            <overloads>
            <summary>
            Gets the gamepad state of the last frame. (Not available in Silverlight.)
            </summary>
            </overloads>
            
            <summary>
            Gets the gamepad state of the last frame for the given player. 
            (Not available in Silverlight.)
            </summary>
            <param name="player">
            The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> that identifies the player. 
            </param>
            <returns>
            The gamepad state of the last frame.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.GetPreviousGamePadState(Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            Gets the gamepad state of the last frame of the given game controller. 
            (Only available in XNA Windows Phone builds.)
            </summary>
            <param name="controller">
            The <see cref="T:Microsoft.Xna.Framework.PlayerIndex"/> that identifies the game controller.
            </param>
            <returns>
            The gamepad state of the last frame.
            </returns>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.TouchCollection">
            <summary>
            Gets the touch collection. (Not available in Silverlight.)
            </summary>
            <value>The touch collection.</value>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.Gestures">
            <summary>
            Gets the detected touch gestures. (Not available in Silverlight.)
            </summary>
            <value>The detected touch gestures.</value>
            <remarks>
            <see cref="P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures"/> must be set to enable gesture detection.
            Per default, no gestures are detected.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.IInputService.Commands">
            <summary>
            Gets the input commands.
            </summary>
            <value>The input commands.</value>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsDown(Microsoft.Xna.Framework.Input.Buttons,DigitalRune.Game.Input.LogicalPlayerIndex)">
            <overloads>
            <summary>
            Determines whether the specified button or key is down. (Not available in Silverlight.)
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified button is down for the given player. 
            (Not available in Silverlight.)
            </summary>
            <param name="button">The button.</param>
            <param name="player">
            The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> that identifies the player. 
            (<see cref="F:DigitalRune.Game.Input.LogicalPlayerIndex.Any"/> to check the game controllers of all available 
            players.)
            </param>
            <returns>
            <see langword="true"/> if the specified button is down; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsDown(Microsoft.Xna.Framework.Input.Buttons,Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            Determines whether the specified button is down on the given game controller. 
            (Not available in Silverlight.)
            </summary>
            <param name="button">The button.</param>
            <param name="controller">
            The <see cref="T:Microsoft.Xna.Framework.PlayerIndex"/> that identifies the game controller.
            </param>
            <returns>
            <see langword="true"/> if the specified button is down; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsUp(Microsoft.Xna.Framework.Input.Buttons,DigitalRune.Game.Input.LogicalPlayerIndex)">
            <overloads>
            <summary>
            Determines whether the specified button or key is up. (Not available in Silverlight.)
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified button is up for the given player. 
            (Not available in Silverlight.)
            </summary>
            <param name="button">The button.</param>
            <param name="player">
            The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> that identifies the player. 
            (<see cref="F:DigitalRune.Game.Input.LogicalPlayerIndex.Any"/> to check the game controllers of all available 
            players.)
            </param>
            <returns>
            <see langword="true"/> if the specified button is up; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsUp(Microsoft.Xna.Framework.Input.Buttons,Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            Determines whether the specified button is up on the given game controller. 
            (Not available in Silverlight.)
            </summary>
            <param name="button">The button.</param>
            <param name="controller">
            The <see cref="T:Microsoft.Xna.Framework.PlayerIndex"/> that identifies the game controller.
            </param>
            <returns>
            <see langword="true"/> if the specified button is up; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsPressed(Microsoft.Xna.Framework.Input.Buttons,System.Boolean,DigitalRune.Game.Input.LogicalPlayerIndex)">
            <overloads>
            <summary>
            Determines whether the specified button or key has been pressed. 
            (Not available in Silverlight.)
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified button has been pressed by the given player. 
            (Not available in Silverlight.)
            </summary>
            <param name="button">The button.</param>
            <param name="useButtonRepetition">
            If set to <see langword="true"/> physical and virtual button presses (see 
            <see cref="T:DigitalRune.Game.Input.IInputService"/>) are returned; otherwise, only physical button presses are
            returned.
            </param>
            <param name="player">
            The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> that identifies the player. 
            (<see cref="F:DigitalRune.Game.Input.LogicalPlayerIndex.Any"/> to check the game controllers of all available 
            players.)
            </param>
            <returns>
            <see langword="true"/> if the specified button was previously up and has been pressed; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsPressed(Microsoft.Xna.Framework.Input.Buttons,System.Boolean,Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            Determines whether the specified button has been pressed on the given game controller. 
            (Not available in Silverlight.)
            </summary>
            <param name="button">The button.</param>
            <param name="useButtonRepetition">
            If set to <see langword="true"/> physical and virtual button presses (see 
            <see cref="T:DigitalRune.Game.Input.IInputService"/>) are returned; otherwise, only physical button presses are
            returned.
            </param>
            <param name="controller">
            The <see cref="T:Microsoft.Xna.Framework.PlayerIndex"/> that identifies the game controller.
            </param>
            <returns>
            <see langword="true"/> if the specified button was previously up and has been pressed;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsReleased(Microsoft.Xna.Framework.Input.Buttons,DigitalRune.Game.Input.LogicalPlayerIndex)">
            <overloads>
            <summary>
            Determines whether the specified button or key has been released. 
            (Not available in Silverlight.)
            </summary>
            </overloads>
            
            <summary> 
            Determines whether the specified button has been released by the given player.
            (Not available in Silverlight.)
            </summary>
            <param name="button">The button.</param>
            <param name="player">
            The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> that identifies the player. 
            (<see cref="F:DigitalRune.Game.Input.LogicalPlayerIndex.Any"/> to check the game controllers of all available 
            players.)
            </param>
            <returns>
            <see langword="true"/> if the specified button was previously down and has been released; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsReleased(Microsoft.Xna.Framework.Input.Buttons,Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            Determines whether the specified button has been released on the given game controller.
            (Not available in Silverlight.)
            </summary>
            <param name="button">The button.</param>
            <param name="controller">
            The <see cref="T:Microsoft.Xna.Framework.PlayerIndex"/> that identifies the game controller.
            </param>
            <returns>
            <see langword="true"/> if the specified button was previously down and has been released;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsDoubleClick(Microsoft.Xna.Framework.Input.Buttons,DigitalRune.Game.Input.LogicalPlayerIndex)">
            <overloads>
            <summary>
            Determines whether the specified button or key has been double-clicked.
            (Not available in Silverlight.)
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified button has been double-clicked by the given player.
            (Not available in Silverlight.)
            </summary>
            <param name="button">The button.</param>
            <param name="player">
            The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> that identifies the player. 
            (<see cref="F:DigitalRune.Game.Input.LogicalPlayerIndex.Any"/> to check the game controllers of all available 
            players.)
            </param>
            <returns>
            <see langword="true"/> if the specified button has been double-clicked; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsDoubleClick(Microsoft.Xna.Framework.Input.Buttons,Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            Determines whether the specified button has been double-clicked on the given game 
            controller. (Not available in Silverlight.)
            </summary>
            <param name="button">The button.</param>
            <param name="controller">
            The <see cref="T:Microsoft.Xna.Framework.PlayerIndex"/> that identifies the game controller.
            </param>
            <returns>
            <see langword="true"/> if the specified button has been double-clicked; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines whether the specified key is down.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/> if the specified key is down; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsUp(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines whether the specified key is up.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/> if the specified key is up; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsPressed(Microsoft.Xna.Framework.Input.Keys,System.Boolean)">
            <summary>
            Determines whether the specified key was previously up and has been pressed.
            </summary>
            <param name="key">The key.</param>
            <param name="useKeyRepetition">
            If set to <see langword="true"/> physical and virtual key presses (see 
            <see cref="T:DigitalRune.Game.Input.IInputService"/>) are returned; otherwise, only physical key presses are 
            returned.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="key"/> was previously up and has been pressed;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines whether the specified key was previously down and has been released.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/> if the specified key was previously down and has been released;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsDoubleClick(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines whether the specified key was double-clicked.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/> if the specified key was double-clicked; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsDown(DigitalRune.Game.Input.MouseButtons)">
            <summary>
            Determines whether the specified button is down.
            </summary>
            <param name="button">The button.</param>
            <returns>
            <see langword="true"/> if the specified button is down; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsUp(DigitalRune.Game.Input.MouseButtons)">
            <summary>
            Determines whether the specified button is up.
            </summary>
            <param name="button">The button.</param>
            <returns>
            <see langword="true"/> if the specified button is up; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsPressed(DigitalRune.Game.Input.MouseButtons,System.Boolean)">
            <summary>
            Determines whether the specified button was previously up and has been pressed.
            </summary>
            <param name="button">The button.</param>
            <param name="useButtonRepetition">
            If set to <see langword="true"/> physical and virtual button presses (see 
            <see cref="T:DigitalRune.Game.Input.IInputService"/>) are returned; otherwise, only physical button presses are
            returned.
            </param>
            <returns>
            <see langword="true"/> if the specified button was previously up and has been pressed;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsReleased(DigitalRune.Game.Input.MouseButtons)">
            <summary>
            Determines whether the specified button was previously down and has been released.
            </summary>
            <param name="button">The button.</param>
            <returns>
            <see langword="true"/> if the specified button was previously down and has been released;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.Input.IInputService.IsDoubleClick(DigitalRune.Game.Input.MouseButtons)">
            <summary>
            Determines whether the specified button has been double-clicked.
            </summary>
            <param name="button">The button.</param>
            <returns>
            <see langword="true"/> if the specified button has been double-clicked; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Game.Input.InputManager">
            <summary>
            Manages user input from several devices. See <see cref="T:DigitalRune.Game.Input.IInputService"/>.
            </summary>
            <remarks>
            <para>
            <see cref="M:DigitalRune.Game.Input.InputManager.Update(System.TimeSpan)"/> must be called once per frame. The method must be called on the main game
            thread that is allowed to query the input devices (other threads are not allowed to query 
            input devices).
            </para>
            <para>
            See <see cref="T:DigitalRune.Game.Input.IInputService"/> for additional information.
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Game.Input.IInputService"/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.Settings">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.MaxNumberOfPlayers">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.IsAccelerometerHandled">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.IsKeyboardHandled">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.IsMouseOrTouchHandled">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.Commands">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.Input.InputManager"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.Input.InputManager"/> class.
            </summary>
            <param name="gamerServicesEnabled">
            <see langword="true"/> if the game uses the XNA gamer services component; otherwise, 
            <see langword="false"/>.
            </param>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.SetGamePadHandled(DigitalRune.Game.Input.LogicalPlayerIndex,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.SetGamePadHandled(Microsoft.Xna.Framework.PlayerIndex,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsGamePadHandled(DigitalRune.Game.Input.LogicalPlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsGamePadHandled(Microsoft.Xna.Framework.PlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.SetAllHandled(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.Update(System.TimeSpan)">
            <summary>
            Updates the input states. This method must be called once per frame.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.GetLogicalPlayer(DigitalRune.Game.Input.LogicalPlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.SetLogicalPlayer(DigitalRune.Game.Input.LogicalPlayerIndex,System.Nullable{Microsoft.Xna.Framework.PlayerIndex})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.GetGamePadState(DigitalRune.Game.Input.LogicalPlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.GetGamePadState(Microsoft.Xna.Framework.PlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.GetPreviousGamePadState(DigitalRune.Game.Input.LogicalPlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.GetPreviousGamePadState(Microsoft.Xna.Framework.PlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsDown(Microsoft.Xna.Framework.Input.Buttons,DigitalRune.Game.Input.LogicalPlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsDown(Microsoft.Xna.Framework.Input.Buttons,Microsoft.Xna.Framework.PlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsUp(Microsoft.Xna.Framework.Input.Buttons,DigitalRune.Game.Input.LogicalPlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsUp(Microsoft.Xna.Framework.Input.Buttons,Microsoft.Xna.Framework.PlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsPressed(Microsoft.Xna.Framework.Input.Buttons,System.Boolean,DigitalRune.Game.Input.LogicalPlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsPressed(Microsoft.Xna.Framework.Input.Buttons,System.Boolean,Microsoft.Xna.Framework.PlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsReleased(Microsoft.Xna.Framework.Input.Buttons,DigitalRune.Game.Input.LogicalPlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsReleased(Microsoft.Xna.Framework.Input.Buttons,Microsoft.Xna.Framework.PlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsDoubleClick(Microsoft.Xna.Framework.Input.Buttons,DigitalRune.Game.Input.LogicalPlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsDoubleClick(Microsoft.Xna.Framework.Input.Buttons,Microsoft.Xna.Framework.PlayerIndex)">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.KeyboardState">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.PreviousKeyboardState">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.PressedKeys">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.ModifierKeys">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsDown(Microsoft.Xna.Framework.Input.Keys)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsUp(Microsoft.Xna.Framework.Input.Keys)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsPressed(Microsoft.Xna.Framework.Input.Keys,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsReleased(Microsoft.Xna.Framework.Input.Keys)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsDoubleClick(Microsoft.Xna.Framework.Input.Keys)">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.EnableMouseCentering">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.MouseState">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.PreviousMouseState">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.MousePositionRaw">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.MousePositionDeltaRaw">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.MousePosition">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.MousePositionDelta">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.MouseWheelDelta">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsDown(DigitalRune.Game.Input.MouseButtons)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsDown(Microsoft.Xna.Framework.Input.MouseState@,DigitalRune.Game.Input.MouseButtons)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsUp(DigitalRune.Game.Input.MouseButtons)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsUp(Microsoft.Xna.Framework.Input.MouseState@,DigitalRune.Game.Input.MouseButtons)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsPressed(DigitalRune.Game.Input.MouseButtons,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsReleased(DigitalRune.Game.Input.MouseButtons)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Input.InputManager.IsDoubleClick(DigitalRune.Game.Input.MouseButtons)">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.TouchCollection">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Input.InputManager.Gestures">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.Input.InputSettings">
            <summary>
            Defines settings for the input service.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.Input.InputSettings.DoubleClickTime">
            <summary>
            Gets or sets the double click time interval which defines the time that is allowed between
            two clicks to still count as a double click.
            </summary>
            <value>
            The double click time interval. The default value is 500 ms.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputSettings.DoubleClickSize">
            <summary>
            Gets or sets the dimensions, in pixels, of the area within which the 
            user must click twice for the operating system to consider the two 
            clicks a double-click.
            </summary>
            <value>
            A 2-dimensional vector that indicates the dimensions, in pixels, of the 
            area within which the user must click twice to consider the two clicks 
            a double-click. The default value is (100, 100) on phones and (4, 4) 
            on other platforms.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputSettings.MouseCenter">
            <summary>
            Gets or sets the mouse center for the mouse centering.
            </summary>
            <value>The mouse center in pixels. The default values (300, 300).</value>
            <remarks>
            If <see cref="P:DigitalRune.Game.Input.IInputService.EnableMouseCentering"/> is <see langword="true"/>, the input
            service will reset the mouse position to <see cref="P:DigitalRune.Game.Input.InputSettings.MouseCenter"/> in each frame. This is 
            necessary, for example, for first-person shooters that need only relative mouse input.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.InputSettings.RepetitionDelay">
            <summary>
            Gets or sets the repetition start delay for virtual key or button presses.
            </summary>
            <value>The repetition start delay. The default value is 500 ms.</value>
            <remarks>
            If a key or button is held down for longer than the <see cref="P:DigitalRune.Game.Input.InputSettings.RepetitionDelay"/>, the input 
            service will start to generate virtual key/button presses at a rate defined by 
            <see cref="P:DigitalRune.Game.Input.InputSettings.RepetitionInterval"/>. (See <see cref="T:DigitalRune.Game.Input.IInputService"/> for more info.)
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.InputSettings.RepetitionInterval">
            <summary>
            Gets or sets the repetition interval for virtual key or button presses.
            </summary>
            <value>The repetition interval. The default value is 100 ms.</value>
            <remarks>
            If a key or button is held down for longer than the <see cref="P:DigitalRune.Game.Input.InputSettings.RepetitionDelay"/>,
            the input service will start to generate virtual key/button presses at a rate defined by 
            <see cref="P:DigitalRune.Game.Input.InputSettings.RepetitionInterval"/>. (See <see cref="T:DigitalRune.Game.Input.IInputService"/> for more info.)
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Input.InputSettings.ThumbstickThreshold">
            <summary>
            Gets or sets the thumbstick threshold for detecting thumbstick button presses.
            </summary>
            <value>
            The thumbstick threshold value in the range [0, 1]. A thumbstick axis counts as "down" if 
            its absolute value exceeds the threshold value. The default value is 0.5.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputSettings.TriggerThreshold">
            <summary>
            Gets or sets the trigger threshold for detecting button presses.
            </summary>
            <value>
            The trigger threshold value in the range [0, 1]. A trigger counts as "down" if its value 
            exceeds the threshold value. The default value is 0.2.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Input.InputSettings.GamePadDeadZone">
            <summary>
            Gets or sets the type of gamepad dead zone processing that is used for analog sticks
            of the gamepads. (Not available in Silverlight.)
            </summary>
            <value>
            The type of dead zone processing. The default value is
            <strong>GamePadDeadZone.IndependentAxes</strong>.
            </value>
        </member>
        <member name="M:DigitalRune.Game.Input.InputSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.Input.InputSettings"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.Input.LogicalPlayerIndex">
            <summary>
            Identifies a player.
            </summary>
            <remarks>
            See description of <see cref="T:DigitalRune.Game.Input.IInputService"/> (see section "Logical Players and Game 
            Controllers") to find out more.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.Input.LogicalPlayerIndex.Any">
            <summary>
            Any logical player. Use this value to check input on any game controller. (Note: Only game
            controllers that have been assigned to players are checked. Game controllers that are not
            assigned to a player are ignored.)
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.LogicalPlayerIndex.One">
            <summary>The first logical player.</summary>
        </member>
        <member name="F:DigitalRune.Game.Input.LogicalPlayerIndex.Two">
            <summary>The second logical player.</summary>
        </member>
        <member name="F:DigitalRune.Game.Input.LogicalPlayerIndex.Three">
            <summary>The third logical player.</summary>
        </member>
        <member name="F:DigitalRune.Game.Input.LogicalPlayerIndex.Four">
            <summary>The fourth logical player.</summary>
        </member>
        <member name="T:DigitalRune.Game.Input.ModifierKeys">
            <summary>
            Describes the pressed modifier keys.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.ModifierKeys.None">
            <summary>
            No modifier key is pressed.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.ModifierKeys.Alt">
            <summary>
            Alt is pressed.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.ModifierKeys.Control">
            <summary>
            Control is pressed.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.ModifierKeys.Shift">
            <summary>
            Shift is pressed.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.ModifierKeys.Apple">
            <summary>
            Apple key is pressed.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.ModifierKeys.Windows">
            <summary>
            Windows key is pressed.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.ModifierKeys.ChatPadGreen">
            <summary>
            ChatPadGreen is pressed.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.ModifierKeys.ChatPadOrange">
            <summary>
            ChatPadOrange is pressed.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.ModifierKeys.ShiftAlt">
            <summary>
            Shift and Alt are pressed.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.ModifierKeys.ControlAlt">
            <summary>
            Control and Alt are pressed.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.ModifierKeys.ControlShift">
            <summary>
            Control and Shift are pressed.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.ModifierKeys.ControlShiftAlt">
            <summary>
            Control, Shift and Alt are pressed.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.Input.MouseButtons">
            <summary>
            Identifies a mouse button. 
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.MouseButtons.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.MouseButtons.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.MouseButtons.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.MouseButtons.XButton1">
            <summary>
            The first additional mouse button.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.Input.MouseButtons.XButton2">
            <summary>
            The second additional mouse button.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.Input.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Game.Input"/> namespace provides types to read and process input
            from input devices, like gamepad, keyboard, mouse, touch devices, etc.
            </summary>
        </member>
    </members>
</doc>
