<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sceelix.Core</name>
    </assembly>
    <members>
        <member name="T:Sceelix.Core.Annotations.EntityAttribute">
            <summary>
            Identifies this class as entity that can be reflected upon.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Annotations.EntityAttribute.#ctor(System.String)">
            <summary>
            Indicates name as it appears in ports, documentation, selection boxes, etc.
            </summary>
            <param name="readableName"></param>
        </member>
        <member name="P:Sceelix.Core.Annotations.EntityAttribute.Name">
            <summary>
            A more human-readable name, as it appears in ports, documentation, 
            selection boxes, etc.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.EntityAttribute.TypeBrowsable">
            <summary>
            Indicates if this entity should be listed as
            a manipulable type, for example in the Type
            conditional parameter. Default is true.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Annotations.ParameterAttribute.#ctor(System.String)">
            <summary>
            Creates an attribute with default guid.
            </summary>
            <param name="guid"></param>
        </member>
        <member name="P:Sceelix.Core.Annotations.ParameterAttribute.Author">
            <summary>
            Author/Creator of the procedure.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ParameterAttribute.Category">
            <summary>
            Category of the procedure.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ParameterAttribute.Description">
            <summary>
            Description of the procedure. 
            If set, it will overwrite defined code comments.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ParameterAttribute.Guid">
            <summary>
            Unique identifier of the procedure.
            Should be a textual representation of a Guid instance.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ParameterAttribute.HexColor">
            <summary>
            Color code associated to the procedure in hexadecimal (without the #). 
            Check http://www.2createawebsite.com/build/hex-colors.html for color codes.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ParameterAttribute.IsDummy">
            <summary>
            Indicates if this node is executable or not.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ParameterAttribute.Label">
            <summary>
            Default label of the node.
            If not defined, the class name of the procedure will be used.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ParameterAttribute.ObsoleteAttribute">
            <summary>
            Obsolete tag defined at the procedure.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ParameterAttribute.Remarks">
            <summary>
            Remarks of the procedure. 
            If set, it will overwrite defined code remarks.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ParameterAttribute.Tags">
            <summary>
            Tags associated to this procedure
            (for indexing and searching)
            </summary>
        </member>
        <member name="M:Sceelix.Core.Annotations.ProcedureAttribute.#ctor(System.String)">
            <summary>
            Creates an attribute with default guid.
            </summary>
            <param name="guid"></param>
        </member>
        <member name="P:Sceelix.Core.Annotations.ProcedureAttribute.Author">
            <summary>
            Author/Creator of the procedure.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ProcedureAttribute.Category">
            <summary>
            Category of the procedure.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ProcedureAttribute.Description">
            <summary>
            Description of the procedure. 
            If set, it will overwrite defined code comments.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ProcedureAttribute.Guid">
            <summary>
            Unique identifier of the procedure.
            Should be a textual representation of a Guid instance.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ProcedureAttribute.HexColor">
            <summary>
            Color code associated to the procedure in hexadecimal (without the #). 
            Check http://www.2createawebsite.com/build/hex-colors.html for color codes.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ProcedureAttribute.IsDummy">
            <summary>
            Indicates if this procedures is executable or not.
            Dummy procedures are excluded from graph executions.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ProcedureAttribute.Label">
            <summary>
            Default label of the node.
            If not defined, the class name of the procedure will be used.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ProcedureAttribute.ObsoleteAttribute">
            <summary>
            Obsolete tag defined at the procedure.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ProcedureAttribute.Remarks">
            <summary>
            Remarks of the procedure. 
            If set, it will overwrite defined code remarks.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Annotations.ProcedureAttribute.Tags">
            <summary>
            Tags associated to this procedure
            (for indexing and searching)
            </summary>
        </member>
        <member name="M:Sceelix.Core.Attributes.AttributeCollection.ComplementAttributesTo(Sceelix.Core.Attributes.AttributeCollection)">
            <summary>
            Add those attributes that do not exist in the target. The check is performed by attribute name.
            It works like a merge operation. For those attributes whose names already exist in the target collection, the value is not added.
            </summary>
            <param name="targetAttributeCollection"></param>
        </member>
        <member name="M:Sceelix.Core.Attributes.AttributeCollection.MergeAttributesTo(Sceelix.Core.Attributes.AttributeCollection)">
            <summary>
            Merge the attributes that do not exist in the target. The check is performed by attribute name.
            It works like a merge operation. For those attributes whose names already exist in the target collection, the value is not added.
            </summary>
            <param name="targetAttributeCollection"></param>
        </member>
        <member name="M:Sceelix.Core.Attributes.AttributeCollection.ReplaceAttributesOn(Sceelix.Core.Attributes.AttributeCollection)">
            <summary>
            Adds entries from this collection to the the target collection, replacing them if they already exist.
            Both names and values are cloned.
            </summary>
            <param name="targetAttributeCollection"></param>
        </member>
        <member name="M:Sceelix.Core.Attributes.AttributeCollection.SetAttributesTo(Sceelix.Core.Attributes.AttributeCollection)">
            <summary>
            Deletes all the entries on the target collection and replaces with the ones on this one.
            Both names and values are cloned.
            </summary>
            <param name="targetAttributeCollection"></param>
        </member>
        <member name="M:Sceelix.Core.Attributes.AttributeCollection.TryGet(System.Object)">
            <summary>
            Tries to get the value that corresponds to the given key. Returns null if none exists.
            </summary>
            <param name="key">The key.</param>
            <returns>The corresponding value for the given key, or null if none exists.</returns>
        </member>
        <member name="T:Sceelix.Core.Data.Entity">
            <summary>
            The Sceelix entity is the abstract superclass of all objects that intend to be manipulated by Sceelix procedures.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Data.Entity.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Data.Entity.SubEntityTree">
            <summary>
            Gets the SubEntities that can be reached from this entity.
            </summary>
            <value>The sub entity tree.</value>
        </member>
        <member name="M:Sceelix.Core.Data.Entity.DeepClone">
            <summary>
            Performs a deep clone, starting with a MemberwiseClone and then deep cloning the AttributeCollection.
            </summary>
            <returns>The cloned Entity.</returns>
        </member>
        <member name="M:Sceelix.Core.Data.Entity.GetDisplayName(System.Type)">
            <summary>
            Gets a prettier display name for the given entity type. Does so by getting the EntityAttribute defined on the class.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns>A string with a prettier display name for the given entity type.</returns>
        </member>
        <member name="M:Sceelix.Core.Graphs.Functions.FunctionManager.GetRegisteredFunctionByGroup">
             <summary>
            Gets names of available, non-obsolete functions names, ordered by their class name (group).
             </summary>
             <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Graphs.Functions.FunctionManager.GetRegisteredFunctionNames">
             <summary>
            Gets names of available, non-obsolete functions names.
             </summary>
             <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Graphs.Functions.FunctionManager.GetRegisteredStaticFunction(System.String,System.Int32)">
            <summary>
            Gets the static function object with the given name and number of arguments (whereas this number should exclude those that will need to be injected)
            </summary>
            <param name="name"></param>
            <param name="argNumber"></param>
            <returns></returns>
        </member>
        <member name="T:Sceelix.Core.Graphs.Functions.Rand">
            <summary>
            Problem with this approach: It is not extensible as the randomprocedure is...
            </summary>
        </member>
        <member name="T:Sceelix.Core.Graphs.Expressions.LocalAttributeExpressionNode">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:Sceelix.Core.Graphs.Edge.IsStructurallyEqual(Sceelix.Core.Graphs.Edge)">
            <summary>
            Verifies if this edge has the same connections as the given edge, i.e.
            if they are connecting the same port indices between nodes of equal
            guids. Useful to make comparisons between edges of cloned graphs.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Graphs.Graph.AddNode(Sceelix.Core.Graphs.Node)">
            <summary>
            Adds the node to the graph, initializes it and returns it back.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Sceelix.Core.Graphs.Graph.CleanupUpParameters">
            <summary>
            Removes any aspects that are not references by any of the nodes.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Graphs.Graph.GetStructurallyEqual(System.Object)">
            <summary>
            Gets the node, edge or port (which may belong to a different graph) that is structurally equal in this graph.
            </summary>
            <param name="element"></param>
            <returns>Element that is structurally equal to the input, or null if it does not exist.</returns>
            <exception cref="T:System.ArgumentException">If the element is not a node, edge or port.</exception>
        </member>
        <member name="M:Sceelix.Core.Graphs.Graph.Incorporate(Sceelix.Core.Graphs.Graph,Sceelix.Core.Graphs.Point)">
            <summary>
            Merges a graph into this one.
            </summary>
            <param name="otherGraph"></param>
            <param name="point"></param>
        </member>
        <member name="M:Sceelix.Core.Graphs.Graph.RefactorReferencedFile(Sceelix.Core.Environments.IProcedureEnvironment,System.String,System.String)">
            <summary>
            Refactors references to the indicated file. Looks into graph parameters and node parameters.
            </summary>
            <param name="procedureEnvironment">The procedure environment (used for loading resources).</param>
            <param name="originalPath">The original file path.</param>
            <param name="replacementPath">The new file path.</param>
            <returns>The number of reference that were found.</returns>
        </member>
        <member name="M:Sceelix.Core.Graphs.Graph.RefactorReferencedFolder(Sceelix.Core.Environments.IProcedureEnvironment,System.String,System.String)">
            <summary>
            Refactors references to the indicated folder. Looks into graph parameters and node parameters.
            </summary>
            <param name="procedureEnvironment">The procedure environment (used for loading resources).</param>
            <param name="originalPath">The original folder path.</param>
            <param name="replacementPath">The new folder path.</param>
            <returns>The number of reference that were found.</returns>
        </member>
        <member name="P:Sceelix.Core.Graphs.InputPort.Shape">
            <inheritdoc />
        </member>
        <member name="M:Sceelix.Core.Graphs.Node.CreateParameterizedProcedure(Sceelix.Core.Environments.IProcedureEnvironment,Sceelix.Core.Procedures.Procedure)">
            <summary>
            Creates a fully parameterized procedure to which this node refers to.
            </summary>
            <param name="procedureEnvironment"></param>
            <param name="masterProcedure"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Graphs.Node.CreateProcedure(Sceelix.Core.Environments.IProcedureEnvironment)">
            <summary>
            Creates an instance of the procedure to which this node refers to.
            </summary>
            <param name="loadEnvironment"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Graphs.Node.DeepClone">
            <summary>
            Creates a disconnected (no edge connections are cloned) clone of the node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Graphs.Node.GenerateCSharpCallCode">
            <summary>
            Clones the node interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Graphs.Node.HasReferenceToParameter(System.String)">
            <summary>
            Checks if the node has any references to the given parameter.
            </summary>
            <param name="label">Label of the parameter.</param>
            <returns>True it has any reference or false otherwise.</returns>
        </member>
        <member name="M:Sceelix.Core.Graphs.Node.Initialize(Sceelix.Core.Graphs.Graph,System.Int32)">
            <summary>
            Loads the default arguments, links and ports from the procedure signature (or interface).
            </summary>
            <param name="procedure"></param>
        </member>
        <member name="M:Sceelix.Core.Graphs.Node.IsParentOf(Sceelix.Core.Graphs.Node)">
            <summary>
            Verifies if this node is the parent (directly or indirectly) of the given node. 
            If the nodes are the same, it returns false.
            </summary>
            <param name="otherNode"></param>
            <returns>True if there is a direct or indirect connection from this node to the given one, or false otherwise (this includes if they are the same node).</returns>
        </member>
        <member name="M:Sceelix.Core.Graphs.Node.IsStructurallyEqual(Sceelix.Core.Graphs.Node)">
            <summary>
            Verifies if this node has the same guid as the given one.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Graphs.Node.RefactorParameterReferences(System.String,System.String)">
            <summary>
            Refactors a parameter label from the node.
            </summary>
            <param name="oldLabel">Old label of the parameter.</param>
            <param name="newLabel">New label of the parameter.</param>
        </member>
        <member name="M:Sceelix.Core.Graphs.Node.RefactorReferencedPaths(Sceelix.Core.Resources.ResourceManager,System.String,System.String)">
            <summary>
            Renames node and parameter references to the indicated, new filepaths.
            </summary>
            <param name="resourceManager"></param>
            <param name="origin"></param>
            <param name="destination"></param>
        </member>
        <member name="P:Sceelix.Core.Graphs.Node.IsIsolated">
            <summary>
            A node is isolated if it has no incoming or outcoming edges
            </summary>
        </member>
        <member name="P:Sceelix.Core.Graphs.Node.IsTransferNode">
            <summary>
            A node is called a "TransferNode" if it has exactly one input and one output, both being of the same type
            </summary>
        </member>
        <member name="P:Sceelix.Core.Graphs.Node.IsSourceNode">
            <summary>
            Indicates if the node does not have native input ports. 
            Activated impulse ports do not count - even if it is activated, this will return true. 
            </summary>
        </member>
        <member name="P:Sceelix.Core.Graphs.Node.HasInputPorts">
            <summary>
            Indicates if the node has currently any input ports (impulse ports included).
            </summary>
        </member>
        <member name="P:Sceelix.Core.Graphs.Node.HasImpulsePort">
            <summary>
            Indicates if this node has an impulse port.
            If set to true, a new impulse port will be assigned (and made available through the ImpulsePort property) add added to the list of input ports.
            If set to false, the ImpulsePort property will be made null and the port removed from the list of inputs.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Graphs.Node.ImpulsePort">
            <summary>
            Returns the created impulse port, of null, if it has not been set.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Graphs.Node.DisableInSubgraphs">
            <summary>
            Indicates if the node should not be executed in the parent graph is being used as a subgraph.
            In practice, only available for source nodes at this point.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Graphs.Node.ActuallyDisabledInSubgraph">
            <summary>
            Result of combinining the user intent through the DisableInSubgraph property
            and the necessary conditions for it to be disabled (i.e. must be a source node with no impulse ports).
            </summary>
        </member>
        <member name="P:Sceelix.Core.Graphs.OutputPort.Shape">
            <inheritdoc />
        </member>
        <member name="M:Sceelix.Core.Graphs.Port.IsStructurallyEqual(Sceelix.Core.Graphs.Port)">
            <summary>
            Verifies if this port is located on the same node (with the same guid) and index as another node. 
            Useful to make comparisons between ports of cloned graphs.
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Graphs.Port.LoadPorts(System.Xml.XmlNode,System.String,System.Collections.Generic.List{Sceelix.Core.Graphs.Port})">
            <summary>
            I'm making a duplicate function for the other type of port, because they will soon have other distinct 
            </summary>
            <param name="xmlNode"></param>
            <param name="ports"></param>
        </member>
        <member name="P:Sceelix.Core.Graphs.Port.Shape">
            <summary>
            Indicates the shape of this port: "Square" (for collective nodes) and "Circle" (for single nodes)
            </summary>
        </member>
        <member name="P:Sceelix.Core.Graphs.Port.Nature">
            <summary>
            For input ports, values are "Single" and "Collective".
            For output ports, values are only "Output"
            </summary>
        </member>
        <member name="P:Sceelix.Core.Graphs.ComponentNode.ProcedureType">
            <summary>
            Renames node and parameter references to the indicated, new filepaths.
            </summary>
            <param name="origin"></param>
            <param name="destination"></param>
        </member>
        <member name="P:Sceelix.Core.Graphs.SystemNode.Tags">
            <summary>
            Gets the tags of the node. Tries getting the ones defined in the procedure attribute. If it can't it fetches the dynamically defined ones.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Parameters.Infos.ParameterInfo.#ctor(System.Xml.XmlNode)">
            <summary>
            Creates a new parameterinfo from an XML node
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="P:Sceelix.Core.Parameters.Infos.ParameterInfo.CanHaveRecursiveItem">
            <summary>
            Indicates if this parameterInfo can include recursive infos. Usually applies to lists only.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Infos.ParameterInfo.CanHaveSubItems">
            <summary>
            Indicates whether ParameterInfos associated to this editor can have sub items (like lists and compounds do).
            </summary>
            <value>
              <c>true</c> if this instance can have sub items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sceelix.Core.Parameters.Infos.ParameterInfo.Identifier">
            <summary>
            Identifier representation of the Label (no spaces)
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Infos.ParameterInfo.InputPorts">
            <summary>
            Gets the input ports directly defined in this parameter.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Infos.ParameterInfo.ItemModels">
            <summary>
            Gets the SubParameters that serve as models. Used for documentation generation purposes.
            For instance, for listparameters, the models are returned. For compoundparameters, the fields are returned. 
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Infos.ParameterInfo.MetaType">
            <summary>
            Gets a human readable name for the parameter (ex. "Int", "File", "List")
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Infos.ParameterInfo.OutputPorts">
            <summary>
            Gets the output ports directly defined in this parameter.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Infos.ParameterInfo.Root">
            <summary>
            Root parameter that lies on the base of this one.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Infos.ParameterInfo.SubInputPortTree">
            <summary>
            Gets the input ports defined in this parameter and subparameters.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Infos.ParameterInfo.SubOutputPortTree">
            <summary>
            Gets the output ports defined in this parameter and subparameters.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Parameters.Infos.ParameterInfo.ClearExpressions">
            <summary>
            Goes down the parameter tree from this parameter, setting all the parameters to fixed values (i.e. removing all the expressions).
            </summary>
        </member>
        <member name="M:Sceelix.Core.Parameters.Infos.ParameterInfo.CloneModel(System.Boolean)">
            <summary>
            Clones the parameter. Only to be used by parameters that handle parameter info MODELS (such as the ListParameterInfo).
            Only needs to be overriden by parameters that have children (such as the ListParameterInfo or the CompoundParameterInfo).
            </summary>
            <param name="resolveRecursiveParameter">if set to <c>true</c> [resolve recursive parameter].</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Parameters.Infos.ParameterInfo.GetSubtree(System.Boolean)">
            <summary>
            Gets an flat enumeration of all items and subitems of this parameter.
            </summary>
            <param name="stopAtExpressionParameters">If true, it will not return subitems if the parameter is an expression.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Parameters.Infos.ParameterInfo.GetThisAndSubtree(System.Boolean)">
            <summary>
            Gets an flat enumeration of all items and subitems of this parameter, starting with itself.
            </summary>
            <param name="stopAtExpressionParameters">If true, it will not return subitems if the parameter is an expression.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Parameters.Infos.ParameterInfo.ReadArgumentXML(System.Xml.XmlNode,Sceelix.Core.Environments.IProcedureEnvironment)">
            <summary>
            Reads the values/expressions set as arguments of a parameter
            </summary>
            <param name="xmlNode"></param>
            <param name="procedureEnvironment"></param>
        </member>
        <member name="M:Sceelix.Core.Parameters.Infos.ParameterInfo.RefactorReferencedFile(Sceelix.Core.Environments.IProcedureEnvironment,System.String,System.String)">
            <summary>
            Refactors references to the indicated file.
            </summary>
            <param name="procedureEnvironment">The procedure environment (used for loading resources).</param>
            <param name="originalPath">The original file path.</param>
            <param name="replacementPath">The new file path.</param>
            <returns>True if the reference was found, false otherwise.</returns>
        </member>
        <member name="M:Sceelix.Core.Parameters.Infos.ParameterInfo.RefactorReferencedFolder(Sceelix.Core.Environments.IProcedureEnvironment,System.String,System.String)">
            <summary>
            Refactors references to the indicated folder.
            </summary>
            <param name="procedureEnvironment">The procedure environment (used for loading resources).</param>
            <param name="originalPath">The original folder path.</param>
            <param name="replacementPath">The new folder path.</param>
            <returns>True if the reference was found, false otherwise.</returns>
        </member>
        <member name="M:Sceelix.Core.Parameters.Infos.ParameterInfo.StructurallyEqual(Sceelix.Core.Parameters.Infos.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Parameters.Infos.ParameterInfo.WriteXMLDefinition(System.Xml.XmlWriter)">
            <summary>
            Writes the whole parameter definition (for the graph parameters).
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Sceelix.Core.Parameters.Infos.FileParameterInfo.ExtensionFilter">
            <summary>
            Array of file extensions, with (Ex. .txt, .jpg)
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Infos.StringParameterInfo.IsPassword">
            <summary>
            Indicates if the value should be treated as a password
            (it will be hidden and encrypted).
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Infos.StringParameterInfo.MaxLength">
            <summary>
            Maximum size that the input string allows. 0 means no limit.
            The input value will be trimmed if larger than the allowed value.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.ParameterManager.ParameterTypes">
            <summary>
            List of all types of derived classes from this Parameter class.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Parameters.SingleInputParameter`1">
            <summary>
            Provides a single input.
            </summary>
            <typeparam name="T">Type of entity that this input will process.</typeparam>
            <seealso cref="T:Sceelix.Core.Parameters.InputParameter`1" />
        </member>
        <member name="F:Sceelix.Core.Parameters.SingleInputParameter`1._input">
            <summary>
            Overridden.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Parameters.DualInputParameter`1">
            <summary>
            Provides two single inputs.
            </summary>
            <typeparam name="T">Type of entities that these inputs will process.</typeparam>
            <seealso cref="T:Sceelix.Core.Parameters.InputParameter`1" />
        </member>
        <member name="F:Sceelix.Core.Parameters.DualInputParameter`1._input1">
            <summary>
            Overridden.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Parameters.DualInputParameter`1._input2">
            <summary>
            Overridden.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Parameters.CollectiveInputParameter`1">
            <summary>
            Provides a collective input.
            </summary>
            <typeparam name="T">Type of entity that this input will process.</typeparam>
            <seealso cref="T:Sceelix.Core.Parameters.InputParameter`1" />
        </member>
        <member name="F:Sceelix.Core.Parameters.CollectiveInputParameter`1._input">
            <summary>
            Overridden.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Parameters.SingleOrCollectiveInputChoiceParameter`1">
            <summary>
            Gives the choice between a "Single" or a "Collective" input.
            </summary>
            <typeparam name="T">Type of entity that these inputs will process.</typeparam>
            <seealso cref="T:Sceelix.Core.Parameters.ListParameter" />
        </member>
        <member name="M:Sceelix.Core.Parameters.SingleOrCollectiveInputChoiceParameter`1.#ctor(System.String,System.String)">
            <summary>
            Constructor of this compound input choice.
            </summary>
            <param name="label">Label of the parameter</param>
            <param name="defaultSelection">"Single" or "Collective"</param>
        </member>
        <member name="M:Sceelix.Core.Parameters.SingleOrCollectiveInputChoiceParameter`1.Read">
            <summary>
            gets the input data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sceelix.Core.Parameters.DualOrCollectiveInputChoiceParameter`1">
            <summary>
            Gives the choice between a "Dual" or a "Collective" input.
            </summary>
            <typeparam name="T">Type of entity that these inputs will process.</typeparam>
            <seealso cref="T:Sceelix.Core.Parameters.ListParameter" />
        </member>
        <member name="M:Sceelix.Core.Parameters.DualOrCollectiveInputChoiceParameter`1.#ctor(System.String,System.String)">
            <summary>
            Constructor of this compound input choice.
            </summary>
            <param name="label">Label of the parameter</param>
            <param name="defaultSelection">"Dual" or "Collective"</param>
        </member>
        <member name="M:Sceelix.Core.Parameters.DualOrCollectiveInputChoiceParameter`1.Read">
            <summary>
            gets the input data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sceelix.Core.Parameters.ParameterCollection">
            <summary>
            A read-only collection of Parameters.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Parameters.AttributeParameter._attributeKey">
            <summary>
            The attribute name and details.
            This is simply a placeholder to avoid doing the value processing all the time.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.AttributeParameter.IsMapped">
            <summary>
            Indicates if an attribute name was indicated, i.e. if there is actually the intent to store any data to this attribute.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.AttributeParameter.Item(Sceelix.Core.Data.IEntity)">
            <summary>
            Returns the value in the entity for this attribute.
            </summary>
            <param name="obj">Entity which should contain the attribute.</param>
            <returns>The value for the attribute, or null, if the attribute is not defined in this entity.</returns>
        </member>
        <member name="M:Sceelix.Core.Parameters.AttributeParameter.GetAttributeName(System.String)">
            <summary>
            
            </summary>
            <param name="attributeValue"></param>
            <returns></returns>
        </member>
        <member name="P:Sceelix.Core.Parameters.AttributeParameter`1.Item(Sceelix.Core.Data.IEntity)">
            <summary>
            Gets or sets the value the attribute for the given entity.
            </summary>
            <param name="obj">Entity whose attribute is to be set/get.</param>
            <returns></returns>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.Description">
            <summary>
            Description of what this parameter controls or does. 
            If set, it will overwrite defined code comments.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.EntityEvaluation">
            <summary>
            Indicates whether this parameter value will be evaluated based on individual entity or subentity properties/attributes
            inside the procedure, as opposed to be evaluated on each procedure round.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.Identifier">
            <summary>
            The identifier of this parameter, following the standards of most programming languages:
            Starts with a letter, aftewards contains only alphanumeric characters, with no spaces or special characters. 
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.IsExpression">
            <summary>
            Indicates whether this parameter is set as an expression. It can be set as true in the procedure definition to 
            force the parameter to appear as an expression by default.
            </summary>
            <value> <c>true</c> if this instance is expression; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.IsPublic">
            <summary>
            Indicates if the parameter will be visible and accessible externally. Default is true.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.Label">
            <summary>
            Label of the aspect. Must be unique within its procedure.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.Logger">
            <summary>
            A shortcut to the ProcedureEnvironment.Logger..
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.Messenger">
            <summary>
            A shortcut to the ProcedureEnvironment.Messenger.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.ParameterAncestors">
            <summary>
            A list of all the parameter parents and their parents, ordered from the least distant parent to the most. 
            The parameter itself is not included, even if it a root.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.Parent">
            <summary>
            The parent of this parameter. Could be another parameter (if this is a subparameter) or a procedure.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.Procedure">
            <summary>
            Procedure to which this parameter belongs.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.ProcedureEnvironment">
            <summary>
            The ProcedureEnvironment defined for the procedure that this parameter belongs to.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.Resources">
            <summary>
            A shortcut to the ProcedureEnvironment.Resources.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.Root">
            <summary>
            Root parameter that lies on the base of this one. Returns itself if it is the root.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.SubInputs">
            <summary>
            The direct inputs of this parameters.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.SubInputTree">
            <summary>
            Gets all the outputs from this parameter and subparameters down the tree.
            If a parameter is an expression (or non-public) at some point, the search stops there.
            </summary>
            <value></value>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.SubOutputs">
            <summary>
            The direct outputs of this parameter.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.SubOutputTree">
            <summary>
            Gets all the outputs from this parameter and subparameters down the tree.
            If a parameter is an expression (or non-public)  at some point, the search stops there.
            </summary>
            <value></value>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.SubParameters">
            <summary>
            The direct subparameters of this parameter.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.Parameter.SubParameterTree">
            <summary>
            Gets all the parameters from this parameter and others down the tree.
            
            If a parameter is an expression at some point, the search stops there.
            </summary>
            <value></value>
        </member>
        <member name="M:Sceelix.Core.Parameters.Parameter.Evaluate(Sceelix.Core.IO.InputData)">
            <summary>
            Evaluates the expression, if defined.
            </summary>
            <param name="inputData"></param>
        </member>
        <member name="M:Sceelix.Core.Parameters.Parameter.Get">
            <summary>
            Obtains the value in the parameter.
            Each parameter subclass overrides its implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Parameters.Parameter.GetIdentifier(System.String)">
            <summary>
            Static function that determines the identifier of a parameter from its defined label.
            </summary>
            <param name="label">Label of the parameter</param>
            <returns>The identifier of this parameter, following the standards of most programming languages: Starts with a letter, aftewards 
            contains only alphanumeric characters, with no spaces or special characters. </returns>
        </member>
        <member name="M:Sceelix.Core.Parameters.Parameter.Set(System.Object)">
            <summary>
            Sets the value of the parameter.
            Each subclass overrides this function, providing specific behavior.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sceelix.Core.Parameters.Parameter.SetExpression(System.Func{Sceelix.Core.IO.InputData,Sceelix.Core.Data.IEntity,System.Object})">
            <summary>
            Sets an expression to be evaluated for each round.
            </summary>
            <param name="expression">The expression to be evaluated, or null to use the assigned (default) fixed value.</param>
        </member>
        <member name="P:Sceelix.Core.Parameters.ParameterReferenceCollection.Count">
            <summary>
            The number of ParameterReferences in this collection.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.ParameterReferenceCollection.Item(System.String)">
            <summary>
            Gets the ParameterReference with the indicated label.
            </summary>
            <param name="label">Label that identifies the ParameterReference.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No ParameterReference with such a label exists.</exception>
            <returns>The ParameterReference with the indicated label</returns>
        </member>
        <member name="P:Sceelix.Core.Parameters.ParameterReferenceCollection.Item(System.Int32)">
            <summary>
            Gets the ParameterReference at the indicated index.
            </summary>
            <param name="label">Index where the ParameterReference can be found.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No ParameterReference with such a label exists.</exception>
            <returns>The OutputReference at the indicated index.</returns>
        </member>
        <member name="M:Sceelix.Core.Parameters.CompoundParameter.ReadSubclassFields">
            <summary>
            Reads the subclass fields. This function is automatically called from the CompoundParameter to get the defined parameters using reflection.
            In the sole case that parameters are edited in the parameter's constructor, this function can be called again.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.DoubleParameter.DecimalDigits">
            <summary>
            The number of decimal digits that will be 
            shown by default in the numeric control.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.DoubleParameter.Increment">
            <summary>
            The amount that will be incremented/decremented when a user
            clicks to increase/decrease the value.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.DoubleParameter.MaxValue">
            <summary>
            Optional: The maximum value accepted by this parameter.
            If a higher value attempts to be set, this value will be used instead.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.DoubleParameter.MinValue">
            <summary>
            Optional: The minimum value accepted by this parameter.
            If a lower value attempts to be set, this value will be used instead.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.FloatParameter.DecimalDigits">
            <summary>
            The number of decimal digits that will be 
            shown by default in the numeric control.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.FloatParameter.Increment">
            <summary>
            The amount that will be incremented/decremented when a user
            clicks to increase/decrease the value.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.FloatParameter.MaxValue">
            <summary>
            Optional: The maximum value accepted by this parameter.
            If a higher value attempts to be set, this value will be used instead.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.FloatParameter.MinValue">
            <summary>
            Optional: The minimum value accepted by this parameter.
            If a lower value attempts to be set, this value will be used instead.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.IntParameter.Increment">
            <summary>
            The amount that will be incremented/decremented when a user
            clicks to increase/decrease the value.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.IntParameter.MaxValue">
            <summary>
            Optional: The maximum value accepted by this parameter.
            If a higher value attempts to be set, this value will be used instead.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.IntParameter.MinValue">
            <summary>
            Optional: The minimum value accepted by this parameter.
            If a lower value attempts to be set, this value will be used instead.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Parameters.FolderParameter.SetData(System.Object)">
            <summary>
            Sets the value of the parameter.
            </summary>
            <param name="value">A string value containing a valid path. If the IOOperation is Load and the path does not exist, an exception is thrown.</param>
        </member>
        <member name="T:Sceelix.Core.Parameters.IOOperation">
            <summary>
            Enum IOOperation: describes if we are performing a loading or saving operation.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Parameters.FileParameter.#ctor(System.String,System.String)">
            <summary>
            FileParameter constructor.
            </summary>
            <param name="label">Label of the parameter. May contain spaces and special chars. </param>
            <param name="defaultValue">Default value (a file path) of the parameter.</param>
        </member>
        <member name="M:Sceelix.Core.Parameters.FileParameter.#ctor(System.String,System.String,System.String[])">
            <summary>
            FileParameter constructor.
            </summary>
            <param name="label">Label of the parameter. May contain spaces and special chars. </param>
            <param name="defaultValue">Default value (a file path) of the parameter.</param>
            <param name="extensions">Array of file extensions and/or descriptions (Ex. ".txt", "Image|.jpg", "Image file |.bmp, .png")</param>
        </member>
        <member name="P:Sceelix.Core.Parameters.FileParameter.ExtensionFilter">
            <summary>
            Array of file extensions and/or descriptions (Ex. ".txt", "Image|.jpg", "Image file |.bmp, .png") 
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.FileParameter.IOOperation">
            <summary>
            Indicates the type of operation, i.e. if we are loading or saving the file.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Parameters.FileParameter.SetData(System.Object)">
            <summary>
            Sets the value of the parameter.
            </summary>
            <param name="value">A string value containing a valid path. If the IOOperation is Load and the path does not exist, an exception is thrown.</param>
        </member>
        <member name="M:Sceelix.Core.Parameters.FileParameter.ToParameterInfo">
            <summary>
            Creates a ParameterInfo based on this paramter.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sceelix.Core.Parameters.ObjectParameter">
            <summary>
            A parameter that accepts any type of data. Is set as an expression by default.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Parameters.ObjectParameter`1">
            <summary>
            A parameter that accepts any type of data. Is set as an expression by default.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.ListParameter.IsExpandedAsDefault">
            <summary>
            Defines if the list subitems should be expanded when the list first created.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.ListParameter.MaxSize">
            <summary>
            Maximum size of the list.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Parameters.ListParameter.InitializeDictionary">
            <summary>
            Initializes the Dictionary that links name to the creation function.
            This is not executed in the constructor because it could, in some cases, result in endless recursive constructor calls.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.StringParameter.IsPassword">
            <summary>
            Indicates if the value should be treated as a password
            (it will be hidden and encrypted).
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.StringParameter.MaxLength">
            <summary>
            Maximum size that the input string allows. 0 means no limit.
            The input value will be trimmed if larger than the allowed value.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.ParameterReference.Description">
            <summary>
            The description of this parameter.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.ParameterReference.Inputs">
            <summary>
            The collection of direct inputs of this paramter.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.ParameterReference.IsEntityEvaluation">
            <summary>
            Indicates whether this parameter value will be evaluated based on individual entity or subentity properties/attributes
            inside the procedure, as opposed to be evaluated on each procedure round.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.ParameterReference.IsExpression">
            <summary>
            Indicates if the parameter is currently set to use expression evalution (as opposed to a fixed value). 
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.ParameterReference.Label">
            <summary>
            The label of this parameter.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.ParameterReference.Outputs">
            <summary>
            The collection of direct outputs of this paramter.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Parameters.ParameterReference.Parameters">
            <summary>
            The collection of direct, public subparameters of this parameter.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Parameters.ParameterReference.Get">
            <summary>
            Gets the value currently set for this parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Parameters.ParameterReference.Set(System.Object)">
            <summary>
            Sets a fixed value of the parameter, while disabling expression evalution.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sceelix.Core.Parameters.ParameterReference.SetExpression(System.Func{Sceelix.Core.IO.InputData,Sceelix.Core.Data.IEntity,System.Object})">
            <summary>
            Sets this parameter to the indicated expression. Sets the parameter mode to expression evalution.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="T:Sceelix.Core.Procedures.SourceProcedure`1">
            <summary>
            This is just a specialization of the standard SystemProcedure, for those cases where there is 
            only one output of a type, which can create entities "from nothing", i.e. just based on a set of parameters. 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Sceelix.Core.Procedures.SourceProcedure`1._output">
            <summary>
            The procedure's only output.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.SystemProcedureManager._systemProcedureTypes">
            <summary>
            Data for system procedure instantiation
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.GraphProcedure.Environment">
            <summary>
            Environment that defines resource location and other environment-specific settings.
            Should be set after the procedure is instantiated. Will set the value for all child
            procedures.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure">
            <summary>
            Performs attribute manipulation on entities, between entities and within subentities.
            This procedure includes different operations that handle attributes. Some, such as the "Set" include subparameters
            with further customization and inputs/outputs. 
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure._parameterAttributeOperation">
            <summary>
            Type of attribute operation to perform.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter">
            <summary>
            Creates/changes attribute values on entities. Source values and destination attributes can be determined and many different ways.
            For instance, choosing Origin="Entity" and Destination="Self", an entity can set its own attributes from fixed values or expressions.
            Yet by choosing Origin="Entity Collection" and Destination="Others", it is possible to grab a list of values, aggregate them and store
            them in attributes of other entities.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter._parameterOrigin">
            <summary>
            The entity/entities that define the source values to be set. 
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.EntityOriginParameter">
            <summary>
            Entity from which the value will be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.EntityOriginParameter._input">
            <summary>
            Entity that holds attribute values to be read.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.EntityOriginParameter._output">
            <summary>
            Entity that holds the attribute values that were read from or written to.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.EntityOriginParameter._parameterValue">
            <summary>
            Value to be set. Can be set as an expression involving fixed values, graph parameters or input entity attributes.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.EntityOriginParameter._parameterDestination">
            <summary>
            The entity/entities where the attributes are to be set. 
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.EntityCollectionOriginParameter">
            <summary>
            Entity collection from which the value will be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.EntityCollectionOriginParameter._input">
            <summary>
            Entities that hold the attribute values to be read.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.EntityCollectionOriginParameter._output">
            <summary>
            Entities that hold the attribute values that were read from or written to.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.EntityCollectionOriginParameter._parameterValue">
            <summary>
            Value to be set. Can be set as an expression involving fixed values, graph parameters or input entity attributes.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.EntityCollectionOriginParameter._parameterDestination">
            <summary>
            The entity/entities where the attributes are to be set. 
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.SelfParameter">
            <summary>
            The entity on which the value will be stored is the same as the origin.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.SelfParameter._parameterDestination">
            <summary>
            The attribute to be set.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.OtherParameter">
            <summary>
            Entity on which the value will be stored.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.OtherParameter._input">
            <summary>
            The entity whose attribute is to be set.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.OtherParameter._output">
            <summary>
            The entity whose attribute was set.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.OtherParameter._destinationParameter">
            <summary>
            The attribute to be set.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.OthersParameter">
            <summary>
            Entity collection on which the value will be stored.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.OthersParameter._input">
            <summary>
            The entities whose attribute is to be set.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.OthersParameter._output">
            <summary>
            The entities whose attribute was set.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.SetAttributeParameter.OthersParameter._parameterDestination">
            <summary>
            The attribute to be set.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter">
            <summary>
            Copies all attributes between a source entity/entities and a target entity/entities.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter._parameterOrigin">
            <summary>
            The entity/entities with the attributes to be copied.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.EntityOriginParameter">
            <summary>
            Single entity from which the attributes will be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.EntityOriginParameter._input">
            <summary>
            Entity from which the attributes will be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.EntityOriginParameter._output">
            <summary>
            Entity from which the attributes were copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.EntityOriginParameter._parameterDestination">
            <summary>
            The entity/entities where the attributes are to be copied to. 
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.EntityCollectionOriginParameter">
            <summary>
            Entity collection from which the attributes will be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.EntityCollectionOriginParameter._input">
            <summary>
            Entities from which the attributes will be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.EntityCollectionOriginParameter._output">
            <summary>
            Entities from which the attributes were copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.EntityCollectionOriginParameter._parameterDestination">
            <summary>
            The entity/entities where the attributes are to be copied to. 
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.OtherParameter">
            <summary>
            Entity to which the attributes will be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.OtherParameter._parameterChoice">
            <summary>
            Defines how the attributes should be copied. <br/>
            <b>Set</b> means that the whole attribute list on the target will be erased and made equal to the source. <br/>
            <b>Replace</b> means that items that exist on the target already will have their values replaced, while the others will keep existing. <br/>
            <b>Complement</b> means that only the attributes that don't exist on the target will be copied.<br/>
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.OtherParameter._input">
            <summary>
            Entity to which the attributes will be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.OtherParameter._output">
            <summary>
            Entity to which the attributes were copied.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.OthersParameter">
            <summary>
            Entity collection to which the attributes will be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.OthersParameter._parameterChoice">
            <summary>
            Defines how the attributes should be copied. <br/>
            <b>Set</b> means that the whole attribute list on the target will be erased and made equal to the source. <br/>
            <b>Replace</b> means that items that exist on the target already will have their values replaced, while the others will keep existing. <br/>
            <b>Complement</b> means that only the attributes that don't exist on the target will be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.OthersParameter._input">
            <summary>
            Entities to which the attributes will be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.CopyAttributesParameter.OthersParameter._output">
            <summary>
            Entities to which the attributes were copied.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure.DeleteAttributeParameter">
            <summary>
            Deletes a certain attribute from an entity.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.DeleteAttributeParameter._input">
            <summary>
            The entity whose attribute is to be deleted.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.DeleteAttributeParameter._output">
            <summary>
            The entity whose attribute was deleted.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.DeleteAttributeParameter._attributeParameter">
            <summary>
            Attribute to delete.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.AttributeProcedure.DeleteAllAttributesParameter">
            <summary>
            Deletes all attributes from an entity.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.AttributeProcedure.AbstractAttributeParameter" />
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.DeleteAllAttributesParameter._input">
            <summary>
            The entity whose attributes are to be deleted.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.AttributeProcedure.DeleteAllAttributesParameter._output">
            <summary>
            The entity whose attributes were deleted.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CopyProcedure">
            <summary>
            Creates copies of the input entities.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CopyProcedure._parametersOption">
            <summary>
            Type of copy operation to perform.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CopyProcedure.StandardCopyParameter">
            <summary>
            Standard operation for creating copies of a single stream of entities.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CopyProcedure.StandardCopyParameter._input">
            <summary>
            The entity to be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CopyProcedure.StandardCopyParameter._output">
            <summary>
            The entity and its copies.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CopyProcedure.StandardCopyParameter._parameterNumberOfCopies">
            <summary>
            The number of copies to output. If 0, the original will be discarded.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CopyProcedure.StandardCopyParameter._parameterCopyMethod">
            <summary>
            Specifies the data copy method. <br/>
            <b>Clone</b> means that independent copies of each entity will be produced. <br/>
            <b>Reference</b> means that only the entity <i>references</i> will be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CopyProcedure.StandardCopyParameter._attributeIndex">
            <summary>
            Attribute that will contain the index of the copy (starting at 0).
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CopyProcedure.RelationCopyParameter">
            <summary>
            Performs entity copy operations on entity collections so as to match the number of entities in each defined channel (input-output set).
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CopyProcedure.RelationCopyParameter._parameterChannels">
            <summary>
            Channels (sets of input/output) for performing the relation copy.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CopyProcedure.RelationCopyParameter._parameterCopyMethod">
            <summary>
            Specifies the data copy method. 
            'Clone' refer to producing independent copies of each entity, while 
            'Reference' means that only the entity references will be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CopyProcedure.RelationCopyParameter._parameterType">
            <summary>
            Type of relation copy. See each option for details.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CopyProcedure.RelationCopyParameter.RelationCopyChannel">
            <summary>
            Defines a stream of entities (a input-output pair) to be considered in the relation copy operation.  
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CopyProcedure.RelationCopyParameter.RelationCopyChannel.Input">
            <summary>
            The entities to be copied.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CopyProcedure.RelationCopyParameter.RelationCopyChannel.Output">
            <summary>
            The entities and their copies.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CopyProcedure.RelationCopyParameter.ClampCopyTypeParameter">
            <summary>
            The last item of the smallest collection will be copied until the collection sizes match.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CopyProcedure.RelationCopyParameter.RepeatCopyTypeParameter">
            <summary>
            The sequence of items from the smallest collection will be copied until the collection sizes match.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CopyProcedure.RelationCopyParameter.CrossCopyTypeParameter">
            <summary>
            Cross product operation between the collections.
            In other words, each item will be copied for every item of
            the other collections.
            For instance, if one list has the items A, B, C and the other
            D,E then the result will be AD, AE, BD, BE, CD, CE.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.NoteProcedure">
            <summary>
            A non-executable procedure for placing comments on graphs. 
            Text can be written on the node's label and placed next to other nodes, so as to provide further information
            or clarification of certain design choices.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.ForCycleProcedure">
            <summary>
            Allows the definition of cycles to perform node sequences 
            a certain number of times, such as in a For...Loop control
            structure.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ForCycleProcedure._input">
            <summary>
            Entity being manipulated in the loop.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ForCycleProcedure._outputLoop">
            <summary>
            Output where the entities will be sent to when the loop is going.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ForCycleProcedure._outputLoopExit">
            <summary>
            Output where the entities will be sent to when the loop is over.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ForCycleProcedure._parameterStart">
            <summary>
            Start value (inclusive).
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ForCycleProcedure._parameterEnd">
            <summary>
            End value (inclusive).
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ForCycleProcedure._parameterIncrement">
            <summary>
            Increment value.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ForCycleProcedure._attributeIndex">
            <summary>
            Attribute that will store the index. This attribute is both read and written from.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.GroupProcedure">
            <summary>
            Groups or ungroups entities.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.GroupProcedure._parameterGroupList">
            <summary>
            Type of grouping operation to perform.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.GroupProcedure.EntityGroupParameter">
            <summary>
            Groups actors, creating a group entity.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.GroupProcedure.GroupParameter" />
        </member>
        <member name="F:Sceelix.Core.Procedures.GroupProcedure.EntityGroupParameter._input">
            <summary>
            Set of entities to be grouped.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.GroupProcedure.EntityGroupParameter._output">
            <summary>
            One or more group entities, grouped according to the specified criteria.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.GroupProcedure.EntityGroupParameter._parameterCriteria">
            <summary>
            Criteria for grouping entities (based on the properties of each entity).
            If non is indicated, all the entities will be sent into the same group.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.GroupProcedure.EntityGroupParameter._parameterMergeAttributes">
            <summary>
            Indicates if the resulting groups should carry the common attributes of their children.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.GroupProcedure.Ungroup">
            <summary>
            Ungroups actor group entities into their subentities.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.GroupProcedure.Ungroup._input">
            <summary>
            Group to be ungrouped.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.GroupProcedure.Ungroup._output">
            <summary>
            Entities that were contained in the group.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.GroupProcedure.Ungroup._parameterAttributes">
            <summary>
            Indicates what kind of attributes the newly ungrouped entities should possess.<br/>
            
            <b>Parent and Entity</b> means that the attributes defined for the group will be added to the ungrouped items (only complementing them, not overwriting). <br/>
            <b>Parent</b> means that the attributes of the ungrouped items will be the ones from the parent.<br/>
            <b>Entity</b> means that the ungrouped items will only maintain their own attributes.<br/>
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.InvalidProcedure">
            <summary>
            Described a procedure that could not be loaded or processed.
            The original procedure may have been moved, renamed or deleted.
            This stands as a placeholder to ensure the graph connection, but
            should be removed or fixed in order for the graph to operate.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.ConditionalProcedure">
            <summary>
            Allows data flow control and redirection by evaluating conditions on input entities.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ConditionalProcedure._input">
            <summary>
            The entity which is meant to be redirected based the evaluated condition/value/type.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ConditionalProcedure._parametersCheck">
            <summary>
            Check operation for condition evaluation.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.ConditionalProcedure.IfElseConditionalParameter">
            <summary>
            Performs entity flow control based on conditions that are evaluated for each entity.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ConditionalProcedure.IfElseConditionalParameter._parameterConditions">
            <summary>
            List of conditions to be evaluated. The first to evaluate to true will return the entity to its corresponding output. 
            Otherwise, the entity will pass on to the next condition.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ConditionalProcedure.IfElseConditionalParameter._parameterElse">
            <summary>
            If none of the conditions are true, the entity will be sent to this "Else" output.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.ConditionalProcedure.SwitchCaseConditionalParameter">
            <summary>
            Performs entity flow control based on equality comparisons that are evaluated for each entity.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.ConditionalProcedure.ConditionalParameter" />
        </member>
        <member name="F:Sceelix.Core.Procedures.ConditionalProcedure.SwitchCaseConditionalParameter._parameterSwitchValue">
            <summary>
            Value that will be compared.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ConditionalProcedure.SwitchCaseConditionalParameter._parameterConditions">
            <summary>
            The list of values to compare to.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ConditionalProcedure.SwitchCaseConditionalParameter._parameterDefault">
            <summary>
            If none of the value matches, the entity will be sent to this "Default" output.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.ConditionalProcedure.TypeConditionalParameter">
            <summary>
            Performs entity flow control based on the type of entity that is being handled.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ConditionalProcedure.TypeConditionalParameter._nameTypeIndex">
            <summary>
            Dictionary of type display names -> type
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ConditionalProcedure.TypeConditionalParameter._parameterTypes">
            <summary>
            List of types to check. The first to evaluate to true will return to its corresponding output. 
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.ConditionalProcedure.TypeConditionalParameter._parameterElse">
            <summary>
            If none of the types match, the entity will be sent to this "Else" output.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.Procedure">
            <summary>
            Base class for all Sceelix procedures/node definitions.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.CanExecute">
            <summary>
            Indicates if a procedure has enough input data to be executed.
            Source procedures (that have no inputs) always return true.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.Environment">
            <summary>
            Environment that defines resource location and other environment-specific settings.
            Should be set after the procedure is instantiated.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.ExecutionBinding">
            <summary>
            Special execution options/behaviors will be indicated here. Can be null.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.ExecutionNode">
            <summary>
            When instantiated from a graph procedure, this field will be set.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.Inputs">
            <summary>
            Read-only collection of inputs of this procedure.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.IsCollective">
            <summary>
            Indicates if a node is collective, i.e. if it contains at least one collective input.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.IsOptional">
            <summary>
            Gets a value indicating whether this procedure is optional. Optional nodes
            are those that have inputs, but ALL are optional.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.Outputs">
            <summary>
            Read-only collection of outputs of this procedure.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.Parameters">
            <summary>
            Read-only collection of parameters of this procedure.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.Parent">
            <summary>
            Procedure where this procedure is being called from.
            Graph procedures, for instance, set this property before start.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.ShouldDeleteVariables">
            <summary>
            Indicates if the attributes of the manipulated objects should be deleted when the datablock finishes its execution.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.SubInputs">
            <summary>
            Read-only collection of inputs of this procedure.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.SubOutputs">
            <summary>
            Read-only collection of outputs of this procedure.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Procedures.Procedure.SubParameters">
            <summary>
            Read-only collection of parameters of this procedure.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Procedures.Procedure.AfterExecutionCycle">
            <summary>
            Overridable function called after all execution rounds are performed.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Procedures.Procedure.BeforeFirstExecutionCycle">
            <summary>
            Overridable function called before the first set of execution rounds is performed.
            Useful to perform a certain set of operations only once, by guaranteeing that the parameters/attributes/augmentations/inputs/outputs have been set.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Procedures.Procedure.CheckForInputMismatch">
            <summary>
            Checks if the inputs still have data after execution.
            If there is, then there is probably a matching problem.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Procedures.Procedure.Execute">
            <summary>
            Executes the procedure, considering all the set inputs and parameters.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CombinatorialProcedure">
            <summary>
            Allows combination and permutation of data by either creating clones or reference 
            copies of entities.<br/>
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CombinatorialProcedure._input">
            <summary>
            The entities to be combined.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CombinatorialProcedure._parameterType">
            <summary>
            The type of operation to perform.<br/>
            <b>Combination</b> means that the items will be paired, without caring for the order.<br/>
            <b>Permutation</b> means that the items will be paired, caring for the order.<br/>
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CombinatorialProcedure._parameterCopyMethod">
            <summary>
            Indicates if the if the entities should be copied by reference or by cloning them.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CombinatorialProcedure._parameterCombinatorialOutputs">
            <summary>
            The output streams, which indicate how the combinations/permutations are performed.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CombinatorialProcedure.CombinatorialParameter">
            <summary>
            An output stream.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CombinatorialProcedure.CombinatorialParameter.Output">
            <summary>
            The output with a clone or reference copy of the entity.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CollectionProcedure">
            <summary>
            Performs data analysis, filtering and organization 
            on collections of entities.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure._input">
            <summary>
            The entities that will be operated on.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure._output">
            <summary>
            The entities that were operated on.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure._parameterCollectionOperation">
            <summary>
            Type of collection operation to perform.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CollectionProcedure.CountCollectionParameter">
            <summary>
            Performs counting or indexing on the input collection.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure.CountCollectionParameter._attributeIndex">
            <summary>
            Writes a sequence number corresponding to the number of each entity in the sequence.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure.CountCollectionParameter._attributeCount">
            <summary>
            Writes the total number of entities on the collection.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CollectionProcedure.DistinctCollectionParameter">
            <summary>
            Filters repeated entities in the collection. 
            Especially useful to remove repeated references to the same entity.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CollectionProcedure.ReverseCollectionParameter">
            <summary>
            Reverses the order of the input collection.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CollectionProcedure.ShuffleCollectionParameter">
            <summary>
            Randomly orders the elements in the input collection.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure.ShuffleCollectionParameter._parameterSeed">
            <summary>
            Seed of the random shuffler. Controls the randomness look the shuffle.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CollectionProcedure.AggregationCollectionParameter">
            <summary>
            Aggregates attribute values and stores the result 
            into other attributes.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure.AggregationCollectionParameter._parameterValue">
            <summary>
            Value to be aggregated. 
            Subexpression is evaluated on each entity from the collection.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure.AggregationCollectionParameter._parameterChoice">
            <summary>
            Type of aggregative operation to perform.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure.AggregationCollectionParameter._parameterAggregatedValue">
            <summary>
            Attribute where to store the aggregated value.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CollectionProcedure.TakeParameter">
            <summary>
            Takes a specified number of contiguous elements
            from a certain position of the input collection.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure.TakeParameter._outputElse">
            <summary>
            Entities that are not delivered through the other port.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure.TakeParameter._parameterStartingIndex">
            <summary>
            Index where to start the extraction.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure.TakeParameter._parameterAmount">
            <summary>
            Number of items (starting at 'Starting Index') 
            to extract to the first port.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure.TakeParameter._parameterLoop">
            <summary>
            If checked, a repetitive, alternating pattern will be applied.
            Example: 10 elements (A,B,C,D,E,F,G,H,I,J), Starting and Amount = 2 will
            return A B,E,F,I,J to the first output and C,D,G,H to the second one.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CollectionProcedure.OrderByCriteriumParameter">
            <summary>
            Attribute-based criteria by which to order.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure.OrderByCriteriumParameter._parameterValue">
            <summary>
            Value on which to decide the order.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure.OrderByCriteriumParameter._parameterDescending">
            <summary>
            Indicates if the ordering on this criteria should be from
            the greatest to the smallest.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.CollectionProcedure.OrderByCollectionParameter">
            <summary>
            Orders elements of the input collection
            according to values of their attributes.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.CollectionProcedure.OrderByCollectionParameter._parameterOrderCriteria">
            <summary>
            List of criteria on which the ordering should be based.
            Several criteria can be defined.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.LogProcedure">
            <summary>
            Writes logging messages to the designated log panel.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.LogProcedure._parameterInput">
            <summary>
            The type of input port. <br/>
            Setting a <b>Single</b> (circle) input means that the node will be executed once per entity. Useful to log a different message for each entity. <br/>
            Setting a <b>Collective</b> (square) input means that the node will be executed once for all entities. Useful to log a message for a whole set of entities.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.LogProcedure._output">
            <summary>
            Entities that were sent to the input.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.LogProcedure._parameterLogType">
            <summary>
            Type of message to printed.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.LogProcedure._parameterMessages">
            <summary>
            The list of messages to be printed.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.EntityCreateProcedure">
            <summary>
            Generates empty entities, which can be used to carry Attribute data and serve as impulses 
            to source nodes.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.EntityCreateProcedure._output">
            <summary>
            Created empty Entity instances.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.EntityCreateProcedure._parameterCreation">
            <summary>
            Type of entity creation method to run.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.EntityCreateProcedure.StandardEntityCreateParameter">
            <summary>
            Creates empty entities, with the possibility to assign an index value to each outputted.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.EntityCreateProcedure.StandardEntityCreateParameter._parameterCount">
            <summary>
            Number of entities to create.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.EntityCreateProcedure.StandardEntityCreateParameter._attributeIndex">
            <summary>
            Attribute where to store the index to identify and enumerate the created entities.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.EntityCreateProcedure.FilesEntityCreateParameter">
            <summary>
            Creates as many entities as the files in a given folder. Stores the name of the file in an attribute. 
            Useful to create an enumeration over files.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.EntityCreateProcedure.EntityCreateParameter" />
        </member>
        <member name="F:Sceelix.Core.Procedures.EntityCreateProcedure.FilesEntityCreateParameter._parameterFolder">
            <summary>
            Folder from which the file names should be read.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.EntityCreateProcedure.FilesEntityCreateParameter._attributeFileName">
            <summary>
            Attribute where the file name will be stored.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.EntityCreateProcedure.ListEntityCreateParameter">
            <summary>
            Creates as many entities as the entries in a list. Stored the content of each list entry in an attribute.
            Useful to iterate over lists of numbers, strings, or sets of data.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.EntityCreateProcedure.EntityCreateParameter" />
        </member>
        <member name="F:Sceelix.Core.Procedures.EntityCreateProcedure.ListEntityCreateParameter._parameterList">
            <summary>
            List whose entries are to be read.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.EntityCreateProcedure.ListEntityCreateParameter._parameterAttributeItem">
            <summary>
            Attribute where the list entries are to be stored.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.PropertyProcedure">
            <summary>
            Gets entity-specific properties and loads them into attributes.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.PropertyProcedure._parameterEntity">
            <summary>
            Type of entity from which to read the properties. The properties are specific to the particular type chosen, disregarding inheritance.
            This means that, for instance, in order to get the "Scope" of a mesh or path entity, the option "Actor" should be chosen, since it
            is a property from the parent type.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.PropertyProcedure.EntityPropertyParameter">
            <summary>
            Reads/calculates properties from entities.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.PropertyProcedure.PropertyParameter" />
        </member>
        <member name="F:Sceelix.Core.Procedures.PropertyProcedure.EntityPropertyParameter._attributeAttributeList">
            <summary>
            A list with all the attributes of this entity.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.PropertyProcedure.EntityPropertyParameter._attributeHashCode">
            <summary>
            The hashcode of this entity. Useful to define unique ids in the scope of the execution.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.PropertyProcedure.EntityPropertyParameter._attributeType">
            <summary>
            The name of the actual type of this entity.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.PropertyProcedure.EntityPropertyParameter._input">
            <summary>
            Entity from which to read the properties.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.PropertyProcedure.EntityPropertyParameter._output">
            <summary>
            Entity from which the properties were read.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.PropertyProcedure.GroupPropertyParameter">
            <summary>
            Reads/calculates properties from group entities.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.PropertyProcedure.PropertyParameter" />
        </member>
        <member name="F:Sceelix.Core.Procedures.PropertyProcedure.GroupPropertyParameter._attributeGroupSize">
            <summary>
            Number of items in this group.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.PropertyProcedure.GroupPropertyParameter._input">
            <summary>
            Group entity from which to read the properties.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.PropertyProcedure.GroupPropertyParameter._output">
            <summary>
            Group entity from which the properties were read.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.RandomProcedure">
            <summary>
            Creates random values according to certain types, range 
            and specifications. Stores the result into attributes 
            of the flowing entities.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure._parameterInput">
            <summary>
            The type of input port. <br/>
            Setting a <b>Single</b> (circle) input means that the node will be executed once per entity. Useful to choose a different seed for each entity. <br/>
            Setting a <b>Collective</b> (square) input means that the node will be executed once for all entities. Useful to choose one starting seed for the whole set of entities (yet each entity will have a different random value).
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure._output">
            <summary>
            Entities that were sent to the input.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure._parameterRandomAttributes">
            <summary>
            List of random values to create. There are many types of random values that can be created, all of which are stored to entity attributes so as to be used in later nodes.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure._parameterSeed">
            <summary>
            Seed that controls the random generator.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.RandomProcedure.IntRandomParameter">
            <summary>
            Generates random integer numbers within a specified range.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.IntRandomParameter._parameterMin">
            <summary>
            Inclusive lower bound of the random number returned.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.IntRandomParameter._parameterMax">
            <summary>
            Exclusive upper bound of the random number returned.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.IntRandomParameter._attributeValue">
            <summary>
            Attribute where to store the random value 
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.RandomProcedure.BoolRandomParameter">
            <summary>
            Generates boolean values, either true or false.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.RandomProcedure.RandomParameter" />
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.BoolRandomParameter._attributeValue">
            <summary>
            Attribute where to store the random boolean.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.RandomProcedure.FloatRandomParameter">
            <summary>
            Generates random floating-point numbers within a specified range.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.FloatRandomParameter._parameterMin">
            <summary>
            Inclusive lower bound of the random number returned.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.FloatRandomParameter._parameterMax">
            <summary>
            Exclusive upper bound of the random number returned.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.FloatRandomParameter._attributeValue">
            <summary>
            Attribute where to store the random value 
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.RandomProcedure.DoubleRandomParameter">
            <summary>
            Generates random double-precision numbers within a specified range.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.DoubleRandomParameter._parameterMin">
            <summary>
            Inclusive lower bound of the random number returned.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.DoubleRandomParameter._parameterMax">
            <summary>
            Exclusive upper bound of the random number returned.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.DoubleRandomParameter._attributeValue">
            <summary>
            Attribute where to store the random value 
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.RandomProcedure.FileRandomParameter">
            <summary>
            Selects a random file path existing inside a given folder.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.FileRandomParameter._parameterFolder">
            <summary>
            Folder from which to extract the random file names.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.FileRandomParameter._attributeValue">
            <summary>
            Attribute where to store the random file name in.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.RandomProcedure.ListRandomParameter">
            <summary>
            Selects a random item from a give list of items.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.ListRandomParameter._listParameter">
            <summary>
            List from which to extract the random value.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.RandomProcedure.ListRandomParameter._attributeValue">
            <summary>
            Attribute where to write the random value to.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.SequenceProcedure">
            <summary>
            Allows data flow aggregation, ordering and rerouting through 
            the definition of sets of matching inputs and outputs. 
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.SequenceProcedure._parameterCopyMethod">
            <summary>
            When several outputs are defined, indicates if the if the entities should be copied by reference or by cloning them.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.SequenceProcedure._parameterSequenceList">
            <summary>
            List of inputs of outputs of this node. The order is important and their pairing, too. <br/>
            The list should start with an input, which provides the first source of entities. Inputs listed immediately after will have their entities accumulated, in sequence.
            When an output comes after the inputs, it will flush the accumulated entities. If multiple output are defined in a row, the data is copied 
            according to the defined "copy method". If an input appears after the output(s), the accumulated entities are reset and the process starts again. 
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.SequenceProcedure.SingleInputSequenceParameter">
            <summary>
            An input port that accepts one entity at the time.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.SequenceProcedure.SequenceParameter" />
        </member>
        <member name="F:Sceelix.Core.Procedures.SequenceProcedure.SingleInputSequenceParameter.Input">
            <summary>
            An input port that accepts one entity at the time.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.SequenceProcedure.CollectiveInputSequenceParameter">
            <summary>
            An input port that accepts a set/collection of entities at the time.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.SequenceProcedure.SequenceParameter" />
        </member>
        <member name="F:Sceelix.Core.Procedures.SequenceProcedure.CollectiveInputSequenceParameter.Input">
            <summary>
            An input port that accepts a set/collection of entities at the time.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.SequenceProcedure.OutputSequenceParameter">
            <summary>
            An output port that flushes the input data.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.SequenceProcedure.SequenceParameter" />
        </member>
        <member name="F:Sceelix.Core.Procedures.SequenceProcedure.OutputSequenceParameter.Output">
            <summary>
            An output port that flushes the input data.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.StochasticProcedure">
            <summary>
            Performs flow filtering according to defined
            probability value.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.StochasticProcedure._parameterSeed">
            <summary>
            Seed that controls the random distrubution.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.StochasticProcedure._parameterMethod">
            <summary>
            Defines how the list of probabilities is handled:<br />
            <b>Weighted</b> means that if the sum of probabilities does not reach 1 or goes over 1 (i.e. 100%), the values with be scaled accordingly so as to consider all cases.<br />
            <b>Absolute</b> means that the sum of probabilities is capped at 1 (i.e. 100%), meaning that some entities could end up being discarded or some probabilities could end up not being considered.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.StochasticProcedure._parameterProbabilities">
            <summary>
            List of probabilities or weights, each between 0 and 1. 
            Does not have to add up to 1 - instead the values are summed and divided by the total amount.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Procedures.StochasticProcedure.Run">
            <b>Flexible</b> means that the sum of probabilities is capped at 1 (i.e. 100%), but if a probability is lower than 1, the probabilities whose value is 0 are increased to as to reach 1.
        </member>
        <member name="T:Sceelix.Core.Procedures.SystemProcedure">
            <summary>
            Base class for all C#-based procedures/nodes.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Procedures.TransferProcedure`1">
            <summary>
            This is just a specialization of the standard SystemProcedure, for those cases where there is 
            only one input and one output of the same type. So it is basically as if the input entity would
            be received, transformed and then sent out again, without divisions or merges.
            
            This is an example of a procedure which could be "commented out", which would result in having 
            the input entities sent directly to the output without any processing.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Sceelix.Core.Procedures.TransferProcedure`1._input">
            <summary>
            The procedure's only input.
            </summary>
        </member>
        <member name="F:Sceelix.Core.Procedures.TransferProcedure`1._output">
            <summary>
            The procedure's only output.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Resources.IResourceManager">
            <summary>
            Controls the access to resources, such as files, streams, variables, etc. This can go beyond a simple
            access to files, being applicable to assembly resources, zip packages and more.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Resources.IResourceManager.Exists(System.String)">
            <summary>
            Checks if a given resource exists.
            </summary>
            <param name="path">The path to the resource (relative or full).</param>
            <returns>True if the resource exists, false otherwise.</returns>
        </member>
        <member name="M:Sceelix.Core.Resources.IResourceManager.GetDirectoryPaths(System.String)">
            <summary>
            Returns a list of all directories inside the given directory.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Resources.IResourceManager.GetFilePaths(System.String)">
            <summary>
            Returns a list of all resources inside the given directory.
            </summary>
            <param name="folderPath">The full folder path.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Resources.IResourceManager.GetFullPath(System.String)">
            <summary>
            Gets the full path from a relative one. If the path is already full, it will be returned.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Resources.IResourceManager.GetGuid(System.String)">
            <summary>
            Gets the guid from a relative path.
            </summary>
            <param name="path">The path to the resource</param>
            <returns>The guid of the resource</returns>
        </member>
        <member name="M:Sceelix.Core.Resources.IResourceManager.GetLastWriteTime(System.String)">
            <summary>
            Gets the last write time of a given resource.
            Can be used to check for updates to a given resource.
            </summary>
            <param name="fullPath">The full path.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Resources.IResourceManager.Load``1(System.String)">
            <summary>
            Loads the specified relative or full path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Resources.IResourceManager.Lookup(System.String)">
            <summary>
            Looks up a resource path from a specified unique identifier.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>The project relative path of the resource, if it exists, or null otherwise.</returns>
        </member>
        <member name="M:Sceelix.Core.Resources.IResourceManager.SaveResource(System.String,System.Object)">
            <summary>
            Saves the resource to the given path.
            </summary>
            <param name="path">The path where to save the resource.</param>
            <param name="resource">The resource to save.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sceelix.Core.Resources.ResourceLoaderExtension.LoadBinary(Sceelix.Core.Resources.IResourceManager,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Sceelix.Core.Resources.ResourceLoaderExtension.LoadLines(Sceelix.Core.Resources.IResourceManager,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Sceelix.Core.Resources.ResourceLoaderExtension.LoadText(Sceelix.Core.Resources.IResourceManager,System.String)" -->
        <member name="T:Sceelix.Core.Resources.ResourceManager">
            <summary>
            The Load Environment is responsible for several operations that are specific to a particular
            deployment platform. Classes that derive from this one can be programmed to load resources
            through specific means and locations and perform logging to different targets.
            </summary>
            <summary>
            The ResourceManager is the default implementation of the IResourceManager interface, which is responsible
            for loading resources from disk (for project and file system paths), web addresses and resource from memory.
            </summary>
        </member>
        <member name="M:Sceelix.Core.Resources.ResourceManager.#ctor(System.String)">
            <summary>
            Environment constructor.
            </summary>
            <param name="projectFolder">Location of the project folder. If it is a relative path, it will be turned into a full path based on the application environment.</param>
        </member>
        <member name="M:Sceelix.Core.Resources.ResourceManager.Exists(System.String)">
            <summary>
            Checks if a given resource exists.
            </summary>
            <param name="path">The path to the resource (relative or full).</param>
            <returns>True if the resource exists, false otherwise.</returns>
        </member>
        <member name="M:Sceelix.Core.Resources.ResourceManager.GetDirectoryPaths(System.String)">
            <summary>
            Returns a list of all resources inside the given directory.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Resources.ResourceManager.GetFilePaths(System.String)">
            <summary>
            Returns a list of all resources inside the given directory.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Resources.ResourceManager.GetFullPath(System.String)">
            <summary>
            Gets the full path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Resources.ResourceManager.IsWebUrl(System.String)">
            <summary>
            Indicates if the given path is an URL.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Core.Resources.ResourceManager.Load``1(System.String)">
            <summary>
            Loads a resource from this environment.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">Path to the resource, relative to the project or not.</param>
            <returns>The loaded resource, if it exists.</returns>
        </member>
        <member name="M:Sceelix.Core.Resources.ResourceManager.Lookup(System.String)">
            <summary>
            Lookups the specified unique identifier. This default class
            is not able to look for guids.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>Null.</returns>
        </member>
        <member name="T:Sceelix.Core.Bindings.IExecutionBinding">
            <summary>
            Execution Bindings constitute a way to listen and interact with the execution process
            at certain graph execution moments.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Environments.IProcedureEnvironment">
            <summary>
            The Procedure Environment is an aggregation of several services that affect procedures
            at several points of their execution, providing diverse means for resource loading, messaging,
            debugging and others.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Environments.IProcedureEnvironment.ExecutionBinding">
            <summary>
            Constitutes a way to listen and interact with the execution process at certain graph execution moments.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Environments.IProcedureEnvironment.Logger">
            <summary>
            Allows for logging of messages to the registered output.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Environments.IProcedureEnvironment.Messenger">
            <summary>
            Allows for any kind of communication to be performed from and with the nodes.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Environments.IProcedureEnvironment.Resources">
            <summary>
            Controls the access to resources, such as files, streams, variables, etc. This can go beyond a simple
            access to files, being applicable to assembly resources, zip packages and more.
            </summary>
        </member>
        <member name="T:Sceelix.Core.Environments.ProcedureEnvironment">
            <summary>
            The default implementation of the IProcedureEnvironment interface
            which simply assumes some services by default, yet allowing others
            to be assigned.
            </summary>
            <seealso cref="T:Sceelix.Core.Environments.IProcedureEnvironment" />
        </member>
        <member name="M:Sceelix.Core.Environments.ProcedureEnvironment.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sceelix.Core.Environments.ProcedureEnvironment"/> class.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Environments.ProcedureEnvironment.ExecutionBinding">
            <summary>
            Gets or sets the execution binding used to listen and interact with the execution process
            </summary>
        </member>
        <member name="P:Sceelix.Core.Environments.ProcedureEnvironment.Logger">
            <summary>
            Gets or sets the logger for logging purposes.
            </summary>
            <value> The logger. </value>
        </member>
        <member name="P:Sceelix.Core.Environments.ProcedureEnvironment.Messenger">
            <summary>
            Gets or sets the messaging system.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Environments.ProcedureEnvironment.Resources">
            <summary>
            Gets or sets the Resource Manager used for accessing resources.
            </summary>
            <value> The resource manager. </value>
        </member>
        <member name="M:Sceelix.Core.Environments.ProcedureEnvironment.FromExisting(Sceelix.Core.Environments.IProcedureEnvironment)">
            <summary>
            Copy constructor of the procedureEnvironment.
            Does not clone the services, just the list of them.
            </summary>
            <param name="procedureEnvironment"></param>
        </member>
        <member name="P:Sceelix.Core.Exceptions.GraphException.ThrowingNode">
            <summary>
            Gets the node that threw this exception.
            </summary>
        </member>
        <member name="P:Sceelix.Core.Exceptions.GraphException.ThrowingNodes">
            <summary>
            Gets the nodes that have thrown the exceptions, going deep
            in possible inner exceptions.
            </summary>
        </member>
        <member name="F:Sceelix.Core.EngineManager._isInitialized">
            <summary>
            Controls the engine initialization, so that it happens only once.
            </summary>
        </member>
        <member name="M:Sceelix.Core.EngineManager.Initialize">
            <summary>
            Initializes procedure libraries, functions, entity types and parameters from all referenced assemblies on the application domain (except those dynamic and those in the global assembly cache). 
            Should be called once and only once, at the beginning of the application.
            </summary>
        </member>
        <member name="M:Sceelix.Core.EngineManager.IsEngineLibrary(System.Reflection.Assembly)">
            <summary>
            Verifies if the given assembly is a valid engine library.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="P:Sceelix.Core.IO.OutputReference.Count">
            <summary>
            The number of items in the output port.
            </summary>
        </member>
        <member name="P:Sceelix.Core.IO.OutputReference.EntityType">
            <summary>
            The type of Entity that this output holds.
            </summary>
        </member>
        <member name="P:Sceelix.Core.IO.OutputReference.IsEmpty">
            <summary>
            Indicates whether this output is empty.
            </summary>
            <value>
              <c>true</c> if this output is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sceelix.Core.IO.OutputReference.Label">
            <summary>
            The label that identifies this output.
            </summary>
        </member>
        <member name="M:Sceelix.Core.IO.OutputReference.Dequeue">
            <summary>
            Removes an entity from the output queue and returns it.
            </summary>
            <returns>The entity removed from the output queue.</returns>
        </member>
        <member name="M:Sceelix.Core.IO.OutputReference.Dequeue``1">
            <summary>
            Removes an entity from the output queue and returns it.
            </summary>
            <typeparam name="T">Type of the entity to return.</typeparam>
            <returns>The entity removed from the output queue.</returns>
        </member>
        <member name="M:Sceelix.Core.IO.OutputReference.DequeueAll">
            <summary>
            Removes all entities from the output queue and returns them.
            </summary>
            <returns>The entities removed from the output queue.</returns>
        </member>
        <member name="M:Sceelix.Core.IO.OutputReference.DequeueAll``1">
            <summary>
            Removes all entities from the output queue and returns them.
            </summary>
            <typeparam name="T">Type of the entities to return.</typeparam>
            <returns>The entities removed from the output queue.</returns>
        </member>
        <member name="M:Sceelix.Core.IO.OutputReference.Peek">
            <summary>
            Returns the entity at the the top of the output queue without removing it.
            </summary>
            <returns>The entity at the top of the output queue or null, if no entity exists.</returns>
        </member>
        <member name="M:Sceelix.Core.IO.OutputReference.Peek``1">
            <summary>
            Returns the entity at the the top of the output queue without removing it.
            </summary>
            <typeparam name="T">Type of the entity to return.</typeparam>
            <returns>The entity at the top of the output queue or null, if no entity exists.</returns>
        </member>
        <member name="M:Sceelix.Core.IO.OutputReference.PeekAll">
            <summary>
            Returns all entities from the output queue without removing them.
            </summary>
            <returns>The entities from the output queue.</returns>
        </member>
        <member name="M:Sceelix.Core.IO.OutputReference.PeekAll``1">
            <summary>
            Returns all entities from the output queue without removing them.
            </summary>
            <typeparam name="T">Type of the entities to return.</typeparam>
            <returns>The entities from the output queue.</returns>
        </member>
        <member name="P:Sceelix.Core.IO.Input.Procedure">
            <summary>
            Procedure to which this input belongs.
            </summary>
        </member>
        <member name="M:Sceelix.Core.IO.CollectiveInput`1.Read">
            <summary>
            Reads all entities waiting at this input. This functions does not empty the input queue, so it can be called several times through the procedure, if needed.
            </summary>
            <returns>All entities waiting at this input</returns>
        </member>
        <member name="M:Sceelix.Core.IO.SingleInput`1.Read">
            <summary>
            Reads the entity waiting at this input to be processed in this round. This functions does not empty the input queue, so it can be called several times through the procedure, if needed.
            </summary>
            <returns>The entity waiting at this input to be processed in this round</returns>
        </member>
        <member name="P:Sceelix.Core.IO.InputReferenceCollection.Count">
            <summary>
            The number of InputReferences in this collection.
            </summary>
        </member>
        <member name="P:Sceelix.Core.IO.InputReferenceCollection.Item(System.String)">
            <summary>
            Gets the InputReference with the indicated label.
            </summary>
            <param name="label">Label that identifies the InputReference.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No InputReference with such a label exists.</exception>
            <returns>The InputReference with the indicated label</returns>
        </member>
        <member name="P:Sceelix.Core.IO.InputReferenceCollection.Item(System.Int32)">
            <summary>
            Gets the InputReferences at the indicated index.
            </summary>
            <param name="label">Index where the InputReferences can be found.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No InputReferences with such a label exists.</exception>
            <returns>The InputReferences at the indicated index.</returns>
        </member>
        <member name="M:Sceelix.Core.IO.InputReferenceCollection.IndexOf(Sceelix.Core.IO.Input)">
            <summary>
            Searches for the specified input and returns the zero-based index where it can be found. 
            </summary>
            <param name="input">Input to be searched.</param>
            <returns>The zero-based index of the first occurrence of the input, if found; otherwise, –1.</returns>
        </member>
        <member name="T:Sceelix.Core.IO.InputData">
            <summary>
            Data structure that provides access to entity attributes
            currently waiting for processing by a procedure. 
            </summary>
        </member>
        <member name="M:Sceelix.Core.IO.InputData.Get(Sceelix.Core.Attributes.AttributeKey,System.Boolean)">
            <summary>
            Gets the attribute value (or list of values) with the given key.
            </summary>
            <param name="name">Key of the attribute.</param>
            <param name="allowNull">If false, an exception will be thrown if the key is not found for any of the input entities. If true, simply a null value will be returned.</param>
            <returns>Depending on the number of inputs, it may return one value (for one single input), a list of values (for one collective input), or a list of lists of values (for several single or collective inputs).</returns>
        </member>
        <member name="M:Sceelix.Core.IO.InputData.GetFirst">
            <summary>
            Gets the first entity at the first available input port or null, 
            if there are no inputs or available data. 
            </summary>
            <returns>An entity if there is one available or null, otherwise.</returns>
        </member>
        <member name="P:Sceelix.Core.IO.Output.Procedure">
            <summary>
            Procedure to which this output belongs.
            </summary>
        </member>
        <member name="P:Sceelix.Core.IO.OutputReferenceCollection.Count">
            <summary>
            The number of OutputReferences in this collection.
            </summary>
        </member>
        <member name="P:Sceelix.Core.IO.OutputReferenceCollection.Item(System.String)">
            <summary>
            Gets the OutputReference with the indicated label.
            </summary>
            <param name="label">Label that identifies the OutputReference.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No OutputReference with such a label exists.</exception>
            <returns>The OutputReference with the indicated label</returns>
        </member>
        <member name="P:Sceelix.Core.IO.OutputReferenceCollection.Item(System.Int32)">
            <summary>
            Gets the OutputReference at the indicated index.
            </summary>
            <param name="label">Index where the OutputReference can be found.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No OutputReference with such a label exists.</exception>
            <returns>The OutputReference at the indicated index.</returns>
        </member>
        <member name="M:Sceelix.Core.IO.OutputReferenceCollection.DequeueAll">
            <summary>
            Removes all entities from all output queues and returns them.
            </summary>
            <returns>The entities removed from the output queue.</returns>
        </member>
        <member name="M:Sceelix.Core.IO.OutputReferenceCollection.DequeueAll``1">
            <summary>
            Removes all entities from all output queues and returns them.
            </summary>
            <typeparam name="T">Type of the entities to return.</typeparam>
            <returns>The entities removed from the output queue.</returns>
        </member>
        <member name="M:Sceelix.Core.IO.OutputReferenceCollection.IndexOf(Sceelix.Core.IO.Output)">
            <summary>
            Searches for the specified output and returns the zero-based index where it can be found. 
            </summary>
            <param name="output">Output to be searched.</param>
            <returns>The zero-based index of the first occurrence of the output, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Sceelix.Core.IO.OutputReferenceCollection.PeekAll">
            <summary>
            Returns all entities from all output queues without removing them.
            </summary>
            <returns>The entities from the output queue.</returns>
        </member>
        <member name="M:Sceelix.Core.IO.OutputReferenceCollection.PeekAll``1">
            <summary>
            Returns all entities from all output queues without removing them.
            </summary>
            <typeparam name="T">Type of the entities to return.</typeparam>
            <returns>The entities from the output queue.</returns>
        </member>
    </members>
</doc>
