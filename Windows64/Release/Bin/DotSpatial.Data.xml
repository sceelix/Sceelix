<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotSpatial.Data</name>
    </assembly>
    <members>
        <member name="T:DotSpatial.Data.Argb">
            <summary>
            Tiny structure for storing A,R,G,B components of Color
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Argb.ByteRange(System.Int32)">
            <summary>
            Returns an integer that ranges from 0 to 255.  If value is larger than 255, the value will be equal to 255.
            If the value is smaller than 255, it will be equal to 255.
            </summary>
            <param name="value">A Double value to convert.</param>
            <returns>An integer ranging from 0 to 255</returns>
        </member>
        <member name="T:DotSpatial.Data.BinaryReaderWriterExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Data.BinaryReaderWriterExtensions.Write``1(System.IO.BinaryWriter,``0)">
            <summary>
            Writes the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="writer">The writer.</param>
            <param name="num">The value.</param>
        </member>
        <member name="M:DotSpatial.Data.BinaryReaderWriterExtensions.Read``1(System.IO.BinaryReader)">
            <summary>
            Reads the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.DbaseLocaleRegistry">
            <summary>
            A registry used to map CLR cultures and encodings to 
            dBase language driver id (LDID) encoding specifiers.
            </summary>
            <remarks>
            Lookup values are taken from Esri's 
            <a href="http://downloads.esri.com/support/documentation/pad_/ArcPad_RefGuide_1105.pdf">
            ArcPad Reference Guide</a>
            </remarks>
        </member>
        <member name="M:DotSpatial.Data.DbaseLocaleRegistry.GetCulture(System.Byte)">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo"/> associated with the 
            given dBase LDID.
            </summary>
            <param name="dBaseEncoding">
            The language driver id (LDID) to get a CultureInfo for.
            </param>
            <returns>
            A <see cref="T:System.Globalization.CultureInfo"/> which uses the encoding represented by 
            <paramref name="dBaseEncoding"/> by default.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.DbaseLocaleRegistry.GetEncoding(System.Byte)">
            <summary>
            Gets the <see cref="T:System.Text.Encoding"/> which matches the 
            given dBase LDID.
            </summary>
            <param name="dBaseEncoding">
            The language driver id (LDID) to get the <see cref="T:System.Text.Encoding"/> for.
            </param>
            <returns>
            An <see cref="T:System.Text.Encoding"/> which corresponds to the the
            <paramref name="dBaseEncoding"/> code established by Esri.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.DbaseLocaleRegistry.GetLanguageDriverId(System.Text.Encoding)">
            <summary>
            Gets a language driver id (LDID) for the given encoding.
            </summary>
            <param name="encoding">The Encoding used to lookup the LDID.</param>
            <returns>A language driver code used to specify the encoding used to write text in the dBase file.</returns>
            <remarks>0x57 (Windows ANSI) is returned as a default if there is no associated LDID for the given encoding.</remarks>
        </member>
        <member name="T:DotSpatial.Data.DbaseLocaleRegistry.CodePageChoice">
            <summary>
            Specifies which code page to use in a <see cref="T:System.Globalization.TextInfo"/>
            instance.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.DbaseLocaleRegistry.CultureWithEncoding">
            <summary>
            Represents a culture and encoding pair.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.DisposeBase">
            <summary>
            This base class tries to correctly implement disposable, and should help make the behaviors
            more consistent across classes that inherit from this class.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IDisposeLock">
            <summary>
            Unlike forms that have a disposable life cycle with a clear chain of ownership, or purely managed
            libraries that have in a built in reference counting system, disposable members in DotSpatial
            require the ability to behave in some cases like a layer that should be removed from memory
            as soon as it is removed from the map, and other times like a persistent object.  The DisposeLock
            concept works like an industrial lock-out system.  Each additional lock increases the lock count.
            When all users have released the lock, the IsDisposedLocked property will be false, and the next
            action like a removal from the parent layers will properly dispose the item.  Users may feel free
            to add the lock in order to handle disposal on the layers themselves.  These methods will not
            actually prevent Dispose from functioning, but understand that calling dispose when there is an
            IsDisposeLocked is true means that there will likely be a problem.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IDisposeLock.LockDispose">
            <summary>
            Locks dispose.  This typically adds one instance of an internal reference counter.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IDisposeLock.UnlockDispose">
            <summary>
            Unlocks dispose.  This typically removes one instance of an internal reference counter.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDisposeLock.IsDisposeLocked">
            <summary>
            Gets a value indicating whether an existing reference is requesting that the object is not disposed of.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.DisposeBase.Dispose">
            <summary>
            Disposes
            </summary>
        </member>
        <member name="M:DotSpatial.Data.DisposeBase.LockDispose">
            <summary>
            Adds one request or "reference count" for this item not to be disposed.  When an owner is finished,
            if this is 0, then dispose should be called.  For now this does not prevent Dispose from being
            called, it is simply for tracking purposes.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.DisposeBase.UnlockDispose">
            <summary>
            Removes one reference or request to prevent an object from being automatically disposed.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.DisposeBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:DotSpatial.Data.DisposeBase"/> class.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.DisposeBase.Dispose(System.Boolean)">
            <summary>
            This is where the meat of the dispose work is done.  Subclasses should call dispose on any disposable
            members or internal members (presuming they are not dispose locked).
            </summary>
            <param name="isDisposing">True if the "Dispose" method was called instead of the destructor.</param>
        </member>
        <member name="P:DotSpatial.Data.DisposeBase.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has already had the Dispose method called on it.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DisposeBase.IsDisposeLocked">
            <summary>
            Gets a value indicating whether there are outstanding references that may be using the item
            that would prefer it if you did not dispose of the item while they are still using it.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ExtentArgs">
            <summary>
            An EventArgs class for passing around an extent.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ExtentArgs.#ctor(DotSpatial.Data.Extent)">
            <summary>
            Initializes a new instance of the ExtentArgs class.
            </summary>
            <param name="value">The value for this event.</param>
        </member>
        <member name="P:DotSpatial.Data.ExtentArgs.Extent">
            <summary>
            Gets or sets the Extents for this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ExtentM">
            <summary>
            The ExtentsM class extends the regular X and Y extent to the X, Y and M case.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.Extent">
            <summary>
            Extent works like an envelope but is faster acting, has a minimum memory profile,
            only works in 2D and has no events.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IExtent">
            <summary>
            A very simple, 2D extent specification.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IExtent.MinX">
            <summary>
            Minimum in the X dimension, usually left or minimum longitude.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IExtent.MaxX">
            <summary>
            Maximum in the x dimension, usually right or maximum longitude.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IExtent.MinY">
            <summary>
            Minimum in the y dimension, usually bottom or minimum latitude.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IExtent.MaxY">
            <summary>
            Maximum in the y dimension, usually the top or maximum latitude.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IExtent.HasM">
            <summary>
            Gets a Boolean that is true if the Min and Max M range should be used.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IExtent.HasZ">
            <summary>
            Gets a Boolean indicating whether the Z value should be used.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Extent.#ctor">
            <summary>
            Creates a new instance of Extent. This introduces no error checking and assumes
            that the user knows what they are doing when working with this.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Extent.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new extent from the specified ordinates
            </summary>
            <param name="xMin"></param>
            <param name="yMin"></param>
            <param name="xMax"></param>
            <param name="yMax"></param>
        </member>
        <member name="M:DotSpatial.Data.Extent.#ctor(System.Double[],System.Int32)">
            <summary>
            Given a long array of doubles, this builds an extent from a small part of that
            xmin, ymin, xmax, ymax
            </summary>
            <param name="values"></param>
            <param name="offset"></param>
        </member>
        <member name="M:DotSpatial.Data.Extent.#ctor(System.Double[])">
            <summary>
            XMin, YMin, XMax, YMax order
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:DotSpatial.Data.Extent.#ctor(DotSpatial.Topology.IEnvelope)">
            <summary>
            Creates a new extent from the specified envelope
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:DotSpatial.Data.Extent.Clone">
            <summary>
            Produces a clone, rather than using this same object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.op_Equality(DotSpatial.Data.Extent,DotSpatial.Data.IExtent)">
            <summary>
            Equality test
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.op_Inequality(DotSpatial.Data.Extent,DotSpatial.Data.IExtent)">
            <summary>
            Inequality test
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.Contains(DotSpatial.Data.IExtent)">
            <summary>
            Tests if this envelope is contained by the specified envelope
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.Contains(DotSpatial.Topology.Coordinate)">
            <summary>
            Tests if this envelope is contained by the specified envelope
            </summary>
            <param name="c">The coordinate to test.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.Contains(DotSpatial.Topology.IEnvelope)">
            <summary>
            Tests if this envelope is contained by the specified envelope
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.CopyFrom(DotSpatial.Data.IExtent)">
            <summary>
            Copies the MinX, MaxX, MinY, MaxY values from extent.
            </summary>
            <param name="extent">Any IExtent implementation.</param>
        </member>
        <member name="M:DotSpatial.Data.Extent.Equals(System.Object)">
            <summary>
            Allows equality testing for extents that is derived on the extent itself.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.ExpandBy(System.Double,System.Double)">
            <summary>
            Expand will adjust both the minimum and maximum by the specified sizeX and sizeY
            </summary>
            <param name="padX">The amount to expand left and right.</param>
            <param name="padY">The amount to expand up and down.</param>
        </member>
        <member name="M:DotSpatial.Data.Extent.ExpandBy(System.Double)">
            <summary>
            This expand the extent by the specified padding on all bounds.  So the width will
            change by twice the padding for instance.  To Expand only x and y, use
            the overload with those values explicitly specified.
            </summary>
            <param name="padding">The double padding to expand the extent.</param>
        </member>
        <member name="M:DotSpatial.Data.Extent.ExpandToInclude(DotSpatial.Data.IExtent)">
            <summary>
            Expands this extent to include the domain of the specified extent
            </summary>
            <param name="ext">The extent to expand to include</param>
        </member>
        <member name="M:DotSpatial.Data.Extent.ExpandToInclude(System.Double,System.Double)">
            <summary>
            Expands this extent to include the domain of the specified point
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:DotSpatial.Data.Extent.GetHashCode">
            <summary>
            Spreads the values for the basic X, Y extents across the whole range of int.
            Repetition will occur, but it should be rare.
            </summary>
            <returns>Integer</returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.Intersection(DotSpatial.Data.Extent)">
            <summary>
            Calculates the intersection of this extent and the other extent.  A result
            with a min greater than the max in either direction is considered invalid
            and represents no intersection.
            </summary>
            <param name="other">The other extent to intersect with.</param>
        </member>
        <member name="M:DotSpatial.Data.Extent.Intersects(DotSpatial.Topology.Coordinate)">
            <summary>
            Returns true if the coordinate exists anywhere within this envelope
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.Intersects(System.Double,System.Double)">
            <summary>
            Tests for intersection with the specified coordinate
            </summary>
            <param name="x">The double ordinate to test intersection with in the X direction</param>
            <param name="y">The double ordinate to test intersection with in the Y direction</param>
            <returns>True if a point with the specified x and y coordinates is within or on the border
            of this extent object.  NAN values will always return false.</returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.Intersects(DotSpatial.Data.Vertex)">
            <summary>
            Tests to see if the point is inside or on the boundary of this extent.
            </summary>
            <param name="vert"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.Intersects(DotSpatial.Data.IExtent)">
            <summary>
            Tests for an intersection with the specified extent
            </summary>
            <param name="ext">The other extent</param>
            <returns>Boolean, true if they overlap anywhere, or even touch</returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.Intersects(DotSpatial.Topology.IEnvelope)">
            <summary>
            Tests with the specified envelope for a collision
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.IsEmpty">
            <summary>
            If this is undefined, it will have a min that is larger than the max, or else
            any value is NaN. This only applies to the X and Z terms. Check HasM or HasZ higher dimensions.
            </summary>
            <returns>Boolean, true if the envelope has not had values set for it yet.</returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.Parse(System.String)">
            <summary>
            This allows parsing the X and Y values from a string version of the extent as:
            'X[-180|180], Y[-90|90]'  Where minimum always precedes maximum.  The correct
            M or MZ version of extent will be returned if the string has those values.
            </summary>
            <param name="text">The string text to parse.</param>
        </member>
        <member name="M:DotSpatial.Data.Extent.TryParse(System.String,DotSpatial.Data.Extent@,System.String@)">
            <summary>
            This reads the string and attempts to derive values from the text.
            </summary>
            <param name="text"></param>
            <param name="result"></param>
            <param name="nameFailed"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.SetCenter(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This centers the X and Y aspect of the extent on the specified center location.
            </summary>
            <param name="centerX"></param>
            <param name="centerY"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:DotSpatial.Data.Extent.SetCenter(DotSpatial.Topology.Coordinate,System.Double,System.Double)">
            <summary>
            This centers the X and Y aspect of the extent on the specified center location.
            </summary>
            <param name="center">The center coordinate to to set.</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:DotSpatial.Data.Extent.SetCenter(DotSpatial.Topology.Coordinate)">
            <summary>
            This centers the extent on the specified coordinate, keeping the width and height the same.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Extent.SetValues(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the values for xMin, xMax, yMin and yMax.
            </summary>
            <param name="minX">The double Minimum in the X direction.</param>
            <param name="minY">The double Minimum in the Y direction.</param>
            <param name="maxX">The double Maximum in the X direction.</param>
            <param name="maxY">The double Maximum in the Y direction.</param>
        </member>
        <member name="M:DotSpatial.Data.Extent.ToEnvelope">
            <summary>
            Creates a geometric envelope interface from this
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.ToString">
            <summary>
            Creates a string that shows the extent.
            </summary>
            <returns>The string form of the extent.</returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.Within(DotSpatial.Data.IExtent)">
            <summary>
            Tests if this envelope is contained by the specified envelope
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.Within(DotSpatial.Topology.IEnvelope)">
            <summary>
            Tests if this envelope is contained by the specified envelope
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.TryExtract(System.String,System.String,System.Double@,System.Double@)">
            <summary>
            Attempts to extract the min and max from one element of text.  The element should be
            formatted like X[1.5, 2.7] using an invariant culture.
            </summary>
            <param name="entireText"></param>
            <param name="name">The name of the dimension, like X.</param>
            <param name="min">The minimum that gets assigned</param>
            <param name="max">The maximum that gets assigned</param>
            <returns>Boolean, true if the parse was successful.</returns>
        </member>
        <member name="M:DotSpatial.Data.Extent.TryParseExtremes(System.String,System.Double@,System.Double@)">
            <summary>
            This method converts the X and Y text into two doubles.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.Extent.Center">
            <summary>
            Gets the Center of this extent.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Extent.HasM">
            <summary>
            Gets or sets whether the M values are used.  M values are considered optional,
            and not mandatory.  Unused could mean either bound is NaN for some reason, or
            else that the bounds are invalid by the Min being less than the Max.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Extent.HasZ">
            <summary>
            Gets or sets whether the M values are used.  M values are considered optional,
            and not mandatory.  Unused could mean either bound is NaN for some reason, or
            else that the bounds are invalid by the Min being less than the Max.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Extent.MaxX">
            <summary>
            Max X
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Extent.MaxY">
            <summary>
            Max Y
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Extent.MinX">
            <summary>
            Min X
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Extent.MinY">
            <summary>
            Min Y
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Extent.Height">
            <summary>
            Gets MaxY - MinY.  Setting this will update MinY, keeping MaxY the same.  (Pinned at top left corner).
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Extent.Width">
            <summary>
            Gets MaxX - MinX.  Setting this will update MaxX, keeping MinX the same. (Pinned at top left corner).
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Extent.X">
            <summary>
            Gets MinX.  Setting this will shift both MinX and MaxX, keeping the width the same.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Extent.Y">
            <summary>
            Gets MaxY.  Setting this will shift both MinY and MaxY, keeping the height the same.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IExtentM">
            <summary>
            Supports bounding in the M Dimension
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IExtentM.MinM">
            <summary>
            Gets or sets the minimum M value
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IExtentM.MaxM">
            <summary>
            Gets or sets the maximum M value
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.#ctor">
            <summary>
            Initializes a new instance of the ExtentM class.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ExtentM class.
            </summary>
            <param name="minX">The double Minimum in the X direction.</param>
            <param name="minY">The double Minimum in the Y direction.</param>
            <param name="minM">The double Minimum in the Measure category.</param>
            <param name="maxX">The double Maximum in the X direction.</param>
            <param name="maxY">The double Maximum in the Y direction.</param>
             <param name="maxM">The double Maximum in the Measure category.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.#ctor(DotSpatial.Data.IExtent,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ExtentM class that is specially designed to work
            with shapefile formats that have a Measure value.  Obviously other formats can use
            this as well.
            </summary>
            <param name="xyExtent">An extent that contains only the x and y boundaries.</param>
            <param name="minM">The minimum M.</param>
            <param name="maxM">The maximum M.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.#ctor(DotSpatial.Topology.IEnvelope)">
            <summary>
            Initializes a new instance of the ExtentM class.  This overload works from an envelope.
            </summary>
            <param name="env">The envelope with extent values to read.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.Clone">
            <summary>
            Produces a clone, rather than using this same object.
            </summary>
            <returns>Returns a copy of this object.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.Contains(DotSpatial.Topology.Coordinate)">
            <summary>
            Tests if this envelope is contained by the specified envelope
            </summary>
            <param name="c">The coordinate to test.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.Contains(DotSpatial.Data.IExtent)">
            <summary>
            Tests if this envelope is contained by the specified envelope
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.Contains(DotSpatial.Topology.IEnvelope)">
            <summary>
            Tests if this envelope is contained by the specified envelope.  If either element
            does not support M values, then only the default X and Y contains test is used.
            </summary>
            <param name="env">The envelope to test.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.CopyFrom(DotSpatial.Data.IExtent)">
            <summary>
            Copies from the implementation of IExtent.  This checks to see if IExtentM is implemented
            and if not, this only sets the X and Y bounds.
            </summary>
            <param name="extent"></param>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.ExpandBy(System.Double)">
            <summary>
            This expand the extent by the specified padding on all bounds.  So the width will
            change by twice the padding for instance.  To Expand only x and y, use
            the overload with those values explicitly specified.
            </summary>
            <param name="padding">The double padding to expand the extent.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.ExpandToInclude(DotSpatial.Data.IExtent)">
            <summary>
            Expands this extent to include the domain of the specified extent.  If the specified case
            doesn't support IExtentM or HasM is false for that extent, then this test will default
            to the XY case.
            </summary>
            <param name="ext">The extent to expand to include.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.ExpandToInclude(System.Double,System.Double,System.Double)">
            <summary>
            Expands this extent to include the domain of the specified point
            </summary>
            <param name="x">The x ordinate to expand to.</param>
            <param name="y">The y ordinate to expand to.</param>
            <param name="m">The m ordinate to expand to.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.Intersection(DotSpatial.Data.Extent)">
            <summary>
            Calculates the intersection of this extent and the other extent.  A result
            with a min greater than the max in either direction is considered invalid
            and represents no intersection.
            </summary>
            <param name="other">The other extent to intersect with.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.Intersects(DotSpatial.Topology.Coordinate)">
            <summary>
            Returns true if the coordinate exists anywhere within this envelope.  If this
            envelope represents a valid M extent by having a max greater than min and
            neither value being NaN, then this will also test the coordinate for the
            M range.
            </summary>
            <param name="c">The Coordinate to test.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.Intersects(System.Double,System.Double,System.Double)">
            <summary>
            Tests for intersection with the specified coordinate.  If the m is double.NaN
            then it degenerates to only testing X and Y, even if this envelope has an M range.
            </summary>
            <param name="x">The double ordinate to test intersection with in the X direction</param>
            <param name="y">The double ordinate to test intersection with in the Y direction</param>
            <param name="m">The optional double measure parameter to test.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.Intersects(DotSpatial.Data.IExtent)">
            <summary>
            Tests for an intersection with the specified extent.  Both this extent and the
            other must implement IExtentM and HasM must be true for both, or else just
             the X and Y are compared.
            </summary>
            <param name="ext">The other extent.  If the extent doesn't implement IExtentM, then
            this comparison simply defaults to the X Y intersect case.</param>
            <returns>Boolean, true if they overlap anywhere, or even touch.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.Intersects(DotSpatial.Topology.IEnvelope)">
            <summary>
            Tests with the specified envelope for a collision.  If any part of the M bounds
            are invalid, this will default to the XY Intersect comparison.
            </summary>
            <param name="env">The envelope to test.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.RemoveM">
            <summary>
            Since M values are optional, they can be set to an invalid state, which will behave the
            same as if the M bounds did not exist.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.SetValues(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the values for xMin, xMax, yMin and yMax.
            </summary>
            <param name="minX">The double Minimum in the X direction.</param>
            <param name="minY">The double Minimum in the Y direction.</param>
            <param name="minM">The double Minimum in the Measure category.</param>
            <param name="maxX">The double Maximum in the X direction.</param>
            <param name="maxY">The double Maximum in the Y direction.</param>
             <param name="maxM">The double Maximum in the Measure category.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.Within(DotSpatial.Data.IExtent)">
            <summary>
            Tests if this envelope is contained by the specified envelope.  If either party doesn't have
            M constraints, they will not be used for this test.
            </summary>
            <param name="ext">implementation of IExtent to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.Within(DotSpatial.Topology.IEnvelope)">
            <summary>
            Tests if this envelope is contained by the specified envelope.  If either envelope doesn't
            support M then only the X and Y case will be tested.
            </summary>
            <param name="env">The envelope to compare.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.Equals(System.Object)">
            <summary>
            Allows equality testing for extents that is derived on the extent itself.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.ToString">
            <summary>
            Creates a string that shows the extent.
            </summary>
            <returns>The string form of the extent.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentM.GetHashCode">
            <summary>
            Spreads the values for the basic X, Y extents across the whole range of int.
            Repetition will occur, but it should be rare.
            </summary>
            <returns>Integer</returns>
        </member>
        <member name="P:DotSpatial.Data.ExtentM.HasM">
            <summary>
            Gets or sets whether the M values are used.  M values are considered optional,
            and not mandatory.  Unused could mean either bound is NaN for some reason, or
            else that the bounds are invalid by the Min being less than the Max.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ExtentM.MaxM">
            <inheritdoc/>
        </member>
        <member name="P:DotSpatial.Data.ExtentM.MinM">
            <inheritdoc/>
        </member>
        <member name="T:DotSpatial.Data.ExtentMZ">
            <summary>
            For shapefiles, the extents may or may not have M and Z values depending on the file type.
            These are valid IExtent implementations, but add both the M and Z extent options.
            For the file format, the Z values are mandatory, and so whatever the values are will be
            stored.  This may cause issues when viewing in ArcGIS if you have entered some bad Z
            envelope extents.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IExtentZ">
            <summary>
            The Extent interface for Z dimension extent bounds.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IExtentZ.MinZ">
            <summary>
            The minimum in the Z dimension (usually the bottom)
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IExtentZ.MaxZ">
            <summary>
            The maximum in the Z dimension (usually the top)
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.#ctor">
            <summary>
            Initializes a new instance of the ExtentMZ class.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ExtentMZ class.
            </summary>
            <param name="minX">The double Minimum in the X direction.</param>
            <param name="minY">The double Minimum in the Y direction.</param>
            <param name="minM">The double Minimum in the Measure category.</param>
            <param name="minZ">The double Minimum in the Z direction.</param>
            <param name="maxX">The double Maximum in the X direction.</param>
            <param name="maxY">The double Maximum in the Y direction.</param>
             <param name="maxM">The double Maximum in the Measure category.</param>
            <param name="maxZ">The double Maximum in the Z direction.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.#ctor(DotSpatial.Topology.IEnvelope)">
            <summary>
            Initialize a new instance of the ExtentMZ class.
            </summary>
            <param name="env">The Envelope to read the minimum and maximum values from.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.RemoveZ">
            <summary>
            Since M values are optional, they can be set to an invalid state, which will behave the
            same as if the M bounds did not exist.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.CopyFrom(DotSpatial.Data.IExtent)">
            <summary>
            Copies from the implementation of IExtent.  This checks to see if IExtentM is implemented
            and if not, this only sets the X and Y bounds.
            </summary>
            <param name="extent"></param>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.SetValues(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the values for xZin, xMax, yMin and yMax.
            </summary>
            <param name="minX">The double Minimum in the X direction.</param>
            <param name="minY">The double Minimum in the Y direction.</param>
            <param name="minM">The double Minimum in the Measure category.</param>
            <param name="minZ">The double Minimum in the Z direction.</param>
            <param name="maxX">The double Maximum in the X direction.</param>
            <param name="maxY">The double Maximum in the Y direction.</param>
             <param name="maxM">The double Maximum in the Measure category.</param>
            <param name="maxZ">The double Maximum in the Z direction.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.Contains(DotSpatial.Topology.Coordinate)">
            <summary>
            Tests if this envelope is contained by the specified envelope
            </summary>
            <param name="c">The coordinate to test.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.Intersects(DotSpatial.Topology.Coordinate)">
            <summary>
            Returns true if the coordinate exists anywhere within this envelope.  If this
            envelope represents a valid Z extent by having a max greater than min and
            neither value being NaN, then this will also test the coordinate for the
            Z range.
            </summary>
            <param name="c">The Coordinate to test.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.Intersects(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests for intersection with the specified coordinate.  If the m is double.NaN
            then it degenerates to only testing M, X and Y, even if this envelope has an M range.
            </summary>
            <param name="x">The double ordinate to test intersection with in the X direction.</param>
            <param name="y">The double ordinate to test intersection with in the Y direction.</param>
            <param name="m">The optional double measure parameter to test.</param>
            <param name="z">The double ordinate to test intersection with in the Z direction.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.Intersects(DotSpatial.Data.IExtent)">
            <summary>
            Tests for an intersection with the specified extent.  Both this extent and the
            other must implement IExtentM and HasM must be true for both, or else just
             the X and Y are compared.
            </summary>
            <param name="ext">The other extent.  If the extent doesn't implement IExtentM, then
            this comparison simply defaults to the M, X and Y intersect case.</param>
            <returns>Boolean, true if they overlap anywhere, or even touch.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.Intersects(DotSpatial.Topology.IEnvelope)">
            <summary>
            Tests with the specified envelope for a collision.  If any part of the Z bounds
            are invalid, this will default to the M, X and Y Intersect comparison.
            </summary>
            <param name="env">The envelope to test.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.Intersection(DotSpatial.Data.Extent)">
            <summary>
            Calculates the intersection of this extent and the other extent.  A result
            with a min greater than the max in either direction is considered invalid
            and represents no intersection.
            </summary>
            <param name="other">The other extent to intersect with.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.ExpandToInclude(DotSpatial.Data.IExtent)">
            <summary>
            Expands this extent to include the domain of the specified extent.  If the specified case
            doesn't support IExtentM or HasM is false for that extent, then this test will default
            to the M, X and Y case.
            </summary>
            <param name="ext">The extent to expand to include</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.ExpandBy(System.Double)">
            <summary>
            This expand the extent by the specified padding on all bounds.  So the width will
            change by twice the padding for instance.  To Expand only x and y, use
            the overload with those values explicitly specified.
            </summary>
            <param name="padding">The double padding to expand the extent.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.ExpandToInclude(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Expands this extent to include the domain of the specified point
            </summary>
            <param name="x">The x ordinate to expand to.</param>
            <param name="y">The y ordinate to expand to.</param>
            <param name="m">The m ordinate to expand to.</param>
            <param name="z">The z ordinate to expand to.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.Within(DotSpatial.Data.IExtent)">
            <summary>
            Tests if this envelope is contained by the specified envelope.  If either party doesn't have
            M constraints, they will not be used for this test.
            </summary>
            <param name="ext">implementation of IExtent to compare to.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.Contains(DotSpatial.Data.IExtent)">
            <summary>
            Tests if this envelope is contained by the specified envelope
            </summary>
            <param name="ext">The extent to test.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.Within(DotSpatial.Topology.IEnvelope)">
            <summary>
            Tests if this envelope is contained by the specified envelope.  If either envelope doesn't
            support M then only the XY case will be tested.
            </summary>
            <param name="env">The envelope to compare.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.Contains(DotSpatial.Topology.IEnvelope)">
            <summary>
            Tests if this envelope is contained by the specified envelope.  If either element
            does not support M values, then only the default XY contains test is used.
            </summary>
            <param name="env">The envelope to test.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.ToString">
            <summary>
            Creates a string that shows the extent.
            </summary>
            <returns>The string form of the extent.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.Clone">
            <summary>
            Produces a clone, rather than using this same object.
            </summary>
            <returns>Returns a copy of this object.</returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.Equals(System.Object)">
            <summary>
            Allows equality testing for extents that is derived on the extent itself.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ExtentMZ.GetHashCode">
            <summary>
            Spreads the values for the basic X, Y extents across the whole range of int.
            Repetition will occur for extents that are close, but should be rare.
            </summary>
            <returns>Integer</returns>
        </member>
        <member name="P:DotSpatial.Data.ExtentMZ.HasZ">
            <summary>
            Gets or sets whether the M values are used.  M values are considered optional,
            and not mandatory.  Unused could mean either bound is NaN for some reason, or
            else that the bounds are invalid by the Min being less than the Max.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ExtentMZ.MinZ">
            <inheritdoc/>
        </member>
        <member name="P:DotSpatial.Data.ExtentMZ.MaxZ">
            <inheritdoc/>
        </member>
        <member name="T:DotSpatial.Data.ExtentParseException">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Data.ExtentParseException.EXTENT_TEXT_TEMPLATE">
            <summary>
            The string template that should be used.  M and Z are optional.  Do use a comma to
            delimit terms, but the space doesn't matter.  Do use square brackets to enclose
            numbers, and do use the | separator to separate min from max.  Do place min
            before max in each term.  The order of the terms doesn't matter.  Use periods
            for decimals and an invariant culture.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ExtentParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ExtentParseException
            </summary>
            <param name="message">The string message to parse.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ExtentParseException
            </summary>
            <param name="message">The string message to parse.</param>
            <param name="innerException">The inner exception that caused this exception.</param>
        </member>
        <member name="M:DotSpatial.Data.ExtentParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ExtentParseException
            </summary>
            <param name="info">The Serialization info class that holds the serialized object about which
            the exception is being thrown.</param>
            <param name="context">The streaming context that contains contextual information about the
            source or destination.</param>
        </member>
        <member name="P:DotSpatial.Data.ExtentParseException.Expression">
            <summary>
            Gets the string expression that provoked the exception.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.FeatureRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IFeatureRow">
            <summary>
            This interface allows access to geometries and attributes in a more cohesive package.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IFeatureRow.StoreShape">
            <summary>
            Stores the shape to the GEOMETRY WKB.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IFeatureRow.StoreGeometry">
            <summary>
            Stores the geometry to the geometry wkb.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureRow.Extent">
            <summary>
            This is a cached extent.  This will not reflect changes in Geometry or Shape unless
            they have been stored, but will reflect the most recently stored or retrieved
            extent from accessing either the shape or geometry.  In cases where reading from
            WKB, this will be lazily created, but it will be cached when reading from
            shapefiles.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureRow.Geometry">
            <summary>
            A Geometry created lazily from a WKB byte structure in the GEOMETRY field preferentially
            or if the field is DBNull and the shape is not null, then from the Shape object.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureRow.Shape">
            <summary>
            A Shape that is either created lazily from the WKB Geometry or directly from a shapefile.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureRow.Item(System.String)">
            <summary>
            The rest of the attributes are stored by an indexed property.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.IFeatureRow.IsGeometryCreated">
            <summary>
            Boolean, true if the geometry has already been created, false otherwise.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureRow.IsShapeCreated">
            <summary>
            Boolean, true if the shape has already been created, false otherwise.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureRow.IsExtentCreated">
            <summary>
            Boolean, true if the extent has been created, false otherwise.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureRow.#ctor(System.Data.DataRowBuilder)">
            <summary>
            Creates a new instance of the FeatureRow class.
            </summary>
            <param name="rb"></param>
        </member>
        <member name="M:DotSpatial.Data.FeatureRow.StoreShape">
            <summary>
            Stores the shape into the WKB for storage in a database, overwriting any existing value.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureRow.StoreGeometry">
            <summary>
            Stores the goemetry as WKB, overwriting any existing value.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureRow.SetWellKnwonBinaryNull">
            <summary>
            Sets the geometry field to DBNull.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureRow.IsWellKnownBinaryNull">
            <summary>
            Gets whether the geometry is null.
            </summary>
            <returns>Boolean, true if the column is null.</returns>
        </member>
        <member name="P:DotSpatial.Data.FeatureRow.FID">
            <summary>
            A long integer representing the FID.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureRow.WellKnownBinary">
            <summary>
            The Byte form of the Geometry
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureRow.Extent">
            <summary>
            From shapefiles, this should be cached.  Any other source must likely
            create the extent from a geometry, and possibly all the way from WKB.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureRow.Geometry">
            <summary>
            A lazily created and cached geometry.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureRow.IsExtentCreated">
            <summary>
            Boolean, true if the extent has been created, false otherwise.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureRow.IsGeometryCreated">
            <summary>
            Boolean, true if the geometry has already been created, false otherwise.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureRow.IsShapeCreated">
            <summary>
            Boolean, true if the shape has already been created, false otherwise.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureRow.Shape">
            <summary>
            When reading from WKB, the Shape is lazily created.  When reading from sources like
            a shapefile, the Shape is actually pre-fetched because the value exists as a shape
            rather than a geometry.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.FeatureRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureRowChangeEvent.#ctor(DotSpatial.Data.FeatureRow,System.Data.DataRowAction)">
            <summary>
            A new event argument for events in a FeatureTable.
            </summary>
            <param name="row">The FeatureRow of the event.</param>
            <param name="action">The action occuring for this event.</param>
        </member>
        <member name="P:DotSpatial.Data.FeatureRowChangeEvent.Row">
            <summary>
            The FeatureRow for this event.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureRowChangeEvent.Action">
            <summary>
            The action for this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.FeatureSetEventArgs">
            <summary>
            An EventArgs specifically tailored to FeatureSet.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetEventArgs.#ctor(DotSpatial.Data.IFeatureSet)">
            <summary>
            Initializes a new instance of the FeatureSetEventArgs class.
            </summary>
            <param name="featureSet">The IFeatureSet that is involved in this event.</param>
        </member>
        <member name="P:DotSpatial.Data.FeatureSetEventArgs.FeatureSet">
            <summary>
            Gets the Raster associated with this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.FeatureSourceRowEditEvent">
            <summary>
             Callback specified when calling IFeatureSource.SearchAndModifyAttributes
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:DotSpatial.Data.FeatureSourceRowEditEventArgs">
            <summary>
            FeatureSourceRowEditEvent arguments
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSourceRowEditEventArgs.RowEditEventArgs">
            <summary>
            RowEditEvent arguments
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSourceRowEditEventArgs.Shape">
            <summary>
            Shape geometry associated with the row
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSourceRowEditEventArgs.#ctor(DotSpatial.Data.RowEditEventArgs,DotSpatial.Data.Shape)">
            <summary>
            Construct FeatureSourceRowEditEventArgs
            </summary>
            <param name="rowEditEventArgs"></param>
            <param name="shape"></param>
        </member>
        <member name="T:DotSpatial.Data.FeatureTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.#ctor">
            <summary>
            Initializes a new instance of a FeatureTable class.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.#ctor(System.String)">
            <summary>
            Initializes a new instance of a FeatureTable class.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.AddFeatureRow(DotSpatial.Data.FeatureRow)">
            <summary>
            Adds the specified FeatureRow to this FeatureTable.
            </summary>
            <param name="row">the row to add.</param>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.AddFeatureRow(System.Byte[])">
            <summary>
            Generates a new feature row using only the goemetry.
            </summary>
            <param name="wellKnownBinary">The byte form of the well known text to use in creating a new, otherwise empty row.</param>
            <returns>The newly created FeatureRow with the specified well known text.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.NewFeatureRow">
            <summary>
            Retrieves a newly generated row from this table cast as a FeatureRow.
            </summary>
            <returns>The FeatureRow class.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.Clone">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.FindByFID(System.Int64)">
            <summary>
            Finds a FeatureRow by the FID field.
            </summary>
            <param name="fid">The long fid to find</param>
            <returns>A FeatureRow</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.RemoveFeatureRow(DotSpatial.Data.FeatureRow)">
            <summary>
            Removes the specified row from the table.
            </summary>
            <param name="row">The FeatureRow to remove.</param>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.AddFeatureRow(DotSpatial.Topology.IGeometry)">
            <summary>
            Generates a new feature row using only the goemetry.
            </summary>
            <param name="geometry">The byte form of the well known text to use in creating a new, otherwise empty row.</param>
            <returns>The newly created FeatureRow with the specified well known text.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.CreateInstance">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.GetRowType">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.#ctor(System.Data.DataTable)">
            <summary>
            This may or may not be required for proper functioning, but is not part of the public API.
            </summary>
            <param name="table">A DataTable</param>
        </member>
        <member name="M:DotSpatial.Data.FeatureTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This may not work since I stripped off the xml related auto text that seems to rely on an existing dataset
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="E:DotSpatial.Data.FeatureTable.FeatureRowChanging">
            <summary>
            Occurs while the row is changing
            </summary>
        </member>
        <member name="E:DotSpatial.Data.FeatureTable.FeatureRowChanged">
            <summary>
            Occurs after the row has been changed.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.FeatureTable.FeatureRowDeleting">
            <summary>
            Occurs while the row is being deleted.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.FeatureTable.FeatureRowDeleted">
            <summary>
            Occurs after the row has been deleted.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureTable.Count">
            <summary>
            The integer number of rows in this table.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureTable.FidColumn">
            <summary>
            The Column containing the FID value.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureTable.GeometryColumn">
            <summary>
            The Column containing the Geometry column.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureTable.GeometryFactory">
            <summary>
            Optionally gets or sets a geometry factory to use when instantiating geometries
            from WKB for the rows of this table.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureTable.Item(System.Int32)">
            <summary>
            Accesses the FeatureRow of this table based on the specified index.
            </summary>
            <param name="index">The integer index of the feature row to access.</param>
            <returns>This FeatureRow</returns>
        </member>
        <member name="T:DotSpatial.Data.Fields">
            <summary>
            Manage the Fields associated with a dbase
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Fields.#ctor(System.Collections.Generic.IEnumerable{DotSpatial.Data.Field})">
            <summary>
            Construct Fields and update the individual field data addresses
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:DotSpatial.Data.Fields.Add(DotSpatial.Data.Field)">
            <summary>
            Add a field
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:DotSpatial.Data.Fields.UpdateDataAddresses">
            <summary>
            Update the DataAddress of each field
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Fields.Item(System.Int32)">
            <summary>
            Retrieve field by ordinal
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.Fields.Item(System.String)">
            <summary>
            Retrieve field by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.Fields.Count">
            <summary>
            Get number of fields
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IContainRasterBounds">
            <summary>
            An interface for specifying something has a Bounds property on it that is a raster bounds.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IContainRasterBounds.Bounds">
            <summary>
            Gets or sets the image bounds being used to define the georeferencing of the image
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IGetBitmap">
            <summary>
            Returns the bitmap
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IGetBitmap.GetBitmap">
            <summary>
            Attempts to create a bitmap for the entire image.  This may cause memory exceptions.
            </summary>
            <returns>
            A Bitmap of the image.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.IGetBitmap.GetBitmap(DotSpatial.Data.Extent,System.Drawing.Size)">
            <summary>
            The geographic envelope gives the region that the image should be created for.
            The window gives the corresponding pixel dimensions for the image, so that
            images matching the resolution of the screen can be used.
            </summary>
            <param name="envelope">
            The geographic extents to retrieve data for
            </param>
            <param name="size">
            The rectangle that defines the size of the drawing area in pixels
            </param>
            <returns>
            A bitmap captured from the main image
            </returns>
        </member>
        <member name="M:DotSpatial.Data.IGetBitmap.GetBitmap(DotSpatial.Data.Extent,System.Drawing.Rectangle)">
            <summary>
            The geographic envelope gives the region that the image should be created for.
            The window gives the corresponding pixel dimensions for the image, so that
            images matching the resolution of the screen can be used.
            </summary>
            <param name="envelope">
            The geographic extents to retrieve data for
            </param>
            <param name="window">
            The rectangle that defines the size of the drawing area in pixels
            </param>
            <returns>
            A bitmap captured from the main image
            </returns>
        </member>
        <member name="T:DotSpatial.Data.ImageDataEventArgs">
            <summary>
            An EventArgs specifically tailored to ImageData.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ImageDataEventArgs.#ctor(DotSpatial.Data.IImageData)">
            <summary>
            Initializes a new instance of the ImageDataEventArgs class.
            </summary>
            <param name="imageData">The IImageData that is involved in this event.</param>
        </member>
        <member name="P:DotSpatial.Data.ImageDataEventArgs.ImageData">
            <summary>
            Gets the ImageData associated with this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.Endian">
            <summary>
            An enumeration for specifying the endian byte order to use.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.Endian.BigEndian">
            <summary>
            Specifies big endian like mainframe or unix system.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.Endian.LittleEndian">
            <summary>
            Specifies little endian like most pc systems.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IFeatureSource">
            <summary>
            A new interface for accessing database or file features to large for memory.  This allows editing only for attribute content,
            but allows Add, Remove, AddRange, and Query functionality that covers both vector and raster content.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSource.Add(DotSpatial.Data.IFeature)">
            <summary>
            Updates the file with an additional feature.
            </summary>
            <param name="feature"></param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSource.RemoveAt(System.Int32)">
            <summary>
            Removes the feature with the specified index
            </summary>
            <param name="index">Removes the feature from the specified index location</param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSource.AddRange(System.Collections.Generic.IEnumerable{DotSpatial.Data.IFeature})">
            <summary>
            The default implementation calls the add method repeatedly.
            </summary>
            <param name="features">The set of features to add</param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSource.Select(System.String,DotSpatial.Topology.IEnvelope,System.Int32@,System.Int32)">
            <summary>
            Select function passed with a filter expression.
            </summary>
            <param name="filterExpression">The string filter expression based on attributes</param>
            <param name="envelope">The envelope for vector filtering.</param>
            <param name="startIndex">The integer start index where values should be checked.  This will be updated to the </param>
            last index that was checked before the return, so that paging the query can begin with that index in the next cycle.
            Be sure to add one before the next call.
            <param name="maxCount">The integer maximum number of IFeature values that should be returned.</param>
            <returns>A dictionary with FID keys and IFeature values.</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSource.SearchAndModifyAttributes(DotSpatial.Topology.IEnvelope,System.Int32,DotSpatial.Data.FeatureSourceRowEditEvent)">
            <summary>
            Conditionally modify attributes as searched in a single pass via client supplied callback.
            </summary>
            <param name="envelope">The envelope for vector filtering.</param>
            <param name="chunkSize">Number of shapes to request from the ShapeSource in each chunk</param>
            <param name="rowCallback">Callback on each feature</param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSource.EditAttributes(System.Int32,System.Data.DataRow)">
            <summary>
            Edits the values of the specified row in the attribute table.  Since not all data formats
            can handle the dynamic change of attributes, updating vectors can be done with Remove and Add.
            </summary>
            <param name="fid">The feature offest</param>
            <param name="attributeValues">The row of new attribute values.</param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSource.EditAttributes(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,System.Data.DataRow}})">
            <summary>
            Edits the values of the specified rows in the attribute table.
            </summary>
            <param name="indexDataRowPairs"></param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSource.UpdateExtents">
            <summary>
            Adding and removing shapes may make the bounds for the entire shapefile invalid.
            This triggers a check that ensures that the collective extents contain all the shapes.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSource.Extent">
            <summary>
             The geographic extent of the feature source
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSource.AttributeTable">
            <summary>
            Get the attribute table associated with the feature source
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ImageBandType">
            <summary>
            An enumeration listing the types of image band interpretations supported.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ImageBandType.ARGB">
            <summary>
            Alpha, Red, Green, Blue 4 bytes per pixel, 4 bands
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ImageBandType.RGB">
            <summary>
             Red, Green, Blue 3 bytes per pixel, 3 bands
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ImageBandType.Gray">
            <summary>
            Gray as one byte per pixel, 1 band
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ImageBandType.PalletCoded">
            <summary>
            Colors encoded 1 byte per pixel, 1 band
            </summary>
        </member>
        <member name="T:DotSpatial.Data.InRamImage">
            <summary>
            Sets the InRamImage for this class.  This is just a georeferenced .Net bitmap that also implements
            IGetBitmap for cross purpose use with IImageData implementations.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.InRamImage.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of an InRamImage class.  This class supports a basic .Net Image
            plus a geographic extent as a RasterBounds.  This class does not feature any byte level
            data access or built in file access.  The expectation is that this will only be used in memory.
            </summary>
            <param name="image">THe Bitmap image to use to create this image.</param>
        </member>
        <member name="M:DotSpatial.Data.InRamImage.GetBitmap">
            <summary>
            Returns the internal bitmap in this case.  In other cases, this may have to be constructed
            from the unmanaged memory content.
            </summary>
            <returns>
            A Bitmap that represents the entire image.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.InRamImage.GetBitmap(DotSpatial.Data.Extent,System.Drawing.Rectangle)">
            <summary>
            The geographic envelope gives the region that the image should be created for.
            The window gives the corresponding pixel dimensions for the image, so that
            images matching the resolution of the screen can be used.
            </summary>
            <param name="envelope">
            The geographic extents to retrieve data for
            </param>
            <param name="window">
            The rectangle that defines the size of the drawing area in pixels
            </param>
            <returns>
            A bitmap captured from the main image
            </returns>
        </member>
        <member name="M:DotSpatial.Data.InRamImage.GetBitmap(DotSpatial.Data.Extent,System.Drawing.Size)">
            <summary>
            The geographic envelope gives the region that the image should be created for.
            The window gives the corresponding pixel dimensions for the image, so that
            images matching the resolution of the screen can be used.
            </summary>
            <param name="envelope">The geographic extents to retrieve data for</param>
            <param name="size">The rectangle that defines the size of the drawing area in pixels</param>
            <returns>A bitmap captured from the main image </returns>
        </member>
        <member name="M:DotSpatial.Data.InRamImage.SetBitmap(System.Drawing.Bitmap)">
            <summary>
            Sets the bitmap for this InRamImage to use.
            </summary>
            <param name="value">the value to set.</param>
        </member>
        <member name="M:DotSpatial.Data.InRamImage.ToImageData">
            <summary>
            If byte access is required, a new class can be created that is a copy of this class for
            modifying values byte by byte.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.InRamImage.Bounds">
            <summary>
            Gets or sets the raster bounds
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IProj">
            <summary>
            The Projection interface that acts as a useful tool for calculating pixel coordinates
            to geographic coordinates and vise-versa.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IProj.ImageRectangle">
            <summary>
            The Rectangle representation of the geographic extents in image coordinates
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IProj.GeographicExtents">
            <summary>
            The geographic extents used for projection.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IRasterBoundDataSet">
            <summary>
            This interface specifically insists on an IRasterBounds as the Bounds property.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IDataSet">
            <summary>
            A very generic interface that is implemented by any dataset, regardless of what kinds of data that it has.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IReproject">
            <summary>
            This interface supports the basic Reprojection content.  CanReproject tests to see if the
            DotSpatial.Projections library exists and will return false if it does not exist.  In
            such a case the
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IReproject.Reproject(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Reprojects all of the in-ram vertices of vectors, or else this
            simply updates the "Bounds" of image and raster objects
            This will also update the projection to be the specified projection.
            </summary>
            <param name="targetProjection">
            The projection information to reproject the coordinates to.
            </param>
        </member>
        <member name="P:DotSpatial.Data.IReproject.CanReproject">
            <summary>
            Gets a value indicating whether the DotSpatial.Projections assembly is loaded.  If
            not, this returns false, and neither ProjectionInfo nor the Reproject() method should
            be used.
            </summary>
            <returns>Boolean, true if the value can reproject.</returns>
        </member>
        <member name="P:DotSpatial.Data.IReproject.Projection">
            <summary>
            Gets or sets the projection information for this dataset
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IReproject.ProjectionString">
            <summary>
            Gets or sets the proj4 string for this dataset.  This exists in
            case the Projections library is not loaded.  If the projection
            library is loaded, this also updates the Projection property.
            Setting this behaves like defining the projection and will not
            reproject the values.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IDataSet.Close">
            <summary>
            This closes the data set.  Many times this will simply do nothing, but
            in some cases this may close an open connection to a data source.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataSet.Extent">
            <summary>
            Gets or sets the extent for the dataset.  Usages to Envelope were replaced
            as they required an explicit using to DotSpatial.Topology which is not
            as intuitive.  Extent.ToEnvelope() and new Extent(myEnvelope) convert them.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataSet.IsDisposed">
            <summary>
            True if the dispose method has been called on this dataset.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataSet.Name">
            <summary>
            Gets or sets a string name identifying this dataset
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataSet.ProgressHandler">
            <summary>
            Gets or sets the progress handler to use for internal actions taken by this dataset.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataSet.SpaceTimeSupport">
            <summary>
            Gets or sets the space time support for this dataset.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataSet.TypeName">
            <summary>
            Gets or sets a string that describes as clearly as possible what type of
            elements are contained in this dataset.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IShapeSource">
            <summary>
            Rendering is considered a different pathway from editing.  For rendering, we can distance
            ourselves from the attributes all together in order to speedily grab just the indices
            that are within the view extent.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IShapeSource.GetShapes(System.Int32@,System.Int32,DotSpatial.Topology.IEnvelope)">
            <summary>
            Returns a dictionary with the FID and Shape, but only returns shapes within the envelope.
            </summary>
            <param name="startIndex">The integer offset of the first shape to test.  When this returns, the offset is set to the integer index of the last shape tested, regardless of whether or not it was returned.</param>
            <param name="count">The integer count of the maximum number of shapes to return here. </param>
            <param name="envelope">The geographic extents that can be used to limit the shapes.  If this is null, then no envelope is used.</param>
            <returns>The Dictionary with FID indices and Shape values</returns>
        </member>
        <member name="M:DotSpatial.Data.IShapeSource.GetShapes(System.Int32[])">
            <summary>
            Returns array of shapes at the specified indices
            </summary>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IShapeSource.GetShapeCount">
            <summary>
            Gets the integer count of the total number of shapes in the set.  This may run a query,
            so it is better to cache the result than call this repeatedly.
            </summary>
            <returns>The integer number of shapes in the entire source.</returns>
        </member>
        <member name="M:DotSpatial.Data.IShapeSource.EndGetShapesSession">
            <summary>
            Should be called when done making repeated calls to GetShapes to free internal resources.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IShapeSource.FeatureType">
            <summary>
            This is most likely set once per source.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.LineShape">
            <summary>
            LineShape
            </summary>
        </member>
        <member name="M:DotSpatial.Data.LineShape.Intersects(DotSpatial.Data.ShapeRange,DotSpatial.Data.ShapeRange)">
            <summary>
            Calculates the intersection of a polygon shape without relying on the NTS geometry
            </summary>
            <param name="lineShape"></param>
            <param name="otherShape"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.LineShape.IntersectsVertex(DotSpatial.Data.ShapeRange,DotSpatial.Data.ShapeRange)">
            <summary>
            Tests to see if any vertices from the other shape are coincident with a segment from this line shape.
            </summary>
            <param name="lineShape"></param>
            <param name="otherShape"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.LineShape.SegmentsIntersect(DotSpatial.Data.ShapeRange,DotSpatial.Data.ShapeRange)">
            <summary>
            Returns true if any segment from a line or polygon shape interesect any segments from the line or polygon shape.
            </summary>
            <param name="lineShape">A Line or Polygon shape</param>
            <param name="otherShape">Another line or polygon shape</param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.LineShape.Epsilon">
            <summary>
            Gets or sets the precision for calculating equality, but this is just a re-direction to Vertex.Epsilon
            </summary>
        </member>
        <member name="T:DotSpatial.Data.LineShapefileFeatureSource">
            <summary>
            This class is strictly the vector access code.  This does not handle
            the attributes, which must be handled independantly.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ShapefileFeatureSource">
            <summary>
             Provides common functionality for all ShapefileFeatureSource classes (Point, Line, Polygon)
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.#ctor(System.String)">
            <summary>
            Sets the fileName and creates a new ShapefileFeatureSource for the specified file.
            </summary>
            <param name="fileName">The fileName to work with.</param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets the fileName and creates a new PolygonshapefileFeatureSource for the specified file (and builds spatial index if requested)
            </summary>
            <param name="fileName"></param>
            <param name="useSpatialIndexing"></param>
            <param name="trackDeletedRows"></param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.Delete">
            <summary>
            This deletes the files with any extension and the same base fileName.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapefileFeatureSource.Quadtree">
            <summary>
            Spatial index for faster searches
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.Add(DotSpatial.Data.IFeature)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.RemoveAt(System.Int32)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.AddRange(System.Collections.Generic.IEnumerable{DotSpatial.Data.IFeature})">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.Select(System.String,DotSpatial.Topology.IEnvelope,System.Int32@,System.Int32)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.SearchAndModifyAttributes(DotSpatial.Topology.IEnvelope,System.Int32,DotSpatial.Data.FeatureSourceRowEditEvent)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.EditAttributes(System.Int32,System.Data.DataRow)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.EditAttributes(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,System.Data.DataRow}})">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.UpdateExtents">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.Open(System.String)">
            <summary>
            Create a ShapefileFeatureSource of the appropriate type
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.Open(System.String,System.Boolean,System.Boolean)">
            <summary>
            Create a ShapefileFeatureSource of the appropriate type spatial indexing
            </summary>
            <param name="filename"></param>
            <param name="useSpatialIndexing"></param>
            <param name="trackDeletedRows"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.UpdateHeader(DotSpatial.Data.ShapefileHeader,DotSpatial.Topology.IBasicGeometry)">
            <summary>
            Update the header to include the feature extent
            </summary>
            <param name="header"></param>
            <param name="feature"></param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.UpdateHeader(DotSpatial.Data.ShapefileHeader,DotSpatial.Topology.IBasicGeometry,System.Boolean)">
            <summary>
            Update the header to include the feature extent
            </summary>
            <param name="header"></param>
            <param name="feature"></param>
            <param name="writeHeaderFiles"> </param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.UpdateExtents(DotSpatial.Data.IShapeSource)">
            <summary>
            Update header extents from the geometries in a IShapeSource
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.Select(DotSpatial.Data.IShapeSource,System.String,DotSpatial.Topology.IEnvelope,System.Int32@,System.Int32)">
            <summary>
            Select the features in an IShapeSource
            </summary>
            <param name="sr"></param>
            <param name="filterExpression"></param>
            <param name="envelope"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.SearchAndModifyAttributes(DotSpatial.Data.IShapeSource,DotSpatial.Topology.IEnvelope,System.Int32,DotSpatial.Data.FeatureSourceRowEditEvent)">
            <summary>
            Conditionally modify attributes as searched in a single pass via client supplied callback.
            </summary>
            <param name="sr">ShapeSource for this feature source</param>
            <param name="envelope">The envelope for vector filtering.</param>
            <param name="chunkSize">Number of shapes to request from the ShapeSource in each chunk</param>
            <param name="featureEditCallback">Callback on each feature</param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.WriteHeader(DotSpatial.Data.ShapefileHeader,System.String)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.AppendBasicGeometry(DotSpatial.Data.ShapefileHeader,DotSpatial.Topology.IBasicGeometry,System.Int32)">
            <summary>
            Append the geometry to the shapefile
            </summary>
            <param name="header"></param>
            <param name="feature"></param>
            <param name="numFeatures"></param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSource.CreateShapeSource">
            <summary>
            Create an appropriate ShapeSource for this FeatureSource
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.ShapefileFeatureSource.Filename">
            <summary>
            Gets or sets the Filename of this polygon shapefile.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileFeatureSource.PageSize">
            <summary>
            The integer maximum number of records to return in a single page of results.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileFeatureSource.SpatialIndex">
            <summary>
            Gets the spatial index if any
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileFeatureSource.FeatureType">
            <summary>
            Get the feature type supported by this feature source
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileFeatureSource.ShapeType">
            <summary>
            Get the shape type (without M or Z) supported by this feature source
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileFeatureSource.ShapeTypeM">
            <summary>
            Get the shape type (with M, and no Z) supported by this feature source
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileFeatureSource.ShapeTypeZ">
            <summary>
            Get the shape type (with M and Z) supported by this feature source
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileFeatureSource.Extent">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.ShapefileFeatureSource.AttributeTable">
            <summary>
            Gets the AttributeTable  for this feature source including DeletedRows
            </summary>
        </member>
        <member name="M:DotSpatial.Data.LineShapefileFeatureSource.#ctor(System.String)">
            <summary>
            Sets the fileName and creates a new LineShapefileFeatureSource for the specified file.
            </summary>
            <param name="fileName">The fileName to work with.</param>
        </member>
        <member name="M:DotSpatial.Data.LineShapefileFeatureSource.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets the fileName and creates a new LineShapefileFeatureSource for the specified file (and builds spatial index if requested)
            </summary>
            <param name="fileName"></param>
            <param name="useSpatialIndexing"></param>
            <param name="trackDeletedRows"></param>
        </member>
        <member name="M:DotSpatial.Data.LineShapefileFeatureSource.AppendBasicGeometry(DotSpatial.Data.ShapefileHeader,DotSpatial.Topology.IBasicGeometry,System.Int32)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.LineShapefileFeatureSource.CreateShapeSource">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.LineShapefileFeatureSource.UpdateExtents">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.LineShapefileFeatureSource.Select(System.String,DotSpatial.Topology.IEnvelope,System.Int32@,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.LineShapefileFeatureSource.SearchAndModifyAttributes(DotSpatial.Topology.IEnvelope,System.Int32,DotSpatial.Data.FeatureSourceRowEditEvent)">
            <inheritdoc/>
        </member>
        <member name="P:DotSpatial.Data.LineShapefileFeatureSource.FeatureType">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.LineShapefileFeatureSource.ShapeType">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.LineShapefileFeatureSource.ShapeTypeM">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.LineShapefileFeatureSource.ShapeTypeZ">
            <inheritdocs/>
        </member>
        <member name="T:DotSpatial.Data.LineShapefileShapeSource">
            <summary>
            Retrieves specific shapes.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ShapefileShapeSource">
            <summary>
            Common functionality for retrieving specific shapes.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapefileShapeSource._shx">
            <summary>
            Cached contents of shape index file
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapefileShapeSource.#ctor(System.String)">
            <summary>
            Creates a new instance of the ShapefileShapeSource with the specified
            shapefile as the source.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileShapeSource.#ctor(System.String,DotSpatial.Topology.Index.ISpatialIndex,DotSpatial.Data.ShapefileIndexFile)">
            <summary>
            Creates a new instance of the ShapefileShapeSource with the specified
            shapefile as the source and supplied spatial and shape indices.
            </summary>
            <param name="fileName"></param>
            <param name="spatialIndex"></param>
            <param name="shx"></param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileShapeSource.GetShapeCount">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileShapeSource.GetShapes(System.Int32@,System.Int32,DotSpatial.Topology.IEnvelope)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileShapeSource.GetShapes(System.Int32[])">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileShapeSource.EndGetShapesSession">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileShapeSource.CacheShapeIndexFile">
            <summary>
            Cache Index File in memory so we don't have to read it in every call to GetShapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapefileShapeSource.GetShapeAtIndex(System.IO.FileStream,DotSpatial.Data.ShapefileIndexFile,DotSpatial.Data.ShapefileHeader,System.Int32,DotSpatial.Topology.IEnvelope)">
            <summary>
            Get the shape at the specified index.  Must be implemented by all shape sources derived from ShapefileShapeSource
            </summary>
            <param name="fs"></param>
            <param name="shx"></param>
            <param name="header"></param>
            <param name="shp"></param>
            <param name="envelope"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.ShapefileShapeSource.Filename">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.ShapefileShapeSource.ShapeType">
            <summary>
            Get the shape type (without M or Z) supported by this shape source
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileShapeSource.ShapeTypeM">
            <summary>
            Get the shape type (with M, and no Z) supported by this shape source
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileShapeSource.ShapeTypeZ">
            <summary>
            Get the shape type (with M and Z) supported by this shape source
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileShapeSource.FeatureType">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.LineShapefileShapeSource.#ctor(System.String)">
            <summary>
            Creates a new instance of the LineShapefileShapeSource with the specified line
            shapefile as the source.
            </summary>
            <param name="fileName">The string fileName</param>
        </member>
        <member name="M:DotSpatial.Data.LineShapefileShapeSource.#ctor(System.String,DotSpatial.Topology.Index.ISpatialIndex,DotSpatial.Data.ShapefileIndexFile)">
            <summary>
            Creates a new instance of the LineShapefileShapeSource with the specified polygon shapefile as the source and provided indices
            </summary>
            <param name="fileName"></param>
            <param name="spatialIndex"></param>
            <param name="shx"></param>
        </member>
        <member name="M:DotSpatial.Data.LineShapefileShapeSource.GetShapeAtIndex(System.IO.FileStream,DotSpatial.Data.ShapefileIndexFile,DotSpatial.Data.ShapefileHeader,System.Int32,DotSpatial.Topology.IEnvelope)">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.LineShapefileShapeSource.ShapeType">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.LineShapefileShapeSource.ShapeTypeM">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.LineShapefileShapeSource.ShapeTypeZ">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.LineShapefileShapeSource.FeatureType">
            <inheritdocs/>
        </member>
        <member name="T:MiscUtil.Linq.ExpressionUtil">
            <summary>
            General purpose Expression utilities
            </summary>
        </member>
        <member name="M:MiscUtil.Linq.ExpressionUtil.CreateExpression``2(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.UnaryExpression})">
            <summary>
            Create a function delegate representing a unary operation
            </summary>
            <typeparam name="TArg1">The parameter type</typeparam>
            <typeparam name="TResult">The return type</typeparam>
            <param name="body">Body factory</param>
            <returns>Compiled function delegate</returns>
        </member>
        <member name="M:MiscUtil.Linq.ExpressionUtil.CreateExpression``3(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.BinaryExpression})">
            <summary>
            Create a function delegate representing a binary operation
            </summary>
            <typeparam name="TArg1">The first parameter type</typeparam>
            <typeparam name="TArg2">The second parameter type</typeparam>
            <typeparam name="TResult">The return type</typeparam>
            <param name="body">Body factory</param>
            <returns>Compiled function delegate</returns>
        </member>
        <member name="M:MiscUtil.Linq.ExpressionUtil.CreateExpression``3(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.BinaryExpression},System.Boolean)">
            <summary>
            Create a function delegate representing a binary operation
            </summary>
            <typeparam name="TArg1">The first parameter type</typeparam>
            <typeparam name="TArg2">The second parameter type</typeparam>
            <typeparam name="TResult">The return type</typeparam>
            <param name="body">Body factory</param>
            <param name="castArgsToResultOnFailure">If no matching operation is possible, attempt to convert
            TArg1 and TArg2 to TResult for a match? For example, there is no
            "decimal operator /(decimal, int)", but by converting TArg2 (int) to
            TResult (decimal) a match is found.</param>
            <returns>
            Compiled function delegate
            </returns>
        </member>
        <member name="T:MiscUtil.Operator">
            <summary>
            The Operator class provides easy access to the standard operators
            (addition, etc) for generic types, using type inference to simplify
            usage.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.HasValue``1(``0)">
            <summary>
            Indicates if the supplied value is non-null,
            for reference-types or Nullable&lt;T&gt;
            </summary>
            <returns>True for non-null values, else false</returns>
        </member>
        <member name="M:MiscUtil.Operator.AddIfNotNull``1(``0@,``0)">
            <summary>
            Increments the accumulator only
            if the value is non-null. If the accumulator
            is null, then the accumulator is given the new
            value; otherwise the accumulator and value
            are added.
            </summary>
            <param name="accumulator">The current total to be incremented (can be null)</param>
            <param name="value">The value to be tested and added to the accumulator</param>
            <returns>True if the value is non-null, else false - i.e.
            "has the accumulator been updated?"</returns>
        </member>
        <member name="M:MiscUtil.Operator.Negate``1(``0)">
            <summary>
            Evaluates unary negation (-) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.Not``1(``0)">
            <summary>
            Evaluates bitwise not (~) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.Or``1(``0,``0)">
            <summary>
            Evaluates bitwise or (|) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.And``1(``0,``0)">
            <summary>
            Evaluates bitwise and (&amp;) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.Xor``1(``0,``0)">
            <summary>
            Evaluates bitwise xor (^) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.Convert``2(``0)">
            <summary>
            Performs a conversion between the given types; this will throw
            an InvalidOperationException if the type T does not provide a suitable cast, or for
            Nullable&lt;TInner&gt; if TInner does not provide this cast.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.Add``1(``0,``0)">
            <summary>
            Evaluates binary addition (+) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.AddAlternative``2(``0,``1)">
            <summary>
            Evaluates binary addition (+) for the given type(s); this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.Subtract``1(``0,``0)">
            <summary>
            Evaluates binary subtraction (-) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.SubtractAlternative``2(``0,``1)">
            <summary>
            Evaluates binary subtraction(-) for the given type(s); this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.Multiply``1(``0,``0)">
            <summary>
            Evaluates binary multiplication (*) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.MultiplyAlternative``2(``0,``1)">
            <summary>
            Evaluates binary multiplication (*) for the given type(s); this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.Divide``1(``0,``0)">
            <summary>
            Evaluates binary division (/) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.DivideAlternative``2(``0,``1)">
            <summary>
            Evaluates binary division (/) for the given type(s); this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.Equal``1(``0,``0)">
            <summary>
            Evaluates binary equality (==) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.NotEqual``1(``0,``0)">
            <summary>
            Evaluates binary inequality (!=) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.GreaterThan``1(``0,``0)">
            <summary>
            Evaluates binary greater-than (&gt;) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.LessThan``1(``0,``0)">
            <summary>
            Evaluates binary less-than (&lt;) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.GreaterThanOrEqual``1(``0,``0)">
            <summary>
            Evaluates binary greater-than-on-eqauls (&gt;=) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.LessThanOrEqual``1(``0,``0)">
            <summary>
            Evaluates binary less-than-or-equal (&lt;=) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="M:MiscUtil.Operator.DivideInt32``1(``0,System.Int32)">
            <summary>
            Evaluates integer division (/) for the given type; this will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary><remarks>
            This operation is particularly useful for computing averages and
            similar aggregates.
            </remarks>
        </member>
        <member name="T:MiscUtil.Operator`2">
            <summary>
            Provides standard operators (such as addition) that operate over operands of
            different types. For operators, the return type is assumed to match the first
            operand.
            </summary>
            <seealso cref="T:MiscUtil.Operator`1"/>
            <seealso cref="T:MiscUtil.Operator"/>
        </member>
        <member name="P:MiscUtil.Operator`2.Convert">
            <summary>
            Returns a delegate to convert a value between two types; this delegate will throw
            an InvalidOperationException if the type T does not provide a suitable cast, or for
            Nullable&lt;TInner&gt; if TInner does not provide this cast.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`2.Add">
            <summary>
            Returns a delegate to evaluate binary addition (+) for the given types; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`2.Subtract">
            <summary>
            Returns a delegate to evaluate binary subtraction (-) for the given types; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`2.Multiply">
            <summary>
            Returns a delegate to evaluate binary multiplication (*) for the given types; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`2.Divide">
            <summary>
            Returns a delegate to evaluate binary division (/) for the given types; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="T:MiscUtil.Operator`1">
            <summary>
            Provides standard operators (such as addition) over a single type
            </summary>
            <seealso cref="T:MiscUtil.Operator"/>
            <seealso cref="T:MiscUtil.Operator`2"/>
        </member>
        <member name="P:MiscUtil.Operator`1.Zero">
            <summary>
            Returns the zero value for value-types (even full Nullable&lt;TInner&gt;) - or null for reference types
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.Negate">
            <summary>
            Returns a delegate to evaluate unary negation (-) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.Not">
            <summary>
            Returns a delegate to evaluate bitwise not (~) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.Or">
            <summary>
            Returns a delegate to evaluate bitwise or (|) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.And">
            <summary>
            Returns a delegate to evaluate bitwise and (&amp;) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.Xor">
            <summary>
            Returns a delegate to evaluate bitwise xor (^) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.Add">
            <summary>
            Returns a delegate to evaluate binary addition (+) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.Subtract">
            <summary>
            Returns a delegate to evaluate binary subtraction (-) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.Multiply">
            <summary>
            Returns a delegate to evaluate binary multiplication (*) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.Divide">
            <summary>
            Returns a delegate to evaluate binary division (/) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.Equal">
            <summary>
            Returns a delegate to evaluate binary equality (==) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.NotEqual">
            <summary>
            Returns a delegate to evaluate binary inequality (!=) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.GreaterThan">
            <summary>
            Returns a delegate to evaluate binary greater-then (&gt;) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.LessThan">
            <summary>
            Returns a delegate to evaluate binary less-than (&lt;) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.GreaterThanOrEqual">
            <summary>
            Returns a delegate to evaluate binary greater-than-or-equal (&gt;=) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="P:MiscUtil.Operator`1.LessThanOrEqual">
            <summary>
            Returns a delegate to evaluate binary less-than-or-equal (&lt;=) for the given type; this delegate will throw
            an InvalidOperationException if the type T does not provide this operator, or for
            Nullable&lt;TInner&gt; if TInner does not provide this operator.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.PointShape">
            <summary>
            PointShape
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PointShape.Intersects(DotSpatial.Data.ShapeRange,DotSpatial.Data.ShapeRange)">
            <summary>
            Calculates the intersection of a polygon shape without relying on the NTS geometry
            </summary>
            <param name="pointShape"></param>
            <param name="otherShape"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.PointShape.VerticesIntersect(DotSpatial.Data.ShapeRange,DotSpatial.Data.ShapeRange)">
            <summary>
            Returns true if any vertices overlap
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.PointShape.Epsilon">
            <summary>
            Gets or sets the precision for calculating equality, but this is just a re-direction to Vertex.Epsilon
            </summary>
        </member>
        <member name="T:DotSpatial.Data.PointShapefileFeatureSource">
            <summary>
            This class is strictly the vector access code.  This does not handle
            the attributes, which must be handled independantly.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PointShapefileFeatureSource.#ctor(System.String)">
            <summary>
            Sets the fileName and creates a new PointShapefileFeatureSource for the specified file.
            </summary>
            <param name="fileName">The fileName to work with.</param>
        </member>
        <member name="M:DotSpatial.Data.PointShapefileFeatureSource.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets the fileName and creates a new PointshapefileFeatureSource for the specified file (and builds spatial index if requested)
            </summary>
            <param name="fileName"></param>
            <param name="useSpatialIndexing"></param>
            <param name="trackDeletedRows"></param>
        </member>
        <member name="M:DotSpatial.Data.PointShapefileFeatureSource.AppendBasicGeometry(DotSpatial.Data.ShapefileHeader,DotSpatial.Topology.IBasicGeometry,System.Int32)">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.PointShapefileFeatureSource.CreateShapeSource">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.PointShapefileFeatureSource.UpdateExtents">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.PointShapefileFeatureSource.Select(System.String,DotSpatial.Topology.IEnvelope,System.Int32@,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.PointShapefileFeatureSource.SearchAndModifyAttributes(DotSpatial.Topology.IEnvelope,System.Int32,DotSpatial.Data.FeatureSourceRowEditEvent)">
            <inheritdoc/>
        </member>
        <member name="P:DotSpatial.Data.PointShapefileFeatureSource.FeatureType">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PointShapefileFeatureSource.ShapeType">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PointShapefileFeatureSource.ShapeTypeM">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PointShapefileFeatureSource.ShapeTypeZ">
            <inheritdocs/>
        </member>
        <member name="T:DotSpatial.Data.PointShapefileShapeSource">
            <summary>
            Retrieves specific shapes.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PointShapefileShapeSource.#ctor(System.String)">
            <summary>
            Creates a new instance of the PointShapefileShapeSource with the specified point
            shapefile as the source.
            </summary>
            <param name="fileName">The string fileName</param>
        </member>
        <member name="M:DotSpatial.Data.PointShapefileShapeSource.#ctor(System.String,DotSpatial.Topology.Index.ISpatialIndex,DotSpatial.Data.ShapefileIndexFile)">
            <summary>
            Creates a new instance of the PointShapefileShapeSource with the specified polygon shapefile as the source and provided indices
            </summary>
            <param name="fileName"></param>
            <param name="spatialIndex"></param>
            <param name="shx"></param>
        </member>
        <member name="M:DotSpatial.Data.PointShapefileShapeSource.GetShapeAtIndex(System.IO.FileStream,DotSpatial.Data.ShapefileIndexFile,DotSpatial.Data.ShapefileHeader,System.Int32,DotSpatial.Topology.IEnvelope)">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PointShapefileShapeSource.ShapeType">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PointShapefileShapeSource.ShapeTypeM">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PointShapefileShapeSource.ShapeTypeZ">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PointShapefileShapeSource.FeatureType">
            <inheritdocs/>
        </member>
        <member name="T:DotSpatial.Data.PolygonShape">
            <summary>
            Polygon contains algorithms for the case where the current feature type is a polygon.  The shape may be single or multi-part.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PolygonShape.Intersects(DotSpatial.Data.ShapeRange,DotSpatial.Data.ShapeRange)">
            <summary>
            Calculates the intersection of a polygon shape without relying on the NTS geometry
            </summary>
            <param name="polygonShape"></param>
            <param name="otherShape"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.PolygonShape.ContainsVertex(DotSpatial.Data.ShapeRange,DotSpatial.Data.ShapeRange)">
            <summary>
            This cycles through all the vertices, which are stored as {X1, Y1, X2, Y2...Xn, Yn} and tests
            if any of those vertices falls within the polygon shape.
            </summary>
            <param name="polygonShape"></param>
            <param name="otherShape"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.PolygonShape.ContainsVertex(DotSpatial.Data.ShapeRange,DotSpatial.Data.PartRange)">
            <summary>
            For each coordinate in the other part, if it falls in the extent of this polygon, a
            ray crossing test is used for point in polygon testing.  If it is not in the extent,
            it is skipped.
            </summary>
            <param name="polygonShape">The part of the polygon to analyze polygon</param>
            <param name="otherPart">The other part</param>
            <returns>Boolean, true if any coordinate falls inside the polygon</returns>
        </member>
        <member name="P:DotSpatial.Data.PolygonShape.Epsilon">
            <summary>
            Gets or sets the precision for calculating equality, but this is just a re-direction to Vertex.Epsilon
            </summary>
        </member>
        <member name="T:DotSpatial.Data.DataFormat">
            <summary>
            DataFormats
            </summary>
        </member>
        <member name="F:DotSpatial.Data.DataFormat.Vector">
            <summary>
            Lines, Points and Polygons make up standard static vector formats.
            These are drawn dynamically based on the symbolizer.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.DataFormat.Raster">
            <summary>
            Rasters are grids of integers, doubles, floats, or other numeric value types.
            These can be symbolized and represented as images, but not drawn directly.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.DataFormat.Image">
            <summary>
            Images specifically have pixels coordinates that store a color.
            These are drawn directly.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.DataFormat.Custom">
            <summary>
            This represents an extended format that does not have a formal definition in DotSpatial.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.DataManager">
            <summary>
            This can be used as a component to work as a DataManager.  This also provides the
            very important DefaultDataManager property, which is where the developer controls
            what DataManager should be used for their project.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IDataManager">
            <summary>
            IDataManager
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.GetFileFormat(System.String)">
            <summary>
            This can help determine what kind of file format a file is, without actually opening the file.
            </summary>
            <param name="fileName">The string fileName to test</param>
            <returns>A DataFormats enum</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.GetFeatureType(System.String)">
            <summary>
            Instead of opening the specified file, this simply determines the correct
            provider, and requests that the provider check the feature type for vector
            formats.
            </summary>
            <param name="fileName">The string fileName to test</param>
            <returns>A FeatureTypes enum</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.GetSupportedExtensions(System.String)">
            <summary>
            Checks a dialog filter and returns a list of just the extensions.
            </summary>
            <param name="dialogFilter">The Dialog Filter to read extensions from</param>
            <returns>A list of extensions</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.OpenFile(System.String)">
            <summary>
            Attempts to call the open fileName method for any IDataProvider plugin
            that matches the extension on the string.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.OpenFile(System.String,System.Boolean)">
            <summary>
            Attempts to call the open fileName method for any IDataProvider plugin
            that matches the extension on the string.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
            <param name="inRam">A boolean value that if true will attempt to force a load of the data into memory.  This value overrides the property on this DataManager.</param>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.OpenFile(System.String,System.Boolean,DotSpatial.Data.IProgressHandler)">
            <summary>
            Attempts to call the open fileName method for any IDataProvider plugin
            that matches the extension on the string.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
            <param name="inRam">A boolean value that if true will attempt to force a load of the data into memory.  This value overrides the property on this DataManager.</param>
            <param name="progressHandler">Specifies the progressHandler to receive progress messages.  This value overrides the property on this DataManager.</param>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.OpenImage(System.String)">
            <summary>
            Opens the file as an Image and returns an IImageData object for interacting with the file.
            </summary>
            <param name="fileName">The string fileName</param>
            <returns>An IImageData object</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.OpenImage(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens the file as an Image and returns an IImageData object
            </summary>
            <param name="fileName">The string fileName to open</param>
            <param name="progressHandler">The progressHandler to receive progress updates</param>
            <returns>An IImageData</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.OpenRaster(System.String)">
            <summary>
            Opens the specified fileName, returning an IRaster.  This will return null if a manager
            either returns the wrong data format.
            </summary>
            <param name="fileName">The string fileName to open</param>
            <returns>An IRaster loaded from the specified file.</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.OpenRaster(System.String,System.Boolean,DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens the specified fileName, returning an IRaster.  This will return null if a manager
            either returns the wrong data format.
            </summary>
            <param name="fileName">The string fileName to open</param>
            <param name="inRam">boolean, true if this should be loaded into ram</param>
            <param name="prog">a progress interface</param>
            <returns>An IRaster loaded from the specified file</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.OpenVector(System.String,System.Boolean,DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens a specified file as an IFeatureSet
            </summary>
            <param name="fileName">The string fileName to open</param>
            <param name="inRam">boolean, true if this should be loaded into ram</param>
            <param name="prog">a progress interface</param>
            <returns>An IFeatureSet loaded from the specified file</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.CreateImage(System.String,System.Int32,System.Int32,DotSpatial.Data.ImageBandType)">
            <summary>
            Creates a new image using an appropriate data provider
            </summary>
            <param name="fileName">The string fileName to open an image for</param>
            <param name="numRows">The integer number of rows</param>
            <param name="numColumns">The integer number of columns</param>
            <param name="bandType">The color band type.</param>
            <returns>An IImageData interface allowing access to image data</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.CreateImage(System.String,System.Int32,System.Int32,System.Boolean,DotSpatial.Data.ImageBandType)">
            <summary>
            Creates a new image using an appropriate data provider
            </summary>
            <param name="fileName">The string fileName to open an image for</param>
            <param name="numRows">The integer number of rows</param>
            <param name="numColumns">The integer number of columns</param>
            <param name="inRam">Boolean, true if the entire file should be created in memory</param>
            <param name="bandType">The color band type.</param>
            <returns>An IImageData interface allowing access to image data</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.CreateImage(System.String,System.Int32,System.Int32,System.Boolean,DotSpatial.Data.IProgressHandler,DotSpatial.Data.ImageBandType)">
             <summary>
             Creates a new image using an appropriate data provider
             </summary>
             <param name="fileName">The string fileName to open an image for</param>
             <param name="numRows">The integer number of rows</param>
             <param name="numColumns">The integer number of columns</param>
             <param name="inRam">Boolean, true if the entire file should be created in memory</param>
             <param name="progHandler">A Progress handler</param>
             <param name="bandType">The color band type.</param>
             <returns>An IImageData interface allowing access to image data</returns>
            
        </member>
        <member name="M:DotSpatial.Data.IDataManager.CreateVector(System.String,DotSpatial.Topology.FeatureType)">
            <summary>
            Creates a new class of vector that matches the given fileName.
            </summary>
            <param name="fileName">The string fileName from which to create a vector.</param>
            <param name="featureType">Specifies the type of feature for this vector file</param>
            <returns>An IFeatureSet that allows working with the dataset.</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.CreateVector(System.String,DotSpatial.Topology.FeatureType,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a new class of vector that matches the given fileName.
            </summary>
            <param name="fileName">The string fileName from which to create a vector.</param>
            <param name="featureType">Specifies the type of feature for this vector file</param>
            <param name="progHandler">Overrides the default progress handler with the specified progress handler</param>
            <returns>An IFeatureSet that allows working with the dataset.</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataManager.CreateRaster(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Type,System.String[])">
            <summary>
            Creates a new raster using the specified raster provider and the Data Manager's Progress Handler,
            as well as its LoadInRam property.
            </summary>
            <param name="name">The fileName of the new file to create.</param>
            <param name="driverCode">The string code identifying the driver to use to create the raster</param>
            <param name="xSize">The number of columns in the raster</param>
            <param name="ySize">The number of rows in the raster</param>
            <param name="numBands">The number of bands in the raster</param>
            <param name="dataType">The data type for the raster</param>
            <param name="options">Any additional, driver specific options for creation</param>
            <returns>An IRaster representing the created raster.</returns>
        </member>
        <member name="P:DotSpatial.Data.IDataManager.DataProviders">
            <summary>
            Gets or sets the list of IDataProviders that should be used in the project.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataManager.DialogReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataManager.DialogWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataManager.LoadInRam">
            <summary>
            Sets the default condition for how this data manager should try to load layers.
            This will be overridden if the inRam property is specified as a parameter.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataManager.RasterReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening data files that are specifically raster formats.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataManager.RasterWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving raster files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataManager.VectorReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening vector files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataManager.VectorWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving vector files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataManager.ImageReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening image files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataManager.ImageWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving image files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataManager.PreferredProviders">
            <summary>
            Gets or sets a dictionary of IDataProviders keyed by the extension.  The
            standard order is to try to load the data using a PreferredProvider.  If that
            fails, then it will check the list of dataProviders, and finally, if that fails,
            it will check the plugin Data Providers in directories.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataManager.ProgressHandler">
            <summary>
            Gets or sets a progress handler for any open operations that are intiated by this
            DataManager.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IDataManager.DirectoryProvidersLoaded">
            <summary>
            Occurs after the directory providers have been loaded into the project.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.DataManager.#ctor">
            <summary>
            Creates a new instance of the DataManager class.  A data manager is more or less
            just a list of data providers to use.  The very important
            DataManager.DefaultDataManager property controls which DataManager will be used
            to load data.  By default, each DataManager sets itself as the default in its
            constructor.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.DataManager.CreateVector(System.String,DotSpatial.Topology.FeatureType)">
            <summary>
            Creates a new class of vector that matches the given fileName.
            </summary>
            <param name="fileName">The string fileName from which to create a vector.</param>
            <param name="featureType">Specifies the type of feature for this vector file</param>
            <returns>An IFeatureSet that allows working with the dataset.</returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.CreateVector(System.String,DotSpatial.Topology.FeatureType,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a new class of vector that matches the given fileName.
            </summary>
            <param name="fileName">The string fileName from which to create a vector.</param>
            <param name="featureType">Specifies the type of feature for this vector file</param>
            <param name="progHandler">Overrides the default progress handler with the specified progress handler</param>
            <returns>An IFeatureSet that allows working with the dataset.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when fileName is null.</exception>
            <exception cref="T:System.IO.IOException">Raised when suitable DataProvider not found.</exception>
        </member>
        <member name="M:DotSpatial.Data.DataManager.GetSupportedExtensions(System.String)">
            <summary>
            Checks a dialog filter and returns a list of just the extensions.
            </summary>
            <param name="dialogFilter">The Dialog Filter to read extensions from</param>
            <returns>A list of extensions</returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.GetFileFormat(System.String)">
            <summary>
            This can help determine what kind of file format a file is, without actually opening the file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.GetFeatureType(System.String)">
            <summary>
            Instead of opening the specified file, this simply determines the correct
            provider, and requests that the provider check the feature type for vector
            formats.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.OpenRaster(System.String)">
            <summary>
            Opens the specified fileName, returning an IRaster.  This will return null if a manager
            either returns the wrong data format.
            </summary>
            <param name="fileName">The string fileName to open</param>
            <returns>An IRaster loaded from the specified file.</returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.OpenRaster(System.String,System.Boolean,DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens the specified fileName, returning an IRaster.  This will return null if a manager
            either returns the wrong data format.
            </summary>
            <param name="fileName">The string fileName to open</param>
            <param name="inRam">boolean, true if this should be loaded into ram</param>
            <param name="prog">a progress interface</param>
            <returns>An IRaster loaded from the specified file</returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.OpenVector(System.String,System.Boolean,DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens a specified file as an IFeatureSet
            </summary>
            <param name="fileName">The string fileName to open</param>
            <param name="inRam">boolean, true if this should be loaded into ram</param>
            <param name="prog">a progress interface</param>
            <returns>An IFeatureSet loaded from the specified file</returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.OpenImage(System.String)">
            <summary>
            Opens the file as an Image and returns an IImageData object for interacting with the file.
            </summary>
            <param name="fileName">The string fileName</param>
            <returns>An IImageData object</returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.OpenImage(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens the file as an Image and returns an IImageData object
            </summary>
            <param name="fileName">The string fileName to open</param>
            <param name="progressHandler">The progressHandler to receive progress updates</param>
            <returns>An IImageData</returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.OpenFile(System.String)">
            <summary>
            Attempts to call the open fileName method for any IDataProvider plugin
            that matches the extension on the string.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
        </member>
        <member name="M:DotSpatial.Data.DataManager.OpenFile(System.String,System.Boolean)">
            <summary>
            Attempts to call the open fileName method for any IDataProvider plugin
            that matches the extension on the string.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
            <param name="inRam">A boolean value that if true will attempt to force a load of the data into memory.  This value overrides the property on this DataManager.</param>
        </member>
        <member name="M:DotSpatial.Data.DataManager.OpenFile(System.String,System.Boolean,DotSpatial.Data.IProgressHandler)">
            <summary>
            Attempts to call the open fileName method for any IDataProvider plugin
            that matches the extension on the string.
            </summary>
            <param name="fileName">A String fileName to attempt to open.</param>
            <param name="inRam">A boolean value that if true will attempt to force a load of the data into memory.  This value overrides the property on this DataManager.</param>
            <param name="progressHandler">Specifies the progressHandler to receive progress messages.  This value overrides the property on this DataManager.</param>
        </member>
        <member name="M:DotSpatial.Data.DataManager.CreateImage(System.String,System.Int32,System.Int32,DotSpatial.Data.ImageBandType)">
            <summary>
            Creates a new image using an appropriate data provider
            </summary>
            <param name="fileName">The string fileName to open an image for</param>
            <param name="width">The integer width in pixels</param>
            <param name="height">The integer height in pixels</param>
            <param name="bandType">The band color type</param>
            <returns>An IImageData interface allowing access to image data</returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.CreateImage(System.String,System.Int32,System.Int32,System.Boolean,DotSpatial.Data.ImageBandType)">
            <summary>
            Creates a new image using an appropriate data provider
            </summary>
            <param name="fileName">The string fileName to open an image for</param>
            <param name="width">The integer width in pixels</param>
            <param name="height">The integer height in pixels</param>
            <param name="inRam">Boolean, true if the entire file should be created in memory</param>
            <param name="bandType">The band color type</param>
            <returns>An IImageData interface allowing access to image data</returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.CreateImage(System.String,System.Int32,System.Int32,System.Boolean,DotSpatial.Data.IProgressHandler,DotSpatial.Data.ImageBandType)">
            <summary>
            Creates a new image using an appropriate data provider
            </summary>
            <param name="fileName">The string fileName to open an image for</param>
            <param name="width">The integer width in pixels</param>
            <param name="height">The integer height in pixels</param>
            <param name="inRam">Boolean, true if the entire file should be created in memory</param>
            <param name="progHandler">A Progress handler</param>
            <param name="bandType">The band color type</param>
            <returns>An IImageData interface allowing access to image data</returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.CreateRaster(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Type,System.String[])">
            <summary>
            Creates a new raster using the specified raster provider and the Data Manager's Progress Handler,
            as well as its LoadInRam property.
            </summary>
            <param name="name">The fileName of the new file to create.</param>
            <param name="driverCode">The string code identifying the driver to use to create the raster.  If no code is specified
            the manager will attempt to match the extension with a code specified in the Dialog write filter.  </param>
            <param name="xSize">The number of columns in the raster</param>
            <param name="ySize">The number of rows in the raster</param>
            <param name="numBands">The number of bands in the raster</param>
            <param name="dataType">The data type for the raster</param>
            <param name="options">Any additional, driver specific options for creation</param>
            <returns>An IRaster representing the created raster.</returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.OpenFileAsIRaster(System.String,System.Boolean,DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens the file making sure it can be returned as an IRaster.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="inRam">if set to <c>true</c> [in ram].</param>
            <param name="progressHandler">The progress handler.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.DataManager.OnProvidersLoaded(System.Collections.Generic.IEnumerable{DotSpatial.Data.IDataProvider})">
            <summary>
            Triggers the DirectoryProvidersLoaded event
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataManager.DefaultDataManager">
            <summary>
            Gets or sets the implementation of IDataManager for the project to use when
            accessing data.  This is THE place where the DataManager can be replaced
            by a different data manager.  If you add this data manager to your
            project, this will automatically set itself as the DefaultDataManager.
            However, since each DM will do this, you may have to control this manually
            if you add more than one DataManager to the project in order to set the
            one that will be chosen.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataManager.DataProviders">
            <summary>
            Gets or sets the list of IDataProviders that should be used in the project.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataManager.DialogReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataManager.DialogWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataManager.RasterReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening data files that are specifically raster formats.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataManager.RasterWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataManager.VectorReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataManager.VectorWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataManager.ImageReadFilter">
            <summary>
            Gets or sets the dialog read filter to use for opening data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataManager.ImageWriteFilter">
            <summary>
            Gets or sets the dialog write filter to use for saving data files.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataManager.LoadInRam">
            <summary>
            Sets the default condition for how this data manager should try to load layers.
            This will be overridden if the inRam property is specified as a parameter.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataManager.PreferredProviders">
            <summary>
            Gets or sets a dictionary of IDataProviders with corresponding extensions.  The
            standard order is to try to load the data using a PreferredProvider.  If that
            fails, then it will check the list of dataProviders, and finally, if that fails,
            it will check the plugin Data Providers in directories.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataManager.ProgressHandler">
            <summary>
            Gets or sets a progress handler for any open operations that are intiated by this
            DataManager and don't override this value with an IProgressHandler specified in the parameters.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.DataManager.DirectoryProvidersLoaded">
            <summary>
            Occurs after the directory providers have been loaded into the project.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.DataProviderEventArgs">
            <summary>
            DataProviders
            </summary>
        </member>
        <member name="M:DotSpatial.Data.DataProviderEventArgs.#ctor(System.Collections.Generic.IEnumerable{DotSpatial.Data.IDataProvider})">
            <summary>
            Creates a new instance of DataProviders
            </summary>
            <param name="providers">Specifies a list of IDataProviders</param>
        </member>
        <member name="P:DotSpatial.Data.DataProviderEventArgs.Providers">
            <summary>
            Gets the list of providers for this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.RasterFileMode">
            <summary>
            Clarifies how the file should be used
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileMode.Read">
            <summary>
            Read will attempt to read the file if it exists and throw an exception if the file is not found
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileMode.Write">
            <summary>
            Write will create a new file, overwriting it if it previously exists.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.PolygonShapefileFeatureSource">
            <summary>
            This class is strictly the vector access code.  This does not handle
            the attributes, which must be handled independantly.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefileFeatureSource.#ctor(System.String)">
            <summary>
            Sets the fileName and creates a new PolygonshapefileFeatureSource for the specified file.
            </summary>
            <param name="fileName">The fileName to work with.</param>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefileFeatureSource.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets the fileName and creates a new PolygonshapefileFeatureSource for the specified file (and builds spatial index if requested)
            </summary>
            <param name="fileName"></param>
            <param name="useSpatialIndexing"></param>
            <param name="trackDeletedRows"></param>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefileFeatureSource.AppendBasicGeometry(DotSpatial.Data.ShapefileHeader,DotSpatial.Topology.IBasicGeometry,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefileFeatureSource.CreateShapeSource">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefileFeatureSource.UpdateExtents">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefileFeatureSource.Select(System.String,DotSpatial.Topology.IEnvelope,System.Int32@,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefileFeatureSource.SearchAndModifyAttributes(DotSpatial.Topology.IEnvelope,System.Int32,DotSpatial.Data.FeatureSourceRowEditEvent)">
            <inheritdoc/>
        </member>
        <member name="P:DotSpatial.Data.PolygonShapefileFeatureSource.FeatureType">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PolygonShapefileFeatureSource.ShapeType">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PolygonShapefileFeatureSource.ShapeTypeM">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PolygonShapefileFeatureSource.ShapeTypeZ">
            <inheritdocs/>
        </member>
        <member name="T:DotSpatial.Data.PolygonShapefileShapeSource">
            <summary>
            Retrieves specific shapes.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefileShapeSource.#ctor(System.String)">
            <summary>
            Creates a new instance of the PolygonShapefileShapeSource with the specified polygon
            shapefile as the source.
            </summary>
            <param name="fileName">The string fileName</param>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefileShapeSource.#ctor(System.String,DotSpatial.Topology.Index.ISpatialIndex,DotSpatial.Data.ShapefileIndexFile)">
            <summary>
            Creates a new instance of the PolygonShapefileShapeSource with the specified polygon shapefile as the source and provided indices
            </summary>
            <param name="fileName"></param>
            <param name="spatialIndex"></param>
            <param name="shx"></param>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefileShapeSource.GetShapeAtIndex(System.IO.FileStream,DotSpatial.Data.ShapefileIndexFile,DotSpatial.Data.ShapefileHeader,System.Int32,DotSpatial.Topology.IEnvelope)">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PolygonShapefileShapeSource.ShapeType">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PolygonShapefileShapeSource.ShapeTypeM">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PolygonShapefileShapeSource.ShapeTypeZ">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.PolygonShapefileShapeSource.FeatureType">
            <inheritdocs/>
        </member>
        <member name="T:DotSpatial.Data.ProgressMeter">
            <summary>
            This handles the methodology of progress messaging in one place to make it easier to update.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ProgressMeter.#ctor">
            <summary>
            Initializes a new progress meter, but doesn't support the IProgressHandler unless one is specified.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ProgressMeter.#ctor(DotSpatial.Data.IProgressHandler)">
            <summary>
            A progress meter can't actually do anything without a progressHandler, which actually displays the status.
            </summary>
            <param name="progressHandler">An IProgressHandler that will actually handle the status messages sent by this meter.</param>
        </member>
        <member name="M:DotSpatial.Data.ProgressMeter.#ctor(DotSpatial.Data.IProgressHandler,System.String)">
            <summary>
            A progress meter that simply keeps track of progress and is capable of sending progress messages.
            This assumes a MaxValue of 100 unless it is changed later.
            </summary>
            <param name="progressHandler">Any valid IProgressHandler that will display progress messages</param>
            <param name="baseMessage">A base message to use as the basic status for this progress handler.</param>
        </member>
        <member name="M:DotSpatial.Data.ProgressMeter.#ctor(DotSpatial.Data.IProgressHandler,System.String,System.Object)">
            <summary>
            A progress meter that simply keeps track of progress and is capable of sending progress messages.
            </summary>
            <param name="progressHandler">Any valid implementation if IProgressHandler that will handle the progress function</param>
            <param name="baseMessage">The message without any progress information.</param>
            <param name="endValue">Percent should show a range between the MinValue and MaxValue.  MinValue is assumed to be 0.</param>
        </member>
        <member name="M:DotSpatial.Data.ProgressMeter.Reset">
            <summary>
            Resets the progress meter to the 0 value.  This sets the status message to "Ready.".
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ProgressMeter.Next">
            <summary>
            This always increments the CurrentValue by one.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ProgressMeter.SendProgress">
            <summary>
            Sends a progress message to the IProgressHandler interface with the current message and progress
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ProgressMeter.BaseMessage">
            <summary>
            Gets or sets the string message (without the progress element).
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ProgressMeter.Key">
            <summary>
            Gets or sets the string that does not include any mention of progress percentage, but specifies what is occurring.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ProgressMeter.CurrentPercent">
            <summary>
            Gets or sets the current integer progress level from 0 to 100.  If a new update is less than or equal to the previous
            value, then no progress will be displayed by the ProgressMeter.  Values less than 0 are set to 0.  Values greater than
            100 are set to 100.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ProgressMeter.CurrentValue">
            <summary>
            Gets or sets the current value relative to the specified MaxValue in order to update the progress.
            Setting this will also update OldProgress if there is an integer change in the percentage, and send
            a progress message to the IProgressHandler interface.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ProgressMeter.EndValue">
            <summary>
            The value that defines when the meter should show as 100% complete.
            EndValue can be less than StartValue, but values closer to EndValue
            will show as being closer to 100%.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ProgressMeter.Silent">
            <summary>
            Gets or sets whether the progress meter should send messages to the IProgressHandler.
            By default Silent is false, but setting this to true will disable the messaging portion.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ProgressMeter.StartValue">
            <summary>
            The minimum value defines when the meter should show as 0% complete.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ProgressMeter.StepPercent">
            <summary>
            An integer value that is 1 by default.  Ordinarily this will send a progress message only when the integer progress
            has changed by 1 percentage point.  For example, if StepPercent were set to 5, then a progress update would only
            be sent out at 5%, 10% and so on.  This helps reduce overhead in cases where showing status messages is actually
            the majority of the processing time for the function.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ProgressMeter.PreviousPercent">
            <summary>
            Gets or sets the previous integer progress level from 0 to 100.  If a new update is less than or equal to the previous
            value, then no progress will be displayed by the ProgressMeter.  Values less than 0 are set to 0.  Values greater than
            100 are set to 100.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ProgressMeter.ProgressHandler">
            <summary>
            Gets or sets the progress handler for this meter
            </summary>
        </member>
        <member name="T:DotSpatial.Symbology.ProjExt">
            <summary>
            Extension methods for the IProj interface
            </summary>
        </member>
        <member name="M:DotSpatial.Symbology.ProjExt.PixelToProj(DotSpatial.Data.IProj,System.Drawing.Point)">
            <summary>
            Converts a single point location into an equivalent geographic coordinate
            </summary>
            <param name="self">This IProj</param>
            <param name="position">The client coordinate relative to the map control</param>
            <returns>The geographic ICoordinate interface</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ProjExt.PixelToProj(DotSpatial.Data.IProj,System.Drawing.Rectangle)">
            <summary>
            Converts a rectangle in pixel coordinates relative to the map control into
            a geographic envelope.
            </summary>
            <param name="self">This IProj</param>
            <param name="rect">The rectangle to convert</param>
            <returns>An IEnvelope interface</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ProjExt.PixelToProj(DotSpatial.Data.IProj,System.Collections.Generic.List{System.Drawing.Rectangle})">
            <summary>
            Projects all of the rectangles int the specified list of rectangles into geographic regions.
            </summary>
            <param name="self">This IProj</param>
            <param name="clipRects">The clip rectangles</param>
            <returns>A List of IEnvelope geographic bounds that correspond to the specified clip rectangles.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ProjExt.ProjToPixel(DotSpatial.Data.IProj,DotSpatial.Topology.Coordinate)">
            <summary>
            Converts a single geographic location into the equivalent point on the
            screen relative to the top left corner of the map.
            </summary>
            <param name="self">This IProj</param>
            <param name="location">The geographic position to transform</param>
            <returns>A Point with the new location.</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ProjExt.ProjToPixel(DotSpatial.Data.IProj,DotSpatial.Data.Extent)">
            <summary>
            Converts a single geographic envelope into an equivalent Rectangle
            as it would be drawn on the screen.
            </summary>
            <param name="self">This IProj</param>
            <param name="env">The geographic IEnvelope</param>
            <returns>A Rectangle</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ProjExt.ProjToPixel(DotSpatial.Data.IProj,System.Collections.Generic.List{DotSpatial.Data.Extent})">
            <summary>
            Translates all of the geographic regions, forming an equivalent list of rectangles.
            </summary>
            <param name="self">This IProj</param>
            <param name="regions">The list of geographic regions to project</param>
            <returns>A list of pixel rectangles that describe the specified region</returns>
        </member>
        <member name="M:DotSpatial.Symbology.ProjExt.ProjToPixel(DotSpatial.Data.IProj,System.Double)">
            <summary>
            Calculates an integer length distance in pixels that corresponds to the double
            length specified in the image.
            </summary>
            <param name="self">The IProj that this describes</param>
            <param name="distance">The double distance to obtain in pixels</param>
            <returns>The integer distance in pixels</returns>
        </member>
        <member name="T:DotSpatial.Data.RasterBoundDataSet">
            <summary>
            This is an abstract base class that represents a datasets that has a RasterBounds on it, and reprojects
            by using the RasterBounds.  This works for Image and Raster implementations.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.DataSet">
            <summary>
            DataSet
            </summary>
        </member>
        <member name="M:DotSpatial.Data.DataSet.ProjectionSupported">
            <summary>
            Gets whether or not projection is based on having the libraries available.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.DataSet.#ctor">
            <summary>
            Creates a new instance of DataSet
            </summary>
        </member>
        <member name="M:DotSpatial.Data.DataSet.Close">
            <summary>
            This can be overridden in specific classes if necessary
            </summary>
        </member>
        <member name="M:DotSpatial.Data.DataSet.Reproject(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Reprojects all of the in-ram vertices of featuresets, or else this
            simply updates the "Bounds" of the image object.
            This will also update the projection to be the specified projection.
            </summary>
            <param name="targetProjection">
            The projection information to reproject the coordinates to.
            </param>
        </member>
        <member name="M:DotSpatial.Data.DataSet.Dispose(System.Boolean)">
            <summary>
            Allows overriding the dispose behavior to handle any resources in addition to what are handled in the
            image data class.
            </summary>
            <param name="disposeManagedResources">A Boolean value that indicates whether the overriding method
            should dispose managed resources, or just the unmanaged ones.</param>
        </member>
        <member name="P:DotSpatial.Data.DataSet.MyExtent">
            <summary>
            Gets or sets the cached extent variable.  The public Extent is the virtual accessor,
            and should not be used from a constructor.  MyExtent is protected, not virtual,
            and is only visible to inheriting classes, and can be safely set in the constructor.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataSet.ProgressMeter">
            <summary>
            This is an internal place holder to make it easier to pass around a single progress meter
            between methods.  This will use lazy instantiation if it is requested before one has
            been created.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataSet.ProjectionString">
            <summary>
            Gets or sets the raw projection string for this dataset.  This handles both the
            case where projection is unavailable but a projection string needs to
            be passed around, and the case when a string is not recognized by the
            DotSpatial.Projections library.  This is not format restricted, but should match
            the original data source as closely as possible.  Setting this will also set
             the Projection if the Projection library is available and the format successfully
            defines a transform by either treating it as an Esri string or a proj4 string.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataSet.CanReproject">
            <summary>
            Gets a value indicating whether the DotSpatial.Projections assembly is loaded
            </summary>
            <returns>Boolean, true if the value can reproject.</returns>
        </member>
        <member name="P:DotSpatial.Data.DataSet.Name">
            <summary>
            Gets or sets the string name
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataSet.Extent">
            <summary>
            Gets or sets the extent for the dataset.  Usages to Envelope were replaced
            as they required an explicit using to DotSpatial.Topology which is not
            as intuitive.  Extent.ToEnvelope() and new Extent(myEnvelope) convert them.
            This is designed to be a virtual member to be overridden by subclasses,
            and should not be called directly by the constructor of inheriting classes.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataSet.Projection">
            <summary>
            Gets or set the projection string
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataSet.SpaceTimeSupport">
            <summary>
            Gets an enumeration specifying if this data supports time, space, both or neither.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataSet.TypeName">
            <summary>
            Gets or sets the string type name that identifies this dataset
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataSet.ProgressHandler">
            <summary>
            Gets or sets the progress handler to use for internal actions taken by this dataset.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundDataSet.#ctor">
            <summary>
            Creates a new instance of the RasterBoundData object, setting up a default RasterBounds.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundDataSet.OnBoundsChanged(DotSpatial.Data.IRasterBounds)">
            <summary>
            Occurs when the raster bounds of this data class have changed.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundDataSet.Reproject(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            RasterBounds datasets offer a limited sort of reproject on the fly.
            This tries to update the bounds by reprojecting the top left and bottom
            left and top right coordinates and updating the "affine" transform.
            This should not be used if CanReproject is false.
            Greater accuracy can be accomplished using the Projective transform,
            which is planned to be implemented as a toolbox function.
            </summary>
            <param name="targetProjection">The projectionInfo to project to.</param>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundDataSet.Dispose(System.Boolean)">
            <summary>
            Disposes the managed memory objects in the ImageData class, and then forwards
            the Dispose operation to the internal dataset in the base class, if any.
            </summary>
            <param name="disposeManagedResources">Boolean, true if both managed and unmanaged resources should be finalized.</param>
        </member>
        <member name="P:DotSpatial.Data.RasterBoundDataSet.Bounds">
            <summary>
            Gets or sets the image bounds being used to define the georeferencing of the image
            </summary>
        </member>
        <member name="P:DotSpatial.Data.RasterBoundDataSet.Extent">
            <summary>
            Gets or sets the Bounds.Envelope through an Extents property.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.RasterEventArgs">
            <summary>
            An EventArgs specifically tailored to Raster.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterEventArgs.#ctor(DotSpatial.Data.IRaster)">
            <summary>
            Initializes a new instance of the RasterEventArgs class.
            </summary>
            <param name="raster">The IRaster that is involved in this event.</param>
        </member>
        <member name="P:DotSpatial.Data.RasterEventArgs.Raster">
            <summary>
            Gets the Raster associated with this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.RowEditEvent">
            <summary>
            Callback specified to AttributeTable.Edit() overload
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.RowEditEventArgs">
            <summary>
            RowEditEvent arguments
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RowEditEventArgs.Columns">
            <summary>
            Column information
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RowEditEventArgs.ByteContent">
            <summary>
            Actual byte content read from dbase
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RowEditEventArgs.Modified">
            <summary>
            One of the SetColumn methods or SetAllColumns has been called
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RowEditEventArgs.RowNumber">
            <summary>
            The row being edited
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RowEditEventArgs.#ctor(System.Int32,DotSpatial.Data.Fields)">
            <summary>
            Constructor
            </summary>
            <param name="recordLength"></param>
            <param name="columns"></param>
        </member>
        <member name="M:DotSpatial.Data.RowEditEventArgs.GetChars">
            <summary>
            Get the entire buffer as a character array
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.RowEditEventArgs.ParseColumn(DotSpatial.Data.Field)">
            <summary>
            Convert the byte data for a column into the appropriate data value
            </summary>
            <param name="field">Column information for data value being parsed</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.RowEditEventArgs.ParseAllColumns">
            <summary>
            Convert the all byte data into an array of data values
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.RowEditEventArgs.SetColumn(DotSpatial.Data.Field,System.Double)">
            <summary>
            Convert value to bytes and place in ByteContent at correct location
            </summary>
            <param name="field">Column information for the conversion</param>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.RowEditEventArgs.SetColumn(DotSpatial.Data.Field,System.String)">
            <summary>
            Convert value to bytes and place in ByteContent at correct location
            </summary>
            <param name="field">Column information for the conversion</param>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.RowEditEventArgs.SetColumn(DotSpatial.Data.Field,System.Single)">
            <summary>
            Convert value to bytes and place in ByteContent at correct location
            </summary>
            <param name="field">Column information for the conversion</param>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.RowEditEventArgs.SetColumn(DotSpatial.Data.Field,System.DBNull)">
            <summary>
            Convert value to bytes and place in ByteContent at correct location
            </summary>
            <param name="field">Column information for the conversion</param>
            <param name="dbNull"></param>
        </member>
        <member name="M:DotSpatial.Data.RowEditEventArgs.SetColumn(DotSpatial.Data.Field,System.Decimal)">
            <summary>
            Convert value to bytes and place in ByteContent at correct location
            </summary>
            <param name="field">Column information for the conversion</param>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.RowEditEventArgs.SetColumn(DotSpatial.Data.Field,System.Int64)">
            <summary>
            Convert value to bytes and place in ByteContent at correct location
            </summary>
            <param name="field">Column information for the conversion</param>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.RowEditEventArgs.SetColumn(DotSpatial.Data.Field,System.Boolean)">
            <summary>
            Convert value to bytes and place in ByteContent at correct location
            </summary>
            <param name="field">Column information for the conversion</param>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.RowEditEventArgs.SetColumn(DotSpatial.Data.Field,System.DateTime)">
            <summary>
            Convert value to bytes and place in ByteContent at correct location
            </summary>
            <param name="field">Column information for the conversion</param>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.RowEditEventArgs.SetAllColumns(System.Object[])">
            <summary>
            Convert array of values to bytes and fill ByteContent
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:DotSpatial.Data.ShapeFactory">
            <summary>
            ShapeFactory
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapeFactory.#ctor">
            <summary>
            for singleton pattern.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapeFactory.CreateMultiPolygonFromCoordinates(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{DotSpatial.Topology.Coordinate}})">
            <summary>
            Creates a new multi-part polygon shape.  Winding order should control holes.
            </summary>
            <param name="allParts">The list of all the lists of coordinates.</param>
            <returns>A new Multi-Polygon Shape.</returns>
        </member>
        <member name="P:DotSpatial.Data.ShapeFactory.Instance">
            <summary>
            Gets the shared instance of the shape factory;
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ShapefileFeatureSourceQuadtree">
            <summary>
            Spatial index customized for ShapefileFeatureSources.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSourceQuadtree.Insert(DotSpatial.Topology.IEnvelope,System.Int32)">
            <summary>
            Insert the row
            </summary>
            <param name="itemEnv"></param>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSourceQuadtree.Remove(DotSpatial.Topology.IEnvelope,System.Int32)">
            <summary>
            Remove the row
            </summary>
            <param name="itemEnv"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSourceQuadtree.AdjustNodesForDeletedItem(DotSpatial.Topology.Index.Quadtree.NodeBase,System.Int32)">
            <summary>
            When a row is deleted, all other row numbers must be adjusted to compensate for the fact that the shx file gets compressed.
            </summary>
            <param name="node"></param>
            <param name="deletedItem"></param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSourceQuadtree.Remove(DotSpatial.Topology.IEnvelope,System.Object)">
            <summary>
            Deprecated.  Use Remove(IEnvelope, int item) instead.
            </summary>
            <param name="itemEnv"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapefileFeatureSourceQuadtree.Insert(DotSpatial.Topology.IEnvelope,System.Object)">
            <summary>
            Deprecated. Use Insert(IEnvelope, int item) instead.
            </summary>
            <param name="itemEnv"></param>
            <param name="item"></param>
        </member>
        <member name="T:DotSpatial.Data.ShapefileIndexFile">
            <summary>
            Index file class for the .shx file
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapefileIndexFile.Open(System.String)">
            <summary>
            Opens the index file of the specified fileName.  If the fileName is not the .shx extension,
            then the fileName will be changed too that extension first.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileIndexFile.Save">
            <summary>
            Saves the file back to the original file, or the currently specified "Filename" property.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapefileIndexFile.SaveAs(System.String)">
            <summary>
            Saves the file to the specified fileName.  If the extension is not a correct shx extension,
            it will be changed to that extensions.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileIndexFile.ReadIndexFile(System.String)">
            <summary>
            Reads the entire index file in order to get a breakdown of how shapes are broken up.
            </summary>
            <param name="fileName">A string fileName of the .shx file to read.</param>
            <returns>A List of ShapeHeaders that give offsets and lengths so that reading can be optimized</returns>
        </member>
        <member name="M:DotSpatial.Data.ShapefileIndexFile.WriteHeader(DotSpatial.Data.ShapefileHeader,System.String,System.Int32)">
            <summary>
            Writes the current content to the specified file.
            </summary>
            <param name="header">The header to write</param>
            <param name="fileName">Basically the same code can be used for the shp and shx files</param>
            <param name="numShapes">The integer number of shapes to write to the file</param>
        </member>
        <member name="P:DotSpatial.Data.ShapefileIndexFile.Header">
            <summary>
            Gets or sets the header
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileIndexFile.Filename">
            <summary>
            Gets or sets the fileName
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileIndexFile.Shapes">
            <summary>
            Gets or sets the list of shape headers
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ShapefileReader">
            <summary>
            This combines the attribute table with a shape source in order to allow easy creation of
            FeatureTable and FeatureRow constructs.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.#ctor(System.String)">
            <summary>
            Creates a new ShapefileReader tailored to read a particular file.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.Close">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetSchemaTable">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.NextResult">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.Read">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetBoolean(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetByte(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetChar(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetData(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetDataTypeName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetDateTime(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetDecimal(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetDouble(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetFieldType(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetFloat(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetGuid(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetInt16(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetInt32(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetInt64(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetOrdinal(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetString(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.GetValues(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.IsDBNull(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.AdvancePage">
            <summary>
            Resets the count, so that reading may continue.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapefileReader.Open">
            <summary>
            Ensures that the files can be opened for reading.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileReader.Filename">
            <summary>
            Gets or sets the name of the shapefile.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileReader.Fields">
            <summary>
            Gets or sets the array of string field names to access.  If this is null or empty, then all the fields are returned.
            Fields listed here that do not occur in the shapefile will be ignored.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileReader.FilterExpression">
            <summary>
            Gets or sets the string filter expression.  This is only the "Where" criteria, and doesn't include any other advanced SQL implmenetation.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileReader.OrderBy">
            <summary>
            Gets or sets a string fieldname to support sorting.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileReader.PageSize">
            <summary>
            Gets the integer number of the maximum number of results to generate from a shapefile.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileReader.Count">
            <summary>
            Gets the count of members returned so far.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileReader.Offset">
            <summary>
            Gets the long row offset where reading should begin.  This will advance
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileReader.Depth">
            <summary>
            Shapefiles don't support nested tables.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileReader.IsClosed">
            <inheritdoc/>
        </member>
        <member name="P:DotSpatial.Data.ShapefileReader.RecordsAffected">
            <summary>
            Read only reader has no affect on records here.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileReader.FieldCount">
            <inheritdoc/>
        </member>
        <member name="P:DotSpatial.Data.ShapefileReader.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:DotSpatial.Data.ShapefileReader.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DotSpatial.Data.ShapeReader">
            <summary>
            A class for cycling pages of shapes from a large dataset
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapeReader.#ctor(DotSpatial.Data.IShapeSource)">
            <summary>
            Creates a new reader class for paging through a shape source.
            </summary>
            <param name="source">The IShapeSource to cycle through.</param>
        </member>
        <member name="M:DotSpatial.Data.ShapeReader.GetEnumerator">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.ShapeReader.PageSize">
            <summary>
            Gets or sets the integer count of shapes that should be allowed to appear on a single page of results.
            This is the maximum, and the actual number of shapes may be considerably smaller than this.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapeReader.Envelope">
            <summary>
            Gets or sets the envelope.  If this is null, then no envelope is used.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapeReader.FeatureType">
            <summary>
            Gets the feature type of the feature source.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ShapeReader.Enumerator">
            <summary>
            Creates an enumerator for pages of shapes returned as dictionaries.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapeReader.Enumerator.#ctor(DotSpatial.Data.ShapeReader)">
            <summary>
            Creates ShapePageSet.Enumerator which can be used to cycle very large datasets.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:DotSpatial.Data.ShapeReader.Enumerator.Dispose">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapeReader.Enumerator.MoveNext">
            <inheritdocs/>
        </member>
        <member name="M:DotSpatial.Data.ShapeReader.Enumerator.Reset">
            <inheritdocs/>
        </member>
        <member name="P:DotSpatial.Data.ShapeReader.Enumerator.Current">
            <inheritdocs/>
        </member>
        <member name="T:DotSpatial.Data.ShapeRelateType">
            <summary>
            Controls whether only intersecting shapes should be used or whether all shapes should be used.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeRelateType.All">
            <summary>
            All shapes will be used
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeRelateType.Intersecting">
            <summary>
            Only intersecting shapes will be used
            </summary>
        </member>
        <member name="T:DotSpatial.Data.CulturePreferences">
            <summary>
            CulturePreferences
            </summary>
        </member>
        <member name="F:DotSpatial.Data.CulturePreferences.CultureInformation">
            <summary>
            This culture information is useful for things like Number Formatting.
            This defaults to CurrentCulture, but can be specified through preferences or
            whatever.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.BufferedBinaryReader">
            <summary>
            The buffered binary reader was originally designed by Ted Dunsford to make shapefile reading more
            efficient, but ostensibly could be used for other binary reading exercises.  To use this class,
            simply specify the BufferSize in bytes that you would like to use and begin reading values.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.#ctor(System.String)">
             <summary>
             Creates a new instance of BufferedBinaryReader.
             </summary>
            <param name="fileName">The string path of a file to open using this BufferedBinaryReader.</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.#ctor(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a new instance of BufferedBinaryReader, and specifies where to send progress messages.
            </summary>
            <param name="fileName">The string path of a file to open using this BufferedBinaryReader.</param>
            <param name="progressHandler">Any implementation of IProgressHandler for receiving progress messages.</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.Close">
            <summary>
            Closes the internal binary reader and underlying file, but does not free
            the buffer that is in memory.  For that, call the dispose method.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.Dispose">
            <summary>
            This will not close the file, so be sure to close before calling Dispose.
            This will dispose the file stream and set the buffer to null.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.FillBuffer">
            <summary>
            Instructs the reader to fill its buffer with data.  This only does something
            if the buffer is not loaded yet.  This method is optional since the first
            effort at reading the file will automatically load the buffer.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.FillBuffer(System.Int32)">
            <summary>
            This method will both assign a new maximum buffer size to the reader and
            force the reader to load the values into memory.  This is unnecessary
            unless you plan on closing the file before reading values from this class.
            Even if values are loaded, this will assign the MaxBufferSize property
            so that future buffers have the specified size.
            </summary>
            <param name="maxBufferSize">An integer buffer size to assign to the maximum buffer size before reading values.</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Uses the seek method to quickly reach a desired location to begin reading.
            This will not buffer or read values.  If the new position is beyond the end
            of the current buffer, the next read will load a new buffer.
            </summary>
            <param name="offset">A 64 bit integer specifying where to skip to in the file.</param>
            <param name="origin">A System.IO.SeekOrigin enumeration specifying how to estimate the location.</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.ReadBool">
            <summary>
            Reads a boolean form the buffer, automatcially loading the next buffer if necessary.
            </summary>
            <returns>A boolean value converted from bytes in the file.</returns>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.ReadChar">
            <summary>
            Reads a character from two bytes in the buffer, automatically loading the next buffer if necessary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.ReadChars(System.Int32)">
            <summary>
            Reads an array of character from two bytes in the buffer, automatically loading
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.ReadDouble(System.Boolean)">
            <summary>
            Reads a double-precision floating point from 8 bytes in the buffer, automatically loading the next buffer if necessary.
            </summary>
            <param name="isLittleEndian">Boolean, true if the value should be returned with little endian byte ordering.</param>
            <returns>A double value converted from bytes in the file.</returns>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.ReadVertices(System.Int32)">
            <summary>
            Reads double precision X and Y values that are interwoven
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.ReadDoubles(System.Int32)">
            <summary>
            Reads the specified number of doubles into an array
            This uses Buffer.CopyBlock, and seems to work ok
            for little-endian in windows.
            </summary>
            <param name="count">The count of doubles</param>
            <returns>An array of doubles</returns>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.ReadIntegers(System.Int32)">
            <summary>
            Reads the specified number of integers into an array
            </summary>
            <param name="count">The integer count of integers to read</param>
            <returns>An array of the specified integers and length equal to count</returns>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.ReadInt32">
            <summary>
            By default, this will use little Endian ordering.
            </summary>
            <returns>An Int32 converted from the file.</returns>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.ReadInt32(System.Boolean)">
            <summary>
            Reads an integer from the file, using the isLittleEndian argument
            to decide whether to flip the bits or not.
            </summary>
            <param name="isLittleEndian">Boolean, true if the value should be returned with little endian byte ordering.</param>
            <returns>an Int32 value converted from bytes in the file.</returns>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.ReadInt16">
            <summary>
            Reads a short, sixteen bit integer as bytes in little-endian order
            </summary>
            <returns>A short value</returns>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.ReadSingle">
            <summary>
            Reads a single-precision floading point from 4 bytes in the buffer, automatically loading the next buffer if necessary.
            This assumes the value should be little endian.
            </summary>
            <returns>A single-precision floating point converted from four bytes</returns>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.ReadSingle(System.Boolean)">
            <summary>
            Reads a single-precision floading point from 4 bytes in the buffer, automatically loading the next buffer if necessary.
            </summary>
            <param name="isLittleEndian">Boolean, true if the value should be returned with little endian byte ordering.</param>
            <returns>A single-precision floating point converted from four bytes</returns>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.ReadBytes(System.Int32)">
            <summary>
            Reads the specified number of bytes.  This will throw an exception
            if a number of bytes is specified that exeeds the file length.
            </summary>
            <param name="byteCount">The integer count of the bytes.</param>
            <returns>An array of bytes</returns>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            copies count bytes from the internal buffer to the specified buffer index as the starting point in the specified buffer.
            </summary>
            <param name="buffer">A previously dimensioned array of byte values to fill with data</param>
            <param name="index">The index in the argument array to start pasting values to</param>
            <param name="count">The number of values to copy into the parameter buffer</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.OnFinishedReading">
            <summary>
            Fires the FinishedReading event.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryReader.OnFinishedBuffering">
            <summary>
            Fires the FinishedBuffering event.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryReader.ProgressMeter">
            <summary>
            Gets the progress meter.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryReader.BufferOffset">
            <summary>
            Gets a long integer specifying the starting position of the currently loaded buffer
            relative to the start of the file.  A value of -1 indicates that no buffer is
            currently loaded.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryReader.BufferSize">
            <summary>
            Gets an integer value specifying the size of the buffer currently loaded into memory.
            This will either be the MaxBufferSize, or a smaller buffer representing a smaller
            remainder existing in the file.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryReader.IsBufferLoaded">
            <summary>
            Gets a boolean indicating whether there is currently any information loaded into the buffer.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryReader.IsFinishedReading">
            <summary>
            Gets a boolean value once the offset has reached the end of the file,
            and every byte value has been read from the file.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryReader.IsFinishedBuffering">
            <summary>
            Gets a boolean value once the entire file has been loaded into memory.
            This usually will occur before any reading even takes place.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryReader.FileLength">
            <summary>
            Gets the length in bytes of the file being read.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryReader.FileOffset">
            <summary>
            Gets the current read position in the file in bytes.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryReader.FileRemainder">
            <summary>
            Gets a long value specifying how many bytes have not yet been read in the file.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryReader.MaxBufferSize">
            <summary>
            Gets or sets the buffer size to read in chunks.  This does not
            describe the size of the actual
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryReader.ProgressBaseMessage">
            <summary>
            Gets or sets the progress message that has no percentage as part of it.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryReader.ReadOffset">
            <summary>
            This acts like a placeholder on the buffer and indicates where reading will begin (relative to the start of the buffer)
            </summary>
        </member>
        <member name="E:DotSpatial.Data.BufferedBinaryReader.FinishedReading">
            <summary>
            Occurs when this reader has read every byte from the file.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.BufferedBinaryReader.FinishedBuffering">
            <summary>
            Occurs when the end of the last portion of the file has been
            loaded into the file and the file has been closed.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.BufferedBinaryWriter">
            <summary>
            The buffered binary reader was originally designed by Ted Dunsford to make shapefile reading more
            efficient, but ostensibly could be used for other binary reading exercises.  To use this class,
            simply specify the BufferSize in bytes that you would like to use and begin reading values.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.#ctor(System.String)">
             <summary>
             Creates a new instance of BufferedBinaryReader.
             </summary>
            <param name="fileName">The string path of a file to open using this BufferedBinaryReader.</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.#ctor(System.String,DotSpatial.Data.IProgressHandler,System.Int64)">
            <summary>
            Creates a new instance of BufferedBinaryWriter, and specifies where to send progress messages.
            </summary>
            <param name="fileName">The string path of a file to open using this BufferedBinaryReader.</param>
            <param name="progressHandler">Any implementation of IProgressHandler for receiving progress messages.</param>
            <param name="expectedByteCount">A long specifying the number of bytes that will be written for the purposes of tracking progress</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Close">
            <summary>
            Finishes writing whatever is in memory to the file, closes the
            internal binary writer, the underlying file, clears the memory
            and disposes the filestream.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.PasteBuffer">
            <summary>
            Forces the buffer to paste all its existing values into the file, but does not
            advance the buffer, or in fact do anything to the buffer.  It does advance
            the position of the file index.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This seeks both in the file AND in the buffer.  This is used to write only
            desired portions of a buffer that is in memory to a file.
            </summary>
            <param name="offset">A 64 bit integer specifying where to skip to in the file.</param>
            <param name="origin">A System.IO.SeekOrigin enumeration specifying how to estimate the location.</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Write(System.Boolean)">
            <summary>
            Reads a boolean form the buffer, automatcially loading the next buffer if necessary.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Write(System.Char)">
            <summary>
            Reads a character from two bytes in the buffer, automatically loading the next buffer if necessary.
            </summary>
            <param name="value">A character to write to the buffer, and eventually the file</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Write(System.Char[])">
            <summary>
            Reads an array of character from two bytes in the buffer, automatically loading
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Write(System.Double)">
            <summary>
            Reads a double from the buffer, automatically loading the next buffer if necessary.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Write(System.Double,System.Boolean)">
            <summary>
            Writes a double-precision floating point to 8 bytes in the buffer, automatically loading the next buffer if necessary.
            </summary>
            <param name="value">A double-precision floating point decimal value to write as 8 bytes.</param>
            <param name="isLittleEndian">Boolean, true if the value should be returned with little endian byte ordering.</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Write(System.Double[])">
            <summary>
            Writes the specified array of doubles to the file.
            </summary>
            <param name="values">The values to write.</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Write(System.Int32[])">
            <summary>
            Writes the specified array of integers to the file.
            </summary>
            <param name="values">The values to write.</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Write(System.Int32)">
            <summary>
            By default, this will use little Endian ordering.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Write(System.Int32,System.Boolean)">
            <summary>
            Reads an integer from the file, using the isLittleEndian argument
            to decide whether to flip the bits or not.
            </summary>
            <param name="value">A 32-bit integer to write as 4 bytes in the buffer.</param>
            <param name="isLittleEndian">Boolean, true if the value should be returned with little endian byte ordering.</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Write(System.Int16)">
            <summary>
            Writes an Int16 to the buffer.
            </summary>
            <param name="value">An Int16 to convert into 2 bytes to write to the buffer.</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Write(System.Single)">
            <summary>
            Writes a single-precision floading point to 4 bytes in the buffer, automatically loading the next buffer if necessary.
            This assumes the value should be little endian.
            </summary>
            <param name="value">A Single to convert to 4 bytes to write to the buffer.</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Write(System.Single,System.Boolean)">
            <summary>
            Reads a single-precision floading point from 4 bytes in the buffer, automatically loading the next buffer if necessary.
            </summary>
            <param name="value">A single-precision floating point converted from four bytes</param>
            <param name="isLittleEndian">Boolean, true if the value should be returned with little endian byte ordering.</param>
        </member>
        <member name="M:DotSpatial.Data.BufferedBinaryWriter.Write(System.Byte[])">
            <summary>
            Writes the specified bytes to the buffer, advancing the buffer automatically if necessary.
            </summary>
            <param name="value">An array of byte values to write to the buffer.</param>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryWriter.Buffer">
            <summary>
            Gets or sets the actual array of bytes currently in the buffer
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryWriter.BufferOffset">
            <summary>
            Gets a long integer specifying the starting position of the currently loaded buffer
            relative to the start of the file.  A value of -1 indicates that no buffer is
            currently loaded.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryWriter.BufferSize">
            <summary>
            Gets an integer value specifying the size of the buffer currently loaded into memory.
            This will either be the MaxBufferSize, or a smaller buffer representing a smaller
            remainder existing in the file.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryWriter.IsBufferLoaded">
            <summary>
            Gets a boolean indicating whether there is currently any information loaded into the buffer.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryWriter.FileOffset">
            <summary>
            Gets the current read position in the file in bytes.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryWriter.MaxBufferSize">
            <summary>
            Gets or sets the buffer size to read in chunks.  This does not
            describe the size of the actual
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryWriter.ProgressMeter">
            <summary>
            Gets or sets the progress meter that is directly linked to the progress handler.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryWriter.ProgressHandler">
            <summary>
            Gets or sets the progress handler for this binary writer
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BufferedBinaryWriter.WriteOffset">
            <summary>
            This acts like a placeholder on the buffer and indicates where reading will begin (relative to the start of the buffer)
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ILog">
            <summary>
            LogException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ILog.Log">
            <summary>
            Actually logs the exception.  This happens after the message has been set in the constructors of the classes of this exception.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.DataStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.Argument_Null_S">
            <summary>
              Looks up a localized string similar to The argument %S cannot be null..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.ArgumentCannotBeNegative_S">
            <summary>
              Looks up a localized string similar to The argument %S cannot be negative..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.ArgumentNull_S">
            <summary>
              Looks up a localized string similar to The argument %S was null.  Try testing for the null case before calling this method..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.ArgumentOfWrongType_S1_S2">
            <summary>
              Looks up a localized string similar to The argument %S1 was incorrect for %S2..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.CalculatingStatistics">
            <summary>
              Looks up a localized string similar to Calculating Statistics.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.CannotCopyToSelf_S">
            <summary>
              Looks up a localized string similar to The fileName %S cannot be copied to itself..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.CopyingValues">
            <summary>
              Looks up a localized string similar to Copying Values.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.CurrentElementNotSpecified">
            <summary>
              Looks up a localized string similar to The current element was not defined.  Before attempting to read the element, first assign the value of the current XML Element to read..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.EndOfFile">
            <summary>
              Looks up a localized string similar to Cannot read past the end of the file..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.FeatureTypeMismatch">
            <summary>
              Looks up a localized string similar to The FeatureType of the feature you are trying to add does not match the feature type of this featureset..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.FeaturetypeUnspecified">
            <summary>
              Looks up a localized string similar to The FeatureType was not specified.  Please specify a featuretype before attempting to call this method..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.FileExists_S">
            <summary>
              Looks up a localized string similar to The fileName %S already exists.  Do you wish to overwrite it?.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.FileNotFound_S">
            <summary>
              Looks up a localized string similar to The fileName %S was not found..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.FileNotLines_S">
            <summary>
              Looks up a localized string similar to The fileName %S contains a feature type other than lines..
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:DotSpatial.Data.DataStrings.FileNotMultipoints_S" -->
        <!-- Badly formed XML comment ignored for member "P:DotSpatial.Data.DataStrings.FileNotPoints_S" -->
        <member name="P:DotSpatial.Data.DataStrings.FileNotPolygons_S">
            <summary>
              Looks up a localized string similar to The fileName %S contains a feature type other than polygons..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.FileTypeNotSupported">
            <summary>
              Looks up a localized string similar to The specified file type is not supported..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.HfaEnumerationNotFound">
            <summary>
              Looks up a localized string similar to Attepted to set the enumeration field to the value &apos;%s&apos;, which is not known..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.HfaFieldTypeException">
            <summary>
              Looks up a localized string similar to The specified charcter &apos;%S&apos; was not a known field type: 124cCesStlLfdmMbox&quot;.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.HfaInvalidCountException">
            <summary>
              Looks up a localized string similar to The number of rows and number of columns must both be greater than 0, but the header for this item returned %S1 rows and %S2 columns..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.HfaNotCompressedException">
            <summary>
              Looks up a localized string similar to You must first compress the data before accessing this value..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.HfaPointerInsertNotSupportedException">
            <summary>
              Looks up a localized string similar to Insertion via SetInstValue() is not yet supported for pointers..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.IndexingErrorIn_S">
            <summary>
              Looks up a localized string similar to There was an error while attempting to index %S.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.IO_FileNotFound_S">
            <summary>
              Looks up a localized string similar to The file %S could not be found..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.NotImplemented">
            <summary>
              Looks up a localized string similar to This has not yet been implemented..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.NumberException_TooLarge_S">
            <summary>
              Looks up a localized string similar to The value %S was too large to encode with 18 ASCII characters..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.NumberException_TooSmall_S">
            <summary>
              Looks up a localized string similar to The value %S was too small to be encoded with 18 ASCII characters..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.ParseFailed_S">
            <summary>
              Looks up a localized string similar to The value you entered could not be parsed into a %S.  Make sure the value is in the valid range..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.PngInsuficientLengthException">
            <summary>
              Looks up a localized string similar to The desired length of %S1 was too long.  The total length was %S2 and the offset was %S3..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.PngInvalidSignatureException">
            <summary>
              Looks up a localized string similar to The beginning eight bytes of the specified file did not match the png signature..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.PyramidByteMismatchException">
            <summary>
              Looks up a localized string similar to The number of bytes should be 4 * rows * cols since only ARGB format is supported..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.PyramidHeaderException">
            <summary>
              Looks up a localized string similar to The header has not been defined for the image scale you are attempting to access..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.PyramidOutOfBoundsException">
            <summary>
              Looks up a localized string similar to The rows or columns would extend beyond the specified number of columns or rows for the specified scale..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.RasterRequiresCast">
            <summary>
              Looks up a localized string similar to To work with anything other than an in-memory raster window, you must first cast this raster to the correct data format..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.RastersNeedSameCellSize">
            <summary>
              Looks up a localized string similar to The rasters must have equally sized cells to use this method..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.RasterTooLarge">
            <summary>
              Looks up a localized string similar to The specified raster would be too large to store in memory..
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.ReadingValuesFrom_S">
            <summary>
              Looks up a localized string similar to Reading values from %S.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DataStrings.WritingValues_S">
            <summary>
              Looks up a localized string similar to Writing values to %S.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.BoxStatistics">
            <summary>
            Box-plot: Tukey 1977
            Basically it is like subdividing the data into 4 quartiles,
            denoted like Q1, Q2, Q3, Q4.
            -------
            Low Outlier (less than the Quartile - 3/2 Interquartile range)
            Q1 (Q1 - 3/2 the Interquartile range to Q1
            Q2 (Quartile 1 to Median)
            Q3 (Median to Quartile 3)
            Q4 (Q3 to Q3 + 3/2 the Interquartile range
            High Outlier (Greater than Q3 plus the interquartile range
            </summary>
        </member>
        <member name="F:DotSpatial.Data.BoxStatistics.HighMedian">
            <summary>
            The median between the median and the highest value.
            This separates the third and fourth quartiles.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.BoxStatistics.HighWisker">
            <summary>
            The highest value that is not considered an outlier.
            If the values are not numeric, this will be the Maximum.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.BoxStatistics.LowMedian">
            <summary>
            The median between the lowest value and the median value.
            This separates the first quartile from the second.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.BoxStatistics.LowWhisker">
            <summary>
            The lowest value that is not considered to be an outlier.
            If the values are not numeric, this will be the minimum.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.BoxStatistics.Median">
            <summary>
            The Median value (the value of the middle member)
            </summary>
        </member>
        <member name="T:DotSpatial.Data.CoordinateType">
            <summary>
            CoordinateTypes
            </summary>
        </member>
        <member name="F:DotSpatial.Data.CoordinateType.Regular">
            <summary>
            X and Y coordinates only
            </summary>
        </member>
        <member name="F:DotSpatial.Data.CoordinateType.M">
            <summary>
            M values are available
            </summary>
        </member>
        <member name="F:DotSpatial.Data.CoordinateType.Z">
            <summary>
            Z values are available
            </summary>
        </member>
        <member name="T:DotSpatial.Data.DataTableStatisticsExt">
            <summary>
            DataTableStatisticsEM
            </summary>
        </member>
        <member name="M:DotSpatial.Data.DataTableStatisticsExt.GetBoxStatistics(System.Data.DataTable,System.String)">
            <summary>
            Inspects the members of the data Table, focusing on the named field.  It calculates
            the median of the values in the named field.
            </summary>
            <param name="self"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.EndPointInteraction">
            <summary>
            Used by Segment.ClosestPointTo() to detail how the input point interacts with the line segment
            </summary>
        </member>
        <member name="F:DotSpatial.Data.EndPointInteraction.OnLine">
            <summary>
            The vertex found is on the line segment and between P1 and P2
            </summary>
        </member>
        <member name="F:DotSpatial.Data.EndPointInteraction.PastP1">
            <summary>
            The vertex found is beyond the end of P1
            </summary>
        </member>
        <member name="F:DotSpatial.Data.EndPointInteraction.PastP2">
            <summary>
            The vertex found is beyond the end of P2
            </summary>
        </member>
        <member name="F:DotSpatial.Data.EndPointInteraction.P1equalsP2">
            <summary>
            P1 equals P2 so the segment cannot be extended into an infinite line the closest vertex is P1/P2
            </summary>
        </member>
        <member name="T:DotSpatial.Data.CacheTypes">
            <summary>
            Clarifies whether a value is cached in a local variable or updated dynamically
            </summary>
        </member>
        <member name="F:DotSpatial.Data.CacheTypes.Cached">
            <summary>
            The value is cached locally, rather than calculated on the fly
            </summary>
        </member>
        <member name="F:DotSpatial.Data.CacheTypes.Dynamic">
            <summary>
            The value is calculated each type, rather than using a local cache
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ByteOrder">
            <summary>
            Byte order
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ByteOrder.BigEndian">
            <summary>
            Big Endian
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ByteOrder.LittleEndian">
            <summary>
            Little Endian
            </summary>
        </member>
        <member name="T:DotSpatial.Data.VectorFileType">
            <summary>
            Filetypes
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.INVALID">
            <summary>
            An unrecognized file format
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.Shapefile">
            <summary>
            The Esri Shapefile format (*.shp)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.CSV">
            <summary>
            Comma separated values (*.csv)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.GML">
            <summary>
            Google Markup Language (a variant of the Keyhole Markup Language) (*.gml)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.MapInfo">
            <summary>
            MapInfo format (*.tab)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.MicrostationDGN">
            <summary>
            CAD format (Design) (*.dgn)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.S57">
            <summary>
            S-57 published by International Hydrographic Organization (IHO). (*.000)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.SDTS">
            <summary>
            Spatial Data Transfer Standard (*.sdts)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.UKNTF">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.TIGER">
            <summary>
            Topologically Integrated Geographic Encoding and Referencing (*.tig)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.PostgreSQL">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.ODBC">
            <summary>
            MS Excel ODBC Query File? (*.DQY)
            maybe ODBC Data Source file? (*.DSN)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.PGeo">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.AVC">
            <summary>
            ArcInfo Vector Coverage
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.VRT">
            <summary>
            Geospatial Data Abstraction Library (GDAL) File (*.VRT)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.VectorFileType.REC">
            <summary>
            Record file?  (*.REC)
            </summary>
        </member>
        <member name="T:DotSpatial.Data.Field">
            <summary>
            This represents the column information for one column of a shapefile.
            This specifies precision as well as the typical column information.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.Field._decimalCount">
            <summary>
            Represents the number of decimals to preserve after a 0.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.Field._length">
            <summary>
            The length of a field in bytes
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Field.#ctor">
            <summary>
            Creates a new default field empty field - needed for datatable copy and clone methods.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Field.#ctor(System.Data.DataColumn)">
            <summary>
            Creates a new default field given the specified DataColumn.  Numeric types
            default to a size of 255, but will be shortened during the save opperation.
            The default decimal count for double and long is 0, for Currency is 2, for float is
            3, and for double is 8.  These can be changed by changing the DecimalCount property.
            </summary>
            <param name="inColumn">A System.Data.DataColumn to create a Field from</param>
        </member>
        <member name="M:DotSpatial.Data.Field.#ctor(System.String)">
            <summary>
            Creates a new instance of a field given only a column name
            </summary>
            <param name="inColumnName">The string Column Name for the new field</param>
        </member>
        <member name="M:DotSpatial.Data.Field.#ctor(System.String,System.Type)">
            <summary>
            Creates a new Field with a specific name for a specified data type
            </summary>
            <param name="inColumnName">The string name of the column</param>
            <param name="inDataType">The System.Type describing the datatype of the field</param>
        </member>
        <member name="M:DotSpatial.Data.Field.#ctor(System.String,DotSpatial.Data.FieldDataType)">
            <summary>
            Creates a new field with a specific name and using a simplified enumeration of possible types.
            </summary>
            <param name="inColumnName">the string column name.</param>
            <param name="type">The type enumeration that clarifies which basic data type to use.</param>
        </member>
        <member name="M:DotSpatial.Data.Field.#ctor(System.String,System.Char,System.Byte,System.Byte)">
            <summary>
            This creates a new instance.  Since the data type is
            </summary>
            <param name="columnName"></param>
            <param name="typeCode"></param>
            <param name="length"></param>
            <param name="decimalCount"></param>
        </member>
        <member name="M:DotSpatial.Data.Field.SetupDecimalCount">
            <summary>
            Internal method that decides an appropriate decimal count, given a data column
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Field.TypeCharacter">
            <summary>
            This is the single character dBase code.  Only some of these are supported with Esri.
            C - Character (Chars, Strings, objects - as ToString(), and structs - as  )
            D - Date (DateTime)
            T - Time (DateTime)
            N - Number (Short, Integer, Long, Float, Double, byte)
            L - Logic (True-False, Yes-No)
            F - Float
            B - Double
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Field.DecimalCount">
            <summary>
            Gets or sets the number of places to keep after the 0 in number formats.
            As far as dbf fields are concerned, all numeric datatypes use the same
            database number format.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Field.Length">
            <summary>
            The character length of the field
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Field.DataAddress">
            <summary>
            The offset of the field on a row in the file
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Field.NumberConverter">
            <summary>
             Number Converter associated with this field.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.FieldDataType">
            <summary>
            FieldDataTypes stores some very simplistic data types to help novices get started more easily.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FieldDataType.Integer">
            <summary>
            32 Bit integer data type
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FieldDataType.Double">
            <summary>
            Double precision floating point data type
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FieldDataType.String">
            <summary>
            String data type
            </summary>
        </member>
        <member name="T:DotSpatial.Data.BitmapGrid">
            <summary>
            This is not a data class exactly, but instead is for making it easier to modify byte values of a 32 bit ARGB
            bitmap, but doesn't require a file.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.#ctor(System.Drawing.Image)">
            <summary>
            Creates a new instance of MemoryBitmapGrid
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a blank image grid.
            </summary>
            <param name="numRows"></param>
            <param name="numCols"></param>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.Clone">
            <summary>
            Creates a clone of this memory bitmap grid by basically cloning the bitmap itself
            and then building a new BitmapGrid around the clone.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.GetEnumerator">
            <summary>
            Gets an enumerator for cycling through the color values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.Copy">
            <summary>
            Creates a disconnected duplicate of this BitmapGrid
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.Clear">
            <summary>
            Clears the byte values in the grid, replacing them with 0.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.Dispose">
            <summary>
            Disposes the unmanaged aspect of the bmp
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.Fill(System.Drawing.Color)">
            <summary>
            Erases over any current content in the values, and copies the
            byte values of the specified color in its place.
            </summary>
            <param name="fillColor">The color to fill the image with</param>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.ConvertToBitmap(System.Drawing.Image)">
            <summary>
            Tests the specified bitmap to verify that it is both a Bitmap and in ARGB pixel format.
            If it is anything different, then this returns a newly created bitmap with a copy drawn
            onto it.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.Difference(DotSpatial.Data.BitmapGrid)">
            <summary>
            This will calculate the difference.  The width and height of the new grid will be the larger
            of the rows and columns between the compare grid and this grid.  Values outside the range
            of one of the grids will simply be filled in as the value stored in the other grid.  Because
            byte values can't be negative, the difference will be the absolute value.
            </summary>
            <param name="compare"></param>
            <returns>A BitmapGrid with byte values calculated by taking the difference between the two grids.</returns>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.Difference(DotSpatial.Data.BitmapGrid,System.Boolean)">
            <summary>
            By default, all the bands have a difference comparison done.  This may not have the desired effect
            because the alpha channel for most colors is actually just 255.  The mathematical difference would
            be zero, resulting in an output image that, while being the actual difference, is essentially
            entirely invisibile (except where the images don't overlap.)
            </summary>
            <param name="compare"></param>
            <param name="ignoreAlpha"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.GetColor(System.Int32,System.Int32)">
            <summary>
            Gets a color structure for the specified row and column.
            </summary>
            <param name="row">The zero based integer row index to get the color from</param>
            <param name="col">The zero based integer column index to get the color from</param>
            <returns>A System.Color structure created from the byte values in the values array</returns>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.Matches(DotSpatial.Data.BitmapGrid)">
            <summary>
            Compares the bytes of this grid to the bytes of another grid.  If the measurements
            of the other grid don't match this, then this returns false.
            </summary>
            <param name="otherGrid">The other BitmapGrid to test against</param>
            <returns>Boolean, true if the bytes are the same in each case.</returns>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.Randomize">
            <summary>
            Replaces all the byte values of this grid with randomly generated values.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.SetColor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color structure by copying the byte ARGB values into the values array.
            </summary>
            <param name="row">The integer row index to copy values to</param>
            <param name="col">The integer column index to copy values to</param>
            <param name="color">The color structure to turn into bytes</param>
        </member>
        <member name="P:DotSpatial.Data.BitmapGrid.BitmapImage">
            <summary>
            Setting this will automatically replace the byte array.  Getting this will
            automatically convert the bytes back into bitmap form.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BitmapGrid.Height">
            <summary>
            Gets the integer height of the bitmap in this grid in pixels.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BitmapGrid.Stride">
            <summary>
            gets the integer stride, or number of actual bytes in a single row.  This is not always the
            same as the number of columns.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BitmapGrid.Values">
            <summary>
            Gets or sets the array of bytes directly.  Setting this can be
            dangerous and is not recommended.  Setting individual values in the
            array is perfectly acceptable, since it won't interfere with
            the stride or number of bytes expected.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BitmapGrid.Width">
            <summary>
            Gets the current width (number of columns) of the bitmap in pixels.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.BitmapGrid.BitmapGridEnumerator">
            <summary>
            Cycles through the values of a BitmapGrid starting at the top left corner and moving in row major
            fashion, (raster-scan fashion, moving across end then down.)
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.BitmapGridEnumerator.#ctor(DotSpatial.Data.BitmapGrid)">
            <summary>
            Creates a new instance of a BitmapGridEnumerator based on the specified parentGrid.  This
            automatically ignores any bytes in the range past the "width".
            </summary>
            <param name="parentGrid">The parent grid to cycle through the values of</param>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.BitmapGridEnumerator.Dispose">
            <summary>
            This does nothing
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.BitmapGridEnumerator.MoveNext">
            <summary>
            Advances the color to the next position
            </summary>
            <returns>Boolean, false if there were no more cells in the image</returns>
        </member>
        <member name="M:DotSpatial.Data.BitmapGrid.BitmapGridEnumerator.Reset">
            <summary>
            Resets the enumeration to the top left corner of the image.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BitmapGrid.BitmapGridEnumerator.Current">
            <summary>
            Gets the current color value from this grid
            </summary>
        </member>
        <member name="T:DotSpatial.Data.DotNetImageProvider">
            <summary>
            DotNetImageProvider uses the standard image object to support basic image types through standard in-ram treatments.
            Images are not responsible for producing grid values that can be represented symbolically.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IImageDataProvider">
            <summary>
            IImageProvider
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IDataProvider">
            <summary>
            IDataProvider is what you implement to expand the data handling methods of DotSpatial
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IDataProvider.Open(System.String)">
            <summary>
            This open method is only called if this plugin has been given priority for one
            of the file extensions supported in the DialogReadFilter property supplied by
            this control.  Failing to provide a DialogReadFilter will result in this plugin
            being added to the list of DataProviders being supplied under the Add Other Data
            option in the file menu.
            </summary>
            <param name="name">A string specifying the complete path and extension of the file to open.</param>
            <returns>A List of IDataSets to be added to the Map.  These can also be groups of datasets.</returns>
        </member>
        <member name="P:DotSpatial.Data.IDataProvider.DialogReadFilter">
            <summary>
            Gets a dialog read filter that lists each of the file type descriptions and file extensions, delimited
            by the | symbol.  Each will appear in DotSpatial's open file dialog filter, preceded by the name provided
            on this object.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataProvider.DialogWriteFilter">
            <summary>
            Gets a dialog filter that lists each of the file type descriptions and extensions for a Save File Dialog.
            Each will appear in DotSpatial's open file dialog filter, preceded by the name provided on this object.
            In addition, the same extension mapping will be used in order to pair a string driver code to the
            extension.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataProvider.Name">
            <summary>
            Gets a preferably short name that identifies this data provider.  Example might be GDAL.
            This will be prepended to each of the DialogReadFilter members from this plugin.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataProvider.ProgressHandler">
            <summary>
            Gets or sets the progress handler to use.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataProvider.Description">
            <summary>
            This provides a basic description of what your provider does.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IImageDataProvider.Create(System.String,System.Int32,System.Int32,System.Boolean,DotSpatial.Data.IProgressHandler,DotSpatial.Data.ImageBandType)">
            <summary>
            Creates a new instance of an Image.
            </summary>
            <param name="fileName">The string fileName to use</param>
            <param name="width">The integer width in pixels</param>
            <param name="height">The integer height in pixels</param>
            <param name="inRam">Boolean, true if the entire contents should be stored in memory</param>
            <param name="progHandler">A Progress handler to use</param>
            <param name="band">The ImageBandType clarifying how to organize the raster bands.</param>
            <returns>A New IImageData object allowing access to the content of the image</returns>
        </member>
        <member name="M:DotSpatial.Data.IImageDataProvider.Open(System.String)">
            <summary>
            Opens a new Image with the specified fileName
            </summary>
            <param name="fileName">The string file to open</param>
            <returns>An IImageData object</returns>
        </member>
        <member name="M:DotSpatial.Data.DotNetImageProvider.Create(System.String,System.Int32,System.Int32,System.Boolean,DotSpatial.Data.IProgressHandler,DotSpatial.Data.ImageBandType)">
            <summary>
            Creates a new instance of an Image.
            </summary>
            <param name="fileName">The string fileName to use</param>
            <param name="width">The integer width in pixels</param>
            <param name="height">The integer height in pixels</param>
            <param name="inRam">Boolean, true if the entire contents should be stored in memory</param>
            <param name="progHandler">A Progress handler to use</param>
            <param name="band">.Net type ignores this for now.</param>
            <returns>
            A New IImageData object allowing access to the content of the image
            </returns>
        </member>
        <member name="M:DotSpatial.Data.DotNetImageProvider.Open(System.String)">
            <summary>
            Opens a new Image with the specified fileName
            </summary>
            <param name="fileName">The string file to open</param>
            <returns>An IImageData object</returns>
        </member>
        <member name="P:DotSpatial.Data.DotNetImageProvider.DialogReadFilter">
            <summary>
            Gets a dialog read filter that lists each of the file type descriptions and file extensions, delimeted
            by the | symbol.  Each will appear in DotSpatial's open file dialog filter, preceeded by the name provided
            on this object.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DotNetImageProvider.DialogWriteFilter">
            <summary>
            Gets a dialog filter that lists each of the file type descriptions and extensions for a Save File Dialog.
            Each will appear in DotSpatial's open file dialog filter, preceeded by the name provided on this object.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DotNetImageProvider.Name">
            <summary>
            Gets a prefereably short name that identifies this data provider.  Example might be GDAL.
            This will be prepended to each of the DialogReadFilter members from this plugin.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DotNetImageProvider.Description">
            <summary>
            This provides a basic description of what your provider does.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.DotNetImageProvider.ProgressHandler">
            <summary>
            Gets or sets the progress handler
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IImageCoverage">
            <summary>
            An Image Coverage just consists of several images that can be thought of as a single image region.
            Queries for pixel values for a region will simply return the first value in the set that is not
            completely transparent.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IImageSet">
            <summary>
            IImageSet is simple interface that gives some basic information that is common between tiled images and
            the more general image coverages
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IImageSet.GetBitmap(DotSpatial.Data.Extent,System.Drawing.Size)">
            <summary>
            Uses the geographic envelope and the specified pixelSize in order to calculate an
            appropriate bitmap for display based on the various images in this set.
            </summary>
            <param name="envelope">The geographic bounds to display</param>
            <param name="pixelSize">The pixelSize of the bitmap to display</param>
            <returns>A Bitmap showing the appropriate size and dimensions of the image</returns>
        </member>
        <member name="M:DotSpatial.Data.IImageSet.GetImages">
            <summary>
            This is very generic, but allows the user to cycle through the images currently in the image set,
            regardless of whether they are in a list or an array or other data structure.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.IImageSet.Count">
            <summary>
            Gets the count of the images in the image set
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IImageCoverage.Images">
            <summary>
            Gets or sets the list of tiles.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IImageData">
            <summary>
            IImageData
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IImageData.CopyBitmapToValues">
            <summary>
            Forces the image to read values from the graphic image format to the byte array format
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IImageData.CopyValues(DotSpatial.Data.IImageData)">
            <summary>
            Copies the values from the specified source image.
            </summary>
            <param name="source">
            The source image to copy values from.
            </param>
        </member>
        <member name="M:DotSpatial.Data.IImageData.CopyValuesToBitmap">
            <summary>
            Forces the image to copy values from the byte array format to the image format.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IImageData.GetColor(System.Int32,System.Int32)">
            <summary>
            Creates a color structure from the byte values in the values array that correspond to the
            specified position.
            </summary>
            <param name="row">
            The integer row index for the pixel.
            </param>
            <param name="column">
            The integer column index for the pixel.
            </param>
            <returns>
            A Color.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.IImageData.Open">
            <summary>
            Opens the file, assuming that the fileName has already been specified
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IImageData.Save">
            <summary>
            Saves the image and associated world file to the current fileName.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IImageData.SaveAs(System.String)">
            <summary>
            Saves the image to a new fileName.
            </summary>
            <param name="fileName">
            The string fileName to save the image to.
            </param>
        </member>
        <member name="M:DotSpatial.Data.IImageData.SetBitmap(System.Drawing.Bitmap)">
            <summary>
            Sets the bitmap being used for this dataset
            </summary>
            <param name="image">
            </param>
        </member>
        <member name="M:DotSpatial.Data.IImageData.GetColorPalette">
            <summary>
            This is only used in the palette indexed band type.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IImageData.SetColorPalette(System.Collections.Generic.IEnumerable{System.Drawing.Color})">
            <summary>
            This should update the palette cached and in the file.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.IImageData.SetColor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color value into the byte array based on the row and column position of the pixel.
            </summary>
            <param name="row">
            The integer row index of the pixel to set the color of.
            </param>
            <param name="column">
            The integer column index of the pixel to set the color of
            </param>
            <param name="col">
            The color to copy values from
            </param>
        </member>
        <member name="M:DotSpatial.Data.IImageData.ReadBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a block of data directly, converted into a bitmap.
            </summary>
            <param name="xOffset">The zero based integer column offset from the left</param>
            <param name="yOffset">The zero based integer row offset from the top</param>
            <param name="xSize">The integer number of pixel columns in the block. </param>
            <param name="ySize">The integer number of pixel rows in the block.</param>
            <returns>A Bitmap that is xSize, ySize.</returns>
        </member>
        <member name="M:DotSpatial.Data.IImageData.WriteBlock(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Saves a bitmap of data as a continuous block into the specified location.
            </summary>
            <param name="value">The bitmap value to save.</param>
            <param name="xOffset">The zero based integer column offset from the left</param>
            <param name="yOffset">The zero based integer row offset from the top</param>
        </member>
        <member name="M:DotSpatial.Data.IImageData.UpdateOverviews">
            <summary>
            Finalizes the blocks.  In the case of a pyramid image, this forces recalculation of the
            various overlays.  For GDAL images, this may do nothing, since the overlay recalculation
            may be on the fly.  For InRam images this does nothing.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IImageData.BytesPerPixel">
            <summary>
            Gets or sets an integer indicating how many bytes exist for each pixel.
            Eg. 32 ARGB = 4, 24 RGB = 3, 16 bit GrayScale = 2
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IImageData.Filename">
            <summary>
            Gets or sets the fileName.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IImageData.Height">
            <summary>
            Gets the image height in pixels
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IImageData.NumBands">
            <summary>
            Gets or sets the number of bands that are in the image.
            One band is a gray valued image, 3 bands for color RGB and 4 bands
            for ARGB.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IImageData.Stride">
            <summary>
            Gets or sets the stride in bytes.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IImageData.Values">
            <summary>
            Gets a one dimensional array of byte values
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IImageData.Width">
            <summary>
            Gets the image width in pixels
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IImageData.WorldFile">
            <summary>
            Gets or sets the world file that stores the georeferencing information for this image.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IImageData.BandType">
            <summary>
            Gets or sets the interpretation for the image bands.  This currently is only for GDAL images.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IImageSource">
            <summary>
            IImageSource
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IImageSource.ReadWindow(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Returns the data from the file in the form of ARGB bytes.
            </summary>
            <param name="startRow">The zero based integer index of the first row (Y)</param>
            <param name="startColumn">The zero based integer index of the first column (X)</param>
            <param name="numRows">The number of rows to read</param>
            <param name="numColumns">The number of columns to read</param>
            <param name="overview">The integer overview.  0 for the original image.  Each successive index divides the length and height in half.  </param>
            <returns>A Byte of values in ARGB order and in row-major raster-scan sequence</returns>
        </member>
        <member name="M:DotSpatial.Data.IImageSource.GetBitmap(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This returns the window of data as a bitmap.
            </summary>
            <param name="startRow">The zero based integer index of the first row (Y)</param>
            <param name="startColumn">The zero based integer index of the first column (X)</param>
            <param name="numRows">The number of rows to read</param>
            <param name="numColumns">The number of columns to read</param>
            <param name="overview">The integer overview.  0 for the original image.  Each successive index divides the length and height in half.  </param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.IImageSource.Bounds">
            <summary>
            Gets or sets the bounds
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IImageSource.NumRows">
            <summary>
            Gets the number of rows
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IImageSource.NumColumns">
            <summary>
            Gets the total number of columns
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IImageSource.NumOverviews">
            <summary>
            Gets the number of overviews, not counting the original image
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ImageCoverage">
            <summary>
            TiledImage is a class for actually controlling the data in several tiles.  This does not supply
            direct accessors for
            modifying the bytes directly, and instead expects the user to edit the image on a tile-by-tile basis.  However,
            the GetBitmap method will produce a representation of the envelope scaled to the specified window.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ImageCoverage.#ctor">
            <summary>
            Creates a new instance of TiledImage
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ImageCoverage.GetBitmap(DotSpatial.Data.Extent,System.Drawing.Size)">
            <summary>
            Gets the bitmap for the specified geographic envelope scaled to fit on a bitmap of the specified size in pixels.
            </summary>
            <param name="envelope"></param>
            <param name="pixelSize"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ImageCoverage.GetImages">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.ImageCoverage.Open">
            <summary>
            Cycles through each of the images and calls the open method on each one.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ImageCoverage.Save">
            <summary>
            Cycles through each of the images and calls the save method on each one
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ImageCoverage.FileName">
            <summary>
            Gets or sets the Filename
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ImageCoverage.Count">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.ImageCoverage.Extent">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.ImageCoverage.Images">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Data.ImageData">
            <summary>
            ImageData (not named Image because of conflicting with the Dot Net Image object)
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ImageData.#ctor">
            <summary>
            Creates a new instance of ImageData
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ImageData.CopyValues(DotSpatial.Data.IImageData)">
            <summary>
            Copies the values from the specified source image.
            </summary>
            <param name="source">The source image to copy values from.</param>
        </member>
        <member name="M:DotSpatial.Data.ImageData.GetBitmap">
            <summary>
            Attempts to create a bitmap for the entire image.  This may cause memory exceptions.
            </summary>
            <returns>A Bitmap of the image.</returns>
        </member>
        <member name="M:DotSpatial.Data.ImageData.SetBitmap(System.Drawing.Bitmap)">
            <summary>
            Sets the bitmap being used for this dataset
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:DotSpatial.Data.ImageData.GetBitmap(DotSpatial.Data.Extent,System.Drawing.Size)">
            <summary>
            The geographic envelope gives the region that the image should be created for.
            The window gives the corresponding pixel dimensions for the image, so that
            images matching the resolution of the screen can be used.
            </summary>
            <param name="envelope">The geographic extents to retrieve data for</param>
            <param name="size">The rectangle that defines the size of the drawing area in pixels</param>
            <returns>A bitmap captured from the main image </returns>
        </member>
        <member name="M:DotSpatial.Data.ImageData.GetBitmap(DotSpatial.Data.Extent,System.Drawing.Rectangle)">
            <summary>
            The geographic envelope gives the region that the image should be created for.
            The window gives the corresponding pixel dimensions for the image, so that
            images matching the resolution of the screen can be used.
            </summary>
            <param name="envelope">The geographic extents to retrieve data for</param>
            <param name="window">The rectangle that defines the size of the drawing area in pixels</param>
            <returns>A bitmap captured from the main image </returns>
        </member>
        <member name="M:DotSpatial.Data.ImageData.Open">
            <summary>
            Opens the file, assuming that the fileName has already been specified
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ImageData.CopyBitmapToValues">
            <summary>
            Forces the image to read values from the graphic image format to the byte array format
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ImageData.Save">
            <summary>
            Saves the image and associated world file to the current fileName.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ImageData.SaveAs(System.String)">
            <summary>
            Saves the image to a new fileName.
            </summary>
            <param name="fileName">The string fileName to save the image to.</param>
        </member>
        <member name="M:DotSpatial.Data.ImageData.CopyValuesToBitmap">
            <summary>
            Forces the image to copy values from the byte array format to the image format.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ImageData.Create(System.String,System.Int32,System.Int32,DotSpatial.Data.ImageBandType)">
            <summary>
            Creates a new image and world file, placing the default bounds at the origin, with one pixel per unit.
            </summary>
            <param name="fileName">The string fileName</param>
            <param name="width">The integer width</param>
            <param name="height">The integer height</param>
            <param name="bandType">The color band type</param>
        </member>
        <member name="M:DotSpatial.Data.ImageData.Open(System.String)">
            <summary>
            Opens the file with the specified fileName
            </summary>
            <param name="fileName">The string fileName to open</param>
        </member>
        <member name="M:DotSpatial.Data.ImageData.GetColor(System.Int32,System.Int32)">
            <summary>
            Creates a color structure from the byte values in the values array that correspond to the
            specified position.
            </summary>
            <param name="row">The integer row index for the pixel.</param>
            <param name="column">The integer column index for the pixel.</param>
            <returns>A Color.</returns>
        </member>
        <member name="M:DotSpatial.Data.ImageData.SetColor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color value into the byte array based on the row and column position of the pixel.
            </summary>
            <param name="row">The integer row index of the pixel to set the color of.</param>
            <param name="column">The integer column index of the pixel to set the color of </param>
            <param name="col">The color to copy values from</param>
        </member>
        <member name="M:DotSpatial.Data.ImageData.ReadBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a block of data directly, converted into a bitmap.
            </summary>
            <param name="xOffset">The zero based integer column offset from the left</param>
            <param name="yOffset">The zero based integer row offset from the top</param>
            <param name="xSize">The integer number of pixel columns in the block. </param>
            <param name="ySize">The integer number of pixel rows in the block.</param>
            <returns>A Bitmap that is xSize, ySize.</returns>
        </member>
        <member name="M:DotSpatial.Data.ImageData.WriteBlock(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Saves a bitmap of data as a continuous block into the specified location.
            Be sure to call UpdateOverviews after writing all blocks in pyramid images.
            </summary>
            <param name="value">The bitmap value to save.</param>
            <param name="xOffset">The zero based integer column offset from the left</param>
            <param name="yOffset">The zero based integer row offset from the top</param>
        </member>
        <member name="M:DotSpatial.Data.ImageData.UpdateOverviews">
            <summary>
            Finalizes the blocks.  In the case of a pyramid image, this forces recalculation of the
            various overlays.  For GDAL images, this may do nothing, since the overlay recalculation
            may be on the fly.  For InRam images this does nothing.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ImageData.GetColorPalette">
            <summary>
            This is only used in the palette indexed band type.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ImageData.SetColorPalette(System.Collections.Generic.IEnumerable{System.Drawing.Color})">
            <summary>
            This should update the palette cached and in the file.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.ImageData.OnBoundsChanged(DotSpatial.Data.IRasterBounds)">
            <summary>
            Occurs when the bounds have been set.
            </summary>
            <param name="bounds">The new bounds.</param>
        </member>
        <member name="M:DotSpatial.Data.ImageData.Dispose(System.Boolean)">
            <summary>
            Disposes the managed memory objects in the ImageData class, and then forwards
            the Dispose operation to the internal dataset in the base class, if any.
            </summary>
            <param name="disposeManagedResources">Boolean, true if both managed and unmanaged resources should be finalized.</param>
        </member>
        <member name="P:DotSpatial.Data.ImageData.ColorPalette">
            <summary>
            Gets or sets the color palette
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ImageData.BytesPerPixel">
            <summary>
            Gets or sets an integer indicating how many bytes exist for each pixel.
            Eg. 32 ARGB = 4, 24 RGB = 3, 16 bit GrayScale = 2
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ImageData.Filename">
            <summary>
            Gets or sets the fileName.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ImageData.Height">
            <summary>
            Gets the image height in pixels
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ImageData.NumBands">
            <summary>
            Gets or sets the number of bands that are in the image.  One band is a gray valued image, 3 bands for color RGB and 4 bands
            for ARGB.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ImageData.Stride">
            <summary>
            Gets or sets the stride in bytes.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ImageData.Values">
            <summary>
            Gets a one dimensional array of byte values
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ImageData.Width">
            <summary>
            Gets the image width in pixels
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ImageData.WorldFile">
            <summary>
            Gets or sets the world file that stores the georeferencing information for this image.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ImageData.BandType">
            <summary>
            Gets or sets the interpretation for the image bands.  This currently is only for GDAL images.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ITiledImage">
            <summary>
            ITiledImage
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ITiledImage.Bounds">
            <summary>
            Gets or sets the bounds for this image
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ITiledImage.Filename">
            <summary>
            Gets or sets the fileName for this tiled image.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ITiledImage.Height">
            <summary>
            Gets or sets the integer height in pixels for the combined image at its maximum resolution
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ITiledImage.Stride">
            <summary>
            Gets the stride, or total width in pixels of the byte data, which might not match exactly with the visible width.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ITiledImage.TileWidth">
            <summary>
            Gets the tile width
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ITiledImage.TileHeight">
            <summary>
            Gets the tile height
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ITiledImage.Width">
            <summary>
            Gets or sets the integer pixel width for the combined image at its maximum resolution.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ITiledImage.WorldFile">
            <summary>
            Gets or sets the WorldFile for this set of tiles.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.InRamImageData">
            <summary>
            MWImageData
            </summary>
        </member>
        <member name="F:DotSpatial.Data.InRamImageData._myImage">
            <summary>
            The _my image.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Data.InRamImageData"/> class.
            Creates an empty ImageData to be created or loaded
            </summary>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Data.InRamImageData"/> class.
            Creates a new MWImageData class from the specified fileName.
            </summary>
            <param name="fileName">
            The string filename.
            </param>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Data.InRamImageData"/> class.
            Creates the bitmap from the raw image specified.  The bounds should be set on this later.
            </summary>
            <param name="rawImage">
            The raw image.
            </param>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.#ctor(System.Drawing.Bitmap,DotSpatial.Data.Extent)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Data.InRamImageData"/> class.
            Uses a bitmap and a geographic envelope in order to define a new imageData object.
            </summary>
            <param name="rawImage">
            The raw image.
            </param>
            <param name="bounds">
            The envelope bounds.
            </param>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Data.InRamImageData"/> class.
            Constructs a new ImageData of the specified width and height.
            </summary>
            <param name="width">
            The integer width in pixels.
            </param>
            <param name="height">
            The integer height in pixels.
            </param>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.Close">
            <summary>
            Closes the image content.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.CopyBitmapToValues">
            <summary>
            Forces the image to read values from the graphic image format to the byte array format
            </summary>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.CopyValues(DotSpatial.Data.IImageData)">
            <summary>
            Copies the values from the specified source image.
            </summary>
            <param name="source">
            The source image to copy values from.
            </param>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.CopyValuesToBitmap">
            <summary>
            Forces the image to copy values from the byte array format to the image format.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.Create(System.String,System.Int32,System.Int32,DotSpatial.Data.ImageBandType)">
            <summary>
            Creates a new image and world file, placing the default bounds at the origin, with one pixel per unit.
            </summary>
            <param name="fileName">
            The string fileName
            </param>
            <param name="width">
            The integer width
            </param>
            <param name="height">
            The integer height
            </param>
            <param name="bandType">The ImageBandType that clarifies how the separate bands are layered in the image.</param>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.GetBitmap">
            <summary>
            Returns the internal bitmap in this case.  In other cases, this may have to be constructed
            from the unmanaged memory content.
            </summary>
            <returns>
            A Bitmap that represents the entire image.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.GetBitmap(DotSpatial.Data.Extent,System.Drawing.Rectangle)">
            <summary>
            The geographic envelope gives the region that the image should be created for.
            The window gives the corresponding pixel dimensions for the image, so that
            images matching the resolution of the screen can be used.
            </summary>
            <param name="envelope">
            The geographic extents to retrieve data for
            </param>
            <param name="window">
            The rectangle that defines the size of the drawing area in pixels
            </param>
            <returns>
            A bitmap captured from the main image
            </returns>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.Open">
            <summary>
            Opens the file, assuming that the fileName has already been specified using a Dot Net Image object
            </summary>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.Save">
            <summary>
            Saves the current image and world file.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.SaveAs(System.String)">
            <summary>
            Saves the image to the specified fileName
            </summary>
            <param name="fileName">
            The string fileName to save this as
            </param>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.SetBitmap(System.Drawing.Bitmap)">
            <summary>
            Sets the bitmap
            </summary>
            <param name="image">
            </param>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.Dispose(System.Boolean)">
            <summary>
            Release any unmanaged memory objects
            </summary>
            <param name="disposeManagedResources">
            The dispose Managed Resources.
            </param>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.MemorySetup">
            <summary>
            The memory setup.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.ReadBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a block of data directly, converted into a bitmap.
            </summary>
            <param name="xOffset">The zero based integer column offset from the left</param>
            <param name="yOffset">The zero based integer row offset from the top</param>
            <param name="xSize">The integer number of pixel columns in the block. </param>
            <param name="ySize">The integer number of pixel rows in the block.</param>
            <returns>A Bitmap that is xSize, ySize.</returns>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.OnBoundsChanged(DotSpatial.Data.IRasterBounds)">
            <summary>
            Extends the normal bounds changing behavior to also update the world file.
            </summary>
            <param name="bounds">Updates the world file.</param>
        </member>
        <member name="M:DotSpatial.Data.InRamImageData.WriteBlock(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Saves a bitmap of data as a continuous block into the specified location.
            </summary>
            <param name="value">The bitmap value to save.</param>
            <param name="xOffset">The zero based integer column offset from the left</param>
            <param name="yOffset">The zero based integer row offset from the top</param>
        </member>
        <member name="T:DotSpatial.Data.BitDepth">
            <summary>
            BitDepth
            </summary>
        </member>
        <member name="F:DotSpatial.Data.BitDepth.One">
            <summary>
            One bit per band pixel
            </summary>
        </member>
        <member name="F:DotSpatial.Data.BitDepth.Two">
            <summary>
            Two bits per band pixel
            </summary>
        </member>
        <member name="F:DotSpatial.Data.BitDepth.Four">
            <summary>
            Four bits per band pixel
            </summary>
        </member>
        <member name="F:DotSpatial.Data.BitDepth.Eight">
            <summary>
            Eight bits per band pixel (normal)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.BitDepth.Sixteen">
            <summary>
            Sixteen bits per band pixel
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ColorType">
            <summary>
            ColorType
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ColorType.Greyscale">
            <summary>
            Each pixel is a greyscale sample
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ColorType.Truecolor">
            <summary>
            Each pixel is an RGB triple
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ColorType.Indexed">
            <summary>
            Each pixel is a palette index
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ColorType.GreyscaleAlpha">
            <summary>
            Each pixel is a greyscale sample followed by an alpha sample
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ColorType.TruecolorAlpha">
            <summary>
            EAch pixel is an RGB triple followed by an alhpa sample
            </summary>
        </member>
        <member name="T:DotSpatial.Data.Crc32">
            <summary>
            CRC32
            </summary>
        </member>
        <member name="F:DotSpatial.Data.Crc32._table">
            <summary>
            A table of values
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Crc32.GetCrcOld(System.Byte[])">
            <summary>
            Calculates the CRC-32-IEEE 802.3 Checkzum for png according to:
            x^32 + x^26 + x^23 + x^22 + x^16 + + x^12 + x^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Crc32.ComputeChecksum(System.Byte[])">
            <summary>
            Computes the Checksum
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Crc32.ComputeChecksumBytes(System.Byte[])">
            <summary>
            Computes the checksum bytes
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Crc32.CreateTable2">
            <summary>
            Creates a table of checksum values
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Crc32.GetCrc2(System.Byte[])">
            <summary>
            Calculates the CRC-32-IEEE 802.3 Checkzum for png according to:
            x^32 + x^26 + x^23 + x^22 + x^16 + + x^12 + x^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1
            </summary>
            <param name="value"></param>
            <returns>A UInt32 value stored in a long because UINT32 is not CLS compliant</returns>
        </member>
        <member name="M:DotSpatial.Data.Crc32.UpdateCrc(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Updates the running CRC
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Crc32.CreateTable">
            <summary>
            Creates the table according to the png specification
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.Deflate">
            <summary>
            Deflated data content is widely understood by gzip utilities, but this system is specifically designed to work
            with png data format, and so will only work with code 8 compression strategy.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Deflate.Compress(System.Byte[])">
            <summary>
            Compress
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Deflate.Decompress(System.Byte[])">
            <summary>
            Decompress
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.InterlaceMethod">
            <summary>
            InterlaceMethods
            </summary>
        </member>
        <member name="F:DotSpatial.Data.InterlaceMethod.NoInterlacing">
            <summary>
            No interlacing
            </summary>
        </member>
        <member name="F:DotSpatial.Data.InterlaceMethod.Adam7">
            <summary>
            Adam7 interlacing
            </summary>
        </member>
        <member name="T:DotSpatial.Data.MwPng">
            <summary>
            mw.png provides read-write support for a png format that also can provide overviews etc.
            This cannot work with any possible png file, but rather provides at least one common
            format that can be used natively for large files that is better at compression than
            just storing the values directly.
            http://www.w3.org/TR/2003/REC-PNG-20031110/#11PLTE
            </summary>
        </member>
        <member name="M:DotSpatial.Data.MwPng.Write(System.Drawing.Bitmap,System.String)">
            <summary>
            For testing, see if we can write a png ourself that can be opened by .Net png.
            </summary>
            <param name="image">The image to write to png format</param>
            <param name="fileName">The string fileName</param>
        </member>
        <member name="M:DotSpatial.Data.MwPng.Read(System.String)">
            <summary>
            Reads a fileName into the specified bitmap.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
            <exception cref="T:DotSpatial.Data.PngInvalidSignatureException">If the file signature doesn't match the png file signature</exception>
        </member>
        <member name="M:DotSpatial.Data.MwPng.SignatureIsValid(System.Byte[])">
            <summary>
            </summary>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.MwPng.ToBytesAsUInt32(System.Int64)">
            <summary>
            Writes an  in Big-endian Uint format.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.MwPng.Filter(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Many rows may be evaluated by this process, but the first value in the array should
            be aligned with the left side of the image.
            </summary>
            <param name="refData">The original bytes to apply the PaethPredictor to.</param>
            <param name="offset">The integer offset in the array where the filter should begin application.  If this is 0, then
            it assumes that there is no previous scan-line to work with.</param>
            <param name="length">The number of bytes to filter, starting at the specified offset.  This should be evenly divisible by the width.</param>
            <param name="width">The integer width of a scan-line for grabbing the c and b bytes</param>
            <returns>The entire length of bytes starting with the specified offset</returns>
        </member>
        <member name="M:DotSpatial.Data.MwPng.UnFilter(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Unfilters the data in order to reconstruct the original values.
            </summary>
            <param name="filterStream">The filtered but decompressed bytes</param>
            <param name="offset">the integer offset where reconstruction should begin</param>
            <param name="length">The integer length of bytes to deconstruct</param>
            <param name="width">The integer width of a scan-line in bytes (not counting any filter type bytes.</param>
            <returns></returns>
            <exception cref="T:DotSpatial.Data.PngInsuficientLengthException"></exception>
        </member>
        <member name="M:DotSpatial.Data.MwPng.PaethPredictor(System.Byte,System.Byte,System.Byte)">
            <summary>
            B C   - For the current pixel X, use the best fit from B, C or A to predict X.
            A X
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.PngHeader">
            <summary>
            PngHeader
            </summary>
        </member>
        <member name="F:DotSpatial.Data.PngHeader.CompressionMethod">
            <summary>
            At this time, the only compression method recognized is 0 - deflate/inflate with a
            sliding window of at most 32768 bytes
            </summary>
        </member>
        <member name="F:DotSpatial.Data.PngHeader.FilterMethod">
            <summary>
            At this time, only filter method 0 is outlined in the international standards.
            (adaptive filtering with 5 basic filter types)
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PngHeader.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of PngHeader
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PngHeader.Write(System.IO.Stream)">
            <summary>
            Writes the byte-format of this png image header chunk to
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:DotSpatial.Data.PngHeader.ToBytes">
            <summary>
            Returns the image header in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.PngHeader.WriteAsUint32(System.Byte[],System.Int32,System.Int64)">
            <summary>
            Writes an integer in Big-endian Uint format.
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.PngHeader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes an integer in Big-endian Uint format.
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.PngHeader.FromBytes(System.IO.Stream)">
            <summary>
            Reads the important content from the stream of bytes
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:DotSpatial.Data.PngHeader.BitDepth">
            <summary>
            Gets or sets the bit depth.  Depending on the Color Type, not all are allowed:
            Greyscale - 1, 2, 4, 8, 16
            Truecolor - 8, 16
            Indexed - 1, 2, 4, 8
            Greyscale/alpha - 8, 16
            TrueColor/alpha - 8, 16
            </summary>
        </member>
        <member name="P:DotSpatial.Data.PngHeader.ColorType">
            <summary>
            Gets or sets the color type.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.PngHeader.Width">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="P:DotSpatial.Data.PngHeader.Height">
            <summary>
            Gets or sets the height
            </summary>
        </member>
        <member name="P:DotSpatial.Data.PngHeader.InterlaceMethod">
            <summary>
            Gets or sets the interlacing method used for this image.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.PngInsuficientLengthException">
            <summary>
            PngInsuficientLengthException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PngInsuficientLengthException.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of PngInsuficientLengthException
            </summary>
        </member>
        <member name="T:DotSpatial.Data.PngInvalidSignatureException">
            <summary>
            PngInvalidSignatureException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PngInvalidSignatureException.#ctor">
            <summary>
            Creates a new instance of PngInvalidSignatureException
            </summary>
        </member>
        <member name="T:DotSpatial.Data.PyramidByteMismatchException">
            <summary>
            PyramidByteMismatch
            </summary>
        </member>
        <member name="T:DotSpatial.Data.PyramidException">
            <summary>
            PyramidException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PyramidException.#ctor(System.String)">
            <summary>
            Creates a new instance of PyramidException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PyramidByteMismatchException.#ctor">
            <summary>
            Creates a new instance of PyramidByteMismatch
            </summary>
        </member>
        <member name="T:DotSpatial.Data.PyramidHeader">
            <summary>
            PyramidHeader
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PyramidHeader.HeaderSize">
            <summary>
            Calculates the header size for this
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.PyramidHeader.ImageHeaders">
            <summary>
            Gets or sets the array that encompasses all of the basic header content
            necessary for working with this image.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.PyramidImage">
            <summary>
            The Pyramid Image is designed with the expectation that the image will be too big to access all at once.
            It is stored with multiple resolutions in a "mwi or DotSpatial Image" format.  It is raw bytes in argb order.
            The header content is stored in xml format.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.#ctor">
            <summary>
            Creates a new instance of PyramidImage
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.#ctor(System.String)">
            <summary>
            Creates a new PyramidImage by reading in the header content for the specified fileName.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.#ctor(System.String,DotSpatial.Data.IRasterBounds)">
            <summary>
            Creates a new Pyramid image, and uses the raster bounds to specify the number or rows and columns.
            No data is written at this time.
            </summary>
            <param name="fileName"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.GetBitmap">
            <summary>
            For big images this won't work, but this gets the 0 scale original image as a bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.GetBitmap(DotSpatial.Data.Extent,System.Drawing.Rectangle)">
            <summary>
            For big images the scale that is just one step larger than the specified window will be used.
            </summary>
            <param name="envelope"></param>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.Open">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.CreateHeaders">
            <summary>
            Creates the headers using the existing RasterBounds for this image
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.CreateHeaders(DotSpatial.Data.RasterBounds)">
            <summary>
            This takes an original image and calculates the header content for all the lower resolution tiles.
            This does not actually write the bytes for those images.
            </summary>
            <param name="originalImage">The raster bounds for the original image.</param>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.CreateHeaders(System.Int32,System.Int32,System.Double[])">
            <summary>
            This takes an original image and calculates the header content for all the lower resolution tiles.
            This does not actually write the bytes for those images.
            </summary>
            <param name="numRows">The number of rows in the original image</param>
            <param name="numColumns">The number of columns in the original image</param>
            <param name="affineCoefficients">
            the array of doubles in ABCDEF order
            X' = A + Bx + Cy
            Y' = D + Ex + Fy
            </param>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.CreatePyramids2">
            <summary>
            This assumes that the base image has been written to the file.  This will now attempt to calculate
            the down-sampled images.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.CreatePyramids">
            <summary>
            This assumes that the base image has been written to the file.  This will now attempt to calculate
            the down-sampled images.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.DownSample(System.Byte[])">
            <summary>
            downsamples this row by selecting every other byte
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.Blur(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            This is normally weighted for calculations for the middle row.  If the top or bottom row
            is null, it will use mirror symetry by grabbing values from the other row instead.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <param name="r3"></param>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.ReadWindow(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This writes a window of byte values (ARGB order) to the file.  This assumes that the headers already exist.
            If the headers have not been created or the bounds extend beyond the header numRows and numColumns for the
            specified scale, this will throw an exception.
            </summary>
            <param name="startRow">The integer start row</param>
            <param name="startColumn">The integer start column</param>
            <param name="numRows">The integer number of rows in the window</param>
            <param name="numColumns">The integer number of columns in the window</param>
            <param name="scale">The integer scale.  0 is the original image.</param>
            <returns>The bytes created by this process</returns>
            <exception cref="T:DotSpatial.Data.PyramidUndefinedHeaderException">Occurs when attempting to write data before the headers are defined</exception>
            <exception cref="T:DotSpatial.Data.PyramidOutOfBoundsException">Occurs if the range specified is outside the bounds for the specified image scale</exception>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.WriteWindow(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This writes a window of byte values (ARGB order) to the file.  This assumes that the headers already exist.
            If the headers have not been created or the bounds extend beyond the header numRows and numColumns for the
            specified scale, this will throw an exception.
            </summary>
            <param name="bytes">The byte array</param>
            <param name="startRow">The integer start row</param>
            <param name="startColumn">The integer start column</param>
            <param name="numRows">The integer number of rows in the window</param>
            <param name="numColumns">The integer number of columns in the window</param>
            <param name="scale">The integer scale. 0 is the original image.</param>
            <exception cref="T:DotSpatial.Data.PyramidUndefinedHeaderException">Occurs when attempting to write data before the headers are defined</exception>
            <exception cref="T:DotSpatial.Data.PyramidOutOfBoundsException">Occurs if the range specified is outside the bounds for the specified image scale</exception>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.WriteWindow(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,DotSpatial.Data.ProgressMeter)">
            <summary>
            This writes a window of byte values (ARGB order) to the file.  This assumes that the headers already exist.
            If the headers have not been created or the bounds extend beyond the header numRows and numColumns for the
            specified scale, this will throw an exception.
            </summary>
            <param name="bytes">The byte array</param>
            <param name="startRow">The integer start row</param>
            <param name="startColumn">The integer start column</param>
            <param name="numRows">The integer number of rows in the window</param>
            <param name="numColumns">The integer number of columns in the window</param>
            <param name="scale">The integer scale. 0 is the original image.</param>
            <param name="pm">The progress meter to advance by row.  Calls Next() for each row.</param>
            <exception cref="T:DotSpatial.Data.PyramidUndefinedHeaderException">Occurs when attempting to write data before the headers are defined</exception>
            <exception cref="T:DotSpatial.Data.PyramidOutOfBoundsException">Occurs if the range specified is outside the bounds for the specified image scale</exception>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.ReadHeader(System.String)">
            <summary>
            Reads the header only from the specified mwi file.  The header is in xml format.
            This is a test.  We may have to jurry rig the thing to ensure it ignores the actual
            image content.
            </summary>
            <param name="fileName">Whether this is the mwi or mwh file, this reads the mwh file for the fileName.</param>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.WriteHeader(System.String)">
            <summary>
            Writes the header to the specified fileName.
            </summary>
            <param name="fileName">The string fileName to write the header to.</param>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.ReadBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a block of data directly, converted into a bitmap.  This is a general
            implementation, so assumes you are reading and writing to the 0 scale.
            This is always in ARGB format.
            </summary>
            <param name="xOffset">The zero based integer column offset from the left</param>
            <param name="yOffset">The zero based integer row offset from the top</param>
            <param name="xSize">The integer number of pixel columns in the block. </param>
            <param name="ySize">The integer number of pixel rows in the block.</param>
            <returns>A Bitmap that is xSize, ySize.</returns>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.WriteBlock(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Saves a bitmap of data as a continuous block into the specified location.  This
            is a general implementation, so assumes you are reading and writing to the 0 scale.
            This should be in ARGB pixel format or it will fail.
            </summary>
            <param name="value">The bitmap value to save.</param>
            <param name="xOffset">The zero based integer column offset from the left</param>
            <param name="yOffset">The zero based integer row offset from the top</param>
        </member>
        <member name="M:DotSpatial.Data.PyramidImage.UpdateOverviews">
            <summary>
            Updates overviews.  In the case of a Pyramid image, this recalculates the values.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.PyramidImage.Header">
            <summary>
            Gets or sets the pyramid image header
            </summary>
        </member>
        <member name="T:DotSpatial.Data.PyramidImageHeader">
            <summary>
            PyramidImageHeader
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PyramidImageHeader.SetAffine(System.Double[],System.Int32)">
            <summary>
            Scale is an integer value that starts at 0 for the original image and represents the number of
            times the number of columns and number of rows are divided by 2.
            </summary>
            <param name="affine">The affine array of the original, unmodified image</param>
            <param name="scale">The integer scale starting at 0 for the original image, and increasing by one for each down-sampling</param>
        </member>
        <member name="M:DotSpatial.Data.PyramidImageHeader.SetNumRows(System.Int32,System.Int32)">
            <summary>
            Sets the number of rows based on the integer scale
            </summary>
            <param name="originalNumRows"></param>
            <param name="scale">integer starts at 0 for the original image</param>
        </member>
        <member name="M:DotSpatial.Data.PyramidImageHeader.SetNumColumns(System.Int32,System.Int32)">
            <summary>
            Sets the number of columns based on the integer scale
            </summary>
            <param name="originalNumColumns"></param>
            <param name="scale">integer starts at 0 for the original image</param>
        </member>
        <member name="P:DotSpatial.Data.PyramidImageHeader.Offset">
            <summary>
            Offsets
            </summary>
        </member>
        <member name="P:DotSpatial.Data.PyramidImageHeader.NumRows">
            <summary>
            Integer number of rows
            </summary>
        </member>
        <member name="P:DotSpatial.Data.PyramidImageHeader.NumColumns">
            <summary>
            Integer number of columns
            </summary>
        </member>
        <member name="P:DotSpatial.Data.PyramidImageHeader.Affine">
            <summary>
            Gets or sets the affine coefficients for this image in ABCDEF order
            X' = A + BX + CY
            Y' = D + EX + FY
            </summary>
        </member>
        <member name="T:DotSpatial.Data.PyramidOutOfBoundsException">
            <summary>
            PyramidOutOfBoundsException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PyramidOutOfBoundsException.#ctor">
            <summary>
            Creates a new instance of PyramidOutOfBoundsException
            </summary>
        </member>
        <member name="T:DotSpatial.Data.PyramidUndefinedHeaderException">
            <summary>
            PyramidUndefinedHeader
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PyramidUndefinedHeaderException.#ctor">
            <summary>
            Creates a new instance of PyramidUndefinedHeader
            </summary>
        </member>
        <member name="T:DotSpatial.Data.TileCollection">
            <summary>
            TileCollection
            </summary>
        </member>
        <member name="M:DotSpatial.Data.TileCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TileCollection.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of TileCollection
            </summary>
        </member>
        <member name="M:DotSpatial.Data.TileCollection.SetTileBounds(System.Double[])">
            <summary>
            Calls a method that calculates the propper image bounds for each of the extents of the tiles,
            given the affine coefficients for the whole image.
            </summary>
            <param name="affine"> x' = A + Bx + Cy; y' = D + Ex + Fy</param>
        </member>
        <member name="M:DotSpatial.Data.TileCollection.GetTileWidth(System.Int32)">
            <summary>
            Gets the width of the tile
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.TileCollection.GetTileHeight(System.Int32)">
            <summary>
            Gets the height of the tile
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.TileCollection.NumTilesWide">
            <summary>
            Gets the number of tiles in the X direction
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.TileCollection.NumTilesTall">
            <summary>
            Gets the integer number of tiles in the Y direction
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.TileCollection.Height">
            <summary>
            Gets or sets the integer height in pixels for the combined image at its maximum resolution
            </summary>
        </member>
        <member name="P:DotSpatial.Data.TileCollection.Width">
            <summary>
            Gets or sets the integer pixel width for the combined image at its maximum resolution.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.TileCollection.Tiles">
            <summary>
            Gets or sets the 2D array of tiles
            </summary>
        </member>
        <member name="P:DotSpatial.Data.TileCollection.TileWidth">
            <summary>
            The width of the standard sized tile (not counting the remainder)
            </summary>
        </member>
        <member name="P:DotSpatial.Data.TileCollection.TileHeight">
            <summary>
            The height of the standard sized tile, not counting the remainder.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.TileCollection.NumTiles">
            <summary>
            The total number of tiles
            </summary>
        </member>
        <member name="T:DotSpatial.Data.TileCollection.TileCollectionEnumerator">
            <summary>
            Enumerates the collection of tiles
            </summary>
        </member>
        <member name="M:DotSpatial.Data.TileCollection.TileCollectionEnumerator.#ctor(DotSpatial.Data.TileCollection)">
            <summary>
            Creates a new instance of hte TileCollectionEnumerator
            </summary>
            <param name="parent">The parent tileCollection</param>
        </member>
        <member name="M:DotSpatial.Data.TileCollection.TileCollectionEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TileCollection.TileCollectionEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TileCollection.TileCollectionEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.TileCollection.TileCollectionEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Data.TiledImage">
            <summary>
            TiledImage is a special kind of image coverage where the images specifically form tiles that
            are adjacent and perfectly aligned to represent a larger image.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.TiledImage.#ctor(System.String)">
            <summary>
            Creates a new instance of the TiledImage where the fileName is specified.
            This doesn't actually open the file until the Open method is called.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DotSpatial.Data.TiledImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of TiledImage
            </summary>
        </member>
        <member name="M:DotSpatial.Data.TiledImage.Open">
            <summary>
            This should be overridden with custom file handling
            </summary>
        </member>
        <member name="M:DotSpatial.Data.TiledImage.GetBitmap(DotSpatial.Data.Extent,System.Drawing.Size)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TiledImage.Close">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TiledImage.Init(System.Int32,System.Int32)">
            <summary>
            Even if this TiledImage has already been constructed, we can initialize the tile collection later.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:DotSpatial.Data.TiledImage.SetTileBounds(System.Double[])">
            <summary>
            Calls a method that calculates the proper image bounds for each of the extents of the tiles,
            given the affine coefficients for the whole image.
            </summary>
            <param name="affine"> x' = A + Bx + Cy; y' = D + Ex + Fy</param>
        </member>
        <member name="M:DotSpatial.Data.TiledImage.CopyValues(DotSpatial.Data.IImageData)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TiledImage.GetBitmap">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TiledImage.GetBitmap(DotSpatial.Data.Extent,System.Drawing.Rectangle)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TiledImage.GetColor(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TiledImage.CopyBitmapToValues">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TiledImage.Save">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TiledImage.SaveAs(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TiledImage.SetColor(System.Int32,System.Int32,System.Drawing.Color)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TiledImage.CopyValuesToBitmap">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TiledImage.SetBitmap(System.Drawing.Bitmap)">
            <summary>
            Not Implemented
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:DotSpatial.Data.TiledImage.GetColorPalette">
            <summary>
            Not Implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.TiledImage.SetColorPalette(System.Collections.Generic.IEnumerable{System.Drawing.Color})">
            <summary>
            Not Implemented
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.TiledImage.ReadBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="xOffset"></param>
            <param name="yOffset"></param>
            <param name="xSize"></param>
            <param name="ySize"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.TiledImage.WriteBlock(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Not Implemented
            </summary>
            <param name="value"></param>
            <param name="xOffset"></param>
            <param name="yOffset"></param>
        </member>
        <member name="M:DotSpatial.Data.TiledImage.UpdateOverviews">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:DotSpatial.Data.TiledImage.GetImages">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.TiledImage.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.TiledImage.Tiles">
            <summary>
            Gets or sets the array of tiles used for this
            </summary>
        </member>
        <member name="P:DotSpatial.Data.TiledImage.TileCollection">
             <summary>
            
             </summary>
        </member>
        <member name="P:DotSpatial.Data.TiledImage.Filename">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.TiledImage.Height">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.TiledImage.Stride">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.TiledImage.Width">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.TiledImage.NumBands">
            <summary>
            Gets or sets the number of bands
            </summary>
        </member>
        <member name="P:DotSpatial.Data.TiledImage.BytesPerPixel">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.TiledImage.Values">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.TiledImage.BandType">
            <summary>
            Not Implemented
            </summary>
        </member>
        <member name="P:DotSpatial.Data.TiledImage.TileWidth">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.TiledImage.TileHeight">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.TiledImage.Count">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.TiledImage.Extent">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.TiledImage.WorldFile">
            <summary>
            Gets or sets the WorldFile for this set of tiles.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.WorldFile">
            <summary>
            WorldFiles complement images, giving georeference information for those images.  The basic idea is to calculate
            everything based on the top left corner of the image.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.WorldFile.#ctor">
            <summary>
            Creates a new instance of WorldFile
            </summary>
        </member>
        <member name="M:DotSpatial.Data.WorldFile.#ctor(System.String)">
            <summary>
            Automatically creates a new worldfile based on the specified image fileName.
            </summary>
            <param name="imageFilename">Attempts to open the fileName for the world file for the image if it exists.</param>
        </member>
        <member name="M:DotSpatial.Data.WorldFile.GetExtension(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Returns the string extensions that accompanies one of the dot net image formats.
            </summary>
            <param name="format">The Imaging.ImageFormat for the image itself</param>
            <returns>The string extension</returns>
        </member>
        <member name="M:DotSpatial.Data.WorldFile.GenerateFilename(System.String)">
            <summary>
            Given the fileName of an image, this creates a new fileName with the appropriate extension.
            This will also set the fileName of this world file to that extension.
            </summary>
            <param name="imageFilename">The fileName of the image</param>
            <returns>the fileName of the world file</returns>
        </member>
        <member name="M:DotSpatial.Data.WorldFile.Open">
            <summary>
            Opens the worldfile specified by the Filename property and loads the values
            </summary>
        </member>
        <member name="M:DotSpatial.Data.WorldFile.Open(System.String)">
            <summary>
            Opens an existing worldfile based on the specified fileName
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DotSpatial.Data.WorldFile.Save">
            <summary>
            Saves the current affine coordinates to the current fileName
            </summary>
        </member>
        <member name="M:DotSpatial.Data.WorldFile.SaveAs(System.String)">
            <summary>
            Saves the current coordinates to a file
            </summary>
            <param name="fileName">Gets or sets the fileName to use for an image</param>
        </member>
        <member name="M:DotSpatial.Data.WorldFile.ToMatrix">
            <summary>
            Creates a Matrix that is in float coordinates that represents this world file
            </summary>
            <returns>A Matrix that transforms an image to the geographic coordinates</returns>
        </member>
        <member name="P:DotSpatial.Data.WorldFile.Affine">
            <summary>
            gets the coordinates in the Affine order:
            X' = [0] + [1] X + [2] Y
            Y' = [3] + [4] X + [5] Y
            </summary>
        </member>
        <member name="P:DotSpatial.Data.WorldFile.Filename">
            <summary>
            Gets or sets the fileName to use for this world file.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.WorldFile.CellHeight">
            <summary>
            Gets or sets the cellHeight
            </summary>
        </member>
        <member name="P:DotSpatial.Data.WorldFile.CellWidth">
            <summary>
            Gets or sets the cellWidth
            </summary>
        </member>
        <member name="P:DotSpatial.Data.WorldFile.TopLeftX">
            <summary>
            Gets or sets longitude or X position corresponding to the center of the cell in the top left corner of the image
            </summary>
        </member>
        <member name="P:DotSpatial.Data.WorldFile.TopLeftY">
            <summary>
            Gets or sets the latitude or Y position corresponding to the center of the cell in the top left corner of the image
            </summary>
        </member>
        <member name="P:DotSpatial.Data.WorldFile.HorizontalSkew">
            <summary>
            Gets or sets how much the longitude or X position of a cell in the image depends on the row position of the cell.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.WorldFile.VerticalSkew">
            <summary>
            Gets or sets how much the latitude or Y position of a cell in the image depends on the column position of the cell.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.WorldFile.DialogFilter">
            <summary>
            Gets a string list of file extensions that might apply to world files.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaCoordinate">
            <summary>
            Coordinate
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaCoordinate.X">
            <summary>
            Coordinate x-value
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaCoordinate.Y">
            <summary>
            coordinate y-value
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaDatum">
            <summary>
            Datum
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaDatum.#ctor">
            <summary>
            Creates a new instance of Datum
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaDatum.Name">
            <summary>
            Gets or sets the name of the datum
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaDatum.Type">
            <summary>
            Gets or sets the datum type
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaDatum.Params">
            <summary>
            Gets or sets the parameters for the Parametric datum type
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaDatum.GridName">
            <summary>
            Gets or sets the string name of the grid file
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaDatumType">
            <summary>
            HfaDatumType
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaDatumType.Parametric">
            <summary>
            The datum info is 7 doubles
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaDatumType.Grid">
            <summary>
            The datum info is a name
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaDatumType.Regression">
             <summary>
            
             </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaDatumType.None">
            <summary>
            No Datum info
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaEPRJ">
            <summary>
            ERDAS Projection Codes
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaEPT">
            <summary>
            EPT ERDAS DATA TYPES
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaEPT.U1">
            <summary>
            Unsigned 1 bit
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaEPT.U2">
            <summary>
            Unsigned 2 bit
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaEPT.U4">
            <summary>
            Unsigned 4 bit
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaEPT.U8">
            <summary>
            Unsigned 8 bit
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaEPT.S8">
            <summary>
            Signed 8 bit
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaEPT.U16">
            <summary>
            Unsigned 16 bit
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaEPT.S16">
            <summary>
            Signed 16 bit
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaEPT.U32">
            <summary>
            Unsigned 32 bit
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaEPT.S32">
            <summary>
            Signed 32 bit
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaEPT.Single">
            <summary>
            Single precisions 32 bit floating point
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaEPT.Double">
            <summary>
            Double precision 64 bit floating point
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaEPT.Char64">
            <summary>
            64 bit character?
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaEPT.Char128">
            <summary>
            128 bit character?
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaExt">
            <summary>
            Extension Methods useful for the DotSpatial.Data.Img content
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaExt.ExtractTo(System.String,System.Int32@,System.String)">
            <summary>
            A common task seems to be parsing the text up to a certain delimiter
            starting from a certain index, and then advancing the string pointer.
            This advances the index, extracting the string up to the point of the
            specified delimeter, or the end of the string, and advancing the string
            past the delimeter itself.  If the index is equal to the length,
            then you are at the end of the string.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaExt.ExtractInteger(System.String)">
            <summary>
            Given a string, this reads digits into a numeric value.
            </summary>
            <param name="input">The string to read the integer from</param>
            <returns>An integer read from the string</returns>
        </member>
        <member name="M:DotSpatial.Data.HfaExt.ExtractTo(System.String,System.String,System.String@)">
            <summary>
            This variant of the ExtractTo algorithm effectively splits the string into teh content
            before the delimeter and after the delimeter, not counting the delimeter.
            </summary>
            <param name="input">The string input</param>
            <param name="delimeter">The string delimeter</param>
            <param name="remainder">the string remainder</param>
        </member>
        <member name="M:DotSpatial.Data.HfaExt.SkipTo(System.String,System.String)">
            <summary>
            This method returns a substring based on the next occurance of the
            specified delimeter.
            </summary>
            <param name="input">The string input</param>
            <param name="delimeter">The delimeter</param>
        </member>
        <member name="T:DotSpatial.Data.Hfa">
            <summary>
            Hfa
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Hfa.GetBitCount(DotSpatial.Data.HfaEPT)">
            <summary>
            Gets the bitcount of a single member of the specified data type.
            </summary>
            <param name="dataType">The data type to get the byte count of</param>
            <returns>An integer that represents the bit count of the specified type</returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.LittleEndian(System.Byte[])">
            <summary>
            Reverses the byte order on Big-Endian systems like Unix to conform with the
            HFA standard of little endian.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.ReadType(System.Byte[],System.Int64)">
            <summary>
            Return ReadType
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.ReadInt16(System.Byte[],System.Int64)">
            <summary>
            Given the byte array, this reads four bytes and converts this to a 32 bit integer.
            This always uses little endian byte order.
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.ReadUInt16(System.Byte[],System.Int64)">
            <summary>
            Given the byte array, this reads four bytes and converts this to a 16 bit unsigned short integer.
            This always uses little endian byte order.
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.ReadInt32(System.Byte[],System.Int64)">
            <summary>
            Given the byte array, this reads four bytes and converts this to a 32 bit integer.
            This always uses little endian byte order.
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.ReadSingle(System.Byte[],System.Int64)">
            <summary>
            Given the byte array, this reads four bytes and converts this to a 32 bit floating point value
            This always uses little endian byte order.
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.ReadDouble(System.Byte[],System.Int64)">
            <summary>
            Given the byte array, this reads four bytes and converts this to a 64 bit floating point value
            This always uses little endian byte order.
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.ReadUInt32(System.Byte[],System.Int64)">
            <summary>
            Given the byte array, this reads four bytes and converts this to a 32 bit unsigned integer.
            This always uses little endian byte order.
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <returns>A UInt32 value stored in a long because UInt32 is not CLS Compliant</returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.LittleEndianAsUint32(System.Int64)">
            <summary>
            Obtains the 4 byte equivalent for 32 bit Unsigned Integer values
            </summary>
            <param name="value">The unsigned integer value to convert into bytes</param>
            <returns>The bytes in LittleEndian standard, regardless of the system architecture</returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.LittleEndian(System.Int32)">
            <summary>
            Obtains the 4 byte equivalent for 32 bit Integer values
            </summary>
            <param name="value">The unsigned integer value to convert into bytes</param>
            <returns>The bytes in LittleEndian standard, regardless of the system architecture</returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.LittleEndian(System.Single)">
            <summary>
            Obtains the 4 byte equivalent for 32bit floating point values
            </summary>
            <param name="value">The unsigned integer value to convert into bytes</param>
            <returns>The bytes in LittleEndian standard, regardless of the system architecture</returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.LittleEndian(System.Double)">
            <summary>
            Obtains the 8 byte equivalent for 64 bit floating point values
            </summary>
            <param name="value">The unsigned integer value to convert into bytes</param>
            <returns>The bytes in LittleEndian standard, regardless of the system architecture</returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.LittleEndianAsUShort(System.Int32)">
            <summary>
            Gets the 2 byte equivalent of an unsigned short in little endian format
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Hfa.LittleEndian(System.Int16)">
            <summary>
            Gets the 2 byte equivalent of a short in little endian format
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.HfaAccess">
            <summary>
            HfaAccess
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaAccess.ReadOnly">
            <summary>
            Read Only with no update access
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaAccess.Update">
            <summary>
            Read/Write access
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaCompress">
            <summary>
            HfaCompress - Development on hold, commented out to reduce warnings
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaDictionary">
            <summary>
            HfaDictionary
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaDictionary.#ctor(System.String)">
            <summary>
            Creates a new instance of HfaDictionary
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaDictionary.AddType(DotSpatial.Data.HfaType)">
            <summary>
            Adds the type using the TypeName as the key
            </summary>
            <param name="type">The type to add</param>
        </member>
        <member name="M:DotSpatial.Data.HfaDictionary.Dump(System.IO.Stream)">
            <summary>
            Writes all the elements from this dictionary to the specified stream.
            </summary>
            <param name="fp"></param>
        </member>
        <member name="M:DotSpatial.Data.HfaDictionary.GetItemSize(System.Char)">
            <summary>
            Given a character type, this calculates a size.  This was originally
            on the Dictionary, but I moved this to the HfaInfo instead.
            </summary>
            <param name="charType"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.HfaEntry">
            <summary>
            HfaEntry
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaEntry.#ctor(DotSpatial.Data.HfaInfo,System.Int64,DotSpatial.Data.HfaEntry,DotSpatial.Data.HfaEntry)">
            <summary>
            Creates a new instance of HfaEntry from the file
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaEntry.#ctor(DotSpatial.Data.HfaInfo,System.String,System.String,DotSpatial.Data.HfaEntry)">
            <summary>
            Create a new instance of the entry with the intention that it would
            be written to disk later
            </summary>
            <param name="hfaIn"></param>
            <param name="name"></param>
            <param name="typename"></param>
            <param name="parent"></param>
        </member>
        <member name="M:DotSpatial.Data.HfaEntry.#ctor">
            <summary>
            Creates a new instance of HfaEntry
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaEntry.LoadData">
            <summary>
            Loads the data bytes for this element from the file
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaEntry.GetFirstChildName(System.String)">
            <summary>
            Parses a name which may have an unwanted : or multiple sub-tree
            names separated with periods.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.HfaEntry.GetSubtreeName(System.String)">
            <summary>
            If this is null, then there is no further subtree
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.HfaEntry.GetNamedChild(System.String)">
            <summary>
            This parses a complete "path" separated by periods in order
            to search for a specific child node.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.HfaEntry.GetFirstChild">
            <summary>
            Gets or sets the HfaEntry that is the child
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.IsDirty">
            <summary>
            Gets or sets a boolean indicating if this is changed
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.FilePos">
            <summary>
            Gets or sets the long integer file position
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.Hfa">
            <summary>
            Gets or sets the HFA Info
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.Parent">
            <summary>
            Gets or sets the hfa parent
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.Prev">
            <summary>
            Gets or sets the previous entry
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.NextPos">
            <summary>
            Gets or sets the long integer position of the next entry in the file
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.Next">
            <summary>
            Gets or sets the HfaEntry that is the next entry
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.ChildPos">
            <summary>
            Gets or sets the long position of the child
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.Name">
            <summary>
            Gets or sets the 64 character name of the entry
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.TypeName">
            <summary>
            gets or sets the 32 character typestring
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.Type">
            <summary>
            Gets or sets the type for this entry
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.DataPos">
            <summary>
            The GUInt32 Data Position of this entry
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.DataSize">
            <summary>
            The GUInt32 Data Size of this entry
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.Data">
            <summary>
            Gets the data for this entry
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.Children">
            <summary>
            Gets or sets the collection of all the children.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaEntry.Child">
            <summary>
            Gets or sets the first child belonging to this entry.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaEnumerationNotFoundException">
            <summary>
            HfaEnumerationNotFoundException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaEnumerationNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of HfaEnumerationNotFoundException
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaField">
            <summary>
            HfaField
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaField.CompleteDefn(DotSpatial.Data.HfaDictionary)">
             <summary>
            
             </summary>
             <param name="dict"></param>
        </member>
        <member name="M:DotSpatial.Data.HfaField.Dump(System.IO.Stream)">
            <summary>
            This writes formatted content for this field to the specified IO stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:DotSpatial.Data.HfaField.DumpInstValue(System.IO.Stream,System.Byte[],System.Int64,System.Int32,System.String)">
             <summary>
            
             </summary>
             <param name="fpOut"></param>
             <param name="data"></param>
             <param name="dataOffset"></param>
             <param name="dataSize"></param>
             <param name="prefix"></param>
        </member>
        <member name="M:DotSpatial.Data.HfaField.SetInstValue(System.String,System.Int32,System.Byte[],System.Int64,System.Int32,System.Char,System.Object)">
            <summary>
            SetInstValue
            </summary>
            <param name="sField"></param>
            <param name="indexValue"></param>
            <param name="data"></param>
            <param name="dataOffset"></param>
            <param name="dataSize"></param>
            <param name="reqType"></param>
            <param name="value"></param>
            <exception cref="T:DotSpatial.Data.HfaPointerInsertNotSupportedException">Attempting to insert a pointer is not supported.</exception>
            <exception cref="T:DotSpatial.Data.HfaEnumerationNotFoundException">Occurs if the specified value is not a valid member of the enumeration for this field.</exception>
        </member>
        <member name="M:DotSpatial.Data.HfaField.GetInstBytes(System.Byte[],System.Int64)">
            <summary>
            Scans through the array and estimates the byte size of the field in this case.
            </summary>
            <param name="data"></param>
            <param name="dataOffset"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.HfaField.GetInstCount(System.Byte[],System.Int64)">
            <summary>
            Gets the count for a particular instance of a field.  This will normally be
            the built in value, but for variable fields, this is extracted from the
            data itself.
            </summary>
            <param name="data"></param>
            <param name="dataOffset"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.HfaField.ExtractInstValue(System.String,System.Int32,System.Byte[],System.Int64,System.Int32,System.Char,System.Object@,System.Int32@)">
             <summary>
            
             </summary>
             <param name="pszField"></param>
             <param name="nIndexValue"></param>
             <param name="data"></param>
             <param name="dataOffset"></param>
             <param name="nDataSize"></param>
             <param name="reqType"></param>
             <param name="pReqReturn"></param>
             <param name="extraOffset">This is used in the case of 'object' pointers where the indexed object is further in the data block.</param>
             <returns></returns>
             <exception cref="T:DotSpatial.Data.HfaInvalidCountException">Occurs if the count is less than zero for the header of a block of base data</exception>
        </member>
        <member name="M:DotSpatial.Data.HfaField.Initialize(System.String)">
            <summary>
            Parses the input string into a valid HfaField, or returns null
            if one could not be created.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.HfaField.NumBytes">
            <summary>
            Gets or sets the short integer number of bytes
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaField.ItemCount">
            <summary>
            Gets or sets the short integer item count
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaField.Pointer">
            <summary>
            Gets or sets '\0', '*' or 'p'
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaField.ItemType">
            <summary>
            Gets or sets 1|2|4|e|...
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaField.ItemObjectTypeString">
            <summary>
            If ItemType == 'o'
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaField.ItemObjectType">
            <summary>
            Gets or sets the item object type
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaField.EnumNames">
            <summary>
            Normally null unless this is an enum
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaField.FieldName">
            <summary>
            Gets or sets the field name
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaInfo">
            <summary>
            HfaInfo
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaInfo.#ctor">
            <summary>
            Creates a new instance of HfaInfo
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaInfo.Access">
            <summary>
            Gets or sets the access type
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaInfo.Dictionary">
            <summary>
            Gets or sets a dictionary for looking up types based on string type names.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaInfo.Path">
            <summary>
            The directory path
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaInfo.Filename">
            <summary>
            The string fileName sans path
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaInfo.IgeFilename">
            <summary>
            sans path
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaInfo.EndOfFile">
            <summary>
            End of file
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaInfo.RootPos">
            <summary>
            Root position
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaInfo.DictionaryPos">
             <summary>
            
             </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaInfo.EntryHeaderLength">
            <summary>
            The entry header length
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaInfo.Version">
            <summary>
            The integer version
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaInfo.TreeDirty">
            <summary>
            Boolean, true if the tree has changed
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaInfo.Fp">
            <summary>
            The file stream
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaInvalidCountException">
            <summary>
            HfaInvalidCountException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaInvalidCountException.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of HfaInvalidCountException
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaNotCompressedException">
            <summary>
            HfaNotCompressedException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaNotCompressedException.#ctor">
            <summary>
            Creates a new instance of HfaNotCompressedException
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaPointerInsertNotSupportedException">
            <summary>
            HfaPointerInsertNotSupportedException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaPointerInsertNotSupportedException.#ctor">
            <summary>
            Creates a new instance of HfaPointerInsertNotSupportedException
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaType">
            <summary>
            HfaType
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaType.CompleteDefn(DotSpatial.Data.HfaDictionary)">
            <summary>
            Completes the defenition of this type based on the existing dictionary
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:DotSpatial.Data.HfaType.Dump(System.IO.Stream)">
            <summary>
            This function writes content to the file for this entire type by writing
            the type name and number of bytes, followed by cycling through and writing each
            of the fields.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:DotSpatial.Data.HfaType.DumpInstValue(System.IO.Stream,System.Byte[],System.Int64,System.Int32,System.String)">
            <summary>
            Triggers a dump on all the fields of this type.
            </summary>
            <param name="fpOut"></param>
            <param name="data"></param>
            <param name="dataOffset"></param>
            <param name="dataSize"></param>
            <param name="pszPrefix"></param>
        </member>
        <member name="M:DotSpatial.Data.HfaType.ExtractInstValue(System.String,System.Byte[],System.Int64,System.Int32,System.Char,System.Object@)">
            <summary>
            Extracts the value form the byte array
            </summary>
            <param name="fieldPath"></param>
            <param name="data"></param>
            <param name="dataOffset"></param>
            <param name="dataSize"></param>
            <param name="reqType"></param>
            <param name="reqReturn"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.HfaType.GetInstBytes(System.Byte[],System.Int64)">
            <summary>
            Gets the number of bytes for this type by adding up the byte contribution from each of its fields.
            </summary>
            <param name="data">The array of bytes to scan.</param>
            <param name="dataOffset">The integer index in the array where scanning should begin.</param>
            <returns>The integer count.</returns>
        </member>
        <member name="M:DotSpatial.Data.HfaType.GetInstCount(System.String,System.Byte[],System.Int64,System.Int32)">
            <summary>
            Attempts to find the specified field in the field path and extracts the size of the specified field in bytes
            </summary>
            <param name="fieldPath"></param>
            <param name="data"></param>
            <param name="dataOffset"></param>
            <param name="dataSize"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.HfaType.Intialize(System.String)">
            <summary>
            Originally Initialize
            </summary>
            <param name="input">The input string that contains content for this type</param>
            <returns>The remaining string content, unless this fails in which case this may return null</returns>
        </member>
        <member name="M:DotSpatial.Data.HfaType.SetInstValue(System.String,System.Byte[],System.Int64,System.Int32,System.Char,System.Object)">
             <summary>
            
             </summary>
             <param name="fieldPath"></param>
             <param name="data"></param>
             <param name="dataOffset"></param>
             <param name="dataSize"></param>
             <param name="reqType"></param>
             <param name="value"></param>
        </member>
        <member name="P:DotSpatial.Data.HfaType.NumBytes">
            <summary>
            The short integer number of bytes
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaType.FieldCount">
            <summary>
            The short integer number of fields
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaType.TypeName">
            <summary>
            The type name
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaType.Fields">
            <summary>
            Gets or sets the list of fields
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaFieldTypeException">
            <summary>
            HfaTypeException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaFieldTypeException.#ctor(System.Char)">
            <summary>
            Creates a new instance of HfaTypeException
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaMapInfo">
            <summary>
            MapInfo
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaMapInfo.LowerRightCenter">
            <summary>
            Gets or sets the map coordinats of the center of the lower right pixel
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaMapInfo.PixelSize">
            <summary>
            Gets or sets the size of a single pixel in map units
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaMapInfo.ProName">
            <summary>
            Gets or sets the string Projection Name
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaMapInfo.Units">
            <summary>
            Gets or sets the map units
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaMapInfo.UpperLeftCenter">
            <summary>
            Gets or sets the map coordinates of center of upper left pixel
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaNAD">
            <summary>
            NAD
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaNAD.NAD27">
            <summary>
            Use the North American Datum 1927
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaNAD.NAD83">
            <summary>
            Use the North American Datum 1983
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaNAD.HARN">
            <summary>
            Use the North America Datum High Accuracy Reference Network
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaProParameters">
            <summary>
            ProParameters
            </summary>
        </member>
        <member name="M:DotSpatial.Data.HfaProParameters.#ctor">
            <summary>
            Creates a new instance of the ProParameters class
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaProParameters.ProExeName">
            <summary>
            Gets or sets the string exectable name for external projectiosn
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaProParameters.ProName">
            <summary>
            Gets or sets the string projection name
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaProParameters.ProNumber">
            <summary>
            Gets or sets the projection number for internal projections
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaProParameters.ProParams">
            <summary>
            Projection parameters array in the GCTP form
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaProParameters.ProType">
            <summary>
            Gets or sets the projection type
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaProParameters.ProZone">
            <summary>
            Gets or sets the projection zone (UTM, SP only)
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaProParameters.ProSpheroid">
            <summary>
            The projection spheroid
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaProType">
            <summary>
            ProType
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaProType.Internal">
            <summary>
            Indicates that hte projection is built into the eprj package as function calls
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaProType.External">
            <summary>
            Indicates that hte projection is accessible as an exteranl executable
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaSize">
            <summary>
            Size
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaSize.Height">
            <summary>
            pixelsize height
            </summary>
        </member>
        <member name="F:DotSpatial.Data.HfaSize.Width">
            <summary>
            pixelsize width
            </summary>
        </member>
        <member name="T:DotSpatial.Data.HfaSpheroid">
            <summary>
            Spheroid
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaSpheroid.A">
            <summary>
            Gets or sets the semi-major axis of the ellipsoid
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaSpheroid.B">
            <summary>
            Gets or sets the semi-minor axis of the ellipsoid
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaSpheroid.ESquared">
            <summary>
            Gets or sets the eccentricity squared
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaSpheroid.Radius">
            <summary>
            Gets or sets the radius of the sphere
            </summary>
        </member>
        <member name="P:DotSpatial.Data.HfaSpheroid.SphereName">
            <summary>
            Gets or sets the string name o the ellipsoid
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IDataLayer">
            <summary>
            IDataLayer
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.CommitTransaction">
            <summary>
            This should finalize the transaction, saving changes to the database or disk
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.CreateFeature(DotSpatial.Data.IFeature)">
            <summary>
            Creates a feature
            </summary>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.CreateShape(DotSpatial.Data.Shape,System.Data.DataRow)">
            <summary>
            Creates a feature from a shape and some data row values.
            </summary>
            <param name="shape"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.CreateField(DotSpatial.Data.Field)">
            <summary>
            Creates a new field for this data layer in the data source
            </summary>
            <param name="fld"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.DeleteFeature(System.Int32)">
            <summary>
            Deletes the feature at the specified index location
            </summary>
            <param name="fid">The fid</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.Dispose">
            <summary>
            Disposes any unmanaged memory objects
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.GetFeature(System.Int32)">
            <summary>
            Gets the feature at the specified index
            </summary>
            <param name="fid"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.GetShape(System.Int32)">
            <summary>
            Gets the shape
            </summary>
            <param name="fid"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.GetFeatureCount">
            <summary>
            Gets the features
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.GetFidColumn">
            <summary>
            Gets the name of the feature ID column
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.GetGeometryColumn">
            <summary>
            Gets the string name of the geometry column
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.GetFields">
            <summary>
            Returns the field definitions as an array of fields.
            </summary>
            <returns>An array of field objects that encompass the schema</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.RollbackTransaction">
            <summary>
            Rolls back the transactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.GetSpatialRef">
            <summary>
            Gets the projection information associated with this projection
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.SetFeature(System.Int32,DotSpatial.Data.IFeature)">
            <summary>
            sets the specified feature
            </summary>
            <param name="fid"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.SetShape(System.Int32,DotSpatial.Data.Shape,System.Data.DataRow)">
            <summary>
            Sets the shape
            </summary>
            <param name="fid"></param>
            <param name="shape"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.SetSpatialFilterRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the spatial filter by using the specified rectangular extents instead of a geometry.
            </summary>
            <param name="xMin">The minimum value in the X direction.</param>
            <param name="yMin">The minimum value in the Y direction.</param>
            <param name="xMax">The maximum value in the X direction.</param>
            <param name="yMax">The maximum value in the Y direction.</param>
            <returns>Boolean, true if hte spatial filter rectangle is set.</returns>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.StartTransaction">
            <summary>
            Starts the transaction
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.SyncToDisk">
            <summary>
            Syncrhonize to disk
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IDataLayer.TestCapability">
            <summary>
            Test Capability
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataLayer.Extent">
            <summary>
            Gets the extent of the data layer
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataLayer.Name">
            <summary>
            Gets the name of this layer
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IDataLayer.SpatialFilter">
            <summary>
            Gets or sets the spatial filter so that only members that intersect with the specified
            geometry will be returned.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.PluginInfo">
            <summary>
            PluginInfo
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PluginInfo.#ctor">
            <summary>
            Creates a new instance of PluginInfo
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PluginInfo.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of a PluginInfo class with the specified parameters
            </summary>
            <param name="inSettings"></param>
            <param name="inKey"></param>
        </member>
        <member name="P:DotSpatial.Data.PluginInfo.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="P:DotSpatial.Data.PluginInfo.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="T:DotSpatial.Data.AffineTransform">
            <summary>
            AffineTransform
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AffineTransform.#ctor(System.Double[])">
            <summary>
            Creates a new instance of AffineTransform
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AffineTransform.CellCenter_ToProj(System.Int32,System.Int32)">
            <summary>
            Given any input row or column, this returns the appropriate geographic location for the
            position of the center of the cell.
            </summary>
            <param name="row">The integer row index from 0 to numRows - 1</param>
            <param name="column">The integer column index from 0 to numColumns - 1</param>
            <returns>The geographic position of the center of the specified cell</returns>
        </member>
        <member name="M:DotSpatial.Data.AffineTransform.CellTopLeft_ToProj(System.Int32,System.Int32)">
            <summary>
            Given the row and column, this returns the geographic position of the top left corner of the cell
            </summary>
            <param name="row">The integer row index from 0 to numRows - 1</param>
            <param name="column">The integer column index from 0 to numColumns - 1</param>
            <returns>The geographic position of the top left corner of the specified cell</returns>
        </member>
        <member name="M:DotSpatial.Data.AffineTransform.CellTopRight_ToProj(System.Int32,System.Int32)">
            <summary>
            Given the row and column, this returns the geographic position of the top right corner of the cell
            </summary>
            <param name="row">The integer row index from 0 to numRows - 1</param>
            <param name="column">The integer column index from 0 to numColumns - 1</param>
            <returns>The geographic position of the top right corner of the specified cell</returns>
        </member>
        <member name="M:DotSpatial.Data.AffineTransform.CellBottomLeft_ToProj(System.Int32,System.Int32)">
            <summary>
            Given the row and column, this returns the geographic position of the bottom left corner of the cell
            </summary>
            <param name="row">The integer row index from 0 to numRows - 1</param>
            <param name="column">The integer column index from 0 to numColumns - 1</param>
            <returns>The geographic position of the bottom left corner of the specified cell</returns>
        </member>
        <member name="M:DotSpatial.Data.AffineTransform.CellBottomRight_ToProj(System.Int32,System.Int32)">
            <summary>
            Given the row and column, this returns the geographic position of the bottom right corner of the cell
            </summary>
            <param name="row">The integer row index from 0 to numRows - 1</param>
            <param name="column">The integer column index from 0 to numColumns - 1</param>
            <returns>The geographic position of the bottom right corner of the specified cell</returns>
        </member>
        <member name="M:DotSpatial.Data.AffineTransform.TransfromToCorner(System.Int32,System.Int32)">
            <summary>
             Given the row and column, this returns new affine coefficients transformed to that cell
            </summary>
            <param name="startRow">The integer row index from 0 to numRows - 1</param>
            <param name="startColumn">The integer column index from 0 to numColumns - 1</param>
            <returns>Transoformed affine coefficients</returns>
        </member>
        <member name="M:DotSpatial.Data.AffineTransform.ProjToCell(DotSpatial.Topology.Coordinate)">
            <summary>
            Returns the row and column index.
            </summary>
            <param name="location">Gets or sets the ICoordinate</param>
            <returns>An RcIndex that shows the best row or column index for the specified coordinate.</returns>
        </member>
        <member name="P:DotSpatial.Data.AffineTransform.Coefficients">
            <summary>
            Gets or sets the array of coefficients for this transform
            </summary>
        </member>
        <member name="T:DotSpatial.Data.BinaryRasterProvider">
            <summary>
            BinaryDataProvider
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IRasterProvider">
            <summary>
            A DataProvider that is specific to raster formats.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IRasterProvider.Create(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Type,System.String[])">
            <summary>
            This create new method implies that this provider has the priority for creating a new file.
            An instance of the dataset should be created and then returned.  By this time, the fileName
            will already be checked to see if it exists, and deleted if the user wants to overwrite it.
            </summary>
            <param name="name">The string fileName for the new instance.</param>
            <param name="driverCode">The string short name of the driver for creating the raster.</param>
            <param name="xSize">The number of columns in the raster.</param>
            <param name="ySize">The number of rows in the raster.</param>
            <param name="numBands">The number of bands to create in the raster.</param>
            <param name="dataType">The data type to use for the raster.</param>
            <param name="options">The options to be used.</param>
            <returns>An IRaster</returns>
        </member>
        <member name="M:DotSpatial.Data.IRasterProvider.Open(System.String)">
            <summary>
            This open method is only called if this plugin has been given priority for one
            of the file extensions supported in the DialogReadFilter property supplied by
            this control.  Failing to provide a DialogReadFilter will result in this plugin
            being added to the list of DataProviders being supplied under the Add Other Data
            option in the file menu.
            </summary>
            <param name="fileName">A string specifying the complete path and extension of the file to open.</param>
            <returns>An IDataSet to be added to the Map.  These can also be groups of datasets.</returns>
        </member>
        <member name="M:DotSpatial.Data.BinaryRasterProvider.Open(System.String)">
            <summary>
            This open method is only called if this plugin has been given priority for one
            of the file extensions supported in the DialogReadFilter property supplied by
            this control.  Failing to provide a DialogReadFilter will result in this plugin
            being added to the list of DataProviders being supplied under the Add Other Data
            option in the file menu.
            </summary>
            <param name="fileName">A string specifying the complete path and extension of the file to open.</param>
            <returns>An IDataSet to be added to the Map.  These can also be groups of datasets.</returns>
        </member>
        <member name="M:DotSpatial.Data.BinaryRasterProvider.Create(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Type,System.String[])">
            <summary>
            This create new method implies that this provider has the priority for creating a new file.
            An instance of the dataset should be created and then returned.  By this time, the fileName
            will already be checked to see if it exists, and deleted if the user wants to overwrite it.
            </summary>
            <param name="name">The string fileName for the new instance</param>
            <param name="driverCode">The string short name of the driver for creating the raster</param>
            <param name="xSize">The number of columns in the raster</param>
            <param name="ySize">The number of rows in the raster</param>
            <param name="numBands">The number of bands to create in the raster</param>
            <param name="dataType">The data type to use for the raster</param>
            <param name="options">The options to be used.</param>
            <returns>An IRaster</returns>
        </member>
        <member name="M:DotSpatial.Data.BinaryRasterProvider.Open">
            <summary>
            A Non-File based open.  If no DialogReadFilter is provided, DotSpatial will call
            this method when this plugin is selected from the Add Other Data option in the
            file menu.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BinaryRasterProvider.GetDataType(System.String)">
            <summary>
            Reads a binary header to determine the appropriate data type
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BinaryRasterProvider.DialogReadFilter">
            <summary>
            Gets a dialog read filter that lists each of the file type descriptions and file extensions, delimeted
            by the | symbol.  Each will appear in DotSpatial's open file dialog filter, preceeded by the name provided
            on this object.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BinaryRasterProvider.DialogWriteFilter">
            <summary>
            Gets a dialog filter that lists each of the file type descriptions and extensions for a Save File Dialog.
            Each will appear in DotSpatial's open file dialog filter, preceeded by the name provided on this object.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BinaryRasterProvider.Name">
            <summary>
            Gets a prefereably short name that identifies this data provider.  Example might be GDAL.
            This will be prepended to each of the DialogReadFilter members from this plugin.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BinaryRasterProvider.Description">
            <summary>
            This is a basic description that will fall next to your plugin in the Add Other Data dialog.
            This will only be shown if your plugin does not supply a DialogReadFilter.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BinaryRasterProvider.ProgressHandler">
            <summary>
            Gets or sets the control or method that should report on progress
            </summary>
        </member>
        <member name="T:DotSpatial.Data.RasterBoundsExt">
            <summary>
            RasterBoundsEM
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.Area(DotSpatial.Data.IRasterBounds)">
            <summary>
            Calculates the area of this envelope.  Because the word Area,
            like Volume, is dimension specific, this method only looks
            at the X and Y ordinates, and requires at least 2 ordinates.
            </summary>
            <param name="self">The IEnvelope to use with this method</param>
            <returns>The 2D area as a double value.</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.Bottom(DotSpatial.Data.IRasterBounds)">
            <summary>
            Gets the minY, which is Y - Height.
            </summary>
            <param name="self">The <c>IRasterBounds</c> that this calculation is for.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.ExpandBy(DotSpatial.Data.IRasterBounds,System.Double)">
            <summary>
            Uses the specified distance to expand the envelope by that amount in all dimensions.
            </summary>
            <param name="self">The <c>IRasterBounds</c> that this calculation is for.</param>
            <param name="distance">The double distance to expand in all directions.</param>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.Left(DotSpatial.Data.IRasterBounds)">
            <summary>
            Gets the left value for this rectangle.  This should be the
            X coordinate, but is added for clarity.
            </summary>
            <param name="self">The <c>IRasterBounds</c> that this calculation is for.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.Right(DotSpatial.Data.IRasterBounds)">
            <summary>
            Gets the right value, which is X + Width.
            </summary>
            <param name="self">The <c>IRasterBounds</c> that this calculation is for.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.Top(DotSpatial.Data.IRasterBounds)">
            <summary>
            Gets the maxY value, which should be Y.
            </summary>
            <param name="self">The <c>IRasterBounds</c> that this calculation is for.</param>
            <returns>The double value representing the Max Y value of this rectangle</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.OpenWorldFile(DotSpatial.Data.IRasterBounds,System.String)">
            <summary>
            Use the Open method instead of this extension.  This only provides
            a default behavior that can optionally be used by implementers
            of the IRasterBounds interface.
            </summary>
            <param name="bounds">The bounds to open</param>
            <param name="fileName">The *.wld or *.**w world file to open</param>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.SaveWorldFile(DotSpatial.Data.IRasterBounds)">
            <summary>
            Use the Save method instead of this extension.  This only provides
            a default behavior that can optionally be used by implementers
            of the IRasterBounds interface.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.ResampleTransform(DotSpatial.Data.IRasterBounds,System.Int32,System.Int32)">
            <summary>
            Generates a new version of the affine transform that will
            cover the same region, but using the specified number of
            rows and columns instead.
            </summary>
            <param name="bounds">The raster bounds to resample</param>
            <param name="numRows">The new number of rows </param>
            <param name="numColumns">The new number of columns</param>
            <returns>
            X = [0] + [1] * Column + [2] * Row
            Y = [3] + [4] * Column + [5] * Row
            </returns>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.SaveAs(DotSpatial.Data.IRasterBounds,System.String)">
            <summary>
            Attempts to save the affine coefficients to the specified worldfile file name
            </summary>
            <param name="bounds">The bounds to save</param>
            <param name="fileName">The fileName to save this bounds to</param>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.Get_AffineMatrix(DotSpatial.Data.IRasterBounds)">
            <summary>
            Converts creates a float precisions drawing matrix from the double precision affine
            coordinates.  The Matrix can be manipulated and then set back.  Some precision will
            be lost, however, as only floats are supported.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.Set_AffineMatrix(DotSpatial.Data.IRasterBounds,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Re-defines the double precision affine transform values based on the specified
            system.Drawing.Matrix.
            </summary>
            <param name="bounds">The bounds to adjust based on the matrix</param>
            <param name="matrix">The matrix to use as a guide for adjustments.</param>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.BottomLeft(DotSpatial.Data.IRasterBounds)">
            <summary>
            Images can be skewed, so this gets the point that actually defines the bottom left
            corner of the data in geographic coordinates
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.BottomRight(DotSpatial.Data.IRasterBounds)">
            <summary>
            Images can be skewed, so this gets the point that actually defines the bottom right
            corner of the data in geographic coordinates
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.TopLeft(DotSpatial.Data.IRasterBounds)">
            <summary>
            Images can be skewed, so this gets the point that actually defines the top left
            corner of the data in geographic coordinates
            </summary>
            <param name="bounds">The IRasterBounds to obtain the top left of</param>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.TopRight(DotSpatial.Data.IRasterBounds)">
            <summary>
            Images can be skewed, so this gets the point that actually defines the top right
            corner of the data in geographic coordinates
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.CellCenter_ToProj(DotSpatial.Data.IRasterBounds,System.Int32,System.Int32)">
            <summary>
            Given any input row or column, this returns the appropriate geographic location for the
            position of the center of the cell.
            </summary>
            <param name="bounds">The raster bounds to perform the calculation on</param>
            <param name="row">The integer row index from 0 to numRows - 1</param>
            <param name="column">The integer column index from 0 to numColumns - 1</param>
            <returns>The geographic position of the center of the specified cell</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.CellTopLeft_ToProj(DotSpatial.Data.IRasterBounds,System.Int32,System.Int32)">
            <summary>
            Given the row and column, this returns the geographic position of the top left corner of the cell
            </summary>
            <param name="bounds">The raster bounds to perform the calculation on</param>
            <param name="row">The integer row index from 0 to numRows - 1</param>
            <param name="column">The integer column index from 0 to numColumns - 1</param>
            <returns>The geographic position of the top left corner of the specified cell</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.CellTopRight_ToProj(DotSpatial.Data.IRasterBounds,System.Int32,System.Int32)">
            <summary>
            Given the row and column, this returns the geographic position of the top right corner of the cell
            </summary>
            <param name="bounds">The raster bounds to perform the calculation on</param>
            <param name="row">The integer row index from 0 to numRows - 1</param>
            <param name="column">The integer column index from 0 to numColumns - 1</param>
            <returns>The geographic position of the top right corner of the specified cell</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.CellBottomLeft_ToProj(DotSpatial.Data.IRasterBounds,System.Int32,System.Int32)">
            <summary>
            Given the row and column, this returns the geographic position of the bottom left corner of the cell
            </summary>
            <param name="bounds">The raster bounds to perform the calculation on</param>
            <param name="row">The integer row index from 0 to numRows - 1</param>
            <param name="column">The integer column index from 0 to numColumns - 1</param>
            <returns>The geographic position of the bottom left corner of the specified cell</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.CellBottomRight_ToProj(DotSpatial.Data.IRasterBounds,System.Int32,System.Int32)">
            <summary>
            Given the row and column, this returns the geographic position of the bottom right corner of the cell
            </summary>
            <param name="bounds">The raster bounds to perform the calculation on</param>
            <param name="row">The integer row index from 0 to numRows - 1</param>
            <param name="column">The integer column index from 0 to numColumns - 1</param>
            <returns>The geographic position of the bottom right corner of the specified cell</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.ProjToCell(DotSpatial.Data.IRasterBounds,DotSpatial.Topology.Coordinate)">
            <summary>
            Returns the row col index
            </summary>
            <param name="bounds">The raster bounds to perform the calculation on</param>
            <param name="location">Gets or sets the ICoordinate</param>
            <returns>An RcIndex that shows the best row or column index for the specified coordinate.</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterBoundsExt.CellsContainingExtent(DotSpatial.Data.IRasterBounds,DotSpatial.Data.Extent)">
            <summary>
            The affine transform can make figuring out what rows and columns are needed from the original image
            in order to correctly fill a geographic extent challenging.  This attempts to handle that back projection
            problem. It returns a System.Drawing.Rectangle in pixel (cell) coordinates that is completely contains
            the geographic extents, but is not larger than the bounds of the underlying image.
            If geographic extent fully contains extent of IRasterBounds, than returns rectangle which contains full raster image.
            If geographic extent partially contains extent of IRasterBounds, than returns rectangle which contains needed edges of full raster image.
            It back projects all four corners of the extent and returns the bounding rectangle clipped by the image rectangle.
            </summary>
            <param name="self">Instance of <see cref="T:DotSpatial.Data.IRasterBounds"/></param>
            <param name="extent">Extent to test.</param>
            <returns>Rectangle in pixel (cell) coordinates.</returns>
        </member>
        <member name="T:DotSpatial.Data.RasterExt">
            <summary>
            A new model, now that we support 3.5 framework and extension methods that are essentially
            derived characteristics away from the IRaster interface, essentially reducing it
            to the simplest interface possible for future implementers, while extending the most
            easy-to-find functionality to the users.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.ContainsFeature(DotSpatial.Data.IRaster,DotSpatial.Data.IFeature)">
            <summary>
            determine if the shape is partially inside grid extents
            </summary>
            <returns>false, if the shape is completely outside grid extents
            true, if it's at least partially inside </returns>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.IsFullyWindowed(DotSpatial.Data.IRaster)">
            <summary>
            Gets a boolean that is true if the Window extents contain are all the information for the raster.
            In otherwords, StartRow = StartColumn = 0, EndRow = NumRowsInFile - 1, and EndColumn = NumColumnsInFile - 1
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.MoveTo(DotSpatial.Data.IRaster,DotSpatial.Topology.Coordinate)">
            <summary>
            This doesn't change the data, but instead performs a translation where the upper left coordinate
            is specified in world coordinates.
            </summary>
            <param name="raster">Moves this raster so that the upper left coordinate will match the specified position.  The skew and cellsize will remain unaltered</param>
            <param name="position">The location to move the upper left corner of the raster to in world coordinates.</param>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.Rotate(DotSpatial.Data.IRaster,System.Single)">
            <summary>
            Rotates the geospatial reference points for this image by rotating the affine coordinates.
            The center for this rotation will be the center of the image.
            </summary>
            <param name="raster">The raster to rotate</param>
            <param name="degrees">The angle in degrees to rotate the image counter clockwise.</param>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.RotateAt(DotSpatial.Data.IRaster,System.Single,DotSpatial.Topology.Coordinate)">
            <summary>
            Rotates the geospatial reference points for this image by rotating the affine coordinates.
            The center for this rotation will be the center of the image.
            </summary>
            <param name="raster">The raster to rotate about the specified coordinate</param>
            <param name="degrees">The angle in degrees to rotate the image counterclockwise.</param>
            <param name="center">The point that marks the center of the desired rotation in geographic coordiantes.</param>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.Scale(DotSpatial.Data.IRaster,System.Single,System.Single)">
            <summary>
            This method uses a matrix transform to adjust the scale.  The precision of using
            a Drawing2D transform is float precision, so some accuracy may be lost.
            </summary>
            <param name="raster">The raster to apply the scale transform to</param>
            <param name="scaleX">The multiplier to adjust the geographic extents of the raster in the X direction</param>
            <param name="scaleY">The multiplier to adjust the geographic extents of the raster in the Y direction</param>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.Shear(DotSpatial.Data.IRaster,System.Single,System.Single)">
            <summary>
            This method uses a matrix transform to adjust the shear.  The precision of using
            a Drawing2D transform is float precision, so some accuracy may be lost.
            </summary>
            <param name="raster">The raster to apply the transform to</param>
            <param name="shearX">The floating point horizontal shear factor</param>
            <param name="shearY">The floating ponit vertical shear factor</param>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.Translate(DotSpatial.Data.IRaster,DotSpatial.Topology.Coordinate)">
            <summary>
            Applies a translation transform to the georeferenced coordinates on this raster.
            </summary>
            <param name="raster">The raster to apply the translation to</param>
            <param name="shift">An ICoordinate with shear values</param>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.GetNearestValue(DotSpatial.Data.IRaster,DotSpatial.Topology.Coordinate)">
            <summary>
            Retrieves the data from the cell that is closest to the specified coordinates.  This will
            return a No-Data value if the specified coordintes are outside of the grid.
            </summary>
            <param name="raster">The raster to get the value from</param>
            <param name="location">A valid implementation of Icoordinate specifying the geographic location.</param>
            <returns>The value of type T of the cell that has a center closest to the specified coordinates</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.GetNearestValue(DotSpatial.Data.IRaster,System.Double,System.Double)">
            <summary>
            Retrieves the data from the cell that is closest to the specified coordinates.  This will
            return a No-Data value if the specified coordintes are outside of the grid.
            </summary>
            <param name="raster">The raster to get the value from</param>
            <param name="x">The longitude or horizontal coordinate</param>
            <param name="y">The latitude or vertical coordinate</param>
            <returns>The double value of the cell that has a center closest to the specified coordinates</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.SetNearestValue(DotSpatial.Data.IRaster,System.Double,System.Double,System.Double)">
            <summary>
            Retrieves the location from the cell that is closest to the specified coordinates.  This will
            do nothing if the specified coordinates are outside of the raster.
            </summary>
            <param name="raster">The IRaster to set the value for</param>
            <param name="x">The longitude or horizontal coordinate</param>
            <param name="y">The latitude or vertical coordinate</param>
            <param name="value">The value to assign to the nearest cell to the specified location</param>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.SetNearestValue(DotSpatial.Data.IRaster,DotSpatial.Topology.Coordinate,System.Double)">
            <summary>
            Retrieves the location from the cell that is closest to the specified coordinates.  This will
            do nothing if the specified coordinates are outside of the raster.
            </summary>
            <param name="raster">The IRaster to set the value for</param>
            <param name="location">An Icoordinate specifying the location</param>
            <param name="value">The value to assign to the nearest cell to the specified location</param>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.CellToProj(DotSpatial.Data.IRaster,DotSpatial.Data.RcIndex)">
            <summary>
            Extends the IRaster interface to return the coordinate of the center of a row column position.
            </summary>
            <param name="raster">The raster interface to extend</param>
            <param name="position">The zero based integer index of the row and column of the cell to locate</param>
            <returns>The geographic location of the center of the specified cell</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.CellToProj(DotSpatial.Data.IRaster,System.Int32,System.Int32)">
            <summary>
            Extends the IRaster interface to return the coordinate of the center of a row column position.
            </summary>
            <param name="raster">The raster interface to extend</param>
            <param name="row">The zero based integer index of the row of the cell to locate</param>
            <param name="col">The zero based integer index of the column of the cell to locate</param>
            <returns>The geographic location of the center of the specified cell</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.ProjToCell(DotSpatial.Data.IRaster,DotSpatial.Topology.Coordinate)">
            <summary>
            Extends the IRaster interface to return the zero based integer row and column indices
            </summary>
            <param name="raster">The raster interface to extend</param>
            <param name="location">The geographic coordinate describing the latitude and longitude</param>
            <returns>The RcIndex that describes the zero based integer row and column indices</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterExt.ProjToCell(DotSpatial.Data.IRaster,System.Double,System.Double)">
            <summary>
            Extends the IRaster interface to return the zero based integer row and column indices
            </summary>
            <param name="raster">The raster interface to extend</param>
            <param name="x">A double precision floating point describing the longitude</param>
            <param name="y">A double precision floating point describing the latitude</param>
            <returns>The RcIndex that describes the zero based integer row and column indices</returns>
        </member>
        <member name="T:DotSpatial.Data.BgdRaster`1">
            <summary>
            BgdRaster
            </summary>
        </member>
        <member name="T:DotSpatial.Data.Raster`1">
            <summary>
            Raster
            </summary>
        </member>
        <member name="T:DotSpatial.Data.Raster">
            <summary>
            Handles the native file functions for float grids, without relying on GDAL.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IRaster">
            <summary>
            A general
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IRaster.Copy">
            <summary>
            This only works for in-ram rasters.  This basically makes a new raster that has all the same
            in memory values
            </summary>
            <returns>An IRaster that is a duplicate of this class</returns>
        </member>
        <member name="M:DotSpatial.Data.IRaster.Copy(System.String,System.Boolean)">
            <summary>
            Creates a duplicate version of this file.  If copyValues is set to false, then a raster of NoData values is created
            that has the same georeferencing information as the source file of this Raster, even if this raster is just a window.
            </summary>
            <param name="fileName">The string fileName specifying where to create the new file.</param>
            <param name="copyValues">If this is false, the same size and georeferencing values are used, but they are all set to NoData.</param>
        </member>
        <member name="M:DotSpatial.Data.IRaster.GetStatistics">
            <summary>
            Even if this is a window, this will cause this raster to show statistics calculated from the entire file.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IRaster.GetValues(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Most raster methods are optimized for reading in lines or blocks at a time.  This one is designed
            to be used for scattered points.
            </summary>
            <param name="indices">The zero based integer index that is Row * NumColumnsInFile + Column</param>
            <returns>The list of double values</returns>
        </member>
        <member name="M:DotSpatial.Data.IRaster.ReadBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a subset from the file that includes only the specified offsets.  The result is a raster,
            and the extents are calculated, but the row and column values are in terms of the window,
            not the original raster.  The band can be controlled by setting the "Current Band" first.
            </summary>
            <param name="xOff">X axis or horizontal offset (0 based from left)</param>
            <param name="yOff">Y axis or vertical offset (0 based from top)</param>
            <param name="sizeX">Number of columns</param>
            <param name="sizeY">Number of rows</param>
            <returns>An IRaster created from the appropriate type;.</returns>
        </member>
        <member name="M:DotSpatial.Data.IRaster.WriteBlock(DotSpatial.Data.IRaster,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This writes the values to the file, even if the IRaster has more values than the xSize or ySize
            stipulate, and even if the source raster has values of a different type.
            </summary>
            <param name="blockValues">The IRaster that contains data values to write to the file</param>
            <param name="xOff">The 0 based integer horizontal offset from the left</param>
            <param name="yOff">The 0 based integer vertical offset from the top</param>
            <param name="xSize">The integer number of columns to write</param>
            <param name="ySize">The integer number of rows to write</param>
        </member>
        <member name="M:DotSpatial.Data.IRaster.Save">
            <summary>
            Saves changes from any values that are in memory to the file.  This will preserve the existing
            structure and attempt to only write values to the parts of the file that match the loaded window.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IRaster.SaveAs(System.String)">
            <summary>
            This will save whatever is specified in the startRow, endRow, startColumn, endColumn bounds
            to a new file with the specified fileName.
            </summary>
            <param name="fileName">The string fileName to save the current raster to.</param>
        </member>
        <member name="M:DotSpatial.Data.IRaster.SetData(DotSpatial.Data.IRaster)">
            <summary>
            This code is required to allow a new format to save data from an old format quickly.
            It essentially quickly transfers the underlying data values to the new raster.
            </summary>
            <param name="original"></param>
        </member>
        <member name="M:DotSpatial.Data.IRaster.ToRaster``1">
            <summary>
            Gets this raster (or its Internal Raster) as the appropriately typed raster
            so that strong typed access methods are available, instead of just the
            regular methods, or null if the type is incorrect.  (Check datatype property).
            </summary>
            <typeparam name="T">The type (int, short, float, etc.)</typeparam>
            <returns>The Raster&lt;T&gt; where T are value types like int, short and float.  Returns null if the type is wrong.</returns>
        </member>
        <member name="M:DotSpatial.Data.IRaster.WriteHeader">
            <summary>
            Instructs the raster to write only the header content.  This is especially useful if you just want to update
            the extents or the projection of the raster, without changing the data values.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IRaster.CategoryNames">
            <summary>
            A raster can contain predefined names for its categories
            </summary>
            <returns>null if raster has no category names</returns>
        </member>
        <member name="M:DotSpatial.Data.IRaster.CategoryColors">
            <summary>
            A raster can contain predefined colors for its categories, for example NLCD GeoTIFF has a palette
            </summary>
            <returns>null if raster has no category colors</returns>
        </member>
        <member name="P:DotSpatial.Data.IRaster.ByteSize">
            <summary>
            Gets the integer size of each data member of the raster in bytes.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.Bands">
            <summary>
            Gets or sets the list of bands, which are in turn rasters.  The rasters
            contain only one band each, instead of the list of all the bands like the
            parent raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.CellHeight">
            <summary>
            The geographic height of a cell the projected units.  Setting this will
            automatically adjust the affine coefficient to a negative value.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.CellWidth">
            <summary>
            The geographic width of a cell in the projected units
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.CurrentBand">
            <summary>
            This provides a zero-based integer band index that specifies which of the internal bands
            is currently being used for requests for data.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.CustomFileType">
            <summary>
            This does nothing unless the FileType property is set to custom.
            In such a case, this string allows new file types to be managed.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.DataType">
            <summary>
            This reveals the underlying data type
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.DriverCode">
            <summary>
            Gets or sets a short string to identify which driver to use.  This is primarilly used by GDAL rasters.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.EndColumn">
            <summary>
            The integer column index for the right column of this raster.  Most of the time this will
            be NumColumns - 1.  However, if this raster is a window taken from a larger raster, then
            it will be the index of the endColumn from the window.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.EndRow">
            <summary>
            The integer row index for the end row of this raster.  Most of the time this will
            be numRows - 1.  However, if this raster is a window taken from a larger raster, then
            it will be the index of the endRow from the window.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.Filename">
            <summary>
            Gets the complete path and fileName of the current file
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.FileType">
            <summary>
            Gets the file type of this grid.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.IsInRam">
            <summary>
            Gets a boolean that is true if the data for this raster is in memory.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.Maximum">
            <summary>
            Gets the maximum data value, not counting no-data values in the grid.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.Mean">
            <summary>
            Gets the mean of the non-NoData values in this grid.  If the data is not InRam, then
            the GetStatistics method must be called before these values will be correct.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.Minimum">
            <summary>
            Gets the minimum data value that is not classified as a no data value in this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.NoDataValue">
            <summary>
            A float showing the no-data values
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.Notes">
            <summary>
            For binary rasters this will get cut to only 256 characters.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.NumBands">
            <summary>
            Gets the number of bands.  In most traditional grid formats, this is 1.  For RGB images,
            this would be 3.  Some formats may have many bands.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.NumColumns">
            <summary>
            Gets the horizontal count of the cells in the raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.NumColumnsInFile">
            <summary>
            Gets the integer count of columns in the file, as opposed to the
            number represented by this raster, which might just represent a window.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.NumRows">
            <summary>
            Gets the vertical count of the cells in the raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.NumRowsInFile">
            <summary>
            Gets the number of rows in the source file, as opposed to the number
            represented by this raster, which might just represent part of a file.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.NumValueCells">
            <summary>
            Gets the count of the cells that are not no-data.  If the data is not InRam, then
            you will have to first call the GetStatistics() method to gain meaningul values.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.Options">
            <summary>
            Gets or sets the string array of options to use when saving this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.Rows">
            <summary>
            Gets a list of the rows in this raster that can be accessed independantly.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.StartColumn">
            <summary>
            The integer column index for the left column of this raster.  Most of the time this will
            be 0.  However, if this raster is a window taken from a file, then
            it will be the row index in the file for the top row of this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.StartRow">
            <summary>
            The integer row index for the top row of this raster.  Most of the time this will
            be 0.  However, if this raster is a window taken from a file, then
            it will be the row index in the file for the left row of this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.StdDeviation">
            <summary>
            Gets the standard deviation of all the Non-nodata cells.  If the data is not InRam,
            then you will have to first call the GetStatistics() method to get meaningful values.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.Tag">
            <summary>
            This is provided for future developers to link this raster to other entities.
            It has no function internally, so it can be manipulated safely.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.Value">
            <summary>
            Gets or sets the value on the CurrentBand given a row and column undex
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.Xllcenter">
            <summary>
            The horizontal or longitude coordinate for the lower left cell in the grid
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.Yllcenter">
            <summary>
            The vertical or latitude coordinate for the lower left cell in the grid
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRaster.Sample">
            <summary>
            This doesn't perform calculations, but is simply a place holder where sample
            values can be stored and retrieved as a cache.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IRaster.FileExists">
            <summary>
            Occurs when attempting to copy or save to a fileName that already exists.  A developer can tap into this event
            in order to display an appropriate message.  A cancel property allows the developer (and ultimately the user)
            decide if the specified event should ultimately be cancelled.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster.#ctor">
            <summary>
            Set up the default values
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster.Clone">
            <summary>
            Creates a memberwise clone of this object.  Reference types will be copied, but
            they will still point to the same original object.  So a clone of this raster
            is pointing to the same underlying array of values etc.
            </summary>
            <returns>A Raster clone of this raster.</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster.Copy">
            <summary>
            Creates a new IRaster that has the identical characteristics and in-ram data to the original.
            </summary>
            <returns>A Copy of the original raster.</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster.Copy(System.String,System.Boolean)">
            <summary>
            Creates a duplicate version of this file.  If copyValues is set to false, then a raster of NoData values is created
            that has the same georeferencing information as the source file of this Raster, even if this raster is just a window.
            </summary>
            <param name="fileName">The string fileName specifying where to create the new file.</param>
            <param name="copyValues">If this is false, the same size and georeferencing values are used, but they are all set to NoData.</param>
        </member>
        <member name="M:DotSpatial.Data.Raster.GetValues(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.Raster.GetStatistics">
            <summary>
            Even if this is a window, this will cause this raster to show statistics calculated from the entire file.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster.Save">
            <summary>
            Saves the values to a the same file that was created or loaded.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster.SaveAs(System.String)">
            <summary>
            Saves the curretn raster to the specified file.  The current driver code and options are used.
            </summary>
            <param name="fileName">The string fileName to save the raster to.</param>
        </member>
        <member name="M:DotSpatial.Data.Raster.ReadBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.Raster.WriteBlock(DotSpatial.Data.IRaster,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.Raster.SetData(DotSpatial.Data.IRaster)">
            <summary>
            This code is empty, but can be overridden in subtypes
            </summary>
            <param name="original"></param>
        </member>
        <member name="M:DotSpatial.Data.Raster.WriteHeader">
            <summary>
            Instructs the file to write header changes only.  This is espcially useful for changing the
            extents without altering the actual raster values themselves.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster.Create(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Type,System.String[])">
            <summary>
            This create new method implies that this provider has the priority for creating a new file.
            An instance of the dataset should be created and then returned.  By this time, the fileName
            will already be checked to see if it exists, and deleted if the user wants to overwrite it.
            </summary>
            <param name="name">The string fileName for the new instance.</param>
            <param name="driverCode">The string short name of the driver for creating the raster.</param>
            <param name="xSize">The number of columns in the raster.</param>
            <param name="ySize">The number of rows in the raster.</param>
            <param name="numBands">The number of bands to create in the raster.</param>
            <param name="dataType">The data type to use for the raster.</param>
            <param name="options">The options to be used.</param>
        </member>
        <member name="M:DotSpatial.Data.Raster.GetNoDataCellCount">
            <summary>
            Gets the no data cell count. Calls GetStatistics() internally.
            </summary>
            <returns>The number of cells which are equal to NoDataValue.</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster.Open(System.String)">
            <summary>
            Opens the specified fileName.  The DefaultDataManager will determine the best type of raster to handle the specified
            file based on the fileName or characteristics of the file.
            </summary>
            <param name="fileName">The string fileName of the raster to open.</param>
        </member>
        <member name="M:DotSpatial.Data.Raster.Open">
            <summary>
            Opens the specified fileName.  The DefaultDataManager will determine the best type of raster to handle the specified
            file based on the fileName or characteristics of the file.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster.SaveAs(System.String,System.String)">
            <summary>
            Saves the current raster to the specified file, using the specified driver, but with the
            options currently specified in the Options property.
            </summary>
            <param name="fileName">The string fileName to save this raster as</param>
            <param name="driverCode">The string driver code.</param>
        </member>
        <member name="M:DotSpatial.Data.Raster.SaveAs(System.String,System.String,System.String[])">
            <summary>
            Saves the current raster to the specified file.
            </summary>
            <param name="fileName">The string fileName to save the current raster to.</param>
            <param name="driverCode">The driver code to use.</param>
            <param name="options">the string array of options that depend on the format.</param>
        </member>
        <member name="M:DotSpatial.Data.Raster.CategoryNames">
            <summary>
            By default, Raster does not have any CategoryNames, but this can be overridden
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster.CategoryColors">
            <summary>
            By default, Raster does not have any CategoryColors, but this can be overridden
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster.ToRaster``1">
            <summary>
            Gets this raster (or its Internal Raster) as the appropriately typed raster
            so that strong typed access methods are available, instead of just the
            regular methods.
            </summary>
            <typeparam name="T">The type (int, short, float, etc.)</typeparam>
            <returns>The Raster&lt;T&gt; where T are value types like int, short, float"/></returns>
        </member>
        <member name="M:DotSpatial.Data.Raster.Dispose(System.Boolean)">
            <summary>
            Overrides dispose to correctly handle disposing the objects at the raster level.
            </summary>
            <param name="disposeManagedResources"></param>
        </member>
        <member name="M:DotSpatial.Data.Raster.OnFileExists(System.String)">
            <summary>
            Fires the FileExists method.  If this returns true, then the action should be cancelled.
            </summary>
            <param name="fileName">The fileName to write to</param>
            <returns>Boolean, true if the user doesn't want to overwrite</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster.ToIntRaster">
            <summary>
            Gets this raster (or its Internal Raster) as the appropriately typed raster
            so that strong typed access methods are available, instead of just the
            regular methods.
            </summary>
            <returns>A Raster&lt;short&gt;</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster.ToShortRaster">
            <summary>
            Gets this raster (or its Internal Raster) as the appropriately typed raster
            so that strong typed access methods are available, instead of just the
            regular methods.
            </summary>
            <returns>A Raster&lt;short&gt;</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster.ToFloatRaster">
            <summary>
            Gets this raster (or its Internal Raster) as the appropriately typed raster
            so that strong typed access methods are available, instead of just the
            regular methods.
            </summary>
            <returns>A Raster&lt;short&gt;</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster.CreateRaster(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Type,System.String[])">
            <summary>
            This create new method implies that this provider has the priority for creating a new file.
            An instance of the dataset should be created and then returned.  By this time, the fileName
            will already be checked to see if it exists, and deleted if the user wants to overwrite it.
            </summary>
            <param name="name">The string fileName for the new instance.</param>
            <param name="driverCode">The string short name of the driver for creating the raster.</param>
            <param name="xSize">The number of columns in the raster.</param>
            <param name="ySize">The number of rows in the raster.</param>
            <param name="numBands">The number of bands to create in the raster.</param>
            <param name="dataType">The data type to use for the raster.</param>
            <param name="options">The options to be used.</param>
            <returns>An IRaster</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster.GetGridFileType(System.String)">
            <summary>
            For DotSpatial style binary grids, this returns the filetype
            </summary>
            <param name="filename">The fileName with extension to test</param>
            <returns>A GridFileTypes enumeration listing which file type this is</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster.OpenFile(System.String)">
            <summary>
            This is significantly m
            </summary>
            <param name="fileName">The string full path for the fileName to open</param>
            <returns>A Raster object which is actually one of the type specific rasters, like FloatRaster.</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster.OpenFile(System.String,System.Boolean)">
            <summary>
            Returns a native raster of the appropriate file type and data type by parsing the fileName.
            </summary>
            <param name="fileName">The string fileName to attempt to open with a native format</param>
            <param name="inRam">The boolean value.</param>
            <returns>An IRaster which has been opened to the specified file.</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster.OpenFile(System.String,System.Boolean,DotSpatial.Data.IProgressHandler)">
            <summary>
            Returns a native raster of the appropriate file type and data type by parsing the fileName.
            </summary>
            <param name="fileName">The string fileName to attempt to open with a native format</param>
            <param name="inRam">The boolean value.</param>
            <param name="progressHandler">An overriding progress manager for this process</param>
            <returns>An IRaster which has been opened to the specified file.</returns>
        </member>
        <member name="E:DotSpatial.Data.Raster.FileExists">
            <summary>
            Occurs when attempting to copy or save to a fileName that already exists.  A developer can tap into this event
            in order to display an appropriate message.  A cancel property allows the developer (and ultimately the user)
            decide if the specified event should ultimately be cancelled.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.Sample">
            <summary>
            Gets or sets a statistical sampling.  This is designed to cache a small,
            representative sample of no more than about 10,000 values.  This property
            does not automatically produce the sample, and so this can be null.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.LineSpace">
            <summary>
            A parameter for accessing some GDAL data.  This frequently does nothing and is usually 0.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.PixelSpace">
            <summary>
            A parameter for accessing GDAL.  This frequently does nothing and is usually 0.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.ByteSize">
            <summary>
            Gets the size of each raster element in bytes.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.Bands">
            <summary>
            Gets or sets the list of bands, which are in turn rasters.  The rasters
            contain only one band each, instead of the list of all the bands like the
            parent raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.CellHeight">
            <summary>
            The geographic height of a cell the projected units.  Setting this will
            automatically adjust the affine coefficient to a negative value.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.CellWidth">
            <summary>
            The geographic width of a cell in the projected units
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.CurrentBand">
            <summary>
            This provides a zero-based integer band index that specifies which of the internal bands
            is currently being used for requests for data.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.CustomFileType">
            <summary>
            This does nothing unless the FileType property is set to custom.
            In such a case, this string allows new file types to be managed.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.DataType">
            <summary>
            This returns the RasterDataTypes enumeration clarifying the underlying data type for this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.DriverCode">
            <summary>
            Gets or sets the driver code for this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.EndColumn">
            <summary>
            The integer column index for the right column of this raster.  Most of the time this will
            be NumColumns - 1.  However, if this raster is a window taken from a larger raster, then
            it will be the index of the endColumn from the window.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.EndRow">
            <summary>
            The integer row index for the end row of this raster.  Most of the time this will
            be numRows - 1.  However, if this raster is a window taken from a larger raster, then
            it will be the index of the endRow from the window.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.Filename">
            <summary>
            Gets or Sets the complete path and fileName of the current file
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.FileType">
            <summary>
            Returns the grid file type.  Only Binary or ASCII are supported natively, without GDAL.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.IsInRam">
            <summary>
            Gets or sets a boolean that is true if the data for this raster is in memory.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.Maximum">
            <summary>
            Gets the maximum data value, not counting no-data values in the grid.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.Mean">
            <summary>
            Gets the mean of the non-NoData values in this grid.  If the data is not InRam, then
            the GetStatistics method must be called before these values will be correct.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.Minimum">
            <summary>
            Gets the minimum data value that is not classified as a no data value in this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.NoDataValue">
            <summary>
            A double showing the no-data value for this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.Notes">
            <summary>
            For binary rasters this will get cut to only 256 characters.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.NumBands">
            <summary>
            Gets the number of bands.  In most traditional grid formats, this is 1.  For RGB images,
            this would be 3.  Some formats may have many bands.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.NumColumns">
            <summary>
            Gets the horizontal count of the cells in the raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.NumColumnsInFile">
            <summary>
            Gets the integer count of the number of columns in the source or file that this
            raster is a window from.  (Usually this will be the same as NumColumns)
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.NumRows">
            <summary>
            Gets the vertical count of the cells in the raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.NumRowsInFile">
            <summary>
            Gets the integer count of the number of rows in the source or file that this
            raster is a window from.  (Usually this will be the same as NumColumns.)
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.NumValueCells">
            <summary>
            Gets the count of the cells that are not no-data.  If the data is not InRam, then
            you will have to first call the GetStatistics() method to gain meaningul values.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.Options">
            <summary>
            An extra string array of options that exist for support of some types of GDAL supported raster drivers
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.Rows">
            <summary>
            Gets a list of the rows in this raster that can be accessed independantly.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.StartColumn">
            <summary>
            The integer column index for the left column of this raster.  Most of the time this will
            be 0.  However, if this raster is a window taken from a file, then
            it will be the row index in the file for the top row of this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.StartRow">
            <summary>
            The integer row index for the top row of this raster.  Most of the time this will
            be 0.  However, if this raster is a window taken from a file, then
            it will be the row index in the file for the left row of this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.StdDeviation">
            <summary>
            Gets the standard deviation of all the Non-nodata cells.  If the data is not InRam,
            then you will have to first call the GetStatistics() method to get meaningful values.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.Tag">
            <summary>
            This is provided for future developers to link this raster to other entities.
            It has no function internally, so it can be manipulated safely.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.Value">
            <summary>
            Gets or sets the value on the CurrentBand given a row and column undex
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.Xllcenter">
            <summary>
            Gets or sets the X position of the lower left data cell.
            Setting this will adjust only the _affine[0] coefficient to ensure that the
            lower left corner ends up in the specified location, while keeping all the
            other affine coefficients the same.  This is like a horizontal Translate
            that locks into place the center of the lower left corner of the image.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster.Yllcenter">
            <summary>
            Gets or sets the Y position of the lower left data cell.
            Setting this will adjust only the _affine[0] coefficient to ensure that the
            lower left corner ends up in the specified location, while keeping all the
            other affine coefficients the same.  This is like a horizontal Translate
            that locks into place the center of the lower left corner of the image.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.Raster`1.Data">
            <summary>
            The actual data values, stored as a jagged array of values of type T
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.#ctor">
            <summary>
            Creates a new instance of Raster
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.#ctor(System.Int32,System.Int32,DotSpatial.Data.ValueGrid{`0})">
            <summary>
            Creates an raster of data type T
            </summary>
            <param name="numRows">The number of rows in the raster</param>
            <param name="numColumns">The number of columns in the raster</param>
            <param name="valueGrid">The default ValueGrid only supports standard numeric types, but if a different kind of value grid is needed, this allows it.</param>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a raster of data type T.
            </summary>
            <param name="numRows">The number of rows in the raster</param>
            <param name="numColumns">The number of columns in the raster</param>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.SetData(DotSpatial.Data.IRaster)">
            <summary>
            Used especially by the "save as" situation, this simply creates a new reference pointer for the actual data values.
            </summary>
            <param name="original"></param>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.Initialize">
            <summary>
            Calls the basic setup for the raster
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.Copy">
            <summary>
            Creates a deep copy of this raster object so that the data values can be manipulated without
            interfering with the original raster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.CopyWindow(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            This creates a completely new raster from the windowed domain on the original raster.  This new raster
            will not have a source file, and values like NumRowsInFile will correspond to the in memory version.
            All the values will be copied to the new source file.  InRam must be true at this level.
            </summary>
            <param name="fileName"></param>
            <param name="startRow">The 0 based integer index of the top row to copy from this raster.  If this raster is itself a window, 0 represents the startRow from the file.</param>
            <param name="endRow">The integer index of the bottom row to copy from this raster.  The largest allowed value is NumRows - 1.</param>
            <param name="startColumn">The 0 based integer index of the leftmost column to copy from this raster.  If this raster is a window, 0 represents the startColumn from the file.</param>
            <param name="endColumn">The 0 based integer index of the rightmost column to copy from this raster.  The largest allowed value is NumColumns - 1</param>
            <param name="copyValues">If this is true, the values are saved to the file.  If this is false and the data can be loaded into Ram, no file handling is done.  Otherwise, a file of NoData values is created.</param>
            <param name="inRam">Boolean.  If this is true and the window is small enough, a copy of the values will be loaded into memory.</param>
            <returns>An implementation of IRaster</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.GetStatistics">
            <summary>
            Gets the statistics all the values.  If the entire content is not currently in-ram,
            ReadRow will be used to read individual lines and performing the calculations.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.GetWindow(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This creates an IN MEMORY ONLY window from the in-memory window of this raster.  If, however, the requested range
            is outside of what is contained in the in-memory portions of this raster, an appropriate cast
            is required to ensure that you have the correct File handling, like a BinaryRaster etc.
            </summary>
            <param name="startRow">The 0 based integer index of the top row to get from this raster.  If this raster is itself a window, 0 represents the startRow from the file.</param>
            <param name="endRow">The integer index of the bottom row to get from this raster.  The largest allowed value is NumRows - 1.</param>
            <param name="startColumn">The 0 based integer index of the leftmost column to get from this raster.  If this raster is a window, 0 represents the startColumn from the file.</param>
            <param name="endColumn">The 0 based integer index of the rightmost column to get from this raster.  The largest allowed value is NumColumns - 1</param>
            <param name="inRam">Boolean.  If this is true and the window is small enough, a copy of the values will be loaded into memory.</param>
            <returns>An implementation of IRaster</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.GetWindowStatistics">
            <summary>
            Obtains only the statistics for the small window specified by startRow, endRow etc.
            this only works if the window is also InRam.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.Open">
            <summary>
            Prevent the base raster "factory" style open function from working in subclasses.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.Save">
            <summary>
            This saves content from memory stored in the Data field to the file using whatever
            file format the file already exists as.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.ReadRow(System.Int32)">
            <summary>
            Reads a specific
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.ReadRaster">
            <summary>
            This method reads the values from the entire band into an array and returns the array as a single array.
            This assumes 0 offsets, the size of the entire image, and 0 for the pixel or line space.
            </summary>
            <returns>An array of values of type T, in row major order</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.GetValuesT(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Most reading is optimized to read in a block at a time and process it.  This method is designed
            for seeking through the file.  It should work faster than the buffered methods in cases where
            an unusually arranged collection of values are required.  Sorting the list before calling
            this should significantly improve performance.
            </summary>
            <param name="indices">A list or array of long values that are (Row * NumRowsInFile + Column)</param>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.GetValues(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.ReadBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.ReadRaster(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This Method should be overrridden by classes, and provides the primary ability.
            </summary>
            <param name="xOff">The horizontal offset of the area to read values from.</param>
            <param name="yOff">The vertical offset of the window to read values from.</param>
            <param name="sizeX">The number of values to read into the buffer.</param>
            <param name="sizeY">The vertical size of the window to read into the buffer.</param>
            <returns>The jagged array of raster values of type T.</returns>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.WriteRow(`0[],System.Int32)">
            <summary>
            Reads a specific
            </summary>
            <param name="buffer">The one dimensional array of values containing all the data for this particular content.</param>
            <param name="row">The integer row to write to the raster</param>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.WriteRaster(`0[][])">
            <summary>
            This method reads the values from the entire band into an array and returns the array as a single array.
            This assumes 0 offsets, the size of the entire image, and 0 for the pixel or line space.
            </summary>
            <param name="buffer">The one dimensional array of values containing all the data for this particular content.</param>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.WriteRaster(`0[][],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method reads the values from the entire band into an array and returns the array as a single array.
            This specifies a window where the xSize and ySize specified and 0 is used for the pixel and line space.
            </summary>
            <param name="buffer">The one dimensional array of values containing all the data for this particular content.</param>
            <param name="xOff">The horizontal offset of the area to read values from.</param>
            <param name="yOff">The vertical offset of the window to read values from.</param>
            <param name="xSize">The number of values to read into the buffer.</param>
            <param name="ySize">The vertical size of the window to read into the buffer.</param>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.WriteBlock(DotSpatial.Data.IRaster,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.Raster`1.UpdateHeader">
            <summary>
            During a save opperation, this instructs the program to perform any writing that is not handled by
            the write raster content.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster`1.ValuesT">
            <summary>
            This is the same as the "Value" member except that it is type specific.
            This also supports the "ToDouble" method.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Raster`1.ByteSize">
            <summary>
            Gets the size of each raster element in bytes.
            </summary>
            <remarks>
            This only works for a few numeric types, and will return 0 if it is not identifiable as one
            of these basic types: byte, short, int, long, float, double, decimal, sbyte, ushort, uint, ulong, bool.
            </remarks>
        </member>
        <member name="M:DotSpatial.Data.BgdRaster`1.#ctor">
            <summary>
            A BgdRaster in created this way probably expects to open a file using the "Open" method,
            which allows for progress handlers or other things to be set before what might be a
            time consuming read-value process.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BgdRaster`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of a BGD raster, attempting to store the entire structure in memory if possible.
            </summary>
            <param name="numRows"></param>
            <param name="numColumns"></param>
        </member>
        <member name="M:DotSpatial.Data.BgdRaster`1.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            This creates a new BGD raster.
            </summary>
            <param name="fileName"></param>
            <param name="numRows"></param>
            <param name="numColumns"></param>
        </member>
        <member name="M:DotSpatial.Data.BgdRaster`1.ReadRaster(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This Method should be overrridden by classes, and provides the primary ability.
            </summary>
            <param name="xOff">The horizontal offset of the area to read values from.</param>
            <param name="yOff">The vertical offset of the window to read values from.</param>
            <param name="sizeX">The number of values to read into the buffer.</param>
            <param name="sizeY">The vertical size of the window to read into the buffer.</param>
            <returns>A jagged array of type T.</returns>
        </member>
        <member name="M:DotSpatial.Data.BgdRaster`1.GetValuesT(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Most reading is optimized to read in a block at a time and process it.  This method is designed
            for seeking through the file.  It should work faster than the buffered methods in cases where
            an unusually arranged collection of values are required.  Sorting the list before calling
            this should significantly improve performance.
            </summary>
            <param name="indices">A list or array of long values that are (Row * NumRowsInFile + Column)</param>
        </member>
        <member name="M:DotSpatial.Data.BgdRaster`1.WriteRaster(`0[][],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the bgd content from the specified jagged array of values to the file.
            </summary>
            <param name="buffer">The data</param>
            <param name="xOff">The horizontal offset</param>
            <param name="yOff">The vertical offset</param>
            <param name="xSize">The number of values to write horizontally</param>
            <param name="ySize">The number of values to write vertically</param>
        </member>
        <member name="M:DotSpatial.Data.BgdRaster`1.Copy(System.String,System.Boolean)">
            <summary>
            Copies the raster header, and if copyValues is true, the values to the specified file </summary>
            <param name="fileName">The full path of the file to copy content to to</param>
            <param name="copyValues">Boolean, true if this should copy values as well as just header information</param>
        </member>
        <member name="M:DotSpatial.Data.BgdRaster`1.Open">
            <summary>
            Opens the specified file
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BgdRaster`1.Save">
            <summary>
            Saves the content from this file using the current fileName and header information
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BgdRaster`1.Write(System.String)">
            <summary>
            If no file exists, this writes the header and no-data values.  If a file exists, it will assume
            that data already has been filled in the file and will attempt to insert the data values
            as a window into the file.  If you want to create a copy of the file and values, just use
            System.IO.File.Copy, it almost certainly would be much more optimized.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BgdRaster`1.WriteHeader">
            <summary>
            Writes the header to the fileName
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BgdRaster`1.WriteHeader(System.String)">
            <summary>
            The string fileName where this will begin to write data by clearing the existing file
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BgdRaster`1.ReadHeader(System.String)">
            <summary>
            Writes the header, regardless of which subtype of binary raster this is written for
            </summary>
            <param name="fileName">The string fileName specifying what file to load</param>
        </member>
        <member name="P:DotSpatial.Data.BgdRaster`1.HeaderSize">
            <summary>
            Gets the size of the header.  There is one no-data value in the header.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IValueGrid">
            <summary>
            An inteface specification for any of the multiple types of IDataBlock.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IValueGrid.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a value at the 0 row, 0 column index.
            </summary>
            <param name="row">The 0 based vertical row index from the top</param>
            <param name="column">The 0 based horizontal column index from the left</param>
            <returns>An object reference to the actual value in the data member.</returns>
        </member>
        <member name="P:DotSpatial.Data.IValueGrid.Updated">
            <summary>
            Boolean, gets or sets the flag indicating if the values have been changed
            since the last time this flag was set to false.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ValueGrid`1.#ctor(DotSpatial.Data.Raster{`0})">
            <summary>
            Constructing an ObjectGrid this way assumes the values are not in ram and will
            simply buffer 3 rows.
            </summary>
            <param name="sourceRaster"></param>
        </member>
        <member name="M:DotSpatial.Data.ValueGrid`1.ToDouble(`0)">
            <summary>
            This involves boxing and unboxing as well as a convert to double, but IConvertible was
            not CLS Compliant, so we were always getting warnings about it.  I am trying to make
            all the code CLS Compliant to remove warnings.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.ValueGrid`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a value at the 0 row, 0 column index.
            </summary>
            <param name="row">The 0 based vertical row index from the top</param>
            <param name="column">The 0 based horizontal column index from the left</param>
            <returns>An object reference to the actual value in the data member.</returns>
        </member>
        <member name="P:DotSpatial.Data.ValueGrid`1.Updated">
            <summary>
            This is just a boolean flag that is set to true when the values
            are updated.  It is the responsibility of the user to set this
            value to false again when the situation warents it.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.BinaryRaster`1">
            <summary>
            This basically demonstrates how you would combine a type with a calculator in order to
            construct a Binary Raster for the Integer type.  It is effectively the same as
            constructing a new BinaryRaster and specifying the parameter types int and IntCalculator.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.#ctor">
            <summary>
            Creates a completely empty raster that can be custom configured
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new BinaryRaster with the specified rows and columns.
            If if the raster is less than 64 Million cells, it will be created only in memory,
            and a Save method should be called when ready to save it to a file.  Otherwise, it creates a blank file with
            NoData values...which start out as 0.
            </summary>
            <param name="fileName">The fileName to write to</param>
            <param name="numRows">Integer number of rows</param>
            <param name="numColumns">Integer number of columns</param>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new BinaryRaster with the specified rows and columns.
            If inRam is true and the raster is less than 64 Million cells, it will be created only in memory,
            and a Save method should be called when ready to save it to a file.  Otherwise, it creates a blank file with
            NoData values.
            </summary>
            <param name="fileName">The fileName to write to</param>
            <param name="numRows">Integer number of rows</param>
            <param name="numColumns">Integer number of columns</param>
            <param name="inRam">If this is true and the raster is small enough, it will load this into memory and not save anything to the file.</param>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.Copy(System.String,System.Boolean)">
            <summary>
            Creates a duplicate version of this file.  If copyValues is set to false, then a raster of NoData values is created
            that has the same georeferencing information as the source file of this Raster, even if this raster is just a window.
            If the specified fileName exists, rather than throwing an exception or taking an "overwrite" parameter, this
            will throw the FileExists event, and cancel the copy if the cancel argument is set to true.
            </summary>
            <param name="fileName">The string fileName specifying where to create the new file.</param>
            <param name="copyValues">If this is false, the same size and georeferencing values are used, but they are all set to NoData.</param>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.CopyWindow(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            This creates a completely new raster from the windowed domain on the original raster.  This new raster
            will have a separate source file, and values like NumRowsInFile will correspond to the newly created file.
            All the values will be copied to the new source file.  If inRam = true and the new raster is small enough,
            the raster values will be loaded into memory.
            </summary>
            <param name="fileName"></param>
            <param name="startRow">The 0 based integer index of the top row to copy from this raster.  If this raster is itself a window, 0 represents the startRow from the file.</param>
            <param name="endRow">The integer index of the bottom row to copy from this raster.  The largest allowed value is NumRows - 1.</param>
            <param name="startColumn">The 0 based integer index of the leftmost column to copy from this raster.  If this raster is a window, 0 represents the startColumn from the file.</param>
            <param name="endColumn">The 0 based integer index of the rightmost column to copy from this raster.  The largest allowed value is NumColumns - 1</param>
            <param name="copyValues">If this is true, the values are saved to the file.  If this is false and the data can be loaded into Ram, no file handling is done.  Otherwise, a file of NoData values is created.</param>
            <param name="inRam">Boolean.  If this is true and the window is small enough, a copy of the values will be loaded into memory.</param>
            <returns>An implementation of IRaster</returns>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.GetStatistics">
            <summary>
            Gets the statistics for the entire file, not just the window portion specified for this raster.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.GetWindow(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This creates a window from this raster.  The window will still save to the same
            source file, but only has access to a small window of data, so it can be loaded like a buffer.
            The georeferenced extents will be for the new window, not the original raster.  startRow and endRow
            will exist in the new raster, however, so that it knows how to copy values back to the original raster.
            </summary>
            <param name="startRow">The 0 based integer index of the top row to get from this raster.  If this raster is itself a window, 0 represents the startRow from the file.</param>
            <param name="endRow">The integer index of the bottom row to get from this raster.  The largest allowed value is NumRows - 1.</param>
            <param name="startColumn">The 0 based integer index of the leftmost column to get from this raster.  If this raster is a window, 0 represents the startColumn from the file.</param>
            <param name="endColumn">The 0 based integer index of the rightmost column to get from this raster.  The largest allowed value is NumColumns - 1</param>
            <param name="inRam">Boolean.  If this is true and the window is small enough, a copy of the values will be loaded into memory.</param>
            <returns>An implementation of IRaster</returns>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.GetWindowStatistics">
            <summary>
            Obtains only the statistics for the small window specified by startRow, endRow etc.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.Open">
            <summary>
            Opens the specified file into this raster.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.Open(System.String,System.Boolean)">
            <summary>
            Opens a new instance of the BinaryRaster
            </summary>
            <param name="fileName">The string fileName of the raster file to open</param>
            <param name="inRam">Boolean, indicates whether or not the values for the raster should be loaded into memory</param>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.OpenWindow(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This converts this object into a raster defined by the specified window dimensions.
            </summary>
            <param name="fileName">The string fileName to open</param>
            <param name="startRow">The integer row index to become the first row to load into this raster.</param>
            <param name="endRow">The 0 based integer row index to become the last row included in this raster.</param>
            <param name="startColumn">The 0 based integer column index for the first column of the raster.</param>
            <param name="endColumn">The 0 based integer column index for the last column to include in this raster.</param>
            <param name="inRam">Boolean.  If this is true and the window is small enough, this will load the window into ram.</param>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.PasteRaster(DotSpatial.Data.Raster{`0},System.Int32,System.Int32)">
            <summary>
            Copies the contents from the specified sourceRaster into this sourceRaster.  If both rasters are InRam, this does not affect the files.
            </summary>
            <param name="sourceRaster">The raster of values to paste into this raster.  If the CellWidth and CellHeight values do not match between the files,
            an exception will be thrown.  If the sourceRaster overlaps with the edge of this raster, only the intersecting region will be
            pasted.</param>
            <param name="startRow">Specifies the row in this raster where the top row of the sourceRaster will be pasted </param>
            <param name="startColumn">Specifies the column in this raster where the left column of the sourceRaster will be pasted.</param>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.Read">
            <summary>
            Reads the the contents for the "window" specified by the start and end values
            for the rows and columns.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.ReadHeader(System.String)">
            <summary>
            Writes the header, regardless of which subtype of binary raster this is written for
            </summary>
            <param name="fileName">The string fileName specifying what file to load</param>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.WriteHeader(System.String)">
            <summary>
            The string fileName where this will begin to write data by clearing the existing file
            </summary>
            <param name="fileName">a fileName to write data to</param>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.WriteValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            This would be a horrible choice for any kind of serious process, but is provided as
            a way to write values directly to the file.
            </summary>
            <param name="row">The 0 based integer row index for the file to write to.</param>
            <param name="column">The 0 based column index for the file to write to.</param>
            <param name="value">The actual value to write.</param>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.Save">
            <summary>
            Saves the values in memory to the disk.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.BinaryRaster`1.Write(System.String)">
            <summary>
            If no file exists, this writes the header and no-data values.  If a file exists, it will assume
            that data already has been filled in the file and will attempt to insert the data values
            as a window into the file.  If you want to create a copy of the file and values, just use
            System.IO.File.Copy, it almost certainly would be much more optimized.
            </summary>
            <param name="fileName">The string fileName to write values to.</param>
        </member>
        <member name="P:DotSpatial.Data.BinaryRaster`1.ByteSize">
            <summary>
            Returns the size of T in bytes.  This should be overridden, but
            exists as a "just-in-case" implementation that works for structs,
            but definitely won't work correctly for objects.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BinaryRaster`1.FileType">
            <summary>
            All the binary rasters use the Binary file type
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BinaryRaster`1.NumBands">
            <summary>
            This is always 1 band
            </summary>
        </member>
        <member name="P:DotSpatial.Data.BinaryRaster`1.HeaderSize">
            <summary>
            Gets the size of the header.  There is one no-data value in the header.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.RasterEnumerator`1">
            <summary>
            RasterEnumerator
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterEnumerator`1.#ctor(System.Collections.Generic.List{DotSpatial.Data.Raster{`0}})">
            <summary>
            Creates a new instance of RasterEnumerator
            </summary>
            <param name="list">The list to build an enumarator for</param>
        </member>
        <member name="M:DotSpatial.Data.RasterEnumerator`1.Dispose">
            <summary>
            Disposes any unmanaged memory objects
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next member.
            </summary>
            <returns>A boolean which is false if there are no more members in the list.</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterEnumerator`1.Reset">
            <summary>
            Resets the enumerator to the position before the start of the list.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.RasterEnumerator`1.Current">
            <summary>
            Retrieves the current IntRaster from this calculator.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IRasterBounds">
            <summary>
            IRasterBounds
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IRasterBounds.Copy">
            <summary>
            Returns a deep copy of this raster bounds object.
            </summary>
            <returns>An IRasterBounds interface.</returns>
        </member>
        <member name="M:DotSpatial.Data.IRasterBounds.Open(System.String)">
            <summary>
            This is the overridable open method that should be used.
            The OpenWorldFile method is called by our RasterBounds class,
            but this allows custom files to be loaded and saved.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IRasterBounds.Save">
            <summary>
            This is the overridable save method that should be used.
            The OpenWorldFile method is called by our RasterBounds class,
            but this allows custom files to be loaded and saved.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRasterBounds.AffineCoefficients">
            <summary>
            Gets or sets the double affine coefficients that control the world-file
            positioning of this image.  X' and Y' are real world coords.
            X' = [0] + [1] * Column + [2] * Row
            Y' = [3] + [4] * Column + [5] * Row
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRasterBounds.CellWidth">
            <summary>
            Gets or sets the desired width per cell.  This will keep the skew the same, but
            will adjust both the column based and row based width coefficients in order
            to match the specified cell width.  This can be thought of as the width
            of a bounding box that contains an entire grid cell, no matter if it is skewed.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRasterBounds.CellHeight">
            <summary>
            Gets or sets the desired height per cell.  This will keep the skew the same, but
            will adjust both the column based and row based height coefficients in order
            to match the specified cell height.  This can be thought of as the height
            of a bounding box that contains an entire grid cell, no matter if it is skewed.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRasterBounds.Extent">
            <summary>
            Gets or sets the rectangular confines for this envelope.  The skew will remain
            the same when setting this, but the image will be translated and stretched
            to fit in the specified envelope.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRasterBounds.NumRows">
            <summary>
            Gets the number of rows in the raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRasterBounds.NumColumns">
            <summary>
            Gets the number of columns in the raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IRasterBounds.WorldFile">
            <summary>
            Gets or sets the world file name.  This won't do anything until the "Load" or "Save" methods are called.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IValueRow">
            <summary>
            A public interface definition for a single row of values that should be supported
            by any of the generic data row types.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IValueRow.Item(System.Int32)">
            <summary>
            Gets or sets the value in the position of column.
            </summary>
            <param name="cell">The 0 based integer column index to access on this row.</param>
            <returns>An object reference to the actual data value, which can be many types.</returns>
        </member>
        <member name="T:DotSpatial.Data.RasterBounds">
            <summary>
            RasterBounds
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterBounds.#ctor">
            <summary>
            Creates a new RasterBounds
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterBounds.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Attempts to read the very simple 6 number world file associated with an image
            </summary>
            <param name="numRows">The number of rows in this raster</param>
            <param name="numColumns">The number of columns in this raster</param>
            <param name="worldFileName">A world file to attempt to read</param>
        </member>
        <member name="M:DotSpatial.Data.RasterBounds.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Creates a new instance of the RasterBounds class
            </summary>
            <param name="numRows">The number of rows for this raster</param>
            <param name="numColumns">The number of columns for this raster</param>
            <param name="affineCoefficients">The affine coefficients describing the location of this raster.</param>
        </member>
        <member name="M:DotSpatial.Data.RasterBounds.#ctor(System.Int32,System.Int32,DotSpatial.Data.Extent)">
            <summary>
            Creates a new raster bounds that is georeferenced to the specified envelope.
            </summary>
            <param name="numRows">The number of rows</param>
            <param name="numColumns">The number of columns</param>
            <param name="bounds">The bounding envelope</param>
        </member>
        <member name="M:DotSpatial.Data.RasterBounds.Open(System.String)">
            <summary>
            Attempts to load the data from the file listed in WorldFile
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterBounds.Save">
            <summary>
            Attempts to save the data to the file listed in WorldFile
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RasterBounds.Clone">
            <summary>
            Returns a duplicate of this object as an object.
            </summary>
            <returns>A duplicate of this object as an object.</returns>
        </member>
        <member name="M:DotSpatial.Data.RasterBounds.Copy">
            <summary>
            Creates a duplicate of this RasterBounds class.
            </summary>
            <returns>A RasterBounds that has the same properties but does not point to the same internal array.</returns>
        </member>
        <member name="P:DotSpatial.Data.RasterBounds.AffineCoefficients">
            <summary>
            Gets or sets the double affine coefficients that control the world-file
            positioning of this image.  X' and Y' are real world coords.
            X' = [0] + [1] * Column + [2] * Row
            Y' = [3] + [4] * Column + [5] * Row
            </summary>
        </member>
        <member name="P:DotSpatial.Data.RasterBounds.CellWidth">
            <summary>
            Gets or sets the desired width per cell.  This will keep the skew the same, but
            will adjust both the column based and row based width coefficients in order
            to match the specified cell width.  This can be thought of as the width
            of a bounding box that contains an entire grid cell, no matter if it is skewed.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.RasterBounds.CellHeight">
            <summary>
            Gets or sets the desired height per cell.  This will keep the skew the same, but
            will adjust both the column based and row based height coefficients in order
            to match the specified cell height.  This can be thought of as the height
            of a bounding box that contains an entire grid cell, no matter if it is skewed.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.RasterBounds.Extent">
            <summary>
            Gets or sets the rectangular bounding box for this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.RasterBounds.Height">
            <summary>
            Gets or sets the height of the entire bounds.  This is derived by considering both the
            column and row based contributions to the overall height.  Changing this will keep
            the skew ratio the same, but adjust both portions so that the overall height
            will match the specified height.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.RasterBounds.NumRows">
            <summary>
            Gets the number of rows in the raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.RasterBounds.NumColumns">
            <summary>
            Gets the number of columns in the raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.RasterBounds.Width">
            <summary>
            Gets or sets the geographic width of this raster.  This will include the skew term
            in the width estimate, so it will adjust both the width and the skew coefficient,
            but preserve the ratio of skew to cell width.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.RasterBounds.WorldFile">
            <summary>
            Gets or sets the fileName of the wordfile that describes the geographic coordinates of this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.RasterBounds.X">
            <summary>
            Gets or sets the horizontal placement of the upper left corner of this bounds.  Because
            of the skew, this upper left position may not actually be the same as the upper left
            corner of the image itself (_affine[0]).  Instead, this is the top left corner of
            the rectangular extent for this raster.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.RasterBounds.Y">
            <summary>
            Gets or sets the vertical placement of the upper left corner of this bounds, which is the
            same as the top.  The top left corner of the actual image may not be in this position
            because of skew, but this represents the maximum Y value of the rectangular extents
            that contains the image.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.RasterDataType">
            <summary>
            Data types specific to grids
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.INVALID">
            <summary>
            An invalid data type
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.SHORT">
            <summary>
            Short 16 Bit integers
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.INTEGER">
            <summary>
            32 Bit Integers (old style long)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.SINGLE">
            <summary>
            Float or Single
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.DOUBLE">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.UNKNOWN">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.BYTE">
            <summary>
            Byte
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.CUSTOM">
            <summary>
            Specified as the CustomType string
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.LONG">
            <summary>
            Signed 64 Bit Integers
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.USHORT">
            <summary>
            Unsigned short 16 Bit Integers
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.UINTEGER">
            <summary>
            Unsigned 32 Bit Integers
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.ULONG">
            <summary>
            Unsigned 64 Bit Integers
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.SBYTE">
            <summary>
            Signed 8-bit Integers: -128 to 127
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterDataType.BOOL">
            <summary>
            Booleans: True(1) or False(0).
            </summary>
        </member>
        <member name="T:DotSpatial.Data.RasterFileType">
            <summary>
            RasterFileTypes
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileType.ASCII">
            <summary>
            Ascii
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileType.BIL">
            <summary>
            Binary interlaced Layers
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileType.BINARY">
            <summary>
            BGD (Original DotSpatial format)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileType.DTED">
            <summary>
            DTED
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileType.ECW">
            <summary>
            Wavelet format
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileType.ESRI">
            <summary>
            ArcGIS format
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileType.FLT">
            <summary>
            FLT
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileType.GeoTiff">
            <summary>
            GeoTiff
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileType.MrSID">
            <summary>
            SID
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileType.PAUX">
            <summary>
            AUX
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileType.PCIDsk">
            <summary>
            PCIDsk
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileType.SDTS">
            <summary>
            SDTS
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RasterFileType.CUSTOM">
            <summary>
            Custom - specified as string
            </summary>
        </member>
        <member name="T:DotSpatial.Data.RcIndex">
            <summary>
            A Row, Column indexer for some return types.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RcIndex.Column">
            <summary>
            The zero based integer column index
            </summary>
        </member>
        <member name="F:DotSpatial.Data.RcIndex.Row">
            <summary>
            The zero based integer row index
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RcIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new RcIndex structure with the specified coordinates
            </summary>
            <param name="row">The integer row index</param>
            <param name="column">The integer column index</param>
        </member>
        <member name="M:DotSpatial.Data.RcIndex.IsEmpty">
            <summary>
            Gets a boolean that is true if either row or column index has no value
            </summary>
            <returns>Boolean, true if either row or column has no value</returns>
        </member>
        <member name="M:DotSpatial.Data.RcIndex.op_Equality(DotSpatial.Data.RcIndex,DotSpatial.Data.RcIndex)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.RcIndex.op_Inequality(DotSpatial.Data.RcIndex,DotSpatial.Data.RcIndex)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:DotSpatial.Data.RcIndex.Empty">
            <summary>
            Returns a new RcIndex that is defined as empty when both indices are int.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Smoother.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a new instance of Smoother
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Smoother.#ctor(System.Int32,System.Int32,System.Int32,System.IntPtr,DotSpatial.Data.IProgressHandler)">
            <summary>
            Creates a new instance of Smoother with IntPtr for input array
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Smoother.Smooth">
            <summary>
            Calculates the smoothing by cycling through the values
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ScaleBarInfo">
            <summary>
            ScaleBarInfo
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ScaleBarInfo.BackColor">
            <summary>
            Gets or sets the backcolor
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ScaleBarInfo.ForeColor">
            <summary>
            Gets or sets the forecolor
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ScaleBarInfo.Position">
            <summary>
            Gets or sets what position that the scalebar should load in
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ScaleBarInfo.Unit">
            <summary>
            Gets or sets the unit for the scalebar.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ScaleBarInfo.Visible">
            <summary>
            Gets or sets whether to show the scale bar.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ScaleBarPosition">
            <summary>
            ScaleBarPositions
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ScaleBarPosition.LowerLeft">
            <summary>
            The scalebar should appear in the lower left corner
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ScaleBarPosition.LowerRight">
            <summary>
            The scalebar should appear in the lower right corner
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ScaleBarPosition.UpperLeft">
            <summary>
            The scalebar should appear in the upper left corner
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ScaleBarPosition.UpperRight">
            <summary>
            The scalebar should apepar int eh upper right corner
            </summary>
        </member>
        <member name="T:DotSpatial.Data.SpaceTimeSupport">
            <summary>
            SpaceTimeSupport
            </summary>
        </member>
        <member name="F:DotSpatial.Data.SpaceTimeSupport.Spatial">
            <summary>
            Spatial (X, Y, Z or M information only)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.SpaceTimeSupport.Temporal">
            <summary>
            Temporal (time information only)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.SpaceTimeSupport.SpatioTemporal">
            <summary>
            SpatioTemporal (time and space information)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.SpaceTimeSupport.Other">
            <summary>
            Other (no temporal or spatial information)
            </summary>
        </member>
        <member name="T:DotSpatial.Data.StatusBarInfo">
            <summary>
            StatusBarInfo
            </summary>
        </member>
        <member name="P:DotSpatial.Data.StatusBarInfo.Alternate">
            <summary>
            Gets or sets the alternate string to show in the event that GetFromProjection is false.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.StatusBarInfo.GetFromProjection">
            <summary>
            Gets or sets a boolean indicating whether or not status bar coordinates should display the unites derived from the projection string.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.StreamExt">
            <summary>
            Stream extensions
            </summary>
        </member>
        <member name="M:DotSpatial.Data.StreamExt.ReadBytes(System.IO.Stream,System.Int32)">
            <summary>
            Attempts to read count of bytes from stream.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="count">Count of bytes.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:DotSpatial.Data.StreamExt.ReadInt32(System.IO.Stream,DotSpatial.Data.Endian)">
            <summary>
            Attempts to read the specified T.  If this system is
            doesn't match the specified endian, then this will reverse the array of bytes,
            so that it corresponds with the big-endian format.
            </summary>
            <param name="stream">The stream to read the value from</param>
            <param name="endian">Specifies what endian property should be used.</param>
            <returns>The integer value</returns>
        </member>
        <member name="M:DotSpatial.Data.StreamExt.ReadInt32(System.IO.Stream,System.Int32,DotSpatial.Data.Endian)">
            <summary>
            Reads the specified number of integers.  If a value other than the
            systems endian format is specified the values will be reversed.
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="count">The integer count of integers to read</param>
            <param name="endian">The endian order of the bytes.</param>
            <returns>The array of integers that will have count integers.</returns>
        </member>
        <member name="M:DotSpatial.Data.StreamExt.ReadDouble(System.IO.Stream)">
            <summary>
            Reads a double precision value from the stream.  If this system
            is not little endian, it will reverse the individual memebrs.
            </summary>
            <param name="stream">The stream to read the values from.</param>
            <returns>A double precision value</returns>
        </member>
        <member name="M:DotSpatial.Data.StreamExt.ReadDouble(System.IO.Stream,System.Int32,DotSpatial.Data.Endian)">
            <summary>
            Reads the specified number of double precision values.  If this system
            does not match the specified endian, the bytes will be reversed.
            </summary>
            <param name="stream">The stream to read the values from.</param>
            <param name="count">The integer count of doubles to read.</param>
            <param name="endian">The endian to use.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.StreamExt.WriteBe(System.IO.Stream,System.Int32)">
            <summary>
            Writes the integer as big endian
            </summary>
            <param name="stream">The IO stream </param>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.StreamExt.WriteLe(System.IO.Stream,System.Int32)">
            <summary>
            Writes the endian as little endian
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.StreamExt.WriteLe(System.IO.Stream,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Checks that the endian order is ok for integers and then writes
            the entire array to the stream.
            </summary>
            <param name="stream"></param>
            <param name="values"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:DotSpatial.Data.StreamExt.WriteLe(System.IO.Stream,System.Double)">
            <summary>
            Writes the specified double value to the stream as little endian
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:DotSpatial.Data.StreamExt.WriteLe(System.IO.Stream,System.Double[],System.Int32,System.Int32)">
            <summary>
            Checks that the endian order is ok for doubles and then writes
            the entire array to the stream.
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="values">The double values to write in little endian form</param>
            <param name="startIndex">The integer start index in the double array to begin writing</param>
            <param name="count">The integer count of doubles to write.</param>
        </member>
        <member name="T:DotSpatial.Data.ByteBlock">
            <summary>
            ByteBlock
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ByteBlock.BlockSize">
            <summary>
            The block size of the arrays
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ByteBlock.Blocks">
            <summary>
            All the blocks
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ByteBlock.CurrentBlock">
            <summary>
            The current block index
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ByteBlock.Offset">
            <summary>
            The offset
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ByteBlock.#ctor(System.Int32)">
            <summary>
            Creates a new instance of ByteBlock
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ByteBlock.Read(System.Int32,System.IO.Stream)">
            <summary>
            Reads the number of bytes using the specified reader.
            This handles copying across blocks if necessary.
            </summary>
            <param name="numBytes">The integer number of bytes to read</param>
            <param name="stream">The file or data stream to read from.</param>
        </member>
        <member name="M:DotSpatial.Data.ByteBlock.Read(System.Int32,DotSpatial.Data.BufferedBinaryReader)">
            <summary>
            Reads the number of bytes using the specified reader.
            This handles copying across blocks if necessary.
            </summary>
            <param name="numBytes"></param>
            <param name="reader"></param>
        </member>
        <member name="M:DotSpatial.Data.ByteBlock.IntOffset">
            <summary>
            If the bytes were converted to a single, contiguous integer array, this returns
            the current offset in that array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ByteBlock.DoubleOffset">
            <summary>
            If the bytes were converted to a single contiguous double array, this returns
            the offset in that array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ByteBlock.Reset">
            <summary>
            Resets the indices
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ByteBlock.ToIntArray">
            <summary>
            Combines all the blocks into a single array of the specified datatype
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ByteBlock.ToDoubleArray">
            <summary>
            Combines all the blocks into a single array of the specified datatype
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.Feature">
            <summary>
            A generic vector feature that has the geometry and data components but no drawing information
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IFeature">
            <summary>
            A feature doesn't need to be abstract because the geometry is generic and the other
            properties are all the same.  It supports IRenderable so that even if you don't
            know what type of feature this is, you can still tell it to draw itself.  You won't
            be able to specify any drawing characteristics from this object however.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IFeature.Copy">
            <summary>
            Creates a deep copy of this feature.  the new datarow created will not be connected
            to a data Table, so it should be added to one.
            </summary>
            <returns>Returns a deep copy of this feature as an IFeature</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeature.ToShape">
            <summary>
            Creates a new shape based on this feature by itself.
            </summary>
            <returns>A Shape object</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeature.CopyAttributes(DotSpatial.Data.IFeature)">
            <summary>
            This uses the field names to copy attribute values from the source to this feature.
            Even if columns are missing or if there are extra columns, this method should work.
            </summary>
            <param name="source">The IFeature source to copy attributes from.</param>
        </member>
        <member name="P:DotSpatial.Data.IFeature.DataRow">
            <summary>
            Gets the datarow containing all the attributes related to this geometry
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeature.BasicGeometry">
            <summary>
            Gets or sets a valid IBasicGeometry associated with the data elements of this feature.
            This will be enough geometry information to cast into a full fledged geometry
            that can be used in coordination with DotSpatial.Analysis
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeature.ContentLength">
            <summary>
            Gets or sets the content length.  If the geometry for this shape was loaded from a file, this contains the size
            of this shape in 16-bit words as per the Esri Shapefile specification.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeature.EnvelopeSource">
            <summary>
            Gets or sets a DotSpatial.Data.CacheTypes enumeration specifying whether the Envelope property
            returns a cached value in this object or is retrieved directly from the geometry.  The
            initial case for Shapefiles is to use a cache.  Setting the envelope assumes that you
            are going to use a cached value and will set this to Cached.  Setting this to Dynamic
            will cause the Envelope property to reference the geometry.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeature.Fid">
            <summary>
            Gets the key that is associated with this feature.  This returns -1 if
            this feature is not a member of a feature layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeature.ParentFeatureSet">
            <summary>
            Gets a reference to the IFeatureLayer that contains this item.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeature.RecordNumber">
            <summary>
            An index value that is saved in some file formats.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeature.ShapeType">
            <summary>
            When a shape is loaded from a Shapefile, this will identify whether M or Z values are used
            and whether or not the shape is null.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeature.ShapeIndex">
            <summary>
            This is simply a quick access to the Vertices list for this specific
            feature.  If the Vertices have not yet been defined, this will be null.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.Feature.ComparisonField">
            <summary>
            Gets or sets the column to use when sorting lists of features.
            If this is set to a column not in the field, the FID is used instead.
            This should be assigned before attempting to sort features.  Because
            this is static, it only has to be set once, and will affect
            all the individual comparisions until it is set differently.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Feature.#ctor(DotSpatial.Data.Shape)">
            <summary>
            Creates a feature from the specified shape.  This will not handle the attribute content,
            which should be handles separately, with full knowledge of the desired schema.
            </summary>
            <param name="shape">The shape to read the vertices from in order to build a proper geometry.</param>
        </member>
        <member name="M:DotSpatial.Data.Feature.#ctor(DotSpatial.Data.Vertex)">
            <summary>
            Creates a complete geometric feature based on a single point.  The attribute datarow is null.
            </summary>
            <param name="point">The vertex</param>
        </member>
        <member name="M:DotSpatial.Data.Feature.#ctor(DotSpatial.Topology.Coordinate)">
            <summary>
            Creates a single point feature from a new point.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:DotSpatial.Data.Feature.#ctor(DotSpatial.Topology.IBasicGeometry)">
            <summary>
            Creates a feature from a geometry
            </summary>
            <param name="geometry">The geometry to turn into a feature</param>
        </member>
        <member name="M:DotSpatial.Data.Feature.#ctor(DotSpatial.Topology.IBasicGeometry,DotSpatial.Data.IFeatureSet)">
            <summary>
            This constructor allows the creation of a feature but will automatically
            add the feature to the parent featureset.
            </summary>
            <param name="geometry">The IBasicGeometry to use for this feature</param>
            <param name="parent">The IFeatureSet to add this feature to.</param>
        </member>
        <member name="M:DotSpatial.Data.Feature.#ctor">
            <summary>
            Constructs a new Feature
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Feature.#ctor(DotSpatial.Topology.FeatureType,System.Collections.Generic.IEnumerable{DotSpatial.Topology.Coordinate})">
            <summary>
            Creates a new instance of a feature, by specifying the feature type enumeration and a
            set of coordinates that can be either a list or an array as long as it is enumerable.
            </summary>
            <param name="featureType">The feature type</param>
            <param name="coordinates">The coordinates to pass</param>
        </member>
        <member name="M:DotSpatial.Data.Feature.System#IComparable{DotSpatial#Data#IFeature}#CompareTo(DotSpatial.Data.IFeature)">
            <summary>
            The FID comparison will be very slow, so this should only be used
            if the ComparisonField property is set.  This will allow sorting
            features based on their data-row attributes.  The data rows
            do not have to be identical, as long as both contain a column
            with the comparison field.
            </summary>
            <param name="other">The other IFeature to compare to.</param>
            <returns>An integer that controls the sorting based on the values for the specified field name.</returns>
        </member>
        <member name="M:DotSpatial.Data.Feature.GetBasicGeometryN(System.Int32)">
            <summary>
            This returns itself as the first geometry
            </summary>
            <returns>An IBasicGeometry interface</returns>
            <exception cref="T:System.IndexOutOfRangeException">Index cannot be less than 0 or greater than 1</exception>
        </member>
        <member name="M:DotSpatial.Data.Feature.PointInList(DotSpatial.Topology.Coordinate,System.Collections.Generic.IEnumerable{DotSpatial.Topology.Coordinate})">
            <summary>
            Test if a point is in a list of coordinates.
            </summary>
            <param name="testPoint">TestPoint the point to test for.</param>
            <param name="pointList">PointList the list of points to look through.</param>
            <returns>true if testPoint is a point in the pointList list.</returns>
        </member>
        <member name="M:DotSpatial.Data.Feature.DotSpatial#Data#IFeature#Copy">
            <summary>
            Creates a deep copy of this feature.
            </summary>
            <returns>Returns a deep copy of this feature as an IFeature</returns>
        </member>
        <member name="M:DotSpatial.Data.Feature.CopyAttributes(DotSpatial.Data.IFeature)">
            <summary>
            This uses the field names to copy attribute values from the source to this feature.
            Even if columns are missing or if there are extra columns, this method should work.
            </summary>
            <param name="source">The IFeature source to copy attributes from.</param>
        </member>
        <member name="M:DotSpatial.Data.Feature.System#ICloneable#Clone">
            <summary>
            Creates a deep copy of this feature.
            </summary>
            <returns>Returns a deep copy of this feature as an object</returns>
        </member>
        <member name="M:DotSpatial.Data.Feature.UpdateEnvelope">
            <summary>
            Forces the geometry to update its envelope, and then updates the cached envelope of the feature.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Feature.ExportToGml">
            <summary>
            Creates a new GML string describing the location of this point
            </summary>
            <returns>A String representing the Geographic Markup Language version of this point</returns>
        </member>
        <member name="M:DotSpatial.Data.Feature.ToBinary">
            <summary>
            Returns the Well-known Binary representation of this <c>Geometry</c>.
            For a definition of the Well-known Binary format, see the OpenGIS Simple
            Features Specification.
            </summary>
            <returns>The Well-known Binary representation of this <c>Geometry</c>.</returns>
        </member>
        <member name="M:DotSpatial.Data.Feature.ToShape">
            <summary>
            Creates a new shape based on this feature by itself.
            </summary>
            <returns>A Shape object</returns>
        </member>
        <member name="M:DotSpatial.Data.Feature.Copy">
            <summary>
            Copies this feature, creating an independant, but identical feature.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Feature.OnCopy(DotSpatial.Data.Feature)">
            <summary>
            Occurs during the cloning process and this method also duplicates the envelope and basic geometry.
            </summary>
            <param name="copy">The feature being copied</param>
        </member>
        <member name="P:DotSpatial.Data.Feature.NumParts">
            <summary>
            Gets or sets the integer number of parts associated with this feature.
            Setting this will set a cached value on the feature that is separate
            from the geometry and set the NumParts to Cached.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.NumPartsSource">
            <summary>
            Gets or sets a DotSpatial.Data.CacheTypes enumeration.  If the value
            is dynamic, then NumParts will be read from the geometry on this feature.
            If it is cached, then the value is separate from the geometry.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.Offset">
            <summary>
            This specifies the offset, if any in the data file
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.BasicGeometry">
            <summary>
            Gets or sets a valid IBasicGeometry associated with the data elements of this feature.
            This will be enough geometry information to cast into a full fledged geometry
            that can be used in coordination with DotSpatial.Analysis
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.ContentLength">
            <summary>
            If the geometry for this shape was loaded from a file, this contains the size
            of this shape in 16-bit words as per the Esri Shapefile specification.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.Coordinates">
            <summary>
            Returns an array of coordinates corresponding to the basic feature.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.DataRow">
            <summary>
            Gets the datarow containing all the attributes related to this geometry.
            This will query the parent feature layer's data Table by FID and then
            cache the value locally.  If no parent feature layer exists, then
            this is meaningless.  You should create a new Feature by doing
            FeatureLayer.Features.Add(), which will return a new Feature.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.Envelope">
            <summary>
            This is an envelope, but specified by the file, not by calculating from the geometry.
            To obtain a calculated envelope, calling the DynamicEnvelope()
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.EnvelopeSource">
            <summary>
            Gets or sets a DotSpatial.Data.CacheTypes enumeration specifying whether the Envelope property
            returns a cached value in this object or is retrieved directly from the geometry.  The
            initial case for Shapefiles is to use a cache.  Setting the envelope assumes that you
            are going to use a cached value and will set this to Cached.  Setting this to Dynamic
            will cause the Envelope property to reference the geometry.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.FeatureType">
            <summary>
            Returns either Point, Polygon or Line
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.Fid">
            <summary>
            Gets the key that is associated with this feature.  This returns -1 if
            this feature is not a member of a feature layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.GeometryType">
            <summary>
            Shows the type of geometry for this feature
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.NumGeometries">
            <summary>
            Returns the NumGeometries in the BasicGeometry of this feature
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.NumPoints">
            <summary>
            Gets the integer number of points associated with features.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.RecordNumber">
            <summary>
            An index value that is saved in some file formats.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.ParentFeatureSet">
            <summary>
            Gets a reference to the IFeatureLayer that contains this item.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.ShapeType">
            <summary>
            When a shape is loaded from a Shapefile, this will identify whether M or Z values are used
            and whether or not the shape is null.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Feature.ShapeIndex">
            <summary>
            This is simply a quick access to the Vertices list for this specific
            feature. If the Vertices have not yet been defined, this will be null.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.FeatureExt">
            <summary>
            Extension Methods for the Features
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Area(DotSpatial.Data.IFeature)">
            <summary>
            Calculates the area of the geometric portion of this feature.  This is 0 unless the feature
            is a polygon, or multi-polygon.
            </summary>
            <param name="self">The feature to test</param>
            <returns>The double valued area</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Buffer(DotSpatial.Data.IFeature,System.Double)">
            <summary>
            Generates a new feature from the buffer of this feature.  The DataRow of
            the new feature will be null.
            </summary>
            <param name="self">This feature</param>
            <param name="distance">The double distance</param>
            <returns>An IFeature representing the output from the buffer operation</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Buffer(DotSpatial.Data.IFeature,System.Double,DotSpatial.Topology.BufferStyle)">
            <summary>
            Generates a new feature from the buffer of this feature.  The DataRow of
            the new feature will be null.
            </summary>
            <param name="self">This feature</param>
            <param name="distance">The double distance</param>
            <param name="endCapStyle">The end cap style to use</param>
            <returns>An IFeature representing the output from the buffer operation</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Buffer(DotSpatial.Data.IFeature,System.Double,System.Int32)">
            <summary>
            Generates a new feature from the buffer of this feature.  The DataRow of
            the new feature will be null.
            </summary>
            <param name="self">This feature</param>
            <param name="distance">The double distance</param>
            <param name="quadrantSegments">The number of segments to use to approximate a quadrant of a circle</param>
            <returns>An IFeature representing the output from the buffer operation</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Buffer(DotSpatial.Data.IFeature,System.Double,System.Int32,DotSpatial.Topology.BufferStyle)">
            <summary>
            Generates a new feature from the buffer of this feature.  The DataRow of
            the new feature will be null.
            </summary>
            <param name="self">This feature</param>
            <param name="distance">The double distance</param>
            <param name="quadrantSegments">The number of segments to use to approximate a quadrant of a circle</param>
            <param name="endCapStyle">The end cap style to use</param>
            <returns>An IFeature representing the output from the buffer operation</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Buffer(DotSpatial.Data.IFeature,System.Double,DotSpatial.Data.IFeatureSet)">
            <summary>
            Generates a buffer, but also adds the newly created feature to the specified output featureset.
            This will also compare the field names of the input featureset with the destination featureset.
            If a column name exists in both places, it will copy those values to the destination featureset.
            </summary>
            <param name="self">The feature to calcualate the buffer for.</param>
            <param name="distance">The double distance to use for calculating the buffer</param>
            <param name="destinationFeatureset">The output featureset to add this feature to and use
            as a reference for determining which data columns to copy.</param>
            <returns>The IFeature that represents the buffer feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Buffer(DotSpatial.Data.IFeature,System.Double,DotSpatial.Topology.BufferStyle,DotSpatial.Data.IFeatureSet)">
            <summary>
            Generates a buffer, but also adds the newly created feature to the specified output featureset.
            This will also compare the field names of the input featureset with the destination featureset.
            If a column name exists in both places, it will copy those values to the destination featureset.
            </summary>
            <param name="self">The feature to calcualate the buffer for.</param>
            <param name="distance">The double distance to use for calculating the buffer</param>
            <param name="endCapStyle">The end cap style to use</param>
            <param name="destinationFeatureset">The output featureset to add this feature to and use
            as a reference for determining which data columns to copy.</param>
            <returns>The IFeature that represents the buffer feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Buffer(DotSpatial.Data.IFeature,System.Double,System.Int32,DotSpatial.Data.IFeatureSet)">
            <summary>
            Generates a buffer, but also adds the newly created feature to the specified output featureset.
            This will also compare the field names of the input featureset with the destination featureset.
            If a column name exists in both places, it will copy those values to the destination featureset.
            </summary>
            <param name="self">The feature to calcualate the buffer for.</param>
            <param name="distance">The double distance to use for calculating the buffer</param>
            <param name="quadrantSegments">The number of segments to use to approximate a quadrant of a circle</param>
            <param name="destinationFeatureset">The output featureset to add this feature to and use
            as a reference for determining which data columns to copy.</param>
            <returns>The IFeature that represents the buffer feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Buffer(DotSpatial.Data.IFeature,System.Double,System.Int32,DotSpatial.Topology.BufferStyle,DotSpatial.Data.IFeatureSet)">
            <summary>
            Generates a buffer, but also adds the newly created feature to the specified output featureset.
            This will also compare the field names of the input featureset with the destination featureset.
            If a column name exists in both places, it will copy those values to the destination featureset.
            </summary>
            <param name="self">The feature to calcualate the buffer for.</param>
            <param name="distance">The double distance to use for calculating the buffer</param>
            <param name="quadrantSegments">The number of segments to use to approximate a quadrant of a circle</param>
            <param name="endCapStyle">The end cap style to use</param>
            <param name="destinationFeatureset">The output featureset to add this feature to and use
            as a reference for determining which data columns to copy.</param>
            <returns>The IFeature that represents the buffer feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Centroid(DotSpatial.Data.IFeature)">
            <summary>
            Returns a feature constructed from the centroid of this feature
            </summary>
            <param name="self">This feature</param>
            <returns>An IFeature that is also a point geometry</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Contains(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Gets a boolean that is true if this feature contains the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <returns>Boolean, true if this feature contains the other feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Contains(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Gets a boolean that is true if this feature contains the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <returns>Boolean, true if this feature contains the other feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.ConvexHull(DotSpatial.Data.IFeature)">
            <summary>
            Calculates a new feature that has a geometry that is the convex hull of this feature.
            </summary>
            <param name="self">This feature</param>
            <returns>A new feature that is the convex hull of this feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.ConvexHull(DotSpatial.Data.IFeature,DotSpatial.Data.IFeatureSet)">
            <summary>
            Calculates a new feature that has a geometry that is the convex hull of this feature.
            This also copies the attributes that are shared between this featureset and the
            specified destination featureset, and adds this feature to the destination featureset.
            </summary>
            <param name="self">This feature</param>
            <param name="destinationFeatureset">The destination featureset to add this feature to</param>
            <returns>The newly created IFeature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.CoveredBy(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Gets a boolean that is true if the geometry of this feature is covered by the geometry
            of the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The feature to compare this feature to</param>
            <returns>Boolean, true if this feature is covered by the specified feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.CoveredBy(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Gets a boolean that is true if the geometry of this feature is covered by the geometry
            of the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The feature to compare this feature to</param>
            <returns>Boolean, true if this feature is covered by the specified feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Covers(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Gets a boolean that is true if the geometry of this feature covers the geometry
            of the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The feature to compare this feature to</param>
            <returns>Boolean, true if this feature covers the specified feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Covers(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Gets a boolean that is true if the geometry of this feature covers the geometry
            of the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The feature to compare this feature to</param>
            <returns>Boolean, true if this feature covers the specified feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Crosses(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Gets a boolean that is true if the geometry of this feature crosses the geometry
            of the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The feature to compare this feature to</param>
            <returns>Boolean, true if this feature crosses the specified feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Crosses(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Gets a boolean that is true if the geometry of this feature crosses the geometry
            of the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The feature to compare this feature to</param>
            <returns>Boolean, true if this feature crosses the specified feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Difference(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Creates a new Feature that has a geometry that is the difference between this feature and the specified feature.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to compare to.</param>
            <returns>A new feature that is the geometric difference between this feature and the specified feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Difference(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Creates a new Feature that has a geometry that is the difference between this feature and the specified feature.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to compare to.</param>
            <returns>A new feature that is the geometric difference between this feature and the specified feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Difference(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature,DotSpatial.Data.IFeatureSet,DotSpatial.Data.FieldJoinType)">
            <summary>
            Creates a new Feature that has a geometry that is the difference between this feature and the specified feature.
            This also copies the attributes that are shared between this featureset and the
            specified destination featureset, and adds this feature to the destination featureset.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to compare to.</param>
            <param name="destinationFeatureSet">The featureset to add the new feature to.</param>
            <param name="joinType">This clarifies the overall join strategy being used with regards to attribute fields.</param>
            <returns>A new feature that is the geometric difference between this feature and the specified feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Disjoint(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Gets a boolean that is true if the geometry of this feature is disjoint with the geometry
            of the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The feature to compare this feature to</param>
            <returns>Boolean, true if this feature is disjoint with the specified feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Disjoint(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Gets a boolean that is true if the geometry of this feature is disjoint with the geometry
            of the specified feature.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The feature to compare this feature to</param>
            <returns>Boolean, true if this feature is disjoint with the specified feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Distance(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Distance between features.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The feature to compare this feature to</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Distance(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Gets a boolean that is true if the geometry of this feature is disjoint with the geometry
            of the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The feature to compare this feature to</param>
            <returns>Boolean, true if this feature is disjoint with the specified feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Intersection(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Creates a new Feature that has a geometry that is the intersection between this feature and the specified feature.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to compare to.</param>
            <returns>A new feature that is the geometric intersection between this feature and the specified feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Intersection(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Creates a new Feature that has a geometry that is the intersection between this feature and the specified feature.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to compare to.</param>
            <returns>A new feature that is the geometric intersection between this feature and the specified feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Intersection(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature,DotSpatial.Data.IFeatureSet,DotSpatial.Data.FieldJoinType)">
            <summary>
            Creates a new Feature that has a geometry that is the intersection between this feature and the specified feature.
            This also copies the attributes that are shared between this featureset and the
            specified destination featureset, and adds this feature to the destination featureset.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to compare to.</param>
            <param name="destinationFeatureSet">The featureset to add the new feature to.</param>
            <param name="joinType">This clarifies the overall join strategy being used with regards to attribute fields.</param>
            <returns>A new feature that is the geometric intersection between this feature and the specified feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Intersects(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Gets a boolean that is true if this feature intersects the other feature.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <returns>Boolean, true if the two IFeatures intersect</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Intersects(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Gets a boolean that is true if this feature intersects the other feature.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <returns>Boolean, true if the two IFeatures intersect</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Intersects(DotSpatial.Data.IFeature,DotSpatial.Topology.Coordinate)">
            <summary>
            This tests the current feature to see if the geometry intersects with the specified
            coordinate.
            </summary>
            <param name="self">This feature</param>
            <param name="coordinate">The coordinate</param>
            <returns>Boolean if the coordinate intersects with this feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.IsWithinDistance(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature,System.Double)">
            <summary>
            Gets a boolean that is true if this feature is within the specified distance of the other feature.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <param name="distance">The double distance criteria</param>
            <returns>Boolean, true if the other feature is within the specified distance of this feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.IsWithinDistance(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry,System.Double)">
            <summary>
            Gets a boolean that is true if this feature is within the specified distance of the other feature.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <param name="distance">The double distance criteria</param>
            <returns>Boolean, true if the other feature is within the specified distance of this feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Overlaps(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Gets a boolean that is true if this feature overlaps the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <returns>Boolean, true if the two IFeatures overlap</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Overlaps(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Gets a boolean that is true if this feature overlaps the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <returns>Boolean, true if the two IFeatures overlap</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Relates(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature,System.String)">
            <summary>
            Gets a boolean that is true if the relationship between this feature and the other feature
            matches the relationship matrix specified by other
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <param name="intersectionPattern">The string relationship pattern to test</param>
            <returns>Boolean, true if the other feature's relationship to this feature matches the relate expression.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Relates(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry,System.String)">
            <summary>
            Gets a boolean that is true if the relationship between this feature and the other feature
            matches the relationship matrix specified by other
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <param name="intersectionPattern">The string relationship pattern to test</param>
            <returns>Boolean, true if the other feature's relationship to this feature matches the relate expression.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Rotate(DotSpatial.Data.IFeature,DotSpatial.Topology.Coordinate,System.Double)">
            <summary>
            Rotates the BasicGeometry of the feature by the given radian angle around the given Origin.
            </summary>
            <param name="self">This feature.</param>
            <param name="Origin">The coordinate the feature gets rotated around.</param>
            <param name="radAngle">The rotation angle in radian.</param>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.SymmetricDifference(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Creates a new Feature that has a geometry that is the symmetric difference between this feature and the specified feature.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to compare to.</param>
            <returns>A new feature that is the geometric symmetric difference between this feature and the specified feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.SymmetricDifference(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Creates a new Feature that has a geometry that is the symmetric difference between this feature and the specified feature.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to compare to.</param>
            <returns>A new feature that is the geometric symmetric difference between this feature and the specified feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.SymmetricDifference(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature,DotSpatial.Data.IFeatureSet,DotSpatial.Data.FieldJoinType)">
            <summary>
            Creates a new Feature that has a geometry that is the symmetric difference between this feature and the specified feature.
            This also copies the attributes that are shared between this featureset and the
            specified destination featureset, and adds this feature to the destination featureset.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to compare to.</param>
            <param name="destinationFeatureSet">The featureset to add the new feature to.</param>
            <param name="joinType">This clarifies the overall join strategy being used with regards to attribute fields.</param>
            <returns>A new feature that is the geometric symmetric difference between this feature and the specified feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Touches(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Gets a boolean that is true if this feature touches the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <returns>Boolean, true if the two IFeatures touch</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Touches(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Gets a boolean that is true if this feature touches the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <returns>Boolean, true if the two IFeatures touch</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Union(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Creates a new Feature that has a geometry that is the union between this feature and the specified feature.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to compare to.</param>
            <returns>A new feature that is the geometric union between this feature and the specified feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Union(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Creates a new Feature that has a geometry that is the union between this feature and the specified feature.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to compare to.</param>
            <returns>A new feature that is the geometric union between this feature and the specified feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Union(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature,DotSpatial.Data.IFeatureSet,DotSpatial.Data.FieldJoinType)">
            <summary>
            Creates a new Feature that has a geometry that is the union between this feature and the specified feature.
            This also copies the attributes that are shared between this featureset and the
            specified destination featureset, and adds this feature to the destination featureset.
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to compare to.</param>
            <param name="destinationFeatureSet">The featureset to add the new feature to.</param>
            <param name="joinType">Clarifies how the attributes should be handled during the union</param>
            <returns>A new feature that is the geometric symmetric difference between this feature and the specified feature.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Within(DotSpatial.Data.IFeature,DotSpatial.Data.IFeature)">
            <summary>
            Gets a boolean that is true if this feature is within the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <returns>Boolean, true if this feature is within the specified feature</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureExt.Within(DotSpatial.Data.IFeature,DotSpatial.Topology.IGeometry)">
            <summary>
            Gets a boolean that is true if this feature is within the specified feature
            </summary>
            <param name="self">This feature</param>
            <param name="other">The other feature to test</param>
            <returns>Boolean, true if this feature is within the specified feature</returns>
        </member>
        <member name="T:DotSpatial.Data.FeatureEventArgs">
            <summary>
            FeatureEvent
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureEventArgs.#ctor(DotSpatial.Data.IFeature)">
            <summary>
            Creates a new instance of FeatureEvent
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureEventArgs.Feature">
            <summary>
            Gets the feature being referenced by this event.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.FeatureList">
            <summary>
            A list that keeps track of a "parent" body that is also of type IFeature.
            Whenever a member is added to the list, it sets the parent property.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IFeatureList">
            <summary>
            IFeatureList
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IFeatureList.ResumeEvents">
            <summary>
            Resumes events
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IFeatureList.SuspendEvents">
            <summary>
            Temporarilly disables events
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IFeatureList.ToList">
            <summary>
            This is a re-expression of the features using a strong typed
            list.  This may be the inner list or a copy depending on
            implementation.
            </summary>
            <returns>The features as a List of IFeature.</returns>
        </member>
        <member name="E:DotSpatial.Data.IFeatureList.FeatureAdded">
            <summary>
            Occurs when a new feature is added to the list
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IFeatureList.FeatureRemoved">
            <summary>
            Occurs when a feature is removed from the list.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureList.EventsSuspended">
            <summary>
            Gets or sets whether or not the events have been suspended
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureList.IncludeAttributes">
            <summary>
            If this is false, then features will be added to the list without copying over attribute Table information.
            This will allow the attributes to be loaded in a more on-demand later.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureList.Parent">
            <summary>
            Gets the parent featureset for this list.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.#ctor">
            <summary>
            Instantiates a new instance of a FeatureList where no parent is specified.
            This will basically simply act as a list and will not allow the features
            to be aware of the parent featureset.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.#ctor(DotSpatial.Data.IFeatureSet)">
            <summary>
            Instantiates a new instance of a FeatureList where the ParentFeatureSet
            is specified so that each feature will be aware of its parent.
            </summary>
            <param name="parent">The ParentFeatureSet of the specified item</param>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.Clear">
            <summary>
            Removes all elements from the EventList&lt;IFeature&gt;.
            </summary>
            <exception cref="T:System.ApplicationException">Unable to clear while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.Contains(DotSpatial.Data.IFeature)">
            <summary>
            Determines whether an element is in the System.Collections.Generic.List&lt;IFeature&gt;.
            </summary>
            <param name="item"> The object to locate in the System.Collections.Generic.List&lt;IFeature&gt;. The value can be null for reference types.</param>
            <returns>true if item is found in the System.Collections.Generic.List&lt;IFeature&gt; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this list
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.ResumeEvents">
            <summary>
            Resumes events
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.SuspendEvents">
            <summary>
            Temporarilly disables events
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.ToList">
            <summary>
            Gets the internal list of features.  This is quite fast in this case because
            the actual internal data store is a list.  This does not create a new collection.
            </summary>
            <returns>The internal list.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the EventList&lt;IFeature&gt;.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ApplicationException">Unable to reverse while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.Reverse">
            <summary>
            Reverses the order of the elements in the entire EventList&lt;IFeature&gt;.
            </summary>
            <exception cref="T:System.ApplicationException">Unable to reverse while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.Sort(System.Comparison{DotSpatial.Data.IFeature})">
            <summary>
            Sorts the elements in the entire EventList&lt;IFeature&gt; using the specified System.Comparison&lt;IFeature&gt;.
            </summary>
            <param name="comparison">The System.Comparison&lt;IFeature&gt; to use when comparing elements.</param>
            <exception cref="T:System.ArgumentException">The implementation of comparison caused an error during the sort. For example, comparison might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentNullException">comparison is null.</exception>
            <exception cref="T:System.ApplicationException">Unable to sort while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{DotSpatial.Data.IFeature})">
            <summary>
            Sorts the elements in a range of elements in EventList&lt;IFeature&gt; using the specified comparer.
            </summary>
            <param name="index"> The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;IFeature&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;IFeature&gt;.Default.</param>
            <exception cref="T:System.ArgumentException">index and count do not specify a valid range in the EventList&lt;IFeature&gt;.-or-The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.InvalidOperationException"> comparer is null, and the default comparer
            System.Collections.Generic.Comparer&lt;IFeature&gt;.Default cannot find implementation of the System.IComparable&lt;IFeature&gt;
            generic interface or the System.IComparable interface for type IFeature.</exception>
            <exception cref="T:System.ApplicationException">Unable to sort while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.Sort(System.Collections.Generic.IComparer{DotSpatial.Data.IFeature})">
            <summary>
            Sorts the elements in the entire DotSpatial.Interfaces.Framework.IEventList&lt;IFeature&gt; using the specified comparer.
            </summary>
            <param name="comparer"> The System.Collections.Generic.IComparer&lt;IFeature&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;IFeature&gt;.Default.</param>
            <exception cref="T:System.ArgumentException">The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.InvalidOperationException">comparer is null, and the default comparer System.Collections.Generic.Comparer&lt;IFeature&gt;.Default cannot find implementation of the System.IComparable&lt;IFeature&gt; generic interface or the System.IComparable interface for type IFeature.</exception>
            <exception cref="T:System.ApplicationException">Unable to sort while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.Sort">
            <summary>
            Sorts the elements in the entire DotSpatial.Interfaces.Framework.IEventList&lt;IFeature&gt; using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">The default comparer System.Collections.Generic.Comparer&lt;IFeature&gt;.Default cannot find an implementation of the System.IComparable&lt;IFeature&gt; generic interface or the System.IComparable interface for type IFeature.</exception>
            <exception cref="T:System.ApplicationException">Unable to sort while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.CopyTo(DotSpatial.Data.IFeature[],System.Int32)">
            <summary>
            Copies the entire System.Collections.Generic.List&lt;IFeature&gt; to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List&lt;IFeature&gt;. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex"> The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentException">System.ArgumentException: arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source System.Collections.Generic.List&lt;T&gt; is greater than the available space from arrayIndex to the end of the destination array. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0</exception>
            <exception cref="T:System.ArgumentNullException">array is null</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.CopyTo(System.Int32,DotSpatial.Data.IFeature[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the EventList&lt;IFeature&gt; to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="index">The zero-based index in the source EventList&lt;T&gt; at which copying begins</param>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from EventList&lt;IFeature&gt;. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> index is less than 0.-or-arrayIndex is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index is equal to or greater than the EventList&lt;IFeature&gt;.Count of the source EventList&lt;T&gt;.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements from index to the end of the source EventList&lt;IFeature&gt; is greater than the available space from arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.CopyTo(DotSpatial.Data.IFeature[])">
            <summary>
            Copies the entire EventList&lt;IFeature&gt; to a compatible one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from EventList&lt;IFeature&gt;. The System.Array must have zero-based indexing.</param>
            <exception cref="T:System.ArgumentException">The number of elements in the source EventList&lt;IFeature&gt; is greater than the number of elements that the destination array can contain.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.IncludeFeature(DotSpatial.Data.IFeature,System.Int32)">
            <summary>
            Includes the Feature in the parents DataTable at the given index and raises the FeatureAdded event.
            </summary>
            <param name="item">Feature that gets included.</param>
            <param name="index">Index, where the feature gets included. (-1 = add at the end)</param>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.ExcludeFeature(DotSpatial.Data.IFeature)">
            <summary>
            Removes the given Feature from the parents DataTable and raises the FeatureRemoved event.
            </summary>
            <param name="item">Feature that gets excluded.</param>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.ConvertAll``1(System.Converter{DotSpatial.Data.IFeature,``0})">
            <summary>
            Converts the elements in the current EventList&lt;IFeature&gt; to another type, and returns a list containing the converted elements.
            </summary>
            <typeparam name="TOutput">The output type to convert to</typeparam>
            <param name="converter">A System.Converter&lt;TInput, TOutput&gt; delegate that converts each element from one type to another type.</param>
            <returns>A List&lt;T&gt; of the target type containing the converted elements from the current EventList&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">converter is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.Exists(System.Predicate{DotSpatial.Data.IFeature})">
            <summary>
            Determines whether the EventList&lt;IFeature&gt; contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate&lt;IFeature&gt; delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the EventList&lt;T&gt; contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source EventList&lt;IFeature&gt;.
            </summary>
            <param name="index">The zero-based EventList&lt;IFeature&gt; index at which the range starts.</param>
            <param name="count"> The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source EventList&lt;IFeature&gt;.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the EventList&lt;IFeature&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.ToArray">
            <summary>
            Copies the elements of the DotSpatial.Interfaces.Framework.IEventList&lt;IFeature&gt; to a new array.
            </summary>
            <returns>An array containing copies of the elements of the DotSpatial.Interfaces.Framework.IEventList&lt;IFeature&gt;.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;IFeature&gt;, if that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.TrueForAll(System.Predicate{DotSpatial.Data.IFeature})">
            <summary>
            Determines whether every element in the DotSpatial.Interfaces.Framework.IEventList&lt;IFeature&gt; matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate&lt;IFeature&gt; delegate that defines the conditions to check against the elements.</param>
            <returns>true if every element in the DotSpatial.Interfaces.Framework.IEventList&lt;IFeature&gt; matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.IndexOf(DotSpatial.Data.IFeature)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire System.Collections.Generic.List&lt;IFeature&gt;.
            </summary>
            <param name="item">The object to locate in the System.Collections.Generic.List&lt;IFeature&gt;. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire System.Collections.Generic.List&lt;IFeature&gt;, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.IndexOf(DotSpatial.Data.IFeature,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the EventList&lt;IFeature&gt; that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the EventList&lt;IFeature&gt;. The value can be null for reference types.</param>
            <param name="index"> The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the EventList&lt;IFeature&gt; that starts at index and contains count number of elements, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> index is outside the range of valid indexes for the EventList&lt;IFeature&gt;.-or-count is less than 0.-or-index and count do not specify a valid section in the EventList&lt;IFeature&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.IndexOf(DotSpatial.Data.IFeature,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the EventList&lt;IFeature&gt; that extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the EventList&lt;IFeature&gt;. The value can be null for reference types.</param>
            <param name="index"> The zero-based starting index of the search.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the EventList&lt;IFeature&gt; that extends from index to the last element, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the EventList&lt;IFeature&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.Insert(System.Int32,DotSpatial.Data.IFeature)">
            <summary>
            Inserts an element into the System.Collections.Generic.List&lt;IFeature&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is greater than System.Collections.Generic.List&lt;IFeature&gt;.Count.</exception>
            <exception cref="T:System.ApplicationException">Unable to insert while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{DotSpatial.Data.IFeature})">
            <summary>
            Inserts the elements of a collection into the EventList&lt;IFeature&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the EventList&lt;IFeature&gt;. The collection itself cannot be null, but it can contain elements that are null, if type IFeature is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is greater than EventList&lt;IFeature&gt;.Count.</exception>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
            <exception cref="T:System.ApplicationException">Unable to insert while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.LastIndexOf(DotSpatial.Data.IFeature,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the EventList&lt;IFeature&gt; that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">The object to locate in the EventList&lt;IFeature&gt;. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of item within the range of elements in the EventList&lt;IFeature&gt; that contains count number of elements and ends at index, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the EventList&lt;IFeature&gt;.-or-count is less than 0.-or-index and count do not specify a valid section in the EventList&lt;IFeature&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.LastIndexOf(DotSpatial.Data.IFeature,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the EventList&lt;IFeature&gt; that extends from the first element to the specified index.
            </summary>
            <param name="item">The object to locate in the EventList&lt;IFeature&gt;. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>The zero-based index of the last occurrence of item within the range of elements in the EventList&lt;IFeature&gt; that extends from the first element to index, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the EventList&lt;IFeature&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.LastIndexOf(DotSpatial.Data.IFeature)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the entire EventList&lt;IFeature&gt;.
            </summary>
            <param name="item">The object to locate in the EventList&lt;IFeature&gt;. The value can be null for reference types.</param>
            <returns>The zero-based index of the last occurrence of item within the entire the EventList&lt;IFeature&gt;, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.Remove(DotSpatial.Data.IFeature)">
            <summary>
            Removes the first occurrence of a specific object from the System.Collections.Generic.List&lt;IFeature&gt;.
            </summary>
            <param name="item">The object to remove from the System.Collections.Generic.List&lt;IFeature&gt;. The value can be null for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not
            found in the System.Collections.Generic.List&lt;IFeature&gt;.</returns>
            <exception cref="T:System.ApplicationException">Unable to remove while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the System.Collections.Generic.List&lt;IFeature&gt;.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ApplicationException">Unable to remove while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.RemoveAll(System.Predicate{DotSpatial.Data.IFeature})">
            <summary>
            Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate&lt;IFeature&gt; delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the EventList&lt;IFeature&gt;</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
            <exception cref="T:System.ApplicationException">Unable to remove while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the EventList&lt;IFeature&gt;.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the EventList&lt;IFeature&gt;.</exception>
            <exception cref="T:System.ApplicationException">Unable to remove while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.FindAll(System.Predicate{DotSpatial.Data.IFeature})">
            <summary>
            Retrieves all the elements that match the conditions described by the specified predicate
            </summary>
            <param name="match">The System.Predicate that defines the conditions to search for</param>
            <returns>A List of matches</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.FindIndex(System.Int32,System.Int32,System.Predicate{DotSpatial.Data.IFeature})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the EventList&lt;IFeature&gt; that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match"> The System.Predicate&lt;IFeature&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the EventList&lt;IFeature&gt;.-or-count is less than 0.-or-startIndex and count do not specify a valid section in the EventList&lt;IFeature&gt;.</exception>
            <exception cref="T:System.ArgumentNullException">match is null</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.FindIndex(System.Int32,System.Predicate{DotSpatial.Data.IFeature})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the EventList&lt;IFeature&gt; that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The System.Predicate&lt;IFeature&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the EventList&lt;IFeature&gt;.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.FindIndex(System.Predicate{DotSpatial.Data.IFeature})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire EventList&lt;IFeature&gt;.
            </summary>
            <param name="match">The System.Predicate&lt;IFeature&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.FindLast(System.Predicate{DotSpatial.Data.IFeature})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire EventList&lt;IFeature&gt;.
            </summary>
            <param name="match">The System.Predicate&lt;IFeature&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type IFeature.</returns>
            <exception cref="T:System.ArgumentNullException">match is null."</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.FindLastIndex(System.Int32,System.Int32,System.Predicate{DotSpatial.Data.IFeature})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the EventList&lt;IFeature&gt; that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match"></param>
            <returns>The System.Predicate&lt;IFeature&gt; delegate that defines the conditions of the element to search for.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the EventList&lt;IFeature&gt;.-or-count is less than 0.-or-startIndex and count do not specify a valid section in the EventList&lt;IFeature&gt;.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.FindLastIndex(System.Int32,System.Predicate{DotSpatial.Data.IFeature})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the EventList&lt;IFeature&gt; that extends from the first element to the specified index.
            </summary>
            <param name="startIndex"> The zero-based starting index of the backward search.</param>
            <param name="match">The System.Predicate&lt;IFeature&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">: startIndex is outside the range of valid indexes for the EventList&lt;IFeature&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.FindLastIndex(System.Predicate{DotSpatial.Data.IFeature})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire EventList&lt;IFeature&gt;.
            </summary>
            <param name="match">The System.Predicate&lt;IFeature&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.Add(DotSpatial.Data.IFeature)">
            <summary>
            Adds the item to the list, setting the parent to be the list's parent
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.AddRange(System.Collections.Generic.IEnumerable{DotSpatial.Data.IFeature})">
            <summary>
            Adds the elements of the specified collection to the end of the System.Collections.Generic.List&lt;T&gt;
            </summary>
            <param name="collection">collection: The collection whose elements should be added to the end of the
            System.Collections.Generic.List&lt;T&gt;. The collection itself cannot be null, but it can contain elements that are null,
            if type T is a reference type.</param>
            <exception cref="T:System.ApplicationException">Unable to add while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.BinarySearch(DotSpatial.Data.IFeature)">
            <summary>
            Searches the entire sorted System.Collections.Generic.List&lt;IFeature&gt; for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>The zero-based index of item in the sorted System.Collections.Generic.List&lt;IFeature&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of System.Collections.Generic.List&lt;IFeature&gt;.Count.</returns>
            <exception cref="T:System.InvalidOperationException">The default comparer System.Collections.Generic.Comparer&lt;IFeature&gt;.Default cannot find an implementation of the System.IComparable&lt;IFeature&gt; generic interface or the System.IComparable interface for type IFeature.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.OnFeatureAdded(DotSpatial.Data.IFeature)">
            <summary>
            Occurs each time a feature is added to the list.  This should only be called
            if suspend events is false.
            </summary>
            <param name="feature">The feature that was added.</param>
        </member>
        <member name="M:DotSpatial.Data.FeatureList.OnFeatureRemoved(DotSpatial.Data.IFeature)">
            <summary>
            Occurs each time a feature is removed from the list.  This should only be
            called if suspend events is false.
            </summary>
            <param name="feature">he feature that was removed</param>
        </member>
        <member name="E:DotSpatial.Data.FeatureList.FeatureAdded">
            <summary>
            Occurs when a new feature is added to the list
            </summary>
        </member>
        <member name="E:DotSpatial.Data.FeatureList.FeatureRemoved">
            <summary>
            Occurs when a feature is removed from the list.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureList.EventsSuspended">
            <summary>
            Gets or sets whether or not the events have been suspended
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureList.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <returns>
            The number of elements that the DotSpatial.Interfaces.Framework.IEventList&lt;IFeature&gt; can contain before resizing is required.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">DotSpatial.Interfaces.Framework.IEventList&lt;IFeature&gt;.Capacity is set to a value that is less than DotSpatial.Interfaces.Framework.IEventList&lt;IFeature&gt;.Count.</exception>
        </member>
        <member name="P:DotSpatial.Data.FeatureList.Count">
            <summary>
            Gets the count of the members in the list
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureList.Item(System.Int32)">
            <summary>
            The default, indexed value of type IFeature
            </summary>
            <param name="index">The numeric index</param>
            <returns>An object of type IFeature corresponding to the index value specified</returns>
        </member>
        <member name="P:DotSpatial.Data.FeatureList.IsReadOnly">
            <summary>
            Gets a boolean property indicating whether this list can be written to.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureList.IncludeAttributes">
            <summary>
            If this is false, then features will be added to the list without copying over attribute Table information.
            This will allow the attributes to be loaded in a more on-demand later.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureList.Parent">
            <summary>
            Gets the parent featureset for this list of features.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.FeatureListExt">
            <summary>
            FeatureListEm
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureListExt.Add(DotSpatial.Data.IFeatureList,DotSpatial.Topology.Coordinate)">
            <summary>
            adding a single coordinate will assume that the feature type should be point for this featureset, even
            if it has not already been specified.
            </summary>
            <param name="self">This IFeatureList</param>
            <param name="point">The point to add to the featureset</param>
            <exception cref="T:DotSpatial.Data.FeatureTypeMismatchException">Thrown when the feature type already exists, there are already features in the featureset and the featuretype is not equal to point.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureListExt.Add(DotSpatial.Data.IFeatureList,System.Collections.Generic.IEnumerable{DotSpatial.Topology.Coordinate},DotSpatial.Topology.FeatureType)">
            <summary>
            This adds the coordinates and specifies what sort of feature type should be added.
            </summary>
            <param name="self">This IFeatureList</param>
            <param name="points">The list or array of coordinates to be added after it is built into the appropriate feature.</param>
            <param name="featureType">The feature type.</param>
        </member>
        <member name="M:DotSpatial.Data.FeatureListExt.Add(DotSpatial.Data.IFeatureList,System.Collections.Generic.IEnumerable{DotSpatial.Topology.Coordinate})">
            <summary>
            If the feature type is specified, then this will automatically generate a new feature from the specified coordinates.
            This will not work unless the featuretype is specified.
            </summary>
            <param name="self">This IFeatureList</param>
            <param name="points">
            The list or array of coordinates to build into a new feature.
            If the feature type is point, then this will create separate features for each coordinate.
            For polygons, all the points will be assumed to be in the shell.
            </param>
            <exception cref="T:DotSpatial.Data.UnspecifiedFeaturetypeException">Thrown if the current FeatureType for the shapefile is unspecified.</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureListExt.Add(DotSpatial.Data.IFeatureList,DotSpatial.Topology.IBasicGeometry)">
            <summary>
            This method will attempt to add the specified geometry to the list.
            If the feature type is currently unspecified, this will specify the feature type.
            </summary>
            <param name="self">This feature list</param>
            <param name="geometry">The geometry to create a new feature from.</param>
            <exception cref="T:DotSpatial.Data.FeatureTypeMismatchException">Thrown if the new geometry does not match the currently specified feature type.  </exception>
        </member>
        <member name="T:DotSpatial.Data.FeatureSet">
            <summary>
            Rather than being an abstract base class, this is a "router" class that will
            make decisions based on the file extension or whatever being used and decide the best
            IFeatureSet that matches the specifications.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IFeatureSet">
            <summary>
            A layer contains a list of features of a specific type that matches the geometry type.
            While this supports IRenderable, this merely forwards the drawing instructions to
            each of its members, but does not allow the control of any default layer properties here.
            Calling FeatureDataSource.Open will create a number of layers of the appropriate
            specific type and also create a specific layer type that is derived from this class
            that does expose default "layer" properties, as well as the symbology elements.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IAttributeSource">
            <summary>
            IDataPageRetriever
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IAttributeSource.GetAttributes(System.Int32,System.Int32)">
            <summary>
            Supplies a page of content in the form of a data Table.
            </summary>
            <param name="startIndex">The integer lower page boundary</param>
            <param name="numRows">The integer number of rows to return for the page</param>
            <returns>A DataTable made up with the virtual row content.</returns>
        </member>
        <member name="M:DotSpatial.Data.IAttributeSource.GetAttributes(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads just the content requested in order to satisfy the paging ability of VirtualMode for the DataGridView
            </summary>
            <param name="startIndex">The integer lower page boundary</param>
            <param name="numRows">The integer number of attribute values to return for the page</param>
            <param name="fieldNames">The list or array of fieldnames to return.</param>
            <returns>A DataTable populated with data rows with only the specified values.</returns>
        </member>
        <member name="M:DotSpatial.Data.IAttributeSource.SetAttributes(System.Int32,System.Data.DataTable)">
            <summary>
            Converts a page of content from a DataTable format, saving it back to the source.
            </summary>
            <param name="startIndex">The 0 based integer index representing the first row in the file (corresponding to the 0 row of the data table)</param>
            <param name="pageValues">The DataTable representing the rows to set.  If the row count is larger than the dataset, this will add the rows instead.</param>
        </member>
        <member name="M:DotSpatial.Data.IAttributeSource.NumRows">
            <summary>
            The number of rows
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IAttributeSource.GetColumn(System.String)">
            <summary>
            Gets the column with the specified name
            </summary>
            <param name="name">the name to search</param>
            <returns>the Field matching the specified name</returns>
        </member>
        <member name="M:DotSpatial.Data.IAttributeSource.GetColumns">
            <summary>
            Gets a copy of the fields used to build the data structure.  This is useful for learning
            about the existing fields, but doesn't allow direct changes to the underlying data structure.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IAttributeSource.AddRow(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Saves the new row to the data source and updates the file with new content.
            </summary>
            <param name="values">The values organized against the dictionary of field names.</param>
        </member>
        <member name="M:DotSpatial.Data.IAttributeSource.Edit(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            saves a single row to the data source.
            </summary>
            <param name="index">the integer row (or FID) index</param>
            <param name="values">The dictionary of object values by string field name holding the new values to store.</param>
        </member>
        <member name="M:DotSpatial.Data.IAttributeSource.AddRow(System.Data.DataRow)">
            <summary>
            Saves the new row to the data source and updates the file with new content.
            </summary>
            <param name="values">The values organized against the dictionary of field names.</param>
        </member>
        <member name="M:DotSpatial.Data.IAttributeSource.Edit(System.Int32,System.Data.DataRow)">
            <summary>
            saves a single row to the data source.
            </summary>
            <param name="index">the integer row (or FID) index</param>
            <param name="values">The dictionary of object values by string field name holding the new values to store.</param>
        </member>
        <member name="M:DotSpatial.Data.IAttributeSource.GetCounts(System.String[],DotSpatial.Data.ICancelProgressHandler,System.Int32)">
            <summary>
            Given a string expression, this returns the count of the members that satisfy that expression.
            </summary>
            <param name="expressions">The array of string expressions to test</param>
            <param name="progressHandler">The progress handler that might also instruct this step to be canceled.</param>
            <param name="maxSampleSize">The integer maximum sample size from which to draw counts.  If this is negative, it will not be used.</param>
            <returns>An array of integer counts of the members that match the expression</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.GetColumnNames(System.String)">
            <summary>
            Gets the list of string names available as columns from the specified excel file.
            </summary>
            <param name="xlsFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.Join(System.String,System.String,System.String)">
            <summary>
            For attributes that are small enough to be loaded into a data table, this
            will join attributes from a foreign table (from an excel file).  This method
            won't create new rows in this table, so only matching members are brought in,
            but no rows are removed either, so not all rows will receive data.
            </summary>
            <param name="xlsFilePath">The complete path of the file to join</param>
            <param name="localJoinField">The field name to join on in this table</param>
            <param name="xlsJoinField">The field in the foreign table.</param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.AddShape(DotSpatial.Data.Shape)">
            <summary>
            If this featureset is in index mode, this will append the vertices and shapeindex of the shape.
            Otherwise, this will add a new feature based on this shape.  If the attributes of the shape are not null,
            this will attempt to append a new datarow It is up to the developer
            to ensure that the object array of attributes matches the this featureset.  If the Attributes of this feature are loaded,
            this will add the attributes in ram only.  Otherwise, this will attempt to insert the attributes as a
            new record using the "AddRow" method.  The schema of the object array should match this featureset's column schema.
            </summary>
            <param name="shape">The shape to add to this featureset.</param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.AddShapes(System.Collections.Generic.IEnumerable{DotSpatial.Data.Shape})">
            <summary>
            Adds any type of list or array of shapes.  If this featureset is not in index moded,
            it will add the features to the featurelist and suspend events for faster copying.
            </summary>
            <param name="shapes">An enumerable collection of shapes.</param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.GetFeature(System.Int32)">
            <summary>
            Gets the specified feature by constructing it from the vertices, rather
            than requiring that all the features be created. (which takes up a lot of memory).
            </summary>
            <param name="index">The integer index</param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.GetShape(System.Int32,System.Boolean)">
            <summary>
            Gets a shape at the specified shape index.  If the featureset is in
            indexmode, this returns a copy of the shape.  If not, it will create
            a new shape based on the specified feature.
            </summary>
            <param name="index">The zero based integer index of the shape.</param>
            <param name="getAttributes">If getAttributes is true, then this also try to get attributes for that shape.
            If attributes are loaded, then it will use the existing datarow.  Otherwise, it will read the attributes
            from the file.  (This second option is not recommended for large repeats.  In such a case, the attributes
            can be set manually from a larger bulk query of the data source.)</param>
            <returns>The Shape object</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.FeatureFromRow(System.Data.DataRow)">
            <summary>
            Given a datarow, this will return the associated feature.  This FeatureSet
            uses an internal dictionary, so that even if the items are re-ordered
            or have new members inserted, this lookup will still work.
            </summary>
            <param name="row">The DataRow for which to obtaind the feature</param>
            <returns>The feature to obtain that is associated with the specified data row.</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.AddFeature(DotSpatial.Topology.IBasicGeometry)">
            <summary>
            Generates a new feature, adds it to the features and returns the value.
            </summary>
            <returns>The feature that was added to this featureset</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.AddFid">
            <summary>
            Adds the FID values as a field called FID, but only if the FID field
            does not already exist
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.CopyFeatures(DotSpatial.Data.IFeatureSet,System.Boolean)">
            <summary>
            Copies all the features from the specified featureset.
            </summary>
            <param name="source">The source IFeatureSet to copy features from.</param>
            <param name="copyAttributes">Boolean, true if the attributes should be copied as well.  If this is true,
            and the attributes are not loaded, a FillAttributes call will be made.</param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.CopySubset(System.Collections.Generic.List{System.Int32})">
            <summary>
            Retrieves a subset using exclusively the features matching the specified values.
            </summary>
            <param name="indices">An integer list of indices to copy into the new FeatureSet</param>
            <returns>A FeatureSet with the new items.</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.CopySubset(System.String)">
            <summary>
            Copies the subset of specified features to create a new featureset that is restricted to
            just the members specified.
            </summary>
            <param name="filterExpression">The string expression to test.</param>
            <returns>A FeatureSet that has members that only match the specified members.</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.CopyTableSchema(DotSpatial.Data.IFeatureSet)">
            <summary>
            Copies only the names and types of the attribute fields, without copying any of the attributes or features.
            </summary>
            <param name="source">The source featureSet to obtain the schema from.</param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.CopyTableSchema(System.Data.DataTable)">
            <summary>
            Copies the Table schema (column names/data types)
            from a DatatTable, but doesn't copy any values.
            </summary>
            <param name="sourceTable">The Table to obtain schema from.</param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.FillAttributes">
            <summary>
            Instructs the shapefile to read all the attributes from the file.
            This may also be a cue to read values from a database.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.FillAttributes(DotSpatial.Data.IProgressHandler)">
            <summary>
            Instructs the shapefile to read all the attributes from the file.
            This may also be a cue to read values from a database.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.Find(System.String)">
            <summary>
            Obtains the list of feature indices that match the specified filter expression.
            </summary>
            <param name="filterExpression">The filter expression to find features for.</param>
            <returns>The list of integers that are the FIDs of the specified values.</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.InitializeVertices">
            <summary>
            This forces the vertex initialization so that Vertices, ShapeIndices, and the
            ShapeIndex property on each feature will no longer be null.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.InvalidateVertices">
            <summary>
            Switches a boolean so that the next time that the vertices are requested,
            they must be re-calculated from the feature coordinates.
            </summary>
            <remarks>This only affects reading values from the Vertices cache</remarks>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.RemoveShapeAt(System.Int32)">
            <summary>
            Attempts to remove the specified shape.
            </summary>
            <param name="index">
            The integer index of the shape to remove.
            </param>
            <returns>
            Boolean, true if the remove was successful.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.RemoveShapesAt(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Attempts to remove a range of shapes by index.  This is optimized to
            work better for large numbers.  For one or two, using RemoveShapeAt might
            be faster.
            </summary>
            <param name="indices">
            The enumerable set of indices to remove.
            </param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.SelectIndices(DotSpatial.Data.Extent)">
            <summary>
            Skips the features themselves and uses the shapeindicies instead.
            </summary>
            <param name="region">The region to select members from</param>
            <returns>A list of integer valued shape indices that are selected.</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.Save">
            <summary>
            Saves the information in the Layers provided by this datasource onto its existing file location
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves a datasource to the file.
            </summary>
            <param name="fileName">The string fileName location to save to</param>
            <param name="overwrite">Boolean, if this is true then it will overwrite a file of the existing name.</param>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.Select(DotSpatial.Data.Extent)">
            <summary>
            returns only the features that have envelopes that
            intersect with the specified envelope.
            </summary>
            <param name="region">The specified region to test for intersect with</param>
            <returns>A List of the IFeature elements that are contained in this region</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.Select(DotSpatial.Data.Extent,DotSpatial.Data.Extent@)">
            <summary>
            returns only the features that have envelopes that
            intersect with the specified envelope.
            </summary>
            <param name="region">The specified region to test for intersect with</param>
            <param name="selectedRegion">This returns the geographic extents for the entire selected area.</param>
            <returns>A List of the IFeature elements that are contained in this region</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.SelectByAttribute(System.String)">
            <summary>
            The string filter expression to use in order to return the desired features.
            </summary>
            <param name="filterExpression">The features to return.</param>
            <returns>The list of desired features.</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.SelectIndexByAttribute(System.String)">
            <summary>
            This version is more tightly integrated to the DataTable and returns the row indices, rather
            than attempting to link the results to features themselves, which may not even exist.
            </summary>
            <param name="filterExpression">The filter expression</param>
            <returns>The list of indices</returns>
        </member>
        <member name="M:DotSpatial.Data.IFeatureSet.UpdateExtent">
            <summary>
            After changing coordinates, this will force the re-calculation of envelopes on a feature
            level as well as on the featureset level.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IFeatureSet.VerticesInvalidated">
            <summary>
            Occurs when the vertices are invalidated, encouraging a re-draw
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IFeatureSet.FeatureAdded">
            <summary>
            Occurs when a new feature is added to the list
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IFeatureSet.FeatureRemoved">
            <summary>
            Occurs when a feature is removed from the list.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.AttributesPopulated">
            <summary>
            Gets whether or not the attributes have all been loaded into the data table.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.CoordinateType">
            <summary>
            Gets or sets the coordinate type across the entire featureset.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.DataTable">
            <summary>
            Gets the DataTable associated with this specific feature.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.Features">
            <summary>
            Gets the list of all the features that are included in this layer.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.FeatureGeometryFactory">
            <summary>
            This is an optional GeometryFactory that can be set to control how the geometries on features are
            created.  if this is not specified, the default from DotSptaial.Topology is used.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.FeatureLookup">
            <summary>
            Gets the feature lookup Table itself.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.FeatureType">
            <summary>
            Gets an enumeration indicating the type of feature represented in this dataset, if any.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.Filename">
            <summary>
            Gets the string fileName for this feature layer, if any
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.ShapeIndices">
            <summary>
            These specifically allow the user to make sense of the Vertices array.  These are
            fast acting sealed classes and are not meant to be overridden or support clever
            new implementations.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.IndexMode">
            <summary>
            If this is true, then the ShapeIndices and Vertex values are used,
            and features are created on demand.  Otherwise the list of Features
            is used directly.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.Vertex">
            <summary>
            Gets an array of Vertex structures with X and Y coordinates
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.Z">
            <summary>
            Z coordinates
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.M">
            <summary>
            M coordinates
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IFeatureSet.VerticesAreValid">
            <summary>
            Gets a boolean that indicates whether or not the InvalidateVertices has been called
            more recently than the cached vertex array has been built.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSet._dataTable">
            <summary>
            The _data table.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSet._featureLookup">
            <summary>
            The _feature lookup.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSet._features">
            <summary>
            The _features.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSet._m">
            <summary>
            The _m.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSet._shapeIndices">
            <summary>
            The _shape indices.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSet._vertices">
            <summary>
            The _vertices.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSet._verticesAreValid">
            <summary>
            The _vertices are valid.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSet._z">
            <summary>
            The _z.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Data.FeatureSet"/> class.
            This doesn't do anything exactly because there is no file-specific information yet
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.#ctor(DotSpatial.Topology.FeatureType)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Data.FeatureSet"/> class.
            Creates a new FeatureSet
            </summary>
            <param name="featureType">
            The Feature type like point, line or polygon
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.#ctor(System.Data.DataTable,System.Int32,System.Boolean,DotSpatial.Topology.FeatureType)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Data.FeatureSet"/> class.
            This creates a new featureset by checking each row of the table.  If the WKB feature
            type matches the specified featureTypes, then it will copy that.
            </summary>
            <param name="wkbTable">
            </param>
            <param name="wkbColumnIndex">
            </param>
            <param name="indexed">
            </param>
            <param name="type">
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.#ctor(System.Collections.Generic.IList{DotSpatial.Data.IFeature})">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Data.FeatureSet"/> class.
            Creates a new FeatureSet using a given list of IFeatures.
            This will copy the existing features, rather than removing
            them from their parent feature set.
            </summary>
            <param name="inFeatures">
            The list of IFeatures
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.AddFeature(DotSpatial.Topology.IBasicGeometry)">
            <summary>
            Generates a new feature, adds it to the features and returns the value.
            </summary>
            <param name="geometry">
            The geometry.
            </param>
            <returns>
            The feature that was added to this featureset
            </returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.DataTableRowDeleted(System.Object,System.Data.DataRowChangeEventArgs)">
            <summary>
            The data table row deleted.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.FeaturesFeatureAdded(System.Object,DotSpatial.Data.FeatureEventArgs)">
            <summary>
            The features feature added.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.FeaturesFeatureRemoved(System.Object,DotSpatial.Data.FeatureEventArgs)">
            <summary>
            The features feature removed.
            </summary>
            <param name="sender">
            The object sender.
            </param>
            <param name="e">
            The FeatureEventArgs.
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.AddFid">
            <summary>
            Adds the FID values as a field called FID, but only if the FID field
            does not already exist.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.AddShape(DotSpatial.Data.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.AddShapes(System.Collections.Generic.IEnumerable{DotSpatial.Data.Shape})">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.CopyFeatures(DotSpatial.Data.IFeatureSet,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.DotSpatial#Data#IFeatureSet#CopySubset(System.Collections.Generic.List{System.Int32})">
            <summary>
            The copy subset.
            </summary>
            <param name="indices">
            The indices.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.DotSpatial#Data#IFeatureSet#CopySubset(System.String)">
            <summary>
            The copy subset.
            </summary>
            <param name="filterExpression">
            The filter expression.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.CopyTableSchema(DotSpatial.Data.IFeatureSet)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.CopyTableSchema(System.Data.DataTable)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.FeatureFromRow(System.Data.DataRow)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.FillAttributes">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.FillAttributes(DotSpatial.Data.IProgressHandler)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.Find(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.GetColumnNames(System.String)">
            <summary>
            Gets the list of string names available as columns from the specified excel file.
            </summary>
            <param name="xlsFilePath">
            </param>
            <returns>
            </returns>
            Warning. This method should be moved outside of FeatureSet.
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.GetFeature(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.GetShape(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.InitializeVertices">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.InvalidateVertices">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.Join(System.String,System.String,System.String)">
            <summary>
            For attributes that are small enough to be loaded into a data table, this
            will join attributes from a foreign table (from an excel file).  This method
            won't create new rows in this table, so only matching members are brought in,
            but no rows are removed either, so not all rows will receive data.
            </summary>
            <param name="xlsFilePath">
            The complete path of the file to join
            </param>
            <param name="localJoinField">
            The field name to join on in this table
            </param>
            <param name="xlsJoinField">
            The field in the foreign table.
            </param>
            <returns>
            A modified featureset with the changes.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.Save">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.SaveAs(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.Select(DotSpatial.Data.Extent)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.Select(DotSpatial.Data.Extent,DotSpatial.Data.Extent@)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.SelectByAttribute(System.String)">
            <summary>
            Selects using a string filter expression to obtain the desired features.
            Field names should be in square brackets.  Alternately, if the field name of [FID]
            is used, then it will use the row index instead if no FID field is found.
            </summary>
            <param name="filterExpression">
            The features to return.
            </param>
            <returns>
            The list of desired features.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.SelectIndexByAttribute(System.String)">
            <summary>
            This version is more tightly integrated to the DataTable and returns the row indices, rather
            than attempting to link the results to features themselves, which may not even exist.
            </summary>
            <param name="filterExpression">
            The filter expression
            </param>
            <returns>
            The list of indices
            </returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.SelectIndices(DotSpatial.Data.Extent)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.CopySubset(System.Collections.Generic.List{System.Int32})">
            <summary>
            Retrieves a subset using exclusively the features matching the specified values.
            </summary>
            <param name="indices">
            An integer list of indices to copy into the new FeatureSet.
            </param>
            <returns>
            A FeatureSet with the new items.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.InvalidateEnvelope">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.Open(System.String)">
            <summary>
            This attempts to open the specified file as a valid IFeatureSet.  This will require that
            the default data manager can work with the file format at runtime.
            </summary>
            <param name="fileName">
            The string fileName for this featureset.
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.OpenFile(System.String)">
            <summary>
            This will return the correct feature type by reading the fileName.
            </summary>
            <param name="fileName">
            A string specifying the file with the extension .shp to open.
            </param>
            <returns>
            A correct featureSet which is exclusively for reading the .shp data
            </returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.OpenFile(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Generates a new FeatureSet, if possible, from the specified fileName.
            </summary>
            <param name="fileName">
            The string fileName to attempt to load into a new FeatureSet.
            </param>
            <param name="progressHandler">
            An IProgressHandler for progress messages
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.GetLine(System.Int32)">
            <summary>
            Gets the line for the specified index
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.GetMultiPoint(System.Int32)">
            <summary>
            Returns a single multipoint feature for the shape at the specified index
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.GetPoint(System.Int32)">
            <summary>
            Gets the point for the shape at the specified index
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.GetPolygon(System.Int32)">
            <summary>
            If the FeatureType is polygon, this is the code for converting the vertex array
            into a feature.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.AddAttributes(DotSpatial.Data.Shape)">
            <summary>
            handles the attributes while adding a shape
            </summary>
            <param name="shape">
            </param>
            <returns>
            A data row, but only if attributes are populated
            </returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.CopySubset(System.String)">
            <summary>
            Copies the subset of specified features to create a new featureset that is restricted to
            just the members specified.
            </summary>
            <param name="filterExpression">
            The string expression to test.
            </param>
            <returns>
            A FeatureSet that has members that only match the specified members.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.PointInList(DotSpatial.Topology.Coordinate,System.Collections.Generic.IEnumerable{DotSpatial.Topology.Coordinate})">
            <summary>
            Test if a point is in a list of coordinates.
            </summary>
            <param name="testPoint">
            TestPoint the point to test for.
            </param>
            <param name="pointList">
            PointList the list of points to look through.
            </param>
            <returns>
            true if testPoint is a point in the pointList list.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.RemoveShapeAt(System.Int32)">
            <summary>
            Attempts to remove the specified shape.  If in memory, this will also remove the
            corresponding database row.  This has no affect on the underlying datasets.
            To impact those, use the
            </summary>
            <param name="index">
            The integer index o the shape to remove.
            </param>
            <returns>
            Boolean, true if the remove was successful.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.RemoveShapesAt(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Attempts to remove a range of shapes by index.  This is optimized to
            work better for large numbers.  For one or two, using RemoveShapeAt might
            be faster.
            </summary>
            <param name="indices">
            The enumerable set of indices to remove.
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.Reproject(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Reprojects all of the in-ram vertices of this featureset.
            This will also update the projection to be the specified projection.
            </summary>
            <param name="targetProjection">
            The projection information to reproject the coordinates to.
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.UpdateExtent">
            <summary>
            After changing coordinates, this will force the re-calculation of envelopes on a feature
            level or test the shapes in index mode to rebuild an Extent.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.RelativePathTo(System.String)">
            <summary>
            Creates a relative path from one file or folder to another.
            </summary>
            <param name="toPath">
            Contains the path that defines the endpoint of the relative path.
            </param>
            <returns>
            The relative path from the start directory to the end path.
            </returns>
            <exception cref="T:System.ArgumentNullException">Occurs when the toPath is NULL</exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.MakeRelativePath(System.String,System.String)">
            <summary>
            Creates a relative path from one file or folder to another.
            </summary>
            <param name="fromPath">Contains the directory that defines the start of the relative path.</param>
            <param name="toPath">Contains the path that defines the endpoint of the relative path.</param>
            <returns>The relative path from the start directory to the end path.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.FeaturesFromVertices">
            <summary>
            Calculates the features from the shape indices and vertex array.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.OnDataTableExcluded(System.Data.DataTable)">
            <summary>
            Allows the un-wiring of event handlers related to the data Table.
            </summary>
            <param name="dataTable">
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.OnDataTableIncluded(System.Data.DataTable)">
            <summary>
            Allows the wiring of event handlers related to the data Table.
            </summary>
            <param name="dataTable">
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.OnExcludeFeatures(DotSpatial.Data.IFeatureList)">
            <summary>
            Occurs when removing the feature list, allowing events to be disconnected
            </summary>
            <param name="features">
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.OnIncludeFeatures(DotSpatial.Data.IFeatureList)">
            <summary>
            Occurs when setting the feature list, allowing events to be connected
            </summary>
            <param name="features">
            </param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.AddRow(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.AddRow(System.Data.DataRow)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.Edit(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.Edit(System.Int32,System.Data.DataRow)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.GetAttributes(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.GetAttributes(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads just the content requested in order to satisfy the paging ability of VirtualMode for the DataGridView
            </summary>
            <param name="startIndex">
            The integer lower page boundary.
            </param>
            <param name="numRows">
            The integer number of attribute rows to return for the page.
            </param>
            <param name="fieldNames">
            The list or array of fieldnames to return.
            </param>
            <returns>
            A DataTable populated with data rows with only the specified values.
            </returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.GetColumn(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.GetColumns">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.GetCounts(System.String[],DotSpatial.Data.ICancelProgressHandler,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.NumRows">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.SetAttributes(System.Int32,System.Data.DataTable)">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.OnInitializeVertices">
            <summary>
            Occurs when the vertices are being re-calculated.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.OnVerticesInvalidated">
            <summary>
            Fires the VerticesInvalidated event
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.UpdateCoordinates">
            <summary>
            This forces the cached vertices array to be copied back to the individual X and Y values
            of the coordinates themselves.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSet.Dispose(System.Boolean)">
            <summary>
            Disposes the unmanaged memory objects.
            </summary>
            <param name="disposeManagedResources">If this is true, managed resources are set to null.</param>
        </member>
        <member name="E:DotSpatial.Data.FeatureSet.FeatureAdded">
            <summary>
            Occurs when a new feature is added to the list
            </summary>
        </member>
        <member name="E:DotSpatial.Data.FeatureSet.FeatureRemoved">
            <summary>
            Occurs when a feature is removed from the list.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.FeatureSet.VerticesInvalidated">
            <summary>
            Occurs when the vertices are invalidated, encouraging a re-draw
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.FilePath">
            <summary>
            Gets or sets the current file path. This is the relative path relative to
            the current project folder. For feature sets coming from a database
            or a web service, the FilePath property is NULL.
            </summary>
            <value>
            The relative file path.
            </value>
            <remarks>This property is used when saving source file information to a DSPX project.</remarks>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.AttributesPopulated">
            <summary>
            Gets whether or not the attributes have all been loaded into the data table.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.CoordinateType">
            <summary>
            Gets or sets the coordinate type across the entire featureset.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.DataTable">
            <summary>
            DataTable is the System.Data.DataTable for all the attributes of this FeatureSet.
            This will call FillAttributes if it is accessed and that has not yet been called.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.Extent">
            <summary>
            This is the envelope in Extent form.  This may be cached.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.FeatureGeometryFactory">
            <summary>
            This is an optional GeometryFactory that can be set to control how the geometries on features are
            created.  The "Feature" prefix allows us to access the static Default instance on GeometryFactory.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.FeatureLookup">
            <summary>
            Gets the feature lookup Table itself.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.FeatureType">
            <summary>
            Gets or sets an enumeration specifying whether this
            featureset contains Lines, Points, Polygons or an
            unspecified type.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.Features">
            <summary>
            A list of the features in this layer
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.Filename">
            <summary>
            Gets or sets the file name of a file based feature set. The file name should be the
            absolute path including the file extension. For feature sets coming from a database
            or a web service, the Filename property is NULL.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.IndexMode">
            <summary>
            If this is true, then the ShapeIndices and Vertex values are used,
            and features are created on demand.  Otherwise the list of Features
            is used directly.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.M">
            <inheritdoc/>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.ShapeIndices">
            <summary>
            These specifically allow the user to make sense of the Vertices array.  These are
            fast acting sealed classes and are not meant to be overridden or support clever
            new implementations.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.Vertex">
            <inheritdoc/>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.VerticesAreValid">
            <summary>
            Gets a Boolean that indicates whether or not the InvalidateVertices has been called
            more recently than the cached vertex array has been built.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.FeatureSet.Z">
            <inheritdoc/>
        </member>
        <member name="T:DotSpatial.Data.FeatureSetExt">
            <summary>
            FeatureSetEM contains extension methods that should work for any IFeatureSet
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetExt.Buffer(DotSpatial.Data.IFeatureSet,System.Double,System.Boolean)">
            <summary>
            Creates a new polygon featureset that is created by buffering each of the individual shapes.
            </summary>
            <param name="self">The IFeatureSet to buffer</param>
            <param name="distance">The double distance to buffer</param>
            <param name="copyAttributes">Boolean, if this is true, then the new featureset will have
            the same attributes as the original.</param>
            <returns>The newly created IFeatureSet</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetExt.CombinedFields(DotSpatial.Data.IFeatureSet,DotSpatial.Data.IFeatureSet)">
            <summary>
            Generates an empty featureset that has the combined fields from this featureset
            and the specified featureset.
            </summary>
            <param name="self">This featureset</param>
            <param name="other">The other featureset to combine fields with.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetExt.Dissolve(DotSpatial.Data.IFeatureSet,System.String)">
            <summary>
            Calculates a union of any features that have a common value in the specified field.
            The output will only contain the specified field.  Example: Disolving a county
            shapefile based on state name to produce a single polygon shaped like the state.
            </summary>
            <param name="self">The original featureSet to disolve the features of</param>
            <param name="fieldName">The string field name to use for the disolve operation</param>
            <returns>A featureset where the geometries of features with the same attribute in the specified field have been combined.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetExt.Intersects(DotSpatial.Data.IFeature,DotSpatial.Topology.IEnvelope)">
            <summary>
            Tests to see if this feature intersects with the specified envelope
            </summary>
            <param name="self">This feature</param>
            <param name="env">The envelope to test</param>
            <returns>Boolean, true if the intersection occurs</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetExt.UnionShapes(DotSpatial.Data.IFeatureSet,DotSpatial.Data.ShapeRelateType)">
            <summary>
            This method will create a new IFeatureSet with the the shapes that intersect merged into single shapes,
            or else it will return a new featureset where EVERY shape is unioned into a single, multi-part shape.
            </summary>
            <param name="self">The source of features to union</param>
            <param name="style">This controls whether intersecting or all features are unioned</param>
            <returns>An IFeatureSet with the unioned shapes.</returns>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetExt.Intersection(DotSpatial.Data.IFeatureSet,DotSpatial.Data.IFeatureSet,DotSpatial.Data.FieldJoinType,DotSpatial.Data.IProgressHandler)">
            <summary>
            This tests each feature of the input
            </summary>
            <param name="self">This featureSet</param>
            <param name="other">The featureSet to perform intersection with</param>
            <param name="joinType">The attribute join type</param>
            <param name="progHandler">A progress handler for status messages</param>
            <returns>An IFeatureSet with the intersecting features, broken down based on the join Type</returns>
        </member>
        <member name="T:DotSpatial.Data.FeatureTypeMismatchException">
            <summary>
            FeatureTypeMismatchException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureTypeMismatchException.#ctor">
            <summary>
            Creates a new instance of FeatureTypeMismatchException
            </summary>
        </member>
        <member name="T:DotSpatial.Data.FieldJoinType">
            <summary>
            FieldJoinType
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FieldJoinType.All">
            <summary>
            Output datasets have all fields from both input and output sets.  Fields with duplicate field names will be appended with a number.
            Features from this dataset may appear more than once if more than one valid intersection occurs with the features from the
            other featureset.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FieldJoinType.ForeignOnly">
            <summary>
            The fields will be created from the fields in the other featureset.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FieldJoinType.LocalOnly">
            <summary>
            All the fields from this FeatureSet are used, and all of the features from the other featureset are considered
            to be a single geometry so that features from this set will appear no more than once in the output set.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FieldJoinType.None">
            <summary>
            No fields will be copied, but features from this featureset will be considered independantly and added as separate
            features to the output featureset.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.AttributeCache.EditRow">
            <summary>
            The row being edited
            </summary>
        </member>
        <member name="F:DotSpatial.Data.AttributeCache.Pages">
            <summary>
            The pages currently stored in the cache
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AttributeCache.#ctor(DotSpatial.Data.IAttributeSource,System.Int32)">
            <summary>
            Constructs a new Cache object that can create data tables by using a DataPageRetriever
            </summary>
            <param name="dataSupplier">Any structure that implements IDataPageRetriever</param>
            <param name="rowsPerPage">The rows per page</param>
        </member>
        <member name="M:DotSpatial.Data.AttributeCache.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.AttributeCache.SaveChanges">
            <summary>
            Saves the changes in the edit row to the tabular cache as well as the underlying database
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AttributeCache.RetrieveElement(System.Int32)">
            <summary>
            Obtains the element at the specified index
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeCache.RetrieveElement(System.Int32,System.Int32)">
            <summary>
            Obtains the element at the specified index
            </summary>
            <param name="rowIndex"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.AttributeCache.EditRowIndex">
            <summary>
            The integer index of the row being edited
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeCache.NumRows">
            <summary>
            The number of rows in the data supply
            </summary>
        </member>
        <member name="T:DotSpatial.Data.AttributeCache.AttributeCacheEnumerator">
            <summary>
            Enumerates the dictionaries that represent row content stored by field name.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AttributeCache.AttributeCacheEnumerator.#ctor(DotSpatial.Data.AttributeCache)">
            <summary>
            Creates a new AttributeCacheEnumerator
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:DotSpatial.Data.AttributeCache.AttributeCacheEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.AttributeCache.AttributeCacheEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.AttributeCache.AttributeCacheEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.AttributeCache.AttributeCacheEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.AttributeCache.AttributeCacheEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Data.AttributeCache.DataPage">
            <summary>
            Represents one page of data.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.AttributeCache.DataPage.Table">
            <summary>
            The data Table
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AttributeCache.DataPage.#ctor(System.Data.DataTable,System.Int32)">
            <summary>
            A Data page representing one page of data-row values
            </summary>
            <param name="table">The DataTable that controls the content</param>
            <param name="rowIndex">The integer row index</param>
        </member>
        <member name="M:DotSpatial.Data.AttributeCache.DataPage.Contains(System.Int32)">
            <summary>
            Tests to see if the specified index is in this page.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeCache.DataPage.MapToLowerBoundary(System.Int32)">
            <summary>
            Given an arbitrary row index, this calculates what the lower boundary would be for the page containing the index
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeCache.DataPage.MapToUpperBoundary(System.Int32)">
            <summary>
            Given an arbitrary row index, this calculates the upper boundary for the page containing the index
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.AttributeCache.DataPage.LowestIndex">
            <summary>
            The integer lowest index of the page
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeCache.DataPage.HighestIndex">
            <summary>
            The integer highest index of the page
            </summary>
        </member>
        <member name="T:DotSpatial.Data.AttributePager">
            <summary>
            AttributePager
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AttributePager.#ctor(DotSpatial.Data.IAttributeSource,System.Int32)">
            <summary>
            Creates a new instance of AttributePager
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AttributePager.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.AttributePager.Dispose">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AttributePager.MoveNext">
            <summary>
            Advances to the next attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.AttributePager.Reset">
            <summary>
            reset the attribute pager
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AttributePager.NumPages">
            <summary>
            The integer number of pages
            </summary>
            <returns>the number of pages</returns>
        </member>
        <member name="M:DotSpatial.Data.AttributePager.RowCount(System.Int32)">
            <summary>
            Gets the number of rows on the specified page.
            </summary>
            <param name="pageindex">The page index</param>
            <returns>The number of rows that should be on that page.</returns>
        </member>
        <member name="M:DotSpatial.Data.AttributePager.Row(System.Int32)">
            <summary>
            Loads the appropriate page if it isn't loaded already and returns the DataRow that
            matches the specified index
            </summary>
            <param name="rowIndex">The integer row index</param>
            <returns>The DataRow</returns>
        </member>
        <member name="M:DotSpatial.Data.AttributePager.PageOfRow(System.Int32)">
            <summary>
            Returns the page that the specified row is on
            </summary>
            <param name="rowIndex">The integer row index</param>
            <returns>The page of the row in question</returns>
        </member>
        <member name="P:DotSpatial.Data.AttributePager.Current">
            <summary>
            Gets the current table
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributePager.StartIndex">
            <summary>
            Gets the starting row index of the current page.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributePager.PageSize">
            <summary>
            Gets the pages size as a count of the number of rows each data table page should hold
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributePager.Item(System.Int32)">
            <summary>
            This returns the data table for the corresponding page index, but also sets the
            Pager so that it is sitting on the specified page index.
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.AttributeTable">
            <summary>
            A class for controlling the attribute Table related information for a shapefile.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.AttributeTable._isFilling">
            <summary>
            Indicates that the Fill methode is called from inside itself.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.#ctor">
            <summary>
            Creates a new instance of an attribute Table with no file reference
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.#ctor(System.String)">
            <summary>
            Creates a new AttributeTable with the specified fileName, or opens
            an existing file with that name.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.SupplyPageOfData(System.Int32,System.Int32)">
            <summary>
            Reads just the content requested in order to satisfy the paging ability of VirtualMode for the DataGridView
            </summary>
            <param name="lowerPageBoundary"></param>
            <param name="rowsPerPage"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.SupplyPageOfData(System.Int32,System.Int32,System.String)">
            <summary>
            Reads just the content requested.
            </summary>
            <param name="lowerPageBoundary">starting row</param>
            <param name="rowsPerPage">number of rows to return</param>
            <param name="fieldName">field for which data is to be returned</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.SupplyPageOfData(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads just the contents requested.  Faster than returning the entire record if you have lots of attributes but only want a few.
            </summary>
            <param name="lowerPageBoundary">starting row</param>
            <param name="rowsPerPage">number of rows to return</param>
            <param name="fieldNames">fields for which data is to be returned</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.SetAttributes(System.Int32,System.Data.DataTable)">
            <summary>
            Reads just the content requested in order to satisfy the paging ability of VirtualMode for the DataGridView
            </summary>
            <param name="startRow">The 0 based integer index of the start row</param>
            <param name="dataValues">The DataTable with the 0 row corresponding to the start row.  If this exceeds the size of the data table, it will add rows.</param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.GetAttributes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get a DataTable containing the specified rows
            </summary>
            <param name="rowNumbers"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.GetFileIndex(System.Int32)">
            <summary>
            Accounts for deleted rows and returns the index as it appears in the file
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.GetRowIndexFromFileIndex(System.Int32)">
            <summary>
            Accounts for deleted rows and adjusts a file index to a row index
            </summary>
            <param name="fileIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.AddRow(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Saves the new row to the data source and updates the file with new content.
            </summary>
            <param name="values">The values organized against the dictionary of field names.</param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.RemoveRowAt(System.Int32)">
            <summary>
            Removes the row at the specified row index from both the table in memory
            and by marking it as deleted in the file.  This should work even in cases
            where the file is very large and working as an AttributeSource.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.AddRow(System.Data.DataRow)">
            <summary>
            Saves the new row to the data source and updates the file with new content.
            </summary>
            <param name="values">The values organized against the dictionary of field names.</param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.Edit(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            saves a single row to the data source.
            </summary>
            <param name="index">the integer row (or FID) index</param>
            <param name="values">The object array holding the new values to store.</param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.Edit(System.Int32,System.Data.DataRow)">
            <summary>
            saves a single row to the data source.
            </summary>
            <param name="index">the integer row (or FID) index</param>
            <param name="values">The object array holding the new values to store.</param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.Edit(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,System.Data.DataRow}})">
            <summary>
            saves a collection of rows to the data source
            </summary>
            <param name="indexDataRowPairs"></param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.Edit(System.Collections.Generic.IEnumerable{System.Int32},DotSpatial.Data.RowEditEvent)">
            <summary>
             Edit the specified rows via a client supplied callback
            </summary>
            <param name="indices">rows to edit</param>
            <param name="rowCallback">client supplied callback</param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.BeginEdit">
            <summary>
            Setup before calls to OverwriteDataRow
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.EndEdit">
            <summary>
            Cleanup after finished calling OverwriteDataRow
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.OverwriteDataRow(System.Int32,System.Object,DotSpatial.Data.NumberConverter[])">
            <summary>
            Common code for editing an existing row in the data source
            </summary>
            <param name="index"></param>
            <param name="values"></param>
            <param name="ncs"></param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.ReadTableRow(System.Int32,System.Int32,System.Byte[],System.Data.DataTable)">
            <summary>
            Read a single dbase record
            </summary>
            <returns>Returns an IFeature with information appropriate for the current row in the Table</returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.Open(System.String)">
            <summary>
            Reads all the information from the file, including the vector shapes and the database component.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.Open(System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Reads the header and if deletedRows is null, searches file for deletedRows if file size indicates possibility of deleted rows.
            </summary>
            <param name="fileName"></param>
            <param name="deletedRows"></param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.Fill(System.Int32)">
            <summary>
            This populates the Table with data from the file.
            </summary>
            <param name="numRows">In the event that the dbf file is not found, this indicates how many blank rows should exist in the attribute Table.</param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.Save">
            <summary>
            Attempts to save the file to the path specified by the Filename property.
            This should be the .shp extension.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves this Table to the specified fileName
            </summary>
            <param name="fileName">The string fileName to save to</param>
            <param name="overwrite">A boolean indicating whether or not to write over the file if it exists.</param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.ColumnNameExists(System.String)">
            <summary>
             Tests to see if the list of columns contains the specified name or not.
            </summary>
            <param name="name">Name of the column we're looking for.</param>
            <returns>True, if the column exists.</returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.WriteTable">
            <summary>
            This appends the content of one datarow to a dBase file.
            </summary>
            <exception cref="T:System.ArgumentNullException">The columnValues parameter was null</exception>
            <exception cref="T:System.InvalidOperationException">Header records need to be written first.</exception>
            <exception cref="T:System.IO.InvalidDataException">Table property of columnValues parameter cannot be null.</exception>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.WriteSpaces(System.Int32)">
            <summary>
            Writes a number of spaces equal to numspaces
            </summary>
            <param name="numspaces">The integer number of spaces to write</param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.Write(System.Double,System.Int32,System.Int32)">
             <summary>
            
             </summary>
             <param name="number"></param>
             <param name="length"></param>
             <param name="decimalCount"></param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.Write(System.Int64,System.Int32,System.Int32)">
            <summary>
            Writes an integer so that it is formatted for dbf.  This is still buggy since it is possible to lose info here.
            </summary>
            <param name="number">The long value</param>
            <param name="length">The length of the field.</param>
            <param name="decimalCount">The number of digits after the decimal</param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.Write(System.String,System.Int32)">
             <summary>
            
             </summary>
             <param name="text"></param>
             <param name="length"></param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.WriteDate(System.DateTime)">
             <summary>
            
             </summary>
             <param name="date"></param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.Write(System.Boolean)">
             <summary>
            
             </summary>
             <param name="flag"></param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.WriteHeader(System.IO.BinaryWriter)">
            <summary>
            Write the header data to the DBF file.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.ReadTableRowFromChars(System.Int32,System.IO.BinaryReader)">
            <summary>
            Read a single dbase record
            </summary>
            <returns>Returns an IFeature with information appropriate for the current row in the Table</returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.ParseColumn(DotSpatial.Data.Field,System.Int32,System.Char[],System.Data.DataTable)">
            <summary>
            Parse the character data for one column into an object ready for insertion into a data row
            </summary>
            <param name="field"></param>
            <param name="currentRow"></param>
            <param name="cBuffer"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.ReadTableHeader(System.IO.BinaryReader)">
            <summary>
            Read the header data from the DBF file.
            </summary>
            <param name="reader">BinaryReader containing the header.</param>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.UpgradeColumn(DotSpatial.Data.Field,System.Type,System.Int32,System.Int32,System.Data.DataTable)">
            <summary>
            This systematically copies all the existing values to a new data column with the same properties,
            but with a new data type.  Values that cannot convert will be set to null.
            </summary>
            <param name="oldDataColumn">The old data column to update</param>
            <param name="newDataType">The new data type that the column should become</param>
            <param name="currentRow">The row up to which values should be changed for</param>
            <param name="columnIndex">The column index of the field being changed</param>
            <param name="table"> The Table to apply this strategy to.</param>
            <returns>An integer list showing the index values of the rows where the conversion failed.</returns>
        </member>
        <member name="M:DotSpatial.Data.AttributeTable.OnAttributesFilled">
            <summary>
            Fires the AttributesFilled event
            </summary>
        </member>
        <member name="E:DotSpatial.Data.AttributeTable.AttributesFilled">
            <summary>
            Occurs after content has been loaded into the attribute data.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.AttributesPopulated">
            <summary>
            gets or sets whether the Attributes have been populated.  If data was "opened" from a file,
            and a query is made to the DataTable while _attributesPopulated is false, then
            a Fill method will be called automatically
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.HeaderLength">
            <summary>
            The byte length of the header
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.Columns">
            <summary>
            The columns
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.FileType">
            <summary>
            The file type
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.Filename">
            <summary>
            The fileName of the dbf file
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.NumRecords">
            <summary>
            Number of records
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.ProgressHandler">
            <summary>
            Gets or sets the progress handler for this Attribute Table.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.ProgressMeter">
            <summary>
            Gets or sets the progress meter that is directly tied to the progress handler
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.RecordLength">
            <summary>
            The byte length of each record
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.LanguageDriverId">
            <summary>
            Gets the language driver ID (LDID) for this file
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.Encoding">
            <summary>
            Gets the encoding used for text-based data and column names (based on LDID)
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.Table">
            <summary>
            DataSet
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.UpdateDate">
            <summary>
            Last date written to
            </summary>
        </member>
        <member name="P:DotSpatial.Data.AttributeTable.DeletedRows">
            <summary>
            Gets the list of raw row numbers that have been marked for deletion
            </summary>
        </member>
        <member name="T:DotSpatial.Data.LineShapefile">
            <summary>
            A shapefile class that handles the special case where the vectors are lines
            </summary>
        </member>
        <member name="T:DotSpatial.Data.Shapefile">
            <summary>
            This is a generic shapefile that is inherited by other specific shapefile types.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.#ctor">
            <summary>
            When creating a new shapefile, this simply prevents the basic values from being null.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.#ctor(DotSpatial.Topology.FeatureType)">
            <summary>
            Creates a new shapefile that has a specific feature type
            </summary>
            <param name="featureType"></param>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.#ctor(System.String)">
            <summary>
            Creates a new instance of a shapefile based on a fileName
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.GetCounts(System.String[],DotSpatial.Data.ICancelProgressHandler,System.Int32)">
            <summary>
            Gets the count of members that match the expression
            </summary>
            <param name="expressions">The string expression to test</param>
            <param name="progressHandler">THe progress handler that can also cancel the counting</param>
            <param name="maxSampleSize">The integer maximum sample size from which to draw counts.  If this is negative, it will not be used.</param>
            <returns>The integer count of the members that match the expression.</returns>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.AttributeTableAttributesFilled(System.Object,System.EventArgs)">
            <summary>
            This makes the assumption that the organization of the feature list has not
            changed since loading the attribute content.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.OpenFile(System.String)">
            <summary>
            This will return the correct shapefile type by reading the fileName.
            </summary>
            <param name="fileName">A string specifying the file with the extension .shp to open.</param>
            <returns>A correct shapefile object which is exclusively for reading the .shp data</returns>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.OpenFile(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            This will return the correct shapefile type by reading the fileName.
            </summary>
            <param name="fileName">A string specifying the file with the extension .shp to open.</param>
            <param name="progressHandler">receives progress messages and overrides the ProgressHandler on the DataManager.DefaultDataManager</param>
            <returns>A correct shapefile object which is exclusively for reading the .shp data</returns>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.Edit(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            saves a single row to the data source.
            </summary>
            <param name="index">the integer row (or FID) index</param>
            <param name="values">The object array holding the new values to store.</param>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.Edit(System.Int32,System.Data.DataRow)">
            <summary>
            saves a single row to the data source.
            </summary>
            <param name="index">the integer row (or FID) index</param>
            <param name="values">The object array holding the new values to store.</param>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.AddRow(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Saves the new row to the data source and updates the file with new content.
            </summary>
            <param name="values">The values organized against the dictionary of field names.</param>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.AddRow(System.Data.DataRow)">
            <summary>
            Saves the new row to the data source and updates the file with new content.
            </summary>
            <param name="values">The values organized against the dictionary of field names.</param>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.GetAttributes(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.Shapefile.SetAttributes(System.Int32,System.Data.DataTable)">
            <summary>
            Converts a page of content from a DataTable format, saving it back to the source.
            </summary>
            <param name="startIndex">The 0 based integer index representing the first row in the file (corresponding to the 0 row of the data table)</param>
            <param name="pageValues">The DataTable representing the rows to set.  If the row count is larger than the dataset, this will add the rows instead.</param>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.SelectByAttribute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.Shapefile.FillAttributes">
            <summary>
            Reads the attributes from the specified attribute Table.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.SetupFeatureLookup">
            <summary>
            Sets up the feature lookup, if it has not been already.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.WriteFileLength(System.String,System.Int32)">
            <summary>
            This doesn't rewrite the entire header or erase the existing content.  This simply replaces the file length
            in the file with the new file length.  This is generally because we want to write the header first,
            but don't know the total length of a new file until cycling through the entire file.  It is easier, therefore
            to update the length after editing.
            </summary>
            <param name="fileName">A string fileName</param>
            <param name="length">The integer length of the file in 16-bit words</param>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.ToInt(System.Byte[],System.Int32@,System.Boolean)">
            <summary>
            Reads 4 bytes from the specified byte array starting with offset.
            If IsBigEndian = true, then this flips the order of the byte values.
            </summary>
            <param name="value">An array of bytes that is at least 4 bytes in length from the startIndex</param>
            <param name="startIndex">A 0 based integer index where the double value begins</param>
            <param name="isLittleEndian">If this is true, then the order of the bytes is reversed before being converted to a double</param>
            <returns>A double created from reading the byte array</returns>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.ToDouble(System.Byte[],System.Int32@,System.Boolean)">
            <summary>
            Reads 8 bytes from the specified byte array starting with offset.
            If IsBigEndian = true, then this flips the order of the byte values.
            </summary>
            <param name="value">An array of bytes that is at least 8 bytes in length from the startIndex</param>
            <param name="startIndex">A 0 based integer index where the double value begins</param>
            <param name="isLittleEndian">If this is true, then the order of the bytes is reversed before being converted to a double</param>
            <returns>A double created from reading the byte array</returns>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.WriteBytes(System.Byte[],System.Int32,System.Double,System.Boolean)">
            <summary>
            Converts the double value into bytes and inserts them starting at startIndex into the destArray
            </summary>
            <param name="destArray">A byte array where the values should be written</param>
            <param name="startIndex">The starting index where the values should be inserted</param>
            <param name="value">The double value to convert</param>
            <param name="isLittleEndian">Specifies whether the value should be written as big or little endian</param>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.WriteBytes(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts the double value into bytes and inserts them starting at startIndex into the destArray.
            This will correct this system's natural byte order to reflect what is required to match the
            shapefiles specification.
            </summary>
            <param name="destArray">A byte array where the values should be written</param>
            <param name="startIndex">The starting index where the values should be inserted</param>
            <param name="value">The integer value to convert</param>
            <param name="isLittleEndian">Specifies whether the value should be written as big or little endian</param>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.ReadIndexFile(System.String)">
            <summary>
            Reads the entire index file in order to get a breakdown of how shapes are broken up.
            </summary>
            <param name="fileName">A string fileName of the .shx file to read.</param>
            <returns>A List of ShapeHeaders that give offsets and lengths so that reading can be optimized</returns>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.UpdateAttributes">
            <summary>
            Ensures that the attribute Table will have information that matches the current Table of attribute information
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.ReadProjection">
            <summary>
            This uses the fileName of this shapefile to read the prj file of the same name
            and stores the result in the Projection class.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.SaveProjection">
            <summary>
            Automatically uses the fileName of this shapefile to save the projection
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.GetAttributes(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads just the content requested in order to satisfy the paging ability of VirtualMode for the DataGridView
            </summary>
            <param name="startIndex">The integer lower page boundary</param>
            <param name="numRows">The integer number of attribute rows to return for the page</param>
            <param name="fieldNames">The list or array of fieldnames to return.</param>
            <returns>A DataTable populated with data rows with only the specified values.</returns>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.NumRows">
            <summary>
            The number of rows
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.GetColumns">
            <summary>
            This gets a copy of the actual internal list of columns.
            This should never be used to make changes to the column collection.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.EnsureValidFileToSave(System.String,System.Boolean)">
            <summary>
            Checks that shape file can be saved to given fileName.
            </summary>
            <param name="fileName">File name to save.</param>
            <param name="overwrite">Overwrite file or not.</param>
        </member>
        <member name="M:DotSpatial.Data.Shapefile.HeaderSaveAs(System.String)">
            <summary>
            Saves header
            </summary>
            <param name="fileName">File to save.</param>
        </member>
        <member name="P:DotSpatial.Data.Shapefile.BufferSize">
            <summary>
            The buffer size is an integer value in bytes specifying how large a piece of memory can be used at any one time.
            Reading and writing from the disk is faster when done all at once.  The larger this number the more effective
            the disk management, but the more ram will be required (and the more likely to trip an out of memory error).
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Shapefile.AttributesPopulated">
            <summary>
            Gets whether or not the attributes have all been loaded into the data table.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Shapefile.DataTable">
            <summary>
            This re-directs the DataTable to work with the attribute Table instead.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Shapefile.Header">
            <summary>
            A general header structure that stores some basic information about the shapefile.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Shapefile.Attributes">
            <summary>
            Gets or sets the attribute Table used by this shapefile.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Shapefile.FilePath">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.LineShapefile.#ctor">
            <summary>
            Creates a new instance of a LineShapefile for in-ram handling only.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.LineShapefile.#ctor(System.String)">
            <summary>
            Creates a new instance of a LineShapefile that is loaded from the supplied fileName.
            </summary>
            <param name="fileName">The string fileName of the polygon shapefile to load</param>
        </member>
        <member name="M:DotSpatial.Data.LineShapefile.Open(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens a shapefile
            </summary>
            <param name="fileName">The string fileName of the line shapefile to load</param>
            <param name="progressHandler">Any valid implementation of the DotSpatial.Data.IProgressHandler</param>
        </member>
        <member name="M:DotSpatial.Data.LineShapefile.GetFeature(System.Int32)">
            <summary>
            Gets the specified feature by constructing it from the vertices, rather
            than requiring that all the features be created. (which takes up a lot of memory).
            </summary>
            <param name="index">The integer index</param>
        </member>
        <member name="M:DotSpatial.Data.LineShapefile.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves the file to a new location
            </summary>
            <param name="fileName">The fileName to save</param>
            <param name="overwrite">Boolean that specifies whether or not to overwrite the existing file</param>
        </member>
        <member name="T:DotSpatial.Data.MultiPointShapefile">
            <summary>
            A shapefile class that handles the special case where each features has multiple points
            </summary>
        </member>
        <member name="M:DotSpatial.Data.MultiPointShapefile.#ctor">
            <summary>
            Creates a new instance of a MultiPointShapefile for in-ram handling only.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.MultiPointShapefile.#ctor(System.String)">
            <summary>
            Creates a new instance of a MultiPointShapefile that is loaded from the supplied fileName.
            </summary>
            <param name="fileName">The string fileName of the polygon shapefile to load</param>
        </member>
        <member name="M:DotSpatial.Data.MultiPointShapefile.GetFeature(System.Int32)">
            <summary>
            Gets the feature at the specified index offset
            </summary>
            <param name="index">the integer index</param>
            <returns>An IFeature created from the shape at the specified offset</returns>
        </member>
        <member name="M:DotSpatial.Data.MultiPointShapefile.Open(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens a shapefile
            </summary>
            <param name="fileName">The string fileName of the point shapefile to load</param>
            <param name="progressHandler">Any valid implementation of the DotSpatial.Data.IProgressHandler</param>
        </member>
        <member name="M:DotSpatial.Data.MultiPointShapefile.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves the file to a new location
            </summary>
            <param name="fileName">The fileName to save</param>
            <param name="overwrite">Boolean that specifies whether or not to overwrite the existing file</param>
        </member>
        <member name="T:DotSpatial.Data.NumberConverter">
            <summary>
            Numbers are based on the old school dbf definitions of data formats, and so can only store
            a very limited range of values.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.NumberConverter.MaximumLength">
            <summary>
            Numbers can contain ASCII text up till 18 characters long, but no longer
            </summary>
        </member>
        <member name="F:DotSpatial.Data.NumberConverter.NumberConversionFormatProvider">
            <summary>
             Format provider to use to convert DBF numbers to strings and characters
            </summary>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of NumberConverter where the length and decimal count are known.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Cycles through the numeric values in the specified column and determines a selection of
            length and decimal count can accurately store the data.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.RandomDouble">
            <summary>
            Creates a new, random double that is constrained by the specified length and decimal count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.RandomFloat">
            <summary>
            Creates a new, random float that is constrained by the specified length and decimal count.
            </summary>
            <returns>A new float.  Floats can only store about 8 digits of precision, so specifying a high </returns>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.RandomDecimal">
            <summary>
            Creates a new, random decimal that is constrained by the specified length and decimal count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.RandomChars(System.Int32)">
            <summary>
            Creates a new random array of characters that represents a number and is constrained by the specified length and decimal count
            </summary>
            <param name="numDigits">The integer number of significant (non-zero) digits that should be created as part of the number.</param>
            <returns>A character array of that matches the length and decimal count specified by this properties on this number converter</returns>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.FromString(System.String)">
            <summary>
            Converts from a string, or 0 if the parse failed
            </summary>
            <param name="value">The string value to parse</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.ToString(System.Double)">
            <summary>
            Converts the specified double value to a string that can be used for the number field
            </summary>
            <param name="number">The double precision floating point value to convert to a string</param>
            <returns>A string version of the specified number</returns>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.ToString(System.Decimal)">
            <summary>
            Converts the specified decimal value to a string that can be used for the number field
            </summary>
            <param name="number">The decimal value to convert to a string</param>
            <returns>A string version of the specified number</returns>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.ToString(System.Single)">
            <summary>
            Converts the specified float value to a string that can be used for the number field
            </summary>
            <param name="number">The floating point value to convert to a string</param>
            <returns>A string version of the specified number</returns>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.ToChar(System.Double)">
            <summary>
            Converts the specified decimal value to a string that can be used for the number field
            </summary>
            <param name="number">The decimal value to convert to a string</param>
            <returns>A string version of the specified number</returns>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.ToChar(System.Single)">
            <summary>
            Converts the specified decimal value to a string that can be used for the number field
            </summary>
            <param name="number">The decimal value to convert to a string</param>
            <returns>A string version of the specified number</returns>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.ToChar(System.Decimal)">
            <summary>
            Converts the specified decimal value to a string that can be used for the number field
            </summary>
            <param name="number">The decimal value to convert to a string</param>
            <returns>A string version of the specified number</returns>
        </member>
        <member name="M:DotSpatial.Data.NumberConverter.UpdateDecimalFormatString">
            <summary>
            Compute and update the DecimalFormatString from the precision specifier
            </summary>
        </member>
        <member name="P:DotSpatial.Data.NumberConverter.Length">
            <summary>
            Gets or set the length
            </summary>
        </member>
        <member name="P:DotSpatial.Data.NumberConverter.DecimalCount">
            <summary>
            Gets or sets the decimal count to use for this number converter
            </summary>
        </member>
        <member name="P:DotSpatial.Data.NumberConverter.DecimalFormatString">
            <summary>
            Gets or sets the format string used to convert doubles, floats, and decimals to strings
            </summary>
        </member>
        <member name="T:DotSpatial.Data.NumberException">
            <summary>
            NumberException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.NumberException.#ctor(System.String)">
            <summary>
            An exception that is specifically fo the NumberConverter class
            </summary>
            <param name="message">The message for the exception</param>
        </member>
        <member name="T:DotSpatial.Data.PointShapefile">
            <summary>
            A shapefile class that handles the special case where the data type is point
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PointShapefile.#ctor">
            <summary>
            Creates a new instance of a PointShapefile for in-ram handling only.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PointShapefile.#ctor(System.String)">
            <summary>
            Creates a new instance of a PointShapefile that is loaded from the supplied fileName.
            </summary>
            <param name="fileName">The string fileName of the polygon shapefile to load</param>
        </member>
        <member name="M:DotSpatial.Data.PointShapefile.Open(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens a shapefile
            </summary>
            <param name="fileName">The string fileName of the point shapefile to load</param>
            <param name="progressHandler">Any valid implementation of the DotSpatial.Data.IProgressHandler</param>
        </member>
        <member name="M:DotSpatial.Data.PointShapefile.FillPoints(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Obtains a typed list of ShapefilePoint structures with double values associated with the various coordinates.
            </summary>
            <param name="fileName">A string fileName</param>
            <param name="progressHandler">Progress handler</param>
        </member>
        <member name="M:DotSpatial.Data.PointShapefile.GetFeature(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.PointShapefile.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves the shapefile to a different fileName, but still as a shapefile.  This method does not support saving to
            any other file format.
            </summary>
            <param name="fileName">The string fileName to save as</param>
            <param name="overwrite">A boolean that is true if the file should be overwritten</param>
        </member>
        <member name="T:DotSpatial.Data.PolygonShapefile">
            <summary>
            A shapefile class that handles the special case where the data is made up of polygons
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefile.#ctor">
            <summary>
            Creates a new instance of a PolygonShapefile for in-ram handling only.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefile.#ctor(System.String)">
            <summary>
            Creates a new instance of a PolygonShapefile that is loaded from the supplied fileName.
            </summary>
            <param name="fileName">The string fileName of the polygon shapefile to load</param>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefile.Open(System.String,DotSpatial.Data.IProgressHandler)">
            <summary>
            Opens a shapefile
            </summary>
            <param name="fileName">The string fileName of the polygon shapefile to load</param>
            <param name="progressHandler">Any valid implementation of the DotSpatial.Data.IProgressHandler</param>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefile.GetFeature(System.Int32)">
            <summary>
            Gets the specified feature by constructing it from the vertices, rather
            than requiring that all the features be created. (which takes up a lot of memory).
            </summary>
            <param name="index">The integer index</param>
        </member>
        <member name="M:DotSpatial.Data.PolygonShapefile.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves the file to a new location
            </summary>
            <param name="fileName">The fileName to save</param>
            <param name="overwrite">Boolean that specifies whether or not to overwrite the existing file</param>
        </member>
        <member name="T:DotSpatial.Data.ShapefileHeader">
            <summary>
            The header for the .shp file and the .shx file that support shapefiles
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapefileHeader.#ctor">
            <summary>
            Creates a new, blank ShapeHeader
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapefileHeader.#ctor(System.String)">
            <summary>
            Opens the specified fileName directly
            </summary>
            <param name="inFilename">The string fileName to open as a header.</param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileHeader.Clear">
            <summary>
            Resets all the extent values to 0
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapefileHeader.Open(System.String)">
            <summary>
            Parses the first 100 bytes of a shapefile into the important values
            </summary>
            <param name="inFilename">The fileName to read</param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileHeader.Save">
            <summary>
            Saves changes to the .shp file will also automatically update the .shx file.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapefileHeader.SaveAs(System.String)">
            <summary>
            Saves changes to the .shp file and will also automatically create the header for the .shx file.
            This will no longer automatically delete an existing shapefile.
            </summary>
            <param name="outFilename">The string fileName to create.</param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileHeader.Write(System.String,System.Int32)">
            <summary>
            Writes the current content to the specified file.
            </summary>
            <param name="destFilename">The string fileName to write to</param>
            <param name="destFileLength">The only difference between the shp header and the
             shx header is the file length parameter.</param>
        </member>
        <member name="M:DotSpatial.Data.ShapefileHeader.ToEnvelope">
            <summary>
            Generates a new envelope based on the extents of this shapefile.
            </summary>
            <returns>An Envelope</returns>
        </member>
        <member name="M:DotSpatial.Data.ShapefileHeader.ToExtent">
            <summary>
            Generates a new extent from the shape header.  This will infer the whether the ExtentMZ, ExtentM
            or Extent class is the best implementation.  Casting is required to access the higher
            values from the Extent return type.
            </summary>
            <returns>Extent, which can be Extent, ExtentM, or ExtentMZ</returns>
        </member>
        <member name="M:DotSpatial.Data.ShapefileHeader.SetExtent(DotSpatial.Data.IExtent)">
            <summary>
            The shape type is assumed to be fixed, and will control how the input extent is treated as far
            as M and Z values, rather than updating the shape type based on the extent.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.FileCode">
            <summary>
            Gets or sets the integer file code that should always be 9994.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.FileLength">
            <summary>
            Gets or sets the integer file length in bytes
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.Filename">
            <summary>
            Gets or sets the string fileName to use for this header
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.ShapeType">
            <summary>
            Gets or sets the DotSpatial.Data.Shapefiles.ShapeType enumeration specifying
            whether the shapes are points, lines, polygons etc.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.ShxFilename">
            <summary>
            Changes the extension of the fileName to .shx instead of .shp
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.Version">
            <summary>
            Gets or sets the version, which should be 1000
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.Xmin">
            <summary>
            The minimum X coordinate for the values in the shapefile
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.Xmax">
            <summary>
            The maximum X coordinate for the shapes in the shapefile
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.Ymin">
            <summary>
            The minimum Y coordinate for the values in the shapefile
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.Ymax">
            <summary>
            The maximum Y coordinate for the shapes in the shapefile
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.Zmin">
            <summary>
            The minimum Z coordinate for the values in the shapefile
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.Zmax">
            <summary>
            The maximum Z coordinate for the shapes in the shapefile
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.Mmin">
            <summary>
            The minimum M coordinate for the values in the shapefile
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.Mmax">
            <summary>
            The maximum M coordinate for the shapes in the shapefile
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileHeader.ShxLength">
            <summary>
            Gets or sets the length of the shx file in 16 bit words.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ShapeHeader">
            <summary>
            A simple structure that contains the elements of a shapefile that must exist
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeHeader.ContentLength">
            <summary>
            The content length
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeHeader.Offset">
            <summary>
            The offset in 16-bit words
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapeHeader.ByteOffset">
            <summary>
            The offset in bytes
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapeHeader.ByteLength">
            <summary>
            The length in bytes
            </summary>
        </member>
        <member name="T:DotSpatial.Data.FeatureSetPack">
            <summary>
            The FeatureSetPack contains a MultiPoint, Line and Polygon FeatureSet which can
            handle the various types of geometries that can arrive from a mixed geometry.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSetPack.Lines">
            <summary>
            The featureset with all the lines
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSetPack.Points">
            <summary>
            The featureset with all the points
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSetPack.Polygons">
            <summary>
            The featureset with all the polygons
            </summary>
        </member>
        <member name="F:DotSpatial.Data.FeatureSetPack._polygonVertices">
            <summary>
            Stores the raw vertices from the different shapes in a list while being created.
            That way, the final array can be created one time.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetPack.#ctor">
            <summary>
            Creates a new instance of the FeatureSetPack
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetPack.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.FeatureSetPack.Clear">
            <summary>
            Clears the vertices and sets up new featuresets.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetPack.Add(System.Double[],DotSpatial.Data.ShapeRange)">
            <summary>
            Adds the shape.  Assumes that the "part" indices are created with a 0 base, and the number of
            vertices is specified.  The start range of each part will be updated with the new shape range.
            The vertices array itself iwll be updated during hte stop editing step.
            </summary>
            <param name="shapeVertices"></param>
            <param name="shape"></param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetPack.StopEditing">
            <summary>
            Finishes the featuresets by converting the lists
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetPack.Combine(System.Collections.Generic.IEnumerable{System.Double[]},System.Int32)">
            <summary>
            Combines the vertices, finalizing the creation
            </summary>
            <param name="verts"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.FeatureSetPack.FeatureSetPackEnumerator">
            <summary>
            Enuemratres the FeatureSetPack in Polygon, Line, Point order.  If any member
            is null, it skips that member.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetPack.FeatureSetPackEnumerator.#ctor(DotSpatial.Data.FeatureSetPack)">
            <summary>
            Creates the FeatureSetPackEnumerator based on the specified FeaturSetPack
            </summary>
            <param name="parent">The Pack</param>
        </member>
        <member name="M:DotSpatial.Data.FeatureSetPack.FeatureSetPackEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.FeatureSetPack.FeatureSetPackEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.FeatureSetPack.FeatureSetPackEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.FeatureSetPack.FeatureSetPackEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Data.WkbFeatureReader">
            <summary>
            WKBPointReader
            </summary>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.CheckEndian(System.Byte[],System.Int32)">
            <summary>
            Given the array of bytes, this reverses the bytes based on size.  So if size if 4, the
            reversal will flip uints of 4 bytes at a time.
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.ReadInt32(System.IO.Stream)">
             <summary>
            
             </summary>
             <param name="data">The raw byte data.</param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.ReadInt32(System.IO.Stream,System.Int32)">
             <summary>
            
             </summary>
             <param name="data">The raw byte data.</param>
             <param name="count">The count of integers, not bytes.</param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.ReadDouble(System.IO.Stream,System.Int32)">
            <summary>
            Reads the specified number of doubles
            </summary>
            <param name="data"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.GetFeatureSets(System.Byte[])">
            <summary>
            Since WKB can in fact store different kinds of shapes, this will split out
            each type of shape into a different featureset.  If all the shapes are
            the same kind of feature, thre will only be one list of feature types.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.GetFeatureSets(System.IO.Stream)">
            <summary>
            Gets a FeatureSetPack from the wkb
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.ReadFeature(System.IO.Stream,DotSpatial.Data.FeatureSetPack)">
            <summary>
            Reads only a single geometry into a feature.  This may be a multi-part geometry.
            </summary>
            <param name="data"></param>
            <param name="results"></param>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.ReadShape(System.IO.Stream)">
            <summary>
            Reads only a single geometry into a feature.  This may be a multi-part geometry,
            but cannot be a mixed part geometry.  Anything that registers as "geometryCollection"
            will trigger an exception.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.ReadShape(System.IO.Stream,DotSpatial.Topology.FeatureType)">
            <summary>
            Attempts to read in an entry to the specified feature type.  If the feature type does not match
            the geometry type, this will return null.  (A Point geometry will be accepted by MultiPoint
            feature type, but not the other way arround.  Either way, this will advance the reader
            through the shape feature.  Using the Unspecified will always return the shape it reads,
            or null in the case of mixed feature collections which are not supported.
            </summary>
            <param name="data"></param>
            <param name="featureType"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.ReadPoint(System.IO.Stream)">
            <summary>
            This assumes that the byte order and shapetype have already been read.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.ReadPoint(System.IO.Stream,DotSpatial.Data.FeatureSetPack)">
            <summary>
            This assumes that the byte order and shapetype have already been read.
            </summary>
            <param name="data"></param>
            <param name="results"></param>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.ReadMultiPoint(System.IO.Stream)">
            <summary>
            Reads one multipoint shape from a data stream.
            (this assumes that the two bytes (endian and type) have already been read.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.ReverseCoords(System.Double[])">
            <summary>
            Fix introduced by JamesP@esdm.co.uk. 3/11/2010
            Using Array.Reverse does not work because it has the unwanted effect of flipping
            the X and Y values.
            </summary>
            <param name="coords">The double precision XY coordinate array of vertices</param>
            <returns>The double array in reverse order.</returns>
        </member>
        <member name="M:DotSpatial.Data.WkbFeatureReader.IsCounterClockwise(System.Double[])">
            <summary>
            Calculates the area and if the area is negative, this is considered a hole.
            </summary>
            <returns>Boolean, true if this has a negative area and should be thought of as a hole</returns>
        </member>
        <member name="T:DotSpatial.Data.PartRange">
            <summary>
            Vertices require methods to work quickly with data.  These are not designed to be inherited,
            overridden or equiped with interfaces and properties.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.VertexRange">
            <summary>
            RangeIndex
            </summary>
        </member>
        <member name="M:DotSpatial.Data.VertexRange.#ctor">
            <summary>
            Creates an empty vertex range that can have the vertices and number of vertices assigned later
            </summary>
        </member>
        <member name="M:DotSpatial.Data.VertexRange.#ctor(System.Double[],System.Int32,System.Int32)">
            <summary>
            Creates a new instance of RangeIndex
            </summary>
            <param name="allVertices">An array of all the vertex locations</param>
            <param name="shapeOffset"></param>
            <param name="partOffset"></param>
        </member>
        <member name="M:DotSpatial.Data.VertexRange.GetEnumerator">
            <summary>
            Gets an enumerator.  This exists to make it easier to cycle values,
            but in truth should not be used because it re-adds the property accessor
            which slows down the data access, which is the whole point of putting
            all the vertices into a jagged array of doubles in the first place.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.VertexRange.PartOffset">
            <summary>
            For parts, controlling the part offset is perhaps more useful that controlling the shape offset.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.VertexRange.ShapeOffset">
            <summary>
            The StartIndex is the sum of the shape offset and the part offset.  Controlling them separately
            allows the entire shape offset to be adjusted independantly after the part is created.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.VertexRange.StartIndex">
            <summary>
            The integer index of the first vertex included in this range.  This is overridden
            in the case of part ranges to also take into account the shape start index.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.VertexRange.EndIndex">
            <summary>
            the integer index of the last vertex included in this range
            </summary>
        </member>
        <member name="P:DotSpatial.Data.VertexRange.NumVertices">
            <summary>
            Gets or sets the number of vertices.  This will also set the EndIndex
            relative to the start position.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.VertexRange.Vertices">
            <summary>
            Gets or sets the vertices
            </summary>
        </member>
        <member name="T:DotSpatial.Data.VertexRange.VertexRangeEnumerator">
            <summary>
            The enumerator is here to provide an easy method for cycling vertex values
            in each range.  This sort of defeats the point because it adds
            two method calls for advancing each step (one to MoveNext and one to
            access the property.  The whole point of loading everything
            into a single array of vertices in the first place is to avoid
            property accessors slowing down the process.  However, it's here
            if someone wants it.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.VertexRange.VertexRangeEnumerator.#ctor(System.Double[],System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the VertexRangeEnumerator
            </summary>
            <param name="vertices">The vertices to create</param>
            <param name="start">The integer index of the first included vertex </param>
            <param name="end">The integer index of the last included vertex</param>
        </member>
        <member name="M:DotSpatial.Data.VertexRange.VertexRangeEnumerator.Dispose">
            <summary>
            This does nothing
            </summary>
        </member>
        <member name="M:DotSpatial.Data.VertexRange.VertexRangeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next position
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.VertexRange.VertexRangeEnumerator.Reset">
            <summary>
            Resets this enumerator to the beginning of the range of vertices
            </summary>
        </member>
        <member name="P:DotSpatial.Data.VertexRange.VertexRangeEnumerator.Current">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.PartRange.#ctor(DotSpatial.Topology.FeatureType)">
            <summary>
            StartRange, count and vertices will be declared later.
            </summary>
            <param name="featureType"></param>
        </member>
        <member name="M:DotSpatial.Data.PartRange.#ctor(System.Double[],System.Int32,System.Int32,DotSpatial.Topology.FeatureType)">
            <summary>
            Creates a new instance of Part
            </summary>
            <param name="allVertices">An array of all the vertex locations</param>
            <param name="shapeOffset">The point index of the shape. </param>
            <param name="partOffset">The ponit index of the part.</param>
            <param name="featureType">The type of features.</param>
        </member>
        <member name="M:DotSpatial.Data.PartRange.Clone">
            <summary>
            This returns a shallow copy, and expects any resetting of the vertex arrays to occur at a
            higher level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.PartRange.IsHole">
            <summary>
            Calculates the area and if the area is negative, this is considered a hole.
            </summary>
            <returns>Boolean, true if this has a negative area and should be thought of as a hole</returns>
        </member>
        <member name="M:DotSpatial.Data.PartRange.CalculateExtent">
            <summary>
            This creates a new extent and cylces through the coordinates to calculate what it is.
            Since the vertices may change so easilly, this is not cached.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.PartRange.Segments">
            <summary>
            Gets a segment range enumerator.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.Segment">
            <summary>
            Segment
            </summary>
        </member>
        <member name="F:DotSpatial.Data.Segment.P1">
            <summary>
            The start point of the segment
            </summary>
        </member>
        <member name="F:DotSpatial.Data.Segment.P2">
            <summary>
            the end point of the segment
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Segment.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a segment from double valued ordinates.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:DotSpatial.Data.Segment.#ctor(DotSpatial.Data.Vertex,DotSpatial.Data.Vertex)">
            <summary>
            Creates a new instance of Segment
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Segment.Intersects(DotSpatial.Data.Segment)">
            <summary>
            Uses the intersection count to detect if there is an intersection
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Segment.DistanceTo(DotSpatial.Topology.Coordinate)">
            <summary>
            Calculates the shortest distance to this line segment from the specified MapWinGIS.Point
            </summary>
            <param name="point">A MapWinGIS.Point specifing the location to find the distance to the line</param>
            <returns>A double value that is the shortest distance from the given Point to this line segment</returns>
        </member>
        <member name="M:DotSpatial.Data.Segment.ClosestPointTo(DotSpatial.Data.Vertex)">
            <summary>
            Returns a vertex representing the closest point on this line segment from a given vertex
            </summary>
            <param name="point">The point we want to be close to</param>
            <returns>The point on this segment that is closest to the given point</returns>
        </member>
        <member name="M:DotSpatial.Data.Segment.ClosestPointTo(DotSpatial.Data.Vertex,System.Boolean,DotSpatial.Data.EndPointInteraction@)">
            <summary>
            Returns a vertex representing the closest point on this line segment from a given vertex
            </summary>
            <param name="point">The point we want to be close to</param>
            <param name="isInfiniteLine">If true treat the line as infinitly long</param>
            <param name="endPointFlag">Outputs 0 if the vertex is on the line segment, 1 if beyond P0, 2 if beyong P1 and -1 if P1=P2</param>
            <returns>The point on this segment or infinite line that is closest to the given point</returns>
        </member>
        <member name="M:DotSpatial.Data.Segment.ToVector">
            <summary>
            Casts this to a vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Segment.DistanceTo(DotSpatial.Data.Segment)">
            <summary>
            Determines the shortest distance between two segments
            </summary>
            <param name="lineSegment">Segment, The line segment to test against this segment</param>
            <returns>Double, the shortest distance between two segments</returns>
        </member>
        <member name="M:DotSpatial.Data.Segment.IntersectionCount(DotSpatial.Data.Segment)">
            <summary>
            Returns 0 if no intersections occur, 1 if an intersection point is found,
            and 2 if the segments are colinear and overlap.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Segment.IntersectsVertex(DotSpatial.Data.Vertex)">
            <summary>
            Tests to see if the specified segment contains the point within Epsilon tollerance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.Segment.Epsilon">
            <summary>
            Gets or sets the precision for calculating equality, but this is just a re-direction to Vertex.Epsilon
            </summary>
        </member>
        <member name="T:DotSpatial.Data.SegmentRange">
            <summary>
            SegmentSet
            </summary>
        </member>
        <member name="M:DotSpatial.Data.SegmentRange.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.SegmentRange.#ctor(DotSpatial.Data.PartRange,DotSpatial.Topology.FeatureType)">
            <summary>
            Creates a new instance of SegmentSet
            </summary>
        </member>
        <member name="P:DotSpatial.Data.SegmentRange.FeatureType">
            <summary>
            Gets the feature type
            </summary>
        </member>
        <member name="P:DotSpatial.Data.SegmentRange.Part">
            <summary>
            Gets the part
            </summary>
        </member>
        <member name="T:DotSpatial.Data.SegmentRange.SegmentRangeEnumerator">
            <summary>
            Cycles through the points, creating segments.  If the feature type is a polygon, then this will
            loop around again at the end of the part to create a segment from the first and last vertex.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.SegmentRange.SegmentRangeEnumerator.#ctor(DotSpatial.Data.SegmentRange)">
            <summary>
            Creates a new enumerator given the SegmentRange
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:DotSpatial.Data.SegmentRange.SegmentRangeEnumerator.Dispose">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:DotSpatial.Data.SegmentRange.SegmentRangeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next member
            </summary>
            <returns>True if a member is found, false if there are no more members</returns>
        </member>
        <member name="M:DotSpatial.Data.SegmentRange.SegmentRangeEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:DotSpatial.Data.SegmentRange.SegmentRangeEnumerator.Current">
            <summary>
            Gets the current segment
            </summary>
        </member>
        <member name="T:DotSpatial.Data.Shape">
            <summary>
            The shape caries information about the raw vertices as well as a shapeRange.
            It is effectively away to move around a single shape.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Shape.#ctor">
            <summary>
            Creates a new instance of Shape
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Shape.#ctor(DotSpatial.Topology.FeatureType)">
            <summary>
            Creates a new shape type where the shaperange exists and has a type specified
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:DotSpatial.Data.Shape.#ctor(DotSpatial.Data.IFeature)">
            <summary>
            Creates a shape based on the specified feature.  This shape will be standing alone,
            all by itself.  The fieldnames and field types will be null.
            </summary>
            <param name="feature"></param>
        </member>
        <member name="M:DotSpatial.Data.Shape.#ctor(DotSpatial.Topology.IBasicGeometry)">
            <summary>
            Creates a shape based on the specified geometry.  This shape will be standing alone,
            all by itself.  The attributes will be null.
            </summary>
            <param name="geometry">The geometry to create a shape from.</param>
        </member>
        <member name="M:DotSpatial.Data.Shape.#ctor(DotSpatial.Topology.Coordinate)">
            <summary>
            Creates a point shape from a coordinate
            </summary>
            <param name="coord"></param>
        </member>
        <member name="M:DotSpatial.Data.Shape.#ctor(DotSpatial.Data.Vertex)">
            <summary>
            Creates a point shape from a vertex
            </summary>
            <param name="coord"></param>
        </member>
        <member name="M:DotSpatial.Data.Shape.#ctor(DotSpatial.Data.IExtent)">
            <summary>
            Creates a clockwise polygon shape from an extent
            </summary>
            <param name="extent"></param>
        </member>
        <member name="M:DotSpatial.Data.Shape.#ctor(DotSpatial.Topology.IEnvelope)">
            <summary>
            Creates a clockwise polygon shape from an envelope
            </summary>
            <param name="envelope"></param>
        </member>
        <member name="M:DotSpatial.Data.Shape.ToGeometry">
            <summary>
            Converts this shape into a Geometry using the default factory.
            </summary>
            <returns>The geometry version of this shape.</returns>
        </member>
        <member name="M:DotSpatial.Data.Shape.ToGeometry(DotSpatial.Topology.IGeometryFactory)">
            <summary>
            Converts this shape into a Geometry.
            </summary>
            <returns>The geometry version of this shape.</returns>
        </member>
        <member name="M:DotSpatial.Data.Shape.FromPoint(DotSpatial.Topology.IGeometryFactory)">
            <summary>
            Get the point for this shape if this is a point shape.
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Shape.FromMultiPoint(DotSpatial.Topology.IGeometryFactory)">
            <summary>
            Creates a new MultiPoint geometry from a MultiPoint shape
            </summary>
            <param name="factory">The IGeometryFactory to use to create the new shape.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Shape.FromLine(DotSpatial.Topology.IGeometryFactory)">
            <summary>
            Gets the line for the specified index
            </summary>
            <returns>A LineString or MultiLineString geometry created from this shape.</returns>
        </member>
        <member name="M:DotSpatial.Data.Shape.FromPolygon(DotSpatial.Topology.IGeometryFactory)">
            <summary>
            Creates a Polygon or MultiPolygon from this Polygon shape.
            </summary>
            <param name="factory">The IGeometryFactory to use to create the new IGeometry.</param>
            <returns>The IPolygon or IMultiPolygon created from this shape.</returns>
        </member>
        <member name="M:DotSpatial.Data.Shape.PointInList(DotSpatial.Topology.Coordinate,System.Collections.Generic.IEnumerable{DotSpatial.Topology.Coordinate})">
            <summary>
            Test if a point is in a list of coordinates.
            </summary>
            <param name="testPoint">TestPoint the point to test for.</param>
            <param name="pointList">PointList the list of points to look through.</param>
            <returns>true if testPoint is a point in the pointList list.</returns>
        </member>
        <member name="M:DotSpatial.Data.Shape.CopyAttributes(DotSpatial.Data.IFeature)">
            <summary>
            Copies the field names and types from the parent feature set if they are currently null.
            Attempts to copy the members of the feature's datarow.  This assumes the features have been
            loaded into memory and are available on the feature's DataRow property.
            </summary>
            <param name="feature">An IFeature to copy the attributes from.  If the schema is null, this will try to use the parent featureset schema.</param>
        </member>
        <member name="M:DotSpatial.Data.Shape.ShapeRangeFromGeometry(DotSpatial.Topology.IBasicGeometry,System.Double[],System.Int32)">
            <summary>
            Create a ShapeRange from a Geometry to use in constructing a Shape
            </summary>
            <param name="geometry"></param>
            <param name="vertices"></param>
            <param name="offset">offset into vertices array where this feature starts</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Shape.ShapeRangeFromFeature(DotSpatial.Data.IFeature,System.Double[],System.Int32)">
            <summary>
            Create a ShapeRange from a Feature to use in constructing a Shape
            </summary>
            <param name="feature"></param>
            <param name="vertices"></param>
            <param name="offset">offset into vertices array where this feature starts</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Shape.ShapeRangeFromFeature(DotSpatial.Data.IFeature,System.Double[])">
            <summary>
            Create a ShapeRange from a Feature to use in constructing a Shape
            </summary>
            <param name="feature"></param>
            <param name="vertices"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Shape.AddPart(System.Collections.Generic.IEnumerable{DotSpatial.Topology.Coordinate},DotSpatial.Data.CoordinateType)">
            <summary>
            Without changing the feature type or anything else, simply update the local coordinates
            to include the new coordinates.  All the new coordinates will be considered one part.
            Since point and multi-point shapes don't have parts, they will just be appended to the
            original part.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Shape.Clone">
            <summary>
            This creates a duplicate shape, also copying the vertex array to
            a new array containing just this shape, as well as duplicating the attribute array.
            The FieldNames and FieldTypes are a shallow copy since this shouldn't change.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.Shape.MinM">
            <summary>
            Gets or sets the minimum M
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Shape.MaxM">
            <summary>
             Gets or sets the maximum M
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Shape.MinZ">
            <summary>
             Gets or sets the minimum Z
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Shape.MaxZ">
            <summary>
             Gets or sets the maximum Z
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Shape.Range">
            <summary>
            Gives a way to cycle through the vertices of this shape.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Shape.Vertices">
            <summary>
            The double vertices in X1, Y1, X2, Y2, ..., Xn, Yn order.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Shape.Z">
            <summary>
            The Z values if any
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Shape.M">
            <summary>
            The M values if any, organized in order.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Shape.Attributes">
            <summary>
            Gets or sets the attributes.  Since the most likely use is to copy values from one source to
            another, this should be an independant array in each shape and be deep-copied.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ShapefileDataProvider">
            <summary>
            ShapefileDataProvider
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IVectorProvider">
            <summary>
            IFeatureProvider
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IVectorProvider.CreateNew(System.String,DotSpatial.Topology.FeatureType,System.Boolean,DotSpatial.Data.IProgressHandler)">
            <summary>
            This create new method implies that this provider has the priority for creating a new file.
            An instance of the dataset should be created and then returned.  By this time, the fileName
            will already be checked to see if it exists, and deleted if the user wants to overwrite it.
            </summary>
            <param name="fileName">The string fileName for the new instance</param>
            <param name="featureType">Point, Line, Polygon etc.  Sometimes this will be specified, sometimes it will be "Unspecified"</param>
            <param name="inRam">Boolean, true if the dataset should attempt to store data entirely in ram</param>
            <param name="progressHandler">An IProgressHandler for status messages.</param>
            <returns>An IRaster</returns>
        </member>
        <member name="M:DotSpatial.Data.IVectorProvider.GetFeatureType(System.String)">
            <summary>
            This tests the specified file in order to determine what type of vector the file contains.
            This returns unspecified if the file format is not supported by this provider.
            </summary>
            <param name="fileName">The string fileName to test</param>
            <returns>A FeatureType clarifying what sort of features are stored on the data type.</returns>
        </member>
        <member name="M:DotSpatial.Data.ShapefileDataProvider.GetFeatureType(System.String)">
            <summary>
            This tests the specified file in order to determine what type of vector the file contains.
            This returns unspecified if the file format is not supported by this provider.
            </summary>
            <param name="fileName">The string fileName to test</param>
            <returns>A FeatureType clarifying what sort of features are stored on the data type.</returns>
        </member>
        <member name="M:DotSpatial.Data.ShapefileDataProvider.CreateNew(System.String,DotSpatial.Topology.FeatureType,System.Boolean,DotSpatial.Data.IProgressHandler)">
            <summary>
            This create new method implies that this provider has the priority for creating a new file.
            An instance of the dataset should be created and then returned.  By this time, the fileName
            will already be checked to see if it exists, and deleted if the user wants to overwrite it.
            </summary>
            <param name="fileName">The string fileName for the new instance</param>
            <param name="featureType">Point, Line, Polygon etc.  Sometimes this will be specified, sometimes it will be "Unspecified"</param>
            <param name="inRam">Boolean, true if the dataset should attempt to store data entirely in ram</param>
            <param name="progressHandler">An IProgressHandler for status messages.</param>
            <returns>An IRaster</returns>
        </member>
        <member name="M:DotSpatial.Data.ShapefileDataProvider.Open(System.String)">
            <summary>
            This open method is only called if this plugin has been given priority for one
            of the file extensions supported in the DialogReadFilter property supplied by
            this control.  Failing to provide a DialogReadFilter will result in this plugin
            being added to the list of DataProviders being supplied under the Add Other Data
            option in the file menu.
            </summary>
            <param name="fileName">A string specifying the complete path and extension of the file to open.</param>
            <returns>A List of IDataSets to be added to the Map.  These can also be groups of datasets.</returns>
        </member>
        <member name="P:DotSpatial.Data.ShapefileDataProvider.DialogReadFilter">
            <summary>
            Gets a dialog read filter that lists each of the file type descriptions and file extensions, delimeted
            by the | symbol.  Each will appear in DotSpatial's open file dialog filter, preceded by the name provided
            on this object.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileDataProvider.DialogWriteFilter">
            <summary>
            Gets a dialog filter that lists each of the file type descriptions and extensions for a Save File Dialog.
            Each will appear in DotSpatial's open file dialog filter, preceded by the name provided on this object.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileDataProvider.Name">
            <summary>
            Gets a preferably short name that identifies this data provider.  Example might be GDAL.
            This will be prepended to each of the DialogReadFilter members from this plugin.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileDataProvider.Description">
            <summary>
            This is a basic description that will fall next to your plugin in the Add Other Data dialog.
            This will only be shown if your plugin does not supply a DialogReadFilter.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapefileDataProvider.ProgressHandler">
            <summary>
            Gets or sets the progress handler
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeRange.Epsilon">
            <summary>
            Control the epsilon to use for the intersect calculations
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.Clone">
            <summary>
            Creates a shallow copy of everything except the parts list and extent, which are deep copies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.UpgradeExtent">
            <summary>
            Considers the ShapeType and upgrades the extent class to accommodate M and Z.
            This is automatically called form the setter of ShapeType.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.#ctor(DotSpatial.Topology.FeatureType,DotSpatial.Data.CoordinateType)">
            <summary>
            Creates a blank instance of a shaperange where vertices can be assigned later.
            <param name="type">the feature type clarifies point, line, or polygon.</param>
            <param name="coordType">The coordinate type clarifies whether M or Z values exist.</param>
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.#ctor(DotSpatial.Data.Vertex)">
            <summary>
            Creates a new "point" shape that has only the one point.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.#ctor(DotSpatial.Topology.IEnvelope)">
            <summary>
            Initializes a new instance of the ShapeRange class.
            </summary>
            <param name="env">The envelope to turn into a shape range.</param>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.#ctor(DotSpatial.Data.Extent)">
            <summary>
            This creates a polygon shape from an extent.
            </summary>
            <param name="ext">The extent to turn into a polygon shape.</param>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.CalculateExtents">
            <summary>
            Forces each of the parts to adopt an extent equal to a calculated extents.
            The extents for the shape will expand to include those.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.First">
            <summary>
            Gets the first vertex from the first part.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.Intersects(DotSpatial.Data.Extent)">
            <summary>
            Tests the intersection with an extents
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.Intersects(DotSpatial.Topology.IEnvelope)">
            <summary>
            Tests the intersection using an envelope
            </summary>
            <param name="envelope"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.Intersects(DotSpatial.Topology.Coordinate)">
            <summary>
            Tests the intersection with a coordinate
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.Intersects(DotSpatial.Data.Vertex)">
            <summary>
            Tests the intersection with a vertex
            </summary>
            <param name="vert"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.Intersects(DotSpatial.Data.Shape)">
            <summary>
            Tests the intersection with a shape
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.Intersects(DotSpatial.Data.ShapeRange)">
            <summary>
            This calculations processes the intersections
            </summary>
            <param name="shape">The shape to do intersection calculations with.</param>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.SetVertices(System.Double[])">
            <summary>
            This sets the vertex array by cycling through each part index and updates.
            </summary>
            <param name="vertices">The double array of vertices that should be referenced by the parts.</param>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.PartIndex(System.Int32)">
            <summary>
            Given a vertex, this will determine the part that the vertex is within.
            </summary>
            <param name="vertexOffset"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.ShapeRange.EndIndex">
            <summary>
            gets the integer end index as calculated from the number of points and the start index
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.ShapeRange.FeatureType">
            <summary>
            The feature type
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapeRange.ContentLength">
            <summary>
            The content length
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapeRange.Parts">
            <summary>
            If this is null, then there is only one part for this ShapeIndex.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapeRange.RecordNumber">
            <summary>
            The record number (for .shp files usually 1-based)
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapeRange.StartIndex">
            <summary>
            The starting index for the entire shape range.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapeRange.Extent">
            <summary>
            Gets or sets the extent of this shape range.  Setting this will prevent
            the automatic calculations.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapeRange.ShapeType">
            <summary>
            The shape type for the header of this shape
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapeRange.NumPoints">
            <summary>
            The number of points in the entire shape
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ShapeRange.NumParts">
            <summary>
            If this is set, then it will cache an integer count that is independant from Parts.Count.
            If this is not set, (or set to a negative value) then getting this will return Parts.Count
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ShapeType">
            <summary>
            An enumeration listing the various valid shape types supported by Esri Shapefile formats
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.NullShape">
            <summary>
            0 - No shape type specified, or the shapetype is invalid
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.Point">
            <summary>
            1 - Each shape is a single point
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.PolyLine">
            <summary>
            3 - Each shape is a collection of vertices that should be connected to form a striaght line
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.Polygon">
            <summary>
            5 - Each shape is a closed linestring
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.MultiPoint">
            <summary>
            8 - Each shape consists of severel, unconnected points
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.PointZ">
            <summary>
            11 - Each shape is a point with a Z value
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.PolyLineZ">
            <summary>
            13 - Each shape is a linestring with each vertex having a z value
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.PolygonZ">
            <summary>
            15 - Each shape is a closed linestring with each vertex having a z value
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.MultiPointZ">
            <summary>
            18 - Each shape has several unconnected points, each of which has a z value
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.PointM">
            <summary>
            21 - Each shape has several unconnected points, each of which has an m and z value
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.PolyLineM">
            <summary>
            23 - Each shape is made up of several points connected to form a line, each vertex having an m and z value
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.PolygonM">
            <summary>
            25 - Each shape is a closed linestring with each vertex having a z value and m value
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.MultiPointM">
            <summary>
            28 - Each shape has several unconnected points, each of which has a z value and m value
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ShapeType.MultiPatch">
            <summary>
            31 - Not sure what this does
            </summary>
        </member>
        <member name="T:DotSpatial.Data.UnspecifiedFeaturetypeException">
            <summary>
            UnspecifiedFeaturetypeException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.UnspecifiedFeaturetypeException.#ctor">
            <summary>
            Creates a new instance of UnspecifiedFeaturetypeException
            </summary>
        </member>
        <member name="T:DotSpatial.Data.Vertex">
            <summary>
            A vertex is a two dimensional structure with an X and a Y value.  This is deliberately kept as small as possibl.e
            </summary>
        </member>
        <member name="F:DotSpatial.Data.Vertex.Epsilon">
            <summary>
            The tolerance for testing equality
            </summary>
        </member>
        <member name="F:DotSpatial.Data.Vertex.X">
            <summary>
            An X coordinate
            </summary>
        </member>
        <member name="F:DotSpatial.Data.Vertex.Y">
            <summary>
            The Y coordinate
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Vertex.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new instance of Vertex
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Vertex.ToCoordinate">
            <summary>
            Casts this vertex to a coordinate
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Vertex.Equals(DotSpatial.Data.Vertex)">
             <summary>
            
             </summary>
             <param name="other"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Vertex.op_Equality(DotSpatial.Data.Vertex,DotSpatial.Data.Vertex)">
             <summary>
            
             </summary>
             <param name="v1"></param>
             <param name="v2"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Vertex.op_Inequality(DotSpatial.Data.Vertex,DotSpatial.Data.Vertex)">
             <summary>
            
             </summary>
             <param name="v1"></param>
             <param name="v2"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Vertex.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Data.Vertex.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Data.EnvelopeExt">
            <summary>
            This class handles some extension methods that also require System.Drawing.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.EnvelopeExt.Reproportion(DotSpatial.Topology.IEnvelope,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            This method assumes that there was a direct correlation between this envelope and the original
            rectangle.  This reproportions this window to match the specified newRectangle.
            </summary>
            <param name="self">The original envelope</param>
            <param name="original">The original rectangle </param>
            <param name="newRectangle">The new rectangle</param>
            <returns>A new IEnvelope </returns>
        </member>
        <member name="M:DotSpatial.Data.EnvelopeExt.ToExtent(DotSpatial.Topology.IEnvelope)">
            <summary>
            This allows the creation of the correct kind of Extent class from an Envelope, which can contain
            M or Z values.
            </summary>
            <param name="self">The Envelope to convert into an Extent.</param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.RectangleExt">
            <summary>
            Contains various extensions for Rectangle
            </summary>
        </member>
        <member name="M:DotSpatial.Data.RectangleExt.IntersectsWith(System.Drawing.Rectangle,System.Drawing.RectangleF)">
            <summary>
            Calculates the intersection by casting the floating point values to integer values.
            </summary>
            <param name="self">This rectangle</param>
            <param name="other">The floating point rectangle to calculate against</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.RectangleExt.ExpandToInclude(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Tests the location of the point.  If the point is outside of the current rectangle, then the bounds
            of the rectangle are adjusted to include the new point.
            </summary>
            <param name="self"></param>
            <param name="newPoint"></param>
        </member>
        <member name="M:DotSpatial.Data.RectangleExt.ExpandBy(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Expands the rectangle by the specified integer distance in all directions.
            </summary>
            <param name="self">The rectangle to expand</param>
            <param name="distance">The distance </param>
        </member>
        <member name="T:DotSpatial.Data.NullException">
            <summary>
            NullExceptioncs
            </summary>
        </member>
        <member name="M:DotSpatial.Data.NullException.#ctor">
            <summary>
            Creates a new instance of the NullLogException, but does not set the message
            or log the exception.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.NullException.#ctor(System.String)">
            <summary>
            Creates a new instance of NullException
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ChangeEventList`1">
            <summary>
            A list that also includes several events during its existing activities.
            List is fussy about inheritance, unfortunately, so this wraps a list
            and then makes this class much more inheritable
            </summary>
        </member>
        <member name="T:DotSpatial.Data.CopyList`1">
            <summary>
            A Copy list is something that is specifically designed to allow internal items
            to be cloned.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.CopyList`1.Clone">
            <summary>
            Returns a duplicate of this entire list, where each item has been cloned
            if it implements ICloneable.  Otherwise, the values will be a shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.CopyList`1.OnCopy(DotSpatial.Data.CopyList{`0})">
            <summary>
            This copies any individual members of the list.  If the item can be
            cloned, then it copies the cloned item.  Otherwise it copies the
            regular item.  This method can be overridden to handle special behavior
            in sub-classes.
            </summary>
            <param name="copy"></param>
        </member>
        <member name="T:DotSpatial.Data.IChangeEventList`1">
            <summary>
            IChangeEventList
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ISuspendEvents">
            <summary>
            IChangeEvent
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ISuspendEvents.ResumeEvents">
            <summary>
            Resumes event sending and fires a ListChanged event if any changes have taken place.
            This will not track all the individual changes that may have fired in the meantime.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ISuspendEvents.SuspendEvents">
            <summary>
            Temporarilly suspends notice events, allowing a large number of changes.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ISuspendEvents.EventsSuspended">
            <summary>
            Gets whether or not the list is currently suspended
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IChangeItem">
            <summary>
            IChangeItem
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IChangeItem.ItemChanged">
            <summary>
            Occurs when internal properties or characteristics of this member change.
            The member should send itself as the sender of the event.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IChangeItem.RemoveItem">
            <summary>
            An instruction has been sent to remove the specified item from its container.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IChangeEventList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the System.Collections.Generic.List&lt;T&gt;
            </summary>
            <param name="collection">collection: The collection whose elements should be added to the end of the
            System.Collections.Generic.List&lt;T&gt;. The collection itself cannot be null, but it can contain
            elements that are null,
            if type T is a reference type.</param>
            <exception cref="T:System.ApplicationException">Unable to add while the ReadOnly property is set to
             true.</exception>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the System.Collections.Generic.List&lt;T&gt;
            </summary>
            <param name="collection">collection: The collection whose elements should be added to the end of the
            System.Collections.Generic.List&lt;T&gt;. The collection itself cannot be null, but it can contain elements that are null,
            if type T is a reference type.</param>
            <exception cref="T:System.ApplicationException">Unable to add while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.ResumeEvents">
            <summary>
            Resumes event sending and fires a ListChanged event if any changes have taken place.
            This will not track all the individual changes that may have fired in the meantime.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.SuspendEvents">
            <summary>
            Temporarilly suspends notice events, allowing a large number of changes.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.OnInnerListSet">
            <summary>
            An overriding event handler so that we can signfiy the list has changed
            when the inner list has been set to a new list.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.OnClear">
            <summary>
            Overrides the normal clear situation so that we only update after all the members are cleared.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.OnCopy(DotSpatial.Data.CopyList{`0})">
            <summary>
            Occurs during the copy process and overrides the base behavior so that events are suspended.
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.OnResumeEvents">
            <summary>
            Occurs when ResumeEvents has been called enough times so that events are re-enabled.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the EventList&lt;T&gt;.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ApplicationException">Unable to reverse while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire EventList&lt;T&gt;.
            </summary>
            <exception cref="T:System.ApplicationException">Unable to reverse while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the EventList&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the EventList&lt;T&gt;. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is greater than EventList&lt;T&gt;.Count.</exception>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
            <exception cref="T:System.ApplicationException">Unable to insert while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the EventList&lt;T&gt;.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the EventList&lt;T&gt;.</exception>
            <exception cref="T:System.ApplicationException">Unable to remove while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted System.Collections.Generic.List&lt;T&gt; for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>The zero-based index of item in the sorted System.Collections.Generic.List&lt;T&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.</returns>
            <exception cref="T:System.InvalidOperationException">The default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find an implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T.</exception>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.ItemItemChanged(System.Object,System.EventArgs)">
            <summary>
            This is a notification that characteristics of one of the members of the list may have changed,
            requiring a refresh, but may not involve a change to the the list itself
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.OnItemChanged(System.Object)">
            <summary>
            Occurs when the item is changed.  If this list is not suspended, it will forward the change event
            on.  Otherwise, it will ensure that when resume events is called that the on change method
            is fired at that time.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.OnListChanged">
            <summary>
            Fires the ListChanged Event
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.OnRemoveItem">
            <summary>
            This is either a layer collection or a colorbreak collection, and so
            this won't be called by us, but someone might want to override this for their own reasons.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.OnInclude(`0)">
            <summary>
            Occurs when wiring events on a new item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Data.ChangeEventList`1.OnExclude(`0)">
            <summary>
            Occurs when unwiring events on new items
            </summary>
            <param name="item"></param>
        </member>
        <member name="E:DotSpatial.Data.ChangeEventList`1.ItemChanged">
            <summary>
            This event is for when it is necessary to do something if any of the internal
            members changes.  It will also forward the original item calling the message.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.ChangeEventList`1.RemoveItem">
            <summary>
            Occurs when this list should be removed from its container
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ChangeEventList`1.EventsSuspended">
            <summary>
            Gets whether or not the list is currently suspended
            </summary>
        </member>
        <member name="T:DotSpatial.Data.Collective`1">
            <summary>
            Carries event arguments for the generic IEventList
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Collective`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inCollection">The IEnumerable&lt;T&gt; specified during the event"/></param>
        </member>
        <member name="P:DotSpatial.Data.Collective`1.Collection">
            <summary>
            Gets the list item being referenced by this event
            </summary>
        </member>
        <member name="T:DotSpatial.Data.CollectiveCancel`1">
            <summary>
            The same as a ListEventArgs, but provides an option to cancel the event
            </summary>
        </member>
        <member name="M:DotSpatial.Data.CollectiveCancel`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inCollection">the IEnumerable&lt;T&gt; responsible for the event</param>
        </member>
        <member name="P:DotSpatial.Data.CollectiveCancel`1.Collection">
            <summary>
            Gets the list item being referenced by this event
            </summary>
        </member>
        <member name="T:DotSpatial.Data.CollectiveIndex`1">
            <summary>
            Carries event arguments for the generic IEventList
            </summary>
        </member>
        <member name="M:DotSpatial.Data.CollectiveIndex`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inCollection">The IEnumerable&lt;T&gt; specified during the event"/></param>
            <param name="inIndex">The integer index associated with this event</param>
        </member>
        <member name="P:DotSpatial.Data.CollectiveIndex`1.Collection">
            <summary>
            Gets the IEnumerable&lt;T&gt; collection of items involved in this event
            </summary>
        </member>
        <member name="P:DotSpatial.Data.CollectiveIndex`1.Index">
            <summary>
            Gets the index in the list where the event is associated
            </summary>
        </member>
        <member name="T:DotSpatial.Data.CollectiveIndexCancelEventArgs`1">
            <summary>
            The same as a ListEventArgs, but provides an option to cancel the event
            </summary>
        </member>
        <member name="M:DotSpatial.Data.CollectiveIndexCancelEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inCollection">the IEnumerable&lt;T&gt; responsible for the event</param>
            <param name="inIndex">the Integer index associated with this event</param>
        </member>
        <member name="P:DotSpatial.Data.CollectiveIndexCancelEventArgs`1.Collection">
            <summary>
            Gets the IEnumerable&lt;T&gt; collection involved in this event
            </summary>
        </member>
        <member name="P:DotSpatial.Data.CollectiveIndexCancelEventArgs`1.Index">
            <summary>
            Gets the integer index in the IEventList where this event occured
            </summary>
        </member>
        <member name="T:DotSpatial.Data.CollectiveIndexCompare`1">
            <summary>
            The same as a ListEventArgs, but provides an option to cancel the event
            </summary>
        </member>
        <member name="M:DotSpatial.Data.CollectiveIndexCompare`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0},System.Int32)">
            <summary>
            Creates a new instance of a ListEventArgs class.
            </summary>
            <param name="inCollection">the IEnumerable&lt;T&gt; responsible for the event.</param>
            <param name="inComparer">The System.Collections.Generic.IComparer&lt;T&gt; being used by this action.</param>
            <param name="inIndex">the Integer index associated with this event.</param>
        </member>
        <member name="P:DotSpatial.Data.CollectiveIndexCompare`1.Collection">
            <summary>
            Gets the IEnumerable&lt;T&gt; collection involved in this event
            </summary>
        </member>
        <member name="P:DotSpatial.Data.CollectiveIndexCompare`1.Index">
            <summary>
            Gets the integer index in the IEventList where this event occured
            </summary>
        </member>
        <member name="P:DotSpatial.Data.CollectiveIndexCompare`1.Comparer">
            <summary>
            The System.Collections.Generic.IComparer&lt;T&gt; being used by this action
            </summary>
        </member>
        <member name="T:DotSpatial.Data.CollectiveIndexCompareCancel`1">
            <summary>
            The same as a ListEventArgs, but provides an option to cancel the event
            </summary>
        </member>
        <member name="M:DotSpatial.Data.CollectiveIndexCompareCancel`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0},System.Int32)">
            <summary>
            Creates a new instance of a ListEventArgs class.
            </summary>
            <param name="inCollection">the IEnumerable&lt;T&gt; responsible for the event.</param>
            <param name="inComparer">The System.Collections.Generic.IComparer&lt;T&gt; being used by this action.</param>
            <param name="inIndex">the Integer index associated with this event.</param>
        </member>
        <member name="P:DotSpatial.Data.CollectiveIndexCompareCancel`1.Collection">
            <summary>
            Gets the IEnumerable&lt;T&gt; collection involved in this event
            </summary>
        </member>
        <member name="P:DotSpatial.Data.CollectiveIndexCompareCancel`1.Index">
            <summary>
            Gets the integer index in the IEventList where this event occured
            </summary>
        </member>
        <member name="P:DotSpatial.Data.CollectiveIndexCompareCancel`1.Comparer">
            <summary>
            The System.Collections.Generic.IComparer&lt;T&gt; being used by this action
            </summary>
        </member>
        <member name="T:DotSpatial.Data.Compare`1">
            <summary>
            Carries event arguments for the generic IEventList
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Compare`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inComparer">The System.Collections.Generic.IComparer&lt;T&gt; being used by this action </param>
        </member>
        <member name="P:DotSpatial.Data.Compare`1.Comparer">
            <summary>
            Gets the System.Collections.Generic.IComparer&lt;T&gt; being referenced by this event
            </summary>
        </member>
        <member name="T:DotSpatial.Data.CompareCancel`1">
            <summary>
            The same as a ListEventArgs, but provides an option to cancel the event
            </summary>
        </member>
        <member name="M:DotSpatial.Data.CompareCancel`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inComparer">The System.Collections.Generic.IComparer&lt;T&gt; being used by this action </param>
        </member>
        <member name="P:DotSpatial.Data.CompareCancel`1.Comparer">
            <summary>
            Gets the comparer being used in this action
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ComparisonArgs`1">
            <summary>
            Carries event arguments for the generic IEventList
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ComparisonArgs`1.#ctor(System.Comparison{`0})">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inComparison">The System.Comparison&lt;T&gt; being used by this action </param>
        </member>
        <member name="P:DotSpatial.Data.ComparisonArgs`1.Comparison">
            <summary>
            Gets System.Comparison being referenced by this event
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ComparisonCancelEventArgs`1">
            <summary>
            The same as a ListEventArgs, but provides an option to cancel the event
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ComparisonCancelEventArgs`1._comparison">
            <summary>
            The protected System.Collections.Generic.IComparer&lt;T&gt; being used by this action
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ComparisonCancelEventArgs`1.#ctor(System.Comparison{`0})">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inComparison">The System.Collections.Generic.IComparer&lt;T&gt; being used by this action </param>
        </member>
        <member name="P:DotSpatial.Data.ComparisonCancelEventArgs`1.Comparison">
            <summary>
            Gets the comparer being used in this action
            </summary>
        </member>
        <member name="T:DotSpatial.Data.EventList`1">
            <summary>
            A list that also includes several events during its existing activities.
            List is fussy about inheritance, unfortunately, so this wraps a list
            and then makes this class much more inheritable
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IEventList`1">
            <summary>
            This describes a generic tool to help with keeping track of strong typed lists.
            The usual list, however, provides no event handling whatsoever.
            This list also provides an event for each of the major actions.
            </summary>
            <typeparam name="T">The type of the members in the list.</typeparam>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the System.Collections.Generic.List&lt;T&gt;
            </summary>
            <param name="collection">collection: The collection whose elements should be added to the end of the System.Collections.Generic.List&lt;T&gt;. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted System.Collections.Generic.List&lt;T&gt; for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements.-or-null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
            <returns>The zero-based index of item in the sorted System.Collections.Generic.List&lt;T&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.</returns>
            <exception cref="T:System.InvalidOperationException">comparer is null, and the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find an implementation of the System.IComparable&lt;T&gt;generic interface or the System.IComparable interface for type T.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted System.Collections.Generic.List&lt;T&gt; for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>The zero-based index of item in the sorted System.Collections.Generic.List&lt;T&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.</returns>
            <exception cref="T:System.InvalidOperationException">The default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find an implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the sorted System.Collections.Generic.List&lt;T&gt; for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the elements in the current DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; to another type, and returns a list containing the converted elements.
            </summary>
            <typeparam name="TOutput">The output type to convert to</typeparam>
            <param name="converter">A System.Converter&lt;TInput, TOutput&gt; delegate that converts each element from one type to another type.</param>
            <returns>A DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; of the target type containing the converted elements from the current DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">converter is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.
            </summary>
            <param name="action"> The System.Action&lt;T&gt; delegate to perform on each element of the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</param>
            <exception cref="T:System.ArgumentNullException"> action is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.
            </summary>
            <param name="index">The zero-based DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; index at which the range starts.</param>
            <param name="count"> The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; using the specified System.Comparison&lt;T&gt;.
            </summary>
            <param name="comparison">The System.Comparison&lt;T&gt; to use when comparing elements.</param>
            <exception cref="T:System.ArgumentException">The implementation of comparison caused an error during the sort. For example, comparison might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentNullException">comparison is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; using the specified comparer.
            </summary>
            <param name="index"> The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
            <exception cref="T:System.ArgumentException">index and count do not specify a valid range in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.-or-The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.InvalidOperationException"> comparer is null, and the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; using the specified comparer.
            </summary>
            <param name="comparer"> The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
            <exception cref="T:System.ArgumentException">The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.InvalidOperationException">comparer is null, and the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.Sort">
            <summary>
            Sorts the elements in the entire DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">The default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find an implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.ToArray">
            <summary>
            Copies the elements of the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; to a new array.
            </summary>
            <returns>An array containing copies of the elements of the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</returns>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;, if that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions to check against the elements.</param>
            <returns>true if every element in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index"> The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; that starts at index and contains count number of elements, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> index is outside the range of valid indexes for the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.-or-count is less than 0.-or-index and count do not specify a valid section in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; that extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index"> The zero-based starting index of the search.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; that extends from index to the last element, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is greater than DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.Count.</exception>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">The object to locate in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of item within the range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; that contains count number of elements and ends at index, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.-or-count is less than 0.-or-index and count do not specify a valid section in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; that extends from the first element to the specified index.
            </summary>
            <param name="item">The object to locate in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>The zero-based index of the last occurrence of item within the range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; that extends from the first element to index, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the entire DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;. The value can be null for reference types.</param>
            <returns>The zero-based index of the last occurrence of item within the entire the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match"> The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.-or-count is less than 0.-or-startIndex and count do not specify a valid section in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</exception>
            <exception cref="T:System.ArgumentNullException">match is null</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
            <exception cref="T:System.ArgumentNullException">match is null."</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match"></param>
            <returns>The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.-or-count is less than 0.-or-startIndex and count do not specify a valid section in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; that extends from the first element to the specified index.
            </summary>
            <param name="startIndex"> The zero-based starting index of the backward search.</param>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">: startIndex is outside the range of valid indexes for the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="index">The zero-based index in the source DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; at which copying begins</param>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> index is less than 0.-or-arrayIndex is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index is equal to or greater than the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.Count of the source DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements from index to the end of the source DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; is greater than the available space from arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="M:DotSpatial.Data.IEventList`1.CopyTo(`0[])">
            <summary>
            Copies the entire DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; to a compatible one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;. The System.Array must have zero-based indexing.</param>
            <exception cref="T:System.ArgumentException">The number of elements in the source DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; is greater than the number of elements that the destination array can contain.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
        </member>
        <member name="P:DotSpatial.Data.IEventList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <returns>
            The number of elements that the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; can contain before resizing is required.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.Capacity is set to a value that is less than DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.Count.</exception>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeItemAdded">
            <summary>
            Occurs before an item is added to the List.
            There is no index yet specified because it will be added to the
            end of the list.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeRangeAdded">
            <summary>
            Occurs before a range of items is added to the list.
            There is no index yet, but this event can be cancelled.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterItemAdded">
            <summary>
            Occurs after an item has already been added to the list.
            The index where the item was added is specified.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterRangeAdded">
            <summary>
            Occurs after a range has already been added to the list.
            This reveals the index where the beginning of the range
            was added, but cannot be canceled.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeItemInserted">
            <summary>
            Occurs before an item is inserted.  The index of the requested
            insertion as well as the item being inserted and an option to
            cancel the event are specified
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeRangeInserted">
            <summary>
            Occurs before a range is inserted.  The index of the requested
            insertion location as well as the item being inserted and an option to
            cancel the event are provided in the event arguments
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterItemInserted">
            <summary>
            Occurs after an item is inserted.
            Shows the true index of the item after it was actually added.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterRangeInserted">
            <summary>
            Occurs after an item is inserted.
            Shows the true index of the item after it was actually added.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeItemRemoved">
            <summary>
            Occurs before an item is removed from the List.
            Specifies the item, the current index and an option to cancel.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeRangeRemoved">
            <summary>
            Occurs before a range is removed from the List.
            Specifies the range, the current index and an option to cancel.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterItemRemoved">
            <summary>
            Occurs after an item is removed from the List.
            Gives a handle to the item that was removed, but it no longer
            has a meaningful index value or an option to cancel.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterRangeRemoved">
            <summary>
            Occurs after an item is removed from the List.
            Gives a handle to the range that was removed, but it no longer
            has a meaningful index value or an option to cancel.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeAllMatchingRemoved">
            <summary>
            Occurs before all the elements that match a predicate are removed.
            Supplies an IEnumerable list in the event args of all the items
            that will match the expression.  This action can be cancelled.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterAllMatchingRemoved">
            <summary>
            Occurs after all the elements that matched a predicate were
            removed.  The values are the items that were successfully removed.
            The action has already happened, and so cannot be cancelled here.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeListCleared">
            <summary>
            Occurs before the list is cleared and can cancel the event.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterListCleared">
            <summary>
            Occurs after the list is cleared and this cannot be canceled.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.ListChanged">
            <summary>
            Occurs after a method that sorts or reorganizes the list
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeRangeReversed">
            <summary>
            Occurs before a specific range is reversed
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterRangeReversed">
            <summary>
            Occurs after a specific range is reversed
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeListReversed">
            <summary>
            Occurs before the entire list is reversed
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterListReversed">
            <summary>
            Occurs after the entire list is reversed
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterReversed">
            <summary>
            Occurs just after the list or any sub portion
            of the list is sorted.  This event occurs in
            addition to the specific reversal case.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeReversed">
            <summary>
            Occurs just before the list or any sub portion
            of the list is sorted.  This event occurs in
            addition to the specific reversal case.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeSort">
            <summary>
            Occurs just before any of the specific sorting methodsin addition
            to the event associated with the specific method.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterSort">
            <summary>
            Occurs after any of the specific sorting methods in addition
            to the event associated with the specific method.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeListSorted">
            <summary>
            Occurs just before the entire list is sorted
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterListSorted">
            <summary>
            Occurs after the entire list has been sorted
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeSortByComparison">
            <summary>
            Occurs just before the Sort method that uses a System.Comparison&lt;T&gt;
            This event can cancel the action.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterSortByComparison">
            <summary>
            Occurs just after the Sort method that uses a System.Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.BeforeRangeSorted">
            <summary>
            Occurs just before the Sort method that only sorts a specified range.
            This event can cancel the action.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventList`1.AfterRangeSorted">
            <summary>
            Occurs just after the Sort method that only sorts a specified range.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.EventList`1._isReadOnly">
            <summary>
            Decides whether or not this list can be changed.  This characteristic
            can be set, so that once it becomes readonly, methods that would normally
            change the sequence or number of members will be prevented and throw an
            Application error.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.EventList`1._list">
            <summary>
            The internal list of items
            </summary>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.#ctor">
             <summary>
            Initializes a new instance of the EventList&lt;T&gt; class that is empty and has the default initial capacity.
             </summary>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the EventList&lt;T&gt; class that is empty and has the specified initial capacity.
            </summary>
            <param name="capactiy"> The number of elements that the new list can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the EventList&lt;T&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.Add(`0)">
            <summary>
            Adds an object to the end of the System.Collections.Generic.List&lt;T&gt;.
            </summary>
            <param name="item">The object to be added to the end of the System.Collections.Generic.List&lt;T&gt;.
            The value can be null for reference types.</param>
            <exception cref="T:System.ApplicationException">Unable to add while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the System.Collections.Generic.List&lt;T&gt;
            </summary>
            <param name="collection">collection: The collection whose elements should be added to the end of the
            System.Collections.Generic.List&lt;T&gt;. The collection itself cannot be null, but it can contain elements that are null,
            if type T is a reference type.</param>
            <exception cref="T:System.ApplicationException">Unable to add while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted System.Collections.Generic.List&lt;T&gt; for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements.-or-null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
            <returns>The zero-based index of item in the sorted System.Collections.Generic.List&lt;T&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.</returns>
            <exception cref="T:System.InvalidOperationException">comparer is null, and the default comparer
            System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find an implementation of the System.IComparable&lt;T&gt;generic
            interface or the System.IComparable interface for type T.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted System.Collections.Generic.List&lt;T&gt; for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>The zero-based index of item in the sorted System.Collections.Generic.List&lt;T&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.</returns>
            <exception cref="T:System.InvalidOperationException">The default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find an implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the sorted System.Collections.Generic.List&lt;T&gt; for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.Clear">
            <summary>
            Removes all elements from the EventList&lt;T&gt;.
            </summary>
            <exception cref="T:System.ApplicationException">Unable to clear while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the System.Collections.Generic.List&lt;T&gt;.
            </summary>
            <param name="item"> The object to locate in the System.Collections.Generic.List&lt;T&gt;. The value can be null for reference types.</param>
            <returns>true if item is found in the System.Collections.Generic.List&lt;T&gt; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the EventList&lt;T&gt; contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the EventList&lt;T&gt; contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the EventList&lt;T&gt;.
            </summary>
            <param name="action"> The System.Action&lt;T&gt; delegate to perform on each element of the EventList&lt;T&gt;.</param>
            <exception cref="T:System.ArgumentNullException"> action is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this list
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source EventList&lt;T&gt;.
            </summary>
            <param name="index">The zero-based EventList&lt;T&gt; index at which the range starts.</param>
            <param name="count"> The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source EventList&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the EventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the EventList&lt;T&gt; that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the EventList&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index"> The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the EventList&lt;T&gt; that starts at index and contains count number of elements, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> index is outside the range of valid indexes for the EventList&lt;T&gt;.-or-count is less than 0.-or-index and count do not specify a valid section in the EventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the EventList&lt;T&gt; that extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the EventList&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index"> The zero-based starting index of the search.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the EventList&lt;T&gt; that extends from index to the last element, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the EventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire System.Collections.Generic.List&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the System.Collections.Generic.List&lt;T&gt;. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire System.Collections.Generic.List&lt;T&gt;, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the EventList&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the EventList&lt;T&gt;. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is greater than EventList&lt;T&gt;.Count.</exception>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
            <exception cref="T:System.ApplicationException">Unable to insert while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the System.Collections.Generic.List&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is greater than System.Collections.Generic.List&lt;T&gt;.Count.</exception>
            <exception cref="T:System.ApplicationException">Unable to insert while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the EventList&lt;T&gt; that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">The object to locate in the EventList&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of item within the range of elements in the EventList&lt;T&gt; that contains count number of elements and ends at index, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the EventList&lt;T&gt;.-or-count is less than 0.-or-index and count do not specify a valid section in the EventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the EventList&lt;T&gt; that extends from the first element to the specified index.
            </summary>
            <param name="item">The object to locate in the EventList&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>The zero-based index of the last occurrence of item within the range of elements in the EventList&lt;T&gt; that extends from the first element to index, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the EventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the entire EventList&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the EventList&lt;T&gt;. The value can be null for reference types.</param>
            <returns>The zero-based index of the last occurrence of item within the entire the EventList&lt;T&gt;, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the System.Collections.Generic.List&lt;T&gt;.
            </summary>
            <param name="item">The object to remove from the System.Collections.Generic.List&lt;T&gt;. The value can be null for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not
            found in the System.Collections.Generic.List&lt;T&gt;.</returns>
            <exception cref="T:System.ApplicationException">Unable to remove while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the EventList&lt;T&gt;</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
            <exception cref="T:System.ApplicationException">Unable to remove while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the System.Collections.Generic.List&lt;T&gt;.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ApplicationException">Unable to remove while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the EventList&lt;T&gt;.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the EventList&lt;T&gt;.</exception>
            <exception cref="T:System.ApplicationException">Unable to remove while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the EventList&lt;T&gt;.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ApplicationException">Unable to reverse while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire EventList&lt;T&gt;.
            </summary>
            <exception cref="T:System.ApplicationException">Unable to reverse while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire EventList&lt;T&gt; using the specified System.Comparison&lt;T&gt;.
            </summary>
            <param name="comparison">The System.Comparison&lt;T&gt; to use when comparing elements.</param>
            <exception cref="T:System.ArgumentException">The implementation of comparison caused an error during the sort. For example, comparison might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentNullException">comparison is null.</exception>
            <exception cref="T:System.ApplicationException">Unable to sort while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in EventList&lt;T&gt; using the specified comparer.
            </summary>
            <param name="index"> The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
            <exception cref="T:System.ArgumentException">index and count do not specify a valid range in the EventList&lt;T&gt;.-or-The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.InvalidOperationException"> comparer is null, and the default comparer
            System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find implementation of the System.IComparable&lt;T&gt;
            generic interface or the System.IComparable interface for type T.</exception>
            <exception cref="T:System.ApplicationException">Unable to sort while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; using the specified comparer.
            </summary>
            <param name="comparer"> The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
            <exception cref="T:System.ArgumentException">The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.InvalidOperationException">comparer is null, and the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T.</exception>
            <exception cref="T:System.ApplicationException">Unable to sort while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.Sort">
            <summary>
            Sorts the elements in the entire DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">The default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find an implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T.</exception>
            <exception cref="T:System.ApplicationException">Unable to sort while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.ToArray">
            <summary>
            Copies the elements of the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; to a new array.
            </summary>
            <returns>An array containing copies of the elements of the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;, if that number is less than a threshold value.
            </summary>
            <exception cref="T:System.ApplicationException">Unable to trim while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions to check against the elements.</param>
            <returns>true if every element in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the EventList&lt;T&gt; that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match"> The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the EventList&lt;T&gt;.-or-count is less than 0.-or-startIndex and count do not specify a valid section in the EventList&lt;T&gt;.</exception>
            <exception cref="T:System.ArgumentNullException">match is null</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the EventList&lt;T&gt; that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the EventList&lt;T&gt;.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire EventList&lt;T&gt;.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire EventList&lt;T&gt;.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
            <exception cref="T:System.ArgumentNullException">match is null."</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the EventList&lt;T&gt; that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match"></param>
            <returns>The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the EventList&lt;T&gt;.-or-count is less than 0.-or-startIndex and count do not specify a valid section in the EventList&lt;T&gt;.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the EventList&lt;T&gt; that extends from the first element to the specified index.
            </summary>
            <param name="startIndex"> The zero-based starting index of the backward search.</param>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">: startIndex is outside the range of valid indexes for the EventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire EventList&lt;T&gt;.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the EventList&lt;T&gt; to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="index">The zero-based index in the source EventList&lt;T&gt; at which copying begins</param>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from EventList&lt;T&gt;. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> index is less than 0.-or-arrayIndex is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index is equal to or greater than the EventList&lt;T&gt;.Count of the source EventList&lt;T&gt;.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements from index to the end of the source EventList&lt;T&gt; is greater than the available space from arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire System.Collections.Generic.List&lt;T&gt; to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List&lt;T&gt;. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex"> The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentException">System.ArgumentException: arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source System.Collections.Generic.List&lt;T&gt; is greater than the available space from arrayIndex to the end of the destination array. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0</exception>
            <exception cref="T:System.ArgumentNullException">array is null</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.CopyTo(`0[])">
            <summary>
            Copies the entire EventList&lt;T&gt; to a compatible one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from EventList&lt;T&gt;. The System.Array must have zero-based indexing.</param>
            <exception cref="T:System.ArgumentException">The number of elements in the source EventList&lt;T&gt; is greater than the number of elements that the destination array can contain.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the elements in the current EventList&lt;T&gt; to another type, and returns a list containing the converted elements.
            </summary>
            <typeparam name="TOutput">The output type to convert to</typeparam>
            <param name="converter">A System.Converter&lt;TInput, TOutput&gt; delegate that converts each element from one type to another type.</param>
            <returns>A EventList&lt;T&gt; of the target type containing the converted elements from the current EventList&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">converter is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterItemAdded(`0,System.Int32)">
            <summary>
            Fires the AfterItemAdded Event
            </summary>
            <param name="item"></param>
            <param name="index"></param>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterRangeAdded(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Fires the AfterRangeAdded method
            </summary>
            <param name="collection"></param>
            <param name="index"></param>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeItemAdded(`0)">
            <summary>
            Fires the BeforeItemAdded Event
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeRangeAdded(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Fires the BeforeRangeAdded Event
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterListCleared">
            <summary>
            Fires the AfterListCleared event
            </summary>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeListCleared">
            <summary>
            Fires the BeforeListCleared event
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterItemInserted(`0,System.Int32)">
            <summary>
            Fires the AfterItemInserted event
            </summary>
            <param name="item"></param>
            <param name="index"></param>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterRangeInserted(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Fires the AfterRangeInserted event
            </summary>
            <param name="collection"></param>
            <param name="index"></param>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeItemInserted(`0,System.Int32)">
            <summary>
            Fires the BeforeItemInserted event
            </summary>
            <param name="item"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeRangeInserted(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Fires the BeforeRangeInserted event
            </summary>
            <param name="collection"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnListChanged">
            <summary>
            Fires the ListChanged Event
            </summary>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterReversed">
            <summary>
            fires the AfterReversed event
            </summary>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeReversed">
            <summary>
            Fires the BeforeReversed event
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeRangeReversed(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Fires the BeforeRangeReversed event
            </summary>
            <param name="index"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterRangeReversed(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Fires the AfterRangeReversed event
            </summary>
            <param name="index"></param>
            <param name="collection"></param>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeListReversed">
            <summary>
            Fires the BeforeLiestReversed event
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterListReversed">
            <summary>
            fires the AfterListReversed Event
            </summary>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeItemRemoved(`0,System.Int32)">
            <summary>
            Fires the BeforeItemRemoved event
            </summary>
            <param name="item"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeRangeRemoved(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Fires the BeforeRangeRemoved event
            </summary>
            <param name="collection"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeAllMatchingRemoved(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Fires the BeforeAllMatchingRemoved event
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterAllMatchingRemoved(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Fires the AfterAllMatchingRemoved event
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterItemRemoved(`0)">
            <summary>
            Fires the AfterItemRemoved event
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterRangeRemoved(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Fires the AfterRangeRemoved Event
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeSort">
            <summary>
            Fires the BeforeSort event
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterSort">
            <summary>
            Fires the AfterSort event
            </summary>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeListSorted(System.Collections.Generic.IComparer{`0})">
            <summary>
            Fires the BeforeListSorted event
            </summary>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterListSorted(System.Collections.Generic.IComparer{`0})">
            <summary>
            Fires the AfterListSorted event
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeSortByComparison(System.Comparison{`0})">
            <summary>
            Fires the BeforeSortByComparison
            </summary>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterSortByComparison(System.Comparison{`0})">
            <summary>
            Fires the AfterSortByComparison event
            </summary>
            <param name="comparison"></param>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnBeforeRangeSorted(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Fires the BeforeRangeSorted event
            </summary>
            <param name="index"></param>
            <param name="collection"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.OnAfterRangeSorted(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Fires the AfterRangeSorted event
            </summary>
            <param name="index"></param>
            <param name="collection"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.DotSpatial#Data#IEventList{T}#ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts between one output an another
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.EventList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Data.EventList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <returns>
            The number of elements that the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; can contain before resizing is required.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.Capacity is set to a value that is less than DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.Count.</exception>
        </member>
        <member name="P:DotSpatial.Data.EventList`1.Item(System.Int32)">
            <summary>
            The default, indexed value of type T
            </summary>
            <param name="index">The numeric index</param>
            <returns>An object of type T corresponding to the index value specified</returns>
        </member>
        <member name="P:DotSpatial.Data.EventList`1.Count">
            <summary>
            Integer, the total number of items currently stored in the list
            </summary>
        </member>
        <member name="P:DotSpatial.Data.EventList`1.IsReadOnly">
            <summary>
            Gets a boolean property indicating whether this list can be written to.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterItemAdded">
            <summary>
            Occurs after an item has already been added to the list.
            The index where the item was added is specified.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterRangeAdded">
            <summary>
            Occurs after a range has already been added to the list.
            This reveals the index where the beginning of the range
            was added, but cannot be canceled.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeItemAdded">
            <summary>
            Occurs before an item is added to the List.
            There is no index yet specified because it will be added to the
            end of the list.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeRangeAdded">
            <summary>
            Occurs before a range of items is added to the list.
            There is no index yet, but this event can be cancelled.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterListCleared">
            <summary>
            Occurs after the the list is cleared.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeListCleared">
            <summary>
            Occurs before the list is cleared and can cancel the event.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterItemInserted">
            <summary>
            Occurs after an item is inserted.
            Shows the true index of the item after it was actually added.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterRangeInserted">
            <summary>
            Occurs after an item is inserted.
            Shows the true index of the item after it was actually added.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeItemInserted">
            <summary>
            Occurs before an item is inserted.  The index of the requested
            insertion as well as the item being inserted and an option to
            cancel the event are specified
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeRangeInserted">
            <summary>
            Occurs before a range is inserted.  The index of the requested
            insertion location as well as the item being inserted and an option to
            cancel the event are provided in the event arguments
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.ListChanged">
            <summary>
            Occurs after a method that sorts or reorganizes the list
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterReversed">
            <summary>
            Occurs just after the list or any sub portion
            of the list is sorted.  This event occurs in
            addition to the specific reversal case.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeReversed">
            <summary>
            Occurs just before the list or any sub portion
            of the list is sorted.  This event occurs in
            addition to the specific reversal case.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeRangeReversed">
            <summary>
            Occurs before a specific range is reversed
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterRangeReversed">
            <summary>
            Occurs after a specific range is reversed
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeListReversed">
            <summary>
            Occurs before the entire list is reversed
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterListReversed">
            <summary>
            Occurs after the entire list is reversed
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeItemRemoved">
            <summary>
            Occurs before an item is removed from the List.
            Specifies the item, the current index and an option to cancel.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeRangeRemoved">
            <summary>
            Occurs before a range is removed from the List.
            Specifies the range, the current index and an option to cancel.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeAllMatchingRemoved">
            <summary>
            Occurs before all the elements that match a predicate are removed.
            Supplies an IEnumerable list in the event args of all the items
            that will match the expression.  This action can be cancelled.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterAllMatchingRemoved">
            <summary>
            Occurs after all the elements that matched a predicate were
            removed.  The values are the items that were successfully removed.
            The action has already happened, and so cannot be cancelled here.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterItemRemoved">
            <summary>
            Occurs after an item is removed from the List.
            Gives a handle to the item that was removed, but it no longer
            has a meaningful index value or an option to cancel.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterRangeRemoved">
            <summary>
            Occurs after an item is removed from the List.
            Gives a handle to the range that was removed, but it no longer
            has a meaningful index value or an option to cancel.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeSort">
            <summary>
            Occurs just before any of the specific sorting methodsin addition
            to the event associated with the specific method.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterSort">
            <summary>
            Occurs after any of the specific sorting methods in addition
            to the event associated with the specific method.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeListSorted">
            <summary>
            Occurs just before the entire list is sorted
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterListSorted">
            <summary>
            Occurs after the entire list has been sorted
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeSortByComparison">
            <summary>
            Occurs just before the Sort method that uses a System.Comparison&lt;T&gt;
            This event can cancel the action.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterSortByComparison">
            <summary>
            Occurs just after the Sort method that uses a System.Comparison&lt;T&gt;
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.BeforeRangeSorted">
            <summary>
            Occurs just before the Sort method that only sorts a specified range.
            This event can cancel the action.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.EventList`1.AfterRangeSorted">
            <summary>
            Occurs just after the Sort method that only sorts a specified range.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.Global">
            <summary>
            Global has some basic methods that may be useful in lots of places.
            TODO: This class needs to be removed and these methods relocated to easier to find places.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Global.Convert``1(System.Double)">
            <summary>
            Converts a double numeric value into the appropriate T data type using a ChangeType process.
            </summary>
            <typeparam name="T">The numeric output type created from the double value.</typeparam>
            <param name="value">The double value to retrieve the equivalent numeric value for.</param>
            <returns>A variable of type T with the value of the value parameter.</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.ToDouble``1(``0)">
            <summary>
            This involves boxing and unboxing as well as a convert to double, but IConvertible was
            not CLS Compliant, so we were always getting warnings about it.  Ted was trying to make
            all the code CLS Compliant to remove warnings.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.Global.MaximumValue``1">
            <summary>
            For numeric types, this will return the maximum value.
            </summary>
            <typeparam name="T">The type of the numeric range to find the maximum for.</typeparam>
            <returns>The maximum value for the numeric type specified by T.</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.MinimumValue``1">
            <summary>
            For Numeric types, this will return the minimum value.
            </summary>
            <typeparam name="T">The type of the numeric range to return the minimum for.</typeparam>
            <returns>The the minimum value possible for a numeric value of type T.</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.SafeCastTo``1(System.Object)">
            <summary>
            A Generic Safe Casting method that should simply exist as part of the core framework
            </summary>
            <typeparam name="T">The type of the member to attempt to cast to.</typeparam>
            <param name="obj">The original object to attempt to System.Convert.</param>
            <returns>An output variable of type T.</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.ParseEnum``1(System.String)">
            <summary>
            Uses the standard enum parsing, but returns it cast as the specified T parameter
            </summary>
            <typeparam name="T">The type of the enum to use</typeparam>
            <param name="text">The string to parse into a copy of the enumeration</param>
            <returns>an enumeration of the specified type</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.GetByte(System.Object)">
            <summary>
            This attempts to convert a value into a byte.  If it fails, the byte will be 0.
            </summary>
            <param name="expression">The expression (like a string) to System.Convert.</param>
            <returns>A byte that is 0 if the test fails.</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.GetDouble(System.Object)">
            <summary>
            This attempts to convert a value into a double.  If it fails, the double will be double.NaN.
            </summary>
            <param name="expression">The expression (like a string) to System.Convert.</param>
            <returns>A double that is double.NAN if the test fails.</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.GetFloat(System.Object)">
            <summary>
            This attempts to convert a value into a float.  If it fails, the float will be 0.
            </summary>
            <param name="expression">The expression (like a string) to System.Convert.</param>
            <returns>A float that is 0 if the test fails.</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.GetInteger(System.Object)">
            <summary>
            This attempts to convert a value into an integer.  If it fails, it returns 0.
            </summary>
            <param name="expression">The expression to test</param>
            <returns>true if the value could be cast as a double, false otherwise</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.GetShort(System.Object)">
            <summary>
            This attempts to convert a value into a short.  If it fails, it returns 0.
            </summary>
            <param name="expression">The expression (like a string) to System.Convert.</param>
            <returns>A short that is 0 if the test fails.</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.GetString(System.Object)">
            <summary>
            Gets the string form of the number using culture settings
            </summary>
            <param name="expression">The expression to obtain the string for</param>
            <returns>A string</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.IsByte(System.Object)">
            <summary>
            Tests an expression to see if it can be converted into a byte.
            </summary>
            <param name="expression">The expression to test</param>
            <returns>true if the value could be cast as a double, false otherwise</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.IsDouble(System.Object)">
            <summary>
            Tests an expression to see if it can be converted into a double.
            </summary>
            <param name="expression">The expression to test</param>
            <returns>true if the value could be cast as a double, false otherwise</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.IsFloat(System.Object)">
            <summary>
            Tests an expression to see if it can be converted into a float.
            </summary>
            <param name="expression">The expression to test</param>
            <returns>true if the value could be cast as a double, false otherwise</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.IsInteger(System.Object)">
            <summary>
            Tests an expression to see if it can be converted into an integer.
            </summary>
            <param name="expression">The expression to test</param>
            <returns>true if the value could be cast as an integer, false otherwise</returns>
        </member>
        <member name="M:DotSpatial.Data.Global.IsShort(System.Object)">
            <summary>
            Tests an expression to see if it can be converted into a short.
            </summary>
            <param name="expression">The expression to test</param>
            <returns>true if the value could be cast as a double, false otherwise</returns>
        </member>
        <member name="T:DotSpatial.Data.ICancelProgressHandler">
            <summary>
            a IProgressHandler that carries a boolean property allowing the process using the handler to know if you should cancelled
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IProgressHandler">
            <summary>
            An interface for sending progress messages.  Percent is an integer from 0 to 100.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IProgressHandler.Progress(System.String,System.Int32,System.String)">
            <summary>
            Progress is the method that should receive a progress message.
            </summary>
            <param name="key">The message string without any information about the status of completion.</param>
            <param name="percent">An integer from 0 to 100 that indicates the condition for a status bar etc.</param>
            <param name="message">A string containing both information on what the process is, as well as its completion status.</param>
        </member>
        <member name="P:DotSpatial.Data.ICancelProgressHandler.Cancel">
            <summary>
            Returns true if the progress handler has been notified that the running process should be cancelled
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IEventDictionary`2">
            <summary>
            Represents a nongeneric collection of key/value pairs.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IEventDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the IEventDictionary&lt;TKey, TValue&gt; contains a specific value.
            </summary>
            <param name="value">The value to locate in the IEventDictionary&lt;TKey, TValue&gt;. The value can be null for reference types.</param>
            <returns>true if the IEventDictionary&lt;TKey, TValue&gt; contains an element with the specified value; otherwise, false.</returns>
        </member>
        <member name="P:DotSpatial.Data.IEventDictionary`2.Count">
            <summary>
            Two separate forms of count exist and are ambiguous so this provides a single new count
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IEventDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the specific KeyValuePair for the specified index
            </summary>
            <param name="index">The integer index representing the order in the list</param>
            <returns>A KeyValuePair that is currently stored at the specified index </returns>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.BeforeItemAdded">
            <summary>
            Occurs before an item is added to the List.
            There is no index yet specified because it will be added to the
            end of the list.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.BeforeRangeAdded">
            <summary>
            Occurs before a range of items is added to the list.
            There is no index yet, but this event can be cancelled.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.AfterItemAdded">
            <summary>
            Occurs after an item has already been added to the list.
            The index where the item was added is specified.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.AfterRangeAdded">
            <summary>
            Occurs after a range has already been added to the list.
            This reveals the index where the beginning of the range
            was added, but cannot be canceled.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.BeforeClearing">
            <summary>
            Occurs before a clear action, allowing the event to be canceled.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.AfterClearing">
            <summary>
            Occurs after a clear action, allowing the event to be cancled
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.ListChanged">
            <summary>
            Occurs after a method that changes either the order or the members of this EventDictionary
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.BeforeItemInserted">
            <summary>
            Occurs before an item is inserted.  The index of the requested
            insertion as well as the item being inserted and an option to
            cancel the event are specified
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.BeforeRangeInserted">
            <summary>
            Occurs before a range is inserted.  The index of the requested
            insertion location as well as the item being inserted and an option to
            cancel the event are provided in the event arguments
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.AfterItemInserted">
            <summary>
            Occurs after an item is inserted.
            Shows the true index of the item after it was actually added.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.AfterRangeInserted">
            <summary>
            Occurs after an item is inserted.
            Shows the true index of the item after it was actually added.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.BeforeItemRemoved">
            <summary>
            Occurs before an item is removed from the List.
            Specifies the item, the current index and an option to cancel.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.BeforeRangeRemoved">
            <summary>
            Occurs before a range is removed from the List.
            Specifies the range, the current index and an option to cancel.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.AfterItemRemoved">
            <summary>
            Occurs after an item is removed from the List.
            Gives a handle to the item that was removed, but it no longer
            has a meaningful index value or an option to cancel.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.AfterRangeRemoved">
            <summary>
            Occurs after an item is removed from the List.
            Gives a handle to the range that was removed, but it no longer
            has a meaningful index value or an option to cancel.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.BeforeAllMatchingRemoved">
            <summary>
            Occurs before all the elements that match a predicate are removed.
            Supplies an IEnumerable list in the event args of all the items
            that will match the expression.  This action can be cancelled.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.AfterAllMatchingRemoved">
            <summary>
            Occurs after all the elements that matched a predicate were
            removed.  The values are the items that were successfully removed.
            The action has already happened, and so cannot be cancelled here.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.BeforeItemSet">
            <summary>
            Occurs before an item is set.  This event can cancel the set opperation.
            </summary>
        </member>
        <member name="E:DotSpatial.Data.IEventDictionary`2.AfterItemSet">
            <summary>
            Occurs after an item is successfully set
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IListEM">
            <summary>
            IListEM
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IListEM.IncreaseIndex``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            This extension method helps by simply increasing the index value of the specified item
            by one.
            </summary>
            <typeparam name="T">The generic type of this list</typeparam>
            <param name="self">This list</param>
            <param name="item">The item to increase the index of</param>
        </member>
        <member name="M:DotSpatial.Data.IListEM.DecreaseIndex``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Decreases the index of the specified item by one.
            </summary>
            <typeparam name="T">The type of the list</typeparam>
            <param name="self">This list</param>
            <param name="item">the item of type T to decrease the index of.</param>
        </member>
        <member name="T:DotSpatial.Data.INamedList">
            <summary>
            INamedList
            </summary>
        </member>
        <member name="M:DotSpatial.Data.INamedList.Demote(System.String)">
            <summary>
            Re-orders the list so that the index of the specifeid item is lower,
            and threfore will be drawn earlier, and therefore should appear
            in a lower position on the list.
            </summary>
            <param name="name">The name of the item to demote</param>
        </member>
        <member name="M:DotSpatial.Data.INamedList.GetItem(System.String)">
            <summary>
            Gets the item with the specified name as an object.
            This enables the INamedList to work with items even
            if it doesn't know the strong type.
            </summary>
            <param name="name">The string name of the item to retrieve</param>
            <returns>The actual item cast as an object.</returns>
        </member>
        <member name="M:DotSpatial.Data.INamedList.GetNameOfObject(System.Object)">
            <summary>
            Gets the name of the specified item, even if the strong type of the
            item is not known.
            </summary>
            <param name="item">The item to get the name of cast as an object</param>
            <returns>The string name of the specified object.</returns>
        </member>
        <member name="M:DotSpatial.Data.INamedList.GetNames">
            <summary>
            Gets the list of names for the items currently stored in the list,
            in the sequence defined by the list of items.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.INamedList.Promote(System.String)">
            <summary>
            Re-orders the list so that the index of the specified item is higher,
            and therefore will be drawn later, and therefore should appear
            in a higher position on the list.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DotSpatial.Data.INamedList.RefreshNames">
            <summary>
            Updates the names to match the current set of actual items.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.INamedList.Remove(System.String)">
            <summary>
            Removes the item with the specified name from the list.
            </summary>
            <param name="name">The string name of the item to remove</param>
        </member>
        <member name="P:DotSpatial.Data.INamedList.BaseName">
            <summary>
            Gets or sets the base name to use for naming items
            </summary>
        </member>
        <member name="P:DotSpatial.Data.INamedList.Count">
            <summary>
            Gets the count of the items in the list.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IndividualEventArgs`1">
            <summary>
            Carries event arguments for the generic IEventList
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IndividualEventArgs`1.#ctor(`0)">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inListItem">an object that is being interacted with in the list</param>
        </member>
        <member name="P:DotSpatial.Data.IndividualEventArgs`1.ListItem">
            <summary>
            Gets the list item being referenced by this event
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IndividualCancelEventArgs`1">
            <summary>
            The same as a ListEventArgs, but provides an option to cancel the event
            </summary>
        </member>
        <member name="F:DotSpatial.Data.IndividualCancelEventArgs`1._listItem">
            <summary>
            The protected object internal to this list event args class
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IndividualCancelEventArgs`1.#ctor(`0)">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inListItem">an object that is being interacted with in the list</param>
        </member>
        <member name="P:DotSpatial.Data.IndividualCancelEventArgs`1.ListItem">
            <summary>
            Gets the list item being referenced by this event
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IndividualDictionaryEventArgs`2">
            <summary>
            Carries event arguments for the generic IEventList
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IndividualDictionaryEventArgs`2.#ctor(`0,`1)">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inKey">The key of type &lt;TKey&gt; being referenced</param>
            <param name="inValue">an object of type &lt;TValue&gt; that is being referenced</param>
        </member>
        <member name="P:DotSpatial.Data.IndividualDictionaryEventArgs`2.Key">
            <summary>
            Gets the key of the item being referenced by this event
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IndividualDictionaryEventArgs`2.Value">
            <summary>
            Gets the actual item being referenced by this event
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IndividualDictionaryCancelEventArgs`2">
            <summary>
            Contains properties for both a specified item and an integer index
            as well as the option to cancel.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IndividualDictionaryCancelEventArgs`2.#ctor(`0,`1)">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inKey">The key that provides direct access to the value member being interacted with</param>
            <param name="inValue">an object that is being interacted with in the list</param>
        </member>
        <member name="P:DotSpatial.Data.IndividualDictionaryCancelEventArgs`2.Key">
            <summary>
            Gets the key for the member referenced by this event
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IndividualDictionaryCancelEventArgs`2.Value">
            <summary>
            Gets the specific item being accessed
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IndividualIndex`1">
            <summary>
            Carries event arguments for the generic IEventList
            </summary>
        </member>
        <member name="F:DotSpatial.Data.IndividualIndex`1._listItem">
            <summary>
            The protected object internal to this list event args class
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IndividualIndex`1.#ctor(`0)">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inListItem">an object that is being interacted with in the list</param>
        </member>
        <member name="M:DotSpatial.Data.IndividualIndex`1.#ctor(`0,System.Int32)">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inListItem">The list item that the event belongs to</param>
            <param name="inIndex">The list index, if any, that is specified.</param>
        </member>
        <member name="P:DotSpatial.Data.IndividualIndex`1.ListItem">
            <summary>
            Gets the list item being referenced by this event
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IndividualIndex`1.Index">
            <summary>
            Gets the index for the ListItem
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IndividualIndexCancel`1">
            <summary>
            Contains properties for both a specified item and an integer index
            as well as the option to cancel.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IndividualIndexCancel`1.#ctor(`0)">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inListItem">an object that is being interacted with in the list</param>
        </member>
        <member name="M:DotSpatial.Data.IndividualIndexCancel`1.#ctor(`0,System.Int32)">
            <summary>
            Creates a new instance of a ListEventArgs class
            </summary>
            <param name="inListItem">The list item that the event belongs to</param>
            <param name="inIndex">The list index, if any, that is specified.</param>
        </member>
        <member name="P:DotSpatial.Data.IndividualIndexCancel`1.ListItem">
            <summary>
            Gets the list item being referenced by this event
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IndividualIndexCancel`1.Index">
            <summary>
            Gets the index for the ListItem
            </summary>
        </member>
        <member name="T:DotSpatial.Data.IOrderedDictionary`2">
            <summary>
            This has the indexing and ordering capabilities, but without all the events of an EventDictionary
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IOrderedDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the IEventDictionary&lt;TKey, TValue&gt; contains a specific value.
            </summary>
            <param name="value">The value to locate in the IEventDictionary&lt;TKey, TValue&gt;. The value can be null for reference types.</param>
            <returns>true if the IEventDictionary&lt;TKey, TValue&gt; contains an element with the specified value; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Data.IOrderedDictionary`2.GetValue(`0)">
            <summary>
            Obtains a value in the dictionary based on a key.  This happens without consulting the
            index at all.
            </summary>
            <param name="key">The Tkey key to search for.</param>
            <returns>The TValue to obtain a value for. </returns>
        </member>
        <member name="M:DotSpatial.Data.IOrderedDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value associated with a key that is already in the dictionary.
            </summary>
            <param name="key">The key currently found in the index</param>
            <param name="value">the value to be changed</param>
        </member>
        <member name="M:DotSpatial.Data.IOrderedDictionary`2.GetIndex(System.Int32)">
            <summary>
            Gets a pair based on the index value
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.IOrderedDictionary`2.SetIndex(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Sets a pair based on the index value
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="P:DotSpatial.Data.IOrderedDictionary`2.Count">
            <summary>
            Two separate forms of count exist and are ambiguous so this provides a single new count
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IOrderedDictionary`2.Item(System.Int32)">
            <summary>
            For ordered dictionaries, the default accessor returns the Key Value Pair associated with the
            index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.IParentItem`1">
            <summary>
            Any item which can be contained by a parent item
            </summary>
            <typeparam name="T">The type class of the potential parent</typeparam>
        </member>
        <member name="M:DotSpatial.Data.IParentItem`1.GetParentItem">
            <summary>
            Gets the parent item relative to this item.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IParentItem`1.SetParentItem(`0)">
            <summary>
            Sets teh parent legend item for this item
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:DotSpatial.Data.IReadOnlyList`1">
            <summary>
            IReadOnlyList
            </summary>
        </member>
        <member name="M:DotSpatial.Data.IReadOnlyList`1.Contains(`0)">
            <summary>
            Tests to see if the specified item is contained in the list.  This returns true if the item is contained in the list.
            </summary>
            <param name="item">The item to test for.</param>
            <returns>Boolean, true if the item is found in the list</returns>
        </member>
        <member name="M:DotSpatial.Data.IReadOnlyList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the specified memebers into the array, starting at the specified index.
            </summary>
            <param name="array">The array to copy values to.</param>
            <param name="arrayIndex">The array index where the 0 member of this list should be copied to.</param>
        </member>
        <member name="M:DotSpatial.Data.IReadOnlyList`1.IndexOf(`0)">
            <summary>
            Obtains the index of the specified item
            </summary>
            <param name="item">The item to find the index of</param>
            <returns>An integer representing the index of the specified item</returns>
        </member>
        <member name="P:DotSpatial.Data.IReadOnlyList`1.Count">
            <summary>
            Gets the integer count of items in this list.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IReadOnlyList`1.IsReadOnly">
            <summary>
            Return true because this is a read-only list.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.IReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.  Ideally, this ReadOnlyList is used with
            value types, or else this gives the user considerable power over the core content.
            </summary>
            <param name="index">The item to obtain from this list</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="T:DotSpatial.Data.ITreeList`1">
            <summary>
            An all purpose item
            </summary>
        </member>
        <member name="T:DotSpatial.Data.MessageCancelEventArgs">
            <summary>
            A set of PaintEventArgs that can be used before a drawing function in order to cancel an event.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.MessageCancelEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of the MessageCancel Event Arguments
            </summary>
            <param name="message">A string message to convey with this event.</param>
        </member>
        <member name="P:DotSpatial.Data.MessageCancelEventArgs.Cancel">
            <summary>
            Returns a boolean specifying whether the action that caused this event should be canceled.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.MessageCancelEventArgs.Message">
            <summary>
            The message allowing someone to decide whether or not the process should be cancelled.  For instance,
            when writing a new file, a message might show "The file C:\bob.txt already exists, overwrite it?"
            </summary>
        </member>
        <member name="T:DotSpatial.Data.NamedList`1">
            <summary>
            A named list preserves a 1:1 mapping between names and items.  It can be used to
            reference information in either direction.  It essentially provides a string
            handle for working with generic typed ILists.  This cannot instantiate new
            items.  (Creating a default T would not work, for instance, for an interface).
            </summary>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.#ctor">
            <summary>
            Creates a new instance of NamedList
            </summary>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new instance of a named list.
            </summary>
            <param name="values">The values to use for the content.</param>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.#ctor(System.Collections.Generic.IList{`0},System.String)">
            <summary>
            Creates a new instance of a named list.
            </summary>
            <param name="values">The values to use for the content.</param>
            <param name="baseName">The string that should preceed the numbering to describe the individual items.</param>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.Demote(System.String)">
            <summary>
            Re-orders the list so that the index of the specifeid item is lower,
            and threfore will be drawn earlier, and therefore should appear
            in a lower position on the list.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.GetNameOfObject(System.Object)">
            <summary>
            Gets the name of the item corresponding
            </summary>
            <param name="value">The item cast as an object.</param>
            <returns>The string name of the specified object, or null if the cast fails.</returns>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.GetItem(System.String)">
            <summary>
            Gets the item with the specified name as an object.
            This enables the INamedList to work with items even
            if it doesn't know the strong type.
            </summary>
            <param name="name">The string name of the item to retrieve</param>
            <returns>The actual item cast as an object.</returns>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.GetNames">
            <summary>
            Gets the list of names for the items currently stored in the list,
            in the sequence defined by the list of items.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.Promote(System.String)">
            <summary>
            Re-orders the list so that the index of the specified item is higher,
            and therefore will be drawn later, and therefore should appear
            in a higher position on the list.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.RefreshNames">
            <summary>
            Updates the names to match the current set of actual items.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.Remove(System.String)">
            <summary>
            Removes the item with the specified name from the list.
            </summary>
            <param name="name">The string name of the item to remove</param>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.Demote(`0)">
            <summary>
            Re-orders the list so that this item appears closer to the 0 index.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.GetName(`0)">
            <summary>
            Gets the string name for the specified item
            </summary>
            <param name="item">The item of type T to find the name for</param>
            <returns>The string name corresponding to the specified item.</returns>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.Promote(`0)">
            <summary>
            Re-orders the list so that the index of the specified item is higher,
            and therefore will be drawn later, and therefore should appear
            in a higher position on the list.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Data.NamedList`1.Remove(`0)">
            <summary>
            Removes the specified item
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="P:DotSpatial.Data.NamedList`1.Item(System.String)">
            <summary>
            Gets or sets the item corresponding to the specified name.  Setting this
            will re-use the same name and position in the list, but set a new object.
            </summary>
            <param name="name">The string name of the item to obtain</param>
            <returns>The item of type T corresponding to the specified name</returns>
        </member>
        <member name="P:DotSpatial.Data.NamedList`1.Items">
            <summary>
            Gets the list of actual items.  This is basically a reference copy of
            the actual collection of items to be contained in this named list.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.NamedList`1.BaseName">
            <summary>
            Gets or sets the base name to use for naming items
            </summary>
        </member>
        <member name="P:DotSpatial.Data.NamedList`1.Count">
            <summary>
            Gets the count of the items in the list.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.NonNumericException">
            <summary>
            NonNumericException
            </summary>
        </member>
        <member name="M:DotSpatial.Data.NonNumericException.#ctor(System.String)">
            <summary>
            Creates a new instance of NonNumericException
            </summary>
            <param name="invalidVariable">The string name of the variable, or value that cannot be parsed as a number.</param>
        </member>
        <member name="T:DotSpatial.Data.Number">
            <summary>
            NumberFormat
            </summary>
        </member>
        <member name="M:DotSpatial.Data.Number.#ctor(System.Object)">
            <summary>
            Creates a value from an object
            </summary>
            <param name="value">A numeric value that is, or can be parsed to a numeric value.</param>
            <exception cref="T:DotSpatial.Data.NonNumericException">Not Numeric</exception>
        </member>
        <member name="M:DotSpatial.Data.Number.#ctor(System.Double)">
            <summary>
            Creates a number to fit the specified double value.
            </summary>
            <param name="value">A double</param>
        </member>
        <member name="M:DotSpatial.Data.Number.#ctor(System.Int32)">
            <summary>
            Creates a number to fit the specified int value
            </summary>
            <param name="value">An integer</param>
        </member>
        <member name="M:DotSpatial.Data.Number.#ctor(System.Single)">
            <summary>
            Creates a number to fit the specified float value
            </summary>
            <param name="value">The value to work with</param>
        </member>
        <member name="M:DotSpatial.Data.Number.#ctor(System.Int16)">
            <summary>
            Creates a number from a short
            </summary>
            <param name="value">A short</param>
        </member>
        <member name="M:DotSpatial.Data.Number.CompareTo(System.Object)">
            <summary>
            Compares this with the specified value.  Returns 1 if the other
            item is greater than this value, 0 if they are equal and -1 if
            the other value is less than this value.
            </summary>
            <param name="other">The value to be tested.</param>
            <returns>An integer: 1 if the other
            item is greater than this value, 0 if they are equal and -1 if
            the other value is less than this value. </returns>
        </member>
        <member name="M:DotSpatial.Data.Number.CompareTo(System.Double)">
            <summary>
            Compares this with the specified value.  Returns 1 if the other
            item is greater than this value, 0 if they are equal and -1 if
            the other value is less than this value.
            </summary>
            <param name="other">The value to be tested.</param>
            <returns>An integer: 1 if the other
            item is greater than this value, 0 if they are equal and -1 if
            the other value is less than this value. </returns>
        </member>
        <member name="M:DotSpatial.Data.Number.CompareTo(DotSpatial.Data.Number)">
            <summary>
            Compares this with the specified value.  Returns 1 if the other
            item is greater than this value, 0 if they are equal and -1 if
            the other value is less than this value.
            </summary>
            <param name="other">The value to be tested.</param>
            <returns>An integer: 1 if the other
            item is greater than this value, 0 if they are equal and -1 if
            the other value is less than this value. </returns>
        </member>
        <member name="M:DotSpatial.Data.Number.ToString">
            <summary>
            Returns this Number as a string.
            </summary>
            <returns>The string created using the specified number format and precision.</returns>
        </member>
        <member name="M:DotSpatial.Data.Number.ToString(System.IFormatProvider)">
            <summary>
            Returns this Number as a string.
            </summary>
            <param name="provider">An IFormatProvider that provides culture specific formatting information.</param>
            <returns>A string with the formatted number.</returns>
        </member>
        <member name="M:DotSpatial.Data.Number.ToString(System.String)">
            <summary>
            Returns this Number as a string.
            </summary>
            <param name="format">A string that controls how this value should be formatted.</param>
            <returns>A string with the formatted number.</returns>
        </member>
        <member name="M:DotSpatial.Data.Number.ToString(System.String,System.IFormatProvider)">
            <summary>
             Returns this Number as a string.
            </summary>
            <param name="format">A string that controls how this value should be formatted.</param>
            <param name="provider">An IFormatProvider that provides culture specific formatting information.</param>
            <returns>A string with the formatted number.</returns>
        </member>
        <member name="M:DotSpatial.Data.Number.ToInt32">
            <summary>
            Gets this number as an int 32
            </summary>
            <returns>An integer</returns>
        </member>
        <member name="M:DotSpatial.Data.Number.ToInt16">
            <summary>
            Gets this number as a short, or a short.MaxValue/short.MinValue
            </summary>
            <returns>A short</returns>
        </member>
        <member name="M:DotSpatial.Data.Number.ToFloat">
            <summary>
            Gets this number as a float
            </summary>
            <returns>A float </returns>
        </member>
        <member name="P:DotSpatial.Data.Number.Code">
            <summary>
            Gets the alphabetical letter code for ToString(-Code-)
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Number.Format">
            <summary>
            A NumberFormats enumeration giving the various formatting options
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Number.IsEmpty">
            <summary>
            Tests to see if a value has been assigned to this Number
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Number.DecimalsCount">
            <summary>
            Gets or sets the number of digits that folow the decimal
            when converting this value to string notation.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Number.SignificantFigures">
            <summary>
            Gets the precision (determined by the data type) which
            effectively describes how many significant figures there are.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.Number.Value">
            <summary>
            Gets this number as a double
            </summary>
            <returns>a double</returns>
        </member>
        <member name="T:DotSpatial.Data.NumberFormat">
            <summary>
            NumberFormats
            </summary>
        </member>
        <member name="F:DotSpatial.Data.NumberFormat.Currency">
            <summary>
            Currency - C
            </summary>
        </member>
        <member name="F:DotSpatial.Data.NumberFormat.Exponential">
            <summary>
            Scientific Notation Exponential - E
            </summary>
        </member>
        <member name="F:DotSpatial.Data.NumberFormat.FixedPoint">
            <summary>
            Fixed point - F
            The number is converted to a string of the form "-ddd.ddd…" where each 'd'
            indicates a digit (0-9). The string starts with a minus sign if the number
            is negative.
            </summary>
        </member>
        <member name="F:DotSpatial.Data.NumberFormat.General">
            <summary>
            Shortest text - G
            </summary>
        </member>
        <member name="F:DotSpatial.Data.NumberFormat.Number">
            <summary>
            Number - N, The number is converted to a string of the form "-d, ddd, ddd.ddd…",
            where '-' indicates a negative number symbol if required, 'd' indicates a digit
            (0-9), ',' indicates a thousand separator between number groups, and '.' indicates
            a decimal point symbol
            </summary>
        </member>
        <member name="F:DotSpatial.Data.NumberFormat.Percent">
            <summary>
            Percent, value is multiplied by 100 and shown with a % symbol (cultural specific)
            </summary>
        </member>
        <member name="F:DotSpatial.Data.NumberFormat.Unspecified">
            <summary>
            No format specified.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ReadOnlyList`1">
            <summary>
            In cases where we want to allow some basic cycling or checking of values, but we don't want the user to change
            the values directly, we can wrap the values in this read-only list, which restricts what the user can do.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new instance of ReadOnlyList
            </summary>
        </member>
        <member name="M:DotSpatial.Data.ReadOnlyList`1.Contains(`0)">
            <summary>
            Tests to see if the specified item is contained in the list.  This returns true if the item is contained in the list.
            </summary>
            <param name="item">The item to test for.</param>
            <returns>Boolean, true if the item is found in the list</returns>
        </member>
        <member name="M:DotSpatial.Data.ReadOnlyList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the specified memebers into the array, starting at the specified index.
            </summary>
            <param name="array">The array to copy values to.</param>
            <param name="arrayIndex">The array index where the 0 member of this list should be copied to.</param>
        </member>
        <member name="M:DotSpatial.Data.ReadOnlyList`1.GetEnumerator">
            <summary>
            Obtains an enumerator for cycling through the values in this list.
            </summary>
            <returns>An enumerator for the items in this list.</returns>
        </member>
        <member name="M:DotSpatial.Data.ReadOnlyList`1.IndexOf(`0)">
            <summary>
            Obtains the index of the specified item
            </summary>
            <param name="item">The item to find the index of</param>
            <returns>An integer representing the index of the specified item</returns>
        </member>
        <member name="P:DotSpatial.Data.ReadOnlyList`1.Count">
            <summary>
            Gets the integer count of items in this list.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ReadOnlyList`1.IsReadOnly">
            <summary>
            Return true because this is a read-only list.
            </summary>
        </member>
        <member name="P:DotSpatial.Data.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.  Ideally, this ReadOnlyList is used with
            value types, or else this gives the user considerable power over the core content.
            </summary>
            <param name="index">The item to obtain from this list</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="T:DotSpatial.Data.SubclassList`2">
            <summary>
            SubclassList is brilliant if I do say so myself.  Let's say you have a list of IPointCategory, which is a subclass of IFeatureCategory.
            You can't have a strong typed List that is both without creating a special class that can deal with the specific implementations of
            each.  So I was writing all of the stupid type specific collection classes, when in reality, I just needed a class like this
            that could handle the business logic.  Then specific instances can just inherit from this class, but specify the two types.
            </summary>
            <typeparam name="TBase">The base type that is inherited</typeparam>
            <typeparam name="TSub">The sub type that inherits from the base type</typeparam>
        </member>
        <member name="M:DotSpatial.Data.SubclassList`2.Add(`1)">
            <summary>
            Allows adding of the sub type
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Data.SubclassList`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds the entire range of enumerable elements.
            </summary>
            <param name="items">The items to add</param>
        </member>
        <member name="M:DotSpatial.Data.SubclassList`2.Contains(`1)">
            <summary>
            Tests to see if the list contains the specified item.
            </summary>
            <param name="item">The item to check the list for.</param>
            <returns>Boolean, true if the item is contained in the list.</returns>
        </member>
        <member name="M:DotSpatial.Data.SubclassList`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies each of the members to the specified array.
            </summary>
            <param name="array">The array to copy items to.</param>
            <param name="arrayIndex">The zero based integer index in the destination array where the first item should be saved.</param>
        </member>
        <member name="M:DotSpatial.Data.SubclassList`2.GetEnumerator">
            <summary>
            Gets an enumerator of type TSub for cycling through the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.SubclassList`2.IndexOf(`1)">
            <summary>
            Gets the zero based integer index of the specified item of type TSub
            </summary>
            <param name="item">The item to obtain the index of</param>
            <returns>The zero based integer index of the specified item</returns>
        </member>
        <member name="M:DotSpatial.Data.SubclassList`2.Insert(System.Int32,`1)">
            <summary>
            inserts the specified item into the specified index
            </summary>
            <param name="index">The zero based integer index where insertion can take place</param>
            <param name="item">The item to insert of type TSub</param>
        </member>
        <member name="M:DotSpatial.Data.SubclassList`2.Remove(`1)">
            <summary>
            Removes the specified item from the list.
            </summary>
            <param name="item">The item to remove</param>
            <returns>Boolean, true if the item was found in the list and removed</returns>
        </member>
        <member name="P:DotSpatial.Data.SubclassList`2.Item(System.Int32)">
            <summary>
            Gets or sets the specific item in the list
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Data.SubclassList`2.SubclassListEnumerator`2">
            <summary>
            I can't simply return the enumerator of the internal list because it would be the wrong type.
            Furthermore, I need to know both types so that I can cast them appropriately.
            </summary>
            <typeparam name="TB">The base type that is inherited</typeparam>
            <typeparam name="TS">The sub type that inherits from the base type</typeparam>
        </member>
        <member name="M:DotSpatial.Data.SubclassList`2.SubclassListEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`2})">
            <summary>
            Creates a new instance of the enumerator of the sub-type given an enumerator
            of the base type.
            </summary>
            <param name="internalEnumerator">The internal enumerator.</param>
        </member>
        <member name="M:DotSpatial.Data.SubclassList`2.SubclassListEnumerator`2.Dispose">
            <summary>
            Disposes any unmanaged memory objects
            </summary>
        </member>
        <member name="M:DotSpatial.Data.SubclassList`2.SubclassListEnumerator`2.MoveNext">
            <summary>
            Advances the enumerator to the next position
            </summary>
            <returns>Boolean, false at the end of the list.</returns>
        </member>
        <member name="M:DotSpatial.Data.SubclassList`2.SubclassListEnumerator`2.Reset">
            <summary>
            Resets the enumerator to the beginning of the list
            </summary>
        </member>
        <member name="P:DotSpatial.Data.SubclassList`2.SubclassListEnumerator`2.Current">
            <summary>
            Gets the current member returned as type TSub.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.TreeList`1">
            <summary>
            A list that keeps track of a "parent" body that is also of type T.
            Whenever a member is added to the list, it sets the parent property.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.#ctor">
             <summary>
            Initializes a new instance of list with no parent
             </summary>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.#ctor(`0)">
            <summary>
            Instantiates a new instance of a TreeList of type T, where the specified parent
            will be used as the parent for each of the items of type T in the list.
            </summary>
            <param name="parent">The ParentItem of the specified item</param>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.Add(`0)">
            <summary>
            Adds the item to the list, setting the parent to be the list's parent
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the System.Collections.Generic.List&lt;T&gt;
            </summary>
            <param name="collection">collection: The collection whose elements should be added to the end of the
            System.Collections.Generic.List&lt;T&gt;. The collection itself cannot be null, but it can contain elements that are null,
            if type T is a reference type.</param>
            <exception cref="T:System.ApplicationException">Unable to add while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted System.Collections.Generic.List&lt;T&gt; for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>The zero-based index of item in the sorted System.Collections.Generic.List&lt;T&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.</returns>
            <exception cref="T:System.InvalidOperationException">The default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find an implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.Clear">
            <summary>
            Removes all elements from the EventList&lt;T&gt;.
            </summary>
            <exception cref="T:System.ApplicationException">Unable to clear while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the System.Collections.Generic.List&lt;T&gt;.
            </summary>
            <param name="item"> The object to locate in the System.Collections.Generic.List&lt;T&gt;. The value can be null for reference types.</param>
            <returns>true if item is found in the System.Collections.Generic.List&lt;T&gt;; otherwise, false.</returns>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this list
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire System.Collections.Generic.List&lt;T&gt; to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List&lt;T&gt;. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex"> The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentException">System.ArgumentException: arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source System.Collections.Generic.List&lt;T&gt; is greater than the available space from arrayIndex to the end of the destination array. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0</exception>
            <exception cref="T:System.ArgumentNullException">array is null</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the EventList&lt;T&gt; to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="index">The zero-based index in the source EventList&lt;T&gt; at which copying begins</param>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from EventList&lt;T&gt;. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> index is less than 0.-or-arrayIndex is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index is equal to or greater than the EventList&lt;T&gt;.Count of the source EventList&lt;T&gt;.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements from index to the end of the source EventList&lt;T&gt; is greater than the available space from arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.CopyTo(`0[])">
            <summary>
            Copies the entire EventList&lt;T&gt; to a compatible one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from EventList&lt;T&gt;. The System.Array must have zero-based indexing.</param>
            <exception cref="T:System.ArgumentException">The number of elements in the source EventList&lt;T&gt; is greater than the number of elements that the destination array can contain.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the elements in the current EventList&lt;T&gt; to another type, and returns a list containing the converted elements.
            </summary>
            <typeparam name="TOutput">The output type to convert to</typeparam>
            <param name="converter">A System.Converter&lt;TInput, TOutput&gt; delegate that converts each element from one type to another type.</param>
            <returns>A List&lt;T&gt; of the target type containing the converted elements from the current EventList&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">converter is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the EventList&lt;T&gt; contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the EventList&lt;T&gt; contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source EventList&lt;T&gt;.
            </summary>
            <param name="index">The zero-based EventList&lt;T&gt; index at which the range starts.</param>
            <param name="count"> The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source EventList&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the EventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.ToArray">
            <summary>
            Copies the elements of the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; to a new array.
            </summary>
            <returns>An array containing copies of the elements of the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.</returns>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;, if that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions to check against the elements.</param>
            <returns>true if every element in the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire System.Collections.Generic.List&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the System.Collections.Generic.List&lt;T&gt;. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire System.Collections.Generic.List&lt;T&gt;, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the EventList&lt;T&gt; that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the EventList&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index"> The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the EventList&lt;T&gt; that starts at index and contains count number of elements, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> index is outside the range of valid indexes for the EventList&lt;T&gt;.-or-count is less than 0.-or-index and count do not specify a valid section in the EventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the EventList&lt;T&gt; that extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the EventList&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index"> The zero-based starting index of the search.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the EventList&lt;T&gt; that extends from index to the last element, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the EventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the System.Collections.Generic.List&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is greater than System.Collections.Generic.List&lt;T&gt;.Count.</exception>
            <exception cref="T:System.ApplicationException">Unable to insert while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the EventList&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the EventList&lt;T&gt;. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is greater than EventList&lt;T&gt;.Count.</exception>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
            <exception cref="T:System.ApplicationException">Unable to insert while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the EventList&lt;T&gt; that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">The object to locate in the EventList&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of item within the range of elements in the EventList&lt;T&gt; that contains count number of elements and ends at index, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the EventList&lt;T&gt;.-or-count is less than 0.-or-index and count do not specify a valid section in the EventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the EventList&lt;T&gt; that extends from the first element to the specified index.
            </summary>
            <param name="item">The object to locate in the EventList&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>The zero-based index of the last occurrence of item within the range of elements in the EventList&lt;T&gt; that extends from the first element to index, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the EventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the entire EventList&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the EventList&lt;T&gt;. The value can be null for reference types.</param>
            <returns>The zero-based index of the last occurrence of item within the entire the EventList&lt;T&gt;, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the System.Collections.Generic.List&lt;T&gt;.
            </summary>
            <param name="item">The object to remove from the System.Collections.Generic.List&lt;T&gt;. The value can be null for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not
            found in the System.Collections.Generic.List&lt;T&gt;.</returns>
            <exception cref="T:System.ApplicationException">Unable to remove while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the System.Collections.Generic.List&lt;T&gt;.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ApplicationException">Unable to remove while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the EventList&lt;T&gt;</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
            <exception cref="T:System.ApplicationException">Unable to remove while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the EventList&lt;T&gt;.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the EventList&lt;T&gt;.</exception>
            <exception cref="T:System.ApplicationException">Unable to remove while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the EventList&lt;T&gt;.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ApplicationException">Unable to reverse while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire EventList&lt;T&gt;.
            </summary>
            <exception cref="T:System.ApplicationException">Unable to reverse while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire EventList&lt;T&gt; using the specified System.Comparison&lt;T&gt;.
            </summary>
            <param name="comparison">The System.Comparison&lt;T&gt; to use when comparing elements.</param>
            <exception cref="T:System.ArgumentException">The implementation of comparison caused an error during the sort. For example, comparison might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentNullException">comparison is null.</exception>
            <exception cref="T:System.ApplicationException">Unable to sort while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in EventList&lt;T&gt; using the specified comparer.
            </summary>
            <param name="index"> The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
            <exception cref="T:System.ArgumentException">index and count do not specify a valid range in the EventList&lt;T&gt;.-or-The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.InvalidOperationException"> comparer is null, and the default comparer
            System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find implementation of the System.IComparable&lt;T&gt;
            generic interface or the System.IComparable interface for type T.</exception>
            <exception cref="T:System.ApplicationException">Unable to sort while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; using the specified comparer.
            </summary>
            <param name="comparer"> The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
            <exception cref="T:System.ArgumentException">The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.InvalidOperationException">comparer is null, and the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T.</exception>
            <exception cref="T:System.ApplicationException">Unable to sort while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.Sort">
            <summary>
            Sorts the elements in the entire DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">The default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot find an implementation of the System.IComparable&lt;T&gt; generic interface or the System.IComparable interface for type T.</exception>
            <exception cref="T:System.ApplicationException">Unable to sort while the ReadOnly property is set to true.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions described by the specified predicate
            </summary>
            <param name="match">The System.Predicate that defines the conditions to search for</param>
            <returns>A List of matches</returns>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the EventList&lt;T&gt; that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match"> The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the EventList&lt;T&gt;.-or-count is less than 0.-or-startIndex and count do not specify a valid section in the EventList&lt;T&gt;.</exception>
            <exception cref="T:System.ArgumentNullException">match is null</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the EventList&lt;T&gt; that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the EventList&lt;T&gt;.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire EventList&lt;T&gt;.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire EventList&lt;T&gt;.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
            <exception cref="T:System.ArgumentNullException">match is null."</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the EventList&lt;T&gt; that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match"></param>
            <returns>The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the EventList&lt;T&gt;.-or-count is less than 0.-or-startIndex and count do not specify a valid section in the EventList&lt;T&gt;.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the EventList&lt;T&gt; that extends from the first element to the specified index.
            </summary>
            <param name="startIndex"> The zero-based starting index of the backward search.</param>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">: startIndex is outside the range of valid indexes for the EventList&lt;T&gt;.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire EventList&lt;T&gt;.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.OnInclude(`0)">
            <summary>
            This sets the parent item of the item being added to this treelist.
            </summary>
            <param name="item">The item being included</param>
        </member>
        <member name="M:DotSpatial.Data.TreeList`1.OnExclude(`0)">
            <summary>
            This reverts the parent item of an item when it is removed from this treelist
            </summary>
            <param name="item">The item being removed from the list</param>
        </member>
        <member name="P:DotSpatial.Data.TreeList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <returns>
            The number of elements that the DotSpatial.Interfaces.Framework.IEventList&lt;T&gt; can contain before resizing is required.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.Capacity is set to a value that is less than DotSpatial.Interfaces.Framework.IEventList&lt;T&gt;.Count.</exception>
        </member>
        <member name="P:DotSpatial.Data.TreeList`1.Count">
            <summary>
            Gets the count of the members in the list
            </summary>
        </member>
        <member name="P:DotSpatial.Data.TreeList`1.Item(System.Int32)">
            <summary>
            The default, indexed value of type T
            </summary>
            <param name="index">The numeric index</param>
            <returns>An object of type T corresponding to the index value specified</returns>
        </member>
        <member name="P:DotSpatial.Data.TreeList`1.IsReadOnly">
            <summary>
            Gets a boolean property indicating whether this list can be written to.
            </summary>
        </member>
        <member name="T:DotSpatial.Data.ValidationType">
            <summary>
            ValidationType
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ValidationType.None">
            <summary>
            No validation will be performed
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ValidationType.String">
            <summary>
            Any string value, including null will be accepted
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ValidationType.Byte">
            <summary>
            Only values that can be parsed to byte values will be accepted
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ValidationType.Short">
            <summary>
            Only values that can be parsed to short values will be accepted
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ValidationType.Integer">
            <summary>
            Only values that can be parsed to integer values will be accepted
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ValidationType.Float">
            <summary>
            Only values that can be parsed to float values will be accepted
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ValidationType.Double">
            <summary>
            Only values that can be parsed to double values will be accepted
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ValidationType.PositiveShort">
            <summary>
            Only values that can be parsed to positive short values will be accepted
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ValidationType.PositiveInteger">
            <summary>
            Only values that can be parsed to positive integer values will be accepted
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ValidationType.PositiveFloat">
            <summary>
            Only values that can be parsed to positive float values will be accepted
            </summary>
        </member>
        <member name="F:DotSpatial.Data.ValidationType.PositiveDouble">
            <summary>
            Only values that can be parsed to positive double values will be accepted
            </summary>
        </member>
        <member name="T:DotSpatial.Data.MockICancelProgressHandler">
            <summary>
            This class converts an IProgressHandler to an ICancelProgressHandler. It wraps the IProgressHandler so that
            it can be used by a class that requires an ICancelProgressHandler. Cancel will always return false.
            </summary>
        </member>
        <member name="M:DotSpatial.Data.MockICancelProgressHandler.#ctor(DotSpatial.Data.IProgressHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:DotSpatial.Data.MockICancelProgressHandler"/> class.
            </summary>
            <param name="progressHandler">The progress handler.</param>
        </member>
        <member name="M:DotSpatial.Data.MockICancelProgressHandler.Progress(System.String,System.Int32,System.String)">
            <summary>
            Progress is the method that should receive a progress message.
            </summary>
            <param name="key">The message string without any information about the status of completion.</param>
            <param name="percent">An integer from 0 to 100 that indicates the condition for a status bar etc.</param>
            <param name="message">A string containing both information on what the process is, as well as its completion status.</param>
        </member>
        <member name="P:DotSpatial.Data.MockICancelProgressHandler.Cancel">
            <summary>
            Returns true if the running process should be cancelled
            </summary>
        </member>
    </members>
</doc>
