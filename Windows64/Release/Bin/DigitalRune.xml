<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DigitalRune</name>
    </assembly>
    <members>
        <member name="T:DigitalRune.Animation.IAnimatableObject">
            <summary>
            Represents an object that can be animated.
            </summary>
            <remarks>
            An <see cref="T:DigitalRune.Animation.IAnimatableObject"/> is an object that can be animated. It has properties that 
            can be controlled by animations. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.IAnimatableObject.GetAnimatedProperties">
            <summary>
            Gets either the properties which are currently animated, or all properties which can be 
            animated. (See remarks.)
            </summary>
            <returns>
            The properties which are currently animated, or the all properties which can be animated.
            (See remarks.)
            </returns>
            <remarks>
            This method is required by the animation system to stop all animations running on this 
            object. The type that implements this method can either:
            <list type="bullet">
            <item>
            <description>
            Variant #1: Return only the properties which are currently being animated.
            </description>
            </item>
            <item>
            <description>
            Variant #2: Return all properties which can be animated - independent of whether they are 
            currently being animated or not.
            </description>
            </item>
            </list>
            The first implementation (Variant #1) is preferred by the animation system, but in some 
            cases it is not easily possible to determine which properties are currently being animated. 
            In this case the <see cref="T:DigitalRune.Animation.IAnimatableObject"/> may simple return all properties (Variant 
            #2).
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.IAnimatableObject.GetAnimatableProperty``1(System.String)">
            <summary>
            Gets the property with given name and type which can be animated.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <returns>
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty"/> that has the given name and type; otherwise, 
            <see langword="null"/> if the object does not have an animatable property with this name or 
            type.
            </returns>
        </member>
        <member name="T:DigitalRune.Animation.IAnimatableProperty">
            <summary>
            Represents a property that can be animated.
            </summary>
            <remarks>
            <para>
            An <see cref="T:DigitalRune.Animation.IAnimatableProperty"/> is a property of a certain type that can be animated. It
            can have two values: a <i>base value</i> and an <i>animation value</i>.
            </para>
            <para>
            <strong>Base Value:</strong> The base value is the value of the property that is valid when 
            no animations are active. The base value is optional - not all properties that implement
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> need to have a base value. The properties 
            <see cref="P:DigitalRune.Animation.IAnimatableProperty.HasBaseValue"/> and <see cref="P:DigitalRune.Animation.IAnimatableProperty.BaseValue"/> need to be set by the object that
            implements the interface. The animation system reads the base value but does not change it.
            The base value is used by certain types of animations: For example, additive animations will
            add the result of the animations to the base value value. Another example are 
            "From-To-Animations": If only the "To" value is defined then the animation will animate from
            the base value of the property to the "To" value defined in the animation.
            </para>
            <para>
            <strong>Animation Value:</strong> The animation value of the property is determined by the 
            animations that are controlling the property. The properties <see cref="P:DigitalRune.Animation.IAnimatableProperty.IsAnimated"/> and 
            <see cref="P:DigitalRune.Animation.IAnimatableProperty.AnimationValue"/> are set by the animations system and should be treated as
            read-only. <see cref="P:DigitalRune.Animation.IAnimatableProperty.IsAnimated"/> is <see langword="true"/> when an animation is active; 
            <see langword="false"/> indicates that no animations are active. In this case the base value,
            if available, should be treated as the effective value of the property.
            </para>   
            </remarks>
            <example>
            The following examples shows how an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> could be implemented.
            <code lang="csharp">
            <![CDATA[
            public class AnimatableProperty<T> : IAnimatableProperty<T>
            {
              private T _baseValue;
              private T _animationValue;
              private bool _isAnimated;
            
              #region ----- IAnimatableProperty -----
              bool IAnimatableProperty.HasBaseValue
              {
                get { return true; }
              }
            
              object IAnimatableProperty.BaseValue
              {
                get { return _baseValue; }
              }
            
              bool IAnimatableProperty.IsAnimated
              {
                get { return _isAnimated; }
                set { _isAnimated = value; }
              }
            
              object IAnimatableProperty.AnimationValue
              {
                get { return _animationValue; }
              }
              #endregion
            
              #region ----- IAnimatableProperty<T> -----
              T IAnimatableProperty<T>.BaseValue
              {
                get { return _baseValue; }
              }
            
              T IAnimatableProperty<T>.AnimationValue
              {
                get { return _animationValue; }
                set { _animationValue = value; }
              }
              #endregion
            
              public T Value
              {
                get { return _isAnimated ? _animationValue : _baseValue; }
                set { _baseValue = value; }
              }
            }
            ]]>
            </code>
            <para>
            Here is another example showing how a wrapper for existing properties could look like.
            </para>
            <code lang="csharp">
            <![CDATA[
            public class DelegateAnimatableProperty<T> : IAnimatableProperty<T>
            {
              private bool _isAnimated;
              private Func<T> _getter;
              private Action<T> _setter;
            
              #region ----- IAnimatableProperty -----
            
              bool IAnimatableProperty.HasBaseValue
              {
                get { return false; }
              }
            
              object IAnimatableProperty.BaseValue
              {
                get { throw new NotImplementedException(); }
              }
            
              bool IAnimatableProperty.IsAnimated
              {
                get { return _isAnimated; }
                set { _isAnimated = value; }
              }
            
              object IAnimatableProperty.AnimationValue
              {
                get { return (object)_getter(); }
              }
              #endregion
            
              #region ----- IAnimatableProperty<T> -----
              
              T IAnimatableProperty<T>.BaseValue
              {
                get { throw new NotImplementedException(); }
              }
            
              T IAnimatableProperty<T>.AnimationValue
              {
                get { return _getter(); }
                set { _setter(value); }
              }
              #endregion
            
              public DelegateAnimatableProperty(Func<T> getter, Action<T> setter)
              {
                if (getter == null)
                  throw new ArgumentNullException("getter");
                if (setter == null)
                  throw new ArgumentNullException("setter");
            
                _getter = getter;
                _setter = setter;
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Animation.IAnimatableProperty.HasBaseValue">
            <summary>
            Gets a value indicating whether this property has a base value.
            </summary>
            <value>
            <see langword="true"/> if this property has a base value; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.IAnimatableProperty.BaseValue">
            <summary>
            Gets the base value.
            </summary>
            <value>The base value.</value>
        </member>
        <member name="P:DigitalRune.Animation.IAnimatableProperty.IsAnimated">
            <summary>
            Gets or sets a value indicating whether this property is animated by the animation system.
            </summary>
            <value>
            <see langword="true"/> if this property has an animation value; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <para>
            This property is set by the animation system if animations are controlling the property.
            The result of the animations are stored in <see cref="P:DigitalRune.Animation.IAnimatableProperty.AnimationValue"/>.
            </para>
            <para>
            <strong>Notes to Implementors:</strong> The property <see cref="P:DigitalRune.Animation.IAnimatableProperty.IsAnimated"/> is optional. 
            It is not strictly required to store the value in derived types. The getter of the property 
            should throw a <see cref="T:System.NotImplementedException"/> if it is not implemented and the setter
            of the property can be a nop ("no operation").
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.IAnimatableProperty.AnimationValue">
            <summary>
            Gets the animation value.
            </summary>
            <value>The animation value.</value>
            <remarks>
            The value is the result of the animations controlling the property. The property is only 
            valid if <see cref="P:DigitalRune.Animation.IAnimatableProperty.IsAnimated"/> is set.
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.IAnimatableProperty`1">
            <summary>
            Represents a property of a certain type that can be animated.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.IAnimatableProperty`1.BaseValue">
            <summary>
            Gets the base value.
            </summary>
            <value>The base value.</value>
        </member>
        <member name="P:DigitalRune.Animation.IAnimatableProperty`1.AnimationValue">
            <summary>
            Gets or sets the animation value.
            </summary>
            <value>The animation value.</value>
            <remarks>
            The value is the result of the animations running on the property. The property is only 
            valid if <see cref="P:DigitalRune.Animation.IAnimatableProperty.IsAnimated"/> is set.
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Animation"/> namespace provides an animation system which allows
            to define and play animations.
            </summary>
        </member>
        <member name="T:DigitalRune.Collections.ArrayList`1">
            <summary>
            Represents array-based list with minimal overhead.
            </summary>
            <typeparam name="T">The value type stored in the array.</typeparam>
            <remarks>
            <para>
            The list is intended to store value types (<c>struct</c>). The list's internal array is 
            exposed for fast, direct access. The internal array should only be used for read or replace 
            operations. Items can be added using <see cref="M:DigitalRune.Collections.ArrayList`1.Add(`0@)"/>, which may resize the internal 
            array.
            </para>
            <para>
            <strong>Important:</strong> Only the first <see cref="P:DigitalRune.Collections.ArrayList`1.Count"/> array entries are valid!
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Collections.ArrayList`1.Array">
            <summary>
            Gets the list's internal array.
            </summary>
            <value>The list's internal array.</value>
        </member>
        <member name="P:DigitalRune.Collections.ArrayList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
            <value>The number of items in the list.</value>
        </member>
        <member name="M:DigitalRune.Collections.ArrayList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.ArrayList`1" /> class.
            </summary>
            <param name="initialCapacity">The initial capacity.</param>
        </member>
        <member name="M:DigitalRune.Collections.ArrayList`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.ArrayList`1.Add(`0@)">
            <overrides>
            <summary>
            Adds the specified item to the list.
            </summary>
            </overrides>
            <summary>
            Adds the specified item to the list.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:DigitalRune.Collections.ArrayList`1.Add(`0)">
            <summary>
            Adds the specified item to the list.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:DigitalRune.Collections.ArrayList`1.AddRange(System.Int32)">
            <summary>
            Adds the specified number of (uninitialized!) items to the list.
            </summary>
            <param name="count">The number of items.</param>
        </member>
        <member name="M:DigitalRune.Collections.ArrayList`1.AddRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds the specified items to the list.
            </summary>
            <param name="items">The items to be added.</param>
        </member>
        <member name="M:DigitalRune.Collections.ArrayList`1.EnsureCapacity(System.Int32)">
            <summary>
            Ensures the list's internal array is large enough to store a certain number of items.
            </summary>
            <param name="capacity">The number of items to be stored in the list.</param>
        </member>
        <member name="M:DigitalRune.Collections.ArrayList`1.Insert(System.Int32,`0@)">
            <overloads>
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            </overloads>
            
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
            <param name="item">The item to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.ArrayList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
            <param name="item">The item to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.ArrayList`1.Resize(System.Int32)">
            <summary>
            Resizes the list's internal array.
            </summary>
            <param name="capacity">The array length.</param>
        </member>
        <member name="M:DigitalRune.Collections.ArrayList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:DigitalRune.Collections.ArrayList`1"/> to an <see cref="T:System.Array"/>, 
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements 
            copied from <see cref="T:DigitalRune.Collections.ArrayList`1"/>. The <see cref="T:System.Array"/> must have zero-based 
            indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of elements in the 
            source <see cref="T:DigitalRune.Collections.ArrayList`1"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.ArrayList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the list.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.ArrayList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the items in the list.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> that defines the sort order.</param>
        </member>
        <member name="T:DigitalRune.Collections.ChildCollection`2">
            <summary>
            Represents a collection of children.
            </summary>
            <typeparam name="TParent">The type of the parent object.</typeparam>
            <typeparam name="TChild">The type of the child object.</typeparam>
            <remarks>
            <para>
            When a new object is added to or removed from the <see cref="T:DigitalRune.Collections.ChildCollection`2"/> 
            the method <see cref="M:DigitalRune.Collections.ChildCollection`2.SetParent(`1,`0)"/> is called to set the parent property of the child object. 
            </para>
            <para>
            Duplicates items or <see langword="null"/> are not allowed.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Collections.ChildCollection`2.Parent">
            <summary>
            Gets (or sets) the parent which owns this child collection.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:DigitalRune.Collections.ChildCollection`2.#ctor(`0)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.ChildCollection`2"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.ChildCollection`2"/> class.
            </summary>
            <param name="parent">The parent object that owns this collection.</param>
        </member>
        <member name="M:DigitalRune.Collections.ChildCollection`2.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.ChildCollection`2"/> class that
            has the specified initial capacity.
            </summary>
            <param name="parent">The parent object that owns this collection.</param>
            <param name="capacity">The number of elements that the new list can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.ChildCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Collections.ChildCollection`2"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Collections.ChildCollection`2"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.ChildCollection`2.ClearItems">
            <summary>
            Removes all elements from the collection. 
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.ChildCollection`2.InsertItem(System.Int32,`1)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cannot insert node into collection - <paramref name="item"/> is already in this collection
            or child of another object.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.ChildCollection`2.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection. 
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:DigitalRune.Collections.ChildCollection`2.SetItem(System.Int32,`1)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cannot insert node into collection - <paramref name="item"/> is already in this collection
            or child of another object.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.ChildCollection`2.GetParent(`1)">
            <summary>
            Gets the parent of an object.
            </summary>
            <param name="child">The child object.</param>
            <returns>The parent of <paramref name="child"/>.</returns>
        </member>
        <member name="M:DigitalRune.Collections.ChildCollection`2.SetParent(`1,`0)">
            <summary>
            Sets the parent of the given object.
            </summary>
            <param name="parent">The parent to set.</param>
            <param name="child">The child object.</param>
        </member>
        <member name="M:DigitalRune.Collections.ChildCollection`2.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection. 
            </summary>
            <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
            <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="oldIndex"/> or <paramref name="newIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.ChildCollection`2.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection. 
            </summary>
            <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
            <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
        </member>
        <member name="T:DigitalRune.Collections.CollectionChangedAction">
            <summary>
            Describes the action that caused a <see cref="E:DigitalRune.Collections.NotifyingCollection`1.CollectionChanged"/> 
            event.
            </summary>
        </member>
        <member name="F:DigitalRune.Collections.CollectionChangedAction.Add">
            <summary>
            New items were added to the collection.
            </summary>
        </member>
        <member name="F:DigitalRune.Collections.CollectionChangedAction.Remove">
            <summary>
            Items were removed from the collection.
            </summary>
        </member>
        <member name="F:DigitalRune.Collections.CollectionChangedAction.Replace">
            <summary>
            One item was replaced in the collection.
            </summary>
        </member>
        <member name="F:DigitalRune.Collections.CollectionChangedAction.Clear">
            <summary>
            All items were removed from the collection.
            </summary>
        </member>
        <member name="F:DigitalRune.Collections.CollectionChangedAction.Move">
            <summary>
            An item was moved within the collection.
            </summary>
        </member>
        <member name="T:DigitalRune.Collections.CollectionChangedEventArgs`1">
            <summary>
            Provides data for the <see cref="E:DigitalRune.Collections.NotifyingCollection`1.CollectionChanged"/> event.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="P:DigitalRune.Collections.CollectionChangedEventArgs`1.Action">
            <summary>
            Gets or sets the action that caused the event.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:DigitalRune.Collections.CollectionChangedEventArgs`1.NewItemsIndex">
            <summary>
            Gets or sets the index of the first new item.
            </summary>
            <value>The index of the first new item. If there are no new items this index is -1.</value>
        </member>
        <member name="P:DigitalRune.Collections.CollectionChangedEventArgs`1.OldItemsIndex">
            <summary>
            Gets or sets the index where the first old item was placed in the collection.
            </summary>
            <value>
            The (former) index of the first old item. If there are no old items this index is -1.
            </value>
        </member>
        <member name="P:DigitalRune.Collections.CollectionChangedEventArgs`1.NewItems">
            <summary>
            Gets the new items that were involved in the change.
            </summary>
            <value>The new items. The default is an empty list.</value>
        </member>
        <member name="P:DigitalRune.Collections.CollectionChangedEventArgs`1.OldItems">
            <summary>
            Gets the items affected by a replace, remove or move action.
            </summary>
            <value>The old items. The default is an empty list.</value>
        </member>
        <member name="M:DigitalRune.Collections.CollectionChangedEventArgs`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1"/> class from 
            being created.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.CollectionChangedEventArgs`1.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1"/> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Collections.CollectionChangedEventArgs`1.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.CollectionChangedEventArgs`1.Recycle">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1"/> class.
            </summary>
            <remarks>
            <para>
            This method resets this instance and returns it to a resource pool if resource pooling is 
            enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Collections.CollectionDebugView`1">
            <summary>
            Helper class which can be used with the <see cref="T:System.Diagnostics.DebuggerTypeProxyAttribute"/>.
            </summary>
            <typeparam name="T">The type of items.</typeparam>
        </member>
        <member name="M:DigitalRune.Collections.CollectionDebugView`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.CollectionDebugView`1" /> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:DigitalRune.Collections.CollectionDebugView`1.Items">
            <summary>
            Gets the items of the collection.
            </summary>
            <value>The items of the collection.</value>
        </member>
        <member name="T:DigitalRune.Collections.CollectionHelper">
            <summary>
            Provides extension methods for working with collections.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.CollectionHelper.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Adds the specified items to the <see cref="T:System.Collections.Generic.ICollection`1"/>. 
             </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to which the items should be added.</param>
             <param name="items">TThe items to be added.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="collection"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="items"/> is <see langword="null"/>.
             </exception>
        </member>
        <member name="T:DigitalRune.Collections.DelegateComparer`1">
            <summary>
            Compares two items using a user-defined <see cref="T:System.Comparison`1"/> delegate. (Note: In .NET
            4.5 or higher use <strong>Comparer&lt;T&gt;.Create()</strong> instead of this class.)
            </summary>
            <typeparam name="T">The type of objects to compare</typeparam>
        </member>
        <member name="M:DigitalRune.Collections.DelegateComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.DelegateComparer`1" /> class.
            </summary>
            <param name="comparison">The comparison.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparison"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.DelegateComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or
            greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x"/> and 
            <paramref name="y"/>. The result is less than 0 if <paramref name="x"/> is less than 
            <paramref name="y"/>. The result is 0 if <paramref name="x"/> is equal to 
            <paramref name="y"/>. The result is greater than 0 if <paramref name="x"/> is greater than 
            <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Collections.Deque`1">
            <summary>
            Represents a double-ended queue (deque) of objects. 
            </summary>
            <typeparam name="T">Specifies the type of elements in the deque.</typeparam>
            <remarks>
            <para>
            A deque is similar to a queue except that objects can inserted and removed at both ends.
            The capacity of a <see cref="T:DigitalRune.Collections.Deque`1"/> is the number of elements the <see cref="T:DigitalRune.Collections.Deque`1"/> 
            can hold. As elements are added to a <see cref="T:DigitalRune.Collections.Deque`1"/>, the capacity is automatically 
            increased as required by reallocating the internal array. The capacity can be decreased by 
            calling <see cref="M:DigitalRune.Collections.Deque`1.TrimExcess"/>. 
            </para>
            <para>
            <see cref="T:DigitalRune.Collections.Deque`1"/> accepts <see langword="null"/> as a valid value for reference types and 
            allows duplicate elements.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Collections.Deque`1.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:DigitalRune.Collections.Deque`1"/>. 
            </summary>
        </member>
        <member name="P:DigitalRune.Collections.Deque`1.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="P:DigitalRune.Collections.Deque`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last 
            element.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.Enumerator.#ctor(DigitalRune.Collections.Deque{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.Deque`1.Enumerator"/> struct.
            </summary>
            <param name="deque">The <see cref="T:DigitalRune.Collections.Deque`1"/> to be enumerated.</param>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; 
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            <see cref="T:DigitalRune.Collections.Deque`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Collections.Deque`1"/> was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:DigitalRune.Collections.Deque`1.Count">
            <summary>
            Gets the number of items contained in the <see cref="T:DigitalRune.Collections.Deque`1"/>.
            </summary>
            <value>The number of items contained in the <see cref="T:DigitalRune.Collections.Deque`1"/>.</value>
        </member>
        <member name="P:DigitalRune.Collections.Deque`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Collections.Deque`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized 
            (thread safe).
            </summary>
            <value>
            <see langword="true"/> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread 
            safe); otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Collections.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Collections.Deque`1.Head">
            <summary>
            Gets or sets the object at the beginning of the <see cref="T:DigitalRune.Collections.Deque`1"/>.
            </summary>
            <value>The object at the beginning of the <see cref="T:DigitalRune.Collections.Deque`1"/>.</value>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DigitalRune.Collections.Deque`1"/> is empty.</exception>
            <remarks>
            This property is an O(1) operation.
            </remarks>
        </member>
        <member name="P:DigitalRune.Collections.Deque`1.Tail">
            <summary>
            Gets or sets the object at the end of the <see cref="T:DigitalRune.Collections.Deque`1"/>.
            </summary>
            <value>The object at the end of the <see cref="T:DigitalRune.Collections.Deque`1"/>.</value>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Collections.Deque`1"/> is empty.
            </exception>
            <remarks>
            <para>
            This property is an O(1) operation, where n is <see cref="P:DigitalRune.Collections.Deque`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Collections.Deque`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value>The item at the specified index.</value>
            <param name="index">The zero-based index of the item to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Collections.Deque`1.Count"/>.
            </exception>
            <remarks>
            This indexer is an O(1) operation.
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.Deque`1"/> class that is empty and has the
            default initial capacity. 
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.Deque`1"/> class that contains elements copied 
            from the specified collection and has sufficient capacity to accommodate the number of 
            elements copied. 
            </summary>
            <param name="collection">
            The collection whose elements are copied to the new <see cref="T:DigitalRune.Collections.Deque`1"/>. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.Deque`1"/> class is empty and has the 
            specified initial capacity. 
            </summary>
            <param name="capacity">
            The initial number of elements that the <see cref="T:DigitalRune.Collections.Deque`1"/> can contain.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <remarks>
            <para>
            If <see cref="P:DigitalRune.Collections.Deque`1.Count"/> already equals the capacity, the capacity of the 
            <see cref="T:DigitalRune.Collections.Deque`1"/> is increased by automatically reallocating the internal array, and 
            the existing elements are copied to the new array before the new element is added. 
            </para>
            <para>
            If <see cref="P:DigitalRune.Collections.Deque`1.Count"/> is less than the capacity of the internal array, this method is an 
            O(1) operation. If the internal array needs to be reallocated to accommodate the new 
            element, this method becomes an O(n) operation, where n is <see cref="P:DigitalRune.Collections.Deque`1.Count"/>. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.Clear">
            <summary>
            Removes all items from the <see cref="T:DigitalRune.Collections.Deque`1"/>.
            </summary>
            <remarks>
            <para>
            <see cref="P:DigitalRune.Collections.Deque`1.Count"/> is set to zero, and references to other objects from elements of the 
            collection are also released. 
            </para>
            <para>
            The capacity remains unchanged. To reset the capacity of the <see cref="T:DigitalRune.Collections.Deque`1"/>, call 
            <see cref="M:DigitalRune.Collections.Deque`1.TrimExcess"/>. Trimming an empty <see cref="T:DigitalRune.Collections.Deque`1"/> sets the capacity of the 
            <see cref="T:DigitalRune.Collections.Deque`1"/> to the default capacity. 
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:DigitalRune.Collections.Deque`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:DigitalRune.Collections.Deque`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:DigitalRune.Collections.Deque`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:DigitalRune.Collections.Deque`1"/>; 
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method determines equality using the default equality comparer 
            <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> for <typeparamref name="T"/>, the type of values 
            in the <see cref="T:DigitalRune.Collections.Deque`1"/>. 
            </para>
            <para>
            This method performs a linear search; therefore, this method is an O(n) operation, where n 
            is <see cref="P:DigitalRune.Collections.Deque`1.Count"/>. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:DigitalRune.Collections.Deque`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:DigitalRune.Collections.Deque`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the deque; otherwise, -1.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:DigitalRune.Collections.Deque`1"/> to an <see cref="T:System.Array"/>, starting at a 
            particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Collections.Deque`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of elements in the 
            source <see cref="T:DigitalRune.Collections.Deque`1"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Collections.Deque`1"/> is not modified. The order of the elements in the new array is 
            the same as the order of the elements from the head of the <see cref="T:DigitalRune.Collections.Deque`1"/> to 
            its tail.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:DigitalRune.Collections.Deque`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at 
            a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to
            or greater than the length of <paramref name="array"/>. Or the number of elements in the
            source <see cref="T:System.Collections.ICollection"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of
            the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.EnqueueHead(`0)">
            <summary>
            Adds an object to the beginning of the <see cref="T:DigitalRune.Collections.Deque`1"/>. 
            </summary>
            <param name="item">
            The object to add to the <see cref="T:DigitalRune.Collections.Deque`1"/>. The value can be null for reference types.
            </param>
            <remarks>
            <para>
            If <see cref="P:DigitalRune.Collections.Deque`1.Count"/> already equals the capacity, the capacity of the 
            <see cref="T:DigitalRune.Collections.Deque`1"/> is increased by automatically reallocating the internal array, and 
            the existing elements are copied to the new array before the new element is added. 
            </para>
            <para>
            If <see cref="P:DigitalRune.Collections.Deque`1.Count"/> is less than the capacity of the internal array, this method is an 
            O(1) operation. If the internal array needs to be reallocated to accommodate the new 
            element, this method becomes an O(n) operation, where n is <see cref="P:DigitalRune.Collections.Deque`1.Count"/>. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.EnqueueTail(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:DigitalRune.Collections.Deque`1"/>. 
            </summary>
            <param name="item">
            The object to add to the <see cref="T:DigitalRune.Collections.Deque`1"/>. The value can be null for reference types.
            </param>
            <remarks>
            <para>
            If <see cref="P:DigitalRune.Collections.Deque`1.Count"/> already equals the capacity, the capacity of the 
            <see cref="T:DigitalRune.Collections.Deque`1"/> is increased by automatically reallocating the internal array, and 
            the existing elements are copied to the new array before the new element is added. 
            </para>
            <para>
            If <see cref="P:DigitalRune.Collections.Deque`1.Count"/> is less than the capacity of the internal array, this method is an 
            O(1) operation. If the internal array needs to be reallocated to accommodate the new 
            element, this method becomes an O(n) operation, where n is <see cref="P:DigitalRune.Collections.Deque`1.Count"/>. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.DequeueHead">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:DigitalRune.Collections.Deque`1"/>. 
            </summary>
            <returns>
            The object that is removed from the beginning of the <see cref="T:DigitalRune.Collections.Deque`1"/>. 
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:DigitalRune.Collections.Deque`1"/> is empty.</exception>
            <remarks>
            <para>
            If type <typeparamref name="T"/> is a reference type, <see langword="null"/> can be added to 
            the <see cref="T:DigitalRune.Collections.Deque`1"/> as a value. 
            </para>
            <para>
            This method is an O(1) operation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.DequeueTail">
            <summary>
            Removes and returns the object at the end of the <see cref="T:DigitalRune.Collections.Deque`1"/>. 
            </summary>
            <returns>
            The object that is removed from the end of the <see cref="T:DigitalRune.Collections.Deque`1"/>. 
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Collections.Deque`1"/> is empty.
            </exception>
            <remarks>
            <para>
            If type <typeparamref name="T"/> is a reference type, <see langword="null"/> can be added to
            the <see cref="T:DigitalRune.Collections.Deque`1"/> as a value. 
            </para>
            <para>
            This method is an O(1) operation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.SetCapacity(System.Int32)">
            <summary>
            Sets the capacity of the internal buffer.
            </summary>
            <param name="capacity">The capacity of the internal buffer.</param>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.ToArray">
            <summary>
            Copies the <see cref="T:DigitalRune.Collections.Deque`1"/> elements to a new array.
            </summary>
            <returns>A new array containing elements copied from the <see cref="T:DigitalRune.Collections.Deque`1"/>.</returns>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Collections.Deque`1"/> is not modified. The order of the elements in the new array is 
            the same as the order of the elements from the head of the <see cref="T:DigitalRune.Collections.Deque`1"/> to 
            its tail.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:DigitalRune.Collections.Deque`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:DigitalRune.Collections.Deque`1"/>, if that 
            number is less than 90 percent of current capacity.
            </summary>
            <remarks>
            <para>
            This method can be used to minimize a collection's memory overhead if no new elements will 
            be added to the collection. The cost of reallocating and copying a large 
            <see cref="T:DigitalRune.Collections.Deque`1"/> can be considerable, however, so the <see cref="M:DigitalRune.Collections.Deque`1.TrimExcess"/> method 
            does nothing if the list is at more than 90 percent of capacity. This avoids incurring a 
            large reallocation cost for a relatively small gain. 
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:DigitalRune.Collections.Deque`1.Count"/>. 
            </para>
            <para>
            To reset a <see cref="T:DigitalRune.Collections.Deque`1"/> to its initial state, call the <see cref="M:DigitalRune.Collections.Deque`1.Clear"/> method 
            before calling TrimExcess method. Trimming an empty <see cref="T:DigitalRune.Collections.Deque`1"/> sets the capacity
            of the <see cref="T:DigitalRune.Collections.Deque`1"/> to the default capacity. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>. This method also returns 
            <see langword="false"/> if <paramref name="item"/> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.Deque`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="T:DigitalRune.Collections.EmptyEnumerable`1">
            <summary>
            Provides an implementation for <see cref="T:System.Collections.Generic.IEnumerable`1"/> and <see cref="T:System.Collections.Generic.IEnumerator`1"/> 
            for an empty collection.
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
        </member>
        <member name="P:DigitalRune.Collections.EmptyEnumerable`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="P:DigitalRune.Collections.EmptyEnumerable`1.System#Collections#Generic#IEnumerator{T}#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="M:DigitalRune.Collections.EmptyEnumerable`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.EmptyEnumerable`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.EmptyEnumerable`1.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.EmptyEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.EmptyEnumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            This enumerable/enumerator has already been disposed, or the enumerator is already in use.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.EmptyEnumerable`1.System#Collections#IEnumerator#MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; 
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.EmptyEnumerable`1.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:DigitalRune.Collections.FastBitArray">
            <summary>
            A fast implementation of a bit array. Minimal overhead.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.FastBitArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.FastBitArray"/> class.
            </summary>
            <param name="length">The number of bits.</param>
            <remarks>
            All bits are <see langword="false"/> per default.
            </remarks>
        </member>
        <member name="T:DigitalRune.Collections.FastStack`1">
            <summary>
            A fast implementation of a stack. No overhead, returns <see langword="null"/> instead of
            throwing exceptions.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
        </member>
        <member name="T:DigitalRune.Collections.NamedObjectCollection`1">
            <summary>
            Stores objects by their names.
            </summary>
            <typeparam name="T">
            The type of the objects. Must be derived from <see cref="T:DigitalRune.INamedObject"/>.
            </typeparam>
            <remarks>
            <para>
            This collection stores <see cref="T:DigitalRune.INamedObject"/>s. The name of each object is used as key
            when inserting a new object. The collection ensures that each object is properly named.
            </para>
            <para>
            The <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/> assumes that the names of the objects are constant.
            The collection might not work as expected if the object's names are changed while they are
            part of the collection.
            </para>
            </remarks>
        </member>
        <member name="E:DigitalRune.Collections.NamedObjectCollection`1.CollectionChanged">
            <summary>
            Occurs when items were added, replaced or removed.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/> class.
            </summary>
            <remarks>
            By default, the <see cref="P:System.StringComparer.Ordinal"/> is used to compare names.
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/> class using the
            given comparer.
            </summary>
            <param name="comparer">The comparer that compares whether two names are equal.</param>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{System.String},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/> class that uses the
            specified equality comparer and creates a lookup dictionary when the specified threshold is 
            exceeded. 
            </summary>
            <param name="comparer">The comparer that compares whether two names are equal.</param>
            <param name="dictionaryCreationThreshold">
            The number of elements the collection can hold without creating a lookup dictionary (0
            creates the lookup dictionary when the first item is added), or –1 to specify that a lookup
            dictionary is never created. 
            </param>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.GetKeyForItem(`0)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> at the specified
            index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.
            </summary>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the item at the specified index with the specified item.
            </summary>
            <param name="index">The zero-based index of the item to be replaced.</param>
            <param name="item">The new item.</param>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the 
            <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/>. 
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the 
            <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/> at the
            specified index.
            </summary>
            <param name="index">
            The zero-based index at which the new elements should be inserted.
            </param>
            <param name="collection">
            The collection whose elements should be inserted into the
            <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/>.
            </param>
            <remarks>
            <para>
            If index is equal to <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>, the elements are added to the end of
            <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/>.
            </para>
            <para>
            The order of the elements in the collection is preserved in the
            <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/>.
            </summary>
            <param name="index">
            The zero-based starting index of the range of elements to remove.
            </param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of
            elements in the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/>.
            </exception>
            <seealso cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)"/>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.TryGet(System.String,`0@)">
            <overloads>
            <summary>
            Gets the object associated with a specified key.
            </summary>
            </overloads>
            
            <summary>
            Gets the object associated with the specified key.
            </summary>
            <param name="key">The name of the element to get.</param>
            <param name="value">
            When this method returns, the object associated with the specified key, if 
            the key is found; otherwise, the default value for the type of the value 
            parameter. (This parameter is passed uninitialized.)
            </param>
            <returns><see langword="true"/> if the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/> contains 
            an element with the specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.TryGet``1(System.String,``0@)">
            <summary>
            Gets the object associated with the specified key. The object needs to be of a certain type.
            </summary>
            <typeparam name="TExpected">The expected type of the object.</typeparam>
            <param name="key">The name of the element to get.</param>
            <param name="value">
            The object associated with the specified key, if the key is found and the object is of type
            <typeparamref name="TExpected"/>; otherwise, the default value for 
            <typeparamref name="TExpected"/> is returned. (This parameter is passed uninitialized.)
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Collections.NamedObjectCollection`1"/> contains an element 
            with the specified key which is of the expected type; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection. 
            </summary>
            <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
            <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
            <remarks>
            Subclasses can override the <see cref="M:DigitalRune.Collections.NamedObjectCollection`1.MoveItem(System.Int32,System.Int32)"/> method to provide custom behavior for
            this method. 
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="oldIndex"/> or <paramref name="newIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
            <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
            <remarks>
            <para>
            This method is called by <see cref="M:DigitalRune.Collections.NamedObjectCollection`1.Move(System.Int32,System.Int32)"/>. The range of <paramref name="oldIndex"/> and 
            <paramref name="newIndex"/> is checked in <see cref="M:DigitalRune.Collections.NamedObjectCollection`1.Move(System.Int32,System.Int32)"/> before this method is called.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.NamedObjectCollection`1.OnCollectionChanged(DigitalRune.Collections.CollectionChangedEventArgs{`0})">
            <summary>
            Raises the <see cref="E:DigitalRune.Collections.NamedObjectCollection`1.CollectionChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1"/> object that provides the arguments for the
            event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Collections.NamedObjectCollection`1.OnCollectionChanged(DigitalRune.Collections.CollectionChangedEventArgs{`0})"/> in a
            derived class, be sure to call the base class's <see cref="M:DigitalRune.Collections.NamedObjectCollection`1.OnCollectionChanged(DigitalRune.Collections.CollectionChangedEventArgs{`0})"/> method so
            that registered delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Collections.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Collections"/> namespace provides new collection types.
            </summary>
        </member>
        <member name="T:DigitalRune.Collections.NotifyingCollection`1">
            <summary>
            Represents collection of objects that sends notifications (events) when the collection is 
            modified.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <remarks>
            <para>
            This collection is similar to the <strong>ObservableCollection{T}</strong> in the .NET
            Framework. (In .NET 3.5 the <strong>ObservableCollection{T}</strong> is located in the 
            WindowsBase.dll. Therefore it is not usable in non-WPF applications. This has been solved in 
            .NET 4.0 where the class was moved into the System.dll.)
            </para>
            </remarks>
        </member>
        <member name="E:DigitalRune.Collections.NotifyingCollection`1.CollectionChanged">
            <summary>
            Occurs when items were added, replaced or removed.
            </summary>
        </member>
        <member name="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull">
            <summary>
            Gets or sets a value indicating whether <see langword="null"/> items are allowed in the
            collection.
            </summary>
            <value>
            <see langword="true"/> if <see langword="null"/> items are allowed; otherwise, 
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates">
            <summary>
            Gets or sets a value indicating whether duplicate items are allowed in the collection.
            </summary>
            <value>
            <see langword="true"/> if duplicate items are allowed; otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Collections.NotifyingCollection`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.NotifyingCollection`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/> class with the given
            settings.
            </summary>
            <param name="allowNull">
            If set to <see langword="true"/> null items are allowed.
            </param>
            <param name="allowDuplicates">
            If set to <see langword="true"/> duplicate items are allowed.
            </param>
        </member>
        <member name="M:DigitalRune.Collections.NotifyingCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.NotifyingCollection`1.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.NotifyingCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. The collection does not allow 
            <see langword="null"/> values. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.NotifyingCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is equal to or 
            greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.NotifyingCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. The collection does not allow 
            <see langword="null"/> values. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowDuplicates"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.NotifyingCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the 
            <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/>. 
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the 
            <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/>. The collection itself cannot be 
            <see langword="null"/>, but it can contain elements that are <see langword="null"/>, if type 
            <typeparamref name="T"/> is a reference type and <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull"/> is set to 
            <see langword="true"/>. 
            </param>
            <remarks>
            The order of the elements in the collection is preserved in the 
            <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/>. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:DigitalRune.Collections.NotifyingCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/> at the
            specified index.
            </summary>
            <param name="index">
            The zero-based index at which the new elements should be inserted.
            </param>
            <param name="collection">
            The collection whose elements should be inserted into the 
            <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/>. The collection itself cannot be 
            <see langword="null"/>, but it can contain elements that are <see langword="null"/>, if type 
            <typeparamref name="T"/> is a reference type and <see cref="P:DigitalRune.Collections.NotifyingCollection`1.AllowNull"/> is set to 
            <see langword="true"/>.
            </param>
            <remarks>
            <para>
            If index is equal to <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>, the elements are added to the end of 
            <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/>.
            </para>
            <para>
            The order of the elements in the collection is preserved in the
            <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:DigitalRune.Collections.NotifyingCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/>. 
            </summary>
            <param name="index">
            The zero-based starting index of the range of elements to remove.
            </param>
            <param name="count">
            The number of elements to remove. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of 
            elements in the <see cref="T:DigitalRune.Collections.NotifyingCollection`1"/>.
            </exception>
            <seealso cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)"/>
        </member>
        <member name="M:DigitalRune.Collections.NotifyingCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection. 
            </summary>
            <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
            <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
            <remarks>
            Subclasses can override the <see cref="M:DigitalRune.Collections.NotifyingCollection`1.MoveItem(System.Int32,System.Int32)"/> method to provide custom behavior for 
            this method. 
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="oldIndex"/> or <paramref name="newIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.NotifyingCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
            <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
            <remarks>
            <para>
            This implementation raises the <see cref="E:DigitalRune.Collections.NotifyingCollection`1.CollectionChanged"/> event. Subclasses can
            override this protected method to provide custom behavior for the 
            <see cref="M:DigitalRune.Collections.NotifyingCollection`1.Move(System.Int32,System.Int32)"/> method. 
            </para>
            <para>
            This method is called by <see cref="M:DigitalRune.Collections.NotifyingCollection`1.Move(System.Int32,System.Int32)"/>. The range of <paramref name="oldIndex"/> and 
            <paramref name="newIndex"/> is checked in <see cref="M:DigitalRune.Collections.NotifyingCollection`1.Move(System.Int32,System.Int32)"/> before this method is called.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.NotifyingCollection`1.OnCollectionChanged(DigitalRune.Collections.CollectionChangedEventArgs{`0})">
            <summary>
            Raises the <see cref="E:DigitalRune.Collections.NotifyingCollection`1.CollectionChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1"/> object that provides the arguments for the
            event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Collections.NotifyingCollection`1.OnCollectionChanged(DigitalRune.Collections.CollectionChangedEventArgs{`0})"/> in a
            derived class, be sure to call the base class's <see cref="M:DigitalRune.Collections.NotifyingCollection`1.OnCollectionChanged(DigitalRune.Collections.CollectionChangedEventArgs{`0})"/> method so
            that registered delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Collections.Pair`1">
            <summary>
            Stores two unordered related objects.
            </summary>
            <typeparam name="T">The type of the contained objects.</typeparam>
            <remarks>
            <see cref="T:DigitalRune.Collections.Pair`1"/> overloads the method <see cref="M:DigitalRune.Collections.Pair`1.Equals(DigitalRune.Collections.Pair{`0})"/> and the equality
            operators. Two <see cref="T:DigitalRune.Collections.Pair`1"/> objects are considered as equal if they contain the same
            objects. The order of the objects does not matter. If the order of the objects is relevant,
            use <see cref="T:DigitalRune.Collections.Pair`2"/> instead of <see cref="T:DigitalRune.Collections.Pair`1"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Collections.Pair`1.First">
            <summary>
            Gets or sets the first object.
            </summary>
            <value>The first object.</value>
        </member>
        <member name="P:DigitalRune.Collections.Pair`1.Second">
            <summary>
            Gets or sets the second object.
            </summary>
            <value>The second object.</value>
        </member>
        <member name="M:DigitalRune.Collections.Pair`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.Pair`1"/> class with the given objects.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
        </member>
        <member name="M:DigitalRune.Collections.Pair`1.Equals(System.Object)">
            <overloads>
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Pair`1.Equals(DigitalRune.Collections.Pair{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Pair`1.op_Equality(DigitalRune.Collections.Pair{`0},DigitalRune.Collections.Pair{`0})">
            <summary>
            Compares two <see cref="T:DigitalRune.Collections.Pair`1"/> objects to determine whether they are the 
            same.
            </summary>
            <param name="pair1">The first pair.</param>
            <param name="pair2">The second pair.</param>
            <returns>
            <see langword="true"/> if the <paramref name="pair1"/> and <paramref name="pair2"/> are the 
            same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Pair`1.op_Inequality(DigitalRune.Collections.Pair{`0},DigitalRune.Collections.Pair{`0})">
            <summary>
            Compares two <see cref="T:DigitalRune.Collections.Pair`1"/> objects to determine whether they are 
            different.
            </summary>
            <param name="pair1">The first pair.</param>
            <param name="pair2">The second pair.</param>
            <returns>
            <see langword="true"/> if the <paramref name="pair1"/> and <paramref name="pair2"/> are 
            different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Pair`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Pair`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Collections.Pair`2">
            <summary>
            Stores two ordered related objects.
            </summary>
            <typeparam name="TFirst">The type of the first object.</typeparam>
            <typeparam name="TSecond">The type of the second object.</typeparam>
            <remarks>
            <see cref="T:DigitalRune.Collections.Pair`2"/> overloads the method 
            <see cref="M:DigitalRune.Collections.Pair`2.Equals(DigitalRune.Collections.Pair{`0,`1})"/> and the equality operators. Two 
            <see cref="T:DigitalRune.Collections.Pair`2"/> objects are considered as equal if they contain the same
            objects in the same order. If <typeparamref name="TFirst"/> and <typeparamref name="TSecond"/>
            are the same type and the order of the objects does not matter, use <see cref="T:DigitalRune.Collections.Pair`1"/>
            instead of <see cref="T:DigitalRune.Collections.Pair`2"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Collections.Pair`2.First">
            <summary>
            Gets or sets the first object.
            </summary>
            <value>The first object.</value>
        </member>
        <member name="P:DigitalRune.Collections.Pair`2.Second">
            <summary>
            Gets or sets the second object.
            </summary>
            <value>The second object.</value>
        </member>
        <member name="M:DigitalRune.Collections.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.Pair`2"/> class with the given
            objects.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
        </member>
        <member name="M:DigitalRune.Collections.Pair`2.Equals(System.Object)">
            <overloads>
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Pair`2.Equals(DigitalRune.Collections.Pair{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Pair`2.op_Equality(DigitalRune.Collections.Pair{`0,`1},DigitalRune.Collections.Pair{`0,`1})">
            <summary>
            Compares two <see cref="T:DigitalRune.Collections.Pair`2"/> objects to determine whether they are the 
            same.
            </summary>
            <param name="pair1">The first pair.</param>
            <param name="pair2">The second pair.</param>
            <returns>
            <see langword="true"/> if the <paramref name="pair1"/> and <paramref name="pair2"/> are the 
            same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Pair`2.op_Inequality(DigitalRune.Collections.Pair{`0,`1},DigitalRune.Collections.Pair{`0,`1})">
            <summary>
            Compares two <see cref="T:DigitalRune.Collections.Pair`2"/> objects to determine whether they are 
            different.
            </summary>
            <param name="pair1">The first pair.</param>
            <param name="pair2">The second pair.</param>
            <returns>
            <see langword="true"/> if the <paramref name="pair1"/> and <paramref name="pair2"/> are 
            different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Pair`2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.Pair`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Collections.PooledEnumerable`1">
            <summary>
            Provides a base implementation for an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and an
            <see cref="T:System.Collections.Generic.IEnumerator`1"/> supporting resource pooling. (For internal use only.)
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
            <remarks>
            A <see cref="T:DigitalRune.Collections.PooledEnumerable`1"/> object can only be enumerated once. When the enumeration
            is finished and <see cref="M:System.IDisposable.Dispose"/> is called, the object is automatically 
            recycled.
            </remarks>
        </member>
        <member name="P:DigitalRune.Collections.PooledEnumerable`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="P:DigitalRune.Collections.PooledEnumerable`1.System#Collections#Generic#IEnumerator{T}#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="M:DigitalRune.Collections.PooledEnumerable`1.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This enumerable/enumerator is already in use.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.PooledEnumerable`1.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.PooledEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.PooledEnumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            This enumerable/enumerator has already been disposed, or the enumerator is already in use.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.PooledEnumerable`1.System#Collections#IEnumerator#MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; 
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.PooledEnumerable`1.System#Collections#IEnumerator#Reset">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <see cref="M:System.Collections.IEnumerator.Reset"/> is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.PooledEnumerable`1.OnNext(`0@)">
            <summary>
            Called when the enumerator should move to the next object.
            </summary>
            <param name="current">The next object.</param>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; 
            <see langword="false"/> if the enumerator has passed the end of the collection. 
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.PooledEnumerable`1.OnRecycle">
            <summary>
            Called when this instance should be recycled.
            </summary>
        </member>
        <member name="T:DigitalRune.Collections.PriorityQueue`1">
            <summary>
            Represents a queue of values where the greatest item can be accessed quickly.
            </summary>
            <typeparam name="T">The type of items in this collection.</typeparam>
            <remarks>
            <para>
            This class implements a heap-based priority queue. Items can be added with 
            <see cref="M:DigitalRune.Collections.PriorityQueue`1.Enqueue(`0)"/> (runtime complexity O(log n)). <see cref="M:DigitalRune.Collections.PriorityQueue`1.Peek"/> can be used to return 
            the greatest item in the queue without removing the item (runtime complexity O(1)). 
            <see cref="M:DigitalRune.Collections.PriorityQueue`1.Dequeue"/> returns the greatest item and also removes it from the queue (runtime 
            complexity O(log n)).
            </para>
            <para>
            <strong>Important:</strong> The enumerator (see <see cref="M:DigitalRune.Collections.PriorityQueue`1.GetEnumerator"/>) returns the items
            in an arbitrary order - not sorted by priority!
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Collections.PriorityQueue`1.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:DigitalRune.Collections.PriorityQueue`1"/>. 
            </summary>
        </member>
        <member name="P:DigitalRune.Collections.PriorityQueue`1.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="P:DigitalRune.Collections.PriorityQueue`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last 
            element.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; 
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            <see cref="T:DigitalRune.Collections.PriorityQueue`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Collections.PriorityQueue`1"/> was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:DigitalRune.Collections.PriorityQueue`1.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IComparer`1"/> used for comparing items type <typeparamref name="T"/>.
            </summary>
            <value>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> used for comparing items of type <typeparamref name="T"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Collections.PriorityQueue`1.Count">
            <summary>
            Gets the number of items contained in the <see cref="T:DigitalRune.Collections.PriorityQueue`1"></see>.
            </summary>
            <returns>
            The number of items contained in the <see cref="T:DigitalRune.Collections.PriorityQueue`1"></see>.
            </returns>
        </member>
        <member name="P:DigitalRune.Collections.PriorityQueue`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:DigitalRune.Collections.PriorityQueue`1" />.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:DigitalRune.Collections.PriorityQueue`1" />.
            </returns>
        </member>
        <member name="P:DigitalRune.Collections.PriorityQueue`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized 
            (thread safe).
            </summary>
            <returns>
            <see langword="true"/> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread 
            safe); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:DigitalRune.Collections.PriorityQueue`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.PriorityQueue`1" /> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.PriorityQueue`1" /> class.
            </summary>
            <param name="comparer">The comparer used to compare items.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.PriorityQueue`1" /> class.
            </summary>
            <param name="comparison">The comparison delegate used to compare items.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparison"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.Peek">
            <summary>
            Gets the greatest item in the queue without removing the item.
            </summary>
            <returns>The greatest item in the queue.</returns>
            <exception cref="T:System.InvalidOperationException">
            The priority queue is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Adds the specified item to the queue
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.Dequeue">
            <summary>
            Gets the greatest item in the queue and removes the item.
            </summary>
            <returns>The greatest item in the queue.</returns>
            <exception cref="T:System.InvalidOperationException">
            The priority queue is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.TrimExcess">
            <summary>
            Sets the capacity of the <see cref="T:DigitalRune.Collections.PriorityQueue`1"/> to a value suitable for the current 
            number of elements in the set.
            </summary>
            <remarks>
            <para>
            This method can be used to minimize a collection's memory overhead if no new elements will 
            be added to the collection.
            </para>
            <para>
            To reset a <see cref="T:DigitalRune.Collections.PriorityQueue`1"/> to its initial state, call the <see cref="M:DigitalRune.Collections.PriorityQueue`1.Clear"/> 
            method before calling <see cref="M:DigitalRune.Collections.PriorityQueue`1.TrimExcess"/> method. Trimming an empty 
            <see cref="T:DigitalRune.Collections.PriorityQueue`1"/> sets the capacity of the <see cref="T:DigitalRune.Collections.PriorityQueue`1"/> to 
            the default capacity.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.Bitmask(System.UInt32)">
            <summary>
            Creates the smallest bitmask that is greater than or equal to the given value.
            </summary>
            <remarks>
            <para>
            This result can also be interpreted as finding the smallest x such that 2<sup>x</sup> &gt; 
            <paramref name="value"/> and returning 2<sup>x</sup> - 1.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.Downheap(System.Int32,`0)">
            <summary>
            Performs the standard downheap operation with a minor tweak: item is not yet in the array, 
            so we do not need to copy it around.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.Upheap(System.Int32,`0)">
            <summary>
            Performs the standard upheap operation with a minor tweak: item is not yet in the array, 
            so we do not need to copy it around.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds the specified item. (Same as <see cref="M:DigitalRune.Collections.PriorityQueue`1.Enqueue(`0)"/>.)
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.Clear">
            <summary>
            Clears this queue.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.Contains(`0)">
            <summary>
            Determines whether the queue contains the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            <see langword="true"/> if the queue contains the specified item; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at 
            a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to
            or greater than the length of <paramref name="array"/>. Or the number of elements in the
            source <see cref="T:System.Collections.ICollection"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of
            the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:DigitalRune.Collections.PriorityQueue`1"/> to an <see cref="T:System.Array"/>, 
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Collections.PriorityQueue`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of elements in the 
            source <see cref="T:DigitalRune.Collections.PriorityQueue`1"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Collections.PriorityQueue`1"/> is not modified. The order of the elements in the new 
            array is not necessarily the same as the order of the elements from the head of the 
            <see cref="T:DigitalRune.Collections.PriorityQueue`1"/> to its tail.
            </para>
            <para>
            This method is an O(n) operation, where n is <see cref="P:DigitalRune.Collections.PriorityQueue`1.Count"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.PriorityQueue`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            <see langword="true"/> if the item was found and removed; <see langword="false"/> if the 
            item is not contained in the queue.
            </returns>
        </member>
        <member name="T:DigitalRune.Collections.ReadOnlyWeakCollection`1">
            <summary>
            Provides a read-only wrapper around a <see cref="T:DigitalRune.Collections.WeakCollection`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="P:DigitalRune.Collections.ReadOnlyWeakCollection`1.Count">
            <summary>
            Gets the number of items contained in the <see cref="T:DigitalRune.Collections.ReadOnlyWeakCollection`1"/>.
            </summary>
            <value>The number of items contained in the <see cref="T:DigitalRune.Collections.ReadOnlyWeakCollection`1"/>.</value>
        </member>
        <member name="P:DigitalRune.Collections.ReadOnlyWeakCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read only. Always returns 
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Collections.ReadOnlyWeakCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized 
            (thread safe).
            </summary>
            <value>
            <see langword="true"/> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread 
            safe); otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Collections.ReadOnlyWeakCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Collections.ReadOnlyWeakCollection`1.#ctor(DigitalRune.Collections.WeakCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.ReadOnlyWeakCollection`1"/> class.
            </summary>
            <param name="weakCollection">The weak collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="weakCollection"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.ReadOnlyWeakCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.ReadOnlyWeakCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.ReadOnlyWeakCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.ReadOnlyWeakCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Not supported.
            </summary>
            <param name="item">The object to be added.</param>
            <exception cref="T:System.NotSupportedException">
            This collection is read-only.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.ReadOnlyWeakCollection`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">
            This collection is read-only.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.ReadOnlyWeakCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:DigitalRune.Collections.ReadOnlyWeakCollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:DigitalRune.Collections.ReadOnlyWeakCollection`1"/>.</param>
            <returns>
            <see langword="true"/> if the collection contains a specific value; <see langword="false"/> 
            if it does not.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.ReadOnlyWeakCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at 
            a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="index"/> is equal to
            or greater than the length of <paramref name="array"/>. Or the number of elements in the
            source <see cref="T:System.Collections.ICollection"/> is greater than the available space from 
            <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of
            the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.ReadOnlyWeakCollection`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:DigitalRune.Collections.WeakCollection`1"/> to an <see cref="T:System.Array"/>, 
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Collections.WeakCollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="index"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of elements in the 
            source <see cref="T:DigitalRune.Collections.WeakCollection`1"/> is greater than the available space from 
            <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Collections.WeakCollection`1"/> is not modified. The order of the elements in the new 
            array is the same as the order of the live elements in the <see cref="T:DigitalRune.Collections.WeakCollection`1"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.ReadOnlyWeakCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Not supported.
            </summary>
            <param name="item">The object to be removed.</param>
            <returns>.</returns>
            <exception cref="T:System.NotSupportedException">This collection is read-only.</exception>
        </member>
        <member name="T:DigitalRune.Collections.SynchronizedHashtable`2">
            <summary>
            A thread-safe, fixed-size hash table.
            </summary>
            <typeparam name="TKey">The type of keys in the hash table.</typeparam>
            <typeparam name="TValue">The type of value in the hash table.</typeparam>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedHashtable`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.SynchronizedHashtable`2"/> class.
            </summary>
            <param name="capacity">The number of buckets in the hash table.</param>
            <remarks>
            For efficiency the <paramref name="capacity"/> is automatically incremented to the next 
            prime number.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than 1.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedHashtable`2.Add(`0,`1)">
            <summary>
            Adds an item with the provided key and value to the 
            <see cref="T:DigitalRune.Collections.SynchronizedHashtable`2"/>. (Requires locking.)
            </summary>
            <param name="key">The key of the item to add.</param>
            <param name="value">The value of the item to add.</param>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedHashtable`2.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:DigitalRune.Collections.SynchronizedHashtable`2"/>.
            (Requires locking.) 
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedHashtable`2.Remove(`0)">
            <summary>
            Removes the item associated with the specified key from the 
            <see cref="T:DigitalRune.Collections.SynchronizedHashtable`2"/>. (Requires locking.)
            </summary>
            <param name="key">The key of the item to remove.</param>
            <returns>
            <see langword="true"/> if item was successfully removed from the 
            <see cref="T:DigitalRune.Collections.SynchronizedHashtable`2"/>; otherwise, <see langword="false"/>. This 
            method returns <see langword="false"/> if <paramref name="key"/> is not found in the 
            <see cref="T:DigitalRune.Collections.SynchronizedHashtable`2"/>. 
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedHashtable`2.TryGet(`0,`1@)">
            <summary>
            Gets the value associated with the specified key (without locking).
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; 
            otherwise, the default value for the type of the value parameter. This parameter is passed 
            uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Collections.SynchronizedHashtable`2"/> contains an 
            item with the specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedHashtable`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedHashtable`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedHashtable`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:DigitalRune.Collections.SynchronizedNotifyingCollection`1">
            <summary>
            Represents a collection of objects that sends notifications (events) when the collection is 
            modified where access is thread-safe. (Not available on these platforms: Silverlight, Windows 
            Phone 7, Xbox 360)
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <remarks>
            This type is not available on the following platforms: Silverlight, Windows Phone 7/8, Xbox 360
            </remarks>
        </member>
        <member name="T:DigitalRune.Collections.SynchronizedNotifyingCollection`1.ImprovedSynchronizedCollection">
            <summary>
            A <see cref="T:System.Collections.Generic.SynchronizedCollection`1"/> with an enumerator that avoids garbage.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.ImprovedSynchronizedCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/>.
            </returns>
        </member>
        <member name="E:DigitalRune.Collections.SynchronizedNotifyingCollection`1.CollectionChanged">
            <summary>
            Occurs when items were added, replaced or removed.
            </summary>
        </member>
        <member name="P:DigitalRune.Collections.SynchronizedNotifyingCollection`1.AllowNull">
            <summary>
            Gets or sets a value indicating whether <see langword="null"/> items are allowed 
            in the collection.
            </summary>
            <value>
            <see langword="true"/> if <see langword="null"/> items are allowed; otherwise, 
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Collections.SynchronizedNotifyingCollection`1.AllowDuplicates">
            <summary>
            Gets or sets a value indicating whether duplicate items are allowed in 
            the collection.
            </summary>
            <value>
            <see langword="true"/> if duplicate items are allowed; otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.SynchronizedNotifyingCollection`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.SynchronizedNotifyingCollection`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.SynchronizedNotifyingCollection`1"/> class
            with the given settings.
            </summary>
            <param name="allowNull">
            If set to <see langword="true"/> null items are allowed.
            </param>
            <param name="allowDuplicates">
            If set to <see langword="true"/> duplicate items are allowed.
            </param>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.-or-<paramref name="index"/> is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. The collection does not allow 
            <see langword="null"/> values. See <see cref="P:DigitalRune.Collections.SynchronizedNotifyingCollection`1.AllowNull"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.SynchronizedNotifyingCollection`1.AllowDuplicates"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.-or-<paramref name="index"/> is equal to or 
            greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">
            The new value for the element at the specified index. The value can be null for reference 
            types.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.-or-<paramref name="index"/> is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. The collection does not allow 
            <see langword="null"/> values. See <see cref="P:DigitalRune.Collections.SynchronizedNotifyingCollection`1.AllowNull"/>.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. The collection does not 
            allow duplicate items. See <see cref="P:DigitalRune.Collections.SynchronizedNotifyingCollection`1.AllowDuplicates"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.OnCollectionChanged(DigitalRune.Collections.CollectionChangedEventArgs{`0})">
            <summary>
            Raises the <see cref="E:DigitalRune.Collections.SynchronizedNotifyingCollection`1.CollectionChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1"/> object that provides the arguments for the
            event.
            </param>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the 
            <see cref="T:DigitalRune.Collections.SynchronizedNotifyingCollection`1"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Collections.SynchronizedNotifyingCollection`1"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection. 
            </summary>
            <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
            <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
            <remarks>
            Subclasses can override the <see cref="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.MoveItem(System.Int32,System.Int32)"/> method to provide custom behavior for
            this method. 
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="oldIndex"/> or <paramref name="newIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">
            The zero-based index specifying the location of the item to be moved. 
            </param>
            <param name="newIndex">
            The zero-based index specifying the new location of the item.
            </param>
            <remarks>
            <para>
            This implementation raises the <see cref="E:DigitalRune.Collections.SynchronizedNotifyingCollection`1.CollectionChanged"/> event. Subclasses can
            override this protected method to provide custom behavior for the 
            <see cref="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.Move(System.Int32,System.Int32)"/> method. 
            </para>
            <para>
            This method is called by <see cref="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.Move(System.Int32,System.Int32)"/>. The range of <paramref name="oldIndex"/> and 
            <paramref name="newIndex"/> is checked in <see cref="M:DigitalRune.Collections.SynchronizedNotifyingCollection`1.Move(System.Int32,System.Int32)"/> before this method is called.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Collections.WeakCollection`1">
            <summary>
            Represents a collection of objects of type <typeparamref name="T"/> using weak references. 
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="T:DigitalRune.Collections.WeakCollection`1.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:DigitalRune.Collections.WeakCollection`1"/>. 
            </summary>
        </member>
        <member name="P:DigitalRune.Collections.WeakCollection`1.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="P:DigitalRune.Collections.WeakCollection`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last 
            element.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.Enumerator.#ctor(DigitalRune.Collections.WeakCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.WeakCollection`1.Enumerator"/> struct.
            </summary>
            <param name="weakCollection">The <see cref="T:DigitalRune.Collections.WeakCollection`1"/> to be enumerated.</param>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; 
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            <see cref="T:DigitalRune.Collections.WeakCollection`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Collections.WeakCollection`1"/> was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:DigitalRune.Collections.WeakCollection`1.Count">
            <summary>
            Gets the number of items contained in the <see cref="T:DigitalRune.Collections.WeakCollection`1"/>.
            </summary>
            <value>The number of items contained in the <see cref="T:DigitalRune.Collections.WeakCollection`1"/>.</value>
        </member>
        <member name="P:DigitalRune.Collections.WeakCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read only. Always returns 
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Collections.WeakCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized 
            (thread safe).
            </summary>
            <value>
            <see langword="true"/> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread 
            safe); otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Collections.WeakCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Collections.WeakCollection`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.AsReadOnly">
            <summary>
            Returns a read-only wrapper for the current collection.
            </summary>
            <returns>
            A <see cref="T:DigitalRune.Collections.ReadOnlyWeakCollection`1"/> that acts as a read-only wrapper around the 
            current <see cref="T:DigitalRune.Collections.WeakCollection`1"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:DigitalRune.Collections.WeakCollection`1"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:DigitalRune.Collections.WeakCollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:DigitalRune.Collections.WeakCollection`1"/>.</param>
            <returns>
            <see langword="true"/> if the collection contains a specific value; <see langword="false"/> 
            if it does not.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at 
            a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="index"/> is equal to
            or greater than the length of <paramref name="array"/>. Or the number of elements in the
            source <see cref="T:System.Collections.ICollection"/> is greater than the available space from 
            <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of
            the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:DigitalRune.Collections.WeakCollection`1"/> to an <see cref="T:System.Array"/>, 
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Collections.WeakCollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="index"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of elements in the 
            source <see cref="T:DigitalRune.Collections.WeakCollection`1"/> is greater than the available space from 
            <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Collections.WeakCollection`1"/> is not modified. The order of the elements in the new 
            array is the same as the order of the live elements in the <see cref="T:DigitalRune.Collections.WeakCollection`1"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:DigitalRune.Collections.WeakCollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:DigitalRune.Collections.WeakCollection`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>. The <see cref="T:DigitalRune.Collections.WeakCollection`1"/> does 
            not support null entries.
            </exception>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:DigitalRune.Collections.WeakCollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:DigitalRune.Collections.WeakCollection`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>. This method also returns 
            <see langword="false"/> if <paramref name="item"/> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Collections.WeakCollection`1.Purge">
            <summary>
            Removes all dead objects from the collection.
            </summary>
        </member>
        <member name="T:DigitalRune.Diagnostics.HierarchicalProfiler">
             <summary>
             Provides support for hierarchical profiling. (Not available in Silverlight.)
             </summary>
             <remarks>
             <para>
             This profiler allows to measure time of method calls and nested method calls, creating a tree
             structure of time measurements. (Use <see cref="T:DigitalRune.Diagnostics.Profiler"/> instead for simple, 
             non-hierarchical profiling.)
             </para>
             <para>
             This hierarchical profiler is similar to <see cref="T:DigitalRune.Diagnostics.Profiler"/> but every time 
             <see cref="M:DigitalRune.Diagnostics.HierarchicalProfiler.Start(System.String)"/> is called, a <see cref="T:DigitalRune.Diagnostics.HierarchicalProfilerNode"/> is added to a tree of
             nodes starting with <see cref="P:DigitalRune.Diagnostics.HierarchicalProfiler.Root"/>. Each node stores the time of a method or code section.
             The parent of a node represents the method/code section that is the caller. The children of a
             node represent methods called by the current method. See example.
             </para>
             <para>
             <strong>Conditional Compilation Symbol "DIGITALRUNE_PROFILE":</strong> The methods of this
             class are decorated with the <see cref="T:System.Diagnostics.ConditionalAttribute"/>. Compilers that support 
             <see cref="T:System.Diagnostics.ConditionalAttribute"/> ignore calls to these methods unless "DIGITALRUNE_PROFILE"
             is defined as a conditional compilation symbol. That means calling the methods 
             <see cref="M:DigitalRune.Diagnostics.HierarchicalProfiler.Reset"/>, <see cref="M:DigitalRune.Diagnostics.HierarchicalProfiler.NewFrame"/>, <see cref="M:DigitalRune.Diagnostics.HierarchicalProfiler.Start(System.String)"/> and <see cref="M:DigitalRune.Diagnostics.HierarchicalProfiler.Stop"/> does
             not influence execution performance unless the conditional compilation symbol
             "DIGITALRUNE_PROFILE" is defined. The conditional compilation symbol should be undefined for
             public, released versions of an application and profiling should only be used during
             development. (This is similar to the standard .NET class 
             <strong>System.Diagnostics.Trace</strong> and the conditional compilation symbol "TRACE". See
             documentation of class <strong>System.Diagnostics.Trace</strong>.)
             </para>
             <para>
             <strong>Thread-Safety:</strong> The <see cref="T:DigitalRune.Diagnostics.HierarchicalProfiler"/> is not thread-safe and
             single instance of <see cref="T:DigitalRune.Diagnostics.HierarchicalProfiler"/> cannot be used to profile the timing of 
             parallel running code sections.
             </para>
             </remarks>
             <example>
             <code lang="csharp">
             <![CDATA[
              // The compilation symbol "DIGITALRUNE_PROFILE" must be defined to activate profiling.
              #define DIGITALRUNE_PROFILE
             
              using System;
              using System.Threading;
              using DigitalRune.Diagnostics;
            
            namespace ProfilingTest
              {
                class Program
                {
                  // The profiler instance.
                  public static HierarchicalProfiler _profiler = new HierarchicalProfiler("MyProfiler");
            
                  static void Main(string[] args)
                  {
                    // Start profiling.
                    _profiler.Reset();
            
                    // This represents the main-loop of a game.
                    for (int i = 0; i < 10; i++)
                    {
                      // NewFrame() must be called when a new frame of the game begins.
                      _profiler.NewFrame();
            
                      Update();
                      Draw();
                    }
            
                    // Write the profiler data to the console. We start at the root node and include 
                    // up to 5 child levels.
                    Console.WriteLine(_profiler.Dump(_profiler.Root, 5));
                  }
            
                  private static void Update()
                  {
                    _profiler.Start("Update");
                    
                    Physics();
                    AI();
                    AI();
                    AI();
                    Thread.Sleep(1);
                    
                    _profiler.Stop();
                  }
            
                  private static void Physics()
                  {
                    _profiler.Start("Physics");
                    
                    Thread.Sleep(6);
                    
                    _profiler.Stop();
                  }
            
                  private static void AI()
                  {
                    _profiler.Start("AI");
                    
                    Thread.Sleep(3);
                    
                    _profiler.Stop();
                  }
            
                  private static void Draw()
                  {
                    _profiler.Start("Draw");
                    
                    Thread.Sleep(4);
                    
                     _profiler.Stop();
                  }
                }
              }
            
              /* This program creates following output:
                 (The percent values show the time of the node relative to the root of the dump.
                 The values in () are Minimum/Average/Maximum times.
                 'Other' represents the time of a node that was not measured by a child node.
            
              Profile 'MyProfiler' Node 'Root' 201.718ms total 10 frames
                Update 79.2% 15.978ms/frame 1 calls/frame (15.838ms/15.978ms/16.006ms)
                  Physics 29.8% 6.005ms/frame 1 calls/frame (5.983ms/6.005ms/6.083ms)
                  AI 44.3% 8.938ms/frame 3 calls/frame (2.412ms/2.979ms/3.559ms)
                  Other 5.1% 10.35ms 1.035ms/frame
                Draw 19.8% 3.984ms/frame 1 calls/frame (3.81ms/3.984ms/4.018ms)
                Other 2.4% 4.787ms 478.69us/frame
              */
             ]]>
             </code>
             </example>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfiler.Name">
            <summary>
            Gets the name of this profiler.
            </summary>
            <value>The name of this profiler.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfiler.Root">
            <summary>
            Gets the root node.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfiler.Stopwatch">
            <summary>
            Gets the stopwatch.
            </summary>
            <value>The stopwatch.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfiler.FrameCount">
            <summary>
            Gets the number of frames.
            </summary>
            <value>The number of frames.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfiler.ElapsedTime">
            <summary>
            Gets the elapsed time since the creation of this instance or the last <see cref="M:DigitalRune.Diagnostics.HierarchicalProfiler.Reset"/>.
            </summary>
            <value>The elapsed time.</value>
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Diagnostics.HierarchicalProfiler"/> class.
            </summary>
            <param name="name">The name of this profiler.</param>
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.Reset">
            <summary>
            Resets all timing data.
            </summary>
            <remarks>
            The node hierarchy is not reset - only the stored values in all nodes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.Start(System.String)">
            <summary>
            Starts time measurement for a node.
            </summary>
            <param name="nodeName">The name of the node.</param>
            <remarks>
            If a child node with the same name exists, the time will be accumulated for this node.
            If no child with this name exists, a new child node is created.
            </remarks>
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.Stop">
            <summary>
            Stops time measurement for a node.
            </summary>
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.NewFrame">
            <summary>
            Must be called when a new frame begins.
            </summary>
            <remarks>
            This method is usually called at the beginning of the main-loop of the game.
            </remarks>
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.Dump(DigitalRune.Diagnostics.HierarchicalProfilerNode,System.Int32)">
            <summary>
            Dumps the profiled data of the given node.
            </summary>
            <param name="node">The node. Can be <see langword="false"/> to use the root node.</param>
            <param name="maxLevelIncluded">
            The maximal level included relative to the given node. 0 means, no child data is included.
            1 means, one level of children are included.
            </param>
            <returns>
            A string representing the profiled data.
            </returns>    
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.Dump(System.Text.StringBuilder,DigitalRune.Diagnostics.HierarchicalProfilerNode,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Dumps the specified string builder (recursive).
            </summary>
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfiler.AppendTime(System.Text.StringBuilder,System.TimeSpan)">
            <summary>
            Appends the formatted time value to the given string.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <param name="time">The time.</param>
        </member>
        <member name="T:DigitalRune.Diagnostics.HierarchicalProfilerNode">
            <summary>
            Defines a node in the hierarchical measurements of a <see cref="T:DigitalRune.Diagnostics.HierarchicalProfiler"/>.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Diagnostics.HierarchicalProfilerNode"/> stores the measured times for a method or a measured
            code section. It has a <see cref="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Name"/> and is usually called like the method that is
            profiled. It links to a <see cref="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Parent"/> node, which is the method or code section from
            which the code was called. It has <see cref="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Children"/> which represent profiled methods or
            code sections that are called by the code of this node.
            </para>
            <para>
            <strong>Recursive calls:</strong> If this node is used to measure a recursive method,
            following conventions apply: <see cref="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Count"/> counts all calls including recursive calls.
            <see cref="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Minimum"/>, <see cref="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Average"/> and <see cref="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Maximum"/> ignore recursions and
            measure the time of the one call including recursions. That means, if the method "Foo" is
            called once, and it calls itself recursively, this counts as one call for the computation of
            Minimum/Average/Maximum.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Name">
            <summary>
            Gets the name of this node.
            </summary>
            <value>The name of this node.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Profiler">
            <summary>
            Gets the profiler.
            </summary>
            <value>The profiler.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Parent">
            <summary>
            Gets the parent node.
            </summary>
            <value>The parent node.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Children">
            <summary>
            Gets the child nodes.
            </summary>
            <value>The child nodes.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Count">
            <summary>
            Gets how often this node was called.
            </summary>
            <value>The number of calls.</value>
            <remarks>
            The <see cref="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Count"/> is incremented when <see cref="M:DigitalRune.Diagnostics.HierarchicalProfiler.Start(System.String)"/> is
            called. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Sum">
            <summary>
            Gets the total accumulated time of this node.
            </summary>
            <value>The total time of this node.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Minimum">
            <summary>
            Gets the minimum time of all non-recursive calls.
            </summary>
            <value>The minimum time of all non-recursive calls.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Maximum">
            <summary>
            Gets the maximum time of all non-recursive calls.
            </summary>
            <value>The maximum time of all non-recursive calls.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.HierarchicalProfilerNode.Average">
            <summary>
            Gets the average (arithmetic mean) time of all non-recursive calls.
            </summary>
            <value>The average (arithmetic mean) time of all non-recursive calls.</value>
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfilerNode.#ctor(System.String,DigitalRune.Diagnostics.HierarchicalProfiler)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Diagnostics.HierarchicalProfilerNode"/> class.
            (Only for Root nodes.)
            </summary>
            <param name="name">The name.</param>
            <param name="profiler">The profiler.</param>
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfilerNode.#ctor(System.String,DigitalRune.Diagnostics.HierarchicalProfilerNode)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Diagnostics.HierarchicalProfilerNode"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfilerNode.Reset">
            <summary>
            Resets this node, all siblings and all children.
            </summary>
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfilerNode.Call">
            <summary>
            Starts time measurement.
            </summary>
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfilerNode.Return">
            <summary>
            Stops time measurement.
            </summary>
            <returns>
            <see langword="true"/> if this ends the node. <see langword="false"/> if this node is still 
            active because only a recursive call returned.
            </returns>
        </member>
        <member name="M:DigitalRune.Diagnostics.HierarchicalProfilerNode.GetSubNode(System.String)">
            <summary>
            Gets a node with the given name. If no child with this name exists, a new child is appended.
            </summary>
            <param name="nodeName">The name of the node.</param>
            <returns>The child node.</returns>
        </member>
        <member name="T:DigitalRune.Diagnostics.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Diagnostics"/> namespace provides types for debugging and
            profiling applications.
            </summary>
        </member>
        <member name="T:DigitalRune.Diagnostics.ProfileFormatter">
            <summary>
            Provides methods to format output of profilers.
            </summary>
        </member>
        <member name="T:DigitalRune.Diagnostics.Profiler">
             <summary>
             Provides support for simple, non-hierarchical profiling. (Not available in Silverlight.)
             </summary>
             <remarks>
             <para>
             <see cref="T:DigitalRune.Diagnostics.Profiler"/>s can be used for simple time measurements of code run-time and to
             record interesting numbers. (If a hierarchical, more advanced system is desired, 
             <see cref="T:DigitalRune.Diagnostics.HierarchicalProfiler"/> can be used instead.)
             </para>
             <para>
             New profiling data can be added by calling <see cref="M:DigitalRune.Diagnostics.Profiler.Start(System.String)"/>/<see cref="M:DigitalRune.Diagnostics.Profiler.Stop(System.String)"/> to measure
             time, or by calling <see cref="M:DigitalRune.Diagnostics.Profiler.AddValue(System.String,System.Double)"/> to add any other data. For each call of these 
             methods <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> is recorded. <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> is identified by 
             name. The name needs to be specified in the methods <see cref="M:DigitalRune.Diagnostics.Profiler.Start(System.String)"/>, <see cref="M:DigitalRune.Diagnostics.Profiler.Stop(System.String)"/> 
             and <see cref="M:DigitalRune.Diagnostics.Profiler.Stop(System.String)"/>. The name is user-defined, often the name of the method where the time 
             is measured, or the name of the value added (see example below).
             </para>
             <para>
             <strong>Conditional Compilation Symbol "DIGITALRUNE_PROFILE":</strong> The methods of this
             class are decorated with the <see cref="T:System.Diagnostics.ConditionalAttribute"/>. Compilers that support 
             <see cref="T:System.Diagnostics.ConditionalAttribute"/> ignore calls to these methods unless "DIGITALRUNE_PROFILE"
             is defined as a conditional compilation symbol. That means calling the methods 
             <see cref="M:DigitalRune.Diagnostics.Profiler.Reset"/>, <see cref="M:DigitalRune.Diagnostics.Profiler.ResetAll"/>, <see cref="M:DigitalRune.Diagnostics.Profiler.Start(System.String)"/>, <see cref="M:DigitalRune.Diagnostics.Profiler.Stop(System.String)"/> and 
             <see cref="M:DigitalRune.Diagnostics.Profiler.AddValue(System.String,System.Double)"/> does not influence execution performance unless the conditional 
             compilation symbol "DIGITALRUNE_PROFILE" is defined. The conditional compilation symbol should
             be undefined for public, released versions of an application and profiling should only be used
             during development. (This is similar to the standard .NET class 
             <strong>System.Diagnostics.Trace</strong> and the conditional compilation symbol "TRACE". See 
             documentation of class <strong>System.Diagnostics.Trace</strong>.)
             </para>
             <para>
             <strong>Multithreading:</strong> The profiler can be used in multithreaded applications. For 
             each thread separate profiler data is collected (see <see cref="P:DigitalRune.Diagnostics.Profiler.Data"/>). Most methods are 
             thread-safe and work lock-free. Following properties and methods are NOT thread-safe (see 
             property or method description): <see cref="P:DigitalRune.Diagnostics.Profiler.Data"/>, <see cref="M:DigitalRune.Diagnostics.Profiler.Get(System.Int32)"/>, 
             <see cref="M:DigitalRune.Diagnostics.Profiler.ResetAll"/>, <see cref="M:DigitalRune.Diagnostics.Profiler.ResetAll(System.String)"/>, <see cref="M:DigitalRune.Diagnostics.Profiler.Reset(System.Int32)"/>, 
             <see cref="M:DigitalRune.Diagnostics.Profiler.DumpAll"/>, <see cref="M:DigitalRune.Diagnostics.Profiler.Dump(System.Int32)"/>.
             </para>
             </remarks>
             <example>
             This example shows how to use the profiler in a simple multithreaded application.
             <code lang="csharp">
             <![CDATA[
              // The compilation symbol "DIGITALRUNE_PROFILE" must be defined to activate profiling.
              #define DIGITALRUNE_PROFILE
            
              using System;
              using DigitalRune.Diagnostics;
              using DigitalRune.Threading;
            
              namespace ProfilingTest
              {
                class Program
                {
                  static void Main(string[] args)
                  {
                    // Warmstart: We call Foo and the Parallel class so that all one-time initializations are 
                    // done before we start measuring.
                    Parallel.For(0, 100, i => Foo());
                    Profiler.ResetAll();
            
                    // Measure time of a sequential for-loop.
                    Profiler.Start("MainSequential");
                    for (int i = 0; i < 100; i++)
                      Foo();
                    Profiler.Stop("MainSequential");
            
                    // Measure time of a parallel for-loop.
                    Profiler.Start("MainParallel");
                    Parallel.For(0, 100, i => Foo());
                    Profiler.Stop("MainParallel");}
            
                    // Format the output by defining a useful scale. We add descriptions so that any other 
                    // developer looking at the output can interpret them more easily.
                    Profiler.SetFormat("MainSequential", 1e3f, "[ms]");
                    Profiler.SetFormat("MainParallel", 1e3f, "[ms]");
                    Profiler.SetFormat("Foo", 1e6f, "[µs]");
                    Profiler.SetFormat("ValuesBelow10", 1.0f / 100.0f, "[%]");
            
                    // Print the profiling results.
                    Console.WriteLine(Profiler.DumpAll());
                    Console.ReadKey();
                  }
            
                  public static void Foo()
                  {
                    Profiler.Start("Foo");
                    
                    var random = new Random();
                    int numberOfValuesBelow10 = 0;
                    for (int i = 0; i < 10000; i++)
                    {
                      int x = random.Next(0, 100);
                      if (x < 10)
                        numberOfValuesBelow10++;
                    }
            
                    // Profilers can also collect other interesting numbers (not only time). 
                    Profiler.AddValue("ValuesBelow10", numberOfValuesBelow10);
             
                    Profiler.Stop("Foo");
                  }
                }
              }
             
             /* This writes following output to the console:
             (The values after "Thread:" are the thread name and the ManagedThreadId.)
             
             Thread:  (#1)
             Name              Calls      Sum          Min        Avg        Max Description
             -------------------------------------------------------------------------------
             Foo                 127  37895,500    286,800    298,390    385,100 [µs]
             ValuesBelow10       127   1271,060      9,700     10,008     10,160 [%]
             MainSequential        1     29,834     29,834     29,834     29,834 [ms]
             MainParallel          1      8,717      8,717      8,717      8,717 [ms]
             
             Thread: Parallel Worker 0 (#3)
             Name              Calls      Sum          Min        Avg        Max Description
             -------------------------------------------------------------------------------
             Foo                  27   8128,200    288,000    301,044    417,400 [µs]
             ValuesBelow10        27    272,640     10,040     10,098     10,160 [%]
             
             Thread: Parallel Worker 1 (#4)
             Name              Calls      Sum          Min        Avg        Max Description
             -------------------------------------------------------------------------------
             Foo                  19   7812,600    340,200    411,189   1307,900 [µs]
             ValuesBelow10        19    191,720     10,040     10,091     10,160 [%]
             
             Thread: Parallel Worker 2 (#5)
             Name              Calls      Sum          Min        Avg        Max Description
             -------------------------------------------------------------------------------
             Foo                  27   7998,300    286,800    296,233    326,800 [µs]
             ValuesBelow10        27    272,640     10,040     10,098     10,160 [%]
             
             Thread: Parallel Worker 3 (#6)
             Name              Calls      Sum          Min        Avg        Max Description
             -------------------------------------------------------------------------------
             Foo                   0          -          -          -          - [µs]
             ValuesBelow10         0          -          -          -          - [%]
             */
             ]]>
             </code>
             </example>  
        </member>
        <member name="P:DigitalRune.Diagnostics.Profiler.Data">
            <summary>
            Gets the profiler data for each thread.
            </summary>
            <value>The profiler data.</value>
            <remarks>
            <para>
            Each thread that uses the <see cref="T:DigitalRune.Diagnostics.Profiler"/> has its own 
            <see cref="T:DigitalRune.Diagnostics.ProfilerDataCollection"/>.
            </para>
            <para>
            <strong>Thread-Safety:</strong> Access to this property is not thread-safe.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Diagnostics.Profiler.Formats">
            <summary>
            Gets the format data for each <see cref="T:DigitalRune.Diagnostics.ProfilerData"/>.
            </summary>
            <value>The format data.</value>
            <remarks>
            All <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> instances with the same name have the same format data
            (across threads). Therefore, this data is stored here and not in a specific
            <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> instance.
            </remarks>
        </member>
        <member name="P:DigitalRune.Diagnostics.Profiler.Stopwatch">
            <summary>
            Gets the stopwatch.
            </summary>
            <value>The stopwatch.</value>
            <remarks>
            This <see cref="P:DigitalRune.Diagnostics.Profiler.Stopwatch"/> is started when the <see cref="T:DigitalRune.Diagnostics.Profiler"/> class is 
            loaded and it runs permanently.
            </remarks>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.#cctor">
            <summary>
            Initializes the static members of the <see cref="T:DigitalRune.Diagnostics.Profiler"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.ClearAll">
            <summary>
            Removes all profiler data.
            </summary>
            <remarks>
            Formatting data set with <see cref="M:DigitalRune.Diagnostics.Profiler.SetFormat(System.String,System.Double,System.String)"/> are not removed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.Get">
            <overloads>
            <summary>
            Gets the profiler data.
            </summary>
            </overloads>
            
            <summary>
            Gets the <see cref="T:DigitalRune.Diagnostics.ProfilerDataCollection"/> for the current thread.
            </summary>
            <returns>The <see cref="T:DigitalRune.Diagnostics.ProfilerDataCollection"/> for the current thread.</returns>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.Get(System.Int32)">
            <summary>
            Gets the <see cref="T:DigitalRune.Diagnostics.ProfilerDataCollection" /> for the specified thread.
            </summary>
            <param name="threadId">
            The thread ID, a unique identifier for the managed thread. (See 
            <see cref="P:System.Threading.Thread.ManagedThreadId"/>.)
            </param>
            <returns>
            The <see cref="T:DigitalRune.Diagnostics.ProfilerDataCollection" /> for the specified thread.
            </returns>
            <remarks>
            <strong>Thread-Safety:</strong> Accessing the profiler data of a thread that is not the
            current thread is not thread-safe.
            </remarks>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.Get(System.Threading.Thread)">
            <summary>
            Gets the <see cref="T:DigitalRune.Diagnostics.ProfilerDataCollection"/> for the specified thread. 
            (Not available on these platforms: WinRT)
            </summary>
            <param name="thread">The thread.</param>
            <returns>The <see cref="T:DigitalRune.Diagnostics.ProfilerDataCollection"/> for the specified thread.</returns>
            <remarks>
            <para>
            <strong>Thread-Safety:</strong> Accessing the profiler data of a thread that is not the 
            current thread is not thread-safe.
            </para>
            <para>
            This method is not available on the following platforms: WinRT
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="thread"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.Get(System.String)">
            <summary>
            Gets the <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> with the given name for the current thread.
            </summary>
            <param name="name">The name of the profiler data.</param>
            <returns>
            The <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> with the given name for the current thread.
            </returns>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.ResetAll">
            <overloads>
            <summary>
            Resets profiler data for all threads.
            </summary>
            </overloads>
            
            <summary>
            Resets all <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> for all threads.
            </summary>
            <remarks>
            <para>
            <strong>Thread-Safety:</strong> This method is not thread-safe and must only be called when
            it is assured that no other thread uses the profiler.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.ResetAll(System.String)">
            <summary>
            Resets the <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> with the given name for all threads.
            </summary>
            <param name="name">The name.</param>
            <remarks>
            <para>
            <strong>Thread-Safety:</strong> This method is not thread-safe and must only be called when
            it is assured that no other thread uses the profiler.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.Reset">
            <overloads>
            <summary>
            Resets the profiler data.
            </summary>
            </overloads>
            
            <summary>
            Resets all <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> for the current thread.
            </summary>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.Reset(System.Threading.Thread)">
            <summary>
            Resets all <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> for the given thread.
            (Not available on these platforms: WinRT)
            </summary>
            <param name="thread">The thread.</param>
            <remarks>
            <para>
            <strong>Thread-Safety:</strong> Accessing the profiler data of a thread that is not the
            current thread is not thread-safe.
            </para>
            <para>
            This method is not available on the following platforms: WinRT
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.Reset(System.Int32)">
            <summary>
            Resets all <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> for the given thread.
            </summary>
            <param name="managedThreadId">The managed thread ID.</param>
            <remarks>
            <strong>Thread-Safety:</strong> Accessing the profiler data of a thread that is not the
            current thread is not thread-safe.
            </remarks>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.Reset(System.String)">
            <summary>
            Resets the <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> with the given name (only for the current thread).
            </summary>
            <param name="name">The name of the profiler data.</param>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.Start(System.String)">
            <summary>
            Starts time measurement for the <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> with the given name.
            </summary>
            <param name="name">The name of the <see cref="T:DigitalRune.Diagnostics.ProfilerData"/>.</param>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.Stop(System.String)">
            <summary>
            Stops time measurement for the <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> with the given name and records
            the elapsed time in seconds.
            </summary>
            <param name="name">The name of the <see cref="T:DigitalRune.Diagnostics.ProfilerData"/>.</param>
            <remarks>
            This method calls <see cref="M:DigitalRune.Diagnostics.Profiler.AddValue(System.String,System.Double)"/> with the elapsed time in seconds.
            </remarks>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.AddValue(System.String,System.Double)">
            <summary>
            Adds the value to the <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> with the given name.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.SetFormat(System.String,System.Double,System.String)">
            <summary>
            Sets the formatting data for <see cref="T:DigitalRune.Diagnostics.ProfilerData"/>.
            </summary>
            <param name="name">The name of the <see cref="T:DigitalRune.Diagnostics.ProfilerData"/>.</param>
            <param name="scale">The scale.</param>
            <param name="description">The description.</param>
            <remarks>
            <para>
            This method allows to specify additional data that is used in the <see cref="M:DigitalRune.Diagnostics.Profiler.DumpAll"/> and 
            <see cref="M:DigitalRune.Diagnostics.Profiler.Dump"/> methods.
            </para>
            <para>
            All <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> instances with the same name use the same formatting data
            (across threads). The data values are multiplied with the <paramref name="scale"/> and the
            description is added to the dump output. 
            </para>
            </remarks>
            <example>
            Here, the profiler data of the method "Foo" is scaled, so that the values are in µs. A
            description is set so that the user knows the unit of the displayed values.
            <code lang="csharp">
            <![CDATA[
            Profiler.SetFormat("Foo", 1e6f, "[µs]");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.DumpAll">
            <summary>
            Returns a string that contains all collected profiler data (for all threads). 
            </summary>
            <returns>
            A string containing all collected profiler data (for all threads). The string contains a
            table for each thread.
            </returns>
            <remarks>
            <para>
            <strong>Thread-Safety:</strong> This method is not thread-safe and must only be called when
            it is assured that no other thread adds profiler data.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.Dump">
            <overloads>
            <summary>
            Returns a string containing profiler data.
            </summary>
            </overloads>
            
            <summary>
            Returns a string that contains a table with all <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> instances for the
            current thread.
            </summary>
            <returns>
            A string containing a table with all profiler data values for the current thread.
            </returns>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.Dump(System.Threading.Thread)">
            <summary>
            Returns a string that contains a table with all <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> instances for the
            given thread.
            (Not available on these platforms: WinRT)
            </summary>
            <param name="thread">The thread.</param>
            <returns>
            A string containing a table with all profiler data values for the given thread.
            </returns>
            <remarks>
            <para>
            <strong>Thread-Safety:</strong> This method is not thread-safe and must only be called when 
            it is assured that the given <paramref name="thread"/> does not add new profiler data.
            </para>
            <para>
            This method is not available on the following platforms: WinRT
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Diagnostics.Profiler.Dump(System.Int32)">
            <summary>
            Returns a string that contains a table with all <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> instances for the
            given thread.
            </summary>
            <param name="managedThreadId">The managed thread ID.</param>
            <returns>
            A string containing a table with all profiler data values for the given thread.
            </returns>
            <remarks>
            <para>
            <strong>Thread-Safety:</strong> This method is not thread-safe and must only be called when
            it is assured that the thread with the given <paramref name="managedThreadId"/> does not add 
            new profiler data.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Diagnostics.ProfilerData">
            <summary>
            Stores profiler data.
            </summary>
            <remarks>
            Profiler data is automatically created when the profiler methods <see cref="M:DigitalRune.Diagnostics.Profiler.Start(System.String)"/> 
            or <see cref="M:DigitalRune.Diagnostics.Profiler.AddValue(System.String,System.Double)"/> are used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Diagnostics.ProfilerData.Name">
            <summary>
            Gets the name of the profiler data.
            </summary>
            <value>The name of the profiler data.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.ProfilerData.Count">
            <summary>
            Gets the number of measured values.
            </summary>
            <value>The number of measured values.</value>
            <remarks>
            The <see cref="P:DigitalRune.Diagnostics.ProfilerData.Count"/> is incremented when <see cref="M:DigitalRune.Diagnostics.Profiler.Stop(System.String)"/> or 
            <see cref="M:DigitalRune.Diagnostics.Profiler.AddValue(System.String,System.Double)"/> are called.
            </remarks>
        </member>
        <member name="P:DigitalRune.Diagnostics.ProfilerData.Sum">
            <summary>
            Gets the sum of all measured values.
            </summary>
            <value>The sum.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.ProfilerData.Minimum">
            <summary>
            Gets the minimum of all measured values.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.ProfilerData.Maximum">
            <summary>
            Gets the maximum of all measured values.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.ProfilerData.Average">
            <summary>
            Gets the average (arithmetic mean) of all measured values.
            </summary>
            <value>The average (arithmetic mean).</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.ProfilerData.Last">
            <summary>
            Gets the last value that was measured.
            </summary>
            <value>The last value that was measured.</value>
        </member>
        <member name="M:DigitalRune.Diagnostics.ProfilerData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Diagnostics.Profiler"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:DigitalRune.Diagnostics.ProfilerDataCollection">
            <summary>
            Stores a collection of <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> instances for one thread.
            </summary>
            <remarks>
            <see cref="T:DigitalRune.Diagnostics.Profiler"/> can be used to profile threaded applications. 
            <see cref="T:DigitalRune.Diagnostics.ProfilerDataCollection"/> stores all <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> instances that were
            created by one specific thread.
            </remarks>
        </member>
        <member name="P:DigitalRune.Diagnostics.ProfilerDataCollection.ThreadName">
            <summary>
            Gets the name of the thread. 
            </summary>
            <value>The name of the thread.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.ProfilerDataCollection.ThreadId">
            <summary>
            Gets the thread ID.
            </summary>
            <value>The thread ID.</value>
        </member>
        <member name="M:DigitalRune.Diagnostics.ProfilerDataCollection.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Diagnostics.ProfilerDataCollection" /> class.
            </summary>
            <param name="name">The thread name.</param>
            <param name="managedThreadId">The managed thread ID.</param>
        </member>
        <member name="M:DigitalRune.Diagnostics.ProfilerDataCollection.Reset">
            <summary>
            Resets all <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> instances. 
            </summary>
        </member>
        <member name="M:DigitalRune.Diagnostics.ProfilerDataCollection.Dump">
            <summary>
            Returns a string that contains a table with all <see cref="T:DigitalRune.Diagnostics.ProfilerData"/> instances.
            </summary>
            <returns>A string containing a table with all profiler data values.</returns>
        </member>
        <member name="T:DigitalRune.Diagnostics.ProfilerDataFormat">
            <summary>
            Provides formatting data for <see cref="T:DigitalRune.Diagnostics.ProfilerData"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Diagnostics.ProfilerDataFormat.Default">
            <summary>
            The default data format that can be used if the user has not specified a custom format.
            </summary>
        </member>
        <member name="P:DigitalRune.Diagnostics.ProfilerDataFormat.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:DigitalRune.Diagnostics.ProfilerDataFormat.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="M:DigitalRune.Diagnostics.ProfilerDataFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Diagnostics.ProfilerDataFormat"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Diagnostics.Stopwatch">
            <summary>
            Wraps the <strong>Stopwatch</strong> class for use in a portable class library profile which 
            does not support the normal .NET stopwatch.
            </summary>
        </member>
        <member name="P:DigitalRune.Diagnostics.Stopwatch.Elapsed">
            <summary>
            Gets the total elapsed time measured by the current instance.
            </summary>
            <value>
            A read-only <see cref="T:System.TimeSpan"/> representing the total elapsed time measured by the 
            current instance. 
            </value>
        </member>
        <member name="P:DigitalRune.Diagnostics.Stopwatch.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running.
            </summary>
            <value>
            <c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DigitalRune.Diagnostics.Stopwatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Diagnostics.Stopwatch"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Diagnostics.Stopwatch.Start">
            <summary>
            Starts, or resumes, measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="M:DigitalRune.Diagnostics.Stopwatch.StartNew">
            <summary>
            Initializes a new <see cref="T:DigitalRune.Diagnostics.Stopwatch"/> instance, sets the elapsed time property to zero, 
            and starts measuring elapsed time.
            </summary>
            <returns>
            A <see cref="T:DigitalRune.Diagnostics.Stopwatch"/> that has just begun measuring elapsed time. 
            </returns>
        </member>
        <member name="M:DigitalRune.Diagnostics.Stopwatch.Stop">
            <summary>
            Stops measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="M:DigitalRune.Diagnostics.Stopwatch.Reset">
            <summary>
            Stops time interval measurement and resets the elapsed time to zero.
            </summary>
        </member>
        <member name="T:DigitalRune.EnumHelper">
            <summary>
            Auxiliary methods for enumerations.
            </summary>
        </member>
        <member name="M:DigitalRune.EnumHelper.GetValues(System.Type)">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>
            An array of the enumeration values in <paramref name="enumType"/>. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="enumType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="enumType"/> is not an <see cref="T:System.Enum"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.EnumHelper.TryParse``1(System.String,System.Boolean,``0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated 
            constants to an equivalent enumerated object.
            </summary>
            <typeparam name="T">The type of enumeration.</typeparam>
            <param name="text">The string representation of the name or numeric value.</param>
            <param name="ignoreCase">
            If set to <see langword="true"/> ignore case; otherwise, regard case.
            </param>
            <param name="value">The converted enumeration value.</param>
            <returns>
            <see langword="true"/> if the string was converted successfully; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Global">
            <exclude/>
        </member>
        <member name="P:DigitalRune.Global.ValidationLevel">
            <inheritdoc cref="P:DigitalRune.GlobalSettings.ValidationLevel"/>
        </member>
        <member name="P:DigitalRune.Global.PlatformID">
            <inheritdoc cref="P:DigitalRune.GlobalSettings.PlatformID"/>
        </member>
        <member name="T:DigitalRune.GlobalSettings">
            <summary>
            Defines global settings and information for all DigitalRune libraries.
            </summary>
        </member>
        <member name="P:DigitalRune.GlobalSettings.ValidationLevel">
            <summary>
            Gets or sets the validation level for all DigitalRune libraries, used to enable additional
            input validation and other checks.
            </summary>
            <value>
            The validation level for all DigitalRune libraries.
            </value>
            <remarks>
            <para>
            The default validation level for release builds is 0. Setting a validation level greater
            than 0, enables additional checks in the DigitalRune libraries, e.g. more detailed input
            validation. These checks are usually turned off (using <see cref="P:DigitalRune.GlobalSettings.ValidationLevel"/> = 0)
            to avoid a performance impact in release builds. During development and for debugging, 
            validation can be enabled. Set <see cref="P:DigitalRune.GlobalSettings.ValidationLevel"/> to 0xff (=255) to enable
            all checks which are relevant for DigitalRune customers. Validation levels > 255 are 
            reserved for internal development.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.GlobalSettings.PlatformID">
            <summary>
            Gets the platform for which this library was built.
            </summary>
            <value>The platform for which this library was built.</value>
        </member>
        <member name="T:DigitalRune.INamedObject">
            <summary>
            Represents an objects with a (unique) name.
            </summary>
        </member>
        <member name="P:DigitalRune.INamedObject.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name of the object.</value>
        </member>
        <member name="T:DigitalRune.Ionic.Crc.CRC32">
            <summary>
              Computes a CRC-32. The CRC-32 algorithm is parameterized - you
              can set the polynomial and enable or disable bit
              reversal. This can be used for GZIP, BZip2, or ZIP.
            </summary>
            <remarks>
              This type is used internally by DotNetZip; it is generally not used
              directly by applications wishing to create, read, or manipulate zip
              archive files.
            </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Crc.CRC32.TotalBytesRead">
            <summary>
              Indicates the total number of bytes applied to the CRC.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Crc.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
              Get the CRC32 for the given (word,byte) combo.  This is a
              computation defined by PKzip for PKZIP 2.0 (weak) encryption.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CRC32.UpdateCRC(System.Byte)">
            <summary>
              Process one byte in the CRC.
            </summary>
            <param name = "b">the byte to include into the CRC .  </param>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CRC32.UpdateCRC(System.Byte,System.Int32)">
            <summary>
              Process a run of N identical bytes into the CRC.
            </summary>
            <remarks>
              <para>
                This method serves as an optimization for updating the CRC when a
                run of identical bytes is found. Rather than passing in a buffer of
                length n, containing all identical bytes b, this method accepts the
                byte value and the length of the (virtual) buffer - the length of
                the run.
              </para>
            </remarks>
            <param name = "b">the byte to include into the CRC.  </param>
            <param name = "n">the number of times that byte should be repeated. </param>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CRC32.Combine(System.Int32,System.Int32)">
            <summary>
              Combines the given CRC32 value with the current running total.
            </summary>
            <remarks>
              This is useful when using a divide-and-conquer approach to
              calculating a CRC.  Multiple threads can each calculate a
              CRC32 on a segment of the data, and then combine the
              individual CRC32 values at the end.
            </remarks>
            <param name="crc">the crc value to be combined with this one</param>
            <param name="length">the length of data the CRC value was calculated on</param>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CRC32.#ctor">
            <summary>
              Create an instance of the CRC32 class using the default settings: no
              bit reversal, and a polynomial of 0xEDB88320.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CRC32.#ctor(System.Boolean)">
            <summary>
              Create an instance of the CRC32 class, specifying whether to reverse
              data bits or not.
            </summary>
            <param name='reverseBits'>
              specify true if the instance should reverse data bits.
            </param>
            <remarks>
              <para>
                In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                want a CRC32 with compatibility with BZip2, you should pass true
                here. In the CRC-32 used by GZIP and PKZIP, the bits are not
                reversed; Therefore if you want a CRC32 with compatibility with
                those, you should pass false.
              </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CRC32.#ctor(System.Int32,System.Boolean)">
             <summary>
               Create an instance of the CRC32 class, specifying the polynomial and
               whether to reverse data bits or not.
             </summary>
             <param name='polynomial'>
               The polynomial to use for the CRC, expressed in the reversed (LSB)
               format: the highest ordered bit in the polynomial value is the
               coefficient of the 0th power; the second-highest order bit is the
               coefficient of the 1 power, and so on. Expressed this way, the
               polynomial for the CRC-32C used in IEEE 802.3, is 0xEDB88320.
             </param>
             <param name='reverseBits'>
               specify true if the instance should reverse data bits.
             </param>
            
             <remarks>
               <para>
                 In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                 want a CRC32 with compatibility with BZip2, you should pass true
                 here for the <c>reverseBits</c> parameter. In the CRC-32 used by
                 GZIP and PKZIP, the bits are not reversed; Therefore if you want a
                 CRC32 with compatibility with those, you should pass false for the
                 <c>reverseBits</c> parameter.
               </para>
             </remarks>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CRC32.Reset">
            <summary>
              Reset the CRC-32 class - clear the CRC "remainder register."
            </summary>
            <remarks>
              <para>
                Use this when employing a single instance of this class to compute
                multiple, distinct CRCs on multiple, distinct data blocks.
              </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Ionic.Crc.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read,
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
            
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().  The stream uses the default CRC32
                algorithm, which implies a polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              The constructor allows the caller to specify how to handle the
              underlying stream at close.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close().
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean,DigitalRune.Ionic.Crc.CRC32)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close(), and the CRC32 instance to use.
            </summary>
            <remarks>
              <para>
                The stream uses the specified CRC32 instance, which allows the
                application to specify how the CRC gets calculated.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
            <param name="crc32">the CRC32 instance to use to calculate the CRC32</param>
        </member>
        <member name="P:DigitalRune.Ionic.Crc.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
               Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
               This is either the total number of bytes read, or the total number of
               bytes written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Crc.CrcCalculatorStream.Crc">
            <summary>
              Provides the current CRC for all blocks slurped in.
            </summary>
            <remarks>
              <para>
                The running total of the CRC is kept as data is written or read
                through the stream.  read this property after all reads or writes to
                get an accurate CRC for the entire stream.
              </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Crc.CrcCalculatorStream.LeaveOpen">
            <summary>
              Indicates whether the underlying stream will be left open when the
              <c>CrcCalculatorStream</c> is Closed.
            </summary>
            <remarks>
              <para>
                Set this at any point before calling <see cref="M:System.IDisposable.Dispose"/>.
              </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="P:DigitalRune.Ionic.Crc.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Crc.CrcCalculatorStream.CanSeek">
            <summary>
              Indicates whether the stream supports seeking.
            </summary>
            <remarks>
              <para>
                Always returns false.
              </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Crc.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Crc.CrcCalculatorStream.Length">
            <summary>
              Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Crc.CrcCalculatorStream.Position">
            <summary>
              The getter for this property returns the total bytes read.
              If you use the setter, it will throw
            <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking is not supported on this stream. This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="M:DigitalRune.Ionic.Crc.CrcCalculatorStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the 
            <see cref="T:DigitalRune.Ionic.Crc.CrcCalculatorStream"/> class and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:DigitalRune.Ionic.Encoding.Iso8859Dash1Encoding">
            <summary>
            Provides a text encoder for the iso-8859-1 encoding, aka Latin1 encoding,
            for platforms that do not support it, for example on Silverlight or some
            Compact Framework platforms.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Encoding.Iso8859Dash1Encoding.WebName">
            <summary>
            Gets the name registered with the
            Internet Assigned Numbers Authority (IANA) for the current encoding.
            </summary>
            <returns>
            Always returns "iso-8859-1".
            </returns>
        </member>
        <member name="M:DigitalRune.Ionic.Encoding.Iso8859Dash1Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a set of characters from a character array into
            a byte array.
            </summary>
            <returns>
            The actual number of bytes written into <paramref name="bytes"/>.
            </returns>
            <param name="chars">The character array containing the set of characters to encode.
            </param><param name="start">The index of the first character to encode.
            </param><param name="count">The number of characters to encode.
            </param><param name="bytes">The byte array to contain the resulting sequence of bytes.
            </param><param name="byteIndex">The index at which to start writing the resulting sequence of bytes.
            </param>
        </member>
        <member name="M:DigitalRune.Ionic.Encoding.Iso8859Dash1Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Decodes a sequence of bytes from the specified byte array into the specified character array.
            </summary>
            <returns>
            The actual number of characters written into <paramref name="chars"/>.
            </returns>
            <param name="bytes">The byte array containing the sequence of bytes to decode.
            </param><param name="start">The index of the first byte to decode.
            </param><param name="count">The number of bytes to decode.
            </param><param name="chars">The character array to contain the resulting set of characters.
            </param><param name="charIndex">The index at which to start writing the resulting set of characters.
            </param>
        </member>
        <member name="M:DigitalRune.Ionic.Encoding.Iso8859Dash1Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of bytes produced by encoding a set of characters
            from the specified character array.
            </summary>
            <returns>
            The number of bytes produced by encoding the specified characters. This class
            alwas returns the value of <paramref name="count"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Ionic.Encoding.Iso8859Dash1Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the number of characters produced by decoding a sequence
            of bytes from the specified byte array.
            </summary>
            <returns>
            The number of characters produced by decoding the specified sequence of bytes. This class
            alwas returns the value of <paramref name="count"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Ionic.Encoding.Iso8859Dash1Encoding.GetMaxByteCount(System.Int32)">
            <summary>
            Calculates the maximum number of bytes produced by encoding the specified number of characters.
            </summary>
            <returns>
            The maximum number of bytes produced by encoding the specified number of characters. This
            class alwas returns the value of <paramref name="charCount"/>.
            </returns>
            <param name="charCount">The number of characters to encode.
            </param>
        </member>
        <member name="M:DigitalRune.Ionic.Encoding.Iso8859Dash1Encoding.GetMaxCharCount(System.Int32)">
            <summary>
            Calculates the maximum number of characters produced by decoding the specified number of bytes.
            </summary>
            <returns>
            The maximum number of characters produced by decoding the specified number of bytes. This class
            alwas returns the value of <paramref name="byteCount"/>.
            </returns>
            <param name="byteCount">The number of bytes to decode.</param>
        </member>
        <member name="P:DigitalRune.Ionic.Encoding.Iso8859Dash1Encoding.CharacterCount">
            <summary>
            Gets the number of characters that are supported by this encoding.
            This property returns a maximum value of 256, as the encoding class
            only supports single byte encodings (1 byte == 256 possible values).
            </summary>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.EncryptionAlgorithm">
             <summary>
             An enum that provides the various encryption algorithms supported by this
             library.
             </summary>
            
             <remarks>
            
             <para>
               <c>PkzipWeak</c> implies the use of Zip 2.0 encryption, which is known to be
               weak and subvertible.
             </para>
            
             <para>
               A note on interoperability: Values of <c>PkzipWeak</c> and <c>None</c> are
               specified in <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's zip
               specification</see>, and are considered to be "standard".  Zip archives
               produced using these options will be interoperable with many other zip tools
               and libraries, including Windows Explorer.
             </para>
            
             <para>
               Values of <c>WinZipAes128</c> and <c>WinZipAes256</c> are not part of the Zip
               specification, but rather imply the use of a vendor-specific extension from
               WinZip. If you want to produce interoperable Zip archives, do not use these
               values.  For example, if you produce a zip archive using WinZipAes256, you
               will be able to open it in Windows Explorer on Windows XP and Vista, but you
               will not be able to extract entries; trying this will lead to an "unspecified
               error". For this reason, some people have said that a zip archive that uses
               WinZip's AES encryption is not actually a zip archive at all.  A zip archive
               produced this way will be readable with the WinZip tool (Version 11 and
               beyond).
             </para>
            
             <para>
               There are other third-party tools and libraries, both commercial and
               otherwise, that support WinZip's AES encryption. These will be able to read
               AES-encrypted zip archives produced by DotNetZip, and conversely applications
               that use DotNetZip to read zip archives will be able to read AES-encrypted
               archives produced by those tools or libraries.  Consult the documentation for
               those other tools and libraries to find out if WinZip's AES encryption is
               supported.
             </para>
            
             <para>
               In case you care: According to <see
               href="http://www.winzip.com/aes_info.htm">the WinZip specification</see>, the
               actual AES key used is derived from the <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.Password"/> via an
               algorithm that complies with <see
               href="http://www.ietf.org/rfc/rfc2898.txt">RFC 2898</see>, using an iteration
               count of 1000.  The algorithm is sometimes referred to as PBKDF2, which stands
               for "Password Based Key Derivation Function #2".
             </para>
            
             <para>
               A word about password strength and length: The AES encryption technology is
               very good, but any system is only as secure as the weakest link.  If you want
               to secure your data, be sure to use a password that is hard to guess.  To make
               it harder to guess (increase its "entropy"), you should make it longer.  If
               you use normal characters from an ASCII keyboard, a password of length 20 will
               be strong enough that it will be impossible to guess.  For more information on
               that, I'd encourage you to read <see
               href="http://www.redkestrel.co.uk/Articles/RandomPasswordStrength.html">this
               article.</see>
             </para>
            
             <para>
               The WinZip AES algorithms are not supported with the version of DotNetZip that
               runs on the .NET Compact Framework.  This is because .NET CF lacks the
               HMACSHA1 class that is required for producing the archive.
             </para>
             </remarks>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption at all.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.EncryptionAlgorithm.PkzipWeak">
            <summary>
            Traditional or Classic pkzip encryption.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.EncryptionAlgorithm.WinZipAes128">
            <summary>
            WinZip AES encryption (128 key bits).
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.EncryptionAlgorithm.WinZipAes256">
            <summary>
            WinZip AES encryption (256 key bits).
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.EncryptionAlgorithm.Unsupported">
            <summary>
            An encryption algorithm that is not supported by DotNetZip.
            </summary>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.BadPasswordException">
            <summary>
            Issued when an <c>ZipEntry.ExtractWithPassword()</c> method is invoked
            with an incorrect password.
            </summary>
            <exclude />
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadPasswordException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadPasswordException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.BadReadException">
            <summary>
            Indicates that a read was attempted on a stream, and bad or incomplete data was
            received.
            </summary>
            <exclude />
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadReadException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadReadException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadReadException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.BadCrcException">
            <summary>
            Issued when an CRC check fails upon extracting an entry from a zip archive.
            </summary>
            <exclude />
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadCrcException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadCrcException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadCrcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.BadStateException">
            <summary>
            Indicates that an operation was attempted on a ZipFile which was not possible
            given the state of the instance. For example, if you call <c>Save()</c> on a ZipFile
            which has no filename set, you can get this exception.
            </summary>
            <exclude />
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadStateException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadStateException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadStateException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.BadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.ZipException">
            <summary>
            Base class for all exceptions defined by and throw by the Zip library.
            </summary>
            <exclude />
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.SharedUtilities">
            <summary>
            Collects general purpose utility methods.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.SharedUtilities.NormalizePathForUseInZipFile(System.String)">
            <summary>
            Utility routine for transforming path names from filesystem format (on Windows that means backslashes) to
            a format suitable for use within zipfiles. This means trimming the volume letter and colon (if any) And
            swapping backslashes for forward slashes.
            </summary>
            <param name="pathName">source path.</param>
            <returns>transformed path</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.SharedUtilities.FindSignature(System.IO.Stream,System.Int32)">
             <summary>
               Finds a signature in the zip stream. This is useful for finding
               the end of a zip entry, for example, or the beginning of the next ZipEntry.
             </summary>
            
             <remarks>
               <para>
                 Scans through 64k at a time.
               </para>
            
               <para>
                 If the method fails to find the requested signature, the stream Position
                 after completion of this method is unchanged. If the method succeeds in
                 finding the requested signature, the stream position after completion is
                 direct AFTER the signature found in the stream.
               </para>
             </remarks>
            
             <param name="stream">The stream to search</param>
             <param name="SignatureToFind">The 4-byte signature to find</param>
             <returns>The number of bytes read</returns>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.WinZipAesCrypto">
             <summary>
               This is a helper class supporting WinZip AES encryption.
               This class is intended for use only by the DotNetZip library.
             </summary>
            
             <remarks>
               Most uses of the DotNetZip library will not involve direct calls into
               the WinZipAesCrypto class.  Instead, the WinZipAesCrypto class is
               instantiated and used by the ZipEntry() class when WinZip AES
               encryption or decryption on an entry is employed.
             </remarks>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.WinZipAesCipherStream">
             <summary>
               A stream that decrypts as it reads.  The
               Crypto is AES in CTR (counter) mode, which is compatible with the AES
               encryption employed by WinZip 12.0.
             </summary>
             <remarks>
               <para>
                 The AES/CTR encryption protocol used by WinZip works like this:
            
                   - start with a counter, initialized to zero.
            
                   - to encrypt, take the data by 16-byte blocks. For each block:
                     - apply the transform to the counter
                     - increement the counter
                     - XOR the result of the transform with the plaintext to
                       get the ciphertext.
                     - compute the mac on the encrypted bytes
                   - when finished with all blocks, store the computed MAC.
            
                   - to decrypt, take the data by 16-byte blocks. For each block:
                     - compute the mac on the encrypted bytes,
                     - apply the transform to the counter
                     - increement the counter
                     - XOR the result of the transform with the ciphertext to
                       get the plaintext.
                   - when finished with all blocks, compare the computed MAC against
                     the stored MAC
            
               </para>
             </remarks>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.WinZipAesCipherStream.#ctor(System.IO.Stream,DigitalRune.Ionic.Zip.WinZipAesCrypto,System.Int64)">
            <summary>
            The constructor.
            </summary>
            <param name="s">The underlying stream</param>
            <param name="cryptoParams">The pre-initialized WinZipAesCrypto object.</param>
            <param name="length">The maximum number of bytes to read from the stream.</param>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.WinZipAesCipherStream.FinalAuthentication">
            <summary>
            Returns the final HMAC-SHA1-80 for the data that was encrypted.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.WinZipAesCipherStream.Close">
            <summary>
              Close the stream.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.WinZipAesCipherStream.CanRead">
            <summary>
            Returns true if the stream can be read.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.WinZipAesCipherStream.CanSeek">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.WinZipAesCipherStream.CanWrite">
            <summary>
            Returns true if the CryptoMode is Encrypt.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.WinZipAesCipherStream.Flush">
            <summary>
            Flush the content in the stream.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.WinZipAesCipherStream.Length">
            <summary>
            Getting this property throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.WinZipAesCipherStream.Position">
            <summary>
            Getting or Setting this property throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.WinZipAesCipherStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.WinZipAesCipherStream.SetLength(System.Int64)">
            <summary>
            This method throws a NotImplementedException.
            </summary>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.ZipCrypto">
             <summary>
               This class implements the "traditional" or "classic" PKZip encryption,
               which today is considered to be weak. On the other hand it is
               ubiquitous. This class is intended for use only by the DotNetZip
               library.
             </summary>
            
             <remarks>
               Most uses of the DotNetZip library will not involve direct calls into
               the ZipCrypto class.  Instead, the ZipCrypto class is instantiated and
               used by the ZipEntry() class when encryption or decryption on an entry
               is employed.  If for some reason you really wanted to use a weak
               encryption algorithm in some other application, you might use this
               library.  But you would be much better off using one of the built-in
               strong encryption libraries in the .NET Framework, like the AES
               algorithm or SHA.
             </remarks>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipCrypto.#ctor">
             <summary>
               The default constructor for ZipCrypto.
             </summary>
            
             <remarks>
               This class is intended for internal use by the library only. It's
               probably not useful to you. Seriously.  Stop reading this
               documentation.  It's a waste of your time.  Go do something else.
               Check the football scores. Go get an ice cream with a friend.
               Seriously.
             </remarks>
            
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipCrypto.MagicByte">
            <summary>
            From AppNote.txt:
            unsigned char decrypt_byte()
                local unsigned short temp
                temp :=- Key(2) | 2
                decrypt_byte := (temp * (temp ^ 1)) bitshift-right 8
            end decrypt_byte
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipCrypto.DecryptMessage(System.Byte[],System.Int32)">
             <summary>
               Call this method on a cipher text to render the plaintext. You must
               first initialize the cipher with a call to InitCipher.
             </summary>
            
             <example>
               <code>
                 var cipher = new ZipCrypto();
                 cipher.InitCipher(Password);
                 // Decrypt the header.  This has a side effect of "further initializing the
                 // encryption keys" in the traditional zip encryption.
                 byte[] DecryptedMessage = cipher.DecryptMessage(EncryptedMessage);
               </code>
             </example>
            
             <param name="cipherText">The encrypted buffer.</param>
             <param name="length">
               The number of bytes to encrypt.
               Should be less than or equal to CipherText.Length.
             </param>
            
             <returns>The plaintext.</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipCrypto.EncryptMessage(System.Byte[],System.Int32)">
             <summary>
               This is the converse of DecryptMessage.  It encrypts the plaintext
               and produces a ciphertext.
             </summary>
            
             <param name="plainText">The plain text buffer.</param>
            
             <param name="length">
               The number of bytes to encrypt.
               Should be less than or equal to plainText.Length.
             </param>
            
             <returns>The ciphertext.</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipCrypto.InitCipher(System.String)">
             <summary>
               This initializes the cipher with the given password.
               See AppNote.txt for details.
             </summary>
            
             <param name="passphrase">
               The passphrase for encrypting or decrypting with this cipher.
             </param>
            
             <remarks>
             <code>
             Step 1 - Initializing the encryption keys
             -----------------------------------------
             Start with these keys:
             Key(0) := 305419896 (0x12345678)
             Key(1) := 591751049 (0x23456789)
             Key(2) := 878082192 (0x34567890)
            
             Then, initialize the keys with a password:
            
             loop for i from 0 to length(password)-1
                 update_keys(password(i))
             end loop
            
             Where update_keys() is defined as:
            
             update_keys(char):
               Key(0) := crc32(key(0),char)
               Key(1) := Key(1) + (Key(0) bitwiseAND 000000ffH)
               Key(1) := Key(1) * 134775813 + 1
               Key(2) := crc32(key(2),key(1) rightshift 24)
             end update_keys
            
             Where crc32(old_crc,char) is a routine that given a CRC value and a
             character, returns an updated CRC value after applying the CRC-32
             algorithm described elsewhere in this document.
            
             </code>
            
             <para>
               After the keys are initialized, then you can use the cipher to
               encrypt the plaintext.
             </para>
            
             <para>
               Essentially we encrypt the password with the keys, then discard the
               ciphertext for the password. This initializes the keys for later use.
             </para>
            
             </remarks>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.ZipCipherStream">
            <summary>
              A Stream for reading and concurrently decrypting data from a zip file,
              or for writing and concurrently encrypting data to a zip file.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipCipherStream.#ctor(System.IO.Stream,DigitalRune.Ionic.Zip.ZipCrypto)">
            <summary>  The constructor. </summary>
            <param name="s">The underlying stream</param>
            <param name="cipher">The pre-initialized ZipCrypto object.</param>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.ZipEntry">
            <summary>
            Represents a single entry in a ZipFile. Typically, applications get a ZipEntry
            by enumerating the entries within a ZipFile, or by adding an entry to a ZipFile.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.AttributesIndicateDirectory">
            <summary>
            True if the referenced entry is a directory.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipEntry.ReadDirEntry(DigitalRune.Ionic.Zip.ZipFile,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
               Reads one entry from the zip directory structure in the zip file.
             </summary>
            
             <param name="zf">
               The zipfile for which a directory entry will be read.  From this param, the
               method gets the ReadStream and the expected text encoding
               (ProvisionalAlternateEncoding) which is used if the entry is not marked
               UTF-8.
             </param>
            
             <param name="previouslySeen">
               a list of previously seen entry names; used to prevent duplicates.
             </param>
            
             <returns>the entry read from the archive.</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipEntry.IsNotValidZipDirEntrySig(System.Int32)">
            <summary>
            Returns true if the passed-in value is a valid signature for a ZipDirEntry.
            </summary>
            <param name="signature">the candidate 4-byte signature value.</param>
            <returns>true, if the signature is valid according to the PKWare spec.</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipEntry.Extract(System.IO.Stream)">
             <summary>
               Extracts the entry to the specified stream.
             </summary>
            
             <remarks>
             <para>
               The caller can specify any write-able stream, for example a <see
               cref="T:System.IO.FileStream"/>, a <see
               cref="T:System.IO.MemoryStream"/>, or ASP.NET's
               <c>Response.OutputStream</c>.  The content will be decrypted and
               decompressed as necessary. If the entry is encrypted and no password
               is provided, this method will throw.
             </para>
             <para>
               The position on the stream is not reset by this method before it extracts.
               You may want to call stream.Seek() before calling ZipEntry.Extract().
             </para>
             </remarks>
            
             <param name="stream">
               the stream to which the entry should be extracted.
             </param>
            
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipEntry.ExtractWithPassword(System.IO.Stream,System.String)">
             <summary>
               Extracts the entry to the specified stream, using the specified
               Password.  For example, the caller could extract to Console.Out, or
               to a MemoryStream.
             </summary>
            
             <remarks>
             <para>
               The caller can specify any write-able stream, for example a <see
               cref="T:System.IO.FileStream"/>, a <see
               cref="T:System.IO.MemoryStream"/>, or ASP.NET's
               <c>Response.OutputStream</c>.  The content will be decrypted and
               decompressed as necessary. If the entry is encrypted and no password
               is provided, this method will throw.
             </para>
             <para>
               The position on the stream is not reset by this method before it extracts.
               You may want to call stream.Seek() before calling ZipEntry.Extract().
             </para>
             </remarks>
            
            
             <param name="stream">
               the stream to which the entry should be extracted.
             </param>
             <param name="password">
               The password to use for decrypting the entry.
             </param>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipEntry.OpenReader">
             <summary>
               Opens a readable stream corresponding to the zip entry in the
               archive.  The stream decompresses and decrypts as necessary, as it
               is read.
             </summary>
            
             <remarks>
            
             <para>
               DotNetZip offers a variety of ways to extract entries from a zip
               file.  This method allows an application to extract an entry by
               reading a <see cref="T:System.IO.Stream"/>.
             </para>
            
             <para>
               The return value is of type <see
               cref="T:DigitalRune.Ionic.Crc.CrcCalculatorStream"/>.  Use it as you would any
               stream for reading.  When an application calls <see
               cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> on that stream, it will
               receive data from the zip entry that is decrypted and decompressed
               as necessary.
             </para>
            
             <para>
               <c>CrcCalculatorStream</c> adds one additional feature: it keeps a
               CRC32 checksum on the bytes of the stream as it is read.  The CRC
               value is available in the <see
               cref="P:DigitalRune.Ionic.Crc.CrcCalculatorStream.Crc"/> property on the
               <c>CrcCalculatorStream</c>.  When the read is complete, your
               application
               <em>should</em> check this CRC against the <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.Crc"/>
               property on the <c>ZipEntry</c> to validate the content of the
               ZipEntry. You don't have to validate the entry using the CRC, but
               you should, to verify integrity. Check the example for how to do
               this.
             </para>
            
             <para>
               If the entry is protected with a password, then you need to provide
               a password prior to calling <see cref="M:DigitalRune.Ionic.Zip.ZipEntry.OpenReader"/>, either by
               setting the <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.Password"/> property on the entry, or the
               <see cref="P:DigitalRune.Ionic.Zip.ZipFile.Password"/> property on the <c>ZipFile</c>
               itself. Or, you can use <see cref="M:DigitalRune.Ionic.Zip.ZipEntry.OpenReader(System.String)" />, the
               overload of OpenReader that accepts a password parameter.
             </para>
            
             <para>
               If you want to extract entry data into a write-able stream that is
               already opened, like a <see cref="T:System.IO.FileStream"/>, do not
               use this method. Instead, use <see cref="M:DigitalRune.Ionic.Zip.ZipEntry.Extract(System.IO.Stream)"/>.
             </para>
            
             <para>
               Your application may use only one stream created by OpenReader() at
               a time, and you should not call other Extract methods before
               completing your reads on a stream obtained from OpenReader().  This
               is because there is really only one source stream for the compressed
               content.  A call to OpenReader() seeks in the source stream, to the
               beginning of the compressed content.  A subsequent call to
               OpenReader() on a different entry will seek to a different position
               in the source stream, as will a call to Extract() or one of its
               overloads.  This will corrupt the state for the decompressing stream
               from the original call to OpenReader().
             </para>
             </remarks>
            
             <example>
               This example shows how to open a zip archive, then read in a named
               entry via a stream. After the read loop is complete, the code
               compares the calculated during the read loop with the expected CRC
               on the <c>ZipEntry</c>, to verify the extraction.
             <code>
             using (ZipFile zip = new ZipFile(ZipFileToRead))
             {
               ZipEntry e1= zip["Elevation.mp3"];
               using (Ionic.Zlib.CrcCalculatorStream s = e1.OpenReader())
               {
                 byte[] buffer = new byte[4096];
                 int n, totalBytesRead= 0;
                 do {
                   n = s.Read(buffer,0, buffer.Length);
                   totalBytesRead+=n;
                 } while (n&gt;0);
                  if (s.Crc32 != e1.Crc32)
                   throw new Exception(string.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32));
                  if (totalBytesRead != e1.UncompressedSize)
                   throw new Exception(string.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize));
               }
             }
             </code>
             <code lang="VB">
               Using zip As New ZipFile(ZipFileToRead)
                   Dim e1 As ZipEntry = zip.Item("Elevation.mp3")
                   Using s As Ionic.Zlib.CrcCalculatorStream = e1.OpenReader
                       Dim n As Integer
                       Dim buffer As Byte() = New Byte(4096) {}
                       Dim totalBytesRead As Integer = 0
                       Do
                           n = s.Read(buffer, 0, buffer.Length)
                           totalBytesRead = (totalBytesRead + n)
                       Loop While (n &gt; 0)
                       If (s.Crc32 &lt;&gt; e1.Crc32) Then
                           Throw New Exception(String.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32))
                       End If
                       If (totalBytesRead &lt;&gt; e1.UncompressedSize) Then
                           Throw New Exception(String.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize))
                       End If
                   End Using
               End Using
             </code>
             </example>
             <seealso cref="M:DigitalRune.Ionic.Zip.ZipEntry.Extract(System.IO.Stream)"/>
             <returns>The Stream for reading.</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipEntry.OpenReader(System.String)">
             <summary>
               Opens a readable stream for an encrypted zip entry in the archive.
               The stream decompresses and decrypts as necessary, as it is read.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:DigitalRune.Ionic.Zip.ZipEntry.OpenReader"/> method for
               full details. This overload allows the application to specify a
               password for the <c>ZipEntry</c> to be read.
             </para>
             </remarks>
            
             <param name="password">The password to use for decrypting the entry.</param>
             <returns>The Stream for reading.</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipEntry.InternalExtractToStream(System.IO.Stream,System.String,DigitalRune.Ionic.Zip.ZipContainer,DigitalRune.Ionic.Zip.ZipEntrySource,System.String)">
            <summary>
            Extract to a stream
            In other words, you can extract to a stream or to a directory (filesystem), but not both!
            The Password param is required for encrypted entries.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipEntry.IsDoneWithOutputToStream">
            <summary>
            Validates that the args are consistent; returning whether the caller can return
            because it's done, or not (caller should continue)
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipEntry.ReadEntry(DigitalRune.Ionic.Zip.ZipContainer,System.Boolean)">
            <summary>
              Reads one <c>ZipEntry</c> from the given stream.  The content for
              the entry does not get decompressed or decrypted.  This method
              basically reads metadata, and seeks.
            </summary>
            <param name="zc">the ZipContainer this entry belongs to.</param>
            <param name="first">
              true of this is the first entry being read from the stream.
            </param>
            <returns>the <c>ZipEntry</c> read from the stream.</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipEntry.FindExtraFieldSegment(System.Byte[],System.Int32,System.UInt16)">
            <summary>
              Finds a particular segment in the given extra field.
              This is used when modifying a previously-generated
              extra field, in particular when removing the AES crypto
              segment in the extra field.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipEntry.ProcessExtraField(System.IO.Stream,System.Int16)">
            <summary>
              At current cursor position in the stream, read the extra
              field, and set the properties on the ZipEntry instance
              appropriately.  This can be called when processing the
              Extra field in the Central Directory, or in the local
              header.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipEntry.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            Applications should never need to call this directly.  It is exposed to
            support COM Automation environments.
            </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.LastModified">
             <summary>
               The time and date at which the file indicated by the <c>ZipEntry</c> was
               last modified.
             </summary>
            
             <remarks>
             <para>
               The DotNetZip library sets the LastModified value for an entry, equal to
               the Last Modified time of the file in the filesystem.  If an entry is
               added from a stream, the library uses <c>System.DateTime.Now</c> for this
               value, for the given entry.
             </para>
            
             <para>
               This property allows the application to retrieve and possibly set the
               LastModified value on an entry, to an arbitrary value.  <see
               cref="T:System.DateTime"/> values with a <see cref="T:System.DateTimeKind" />
               setting of <c>DateTimeKind.Unspecified</c> are taken to be expressed as
               <c>DateTimeKind.Local</c>.
             </para>
            
             <para>
               Be aware that because of the way <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWare's
               Zip specification</see> describes how times are stored in the zip file,
               the full precision of the <c>System.DateTime</c> datatype is not stored
               for the last modified time when saving zip files.  For more information on
               how times are formatted, see the PKZip specification.
             </para>
            
             <para>
               The actual last modified time of a file can be stored in multiple ways in
               the zip file, and they are not mutually exclusive:
             </para>
            
             <list type="bullet">
               <item>
                 In the so-called "DOS" format, which has a 2-second precision. Values
                 are rounded to the nearest even second. For example, if the time on the
                 file is 12:34:43, then it will be stored as 12:34:44. This first value
                 is accessible via the <c>LastModified</c> property. This value is always
                 present in the metadata for each zip entry.  In some cases the value is
                 invalid, or zero.
               </item>
            
               <item>
                 In the so-called "Windows" or "NTFS" format, as an 8-byte integer
                 quantity expressed as the number of 1/10 milliseconds (in other words
                 the number of 100 nanosecond units) since January 1, 1601 (UTC).  This
                 format is how Windows represents file times.  This time is accessible
                 via the <c>ModifiedTime</c> property.
               </item>
            
               <item>
                 In the "Unix" format, a 4-byte quantity specifying the number of seconds since
                 January 1, 1970 UTC.
               </item>
            
               <item>
                 In an older format, now deprecated but still used by some current
                 tools. This format is also a 4-byte quantity specifying the number of
                 seconds since January 1, 1970 UTC.
               </item>
            
             </list>
            
             <para>
               Zip tools and libraries will always at least handle (read or write) the
               DOS time, and may also handle the other time formats.  Keep in mind that
               while the names refer to particular operating systems, there is nothing in
               the time formats themselves that prevents their use on other operating
               systems.
             </para>
            
             <para>
               When reading ZIP files, the DotNetZip library reads the Windows-formatted
               time, if it is stored in the entry, and sets both <c>LastModified</c> and
               <c>ModifiedTime</c> to that value.
             </para>
            
             <para>
               The last modified time of the file created upon a call to
               <c>ZipEntry.Extract()</c> may be adjusted during extraction to compensate
               for differences in how the .NET Base Class Library deals with daylight
               saving time (DST) versus how the Windows filesystem deals with daylight
               saving time.  Raymond Chen <see
               href="http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx">provides
               some good context</see>.
             </para>
            
             <para>
               In a nutshell: Daylight savings time rules change regularly.  In 2007, for
               example, the inception week of DST changed.  In 1977, DST was in place all
               year round. In 1945, likewise.  And so on.  Win32 does not attempt to
               guess which time zone rules were in effect at the time in question.  It
               will render a time as "standard time" and allow the app to change to DST
               as necessary.  .NET makes a different choice.
             </para>
            
             <para>
               Compare the output of FileInfo.LastWriteTime.ToString("f") with what you
               see in the Windows Explorer property sheet for a file that was last
               written to on the other side of the DST transition. For example, suppose
               the file was last modified on October 17, 2003, during DST but DST is not
               currently in effect. Explorer's file properties reports Thursday, October
               17, 2003, 8:45:38 AM, but .NETs FileInfo reports Thursday, October 17,
               2003, 9:45 AM.
             </para>
            
             <para>
               Win32 says, "Thursday, October 17, 2002 8:45:38 AM PST". Note: Pacific
               STANDARD Time. Even though October 17 of that year occurred during Pacific
               Daylight Time, Win32 displays the time as standard time because that's
               what time it is NOW.
             </para>
            
             <para>
               .NET BCL assumes that the current DST rules were in place at the time in
               question.  So, .NET says, "Well, if the rules in effect now were also in
               effect on October 17, 2003, then that would be daylight time" so it
               displays "Thursday, October 17, 2003, 9:45 AM PDT" - daylight time.
             </para>
            
             <para>
               So .NET gives a value which is more intuitively correct, but is also
               potentially incorrect, and which is not invertible. Win32 gives a value
               which is intuitively incorrect, but is strictly correct.
             </para>
            
             <para>
               Because of this funkiness, this library adds one hour to the LastModified
               time on the extracted file, if necessary.  That is to say, if the time in
               question had occurred in what the .NET Base Class Library assumed to be
               DST. This assumption may be wrong given the constantly changing DST rules,
               but it is the best we can do.
             </para>
            
             </remarks>
            
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.ModifiedTime">
             <summary>
             Last Modified time for the file represented by the entry.
             </summary>
            
             <remarks>
            
             <para>
               This value corresponds to the "last modified" time in the NTFS file times
               as described in <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>.  When getting this property, the value may be
               different from <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.LastModified" />.  When setting the property,
               the <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.LastModified"/> property also gets set, but with a lower
               precision.
             </para>
            
             <para>
               Let me explain. It's going to take a while, so get
               comfortable. Originally, waaaaay back in 1989 when the ZIP specification
               was originally described by the esteemed Mr. Phil Katz, the dominant
               operating system of the time was MS-DOS. MSDOS stored file times with a
               2-second precision, because, c'mon, <em>who is ever going to need better
               resolution than THAT?</em> And so ZIP files, regardless of the platform on
               which the zip file was created, store file times in exactly <see
               href="http://www.vsft.com/hal/dostime.htm">the same format that DOS used
               in 1989</see>.
             </para>
            
             <para>
               Since then, the ZIP spec has evolved, but the internal format for file
               timestamps remains the same.  Despite the fact that the way times are
               stored in a zip file is rooted in DOS heritage, any program on any
               operating system can format a time in this way, and most zip tools and
               libraries DO - they round file times to the nearest even second and store
               it just like DOS did 25+ years ago.
             </para>
            
             <para>
               PKWare extended the ZIP specification to allow a zip file to store what
               are called "NTFS Times" and "Unix(tm) times" for a file.  These are the
               <em>last write</em>, <em>last access</em>, and <em>file creation</em>
               times of a particular file. These metadata are not actually specific
               to NTFS or Unix. They are tracked for each file by NTFS and by various
               Unix filesystems, but they are also tracked by other filesystems, too.
               The key point is that the times are <em>formatted in the zip file</em>
               in the same way that NTFS formats the time (ticks since win32 epoch),
               or in the same way that Unix formats the time (seconds since Unix
               epoch). As with the DOS time, any tool or library running on any
               operating system is capable of formatting a time in one of these ways
               and embedding it into the zip file.
             </para>
            
             <para>
               These extended times are higher precision quantities than the DOS time.
               As described above, the (DOS) LastModified has a precision of 2 seconds.
               The Unix time is stored with a precision of 1 second. The NTFS time is
               stored with a precision of 0.0000001 seconds. The quantities are easily
               convertible, except for the loss of precision you may incur.
             </para>
            
             <para>
               A zip archive can store the {C,A,M} times in NTFS format, in Unix format,
               or not at all.  Often a tool running on Unix or Mac will embed the times
               in Unix format (1 second precision), while WinZip running on Windows might
               embed the times in NTFS format (precision of of 0.0000001 seconds).  When
               reading a zip file with these "extended" times, in either format,
               DotNetZip represents the values with the
               <c>ModifiedTime</c>, <c>AccessedTime</c> and <c>CreationTime</c>
               properties on the <c>ZipEntry</c>.
             </para>
            
             <para>
               While any zip application or library, regardless of the platform it
               runs on, could use any of the time formats allowed by the ZIP
               specification, not all zip tools or libraries do support all these
               formats.  Storing the higher-precision times for each entry is
               optional for zip files, and many tools and libraries don't use the
               higher precision quantities at all. The old DOS time, represented by
               <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.LastModified"/>, is guaranteed to be present, though it
               sometimes unset.
             </para>
            
             <para>
               Ok, getting back to the question about how the <c>LastModified</c>
               property relates to this <c>ModifiedTime</c>
               property... <c>LastModified</c> is always set, while
               <c>ModifiedTime</c> is not. (The other times stored in the <em>NTFS
               times extension</em>, <c>CreationTime</c> and <c>AccessedTime</c> also
               may not be set on an entry that is read from an existing zip file.)
               When reading a zip file, then <c>LastModified</c> takes the DOS time
               that is stored with the file. If the DOS time has been stored as zero
               in the zipfile, then this library will use <c>DateTime.Now</c> for the
               <c>LastModified</c> value.  If the ZIP file was created by an evolved
               tool, then there will also be higher precision NTFS or Unix times in
               the zip file.  In that case, this library will read those times, and
               set <c>LastModified</c> and <c>ModifiedTime</c> to the same value, the
               one corresponding to the last write time of the file.  If there are no
               higher precision times stored for the entry, then <c>ModifiedTime</c>
               remains unset (likewise <c>AccessedTime</c> and <c>CreationTime</c>),
               and <c>LastModified</c> keeps its DOS time.
             </para>
            
             </remarks>
            
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.LastModified"/>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.AccessedTime">
            <summary>
            Last Access time for the file represented by the entry.
            </summary>
            <remarks>
            This value may or may not be meaningful.  If the <c>ZipEntry</c> was read from an existing
            Zip archive, this information may not be available. For an explanation of why, see
            <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.ModifiedTime"/>.
            </remarks>
            <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.ModifiedTime"/>
            <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.CreationTime"/>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.CreationTime">
             <summary>
             The file creation time for the file represented by the entry.
             </summary>
            
             <remarks>
             This value may or may not be meaningful.  If the <c>ZipEntry</c> was read
             from an existing zip archive, and the creation time was not set on the entry
             when the zip file was created, then this property may be meaningless. For an
             explanation of why, see <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.ModifiedTime"/>.
             </remarks>
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.ModifiedTime"/>
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.AccessedTime"/>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.Timestamp">
             <summary>
             The type of timestamp attached to the ZipEntry.
             </summary>
            
             <remarks>
             This property is valid only for a ZipEntry that was read from a zip archive.
             It indicates the type of timestamp attached to the entry.
             </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.Attributes">
             <summary>
               The file attributes for the entry.
             </summary>
            
             <remarks>
            
             <para>
               The <see cref="T:System.IO.FileAttributes">attributes</see> in NTFS include
               ReadOnly, Archive, Hidden, System, and Indexed.  When adding a
               <c>ZipEntry</c> to a ZipFile, these attributes are set implicitly when
               adding an entry from the filesystem.  When adding an entry from a stream
               or string, the Attributes are not set implicitly.  Regardless of the way
               an entry was added to a <c>ZipFile</c>, you can set the attributes
               explicitly if you like.
             </para>
            
             <para>
               When reading a <c>ZipEntry</c> from a <c>ZipFile</c>, the attributes are
               set according to the data stored in the <c>ZipFile</c>. If you extract the
               entry from the archive to a filesystem file, DotNetZip will set the
               attributes on the resulting file accordingly.
             </para>
            
             <para>
               The attributes can be set explicitly by the application.  For example the
               application may wish to set the <c>FileAttributes.ReadOnly</c> bit for all
               entries added to an archive, so that on unpack, this attribute will be set
               on the extracted file.  Any changes you make to this property are made
               permanent only when you call a <c>Save()</c> method on the <c>ZipFile</c>
               instance that contains the ZipEntry.
             </para>
            
             <para>
               For example, an application may wish to zip up a directory and set the
               ReadOnly bit on every file in the archive, so that upon later extraction,
               the resulting files will be marked as ReadOnly.  Not every extraction tool
               respects these attributes, but if you unpack with DotNetZip, as for
               example in a self-extracting archive, then the attributes will be set as
               they are stored in the <c>ZipFile</c>.
             </para>
            
             <para>
               These attributes may not be interesting or useful if the resulting archive
               is extracted on a non-Windows platform.  How these attributes get used
               upon extraction depends on the platform and tool used.
             </para>
            
             <para>
               This property is only partially supported in the Silverlight version
               of the library: applications can read attributes on entries within
               ZipFiles. But extracting entries within Silverlight will not set the
               attributes on the extracted files.
             </para>
            
             </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.FileName">
             <summary>
               The name of the file contained in the ZipEntry.
             </summary>
            
             <remarks>
             
             <para>
               When reading a zip file, this property takes the value of the entry name
               as stored in the zip file. If you extract such an entry, the extracted
               file will take the name given by this property.
             </para>
            
             <para>
               Applications can set this property when creating new zip archives or when
               reading existing archives. When setting this property, the actual value
               that is set will replace backslashes with forward slashes, in accordance
               with <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>, for compatibility with Unix(tm) and ... get
               this.... Amiga!
             </para>
            
             </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.Source">
            <summary>
            An enum indicating the source of the ZipEntry.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.VersionNeeded">
             <summary>
             The version of the zip engine needed to read the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               This is a readonly property, indicating the version of <a
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</a> that the extracting tool or library must support to
               extract the given entry.  Generally higher versions indicate newer
               features.  Older zip engines obviously won't know about new features, and
               won't be able to extract entries that depend on those newer features.
             </para>
            
             <list type="table">
             <listheader>
             <term>value</term>
             <description>Features</description>
             </listheader>
            
             <item>
             <term>20</term>
             <description>a basic Zip Entry, potentially using PKZIP encryption.
             </description>
             </item>
            
             <item>
             <term>45</term>
             <description>The ZIP64 extension is used on the entry.
             </description>
             </item>
            
             <item>
             <term>46</term>
             <description> File is compressed using BZIP2 compression*</description>
             </item>
            
             <item>
             <term>50</term>
             <description> File is encrypted using PkWare's DES, 3DES, (broken) RC2 or RC4</description>
             </item>
            
             <item>
             <term>51</term>
             <description> File is encrypted using PKWare's AES encryption or corrected RC2 encryption.</description>
             </item>
            
             <item>
             <term>52</term>
             <description> File is encrypted using corrected RC2-64 encryption**</description>
             </item>
            
             <item>
             <term>61</term>
             <description> File is encrypted using non-OAEP key wrapping***</description>
             </item>
            
             <item>
             <term>63</term>
             <description> File is compressed using LZMA, PPMd+, Blowfish, or Twofish</description>
             </item>
            
             </list>
            
             <para>
               There are other values possible, not listed here. DotNetZip supports
               regular PKZip encryption, and ZIP64 extensions.  DotNetZip cannot extract
               entries that require a zip engine higher than 45.
             </para>
            
             <para>
               This value is set upon reading an existing zip file, or after saving a zip
               archive.
             </para>
             </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.Comment">
             <summary>
             The comment attached to the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               Each entry in a zip file can optionally have a comment associated to
               it. The comment might be displayed by a zip tool during extraction, for
               example.
             </para>
            
             <para>
               By default, the <c>Comment</c> is encoded in IBM437 code page. You can
               specify an alternative with <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.AlternateEncoding"/> and
              <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.AlternateEncodingUsage"/>.
             </para>
             </remarks>
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.AlternateEncoding"/>
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.AlternateEncodingUsage"/>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.BitField">
             <summary>
               The bitfield for the entry as defined in the zip spec. You probably
               never need to look at this.
             </summary>
            
             <remarks>
             <para>
               You probably do not need to concern yourself with the contents of this
               property, but in case you do:
             </para>
            
             <list type="table">
             <listheader>
             <term>bit</term>
             <description>meaning</description>
             </listheader>
            
             <item>
             <term>0</term>
             <description>set if encryption is used.</description>
             </item>
            
             <item>
             <term>1-2</term>
             <description>
             set to determine whether normal, max, fast deflation.  DotNetZip library
             always leaves these bits unset when writing (indicating "normal"
             deflation"), but can read an entry with any value here.
             </description>
             </item>
            
             <item>
             <term>3</term>
             <description>
             Indicates that the Crc32, Compressed and Uncompressed sizes are zero in the
             local header.  This bit gets set on an entry during writing a zip file, when
             it is saved to a non-seekable output stream.
             </description>
             </item>
            
            
             <item>
             <term>4</term>
             <description>reserved for "enhanced deflating". This library doesn't do enhanced deflating.</description>
             </item>
            
             <item>
             <term>5</term>
             <description>set to indicate the zip is compressed patched data.  This library doesn't do that.</description>
             </item>
            
             <item>
             <term>6</term>
             <description>
             set if PKWare's strong encryption is used (must also set bit 1 if bit 6 is
             set). This bit is not set if WinZip's AES encryption is set.</description>
             </item>
            
             <item>
             <term>7</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>8</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>9</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>10</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>11</term>
             <description>
             Language encoding flag (EFS).  If this bit is set, the filename and comment
             fields for this file must be encoded using UTF-8. This library currently
             does not support UTF-8.
             </description>
             </item>
            
             <item>
             <term>12</term>
             <description>Reserved by PKWARE for enhanced compression.</description>
             </item>
            
             <item>
             <term>13</term>
             <description>
               Used when encrypting the Central Directory to indicate selected data
               values in the Local Header are masked to hide their actual values.  See
               the section in <a
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</a> describing the Strong Encryption Specification for
               details.
             </description>
             </item>
            
             <item>
             <term>14</term>
             <description>Reserved by PKWARE.</description>
             </item>
            
             <item>
             <term>15</term>
             <description>Reserved by PKWARE.</description>
             </item>
            
             </list>
            
             </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.CompressedSize">
             <summary>
               The compressed size of the file, in bytes, within the zip archive.
             </summary>
            
             <remarks>
               When reading a <c>ZipFile</c>, this value is read in from the existing
               zip file. When creating or updating a <c>ZipFile</c>, the compressed
               size is computed during compression.  Therefore the value on a
               <c>ZipEntry</c> is valid after a call to <c>Save()</c> (or one of its
               overloads) in that case.
             </remarks>
            
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.UncompressedSize"/>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.UncompressedSize">
             <summary>
               The size of the file, in bytes, before compression, or after extraction.
             </summary>
            
             <remarks>
               When reading a <c>ZipFile</c>, this value is read in from the existing
               zip file. When creating or updating a <c>ZipFile</c>, the uncompressed
               size is computed during compression.  Therefore the value on a
               <c>ZipEntry</c> is valid after a call to <c>Save()</c> (or one of its
               overloads) in that case.
             </remarks>
            
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.CompressedSize"/>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.CompressionRatio">
             <summary>
             The ratio of compressed size to uncompressed size of the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               This is a ratio of the compressed size to the uncompressed size of the
               entry, expressed as a double in the range of 0 to 100+. A value of 100
               indicates no compression at all.  It could be higher than 100 when the
               compression algorithm actually inflates the data, as may occur for small
               files, or uncompressible data that is encrypted.
             </para>
            
             <para>
               You could format it for presentation to a user via a format string of
               "{3,5:F0}%" to see it as a percentage.
             </para>
            
             <para>
               If the size of the original uncompressed file is 0, implying a
               denominator of 0, the return value will be zero.
             </para>
            
             <para>
               This property is valid after reading in an existing zip file, or after
               saving the <c>ZipFile</c> that contains the ZipEntry. You cannot know the
               effect of a compression transform until you try it.
             </para>
            
             </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.Crc">
             <summary>
             The 32-bit CRC (Cyclic Redundancy Check) on the contents of the ZipEntry.
             </summary>
            
             <remarks>
            
             <para> You probably don't need to concern yourself with this. It is used
             internally by DotNetZip to verify files or streams upon extraction.  </para>
            
             <para> The value is a <see href="http://en.wikipedia.org/wiki/CRC32">32-bit
             CRC</see> using 0xEDB88320 for the polynomial. This is the same CRC-32 used in
             PNG, MPEG-2, and other protocols and formats.  It is a read-only property; when
             creating a Zip archive, the CRC for each entry is set only after a call to
             <c>Save()</c> on the containing ZipFile. When reading an existing zip file, the value
             of this property reflects the stored CRC for the entry.  </para>
            
             </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.IsDirectory">
            <summary>
            True if the entry is a directory (not a file).
            This is a readonly property on the entry.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.UsesEncryption">
             <summary>
             A derived property that is <c>true</c> if the entry uses encryption.
             </summary>
            
             <remarks>
             <para>
               This is a readonly property on the entry.  When reading a zip file,
               the value for the <c>ZipEntry</c> is determined by the data read
               from the zip file.  After saving a ZipFile, the value of this
               property for each <c>ZipEntry</c> indicates whether encryption was
               actually used (which will have been true if the <see
               cref="P:DigitalRune.Ionic.Zip.ZipEntry.Password"/> was set and the <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.Encryption"/> property
               was something other than <see cref="F:DigitalRune.Ionic.Zip.EncryptionAlgorithm.None"/>.
             </para>
             </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.Encryption">
             <summary>
               Gets the encryption algorithm used for the entry.
             </summary>
            
             <remarks>
            
             <para>
               The Zip specification from PKWare defines a set of encryption algorithms,
               and the data formats for the zip archive that support them, and PKWare
               supports those algorithms in the tools it produces. Other vendors of tools
               and libraries, such as WinZip or Xceed, typically support <em>a
               subset</em> of the algorithms specified by PKWare. These tools can
               sometimes support additional different encryption algorithms and data
               formats, not specified by PKWare. The AES Encryption specified and
               supported by WinZip is the most popular example. This library supports a
               subset of the complete set of algorithms specified by PKWare and other
               vendors.
             </para>
            
             <para>
               There is no common, ubiquitous multi-vendor standard for strong encryption
               within zip files. There is broad support for so-called "traditional" Zip
               encryption, sometimes called Zip 2.0 encryption, as <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specified
               by PKWare</see>, but this encryption is considered weak and
               breakable. This library currently supports the Zip 2.0 "weak" encryption,
               and also a stronger WinZip-compatible AES encryption, using either 128-bit
               or 256-bit key strength. If you want DotNetZip to support an algorithm
               that is not currently supported, call the author of this library and maybe
               we can talk business.
             </para>
            
             <para>
               The WinZip AES encryption algorithms are not supported on the .NET Compact
               Framework.
             </para>
             </remarks>
            
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.Password">ZipEntry.Password</seealso>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.Password">
             <summary>
             The Password to be used when decrypting an entry upon Extract().
             </summary>
            
             <remarks>
             <para>
               This is a write-only property on the entry. Set it to specify the
               password to be used when extracting an existing entry that is encrypted.
             </para>
            
             <para>
               The password set here is implicitly used to to decrypt during the <see
               cref="M:DigitalRune.Ionic.Zip.ZipEntry.Extract(System.IO.Stream)"/> or <see cref="M:DigitalRune.Ionic.Zip.ZipEntry.OpenReader"/> operation.
             </para>
            
             <para>
               Consider setting the <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.Encryption"/> property when using a
               password. Answering concerns that the standard password protection
               supported by all zip tools is weak, WinZip has extended the ZIP
               specification with a way to use AES Encryption to protect entries in the
               Zip file. Unlike the "PKZIP 2.0" encryption specified in the PKZIP
               specification, <see href=
               "http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES
               Encryption</see> uses a standard, strong, tested, encryption
               algorithm. DotNetZip can create zip archives that use WinZip-compatible
               AES encryption, if you set the <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.Encryption"/> property. But,
               archives created that use AES encryption may not be readable by all other
               tools and libraries. For example, Windows Explorer cannot read a
               "compressed folder" (a zip file) that uses AES encryption, though it can
               read a zip file that uses "PKZIP encryption."
             </para>
            
             </remarks>
            
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.Encryption"/>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.AlternateEncoding">
            <summary>
              Specifies the alternate text encoding used by this ZipEntry
            </summary>
            <remarks>
              <para>
                The default text encoding used in Zip files for encoding filenames and
                comments is IBM437, which is something like a superset of ASCII.  In
                cases where this is insufficient, applications can specify an
                alternate encoding.
              </para>
              <para>
                When creating a zip file, the usage of the alternate encoding is
                governed by the <see cref="P:DigitalRune.Ionic.Zip.ZipEntry.AlternateEncodingUsage"/> property.
                Typically you would set both properties to tell DotNetZip to employ an
                encoding that is not IBM437 in the zipfile you are creating.
              </para>
              <para>
                Keep in mind that because the ZIP specification states that the only
                valid encodings to use are IBM437 and UTF-8, if you use something
                other than that, then zip tools and libraries may not be able to
                successfully read the zip archive you generate.
              </para>
              <para>
                The zip specification states that applications should presume that
                IBM437 is in use, except when a special bit is set, which indicates
                UTF-8. There is no way to specify an arbitrary code page, within the
                zip file itself. When you create a zip file encoded with gb2312 or
                ibm861 or anything other than IBM437 or UTF-8, then the application
                that reads the zip file needs to "know" which code page to use. In
                some cases, the code page used when reading is chosen implicitly. For
                example, WinRar uses the ambient code page for the host desktop
                operating system. The pitfall here is that if you create a zip in
                Copenhagen and send it to Tokyo, the reader of the zipfile may not be
                able to decode successfully.
              </para>
            </remarks>
            <example>
              This example shows how to create a zipfile encoded with a
              language-specific encoding:
            <code>
              using (var zip = new ZipFile())
              {
                 zip.AlternateEnoding = System.Text.Encoding.GetEncoding("ibm861");
                 zip.AlternateEnodingUsage = ZipOption.Always;
                 zip.AddFileS(arrayOfFiles);
                 zip.Save("Myarchive-Encoded-in-IBM861.zip");
              }
            </code>
            </example>
            <seealso cref="P:DigitalRune.Ionic.Zip.ZipFile.AlternateEncodingUsage" />
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.AlternateEncodingUsage">
            <summary>
              Describes if and when this instance should apply
              AlternateEncoding to encode the FileName and Comment, when
              saving.
            </summary>
            <seealso cref="P:DigitalRune.Ionic.Zip.ZipFile.AlternateEncoding" />
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipEntry.IsText">
             <summary>
               Indicates whether an entry is marked as a text file. Be careful when
               using on this property. Unless you have a good reason, you should
               probably ignore this property.
             </summary>
            
             <remarks>
             <para>
               The ZIP format includes a provision for specifying whether an entry in
               the zip archive is a text or binary file.  This property exposes that
               metadata item. Be careful when using this property: It's not clear
               that this property as a firm meaning, across tools and libraries.
             </para>
            
             <para>
               To be clear, when reading a zip file, the property value may or may
               not be set, and its value may or may not be valid.  Not all entries
               that you may think of as "text" entries will be so marked, and entries
               marked as "text" are not guaranteed in any way to be text entries.
               Whether the value is set and set correctly depends entirely on the
               application that produced the zip file.
             </para>
            
             <para>
               There are many zip tools available, and when creating zip files, some
               of them "respect" the IsText metadata field, and some of them do not.
               Unfortunately, even when an application tries to do "the right thing",
               it's not always clear what "the right thing" is.
             </para>
            
             <para>
               There's no firm definition of just what it means to be "a text file",
               and the zip specification does not help in this regard. Twenty years
               ago, text was ASCII, each byte was less than 127. IsText meant, all
               bytes in the file were less than 127.  These days, it is not the case
               that all text files have all bytes less than 127.  Any unicode file
               may have bytes that are above 0x7f.  The zip specification has nothing
               to say on this topic. Therefore, it's not clear what IsText really
               means.
             </para>
            
             <para>
               This property merely tells a reading application what is stored in the
               metadata for an entry, without guaranteeing its validity or its
               meaning.
             </para>
            
             <para>
               When DotNetZip is used to create a zipfile, it attempts to set this
               field "correctly." For example, if a file ends in ".txt", this field
               will be set. Your application may override that default setting.  When
               writing a zip file, you must set the property before calling
               <c>Save()</c> on the ZipFile.
             </para>
            
             <para>
               When reading a zip file, a more general way to decide just what kind
               of file is contained in a particular entry is to use the file type
               database stored in the operating system.  The operating system stores
               a table that says, a file with .jpg extension is a JPG image file, a
               file with a .xml extension is an XML document, a file with a .txt is a
               pure ASCII text document, and so on.  To get this information on
               Windows, <see
               href="http://www.codeproject.com/KB/cs/GetFileTypeAndIcon.aspx"> you
               need to read and parse the registry.</see> </para>
             </remarks>
            
             <example>
             <code>
             using (var zip = new ZipFile())
             {
                 var e = zip.UpdateFile("Descriptions.mme", "");
                 e.IsText = true;
                 zip.Save(zipPath);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 Dim e2 as ZipEntry = zip.AddFile("Descriptions.mme", "")
                 e.IsText= True
                 zip.Save(zipPath)
             End Using
             </code>
             </example>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipEntry.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.ZipEntryTimestamp">
             <summary>
               An enum that specifies the type of timestamp available on the ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               The last modified time of a file can be stored in multiple ways in
               a zip file, and they are not mutually exclusive:
             </para>
            
             <list type="bullet">
               <item>
                 In the so-called "DOS" format, which has a 2-second precision. Values
                 are rounded to the nearest even second. For example, if the time on the
                 file is 12:34:43, then it will be stored as 12:34:44. This first value
                 is accessible via the <c>LastModified</c> property. This value is always
                 present in the metadata for each zip entry.  In some cases the value is
                 invalid, or zero.
               </item>
            
               <item>
                 In the so-called "Windows" or "NTFS" format, as an 8-byte integer
                 quantity expressed as the number of 1/10 milliseconds (in other words
                 the number of 100 nanosecond units) since January 1, 1601 (UTC).  This
                 format is how Windows represents file times.  This time is accessible
                 via the <c>ModifiedTime</c> property.
               </item>
            
               <item>
                 In the "Unix" format, a 4-byte quantity specifying the number of seconds since
                 January 1, 1970 UTC.
               </item>
            
               <item>
                 In an older format, now deprecated but still used by some current
                 tools. This format is also a 4-byte quantity specifying the number of
                 seconds since January 1, 1970 UTC.
               </item>
            
             </list>
            
             <para>
               This bit field describes which of the formats were found in a <c>ZipEntry</c> that was read.
             </para>
            
             </remarks>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.ZipEntryTimestamp.None">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.ZipEntryTimestamp.DOS">
            <summary>
            A DOS timestamp with 2-second precision.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.ZipEntryTimestamp.Windows">
            <summary>
            A Windows timestamp with 100-ns precision.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.ZipEntryTimestamp.Unix">
            <summary>
            A Unix timestamp with 1-second precision.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.ZipEntryTimestamp.InfoZip1">
            <summary>
            A Unix timestamp with 1-second precision, stored in InfoZip v1 format.  This
            format is outdated and is supported for reading archives only.
            </summary>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.CompressionMethod">
             <summary>
               The method of compression to use for a particular ZipEntry.
             </summary>
            
             <remarks>
               <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWare's
               ZIP Specification</see> describes a number of distinct
               cmopression methods that can be used within a zip
               file. DotNetZip supports a subset of them.
             </remarks>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.CompressionMethod.None">
            <summary>
            No compression at all. For COM environments, the value is 0 (zero).
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.CompressionMethod.Deflate">
            <summary>
              DEFLATE compression, as described in <see
              href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC
              1951</see>.  This is the "normal" compression used in zip
              files. For COM environments, the value is 8.
            </summary>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.ZipEntrySource">
            <summary>
            An enum that specifies the source of the ZipEntry. 
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.ZipEntrySource.None">
            <summary>
            Default value.  Invalid on a bonafide ZipEntry.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.ZipEntrySource.Stream">
            <summary>
            The entry was instantiated from a stream.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.ZipEntrySource.ZipFile">
            <summary>
            The ZipEntry was instantiated by reading a zipfile.
            </summary>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.ZipFile">
             <summary>
               The ZipFile type represents a zip archive file.
             </summary>
            
             <remarks>
             <para>
               This is the main type in the DotNetZip class library. This class reads and
               writes zip files, as defined in the <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specification
               for zip files described by PKWare</see>.  The compression for this
               implementation is provided by a managed-code version of Zlib, included with
               DotNetZip in the classes in the Ionic.Zlib namespace.
             </para>
            
             <para>
               This class provides a general purpose zip file capability.  Use it to read
               zip files.
             </para>
            
             </remarks>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipFile.Read(System.IO.Stream)">
             <summary>
               Reads a zip archive from a stream.
             </summary>
            
             <remarks>
            
             <para>
               Using this overload, the stream is read using the default
               <c>System.Text.Encoding</c>, which is the <c>IBM437</c>
               codepage. If you want to specify the encoding to use when
               reading the zipfile content, see
               <see cref="M:DigitalRune.Ionic.Zip.ZipFile.Read(System.IO.Stream,System.Text.Encoding)">ZipFile.Read(Stream, Encoding)</see>.
             </para>
            
             <para>
               Reading of zip content begins at the current position in the
               stream.  This means if you have a stream that concatenates
               regular data and zip data, if you position the open, readable
               stream at the start of the zip data, you will be able to read
               the zip archive using this constructor, or any of the ZipFile
               constructors that accept a <see cref="T:System.IO.Stream" /> as
               input. Some examples of where this might be useful: the zip
               content is concatenated at the end of a regular EXE file, as
               some self-extracting archives do.  (Note: SFX files produced
               by DotNetZip do not work this way; they can be read as normal
               ZIP files). Another example might be a stream being read from
               a database, where the zip content is embedded within an
               aggregate stream of data.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example shows how to Read zip content from a stream, and
               extract one entry into a different stream. In this example,
               the filename "NameOfEntryInArchive.doc", refers only to the
               name of the entry within the zip archive.  A file by that
               name is not created in the filesystem.  The I/O is done
               strictly with the given streams.
             </para>
            
             <code>
             using (ZipFile zip = ZipFile.Read(InputStream))
             {
                zip.Extract("NameOfEntryInArchive.doc", OutputStream);
             }
             </code>
            
             <code lang="VB">
             Using zip as ZipFile = ZipFile.Read(InputStream)
                zip.Extract("NameOfEntryInArchive.doc", OutputStream)
             End Using
             </code>
             </example>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <returns>The ZipFile instance read from the stream</returns>
            
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipFile.Read(System.IO.Stream,System.Text.Encoding)">
             <summary>
             Reads a zip archive from a stream, using the specified text Encoding.
             </summary>
            
             <remarks>
             <para>
             Reading of zip content begins at the current position in the stream.  This
             means if you have a stream that concatenates regular data and zip data, if
             you position the open, readable stream at the start of the zip data, you
             will be able to read the zip archive using this constructor, or any of the
             ZipFile constructors that accept a <see cref="T:System.IO.Stream" /> as
             input. Some examples of where this might be useful: the zip content is
             concatenated at the end of a regular EXE file, as some self-extracting
             archives do.  (Note: SFX files produced by DotNetZip do not work this
             way). Another example might be a stream being read from a database, where
             the zip content is embedded within an aggregate stream of data.
             </para>
             </remarks>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8
             encoding bit set.  Be careful specifying the encoding.  If the value you use
             here is not the same as the Encoding used when the zip archive was created
             (possibly by a different archiver) you will get unexpected results and
             possibly exceptions.  See the <see cref="P:DigitalRune.Ionic.Zip.ZipFile.AlternateEncoding"/>
             property for more information.
             </param>
            
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipFile.IsZipFile(System.IO.Stream,System.Boolean)">
             <summary>
             Checks a stream to see if it contains a valid zip archive.
             </summary>
            
             <remarks>
             <para>
             This method reads the zip archive contained in the specified stream, verifying
             the ZIP metadata as it reads.  If testExtract is true, this method also extracts
             each entry in the archive, dumping all the bits into <see cref="F:System.IO.Stream.Null"/>.
             </para>
            
             <para>
             If everything succeeds, then the method returns true.  If anything fails -
             for example if an incorrect signature or CRC is found, indicating a corrupt
             file, the the method returns false.  This method also returns false for a
             file that does not exist.
             </para>
            
             <para>
             If <c>testExtract</c> is true, this method reads in the content for each
             entry, expands it, and checks CRCs.  This provides an additional check
             beyond verifying the zip header data.
             </para>
            
             <para>
             If <c>testExtract</c> is true, and if any of the zip entries are protected
             with a password, this method will return false.  If you want to verify a
             ZipFile that has entries which are protected with a password, you will need
             to do that manually.
             </para>
             </remarks>
            
             <param name="stream">The stream to check.</param>
             <param name="testExtract">true if the caller wants to extract each entry.</param>
             <returns>true if the stream contains a valid zip archive.</returns>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.BufferSize">
             <summary>
               Size of the IO buffer used while saving.
             </summary>
            
             <remarks>
            
             <para>
               First, let me say that you really don't need to bother with this.  It is
               here to allow for optimizations that you probably won't make! It will work
               fine if you don't set or get this property at all. Ok?
             </para>
            
             <para>
               Now that we have <em>that</em> out of the way, the fine print: This
               property affects the size of the buffer that is used for I/O for each
               entry contained in the zip file. When a file is read in to be compressed,
               it uses a buffer given by the size here.  When you update a zip file, the
               data for unmodified entries is copied from the first zip file to the
               other, through a buffer given by the size here.
             </para>
            
             <para>
               Changing the buffer size affects a few things: first, for larger buffer
               sizes, the memory used by the <c>ZipFile</c>, obviously, will be larger
               during I/O operations.  This may make operations faster for very much
               larger files.  Last, for any given entry, when you use a larger buffer
               there will be fewer progress events during I/O operations, because there's
               one progress event generated for each time the buffer is filled and then
               emptied.
             </para>
            
             <para>
               The default buffer size is 8k.  Increasing the buffer size may speed
               things up as you compress larger files.  But there are no hard-and-fast
               rules here, eh?  You won't know til you test it.  And there will be a
               limit where ever larger buffers actually slow things down.  So as I said
               in the beginning, it's probably best if you don't set or get this property
               at all.
             </para>
            
             </remarks>
            
             <example>
             This example shows how you might set a large buffer size for efficiency when
             dealing with zip entries that are larger than 1gb.
             <code lang="C#">
             using (ZipFile zip = new ZipFile())
             {
                 zip.SaveProgress += this.zip1_SaveProgress;
                 zip.AddDirectory(directoryToZip, "");
                 zip.UseZip64WhenSaving = Zip64Option.Always;
                 zip.BufferSize = 65536*8; // 65536 * 8 = 512k
                 zip.Save(ZipFileToCreate);
             }
             </code>
             </example>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.Comment">
             <summary>
               A comment attached to the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               This property is read/write. It allows the application to specify a
               comment for the <c>ZipFile</c>, or read the comment for the
               <c>ZipFile</c>.  After setting this property, changes are only made
               permanent when you call a <c>Save()</c> method.
             </para>
            
             <para>
               According to <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see>, the comment is not encrypted, even if there is a
               password set on the zip file.
             </para>
            
             <para>
               The specification does not describe how to indicate the encoding used
               on a comment string. Many "compliant" zip tools and libraries use
               IBM437 as the code page for comments; DotNetZip, too, follows that
               practice.  On the other hand, there are situations where you want a
               Comment to be encoded with something else, for example using code page
               950 "Big-5 Chinese". To fill that need, DotNetZip will encode the
               comment following the same procedure it follows for encoding
               filenames: (a) if <see cref="P:DigitalRune.Ionic.Zip.ZipFile.AlternateEncodingUsage"/> is
               <c>Never</c>, it uses the default encoding (IBM437). (b) if <see
               cref="P:DigitalRune.Ionic.Zip.ZipFile.AlternateEncodingUsage"/> is <c>Always</c>, it always uses the
               alternate encoding (<see cref="P:DigitalRune.Ionic.Zip.ZipFile.AlternateEncoding"/>). (c) if <see
               cref="P:DigitalRune.Ionic.Zip.ZipFile.AlternateEncodingUsage"/> is <c>AsNecessary</c>, it uses the
               alternate encoding only if the default encoding is not sufficient for
               encoding the comment - in other words if decoding the result does not
               produce the original string.  This decision is taken at the time of
               the call to <c>ZipFile.Save()</c>.
             </para>
            
             <para>
               When creating a zip archive using this library, it is possible to change
               the value of <see cref="P:DigitalRune.Ionic.Zip.ZipFile.AlternateEncoding" /> between each
               entry you add, and between adding entries and the call to
               <c>Save()</c>. Don't do this.  It will likely result in a zip file that is
               not readable by any tool or application.  For best interoperability, leave
               <see cref="P:DigitalRune.Ionic.Zip.ZipFile.AlternateEncoding"/> alone, or specify it only
               once, before adding any entries to the <c>ZipFile</c> instance.
             </para>
            
             </remarks>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipFile.ContainsEntry(System.String)">
             <summary>
               Returns true if an entry by the given name exists in the ZipFile.
             </summary>
            
             <param name='name'>the name of the entry to find</param>
             <returns>true if an entry with the given name exists; otherwise false.
             </returns>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.CaseSensitiveRetrieval">
             <summary>
               Indicates whether to perform case-sensitive matching on the filename when
               retrieving entries in the zipfile via the string-based indexer.
             </summary>
            
             <remarks>
               The default value is <c>false</c>, which means don't do case-sensitive
               matching. In other words, retrieving zip["ReadMe.Txt"] is the same as
               zip["readme.txt"].  It really makes sense to set this to <c>true</c> only
               if you are not running on Windows, which has case-insensitive
               filenames. But since this library is not built for non-Windows platforms,
               in most cases you should just leave this property alone.
             </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.InputUsesZip64">
             <summary>
               Indicates whether the most recent <c>Read()</c> operation read a zip file that uses
               ZIP64 extensions.
             </summary>
            
             <remarks>
               This property will return null (Nothing in VB) if you've added an entry after reading
               the zip file.
             </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.AlternateEncoding">
            <summary>
              A Text Encoding to use when encoding the filenames and comments for
              all the ZipEntry items, during a ZipFile.Save() operation.
            </summary>
            <remarks>
              <para>
                Whether the encoding specified here is used during the save depends
                on <see cref="P:DigitalRune.Ionic.Zip.ZipFile.AlternateEncodingUsage"/>.
              </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.AlternateEncodingUsage">
            <summary>
              A flag that tells if and when this instance should apply
              AlternateEncoding to encode the filenames and comments associated to
              of ZipEntry objects contained within this instance.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.DefaultEncoding">
            <summary>
            The default text encoding used in zip archives.  It is numeric 437, also
            known as IBM437.
            </summary>
            <seealso cref="P:DigitalRune.Ionic.Zip.ZipFile.AlternateEncoding"/>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.Password">
             <summary>
             Sets the password to be used on the <c>ZipFile</c> instance.
             </summary>
            
             <remarks>
            
             <para>
               To use this property when reading or an
               existing ZipFile, do the following: set the Password property on the
               <c>ZipFile</c>, then call one of the Extract() overloads on the <see
               cref="T:DigitalRune.Ionic.Zip.ZipEntry" />. In this case, the entry is extracted using the
               <c>Password</c> that is specified on the <c>ZipFile</c> instance. If you
               have not set the <c>Password</c> property, then the password is
               <c>null</c>, and the entry is extracted with no password.
             </para>
            
             <para>
               If you set the Password property on the <c>ZipFile</c>, then call
               <c>Extract()</c> an entry that has not been encrypted with a password, the
               password is not used for that entry, and the <c>ZipEntry</c> is extracted
               as normal. In other words, the password is used only if necessary.
             </para>
            
             <para>
               The <see cref="T:DigitalRune.Ionic.Zip.ZipEntry"/> class also has a <see
               cref="P:DigitalRune.Ionic.Zip.ZipEntry.Password">Password</see> property.  It takes precedence
               over this property on the <c>ZipFile</c>.  Typically, you would use the
               per-entry Password when most entries in the zip archive use one password,
               and a few entries use a different password.  If all entries in the zip
               file use the same password, then it is simpler to just set this property
               on the <c>ZipFile</c> itself, whether creating a zip archive or extracting
               a zip archive.
             </para>
            
             </remarks>
            
             <example>
             
             <code>
             // extract entries that use encryption
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 zip.Password= "!Secret1";
                 zip.ExtractAll("extractDir");
             }
             </code>
            
             <code lang="VB">
             ' extract entries that use encryption
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 zip.Password= "!Secret1"
                 zip.ExtractAll("extractDir")
             End Using
             </code>
             
             </example>
            
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipEntry.Password">ZipEntry.Password</seealso>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipFile.#ctor">
             <summary>
               Create a zip file, without specifying a target filename or stream to save to.
             </summary>
            
             <remarks>
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               have multiple threads that each use a distinct <c>ZipFile</c> instance, or
               you can synchronize multi-thread access to a single instance.  </para>
            
             </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.Item(System.Int32)">
             <summary>
               This is an integer indexer into the Zip archive.
             </summary>
            
             <remarks>
             <para>
               This property is read-only.
             </para>
            
             <para>
               Internally, the <c>ZipEntry</c> instances that belong to the
               <c>ZipFile</c> are stored in a Dictionary.  When you use this
               indexer the first time, it creates a read-only
               <c>List&lt;ZipEntry&gt;</c> from the Dictionary.Values Collection.
               If at any time you modify the set of entries in the <c>ZipFile</c>,
               either by adding an entry, removing an entry, or renaming an
               entry, a new List will be created, and the numeric indexes for the
               remaining entries may be different.
             </para>
            
             <para>
               This means you cannot rename any ZipEntry from
               inside an enumeration of the zip file.
             </para>
            
             <param name="ix">
               The index value.
             </param>
            
             </remarks>
            
             <returns>
               The <c>ZipEntry</c> within the Zip archive at the specified index. If the
               entry does not exist in the archive, this indexer throws.
             </returns>
            
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.Item(System.String)">
             <summary>
               This is a name-based indexer into the Zip archive.
             </summary>
            
             <remarks>
             <para>
               This property is read-only.
             </para>
            
             <para>
               The <see cref="P:DigitalRune.Ionic.Zip.ZipFile.CaseSensitiveRetrieval"/> property on the <c>ZipFile</c>
               determines whether retrieval via this indexer is done via case-sensitive
               comparisons. By default, retrieval is not case sensitive.  This makes
               sense on Windows, in which filesystems are not case sensitive.
             </para>
            
             <para>
               Regardless of case-sensitivity, it is not always the case that
               <c>this[value].FileName == value</c>. In other words, the <c>FileName</c>
               property of the <c>ZipEntry</c> retrieved with this indexer, may or may
               not be equal to the index value.
             </para>
            
             <para>
               This is because DotNetZip performs a normalization of filenames passed to
               this indexer, before attempting to retrieve the item.  That normalization
               includes: removal of a volume letter and colon, swapping backward slashes
               for forward slashes.  So, <c>zip["dir1\\entry1.txt"].FileName ==
               "dir1/entry.txt"</c>.
             </para>
            
             <para>
               Directory entries in the zip file may be retrieved via this indexer only
               with names that have a trailing slash. DotNetZip automatically appends a
               trailing slash to the names of any directory entries added to a zip.
             </para>
            
             </remarks>
            
             <example>
             This example extracts only the entries in a zip file that are .txt files.
             <code>
             using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
             {
               foreach (string s1 in zip.EntryFilenames)
               {
                 if (s1.EndsWith(".txt"))
                   zip[s1].Extract("textfiles");
               }
             }
             </code>
             <code lang="VB">
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                   Dim s1 As String
                   For Each s1 In zip.EntryFilenames
                       If s1.EndsWith(".txt") Then
                           zip(s1).Extract("textfiles")
                       End If
                   Next
               End Using
             </code>
             </example>
            
             <exception cref="T:System.ArgumentException">
               Thrown if the caller attempts to assign a non-null value to the indexer.
             </exception>
            
             <param name="fileName">
               The name of the file, including any directory path, to retrieve from the
               zip.  The filename match is not case-sensitive by default; you can use the
               <see cref="P:DigitalRune.Ionic.Zip.ZipFile.CaseSensitiveRetrieval"/> property to change this behavior. The
               pathname can use forward-slashes or backward slashes.
             </param>
            
             <returns>
               The <c>ZipEntry</c> within the Zip archive, given by the specified
               filename. If the named entry does not exist in the archive, this indexer
               returns <c>null</c> (<c>Nothing</c> in VB).
             </returns>
            
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.EntryFileNames">
             <summary>
               The list of filenames for the entries contained within the zip archive.
             </summary>
            
             <remarks>
               According to the ZIP specification, the names of the entries use forward
               slashes in pathnames.  If you are scanning through the list, you may have
               to swap forward slashes for backslashes.
             </remarks>
            
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipFile.Item(System.String)"/>
            
             <example>
               This example shows one way to test if a filename is already contained
               within a zip archive.
             <code>
             String zipFileToRead= "PackedDocuments.zip";
             string candidate = "DatedMaterial.xps";
             using (ZipFile zip = new ZipFile(zipFileToRead))
             {
               if (zip.EntryFilenames.Contains(candidate))
                 Console.WriteLine("The file '{0}' exists in the zip archive '{1}'",
                                   candidate,
                                   zipFileName);
               else
                 Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'",
                                   candidate,
                                   zipFileName);
               Console.WriteLine();
             }
             </code>
             <code lang="VB">
               Dim zipFileToRead As String = "PackedDocuments.zip"
               Dim candidate As String = "DatedMaterial.xps"
               Using zip As ZipFile.Read(ZipFileToRead)
                   If zip.EntryFilenames.Contains(candidate) Then
                       Console.WriteLine("The file '{0}' exists in the zip archive '{1}'", _
                                   candidate, _
                                   zipFileName)
                   Else
                     Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'", _
                                   candidate, _
                                   zipFileName)
                   End If
                   Console.WriteLine
               End Using
             </code>
             </example>
            
             <returns>
               The list of strings for the filenames contained within the Zip archive.
             </returns>
            
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.Entries">
             <summary>
               Returns the readonly collection of entries in the Zip archive.
             </summary>
            
             <remarks>
            
             <para>
               If there are no entries in the current <c>ZipFile</c>, the value returned is a
               non-null zero-element collection.  If there are entries in the zip file,
               the elements are returned in no particular order.
             </para>
             <para>
               This is the implied enumerator on the <c>ZipFile</c> class.  If you use a
               <c>ZipFile</c> instance in a context that expects an enumerator, you will
               get this collection.
             </para>
             </remarks>
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipFile.EntriesSorted"/>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.EntriesSorted">
             <summary>
               Returns a readonly collection of entries in the Zip archive, sorted by FileName.
             </summary>
            
             <remarks>
               If there are no entries in the current <c>ZipFile</c>, the value returned
               is a non-null zero-element collection.  If there are entries in the zip
               file, the elements are returned sorted by the name of the entry.
             </remarks>
            
             <example>
            
               This example fills a Windows Forms ListView with the entries in a zip file.
            
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read(zipFile))
             {
                 foreach (ZipEntry entry in zip.EntriesSorted)
                 {
                     ListViewItem item = new ListViewItem(n.ToString());
                     n++;
                     string[] subitems = new string[] {
                         entry.FileName.Replace("/","\\"),
                         entry.LastModified.ToString("yyyy-MM-dd HH:mm:ss"),
                         entry.UncompressedSize.ToString(),
                         String.Format("{0,5:F0}%", entry.CompressionRatio),
                         entry.CompressedSize.ToString(),
                         (entry.UsesEncryption) ? "Y" : "N",
                         String.Format("{0:X8}", entry.Crc)};
            
                     foreach (String s in subitems)
                     {
                         ListViewItem.ListViewSubItem subitem = new ListViewItem.ListViewSubItem();
                         subitem.Text = s;
                         item.SubItems.Add(subitem);
                     }
            
                     this.listView1.Items.Add(item);
                 }
             }
             </code>
             </example>
            
             <seealso cref="P:DigitalRune.Ionic.Zip.ZipFile.Entries"/>
        </member>
        <member name="P:DigitalRune.Ionic.Zip.ZipFile.Count">
            <summary>
            Returns the number of entries in the Zip archive.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipFile.Dispose">
             <summary>
               Closes the read and write streams associated
               to the <c>ZipFile</c>, if necessary.
             </summary>
            
             <remarks>
               The Dispose() method is generally employed implicitly, via a <c>using(..) {..}</c>
               statement. (<c>Using...End Using</c> in VB) If you do not employ a using
               statement, insure that your application calls Dispose() explicitly.  For
               example, in a Powershell application, or an application that uses the COM
               interop interface, you must call Dispose() explicitly.
             </remarks>
            
             <example>
             This example extracts an entry selected by name, from the Zip file to the
             Console.
             <code>
             using (ZipFile zip = ZipFile.Read(zipfile))
             {
               foreach (ZipEntry e in zip)
               {
                 if (WantThisEntry(e.FileName))
                   zip.Extract(e.FileName, Console.OpenStandardOutput());
               }
             } // Dispose() is called implicitly here.
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(zipfile)
                 Dim e As ZipEntry
                 For Each e In zip
                   If WantThisEntry(e.FileName) Then
                       zip.Extract(e.FileName, Console.OpenStandardOutput())
                   End If
                 Next
             End Using ' Dispose is implicity called here
             </code>
             </example>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipFile.Dispose(System.Boolean)">
             <summary>
               Disposes any managed resources, if the flag is set, then marks the
               instance disposed.  This method is typically not called explicitly from
               application code.
             </summary>
            
             <remarks>
               Applications should call <see cref="M:DigitalRune.Ionic.Zip.ZipFile.Dispose">the no-arg Dispose method</see>.
             </remarks>
            
             <param name="disposeManagedResources">
               indicates whether the method should dispose streams or not.
             </param>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.ZipFile.BufferSizeDefault">
            <summary>
              Default size of the buffer used for IO.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zip.ZipFile.GetEnumerator">
             <summary>
             Generic IEnumerator support, for use of a ZipFile in an enumeration.
             </summary>
            
             <remarks>
             You probably do not want to call <c>GetEnumerator</c> explicitly. Instead
             it is implicitly called when you use a <see langword="foreach"/> loop in C#, or a
             <c>For Each</c> loop in VB.NET.
             </remarks>
            
             <example>
             This example reads a zipfile of a given name, then enumerates the
             entries in that zip file, and displays the information about each
             entry on the Console.
             <code>
             using (ZipFile zip = ZipFile.Read(zipfile))
             {
               bool header = true;
               foreach (ZipEntry e in zip)
               {
                 if (header)
                 {
                    System.Console.WriteLine("Zipfile: {0}", zip.Name);
                    System.Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded);
                    System.Console.WriteLine("BitField: 0x{0:X2}", e.BitField);
                    System.Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod);
                    System.Console.WriteLine("\n{1,-22} {2,-6} {3,4}   {4,-8}  {0}",
                                 "Filename", "Modified", "Size", "Ratio", "Packed");
                    System.Console.WriteLine(new System.String('-', 72));
                    header = false;
                 }
            
                 System.Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}",
                             e.FileName,
                             e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"),
                             e.UncompressedSize,
                             e.CompressionRatio,
                             e.CompressedSize);
            
                 e.Extract();
               }
             }
             </code>
            
             <code lang="VB">
               Dim ZipFileToExtract As String = "c:\foo.zip"
               Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                   Dim header As Boolean = True
                   Dim e As ZipEntry
                   For Each e In zip
                       If header Then
                           Console.WriteLine("Zipfile: {0}", zip.Name)
                           Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded)
                           Console.WriteLine("BitField: 0x{0:X2}", e.BitField)
                           Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod)
                           Console.WriteLine(ChrW(10) &amp; "{1,-22} {2,-6} {3,4}   {4,-8}  {0}", _
                             "Filename", "Modified", "Size", "Ratio", "Packed" )
                           Console.WriteLine(New String("-"c, 72))
                           header = False
                       End If
                       Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}", _
                         e.FileName, _
                         e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"), _
                         e.UncompressedSize, _
                         e.CompressionRatio, _
                         e.CompressedSize )
                       e.Extract
                   Next
               End Using
             </code>
             </example>
            
             <returns>A generic enumerator suitable for use  within a foreach loop.</returns>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.Zip64Option">
             <summary>
               Options for using ZIP64 extensions when saving zip archives.
             </summary>
            
             <remarks>
            
             <para>
               Designed many years ago, the <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">original zip
               specification from PKWARE</see> allowed for 32-bit quantities for the
               compressed and uncompressed sizes of zip entries, as well as a 32-bit quantity
               for specifying the length of the zip archive itself, and a maximum of 65535
               entries.  These limits are now regularly exceeded in many backup and archival
               scenarios.  Recently, PKWare added extensions to the original zip spec, called
               "ZIP64 extensions", to raise those limitations.  This property governs whether
               DotNetZip will use those extensions when writing zip archives. The use of
               these extensions is optional and explicit in DotNetZip because, despite the
               status of ZIP64 as a bona fide standard, many other zip tools and libraries do
               not support ZIP64, and therefore a zip file with ZIP64 extensions may be
               unreadable by some of those other tools.
             </para>
            
             <para>
               Set this property to <see cref="F:DigitalRune.Ionic.Zip.Zip64Option.Always"/> to always use ZIP64
               extensions when saving, regardless of whether your zip archive needs it.
               Suppose you add 5 files, each under 100k, to a ZipFile. If you specify Always
               for this flag, you will get a ZIP64 archive, though the archive does not need
               to use ZIP64 because none of the original zip limits had been exceeded.
             </para>
            
             <para>
               Set this property to <see cref="F:DigitalRune.Ionic.Zip.Zip64Option.Never"/> to tell the DotNetZip
               library to never use ZIP64 extensions.  This is useful for maximum
               compatibility and interoperability, at the expense of the capability of
               handling large files or large archives.  NB: Windows Explorer in Windows XP
               and Windows Vista cannot currently extract files from a zip64 archive, so if
               you want to guarantee that a zip archive produced by this library will work in
               Windows Explorer, use <c>Never</c>. If you set this property to <see
               cref="F:DigitalRune.Ionic.Zip.Zip64Option.Never"/>, and your application creates a zip that would
               exceed one of the Zip limits, the library will throw an exception while saving
               the zip file.
             </para>
            
             <para>
               Set this property to <see cref="F:DigitalRune.Ionic.Zip.Zip64Option.AsNecessary"/> to tell the
               DotNetZip library to use the ZIP64 extensions when required by the
               entry. After the file is compressed, the original and compressed sizes are
               checked, and if they exceed the limits described above, then zip64 can be
               used. That is the general idea, but there is an additional wrinkle when saving
               to a non-seekable device, like the ASP.NET <c>Response.OutputStream</c>, or
               <c>Console.Out</c>.  When using non-seekable streams for output, the entry
               header - which indicates whether zip64 is in use - is emitted before it is
               known if zip64 is necessary.  It is only after all entries have been saved
               that it can be known if ZIP64 will be required.  On seekable output streams,
               after saving all entries, the library can seek backward and re-emit the zip
               file header to be consistent with the actual ZIP64 requirement.  But using a
               non-seekable output stream, the library cannot seek backward, so the header
               can never be changed. In other words, the archive's use of ZIP64 extensions is
               not alterable after the header is emitted.  Therefore, when saving to
               non-seekable streams, using <see cref="F:DigitalRune.Ionic.Zip.Zip64Option.AsNecessary"/> is the same
               as using <see cref="F:DigitalRune.Ionic.Zip.Zip64Option.Always"/>: it will always produce a zip
               archive that uses ZIP64 extensions.
             </para>
            
             </remarks>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.Zip64Option.Default">
            <summary>
            The default behavior, which is "Never".
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.Zip64Option.Never">
            <summary>
            Do not use ZIP64 extensions when writing zip archives.
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.Zip64Option.AsNecessary">
            <summary>
            Use ZIP64 extensions when writing zip archives, as necessary.
            For example, when a single entry exceeds 0xFFFFFFFF in size, or when the archive as a whole
            exceeds 0xFFFFFFFF in size, or when there are more than 65535 entries in an archive.
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.Zip64Option.Always">
            <summary>
            Always use ZIP64 extensions when writing zip archives, even when unnecessary.
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="T:DigitalRune.Ionic.Zip.ZipOption">
            <summary>
             An enum representing the values on a three-way toggle switch
             for various options in the library. This might be used to
             specify whether to employ a particular text encoding, or to use
             ZIP64 extensions, or some other option.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.ZipOption.Default">
            <summary>
            The default behavior. This is the same as "Never".
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.ZipOption.Never">
            <summary>
            Never use the associated option.
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.ZipOption.AsNecessary">
            <summary>
            Use the associated behavior "as necessary."
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zip.ZipOption.Always">
            <summary>
            Use the associated behavior Always, whether necessary or not.
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="T:DigitalRune.Ionic.Zlib.DeflateStream">
             <summary>
             A class for decompressing streams using the Deflate algorithm.
             </summary>
            
             <remarks>
            
             <para>
               The DeflateStream is a <see
               href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see
               cref="T:System.IO.Stream"/>.  It adds DEFLATE decompression to any stream.
             </para>
            
             <para>
               Using this stream, applications can decompress data via stream
               <c>Read</c> operations. The compression format used is
               DEFLATE, which is documented in <see
               href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
               Compressed Data Format Specification version 1.3.".
             </para>
            
             </remarks>
            
             <seealso cref="T:DigitalRune.Ionic.Zlib.GZipStream" />
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream)">
             <summary>
               Create a DeflateStream for decompression.
             </summary>
            
             <param name="stream">The stream which will be read.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> and explicitly specify whether the
               stream should be left open after Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compression.  Specify true for
               the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               The <c>DeflateStream</c> will use the default compression level.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
             </remarks>
            
             <param name="stream">
               The stream which will be read. This is called the
               "captive" stream in other places in this documentation.
             </param>
            
             <param name="leaveOpen">true if the application would like the stream to
             remain open after inflation.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.DeflateStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                Application code won't call this code directly.  This method may be
                invoked in two distinct scenarios.  If disposing == true, the method
                has been called directly or indirectly by a user's code, for example
                via the public Dispose() method. In this case, both managed and
                unmanaged resources can be referenced and disposed.  If disposing ==
                false, the method has been called by the runtime from inside the
                object finalizer and this method should not reference other objects;
                in that case only unmanaged resources must be referenced or
                disposed.
              </para>
            </remarks>
            <param name="disposing">
              true if the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="P:DigitalRune.Ionic.Zlib.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zlib.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:DigitalRune.Ionic.Zlib.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Zlib.DeflateStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Ionic.Zlib.DeflateStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               read in. The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, providing an uncompressed data stream.
               Then call Read() on that <c>DeflateStream</c>, and the data read will be
               compressed as you read.  If you wish to use the <c>DeflateStream</c> to
               decompress data while reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, providing a readable compressed data
               stream.  Then call Read() on that <c>DeflateStream</c>, and the data read
               will be decompressed as you read.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
            
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Not implemented.
             </summary>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="T:DigitalRune.Ionic.Zlib.GZipStream">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:DigitalRune.Ionic.Zlib.FlushType">
            <summary>
            Describes how to flush the current deflate operation.
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:DigitalRune.Ionic.Zlib.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
            <exclude />
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library.
            </summary>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="message">the message for the exception.</param>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="T:DigitalRune.Ionic.Zlib.Adler">
             <summary>
             Computes an Adler-32 checksum.
             </summary>
             <remarks>
             The Adler checksum is similar to a CRC checksum, but faster to compute, though less
             reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
             is a required part of the "ZLIB" standard.  Applications will almost never need to
             use this class directly.
             </remarks>
            
             <exclude/>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.Adler.Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calculates the Adler32 checksum.
            </summary>
            <remarks>
              <para>
                This is used within ZLIB.  You probably don't need to use this directly.
              </para>
            </remarks>
            <example>
               To compute an Adler32 checksum on a byte array:
             <code>
               var adler = Adler.Adler32(0, null, 0, 0);
               adler = Adler.Adler32(adler, buffer, index, length);
             </code>
            </example>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.ZlibBaseStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Ionic.Zlib.ZlibBaseStream"/>
            class and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:DigitalRune.Ionic.Zlib.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.ZlibCodec.Inflate(DigitalRune.Ionic.Zlib.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:DigitalRune.Ionic.Zlib.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="T:DigitalRune.Ionic.Zlib.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:DigitalRune.Ionic.Zlib.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 16384 bytes.
            </summary>
        </member>
        <member name="T:DigitalRune.Licensing">
            <summary>
            Manages copy protection and licensing.
            </summary>
            <remarks>
            All serial numbers (license keys) must be added using <see cref="M:DigitalRune.Licensing.AddSerialNumber(System.String)"/> at the
            start of the application before any license protected code is executed!
            </remarks>
        </member>
        <member name="M:DigitalRune.Licensing.AddSerialNumber(System.String)">
            <summary>
            Adds the specified serial number.
            </summary>
            <param name="serialNumber">A serial number (license key) for a DigitalRune product.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serialNumber"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Linq.LinqHelper">
            <summary>
            Provides new extension methods for LINQ.
            </summary>
        </member>
        <member name="M:DigitalRune.Linq.LinqHelper.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <overloads>
            <summary>
            Performs the given action on each element in a sequence when it is enumerated.
            </summary>
            </overloads>
            
            <summary>
            Performs the given action on each element in a sequence when it is enumerated.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="source">
            A sequence that contains the elements on which to perform <paramref name="action"/>.
            </param>
            <param name="action">The action to execute on each element.</param>
            <returns>The sequence of elements.</returns>
            <remarks>
            <see cref="M:DigitalRune.Linq.LinqHelper.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})"/> is similar to 
            <see cref="M:DigitalRune.Linq.LinqHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})"/>. The difference is that 
            <see cref="M:DigitalRune.Linq.LinqHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})"/> immediately enumerates the given 
            sequence. <see cref="M:DigitalRune.Linq.LinqHelper.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})"/> does not automatically trigger the 
            enumeration. Instead it returns the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Linq.LinqHelper.Empty``1">
            <summary>
            Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/>  that has the specified type argument.
            </summary>
            <typeparam name="T">
            The type to assign to the type parameter of the returned generic 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </typeparam>
            <returns>
            An empty <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose type argument is <typeparamref name="T"/>. 
            </returns>
            <remarks>
            Unlike <see cref="M:System.Linq.Enumerable.Empty``1"/>, this method returns a instance which does
            not create heap allocations ("garbage") when it is enumerated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Linq.LinqHelper.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs the given action on each element (incorporating its index) in a sequence when it is 
            enumerated.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="source">
            A sequence that contains the elements on which to perform <paramref name="action"/>.
            </param>
            <param name="action">
            The action to execute on each element; the second parameter of the function represents the 
            index of the element.
            </param>
            <returns>The sequence of elements.</returns>
            <remarks>
            <see cref="M:DigitalRune.Linq.LinqHelper.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})"/> is similar to 
            <see cref="M:DigitalRune.Linq.LinqHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})"/>. The difference is that 
            <see cref="M:DigitalRune.Linq.LinqHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})"/> immediately enumerates the given 
            sequence. <see cref="M:DigitalRune.Linq.LinqHelper.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})"/> does not automatically trigger 
            the enumeration. Instead it returns the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Linq.LinqHelper.First``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            Returns the first element of a <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="set">The hash set.</param>
            <returns>The first element in the hash set.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="set"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The source sequence is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Linq.LinqHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <overloads>
            <summary>
            Immediately performs the given action on each element in a sequence.
            </summary>
            </overloads>
            
            <summary>
            Immediately performs the given action on each element in a sequence.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="source">
            A sequence that contains the elements on which to perform <paramref name="action"/>.
            </param>
            <param name="action">The action to execute on each element.</param>
            <inheritdoc cref="M:DigitalRune.Linq.LinqHelper.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Linq.LinqHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Immediately performs the given action on each element (incorporating its index) in a 
            sequence.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="source">
            A sequence that contains the elements on which to perform <paramref name="action"/>.
            </param>
            <param name="action">
            The action to execute on each element; the second parameter of the function represents the 
            index of the element.
            </param>
            <inheritdoc cref="M:DigitalRune.Linq.LinqHelper.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Linq.LinqHelper.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the index of the first element in a sequence that satisfies the specified condition.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="source">A sequence of elements.</param>
            <param name="predicate">A predicate to test each element.</param>
            <returns>
            The zero-based index of the first element in the sequence that passed test; -1 if no element
            passed the test.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Linq.LinqHelper.Return``1(``0)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that returns a single element.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="value">The first and only element in the sequence.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that returns a single element.
            </returns>
        </member>
        <member name="T:DigitalRune.Linq.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Linq"/> namespace provides helper classes for
            <i>language-integrated query</i> (LINQ).
            </summary>
        </member>
        <member name="T:DigitalRune.Linq.TreeHelper">
            <summary>
            Provides new extension methods for traversing trees using LINQ.
            </summary>
        </member>
        <member name="M:DigitalRune.Linq.TreeHelper.GetAncestors``1(``0,System.Func{``0,``0})">
            <summary>
            Gets the ancestors of a certain node.
            </summary>
            <typeparam name="T">The type of node that is enumerated.</typeparam>
            <param name="node">
            The reference node where to start the search. (The reference node will not be included in 
            the resulting enumeration.)
            </param>
            <param name="getParent">
            <para>
            A method that retrieves the parent object for a node of type <typeparamref name="T"/>.
            </para>
            <para>
            The method should return <see langword="null"/> to indicate that a node does not have a
            parent. <see cref="M:DigitalRune.Linq.TreeHelper.GetAncestors``1(``0,System.Func{``0,``0})"/> guarantees that <paramref name="getParent"/> is never 
            called with <see langword="null"/> as parameter.
            </para>
            </param>
            <returns>
            The ancestors of <paramref name="node"/> (along the path from the node to the root).
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="getParent"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Linq.TreeHelper.GetSelfAndAncestors``1(``0,System.Func{``0,``0})">
            <summary>
            Gets the given node and its ancestors.
            </summary>
            <typeparam name="T">The type of node that is enumerated.</typeparam>
            <param name="node">
            The reference node where to start the search. (The reference node will be the first node in 
            the resulting enumeration.)
            </param>
            <param name="getParent">
            <para>
            A method that retrieves the parent object for a node of type <typeparamref name="T"/>.
            </para>
            <para>
            The method should return <see langword="null"/> to indicate that a node does not have a
            parent. <see cref="M:DigitalRune.Linq.TreeHelper.GetSelfAndAncestors``1(``0,System.Func{``0,``0})"/> guarantees that <paramref name="getParent"/> is 
            never called with <see langword="null"/> as parameter.
            </para>
            </param>
            <returns>
            The <paramref name="node"/> and its ancestors (along the path from the node to the root).
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="getParent"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Linq.TreeHelper.GetRoot``1(``0,System.Func{``0,``0})">
            <summary>
            Gets the root of a tree.
            </summary>
            <typeparam name="T">The type of node that is enumerated.</typeparam>
            <param name="node">The reference node where to start the search.</param>
            <param name="getParent">
            <para>
            A method that retrieves the parent object for a node of type <typeparamref name="T"/>.
            </para>
            <para>
            The method should return <see langword="null"/> to indicate that a node does not have a
            parent. <see cref="M:DigitalRune.Linq.TreeHelper.GetRoot``1(``0,System.Func{``0,``0})"/> guarantees that <paramref name="getParent"/> is never 
            called with <see langword="null"/> as parameter.
            </para>
            </param>
            <returns>The root node.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="getParent"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Linq.TreeHelper.GetDescendants``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <overloads>
            <summary>
            Gets the descendants of a given node.
            </summary>
            </overloads>
            
            <summary>
            Gets the descendants of a given node using a depth-first search.
            </summary>
            <typeparam name="T">The type of node that is enumerated.</typeparam>
            <param name="node">
            The reference node where to start the search. (The reference node will not be included in
            the enumeration.)
            </param>
            <param name="getChildren">
            <para>
            A method that retrieves the children of an object of type <typeparamref name="T"/>. 
            </para>
            <para>
            <see cref="M:DigitalRune.Linq.TreeHelper.GetDescendants``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})"/> guarantees that 
            <paramref name="getChildren"/> is never called with <see langword="null"/> as parameter. The
            enumeration returned by <paramref name="getChildren"/> may contain <see langword="null"/>.
            </para>
            </param>
            <returns>The descendants of <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="getChildren"/> is <see langword="null"/>.
            </exception>
            <remarks>
            This method can be used to traverse a tree in depth-first order (preorder).
            </remarks>
        </member>
        <member name="M:DigitalRune.Linq.TreeHelper.GetDescendants``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Boolean)">
            <summary>
            Gets the descendants of a given node using a depth-first search or a breadth-first 
            search.
            </summary>
            <typeparam name="T">The type of node that is enumerated.</typeparam>
            <param name="node">
            The reference node where to start the search. (The reference node will not be included in 
            the enumeration.)
            </param>
            <param name="getChildren">
            <para>
            A method that retrieves the children of an object of type <typeparamref name="T"/>. 
            </para>
            <para>
            <see cref="M:DigitalRune.Linq.TreeHelper.GetDescendants``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Boolean)"/> guarantees that 
            <paramref name="getChildren"/> is never called with <see langword="null"/> as parameter. The
            enumeration returned by <paramref name="getChildren"/> may contain <see langword="null"/>.
            </para>
            </param>
            <param name="depthFirst">
            If set to <see langword="true"/> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
            <returns>The descendants of <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="getChildren"/> is <see langword="null"/>.
            </exception>
            <remarks>
            This method can be used to traverse a tree in either depth-first order (preorder) or in 
            breadth-first order (also known as level-order).
            </remarks>
        </member>
        <member name="M:DigitalRune.Linq.TreeHelper.GetSubtree``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <overloads>
            <summary>
            Gets the subtree (the given node and all of its descendants).
            </summary>
            </overloads>
            
            <summary>
            Gets the subtree (the given node and all of its descendants) using a depth-first search.
            </summary>
            <typeparam name="T">The type of node that is enumerated.</typeparam>
            <param name="node">
            The reference node where to start the search. (The reference node will be the first element
            in the enumeration.)
            </param>
            <param name="getChildren">
            <para>
            A method that retrieves the children of an object of type <typeparamref name="T"/>. 
            </para>
            <para>
            <see cref="M:DigitalRune.Linq.TreeHelper.GetSubtree``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})"/> guarantees that 
            <paramref name="getChildren"/> is never called with <see langword="null"/> as parameter. The
            enumeration returned by <paramref name="getChildren"/> may contain <see langword="null"/>.
            </para>
            </param>
            <returns>The subtree of <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="getChildren"/> is <see langword="null"/>.
            </exception>
            <remarks>
            This method can be used to traverse a tree in depth-first order (preorder).
            </remarks>
        </member>
        <member name="M:DigitalRune.Linq.TreeHelper.GetSubtree``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Boolean)">
            <summary>
            Gets the subtree (the given node and all of its descendants) using a depth-first search or a
            breadth-first search.
            </summary>
            <typeparam name="T">The type of node that is enumerated.</typeparam>
            <param name="node">
            The reference node where to start the search. (The reference node will be the first element
            in the enumeration.)
            </param>
            <param name="getChildren">
            <para>
            A method that retrieves the children of an object of type <typeparamref name="T"/>. 
            </para>
            <para>
            <see cref="M:DigitalRune.Linq.TreeHelper.GetSubtree``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})"/> guarantees that 
            <paramref name="getChildren"/> is never called with <see langword="null"/> as parameter. The
            enumeration returned by <paramref name="getChildren"/> may contain <see langword="null"/>.
            </para>
            </param>
            <param name="depthFirst">
            If set to <see langword="true"/> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
            <returns>The subtree of <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="getChildren"/> is <see langword="null"/>.
            </exception>
            <remarks>
            This method can be used to traverse a tree in either depth-first order (preorder) or in 
            breadth-first order (also known as level-order).
            </remarks>
        </member>
        <member name="M:DigitalRune.Linq.TreeHelper.GetLeaves``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Gets the leaves of a given tree.
            </summary>
            <typeparam name="T">The type of node that is enumerated.</typeparam>
            <param name="node">The reference node where to start the search.</param>
            <param name="getChildren">
            <para>
            A method that retrieves the children of an object of type <typeparamref name="T"/>.
            </para>
            <para>
            <see cref="M:DigitalRune.Linq.TreeHelper.GetLeaves``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})"/> guarantees that 
            <paramref name="getChildren"/> is never called with <see langword="null"/> as parameter. The
            enumeration returned by <paramref name="getChildren"/> may contain <see langword="null"/>.
            </para>
            </param>
            <returns>The leaves of <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="getChildren"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Linq.TreeHelper.GetDepth``1(``0,System.Func{``0,``0})">
            <summary>
            Gets the depth of the specified node in a tree.
            </summary>
            <typeparam name="T">The type of tree node.</typeparam>
            <param name="node">The node.</param>
            <param name="getParent">
            <para>
            A method that retrieves the parent object for a node of type <typeparamref name="T"/>.
            </para>
            <para>
            The method should return <see langword="null"/> to indicate that a node does not have a
            parent. <see cref="M:DigitalRune.Linq.TreeHelper.GetDepth``1(``0,System.Func{``0,``0})"/> guarantees that <paramref name="getParent"/> is never 
            called with <see langword="null"/> as parameter.
            </para>
            </param>
            <returns>The depth of the node.</returns>
            <remarks>
            The depth of a node is the length of the longest upward path to the root. A root node has a 
            depth of 0.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="getParent"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Linq.TreeHelper.GetHeight``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Gets the height of the specified tree or subtree.
            </summary>
            <typeparam name="T">The type of tree node.</typeparam>
            <param name="tree">The root of a tree or subtree.</param>
            <returns>The height of the tree or subtree.</returns>
            <param name="getChildren">
            <para>
            A method that retrieves the children of an object of type <typeparamref name="T"/>. 
            </para>
            <para>
            <see cref="M:DigitalRune.Linq.TreeHelper.GetHeight``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})"/> guarantees that <paramref name="getChildren"/> is never called 
            with <see langword="null"/> as parameter. The enumeration returned by 
            <paramref name="getChildren"/> may contain <see langword="null"/>.
            </para>
            </param>
            <remarks>
            The height of the tree is the length of the longest downward path to a leaf. A leaf node has 
            a height of 0.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tree"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Mathematics"/> namespace provides common mathematical constants
            and functions.
            </summary>
        </member>
        <member name="T:DigitalRune.Mathematics.Numeric">
            <summary>
            Provides methods for robust floating-point comparisons (for <see langword="float"/> and 
            <see langword="double"/>).
            </summary>
            <remarks>
            <para>
            Floating-point values are difficult to compare for equality because of numerical errors. This 
            class provides methods to compare floating-point values with regard to numerical errors.
            </para>
            <para> 
            To compare floating-point values a tolerance value <em>epsilon</em> will be used. Values 
            smaller than the epsilon tolerance are treated as equal to 0. Floating-point values are
            considered equal when the difference is less than the epsilon tolerance.
            </para>
            <para>
            Some methods allow to use a custom epsilon. If the method has no epsilon parameter, then the
            default values <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/> (for <see langword="float"/>) or 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/> (for <see langword="double"/>) are used.
            </para>
            <para>
            Note that when two large floating-point numbers need to be compared a bigger epsilon tolerance
            needs to be used than when comparing a floating-point number with zero. When comparing two 
            floating-point numbers using the default epsilon tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/> or 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/> (see <see cref="M:DigitalRune.Mathematics.Numeric.AreEqual(System.Single,System.Single)"/> or 
            <see cref="M:DigitalRune.Mathematics.Numeric.AreEqual(System.Double,System.Double)"/>) then the epsilon values are automatically scaled to
            match the range and resolution of the floating-point numbers. When two floating-point numbers
            are compared using an explicit epsilon value (see <see cref="M:DigitalRune.Mathematics.Numeric.AreEqual(System.Single,System.Single,System.Single)"/> or
            <see cref="M:DigitalRune.Mathematics.Numeric.AreEqual(System.Double,System.Double,System.Double)"/>) then this epsilon value is used directly.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Numeric.EpsilonF">
            <summary>
            Gets or sets the tolerance value used for comparison of <see langword="float"/> values.
            </summary>
            <value>The epsilon for single-precision floating-point.</value>
            <remarks>
            This value can be changed to set a new value for all subsequent comparisons.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Numeric.EpsilonFSquared">
            <summary>
            Gets the squared tolerance value used for comparison of <see langword="float"/> values.
            (<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/> * <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <value>The squared epsilon for single-precision floating-point.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Numeric.EpsilonD">
            <summary>
            Gets or sets the tolerance value used for comparison of <see langword="double"/> values.
            </summary>
            <value>The epsilon for double-precision floating-point.</value>
            <remarks>
            This value can be changed to set a new value for all subsequent comparisons.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Numeric.EpsilonDSquared">
            <summary>
            Gets the squared tolerance value used for comparison of <see langword="double"/> values.
            (<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/> * <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <value>The squared epsilon for double-precision floating-point.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.AreEqual(System.Single,System.Single)">
            <overloads>
            <summary>
            Determines whether two values are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two values are equal (regarding the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
            <see langword="true"/> if the specified values are equal (within the tolerance); otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            <strong>Important:</strong> When at least one of the parameters is a 
            <see cref="F:System.Single.NaN"/> the result is undefined. Such cases should be handled explicitly
            by the calling application.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.AreEqual(System.Double,System.Double)">
            <summary>
            Determines whether two values are equal (regarding the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
            <see langword="true"/> if the specified values are equal (within the tolerance); otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            <strong>Important:</strong> When at least one of the parameters is a 
            <see cref="F:System.Double.NaN"/> the result is undefined. Such cases should be handled explicitly by
            the calling application.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether two values are equal (regarding a specific tolerance).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the specified values are equal (within the tolerance); otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            <strong>Important:</strong> When at least one of the parameters is a 
            <see cref="F:System.Single.NaN"/> the result is undefined. Such cases should be handled explicitly by
            the calling application.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether two values are equal (regarding a specific tolerance).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the specified values are equal (within the tolerance); otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            <strong>Important:</strong> When at least one of the parameters is a 
            <see cref="F:System.Double.NaN"/> the result is undefined. Such cases should be handled explicitly by
            the calling application.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsLess(System.Single,System.Single)">
            <overloads>
            <summary>
            Determines whether a value is less than another value (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether a value is less than another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> &lt; <paramref name="value2"/> and the
            difference between <paramref name="value1"/> and <paramref name="value2"/> is greater than
            or equal to the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsLess(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether a value is less than another value (regarding the specified tolerance).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> &lt; <paramref name="value2"/> and the
            difference between <paramref name="value1"/> and <paramref name="value2"/> is greater than
            or equal to the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsLess(System.Double,System.Double)">
            <summary>
            Determines whether a value is less than another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> &lt; <paramref name="value2"/> and the
            difference between <paramref name="value1"/> and <paramref name="value2"/> is greater than
            or equal to the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsLess(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether a value is less than another value (regarding the specified tolerance).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> &lt; <paramref name="value2"/> and the
            difference between <paramref name="value1"/> and <paramref name="value2"/> is greater than
            or equal to the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsLessOrEqual(System.Single,System.Single)">
            <overloads>
            <summary>
            Determines whether a value is less than or equal to another value (regarding a given 
            tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether a value is less than or equal to another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> ≤ <paramref name="value2"/> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsLessOrEqual(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether a value is less than or equal to another value (regarding the specified
            tolerance).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> ≤ <paramref name="value2"/> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsLessOrEqual(System.Double,System.Double)">
            <summary>
            Determines whether a value is less than or equal to another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> ≤ <paramref name="value2"/> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsLessOrEqual(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether a value is less than or equal to another value (regarding the specified 
            tolerance).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> ≤ <paramref name="value2"/> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsGreater(System.Single,System.Single)">
            <overloads>
            <summary>
            Determines whether a value is greater than another value (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether a value is greater than another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
            <see langword="true"/> if the difference between <paramref name="value1"/> and 
            <paramref name="value2"/> is greater than or equal to the epsilon tolerance and 
            <paramref name="value1"/> &gt; <paramref name="value2"/>; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsGreater(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether a value is greater than another value (regarding the specified
            tolerance).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> &gt; <paramref name="value2"/> and the
            difference between <paramref name="value1"/> and <paramref name="value2"/> is greater than
            or equal to the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsGreater(System.Double,System.Double)">
            <summary>
            Determines whether a value is greater than another value (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> &gt; <paramref name="value2"/> and the
            difference between <paramref name="value1"/> and <paramref name="value2"/> is greater than
            or equal to the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsGreater(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether a value is greater than another value (regarding the specified
            tolerance).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> &gt; <paramref name="value2"/> and the
            difference between <paramref name="value1"/> and <paramref name="value2"/> is greater than
            or equal to the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsGreaterOrEqual(System.Single,System.Single)">
            <overloads>
            <summary>
            Determines whether a value is greater than or equal to another value (regarding a given 
            tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether a value is greater than or equal to another value (regarding the
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> ≥ <paramref name="value2"/> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsGreaterOrEqual(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether a value is greater than or equal to another value (regarding the 
            specified tolerance).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> ≥ <paramref name="value2"/> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsGreaterOrEqual(System.Double,System.Double)">
            <summary>
            Determines whether a value is greater than or equal to another value (regarding the
            tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> ≥ <paramref name="value2"/> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsGreaterOrEqual(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether a value is greater than or equal to another value (regarding the 
            specified tolerance).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value1"/> ≥ <paramref name="value2"/> or their 
            difference is less than the epsilon tolerance; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.ClampToZero(System.Single)">
            <overloads>
            <summary>
            Clamps near-zero values to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero values to zero.
            </summary>
            <param name="value">The value.</param>
            <returns>
            0 if value is nearly zero (within the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>) or the
            original value otherwise.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.ClampToZero(System.Single,System.Single)">
            <summary>
            Clamps near-zero values to zero.
            </summary>
            <param name="value">The value.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            0 if the value is nearly zero (within the tolerance <paramref name="epsilon"/>) or the 
            original value otherwise.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.ClampToZero(System.Double)">
            <summary>
            Clamps near-zero values to zero.
            </summary>
            <param name="value">The value.</param>
            <returns>
            0 if the value is nearly zero (within the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>) 
            or the original value otherwise.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.ClampToZero(System.Double,System.Double)">
            <summary>
            Clamps near-zero values to zero.
            </summary>
            <param name="value">The value.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            0 if the value is nearly zero (within the tolerance <paramref name="epsilon"/>) or the
            original value otherwise.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsZero(System.Single)">
            <overloads>
            <summary>
            Determines whether a value is zero (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether a <paramref name="value"/> is zero (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="value">The value to test.</param>
            <returns>
            <see langword="true"/> if the specified value is zero (within the tolerance); otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            A value is zero if |x| &lt; <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsZero(System.Double)">
            <summary>
            Determines whether a value is zero (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="value">The value to test.</param>
            <returns>
            <see langword="true"/> if the specified value is zero (within the tolerance); otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            A value is zero if |x| &lt; <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsZero(System.Single,System.Single)">
            <summary>
            Determines whether a value is zero (regarding a specific tolerance).
            </summary>
            <param name="value">The value to test.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the specified value is zero (within the tolerance); otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            A value is zero if |x| &lt; epsilon.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsZero(System.Double,System.Double)">
            <summary>
            Determines whether a value is zero (regarding a specific tolerance).
            </summary>
            <param name="value">The value to test.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the specified value is zero (within the tolerance); otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            A value is zero if |x| &lt; epsilon.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.Compare(System.Single,System.Single)">
            <overloads>
            <summary>
            Compares two floating-point values (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Compares two <see langword="float"/> values (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
            -1 if <paramref name="value1"/> is less than <paramref name="value2"/>, +1 if 
            <paramref name="value1"/> is greater than <paramref name="value2"/>, and 0 if the values are
            equal (within the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </returns>
            <remarks>
            <strong>Important:</strong> When at least one of the parameters is a special floating-point
            value (such as <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.PositiveInfinity"/>, or 
            <see cref="F:System.Single.NegativeInfinity"/>), the result is undefined. Such cases should be
            handled explicitly by the calling application.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.Compare(System.Double,System.Double)">
            <summary>
            Compares two <see langword="double"/> values (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>
            -1 if <paramref name="value1"/> is less than <paramref name="value2"/>, +1 if 
            <paramref name="value1"/> is greater than <paramref name="value2"/>, and 0 if the values are
            equal (within the tolerance <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </returns>
            <remarks>
            <strong>Important:</strong> When at least one of the parameters is a special floating-point
            value (such as <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.PositiveInfinity"/>, or 
            <see cref="F:System.Double.NegativeInfinity"/>), the result is undefined. Such cases should be
            handled explicitly by the calling application.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.Compare(System.Single,System.Single,System.Single)">
            <summary>
            Compares two <see langword="float"/> values (regarding a specific tolerance).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The tolerance value for equality.</param>
            <returns>
            -1 if <paramref name="value1"/> is less than <paramref name="value2"/>, +1 if 
            <paramref name="value1"/> is greater than <paramref name="value2"/>, and 0 if the values are
            equal (within the tolerance <paramref name="epsilon"/>).
            </returns>
            <remarks>
            <strong>Important:</strong> When at least one of the parameters is a special floating-point
            value (such as <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.PositiveInfinity"/>, or 
            <see cref="F:System.Single.NegativeInfinity"/>), the result is undefined. Such cases should be
            handled explicitly by the calling application.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.Compare(System.Double,System.Double,System.Double)">
            <summary>
            Compares two <see langword="double"/> values (regarding a specific tolerance).
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="epsilon">The tolerance value for equality.</param>
            <returns>
            -1 if <paramref name="value1"/> is less than <paramref name="value2"/>, +1 if 
            <paramref name="value1"/> is greater than <paramref name="value2"/>, and 0 if the values are
            equal (within the tolerance <paramref name="epsilon"/>).
            </returns>
            <remarks>
            <strong>Important:</strong> When at least one of the parameters is a special 
            floating-point value (such as <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.PositiveInfinity"/>, 
            or <see cref="F:System.Double.NegativeInfinity"/>), the result is undefined. Such cases 
            should be handled explicitly by the calling application.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="epsilon"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsFiniteOrNaN(System.Single)">
            <overloads>
            <summary>
            Determines whether the specified value is finite or NaN.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified value is finite or <see cref="F:System.Single.NaN"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is finite or <see cref="F:System.Single.NaN"/>; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsFiniteOrNaN(System.Double)">
            <summary>
            Determines whether the specified value is finite or <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is finite or <see cref="F:System.Double.NaN"/>; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsFinite(System.Single)">
            <overloads>
            <summary>
            Determines whether the specified value is finite.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified value is finite.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is finite; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsFinite(System.Double)">
            <summary>
            Determines whether the specified value is finite.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is finite; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsPositive(System.Single)">
            <overloads>
            <summary>
            Determines whether the specified value is positive.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified value is positive.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is positive; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsPositive(System.Double)">
            <summary>
            Determines whether the specified value is positive.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is positive; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsNegative(System.Single)">
            <overloads>
            <summary>
            Determines whether the specified value is negative.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified value is negative.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is negative; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsNegative(System.Double)">
            <summary>
            Determines whether the specified value is negative.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is negative; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsPositiveFinite(System.Single)">
            <overloads>
            <summary>
            Determines whether the specified value is positive finite.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified value is positive finite.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is a positive finite number; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsPositiveFinite(System.Double)">
            <summary>
            Determines whether the specified value is positive finite.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is a positive finite number; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsNegativeFinite(System.Single)">
            <overloads>
            <summary>
            Determines whether the specified value is negative finite.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified value is negative finite.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is a negative finite number; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsNegativeFinite(System.Double)">
            <summary>
            Determines whether the specified value is negative finite.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is a negative finite number; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsZeroOrPositiveFinite(System.Single)">
            <overloads>
            <summary>
            Determines whether the specified value is 0 or positive finite.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified value is 0 or positive finite.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is 0 or a positive finite number; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsZeroOrPositiveFinite(System.Double)">
            <summary>
            Determines whether the specified value is 0 or positive finite.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is 0 or a positive finite number; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsZeroOrNegativeFinite(System.Single)">
            <overloads>
            <summary>
            Determines whether the specified value is 0 or negative finite.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified value is 0 or negative finite.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is 0 or a negative finite number; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsZeroOrNegativeFinite(System.Double)">
            <summary>
            Determines whether the specified value is 0 or negative finite.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is 0 or a negative finite number; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsNaN(System.Single)">
            <summary>
            Returns a value indicating whether the specified number is <see cref="F:System.Single.NaN"/>.
            </summary>
            <param name="value">A single-precision floating-point number.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> evaluates to <see cref="F:System.Single.NaN"/>;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The standard CLR <see cref="M:System.Single.IsNaN(System.Single)"/> function is slower than this wrapper, so please
            make sure to use this <see cref="M:DigitalRune.Mathematics.Numeric.IsNaN(System.Single)"/> in performance sensitive code.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.IsNaN(System.Double)">
            <summary>
            Returns a value indicating whether the specified number is <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="value">A double-precision floating-point number.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> evaluates to <see cref="F:System.Double.NaN"/>;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The standard CLR <see cref="M:System.Double.IsNaN(System.Double)"/> function is slower than this wrapper, so please
            make sure to use this <see cref="M:DigitalRune.Mathematics.Numeric.IsNaN(System.Double)"/> in performance sensitive code.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.GetSignificantBitsUnsigned(System.Single,System.Int32)">
            <summary>
            Gets the significant bits of a floating-point number, which can be used for rough 
            comparisons or sorting. (The floating-point number must be positive.)
            </summary>
            <param name="value">The floating-point number.</param>
            <param name="n">The number of significant bits.</param>
            <returns>The <paramref name="n"/> significant bits of <paramref name="value"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Numeric.GetSignificantBitsSigned(System.Single,System.Int32)">
            <summary>
            Gets the significant bits of a floating-point number, which can be used for rough
            comparisons or sorting. (The floating-point number can negative or positive.)
            </summary>
            <param name="value">The floating-point number.</param>
            <param name="n">The number of significant bits.</param>
            <returns>The <paramref name="n"/> significant bits of <paramref name="value"/>.</returns>
            <remarks>
            The sign bit is flipped to ensure that the bit representation of a positive floating-point
            number is greater than the bit representation of a negative number.
            </remarks>
        </member>
        <member name="T:DigitalRune.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune"/> namespace provides general helper classes for .NET.
            </summary>
        </member>
        <member name="T:DigitalRune.NativeMethods">
            <summary>
            Provides access to native methods using P/Invoke.
            </summary>
        </member>
        <member name="M:DigitalRune.NativeMethods.LoadImage(System.IntPtr,System.String,System.UInt32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Loads an icon, cursor, animated cursor, or bitmap.
            </summary>
            <param name="instance">A handle to the module that contains the image to be loaded. </param>
            <param name="fileName">The name of the image to be loaded.</param>
            <param name="type">The type of image to be loaded: 0 = bitmap, 1 = icon, 2 = cursor.</param>
            <param name="width">The width in pixels.</param>
            <param name="height">The height in pixels.</param>
            <param name="load">The load parameter.</param>
            <returns>The handle of the newly loaded image, or <see cref="F:System.IntPtr.Zero"/>.</returns>
            <remarks>
            See <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms648045.aspx"/>
            </remarks>
        </member>
        <member name="M:DigitalRune.NativeMethods.DestroyCursor(System.IntPtr)">
            <summary>
            Destroys the specified cursor and frees the allocated memory.
            </summary>
            <param name="cursor">The handle of the cursor.</param>
            <returns><see langword="true"/> if successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DigitalRune.NativeMethods.ToUnicode(System.UInt32,System.UInt32,System.Byte[],System.Char@,System.Int32,System.UInt32)">
            <summary>
            Translates the specified virtual-key code and keyboard state to the corresponding Unicode 
            character or characters.
            </summary>
            <param name="wVirtKey">The virtual-key code to be translated.</param>
            <param name="wScanCode">
            The hardware scan code of the key to be translated. The high-order bit of this value is set 
            if the key is up.
            </param>
            <param name="lpKeyState">
            A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) 
            in the array contains the state of one key. If the high-order bit of a byte is set, the key 
            is down.
            </param>
            <param name="pwszBuff">
            The translated Unicode character. 
            </param>
            <param name="cchBuff">Must be 1.</param>
            <param name="wFlags">
            The behavior of the function. If bit 0 is set, a menu is active. Bits 1 through 31 are 
            reserved.
            </param>
            <returns>
            A value indicating the result of the function.
            </returns>
            <remarks>
            See <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms646322.aspx"/>
            </remarks>
        </member>
        <member name="M:DigitalRune.NativeMethods.ToUnicodeEx(System.UInt32,System.UInt32,System.Byte[],System.Char@,System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            Translates the specified virtual-key code and keyboard state to the corresponding Unicode 
            character or characters.
            </summary>
            <param name="wVirtKey">The virtual-key code to be translated.</param>
            <param name="wScanCode">
            The hardware scan code of the key to be translated. The high-order bit of this value is set 
            if the key is up.
            </param>
            <param name="lpKeyState">
            A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) 
            in the array contains the state of one key. If the high-order bit of a byte is set, the key 
            is down.
            </param>
            <param name="pwszBuff">
            The translated Unicode character. 
            </param>
            <param name="cchBuff">Must be 1.</param>
            <param name="wFlags">
            The behavior of the function. If bit 0 is set, a menu is active. Bits 1 through 31 are 
            reserved.
            </param>
            <param name="layout">
            The input locale identifier used to translate the specified code. This parameter can be any
            input locale identifier previously returned by the LoadKeyboardLayout function.
            </param>
            <returns>
            A value indicating the result of the function.
            </returns>
            <remarks>
            See <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms646322.aspx"/>
            </remarks>
        </member>
        <member name="M:DigitalRune.NativeMethods.MapVirtualKeyEx(System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Translates (maps) a virtual-key code into a scan code or character value, or translates a
            scan code into a virtual-key code.
            </summary>
            <param name="uCode">The virtual-key code or scan code for a key.</param>
            <param name="uMapType">The translation to perform.</param>
            <param name="layout">Input locale identifier to use for translating the specified code.</param>
            <returns>The scan code, a virtual-key code, or a character value.</returns>
            <remarks>
            See <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms646307.aspx"/>
            </remarks>
        </member>
        <member name="M:DigitalRune.NativeMethods.GetKeyboardLayout(System.UInt32)">
            <summary>
            Retrieves the active input locale identifier (formerly called the keyboard layout).
            </summary>
            <param name="thread">
            The identifier of the thread to query, or 0 for the current thread.
            </param>
            <returns>The return value is the input locale identifier for the thread.</returns>
            <remarks>
            See <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms646296.aspx"/>
            </remarks>
        </member>
        <member name="M:DigitalRune.NativeMethods.GetKeyboardLayoutName(System.Text.StringBuilder)">
            <summary>
            Retrieves the name of the active input locale identifier (formerly called the keyboard 
            layout) for the system.
            </summary>
            <param name="pwszKLID">
            The buffer (of at least KL_NAMELENGTH characters in length) that receives the name of the 
            input locale identifier, including the terminating null character. This will be a copy of 
            the string provided to the LoadKeyboardLayout function, unless layout substitution took 
            place.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return 
            value is zero.To get extended error information, call GetLastError.
            </returns>
            <remarks>
            See <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms646298.aspx"/>
            </remarks>
        </member>
        <member name="M:DigitalRune.NativeMethods.uname(System.IntPtr)">
            <summary>
            Fills in the specified buffer with information about the system.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            On success, zero is returned.  On error, -1 is returned, and errno is
            set appropriately.
            </returns>
            <remarks>
            See also http://man7.org/linux/man-pages/man2/uname.2.html.
            </remarks>
        </member>
        <member name="T:DigitalRune.ObjectHelper">
            <summary>
            Provides extension methods applicable to all objects.
            </summary>
        </member>
        <member name="M:DigitalRune.ObjectHelper.GetPropertyName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <overloads>
            <summary>
            Retrieves the name of a property identified by a lambda expression.
            </summary>
            </overloads>
            
            <summary>
            Retrieves the name of a given object's property identified by a lambda expression.
            </summary>
            <typeparam name="TObject">The type of object containing the property.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="this">The object containing the property.</param>
            <param name="expression">
            A lambda expression selecting the property from the containing object.
            </param>
            <returns>The name of the property accessed by <paramref name="expression"/>.</returns>
            <remarks>
            It is recommended to use this method to access the name of a property instead of using 
            hard-coded string values.
            </remarks>
            <example>
            The following example shows how to retrieve the name of a property as a string.
            <code lang="csharp">
            <![CDATA[
            class MyClass
            {
              public int MyProperty { get; set; }
            }
            
            ...
            
            MyClass myClass = new MyClass();
            
            // The following line retrieves the property name as a string.
            string propertyName = myClass.GetPropertyName(o => o.MyProperty);
            ]]>
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="expression"/> does not represent an expression accessing a property.
            </exception>
        </member>
        <member name="M:DigitalRune.ObjectHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Retrieves the name of a property identified by a lambda expression.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="expression">A lambda expression selecting the property.</param>
            <returns>The name of the property accessed by <paramref name="expression"/>.</returns>
            <remarks>
            It is recommended to use this method to access the name of a property instead of using 
            hard-coded string values.
            </remarks>
            <example>
            The following example shows how to retrieve the name of a property as a string.
            <code lang="csharp">
            <![CDATA[
            class MyClass
            {
              public int MyProperty { get; set; }
            }
            
            ...
            
            MyClass myClass = new MyClass();
            
            // The following line retrieves the property name as a string.
            string propertyName = ObjectHelper.GetPropertyName(() => myClass.MyProperty);
            ]]>
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="expression"/> does not represent an expression accessing a property.
            </exception>
        </member>
        <member name="M:DigitalRune.ObjectHelper.Parse``1(System.String)">
            <summary>
            Parses the specified value (using the invariant culture).
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The value.</param>
            <returns>The parsed value.</returns>
            <remarks>
            <para>
            This method can parse values of types that
            <list type="bullet">
            <item>implement <strong>System.IConvertible</strong>,</item>
            <item>have a static method <strong>Parse(string)</strong> or <strong>Parse(string, IFormatProvider)</strong>, or</item>
            <item>have a <strong>TypeConverter</strong>.</item>
            </list>
            </para>
            <para>
            A <see cref="T:System.NotSupportedException"/> is thrown for other types that do not have an 
            automatic mechanism for value conversion from string. Further, an exception can be thrown
            if the given string is invalid.
            </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            Cannot convert string to target type.
            </exception>
        </member>
        <member name="M:DigitalRune.ObjectHelper.Parse(System.Type,System.String)">
            <summary>
            Parses a string and converts it to the specified type (using the invariant culture).
            </summary>
            <param name="type">The target type.</param>
            <param name="value">The value.</param>
            <returns>An instance of the given type that represents the string value.</returns>
            <remarks>
            <para>
            This method can parse values of types that
            <list type="bullet">
            <item>implement <strong>System.IConvertible</strong>,</item>
            <item>have a static method <strong>Parse(string)</strong> or <strong>Parse(string, IFormatProvider)</strong>, or</item>
            <item>have a <strong>TypeConverter</strong>.</item>
            </list>
            </para>
            <para>
            A <see cref="T:System.NotSupportedException"/> is thrown for other types that do not have an 
            automatic mechanism for value conversion from string. Further, an exception can be thrown
            if the given string is invalid.
            </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            Cannot convert string to target type.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.ObjectHelper.CanParse(System.Type)">
            <summary>
            Determines the <see cref="T:DigitalRune.ObjectHelper"/> <strong>Parse</strong> methods can parse the 
            given type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <see langword="true"/> if the type can be parsed; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.ObjectHelper.GetTypeConverter(System.Type)">
            <summary>
            Gets the type converter for the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            A new type converter instance for the given type; or <see langword="null"/> if no type
            converter was found.
            </returns>
            <remarks>
            This method is similar to <strong>TypeDescriptor.GetConverter(Type)</strong> - but it is 
            also available in Silverlight and on the Xbox 360.
            </remarks>
        </member>
        <member name="M:DigitalRune.ObjectHelper.IsConvertible(System.Object)">
            <overloads>
            <summary>
            Determines whether the specified object/type is a base data type or implements the
            <see cref="T:System.IConvertible"/> interface.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified object is a base data type or implements the
            <see cref="T:System.IConvertible"/> interface.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> is convertible; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.ObjectHelper.IsConvertible(System.Type)">
            <summary>
            Determines whether the specified type is a base data type or implements the 
            <see cref="T:System.IConvertible"/> interface.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <see langword="true"/> if <paramref name="type"/> is a convertible; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.ObjectHelper.ConvertTo``1(System.Object)">
            <overloads>
            <summary>
            Converts the object to the specified target type.
            </summary>
            </overloads>
            
            <summary>
            Converts the object to the specified target type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>A value of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.FormatException">
            <paramref name="value"/> is not in a format for <typeparamref name="T"/> recognized by the
            current format provider.
            </exception>
            <exception cref="T:System.InvalidCastException">
            This conversion is not supported.<br/>
            Or, <paramref name="value"/> is <see langword="null"/> and <typeparamref name="T"/> is a
            value type. Or, <paramref name="value"/> does not implement the <see cref="T:System.IConvertible"/>
            interface.
            </exception>
            <exception cref="T:System.OverflowException">
            <paramref name="value"/> represents a number that is out of the range of 
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.ObjectHelper.ConvertTo``1(System.Object,System.IFormatProvider)">
            <summary>
            Converts the object to the specified target type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <returns>A value of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.FormatException">
            <paramref name="value"/> is not in a format for <typeparamref name="T"/> recognized by 
            <paramref name="provider"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            This conversion is not supported.<br/>
            Or, <paramref name="value"/> is <see langword="null"/> and <typeparamref name="T"/> is a
            value type. Or, <paramref name="value"/> does not implement the <see cref="T:System.IConvertible"/>
            interface.
            </exception>
            <exception cref="T:System.OverflowException">
            <paramref name="value"/> represents a number that is out of the range of 
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.ObjectHelper.SafeDispose``1(``0)">
            <summary>
            Safely disposes the object.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to dispose. Can be <see langword="null"/>.</param>
            <remarks>
            The method calls <see cref="M:System.IDisposable.Dispose"/> if the <paramref name="obj"/> is not null
            and implements the interface <see cref="T:System.IDisposable"/>.
            </remarks>
        </member>
        <member name="T:DigitalRune.PlatformHelper">
            <summary>
            Provides helper methods for platform-specific tasks. (For internal use by other DigitalRune
            libraries.)
            </summary>
            <remarks>
            Most DigitalRune libraries are platform-independent, portable class libraries. These libraries
            cannot access platform-specific functions directly. The <see cref="T:DigitalRune.PlatformHelper"/> provides
            access to platform-specific functions as needed.
            </remarks>
        </member>
        <member name="M:DigitalRune.PlatformHelper.IsRunningOnMac">
            <summary>
            Determines whether [is running on mac].
            </summary>
            <returns><see langword="true" /> if [is running on mac]; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:DigitalRune.PlatformHelper.DefaultCursor">
            <summary>
            Gets the default cursor (<strong>System.Windows.Forms.Form</strong>).
            </summary>
            <value>
            The default cursor (<strong>System.Windows.Forms.Cursors.Arrow</strong>) or 
            <see langword="null"/> if <strong>System.Windows.Forms</strong> is not available on the 
            target platform.
            </value>
        </member>
        <member name="M:DigitalRune.PlatformHelper.CreateCursor(System.String)">
            <overloads>
            <summary>
            Creates a <strong>System.Windows.Forms.Cursor</strong> instance.
            </summary>
            </overloads>
            
            <summary>
            Creates a <strong>System.Windows.Forms.Cursor</strong> instance.
            </summary>
            <param name="fileName">
            The file path of the cursor file (usually .cur or .ani).
            </param>
            <returns>
            The <strong>System.Windows.Forms.Cursor</strong> object or <see langword="null"/> if
            <strong>System.Windows.Forms</strong> is not available on the target platform.
            </returns>
        </member>
        <member name="M:DigitalRune.PlatformHelper.CreateCursor(System.IO.Stream)">
            <summary>
            Creates a <strong>System.Windows.Forms.Cursor</strong> instance.
            </summary>
            <param name="stream">
            A stream for reading the cursor file (usually .cur or .ani).
            </param>
            <returns>
            The <strong>System.Windows.Forms.Cursor</strong> object or <see langword="null"/> if
            <strong>System.Windows.Forms</strong> is not available on the target platform.
            </returns>
        </member>
        <member name="M:DigitalRune.PlatformHelper.DestroyCursor(System.Object)">
            <summary>
            Destroys a cursor that was created using (<see cref="M:DigitalRune.PlatformHelper.CreateCursor(System.String)"/>).
            </summary>
            <param name="cursor">The <strong>System.Windows.Forms.Cursor</strong>.</param>
        </member>
        <member name="M:DigitalRune.PlatformHelper.GetForm(System.IntPtr)">
            <summary>
            Gets the <strong>System.Windows.Forms.Form</strong> associated with the given handle.
            </summary>
            <param name="handle">
            An <see cref="T:System.IntPtr"/> that represents the Windows handle of a form.
            </param>
            <returns>
            The <strong>System.Windows.Forms.Form</strong> object or <see langword="null"/> if 
            <strong>System.Windows.Forms</strong> is not available on the target platform.
            </returns>
        </member>
        <member name="M:DigitalRune.PlatformHelper.IsFormVisible(System.Object)">
            <summary>
            Determines whether the specified form is visible.
            </summary>
            <param name="form">The <strong>System.Windows.Forms.Form</strong>.</param>
            <returns>
            <see langword="true"/> if the form is visible; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="form"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <strong>System.Windows.Forms</strong> is not available on the target platform.
            </exception>
        </member>
        <member name="M:DigitalRune.PlatformHelper.SetCursor(System.Object,System.Object)">
            <summary>
            Sets the cursor of the specified form.
            </summary>
            <param name="form">The <strong>System.Windows.Forms.Form</strong>.</param>
            <param name="cursor">The <strong>System.Windows.Forms.Cursor</strong>.</param>
        </member>
        <member name="P:DigitalRune.PlatformHelper.IsClipboardSupported">
            <summary>
            Gets a value indicating whether the <strong>System.Windows.Forms.Clipboard</strong> is
            supported on the current platform.
            </summary>
            <value>
            <see langword="true"/> if the clipboard is supported on the current platform; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.PlatformHelper.GetClipboardText">
            <summary>
            Gets the clipboard text.
            </summary>
            <returns>The text from the clipboard.</returns>
        </member>
        <member name="M:DigitalRune.PlatformHelper.SetClipboardText(System.String)">
            <summary>
            Sets the clipboard text.
            </summary>
            <param name="text">The text.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.PlatformHelper.MouseWheelScrollDelta">
            <summary>
            Gets the amount of the delta value of a single mouse wheel rotation increment.
            </summary>
            <value>
            The amount of the delta value of a single mouse wheel rotation increment.
            </value>
        </member>
        <member name="P:DigitalRune.PlatformHelper.MouseWheelScrollLines">
            <summary>
            Gets the number of lines to scroll when the mouse wheel is rotated.
            </summary>
            <value>
            The number of lines to scroll on a mouse wheel rotation, or -1 if the "One screen at a time" 
            mouse option is selected. 
            </value>
        </member>
        <member name="T:DigitalRune.PlatformHelper.KeyMapping">
            <summary>
            Maps a virtual-key code and combination of modifier keys to the corresponding Unicode
            character.
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformHelper.KeyMapping.Key">
            <summary>The virtual-key code.</summary>
        </member>
        <member name="F:DigitalRune.PlatformHelper.KeyMapping.ModifierKeys">
            <summary>The modifier keys (Alt = 1, Control = 2, Shift = 4).</summary>
        </member>
        <member name="F:DigitalRune.PlatformHelper.KeyMapping.Character">
            <summary>The character value.</summary>
        </member>
        <member name="M:DigitalRune.PlatformHelper.GetKeyMap(System.Int32[])">
            <summary>
            Gets the key map for the specified virtual-key codes.
            </summary>
            <param name="virtualKeyCodes">The virtual key codes.</param>
            <returns>
            The key map, which maps each virtual-key code and combination of modifier keys to the
            corresponding Unicode character.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="virtualKeyCodes"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.PlatformID">
            <summary>
            Identifies the platform for which an assembly was built.
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformID.Android">
            <summary>
            Android
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformID.iOS">
            <summary>
            Apple iOS
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformID.Linux">
            <summary>
            Linux
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformID.MacOS">
            <summary>
            Apple Mac OS X
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformID.Portable">
            <summary>
            Portable class library (PCL)
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformID.Silverlight">
            <summary>
            Silverlight
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformID.Unity">
            <summary>
            Unity game engine
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformID.Windows">
            <summary>
            Windows desktop
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformID.WindowsPhone7">
            <summary>
            Windows Phone 7
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformID.WindowsPhone8">
            <summary>
            Windows Phone 8
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformID.WindowsStore">
            <summary>
            Windows Store Apps (Windows 8)
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformID.WindowsUniversal">
            <summary>
            Universal windows platform
            </summary>
        </member>
        <member name="F:DigitalRune.PlatformID.Xbox360">
            <summary>
            Xbox 360
            </summary>
        </member>
        <member name="T:DigitalRune.PrimeHelper">
            <summary>
            Selecting prime numbers suitable for hash table sizes.
            </summary>
        </member>
        <member name="M:DigitalRune.PrimeHelper.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.PrimeHelper"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.PrimeHelper.IsPrime(System.Int32)">
            <summary>
            Determines whether the specified number is prime.
            </summary>
            <param name="value">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is prime; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.PrimeHelper.NextPrime(System.Int32)">
            <summary>
            Gets a prime number greater than or equal to the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            A prime number greater than or equal to <paramref name="value"/>. Returns <paramref name="value"/> 
            if no suitable prime number was found within the available range (up to 
            <see cref="F:System.Int32.MaxValue"/>).
            </returns>
        </member>
        <member name="T:DigitalRune.ReferenceEqualityComparer`1">
            <summary>
            Compares objects for equality by checking whether the specified <see cref="T:System.Object"/> instances 
            are the same instance.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
        </member>
        <member name="P:DigitalRune.ReferenceEqualityComparer`1.Default">
            <summary>
            Gets a default <see cref="T:DigitalRune.ReferenceEqualityComparer`1"/> for the type specified by the 
            generic argument. 
            </summary>
            <value>
            The default instance of the <see cref="T:DigitalRune.ReferenceEqualityComparer`1"/> class for type 
            <typeparamref name="T"/>.
            </value>
        </member>
        <member name="M:DigitalRune.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <overloads>
            <summary>
            Determines whether this <see cref="T:DigitalRune.ReferenceEqualityComparer`1"/> is equal to another 
            object or whether two objects of type <typeparamref name="T"/> are equal.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">
            The first object of type <typeparamref name="T"/> to compare.
            </param>
            <param name="y">
            The second object of type <typeparamref name="T"/> to compare.
            </param>
            <returns>
            <see langword="true"/> if the specified objects are equal; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <overloads>
            <summary>
            Returns a hash code for this <see cref="T:DigitalRune.ReferenceEqualityComparer`1"/> or an object of type
            <typeparamref name="T"/>.
            </summary>
            </overloads>
            
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is 
            <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.IRecyclable">
            <summary>
            Represents an object that supports resource pooling and can be recycled.
            </summary>
        </member>
        <member name="M:DigitalRune.IRecyclable.Recycle">
            <summary>
            Recycles this instance.
            </summary>
            <remarks>
            <para>
            This method resets this instance and returns it to a resource pool if resource pooling is 
            enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.ResourcePool">
            <summary>
            Manages a pool of reusable items (base implementation).
            </summary>
            <remarks>
            <para>
            A resource pool can be used to remove load from the .NET garbage collector: Instead of 
            allocating objects with <c>new</c>, objects are taken (see 
            <see cref="M:DigitalRune.ResourcePool`1.Obtain"/>) from a pool of objects when the are needed and returned
            (see <see cref="M:DigitalRune.ResourcePool`1.Recycle(`0)"/>) when they are no longer needed.
            </para>
            <para>
            It is safe to obtain multiple objects without recycling them. In this case the objects are
            simply collected by the .NET garbage collector. However, the benefits of resource pooling are 
            lost. To achieve optimal performance all objects, which are taken from the resource pool,
            should be returned to the resource pool.
            </para>
            <para>
            <strong>Performance Considerations:</strong> Resource pooling should only be applied if there
            is strong evidence that the .NET garbage collector poses a performance bottleneck. On 
            platforms, such as Windows, with a generational garbage collector it is in most cases 
            counterproductive to use a resource pool. By keeping a large pool of objects on the heap, the
            time of single garbage collection is increased and the overhead created by the resource 
            pooling is worse than allocating objects in .NET with <c>new</c>. But on some platforms, for 
            example the .NET Compact Framework on the Xbox 360, a resource pool can help to avoid frequent
            full collections by the garbage collector.
            </para>
            </remarks>
            <example>
            The following demonstrates how to create a resource pool.
            <code lang="csharp">
            <![CDATA[
            // Resource pools are usually static members of a type.
            public static readonly ResourcePool<List<float>> MyPool = 
              new ResourcePool<List<float>> (
                () => new List<float>(),   // Create
                null,                      // Initialize (not needed for List<float>)
                list => list.Clear());     // Uninitialize
            ]]>
            </code>
            <para>
            Note: The example above creates a resource pools for <see cref="T:System.Collections.Generic.List`1"/> for a certain type.
            DigitalRune already provides such a resource pool (see <see cref="T:DigitalRune.ResourcePools`1"/>), so it 
            is actually not required to create your own.
            </para>
            <para>
            The following demonstrates how to use the resource pool created in example above.
            </para>
            <code lang="csharp">
            <![CDATA[
            // Instead of calling 
            //   List<float> myList = new List<float>(); 
            // reuse existing list from resource pool.
            List<float> myList = MyPool.Obtain();
            
            // Do something with myList.
            ...
            
            // Return myList to resource pool when no longer needed.
            MyPool.Recycle(myList);
            myList = null;
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.ResourcePool.Enabled">
            <summary>
            Gets or sets a value indicating whether resource pooling is enabled.
            </summary>
            <value>
            <see langword="true"/> if enabled; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            This property can be set to <see langword="false"/> to disable resource pooling globally.
            When disabled, the resource pools will always return newly allocated items.
            </remarks>
        </member>
        <member name="P:DigitalRune.ResourcePool.Pools">
            <summary>
            Gets collection of all active <see cref="T:DigitalRune.ResourcePool"/>s.
            </summary>
            <value>All active <see cref="T:DigitalRune.ResourcePool"/>s.</value>
            <remarks>
            This property is intended for debugging purposes only.
            </remarks>
        </member>
        <member name="E:DigitalRune.ResourcePool.ClearingAll">
            <summary>
            Occurs at the start of <see cref="M:DigitalRune.ResourcePool.ClearAll"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.ResourcePool.Register(DigitalRune.ResourcePool)">
            <summary>
            Registers the specified resource pool.
            </summary>
            <param name="pool">The resource pool to register.</param>
        </member>
        <member name="M:DigitalRune.ResourcePool.Unregister(DigitalRune.ResourcePool)">
            <summary>
            Unregisters the specified resource pool.
            </summary>
            <param name="pool">The resource pool to unregister.</param>
        </member>
        <member name="M:DigitalRune.ResourcePool.ClearAll">
            <summary>
            Clears all resource pools.
            </summary>
        </member>
        <member name="M:DigitalRune.ResourcePool.Clear">
            <summary>
            Removes all items from the resource pool.
            </summary>
        </member>
        <member name="T:DigitalRune.ResourcePools`1">
            <summary>
            Provides resource pools for reusable generic collections.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <remarks>
            <para>
            Please read <see cref="T:DigitalRune.ResourcePool`1"/> first, to learn more about resource pooling.
            The static class <see cref="T:DigitalRune.ResourcePools`1"/> provides global pools for collections that
            are frequently used in the DigitalRune applications and libraries, but they can also be used
            in your application to avoid unnecessary memory allocations.
            </para>
            <para>
            New resource pools may be added to <see cref="T:DigitalRune.ResourcePools`1"/> in future releases of the 
            DigitalRune libraries.
            </para>
            <para>
            <strong>Thread-Safety:</strong> It is safe to access the resource pool from multiple threads
            simultaneously.
            </para>
            </remarks>
            <example>
            The following example shows how to reuse a generic list.
            <code lang="csharp">
            <![CDATA[
            // Obtain an empty list from the global resource pool.
            List<string> list = ResourcePools<string>.Lists.Obtain();
              
            // Do something with the list.
            
            // After use, recycle the list. (Note: It is not necessary to clear the list before
            // recycling. This will be handled automatically.)
            ResourcePools<string>.Lists.Recycle(list);
            list = null;
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DigitalRune.ResourcePools`1.HashSets">
            <summary>
            A resource pool containing collections of type <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.ResourcePools`1.Lists">
            <summary>
            A resource pool containing collections of type <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.ResourcePools`1.Stacks">
            <summary>
            A resource pool containing collections of type <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
        </member>
        <member name="T:DigitalRune.ResourcePool`1">
            <summary>
            Manages a pool of typed, reusable items. (Thread-safe)
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <remarks>
            <strong>Thread-Safety:</strong>
            The <see cref="T:DigitalRune.ResourcePool`1"/> is thread-safe. It is safe to access a resource pool from 
            multiple threads simultaneously. 
            </remarks>
            <inheritdoc cref="T:DigitalRune.ResourcePool"/>
        </member>
        <member name="M:DigitalRune.ResourcePool`1.#ctor(System.Func{`0},System.Action{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.ResourcePool`1"/> class with the given
            un-/initialize methods.
            </summary>
            <param name="create">
            The function that creates a new item of type <typeparamref name="T"/>.
            </param>
            <param name="initialize">
            The method that is executed on an item when it is obtained from the pool - can be
            <see langword="null"/>.
            </param>
            <param name="uninitialize">
            The method that is executed on an item when it is recycled - can be <see langword="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="create"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.ResourcePool`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.ResourcePool`1.Obtain">
            <summary>
            Obtains a new item by reusing an instance from the pool or by creating a new instance if 
            necessary.
            </summary>
            <returns>The item.</returns>
        </member>
        <member name="M:DigitalRune.ResourcePool`1.Recycle(`0)">
            <summary>
            Recycles the given item and places it back in the pool for future reuse.
            </summary>
            <param name="item">The item to be recycled.</param>
        </member>
        <member name="T:DigitalRune.Singleton`1">
            <summary>
            Base class for types to restrict instantiation to one object ("singleton pattern").
            </summary>
            <typeparam name="T">The type of the object that is instantiated.</typeparam>
            <remarks>
            <para>
            <strong>Important:</strong> In Silverlight the singleton type <typeparamref name="T"/> needs 
            to be a public type (not a private or internal). This is necessary because of security 
            restrictions in Silverlight.
            </para>
            <para>
            <strong>Thread-Safety:</strong> This class is thread-safe. The property 
            <see cref="P:DigitalRune.Singleton`1.Instance"/> can be accessed by multiple threads simultaneously.
            </para>
            </remarks>
            <example>
            A class can derive from <see cref="T:DigitalRune.Singleton`1"/> like the class <strong>Log</strong> in this
            example:
            <code>
            <![CDATA[
            public class Log : Singleton<Log>
            {
              ...
            }
            ]]>
            </code>
            The singleton can be instantiated/accessed by using the property <see cref="P:DigitalRune.Singleton`1.Instance"/>.
            <code>
            <![CDATA[
            var log = Log.Instance;
            var log = Singleton<Log>.Instance;
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Singleton`1.Instance">
            <summary>
            Gets the singleton of type <typeparamref name="T"/>.
            </summary>
            <value>The instance of type <typeparamref name="T"/>.</value>
        </member>
        <member name="M:DigitalRune.Singleton`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Singleton`1"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Constructor is called several times, but <see cref="T:DigitalRune.Singleton`1"/> can only be instantiated 
            once.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The class which derives from <see cref="T:DigitalRune.Singleton`1"/> is not of type 
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Storages.FileSystemStorage">
            <summary>
            Provides access to the file system of the operating system.
            (Not supported on these platforms: Windows Phone, Windows Store, Xbox 360)
            </summary>
            <remarks>
            <para>
            This type is not available on the following platforms: Windows Phone, Windows Store, Xbox 360
            </para>
            All file access is relative to the root directory specified in the constructor.
            </remarks>
        </member>
        <member name="P:DigitalRune.Storages.FileSystemStorage.DirectorySeparator">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Storages.FileSystemStorage.RootDirectory">
            <summary>
            Gets the absolute path to the root directory.
            </summary>
            <value>The absolute path to the root directory.</value>
            <remarks>
            All file access is relative to this root directory.
            </remarks>
        </member>
        <member name="M:DigitalRune.Storages.FileSystemStorage.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.FileSystemStorage"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.FileSystemStorage"/> class using the current
            working directory as the root directory.
            </summary>
        </member>
        <member name="M:DigitalRune.Storages.FileSystemStorage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.FileSystemStorage"/> class using the specified
            directory as the root directory.
            </summary>
            <param name="rootDirectory">
            The root directory specified relative to the current working directory or as an absolute
            path. Can be <see langword="null"/> or "" to select the current working directory. The path
            is evaluated in the constructor, i.e. changing the current working directory later on does
            not affect the <see cref="T:DigitalRune.Storages.FileSystemStorage"/>.
            </param>
        </member>
        <member name="M:DigitalRune.Storages.FileSystemStorage.GetRealPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Storages.FileSystemStorage.OpenFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Storages.FileSystemStorage.DigitalRune#Storages#IStorageInternal#TryOpenFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Storages.IStorageInternal.TryOpenFile(System.String)">
            <summary>
            Opens the specified file for reading.
            </summary>
            <param name="path">The file to open.</param>
            <returns>
            A <see cref="T:System.IO.Stream"/> object for reading the file. Returns <see langword="null"/> if file
            does not exist.
            </returns>
        </member>
        <member name="T:DigitalRune.Storages.IStorage">
            <summary>
            Provides access to files.
            </summary>
            <remarks>
            
            <note type="important">
            <para>
            <see cref="N:DigitalRune.Storages"/> currently only provides read access to files! Full 
            read/write access, as well as support for additional platforms, will be added in a future
            version.
            </para>
            </note>
            
            <para>
            The <see cref="T:DigitalRune.Storages.IStorage"/> interface provides a common API to access files from different
            sources. The following implementations provide access to physical file systems on different
            platforms:
            </para>
            <list type="bullet">
            <item>
            <term><see cref="T:DigitalRune.Storages.FileSystemStorage"/></term>
            <description>provides access to the file system of the operating system.</description>
            </item>
            <item>
            <term><see cref="T:DigitalRune.Storages.TitleStorage"/></term>
            <description>provides access to title storage on Xbox 360.</description>
            </item>
            <item>
            <term>(Not yet implemented) UserStorage</term>
            <description>provides access to user storage on Xbox 360.</description>
            </item>
            <item>
            <term>(Not yet implemented) IsolatedStorage</term>
            <description>provides access to isolated storage in Silverlight.</description>
            </item>
            <item>
            <term>(Not yet implemented) WindowsStorage</term>
            <description>provides access to storage folders in Windows Store apps.</description>
            </item>
            </list>
            <para>
            Some storages are built on top of other storages. For example:
            </para>
            <list type="bullet">
            <item>
            <term><see cref="T:DigitalRune.Storages.VfsStorage"/></term>
            <description>
            maps existing storages into a virtual file system. Different storage devices and locations can
            be treated as one directory hierarchy.
            </description>
            </item>
            <item>
            <term><see cref="T:DigitalRune.Storages.ZipStorage"/></term>
            <description>
            provides access to files stored in a ZIP archive. The ZIP archive can be read from any of the
            existing storages.
            </description>
            </item>
            </list>
            
            <para>
            <strong>Case-Sensitivity:</strong><br/>
            File retrieval is case-sensitive if the storage provider (e.g. the platform OS) is
            case-sensitive. It is recommended to assume case-sensitivity to ensure that applications can
            be ported to non-Windows platforms.
            </para>
            <para>
            <strong>Directory Separator:</strong><br/>
            Storages accepts '\' and '/' as directory separators. Internally, paths are normalized to use
            '/'.
            </para>
            
            <para>
            <strong>Possible Extensions:</strong><br/>
            The <see cref="T:DigitalRune.Storages.IStorage"/> concept is highly extensible. Developers can provide custom 
            <see cref="T:DigitalRune.Storages.IStorage"/> implementations to add support for new platforms or manipulate existing
            storages. Here are just a few features that could be implemented on top of 
            <see cref="T:DigitalRune.Storages.IStorage"/>:
            </para>
            <list type="bullet">
            <item>
            <term>Access control</term>
            <description>
            A storage may wrap another storage and implement access control to restrict user access or
            filter certain files. For example, a "ReadOnlyStorage" may prevent write access to an existing
            location.
            </description>
            </item>
            <item>
            <term>Archives</term>
            <description>
            Storages can be added to support other package formats, such as 7-Zip, BZIP2, PAK.
            </description>
            </item>
            <item>
            <term>Caching ("CachedStorage")</term>
            <description>
            Files from another storage could be cached in memory for faster access.
            </description>
            </item>
            <item>
            <term>Cloud storage</term>
            <description>A storage may access data in the cloud, such as OneDrive.</description>
            </item>
            <item>
            <term>Encryption ("EncryptedStorage")</term>
            <description>
            Data could be encrypted and decrypted when accessing files in an existing storage.
            </description>
            </item>
            <item>
            <term>Mapping ("RedirectStorage")</term>
            <description>Directories can transparently be mapped to different location.</description>
            </item>
            <item>
            <term>Redundancy ("MirroredStorage")</term>
            <description>File access could be mirrored across different storages.</description>
            </item>
            <item>
            <term>Ad-hoc storage</term>
            <description>
            Instead of accessing files on an existing devices or locations, files can be stored in custom
            data structures (DBs, BLOBs, ...).
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:DigitalRune.Storages.IStorage.GetRealPath(System.String)">
            <summary>
            Gets the real path and name of the specified file.
            </summary>
            <param name="path">The file to check.</param>
            <returns>
            The path where the specified file is located. If the file is located inside an archive, the
            path and name of the archive is returned; otherwise, <see langword="null"/> if the file was
            not found.
            </returns>
            <remarks>
            <para>
            Storages, such as the <see cref="T:DigitalRune.Storages.VfsStorage"/>, can be used to virtualize access to
            resources. File and directories from different location can be mapped into a virtual
            directory hierarchy. The method <see cref="M:DigitalRune.Storages.IStorage.GetRealPath(System.String)"/> can be used to resolve the actual
            source of a file.
            </para>
            <para>
            This method can only be used to query for files, but not directories. (Multiple directories
            may be mapped to the same virtual path.)
            </para>
            <note type="warning">
            <para>
            Some storages hide the actual file location and may return <see langword="null"/> even if
            the file exists. The files inside the storage can still be opened with <see cref="M:DigitalRune.Storages.IStorage.OpenFile(System.String)"/>
            but the real location is concealed. Therefore, <see cref="M:DigitalRune.Storages.IStorage.GetRealPath(System.String)"/> cannot be used to
            check if a file exists inside a storage.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:DigitalRune.Storages.IStorage.OpenFile(System.String)">
            <summary>
            Opens the specified file for reading.
            </summary>
            <param name="path">The file to open.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object for reading the file.</returns>
        </member>
        <member name="T:DigitalRune.Storages.IStorageProvider">
            <summary>
            Provides access to a <see cref="T:DigitalRune.Storages.IStorage"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Storages.IStorageProvider.Storage">
            <summary>
            Gets the storage.
            </summary>
            <value>The storage.</value>
        </member>
        <member name="T:DigitalRune.Storages.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Storages"/> namespace contains storage providers for accessing
            files from file system, ZIP archives, virtual file systems, etc.
            </summary>
        </member>
        <member name="T:DigitalRune.Storages.Path">
            <summary>
            A portable replacement of <strong>System.IO.Path</strong>.
            </summary>
        </member>
        <member name="F:DigitalRune.Storages.Path.DirectorySeparatorChar">
            <summary>
            Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="M:DigitalRune.Storages.Path.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Storages.Path"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Storages.Path.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the extension of a path string.
            </summary>
            <param name="path">The path information to modify.</param>
            <param name="extension">
            The new extension (with or without a leading period). Specify <see langword="null"/> to 
            remove an existing extension from <paramref name="path"/>.
            </param>
            <returns>
            A string containing the modified path information. 
            </returns>
        </member>
        <member name="M:DigitalRune.Storages.Path.Combine(System.String,System.String)">
            <summary>
            Combines two path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>
            A string containing the combined paths. If one of the specified paths is a zero-length 
            string, this method returns the other path. If <paramref name="path2"/> contains an absolute 
            path, this method returns <paramref name="path2"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Storages.Path.Combine(System.String[])">
            <summary>
            Combines an array of strings into a path.
            </summary>
            <param name="paths">An array of parts of the path.</param>
            <returns>A string that contains the combined paths. </returns>
        </member>
        <member name="M:DigitalRune.Storages.Path.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>
            Directory information for path, or <see langword="null"/> if <paramref name="path"/> denotes 
            a root directory or is null. Returns <see cref="F:System.String.Empty"/> if
            <paramref name="path"/> does not contain directory information. 
            </returns>
        </member>
        <member name="M:DigitalRune.Storages.Path.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">
            The file or directory for which to obtain absolute path information. 
            </param>
            <returns>
            A string containing the fully qualified location of <paramref name="path"/>, such as 
            "rootdir\MyFile.txt". 
            </returns>
        </member>
        <member name="M:DigitalRune.Storages.Path.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains a root.
            </summary>
            <param name="path">The path to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="path"/> contains a root; otherwise, 
            <see langword="false"/>. 
            </returns>
        </member>
        <member name="M:DigitalRune.Storages.Path.GetRelativePath(System.String,System.String)">
            <summary>
            Creates a relative file path.
            </summary>
            <param name="rootFolder">The root folder. Must be an absolute (rooted) file path.</param>
            <param name="file">The file path.</param>
            <returns>
            A path to <paramref name="file"/> which is relative to <paramref name="rootFolder"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Storages.Storage">
            <summary>
            Implements base functionality for storage providers.
            </summary>
            <inheritdoc cref="T:DigitalRune.Storages.IStorage"/>
        </member>
        <member name="P:DigitalRune.Storages.Storage.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Storages.Storage.DirectorySeparator">
            <summary>
            Gets the directory separator character used natively by this storage.
            </summary>
            <value>The directory separator.</value>
        </member>
        <member name="M:DigitalRune.Storages.Storage.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Storages.Storage"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Storages.Storage.Dispose(System.Boolean)"/> method, passing in
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Storages.Storage.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Storages.Storage"/> class
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Storages.Storage.GetRealPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Storages.Storage.OpenFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Storages.StorageHelper">
            <summary>
            Provides conversion and extension methods for <see cref="N:DigitalRune.Storages"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Storages.StorageHelper.BaseLocation">
            <summary>
            Gets the application installation folder.
            </summary>
            <value>The application installation folder.</value>
        </member>
        <member name="M:DigitalRune.Storages.StorageHelper.SwitchDirectorySeparator(System.String,System.Char)">
            <summary>
            Switches the directory separator character in the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="directorySeparator">The desired directory separator character.</param>
            <returns>The path using only the specified directory separator.</returns>
        </member>
        <member name="M:DigitalRune.Storages.StorageHelper.NormalizeMountPoint(System.String)">
            <summary>
            Validates the mount point and normalizes the path.
            </summary>
            <param name="path">The mount point.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Storages.StorageHelper.NormalizePath(System.String)">
            <summary>
            Validates and normalizes the path of a file in a storage.
            </summary>
            <param name="path">The path the file.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="T:DigitalRune.Storages.VfsMountInfo">
            <summary>
            Defines a point where a storage is mounted into a virtual file system.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Storages.VfsMountInfo"/> instance be shared among multiple <see cref="T:DigitalRune.Storages.VfsStorage"/>s.
            </para>
            <para>
            The path stored in <see cref="P:DigitalRune.Storages.VfsMountInfo.MountPoint"/> is automatically normalized. (For example:
            Backward slashes '\' are changed to forward slashes '/'.)
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Storages.VfsStorage"/>
        </member>
        <member name="P:DigitalRune.Storages.VfsMountInfo.Storage">
            <summary>
            Gets the storage that is mounted into the virtual file system.
            </summary>
            <value>The storage that is mounted into the virtual file system.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Storages.VfsMountInfo.MountPoint">
            <summary>
            Gets the path at which the storage is mounted into the virtual file system.
            </summary>
            <value>
            The mount point. Can be <see langword="null"/> or empty, which is equivalent to the root 
            directory "/" of the virtual file system.
            </value>
            <remarks>
            The path value stored in this property is automatically normalized. (For example: Backward 
            slashes '\' are changed to forward slashes '/'.)
            </remarks>
            <exception cref="T:System.ArgumentException">
            Invalid path specified as mount point.
            </exception>
        </member>
        <member name="M:DigitalRune.Storages.VfsMountInfo.#ctor(DigitalRune.Storages.IStorage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.VfsMountInfo"/> class.
            </summary>
            <param name="storage">The storage to be mounted.</param>
            <param name="mountPoint">
            The path at which the storage should be mounted. Can be <see langword="null"/> or empty,
            which is equivalent to the root directory "/" of the virtual file system.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="storage"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="storage"/> is empty, or <paramref name="mountPoint"/> is invalid.
            </exception>
        </member>
        <member name="T:DigitalRune.Storages.VfsMountInfoCollection">
            <summary>
            Manages the storages that are mounted into a virtual file system.
            </summary>
            <remarks>
            The order of the entries in this collection defines the search order for files and
            directories if the virtual file system.
            </remarks>
            <seealso cref="T:DigitalRune.Storages.VfsStorage"/>
        </member>
        <member name="M:DigitalRune.Storages.VfsMountInfoCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Storages.VfsMountInfoCollection"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Storages.VfsMountInfoCollection"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Storages.VfsStorage">
            <summary>
            Provides a virtual file system that maps existing storages into a virtual directory hierarchy.
            </summary>
            <remarks>
            <para>
            The class defines a <see href="http://en.wikipedia.org/wiki/Virtual_file_system">"virtual file
            system"</see> to transparently access files from multiple storage locations.
            </para>
            <para>
            The <see cref="T:DigitalRune.Storages.VfsStorage"/> is empty by default. Storages can be mounted into the virtual
            files system by adding a <see cref="T:DigitalRune.Storages.VfsMountInfo"/> entry to the <see cref="P:DigitalRune.Storages.VfsStorage.MountInfos"/>
            property.
            </para>
            <para>
            The <see cref="T:DigitalRune.Storages.VfsStorage"/> does not exclusively own the mounted storages. Storages can be
            shared between different virtual file systems. A storage may even be mounted multiple times
            at different mount points into the same virtual file system. The storages are not disposed
            when the <see cref="T:DigitalRune.Storages.VfsStorage"/> is disposed.
            </para>
            <note type="warning">
            <para>
            Recursively mounting a <see cref="T:DigitalRune.Storages.VfsStorage"/> to itself can lead to an endless loop when 
            searching for a files.
            </para>
            </note>
            <para>
            The <see cref="T:DigitalRune.Storages.VfsStorage"/> can be used to virtualize access to different devices to improve
            performance. For example, game content provided on a DVD can (optionally) be installed on
            harddisk and cached in memory for faster access. The storages managing the content locations
            (memory, harddisk, DVD) can be mounted at the same mount point to the virtual file system.
            </para>
            <para>
            <strong>Search Order:</strong><br/>
            The order of the storages in <see cref="P:DigitalRune.Storages.VfsStorage.MountInfos"/> determines the search order for files
            and directories. A file will be read from the first storage in the list that contains a
            matching entry.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Storages.VfsStorage.DirectorySeparator">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Storages.VfsStorage.MountInfos">
            <summary>
            Gets the storage providers mounted into the virtual file system.
            </summary>
            <value>The storage providers mounted into the virtual file system.</value>
        </member>
        <member name="M:DigitalRune.Storages.VfsStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.VfsStorage"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Storages.VfsStorage.GetRealPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Storages.VfsStorage.OpenFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Storages.VfsStorage.DigitalRune#Storages#IStorageInternal#TryOpenFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Storages.ZipStorage">
            <summary>
            Provides access to the files stored in a ZIP archive.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Storages.ZipStorage"/> does not directly read the ZIP archive from the OS file system.
            Instead, it opens the ZIP archive from another storage.
            </para>
            <para>
            The <see cref="P:DigitalRune.Storages.ZipStorage.PasswordCallback"/> needs to be set to read encrypted ZIP archives. The
            <see cref="T:DigitalRune.Storages.ZipStorage"/> supports ZipCrypto (all platforms) and AES-256 encryption (Windows
            only).
            </para>
            <para>
            <strong>Thread-Safety:</strong> The <see cref="T:DigitalRune.Storages.ZipStorage"/> is thread-safe. ZIP entries can
            be read simultaneously from one or multiple threads.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Storages.ZipStorage.DirectorySeparator">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Storages.ZipStorage.FileName">
            <summary>
            Gets the file name (incl. path) of the ZIP archive.
            </summary>
            <value>The file name (incl. path) of the ZIP archive.</value>
        </member>
        <member name="P:DigitalRune.Storages.ZipStorage.Storage">
            <summary>
            Gets the storage that provides the ZIP archive.
            </summary>
            <value>The storage that provides the ZIP archive.
            </value>
        </member>
        <member name="P:DigitalRune.Storages.ZipStorage.PasswordCallback">
            <summary>
            Gets or sets the callback method that provides the password for encrypted ZIP file entries.
            </summary>
            <value>
            The callback method that provides the password for encrypted ZIP file entries.
            </value>
            <remarks>
            The callback is a function which takes one string argument and returns a string.
            The function argument is the path of the entry that should be retrieved from the ZIP
            archive. The function returns the password that was used to protect the entry in the ZIP
            archive. The method may return any value (including <see langword="null"/> or ""), if the
            ZIP entry is not encrypted.
            </remarks>
        </member>
        <member name="M:DigitalRune.Storages.ZipStorage.#ctor(DigitalRune.Storages.Storage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.ZipStorage"/> class.
            </summary>
            <param name="storage">The storage that contains the ZIP archive.</param>
            <param name="fileName">The file name (incl. path) of the ZIP archive.</param>
            <remarks>
            An exception is raised if the ZIP archive could not be opened.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="storage"/> or <paramref name="fileName"/> is null.
            </exception>
        </member>
        <member name="M:DigitalRune.Storages.ZipStorage.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Storages.ZipStorage"/> class
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Storages.ZipStorage.GetRealPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Storages.ZipStorage.OpenFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Storages.ZipStorage.DigitalRune#Storages#IStorageInternal#TryOpenFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Storages.ZipStorage.TryOpenFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Text.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Text"/> namespace provides additional types and methods character
            encoding and string manipulation.
            </summary>
        </member>
        <member name="T:DigitalRune.Text.AppendNumberOptions">
            <summary>
            Options for <see cref="T:System.Text.StringBuilder"/> extension methods.
            </summary>
        </member>
        <member name="F:DigitalRune.Text.AppendNumberOptions.None">
            <summary>
             Normal format.
            </summary>
        </member>
        <member name="F:DigitalRune.Text.AppendNumberOptions.PositiveSign">
            <summary>
             Added "+" sign for positive value.
            </summary>
        </member>
        <member name="F:DigitalRune.Text.AppendNumberOptions.NumberGroup">
            <summary>
             Insert number group separation characters. In use, added "," for every 3 digits.
            </summary>
        </member>
        <member name="T:DigitalRune.Text.StringBuilderExtensions">
            <summary>
            Static class for string builder extension methods.
            </summary>
            <remarks>
            <para>
            You can use a <see cref="T:System.Text.StringBuilder"/> to avoid unwanted memory allocations. But there are 
            still problems for adding numerical values to <see cref="T:System.Text.StringBuilder"/>. One of them is 
            boxing that occurs when you use the <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])"/> 
            method. Another issue is memory allocation that occurs when you specify int or float for the 
            <see cref="M:System.Text.StringBuilder.Append(System.Single)"/> method.
            </para>
            <para>
            This class provides solution for those issue. All methods are defined as extension methods for 
            <see cref="T:System.Text.StringBuilder"/>. So, you can use those methods like below.
            </para>
            </remarks>
            <example>
            The following sample demonstrates how to append a number to a <see cref="T:System.Text.StringBuilder"/> 
            using one of the extension methods defined in this class.
            <code lang="csharp">
            <![CDATA[
            stringBuilder.AppendNumber(12345);
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DigitalRune.Text.StringBuilderExtensions.NumberGroupSizes">
            <summary>
            Cache for NumberGroupSizes of NumberFormat class.
            </summary>
        </member>
        <member name="F:DigitalRune.Text.StringBuilderExtensions.NumberString">
            <summary>
            String conversion buffer.
            </summary>
        </member>
        <member name="M:DigitalRune.Text.StringBuilderExtensions.Append(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Appends a copy of a string builder to the end of the string builder.
            </summary>
            <param name="builder">The string builder.</param>
            <param name="text">
            The text that is appended to the end of <paramref name="builder"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="text"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Text.StringBuilderExtensions.AppendNumber(System.Text.StringBuilder,System.Int32)">
            <overloads>
            <summary>
            Converts a number to a string and adds it to the string builder.
            </summary>
            </overloads>
            
            <summary>
            Converts an integer number to a string and adds it to string builder.
            </summary>
            <param name="builder">The string builder.</param>
            <param name="number">The number.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Text.StringBuilderExtensions.AppendNumber(System.Text.StringBuilder,System.Int32,DigitalRune.Text.AppendNumberOptions)">
            <summary>
            Converts an integer number to a string and adds it to the string builder.
            </summary>
            <param name="builder">The string builder.</param>
            <param name="number">The number.</param>
            <param name="options">The format options.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Text.StringBuilderExtensions.AppendNumber(System.Text.StringBuilder,System.Single)">
            <summary>
            Converts a <see langword="float"/> number to a string and adds it to the string builder.
            </summary>
            <param name="builder">The string builder.</param>
            <param name="number">The number.</param>
            <remarks>It shows 2 decimal digits.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Text.StringBuilderExtensions.AppendNumber(System.Text.StringBuilder,System.Single,DigitalRune.Text.AppendNumberOptions)">
            <summary>
            Converts a <see langword="float"/> number to a string and adds it to the string builder.
            </summary>
            <param name="builder">The string builder.</param>
            <param name="number">The number.</param>
            <param name="options">The format options.</param>
            <remarks>It shows 2 decimal digits.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Text.StringBuilderExtensions.AppendNumber(System.Text.StringBuilder,System.Single,System.Int32,DigitalRune.Text.AppendNumberOptions)">
            <summary>
            Converts a <see langword="float"/> number to a string and adds it to the string builder.
            </summary>
            <param name="builder">The string builder.</param>
            <param name="number">The number.</param>
            <param name="decimalCount">The number of decimal digits to show.</param>
            <param name="options">The format options.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Text.StringHelper">
            <summary>
            Contains additional string methods.
            </summary>
        </member>
        <member name="M:DigitalRune.Text.StringHelper.SplitTextAndNumber(System.String,System.String@,System.Int32@)">
            <summary>
            Splits a string that has an integer number as suffix (e.g. "text123") into its components.
            </summary>
            <param name="str">
            A string that has an positive integer number as suffix. The suffix is optional. Examples:
            "text", "text123".
            </param>
            <param name="text">
            The text before the number suffix. "" if <paramref name="str"/> is <see langword="null"/> or
            empty.
            </param>
            <param name="number">
            The positive integer number. -1 if <paramref name="str"/> does not contain a suffix.
            </param>
            <remarks>
            <para>
            This method should only be used if <paramref name="str"/> contains only letters and digits.
            If <paramref name="str"/> contains characters other than letters and digits the result is
            undefined.
            </para>
            <para>
            Here is a list of examples:
            </para>
            <list type="table">
            <listheader>
            <term>Input</term>
            <description>Output</description>
            </listheader>
            <item>
            <term><see langword="null"/></term>
            <description>"", -1</description>
            </item>
            <item>
            <term>""</term>
            <description>"", -1</description>
            </item>
            <item>
            <term>"text"</term>
            <description>"text", -1</description>
            </item>
            <item>
            <term>"123"</term>
            <description>"", 123</description>
            </item>
            <item>
            <term>"text123"</term>
            <description>"text", 123</description>
            </item>
            <item>
            <term>"123text"</term>
            <description>"123text", -1</description>
            </item>
            <item>
            <term>"123text456"</term>
            <description>"123text", 456</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:DigitalRune.Text.StringHelper.ComputeMatch(System.String,System.String)">
            <summary>
            Computes a value that indicates the match between two strings.
            </summary>
            <param name="textA">The first string.</param>
            <param name="textB">The second string.</param>
            <returns>
            If the strings have nothing in common 0 is returned. If the strings are identical 1 is
            returned. Otherwise a value between 0 and 1 is returned that indicates how similar the
            strings are.
            </returns>
            <remarks>
            This method can be used to perform a fuzzy search among keywords.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="textA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="textB"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Threading.ITaskScheduler">
            <summary>
            Defines a task scheduler.
            </summary>
        </member>
        <member name="M:DigitalRune.Threading.ITaskScheduler.Schedule(DigitalRune.Threading.Task)">
            <summary>
            Schedules a task for execution.
            </summary>
            <param name="task">The task to schedule.</param>
        </member>
        <member name="T:DigitalRune.Threading.IWork">
            <summary>
            Represents a piece of work which can be executed in parallel.
            </summary>
        </member>
        <member name="M:DigitalRune.Threading.IWork.DoWork">
            <summary>
            Executes the work.
            </summary>
        </member>
        <member name="P:DigitalRune.Threading.IWork.Options">
            <summary>
            Gets the options specifying how this work may be executed.
            </summary>
        </member>
        <member name="T:DigitalRune.Threading.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Threading"/> namespace provides cross-platform support for
            task-based multithreading.
            </summary>
        </member>
        <member name="T:DigitalRune.Threading.Parallel">
            <summary>
            Provides support for parallel execution of tasks.
            </summary>
            <remarks>
            <para>
            The namespace <strong>DigitalRune.Threading</strong> and the class <see cref="T:DigitalRune.Threading.Parallel"/> 
            provides support for concurrency to run multiple tasks in parallel and automatically balance 
            work across all available processors. The implementation is a replacement for Microsoft's Task 
            Parallel Library (see <see href="http://msdn.microsoft.com/en-us/library/dd537609.aspx">
            Task Parallelism (Task Parallel Library)</see>) which is not yet supported by the .NET Compact 
            Framework. This class <see cref="T:DigitalRune.Threading.Parallel"/> provides a lightweight and cross-platform 
            implementation (supported on Windows, Silverlight, Windows Phone 7, and Xbox 360).
            </para>
            <para>
            The API has similarities to Microsoft's Task Parallel Library, but it is not identical. The 
            names in the namespace <strong>DigitalRune.Threading</strong> conflict with the types of the 
            namespace <strong>System.Threading.Tasks</strong>. This is on purpose as only one solution for 
            concurrency should be used in an application. The library has been optimized for the .NET 
            Compact Framework: Only the absolute minimum of memory is allocated at runtime.
            </para>
            <para>
            The DigitalRune libraries, such as 
            <see href="http://digitalrune.github.io/DigitalRune-Documentation/html/335dc86a-c68d-4d7b-8641-81dd80de5e76.htm">DigitalRune Geometry</see> 
            and 
            <see href="http://digitalrune.github.io/DigitalRune-Documentation/html/79a8677d-9460-4118-b27b-cef353dfbd92.htm">DigitalRune Physics</see>,   /// make extensive use of the class <see cref="T:DigitalRune.Threading.Parallel"/>. We highly recommend, that if you need 
            support for multithreading in your application, you should take advantage of this class. 
            (Using different solutions for concurrency can reduce performance.)
            </para>
            <para>
            <strong>Tasks:</strong><br/>
            A task is an asynchronous operation which is started, for example, by calling 
            <see cref="M:DigitalRune.Threading.Parallel.Start(System.Action)"/>. This method returns a handle of type <see cref="T:DigitalRune.Threading.Task"/>. 
            This handle can be used to query the status of the asynchronous operation (see 
            <see cref="P:DigitalRune.Threading.Task.IsComplete"/>). The method <see cref="M:DigitalRune.Threading.Task.Wait"/> can be called to wait until 
            the operation has completed.
            </para>
            <para>
            <strong>Futures (Task&lt;T&gt;):</strong><br/>
            A future is an asynchronous operation that returns a value. A future is created, for example,
            by calling <see cref="M:DigitalRune.Threading.Parallel.Start``1(System.Func{``0})"/> and specifying a function that computes a 
            value. The method returns a handle of type <see cref="T:DigitalRune.Threading.Task`1"/>, which is similar to 
            <see cref="T:DigitalRune.Threading.Task"/>. The result of a future can be queried by calling 
            <see cref="M:DigitalRune.Threading.Task`1.GetResult"/>. Note that <see cref="M:DigitalRune.Threading.Task`1.GetResult"/> can only be called
            once - the handle becomes invalid after the first call!
            </para>
            <para>
            <strong>Background Tasks:</strong><br/>
            Long running operations which may block (i.e. wait for I/O operation to finish) should be 
            scheduled as background tasks. Background tasks are created by using the method 
            <see cref="M:DigitalRune.Threading.Parallel.StartBackground(System.Action)"/> (or one of its overloads). Background tasks will 
            not be scheduled using the <see cref="P:DigitalRune.Threading.Parallel.Scheduler"/> (see below). Instead the class 
            <see cref="T:DigitalRune.Threading.Parallel"/> manages an additional pool of threads that are used for background 
            tasks. The processor affinity of these threads is not set automatically. The background tasks 
            will usually run on the same hardware thread where the background thread was created first or 
            run last. The processor affinity can be set manually from within the task by calling 
            <see href="http://msdn.microsoft.com/en-us/library/system.threading.thread.setprocessoraffinity.aspx">Thread.SetProcessorAffinity</see>.
            </para>
            <para>
            <strong>Exception Handling:</strong><br/>
            The tasks executed asynchronously can raise exceptions. The exceptions are stored internally 
            and a <see cref="T:DigitalRune.Threading.TaskException"/> containing these exceptions is thrown when 
            <see cref="M:DigitalRune.Threading.Task.Wait"/> is called.
            </para>
            <para>
            <strong>Completion Callbacks:</strong><br/>
            It is possible to specify a completion callbacks when starting a new tasks. For example, see 
            method <see cref="M:DigitalRune.Threading.Parallel.Start(System.Action,System.Action)"/>. The completion callbacks are executed after the 
            corresponding tasks have completed. Completion callbacks are executed regardless of whether 
            tasks have completed successfully or have thrown an exception.
            </para>
            <para>
            However, the callbacks are not executed immediately! 
            Instead, the method <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> needs to be called manually - usually on the 
            main thread - to invoke the callbacks. 
            </para>
            <para>
            <strong>Task Scheduling:</strong><br/>
            The number of threads used for parallelization is determined by the task scheduler (see 
            <see cref="P:DigitalRune.Threading.Parallel.Scheduler"/>). The task scheduler creates a number of threads and distributes the 
            tasks among these worker threads. The default task scheduler is a 
            <see cref="T:DigitalRune.Threading.WorkStealingScheduler"/> that creates one thread per CPU core on Windows and 3 
            threads on Xbox 360 (on the hardware threads 3, 4, and 5). The number of worker threads can be
            specified in the constructor of the <see cref="T:DigitalRune.Threading.WorkStealingScheduler"/>.
            </para>
            <para>
            The property <see cref="P:DigitalRune.Threading.Parallel.Scheduler"/> can be changed at runtime. The default task scheduler can
            be replaced with another task scheduler (e.g. with a <see cref="T:DigitalRune.Threading.WorkStealingScheduler"/> that 
            uses a different number of tasks, or with a custom <see cref="T:DigitalRune.Threading.ITaskScheduler"/>). Replacing a
            task scheduler will affect all future tasks that have not yet been scheduled. However, it is
            highly recommended to use the default scheduler or specify the scheduler only once at the 
            startup of the application.
            </para>
            <para>
            <strong>Processor Affinity:</strong><br/>
            In the .NET Compact Framework for Xbox 360 the processor affinity determines the processors on
            which a thread runs. Setting the processor affinity in Windows has no effect.
            </para>
            <para>
            The processor affinity is defined as an array using the property 
            <see cref="P:DigitalRune.Threading.Parallel.ProcessorAffinity"/>. Each entry in the array specifies the hardware thread that 
            the corresponding worker thread will use. The default value is <c>{ 3, 4, 5, 1 }</c>. The 
            default task scheduler reads this array and assigns the worker threads to the specified 
            hardware threads. (See also 
            <see href="http://msdn.microsoft.com/en-us/library/system.threading.thread.setprocessoraffinity.aspx">Thread.SetProcessorAffinity</see> 
            in the MSDN Library to find out more.)
            </para>
            <para>
            <strong>Important:</strong> The processor affinity needs to be set before any parallel tasks
            are created or before a new <see cref="T:DigitalRune.Threading.WorkStealingScheduler"/> is created. Changing the 
            processor affinity afterwards has no effect.
            </para>
            </remarks>
            
            <example>
            The following example demonstrates how to configure <see cref="T:DigitalRune.Threading.Parallel"/> to schedule tasks
            only on the hardware threads 3 and 4 of the Xbox 360.
            <code lang="csharp">
            <![CDATA[
            // Configure the class Parallel to use the hardware threads 3 and 4 on the Xbox 360.
            // (Note: Setting the processor affinity has no effect on Windows.)
            Parallel.ProcessorAffinity = new[] { 3, 4 };
            
            // Create task scheduler that uses 2 worker threads.
            Parallel.Scheduler = new WorkStealingScheduler(2);
            
            // Note: Above code is usually run at the start of an application. It is not recommended to 
            // change the processor affinity or the task scheduler at runtime of the application.
            ]]>
            </code>
            <para>
            The following example demonstrates how a task is started.
            </para>
            <code lang="csharp">
            <![CDATA[
            // Start a method call on another thread:
            // DoSomeWork can either be an Action delegate, or an object which implements IWork.
            Task task = Parallel.Start(DoSomeWork);
            
            // Do something else on this thread for a while.
            DoSomethingElse();
            
            // Wait for the task to complete. This ensures that after this call returns, the task has 
            //finished.
            task.Wait();
            ]]>
            </code>
            <para>
            The following example demonstrates how task can be used to compute values in parallel and 
            return the result when needed.
            </para>
            <code lang="csharp">
            <![CDATA[
            // Task<T> is similar to Task, but you can retrieve a result from it.
            Task<double> piTask = Parallel.Start(CalculatePi);
            
            // Do something else for a while.
            DoSomethingElse();
            
            // Retrieve the result. The caller will block until the task has completed. 
            // GetResult() can only be called once!
            double pi = piTask.GetResult();
            ]]>
            </code>
            <para>
            The following example demonstrates how to run a long task in the background to avoid that the 
            current thread is blocked.
            </para>
            <code lang="csharp">
            <![CDATA[
            // Begin loading some files.
            Parallel.StartBackground(LoadFiles);
            ]]>
            </code>
            <para>
            The following demonstrates how a for-loop can be executed in parallel.
            </para>
            <code lang="csharp">
            <![CDATA[
            // Sequential loop:
            for (int i = 0; i < count; i++)
            {
              DoWork(i);
            }
            
            // Same loop, but each iteration may happen in parallel on multiple threads.
            Parallel.For(0, count, i =>
            {
              DoWork(i);
            });
            ]]>
            </code>
            <para>
            The following demonstrates how a foreach-loop can be executed in parallel.
            </para>
            <code lang="csharp">
            <![CDATA[
            // Sequential loop:
            foreach (var item in list)
            {
              DoWork(item);
            }
            
            // Same loop, but each iteration may happen in parallel on multiple threads.
            Parallel.ForEach(list, item =>
            {
              DoWork(item);
            });
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.RunCallbacks">
            <summary>
            Executes all task callbacks on a single thread.
            </summary>
            <remarks>
            <para>
            It is possible to specify a completion callbacks when starting a new tasks. For example, see
            method <see cref="M:DigitalRune.Threading.Parallel.Start(System.Action,System.Action)"/>. The completion callbacks are executed when the
            corresponding tasks have completed. However, the callbacks are not executed immediately!
            Instead, the method <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> needs to be called manually to invoke the 
            callbacks. 
            </para>
            <para>
            This method is not re-entrant. It is suggested to call the method only on the main thread.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Threading.Parallel.ProcessorAffinity">
            <summary>
            Gets or sets the processor affinity of the worker threads.
            </summary>
            <value>
            The processor affinity of the worker threads. The default value is <c>{ 3, 4, 5, 1 }</c>.
            </value>
            <remarks>
            <para>
            In the .NET Compact Framework for Xbox 360 the processor affinity determines the processors 
            on which a thread runs. 
            </para>
            <para>
            <strong>Note:</strong> The processor affinity is only relevant in the .NET Compact Framework 
            for Xbox 360. Setting the processor affinity has no effect in Windows!
            </para>
            <para>
            <strong>Important:</strong> The processor affinity needs to be set before any parallel tasks
            are created. Changing the processor affinity afterwards has no effect.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified array is empty or contains invalid values.
            </exception>
        </member>
        <member name="P:DigitalRune.Threading.Parallel.Scheduler">
            <summary>
            Gets or sets the task scheduler.
            </summary>
            <value>
            The task scheduler. The default value is a <see cref="T:DigitalRune.Threading.WorkStealingScheduler"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.StartBackground(DigitalRune.Threading.IWork)">
            <overloads>
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking work such as
            I/O.
            </summary>
            </overloads>
            
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking work such as
            I/O.
            </summary>
            <param name="work">The work to execute.</param>
            <returns>A task which represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="work"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.StartBackground(DigitalRune.Threading.IWork,System.Action)">
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking work such as
            I/O.
            </summary>
            <param name="work">The work to execute.</param>
            <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> once this task has completed.
            </param>
            <returns>A task which represents the asynchronous operation.</returns>
            <remarks>
            <strong>Important:</strong> The completion callback is not executed automatically. Instead, 
            the callback is only executed when <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> is called. See 
            <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> for additional information.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="work"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Invalid number of maximum threads set in <see cref="P:DigitalRune.Threading.IWork.Options"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.StartBackground(System.Action)">
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking work such as
            I/O.
            </summary>
            <param name="action">The work to execute.</param>
            <returns>A task which represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.StartBackground(System.Action,System.Action)">
            <summary>
            Starts a task in a secondary worker thread. Intended for long running, blocking, work
            such as I/O.
            </summary>
            <param name="action">The work to execute.</param>
            <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> once this task has completed.
            </param>
            <returns>A task which represents the asynchronous operation.</returns>
            <remarks>
            <strong>Important:</strong> The completion callback is not executed automatically. Instead, 
            the callback is only executed when <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> is called. See 
            <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> for additional information.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Start(DigitalRune.Threading.IWork)">
            <overloads>
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            </overloads>
            
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="work">The work to execute in parallel.</param>
            <returns>A task which represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="work"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Start(DigitalRune.Threading.IWork,System.Action)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="work">The work to execute in parallel.</param>
            <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> once this task has completed.
            </param>
            <returns>A task which represents the asynchronous operation.</returns>
            <remarks>
            <strong>Important:</strong> The completion callback is not executed automatically. Instead, 
            the callback is only executed when <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> is called. See 
            <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> for additional information.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Invalid number of maximum threads set in <see cref="P:DigitalRune.Threading.IWork.Options"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="work"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Start(System.Action)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="action">The work to execute in parallel.</param>
            <returns>A task which represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Start(System.Action,System.Action)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="action">The work to execute in parallel.</param>
            <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> once this task has completed.
            </param>
            <returns>A task which represents the asynchronous operation.</returns>
            <remarks>
            <strong>Important:</strong> The completion callback is not executed automatically. Instead, 
            the callback is only executed when <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> is called. See 
            <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> for additional information.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Start(System.Action,DigitalRune.Threading.WorkOptions)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="action">The work to execute in parallel.</param>
            <param name="options">The work options to use with this action.</param>
            <returns>A task which represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Start(System.Action,DigitalRune.Threading.WorkOptions,System.Action)">
            <summary>
            Creates and starts a task to execute the given work.
            </summary>
            <param name="action">The work to execute in parallel.</param>
            <param name="options">The work options to use with this action.</param>
            <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> once this task has completed.
            </param>
            <returns>A task which represents the asynchronous operation.</returns>
            <remarks>
            <strong>Important:</strong> The completion callback is not executed automatically. Instead, 
            the callback is only executed when <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> is called. See 
            <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> for additional information.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Invalid number of maximum threads set in <see cref="P:DigitalRune.Threading.IWork.Options"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Start``1(System.Func{``0})">
            <summary>
            Creates and starts a task which executes the given function and stores the result for later 
            retrieval.
            </summary>
            <typeparam name="T">The type of result.</typeparam>
            <param name="function">The function to execute in parallel.</param>
            <returns>A <see cref="T:DigitalRune.Threading.Task`1"/> which stores the result of the function.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Start``1(System.Func{``0},System.Action)">
            <summary>
            Creates and starts a task which executes the given function and stores the result for later 
            retrieval.
            </summary>
            <typeparam name="T">The type of result the function returns.</typeparam>
            <param name="function">The function to execute in parallel.</param>
            <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> once this task has completed.
            </param>
            <returns>A <see cref="T:DigitalRune.Threading.Task`1"/> which stores the result of the function.</returns>
            <remarks>
            <strong>Important:</strong> The completion callback is not executed automatically. Instead, 
            the callback is only executed when <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> is called. See 
            <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> for additional information.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Start``1(System.Func{``0},DigitalRune.Threading.WorkOptions)">
            <summary>
            Creates an starts a task which executes the given function and stores the result for later 
            retrieval.
            </summary>
            <typeparam name="T">The type of result the function returns.</typeparam>
            <param name="function">The function to execute in parallel.</param>
            <param name="options">The work options to use with this action.</param>
            <returns>A <see cref="T:DigitalRune.Threading.Task`1"/> which stores the result of the function.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Start``1(System.Func{``0},DigitalRune.Threading.WorkOptions,System.Action)">
            <summary>
            Creates and starts a task which executes the given function and stores the result for later 
            retrieval.
            </summary>
            <typeparam name="T">The type of result the function returns.</typeparam>
            <param name="function">The function to execute in parallel.</param>
            <param name="options">The work options to use with this action.</param>
            <param name="completionCallback">
            A method which will be called in <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> once this task has completed.
            </param>
            <returns>A <see cref="T:DigitalRune.Threading.Task`1"/> which stores the result of the function.</returns>
            <remarks>
            <strong>Important:</strong> The completion callback is not executed automatically. Instead, 
            the callback is only executed when <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> is called. See 
            <see cref="M:DigitalRune.Threading.Parallel.RunCallbacks"/> for additional information.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Invalid number of maximum threads set in <see cref="P:DigitalRune.Threading.IWork.Options"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Do(DigitalRune.Threading.IWork,DigitalRune.Threading.IWork)">
            <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
            <param name="work0">Work to execute.</param>
            <param name="work1">Work to execute.</param>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="work0"/> or <paramref name="work1"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Do(DigitalRune.Threading.IWork[])">
            <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
            <param name="work">The work to execute.</param>
            <exception cref="T:System.ArgumentNullException">
            One of the parameters is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Do(System.Action,System.Action)">
            <overloads>
            <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
            </overloads>
            
            <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
            <param name="action1">The first piece of work to execute.</param>
            <param name="action2">The second piece of work to execute.</param>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="action1"/> or <paramref name="action2"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.Do(System.Action[])">
            <summary>
            Executes the given work items potentially in parallel with each other.
            This method will block until all work is completed.
            </summary>
            <param name="actions">The work to execute.</param>
            <exception cref="T:System.ArgumentNullException">
            One of the parameters is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})">
            <overloads>
            <summary>
            Executes a for loop where each iteration can potentially occur in parallel with others.
            </summary>
            </overloads>
            
            <summary>
            Executes a for loop where each iteration can potentially occur in parallel with others.
            </summary>
            <param name="startInclusive">The index (inclusive) at which to start iterating.</param>
            <param name="endExclusive">The index (exclusive) at which to end iterating.</param>
            <param name="body">
            The method to execute at each iteration. The current index is supplied as the parameter.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32},System.Int32)">
            <summary>
            Executes a for loop where each iteration can potentially occur in parallel with others. 
            </summary>
            <param name="startInclusive">The index (inclusive) at which to start iterating.</param>
            <param name="endExclusive">The index (exclusive) at which to end iterating.</param>
            <param name="body">
            The method to execute at each iteration. The current index is supplied as the parameter.
            </param>
            <param name="stride">The number of iterations that each processor takes at a time.</param>
        </member>
        <member name="M:DigitalRune.Threading.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes a for-each loop where each iteration can potentially occur in parallel with others.
            </summary>
            <typeparam name="T">The type of item to iterate over.</typeparam>
            <param name="collection">The enumerable data source.</param>
            <param name="action">
            The method to execute at each iteration. The item to process is supplied as the parameter.
            </param>
            <remarks>
            The parallel foreach-loop has a few disadvantages: Enumerating the sequence in parallel 
            requires locking. In addition, creating an <see cref="T:System.Collections.Generic.IEnumerator`1"/> object allocates
            memory on the managed heap. It is therefore recommended to use the parallel for-loop instead
            of the parallel for-each loop where possible.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="collection"/> or <paramref name="action"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Threading.Task">
            <summary>
            Represents an asynchronous operation.
            </summary>
            <remarks>
            An asynchronous task is created by using the class <see cref="T:DigitalRune.Threading.Parallel"/> and calling 
            <see cref="M:DigitalRune.Threading.Parallel.Start(System.Action)"/> or one of its overloads.
            </remarks>
        </member>
        <member name="P:DigitalRune.Threading.Task.IsComplete">
            <summary>
            Gets a value indicating whether the task has completed.
            </summary>
            <value>
            <see langword="true"/> if the task has completed; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Threading.Task.Exceptions">
            <summary>
            Gets an array containing any exceptions thrown by this task.
            </summary>
            <value>
            An array containing all exceptions thrown by this task, or <see langword="null"/> if the 
            task is still running.
            </value>
        </member>
        <member name="M:DigitalRune.Threading.Task.Wait">
            <summary>
            Waits for the task to complete execution.
            </summary>
            <exception cref="T:DigitalRune.Threading.TaskException">
            The task or a child task has thrown an exception.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The method is called from within the same task. A task cannot wait on itself.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Task.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.Task.Equals(DigitalRune.Threading.Task)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" />
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.Task.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.Task.op_Equality(DigitalRune.Threading.Task,DigitalRune.Threading.Task)">
            <summary>
            Compares two <see cref="T:DigitalRune.Threading.Task"/>s to determine whether they are the same.
            </summary>
            <param name="left">The first <see cref="T:DigitalRune.Threading.Task"/>.</param>
            <param name="right">The second <see cref="T:DigitalRune.Threading.Task"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are the 
            same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.Task.op_Inequality(DigitalRune.Threading.Task,DigitalRune.Threading.Task)">
            <summary>
            Compares two <see cref="T:DigitalRune.Threading.Task"/>s to determine whether they are different.
            </summary>
            <param name="left">The first <see cref="T:DigitalRune.Threading.Task"/>.</param>
            <param name="right">The second <see cref="T:DigitalRune.Threading.Task"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are 
            different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Threading.TaskException">
            <summary>
            Occurs when an unhandled exception is thrown within a <see cref="T:DigitalRune.Threading.Task"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Threading.TaskException.InnerExceptions">
            <summary>
            Gets an array containing any unhandled exceptions that were thrown by the task.
            </summary>
        </member>
        <member name="M:DigitalRune.Threading.TaskException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Threading.TaskException"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Threading.TaskException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Threading.TaskException"/> class with a specified error
            message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DigitalRune.Threading.TaskException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Threading.TaskException"/> class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:DigitalRune.Threading.TaskException.#ctor(System.Exception[])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Threading.TaskException"/> class.
            </summary>
            <param name="innerExceptions">The unhandled exceptions thrown by the task.</param>
        </member>
        <member name="M:DigitalRune.Threading.TaskException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Threading.TaskException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or 
            destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is <see langword="null"/> or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.TaskException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            information about the exception.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the
            exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or
            destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Threading.Task`1">
            <summary>
            Represents an asynchronous operation that can return a value.
            </summary>
            <typeparam name="T">The type of result produced by the asynchronous operation.</typeparam>
            <remarks>
            An asynchronous task that produces a value can be created by using the class 
            <see cref="T:DigitalRune.Threading.Parallel"/> and calling <see cref="M:DigitalRune.Threading.Parallel.Start``1(System.Func{``0})"/> or one of 
            its overloads.
            </remarks>
        </member>
        <member name="P:DigitalRune.Threading.Task`1.IsComplete">
            <summary>
            Gets a value which indicates if this task has completed.
            </summary>
        </member>
        <member name="P:DigitalRune.Threading.Task`1.Exceptions">
            <summary>
            Gets an array containing any exceptions thrown by this task.
            </summary>
            <value>
            An array containing all exceptions thrown by this task, or <see langword="null"/> if the 
            task is still running.
            </value>
        </member>
        <member name="M:DigitalRune.Threading.Task`1.GetResult">
            <summary>
            Gets the result. (Blocks the calling thread until the asynchronous operation has completed 
            execution. This can only be called once!)
            </summary>
            <returns>The result of the asynchronous operation.</returns>
            <exception cref="T:DigitalRune.Threading.TaskException">
            The task or a child task has thrown an exception.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The result of the <see cref="T:DigitalRune.Threading.Task`1"/> has already been retrieved. The method 
            <see cref="M:DigitalRune.Threading.Task`1.GetResult"/> can only be called once.
            </exception>
        </member>
        <member name="M:DigitalRune.Threading.Task`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.Task`1.Equals(DigitalRune.Threading.Task{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" />
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.Task`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.Task`1.op_Equality(DigitalRune.Threading.Task{`0},DigitalRune.Threading.Task{`0})">
            <summary>
            Compares two <see cref="T:DigitalRune.Threading.Task`1"/> to determine whether they are the same.
            </summary>
            <param name="left">The first <see cref="T:DigitalRune.Threading.Task`1"/>.</param>
            <param name="right">The second <see cref="T:DigitalRune.Threading.Task`1"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are the 
            same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.Task`1.op_Inequality(DigitalRune.Threading.Task{`0},DigitalRune.Threading.Task{`0})">
            <summary>
            Compares two <see cref="T:DigitalRune.Threading.Task`1"/> to determine whether they are different.
            </summary>
            <param name="left">The first <see cref="T:DigitalRune.Threading.Task`1"/>.</param>
            <param name="right">The second <see cref="T:DigitalRune.Threading.Task`1"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are 
            different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.WorkItem.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Threading.WorkItem"/> class. (This method reuses a previously
            recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Threading.WorkItem"/> class.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.WorkItem.Recycle">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Threading.WorkItem"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Threading.WorkOptions">
            <summary>
            Defines how an <see cref="T:DigitalRune.Threading.IWork"/> instance can be executed.
            </summary>
        </member>
        <member name="F:DigitalRune.Threading.WorkOptions.Default">
            <summary>
            Defines the default options.
            </summary>
            <remarks>
            The default options are:
            <list type="bullet">
            <listheader>
            <term>Property</term>
            <description>Default Value</description>
            </listheader>
            <item>
            <term>DetachFromParent</term>
            <description>false</description>
            </item>
            <item>
            <term>DetachFromParent</term>
            <description>false</description>
            </item>
            <item>
            <term>QueueFIFO</term>
            <description>1</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:DigitalRune.Threading.WorkOptions.DetachFromParent">
            <summary>
            Gets or sets a value indicating whether the work will be created detached from its parent. 
            </summary>
            <value>
            <see langword="true"/> if the parent task can complete independent from the child task. 
            If <see langword="false"/> the parent task will wait for this work to complete before 
            completing itself.
            </value>
        </member>
        <member name="P:DigitalRune.Threading.WorkOptions.MaximumThreads">
            <summary>
            Gets or sets the maximum number of threads which can concurrently execute this work.
            </summary>
            <value>The maximum number of threads which can concurrently execute this work.</value>
        </member>
        <member name="P:DigitalRune.Threading.WorkOptions.QueueFIFO">
            <summary>
            Gets or sets a value indicating whether this work should be queued in a first-in-first-out 
            (FIFO) order.
            </summary>
            <value>
            <see langword="true"/> if the task should be queued in FIFO order; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            FIFO order: The task will be started after all currently existing tasks.
            </remarks>
        </member>
        <member name="M:DigitalRune.Threading.WorkOptions.Equals(DigitalRune.Threading.WorkOptions)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" />
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.WorkOptions.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <see langword="true"/> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.WorkOptions.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.WorkOptions.op_Equality(DigitalRune.Threading.WorkOptions,DigitalRune.Threading.WorkOptions)">
            <summary>
            Compares <see cref="T:DigitalRune.Threading.WorkOptions"/> to determine whether they are the same.
            </summary>
            <param name="left">The first <see cref="T:DigitalRune.Threading.WorkOptions"/>.</param>
            <param name="right">The second <see cref="T:DigitalRune.Threading.WorkOptions"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are the 
            same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.WorkOptions.op_Inequality(DigitalRune.Threading.WorkOptions,DigitalRune.Threading.WorkOptions)">
            <summary>
            Compares <see cref="T:DigitalRune.Threading.WorkOptions"/> to determine whether they are different.
            </summary>
            <param name="left">The first <see cref="T:DigitalRune.Threading.WorkOptions"/>.</param>
            <param name="right">The second <see cref="T:DigitalRune.Threading.WorkOptions"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are 
            different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Threading.WorkStealingQueue`1">
            <summary>
            A special kind of queue in that it has two ends, and allows lock-free pushes and pops from one 
            end ("private"), but requires synchronization from the other end ("public").
            </summary>
            <typeparam name="T">The type of item stored in the queue.</typeparam>
            <remarks>
            This type of queue is usually own by a thread to queue work items or other resources. The 
            thread can access its own queue without locking. A thread can access another thread's queue 
            and try to steal items. Accessing the queue of another thread requires synchronization which
            is automatically handled by the queue.
            </remarks>
        </member>
        <member name="P:DigitalRune.Threading.WorkStealingQueue`1.IsEmpty">
            <summary>
            Gets a value indicating whether this queue is empty.
            </summary>
            <value>
            <see langword="true"/> if this queue is empty; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Threading.WorkStealingQueue`1.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
            <value>The number of items in the queue.</value>
        </member>
        <member name="M:DigitalRune.Threading.WorkStealingQueue`1.LocalPush(`0)">
            <summary>
            Adds an item to the "private" end of the queue.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:DigitalRune.Threading.WorkStealingQueue`1.LocalPop(`0@)">
            <summary>
            Tries to removes an item from the "private" end of the queue.
            </summary>
            <param name="item">The item that is removed from the queue.</param>
            <returns>
            <see langword="true"/> if an item was successfully removed; otherwise, 
            <see langword="false"/> if the queue is empty.
            </returns>
        </member>
        <member name="M:DigitalRune.Threading.WorkStealingQueue`1.TrySteal(`0@,System.Int32)">
            <summary>
            Tries the steal an item from the "public" end of the queue.
            </summary>
            <param name="item">The item removed from the queue.</param>
            <param name="millisecondsTimeout">
            The number of millisecond to wait for a lock. If the value equals 
            <see cref="F:System.Threading.Timeout.Infinite"/>, this method blocks until the lock is acquired. If the value
            equals 0, this method immediately returns without blocking if the lock cannot be acquired.
            </param>
            <returns>
            <see langword="true"/> if an item was successfully removed; otherwise,
            <see langword="false"/> if the queue is empty.
            </returns>
        </member>
        <member name="T:DigitalRune.Threading.WorkStealingScheduler">
            <summary>
            A task scheduler that supports "work stealing" to balance tasks across multiple worker 
            threads.
            </summary>
        </member>
        <member name="M:DigitalRune.Threading.WorkStealingScheduler.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:DigitalRune.Threading.WorkStealingScheduler"/> class.
            </summary>
            <remarks>
            By default, the <see cref="T:DigitalRune.Threading.WorkStealingScheduler"/> creates one thread per processor (CPU
            core) on Windows, and 3 threads on the Xbox 360 (on the hardware threads 3, 4 and 5).
            </remarks>
        </member>
        <member name="M:DigitalRune.Threading.WorkStealingScheduler.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:DigitalRune.Threading.WorkStealingScheduler"/> class.
            </summary>
            <param name="numberOfThreads">The number of threads to create.</param>
        </member>
        <member name="M:DigitalRune.Threading.WorkStealingScheduler.Schedule(DigitalRune.Threading.Task)">
            <summary>
            Schedules a task for execution.
            </summary>
            <param name="task">The task to schedule.</param>
        </member>
        <member name="T:DigitalRune.Undo.IUndoableOperation">
            <summary>
            Represents an operation that supports Undo/Redo.
            </summary>
        </member>
        <member name="P:DigitalRune.Undo.IUndoableOperation.Description">
            <summary>
            Gets the description of the operation.
            </summary>
            <value>The description of the operation.</value>
            <remarks>
            The description is an object that identifies the operation that is performed. The object is 
            typically a static or dynamically generated string (such as "Insert 'abc'", "Backspace",
            etc.). The object can be listed in the drop-down menu of an Undo or Redo button.
            </remarks>
        </member>
        <member name="M:DigitalRune.Undo.IUndoableOperation.Undo">
            <summary>
            Undoes operation.
            </summary>
        </member>
        <member name="M:DigitalRune.Undo.IUndoableOperation.Do">
            <summary>
            Performs/Redoes operation.
            </summary>
        </member>
        <member name="T:DigitalRune.Undo.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Undo"/> namespace provides base classes for undo/redo
            functionality.
            </summary>
        </member>
        <member name="T:DigitalRune.Undo.UndoBuffer">
            <summary>
            Implements an undo/redo buffer.
            </summary>
        </member>
        <member name="E:DigitalRune.Undo.UndoBuffer.OperationUndone">
            <summary>
            Occurs after an operation is undone.
            </summary>
        </member>
        <member name="E:DigitalRune.Undo.UndoBuffer.OperationRedone">
            <summary>
            Occurs after an operation is redone.
            </summary>
        </member>
        <member name="E:DigitalRune.Undo.UndoBuffer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:DigitalRune.Undo.UndoBuffer.AcceptChanges">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Undo.UndoBuffer"/> accepts changes.
            </summary>
            <value><see langword="true"/> if this <see cref="T:DigitalRune.Undo.UndoBuffer"/> accepts changes; otherwise, 
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
            <remarks>
            This property can be used to disable the <see cref="T:DigitalRune.Undo.UndoBuffer"/> temporarily while undoing
            an operation. Any operations added (see <see cref="M:DigitalRune.Undo.UndoBuffer.Add(DigitalRune.Undo.IUndoableOperation)"/>) while this property is 
            <see langword="false"/> will be ignored and will not be recorded in the undo buffer.
            </remarks>
            <seealso cref="M:DigitalRune.Undo.UndoBuffer.Add(DigitalRune.Undo.IUndoableOperation)"/>
        </member>
        <member name="P:DigitalRune.Undo.UndoBuffer.CanUndo">
            <summary>
            Gets a value indicating whether there are operations on the undo stack.
            </summary>
            <value>
            <see langword="true"/> if an operation can be undone; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Undo.UndoBuffer.CanRedo">
            <summary>
            Gets a value indicating whether there are operations on the redo stack.
            </summary>
            <value>
            <see langword="true"/> if an operation can be redone; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Undo.UndoBuffer.IsUndoGroupOpen">
            <summary>
            Gets a value indicating whether an undo group is open.
            </summary>
            <value>
            <see langword="true"/> if an undo group open; otherwise, <see langword="false"/>.
            </value>
            <seealso cref="M:DigitalRune.Undo.UndoBuffer.BeginUndoGroup"/>
            <seealso cref="M:DigitalRune.Undo.UndoBuffer.EndUndoGroup(System.Object)"/>
        </member>
        <member name="P:DigitalRune.Undo.UndoBuffer.SizeLimit">
            <summary>
            Gets or sets the max number of undo steps stored in the undo buffer.
            </summary>
            <value>
            The max number of undo steps stored in the undo buffer. The default value is 
            <see cref="F:System.Int32.MaxValue"/>.
            </value>
            <remarks>
            Multiple operations grouped in an undo group by using 
            <see cref="M:DigitalRune.Undo.UndoBuffer.BeginUndoGroup"/>/<see cref="M:DigitalRune.Undo.UndoBuffer.EndUndoGroup(System.Object)"/> 
            count as a single undo step.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Undo.UndoBuffer.InternalUndoStack">
            <summary>
            Gets or sets the undo stack.
            </summary>
            <value>The undo stack.</value>
            <remarks>
            <para>
            The undo stack contains the operations in last-in-first-out order: The first element (see 
            <see cref="P:DigitalRune.Collections.Deque`1.Head"/>) contains the operation that was added last and that needs to be
            undone first.
            </para>
            <para>
            The number of operations stored in the undo stack can be limited by setting the 
            <see cref="P:DigitalRune.Undo.UndoBuffer.SizeLimit"/>. If the number of items in the undo stack exceed the limit, the 
            oldest operations are removed from the end of the undo stack (<see cref="P:DigitalRune.Collections.Deque`1.Tail"/>).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Undo.UndoBuffer.InternalRedoStack">
            <summary>
            Gets or sets the redo stack.
            </summary>
            <value>The redo stack.</value>
            <remarks>
            <para>
            The redo stack contains the operations in last-in-first-out order: The most-recently undone 
            operation is added at the beginning of the redo stack (see <see cref="P:DigitalRune.Collections.Deque`1.Head"/>). 
            When operation should be redone they need to be processed in the order from 
            <see cref="P:DigitalRune.Collections.Deque`1.Head"/> to <see cref="P:DigitalRune.Collections.Deque`1.Tail"/>.
            </para>
            <para>
            The redo stack is cleared every time a new operation is undone.
            </para>
            <para>
            The number of operations stored in the redo stack can be limited by setting the 
            <see cref="P:DigitalRune.Undo.UndoBuffer.SizeLimit"/>. If the number of items in the redo stack exceed the limit, the 
            oldest operations are removed from the end of the redo stack (<see cref="P:DigitalRune.Collections.Deque`1.Tail"/>).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Undo.UndoBuffer.UndoStack">
            <summary>
            Gets the undo stack.
            </summary>
            <value>The undo stack.</value>
            <remarks>
            <para>
            The undo stack contains the operations in last-in-first-out order: The first element
            is the operation that was executed last and that needs to be undone first.
            </para>
            <para>
            This is a read-only collection and should only be used to read information about the most 
            recently executed operations. The operations on the undo stack should not be manipulated
            directly. Call <see cref="M:DigitalRune.Undo.UndoBuffer.Undo"/> or <see cref="M:DigitalRune.Undo.UndoBuffer.Redo"/> to undo or redo operations.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Undo.UndoBuffer.RedoStack">
            <summary>
            Gets the redo stack.
            </summary>
            <value>The redo stack.</value>
            <remarks>
            <para>
            The redo stack contains the operations in last-in-first-out order: The most-recently undone 
            operation is at the begin of the redo stack.
            </para>
            <para>
            The redo stack is cleared every time a new operation is undone.
            </para>
            <para>
            This is a read-only collection and should only be used to read information about the most 
            recently undone operations. The operations on the redo stack should not be manipulated
            directly. Call <see cref="M:DigitalRune.Undo.UndoBuffer.Undo"/> or <see cref="M:DigitalRune.Undo.UndoBuffer.Redo"/> to undo or redo operations.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Undo.UndoBuffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Undo.UndoBuffer"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Undo.UndoBuffer.BeginUndoGroup">
            <summary>
            Begins a new undo group.
            </summary>
            <remarks>
            <para>
            An undo group is a group of operations that is combined into a single undo operation.
            </para>
            <para>
            Undo groups can be nested: New undo groups can be started within other undo groups. The
            number of <see cref="M:DigitalRune.Undo.UndoBuffer.EndUndoGroup(System.Object)"/> calls need to match the number of 
            <see cref="M:DigitalRune.Undo.UndoBuffer.BeginUndoGroup"/> calls. All operations between the outer 
            <see cref="M:DigitalRune.Undo.UndoBuffer.BeginUndoGroup"/> and <see cref="M:DigitalRune.Undo.UndoBuffer.EndUndoGroup(System.Object)"/> are combined and pushed onto the
            undo stack.
            </para>
            </remarks>
            <seealso cref="M:DigitalRune.Undo.UndoBuffer.EndUndoGroup(System.Object)"/>
            <seealso cref="P:DigitalRune.Undo.UndoBuffer.IsUndoGroupOpen"/>
        </member>
        <member name="M:DigitalRune.Undo.UndoBuffer.EndUndoGroup(System.Object)">
            <summary>
            Ends an undo group and puts the group of operations onto the <see cref="T:DigitalRune.Undo.UndoBuffer"/>.
            </summary>
            <param name="groupDescription">
            The description of the undo group. See <see cref="P:DigitalRune.Undo.IUndoableOperation.Description"/> for a
            more detailed description. (The parameter is ignored if this is a nested undo group.)
            </param>
            <remarks>
            An undo group is a group of operations that is combined into a single
            undo operation.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            There are no undo groups. (<see cref="M:DigitalRune.Undo.UndoBuffer.BeginUndoGroup"/> has not been called.)
            </exception>
            <seealso cref="M:DigitalRune.Undo.UndoBuffer.BeginUndoGroup"/>
            <seealso cref="P:DigitalRune.Undo.UndoBuffer.IsUndoGroupOpen"/>
        </member>
        <member name="M:DigitalRune.Undo.UndoBuffer.AssertNoUndoGroupOpen">
            <summary>
            Checks that no undo groups are open.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            An undo group is open.
            </exception>
        </member>
        <member name="M:DigitalRune.Undo.UndoBuffer.Undo">
            <summary>
            Undoes the last operation.
            </summary>
        </member>
        <member name="M:DigitalRune.Undo.UndoBuffer.Redo">
            <summary>
            Redoes the last undone operation.
            </summary>
        </member>
        <member name="M:DigitalRune.Undo.UndoBuffer.Add(DigitalRune.Undo.IUndoableOperation)">
            <summary>
            Adds an operation to the undo buffer.
            </summary>
            <param name="operation">The operation.</param>
            <remarks>
            <para>
            This methods needs to be called for every <see cref="T:DigitalRune.Undo.IUndoableOperation"/> before or after
            it is executed by calling its <see cref="M:DigitalRune.Undo.IUndoableOperation.Do"/> method. Note: 
            <see cref="M:DigitalRune.Undo.UndoBuffer.Add(DigitalRune.Undo.IUndoableOperation)"/> does not execute the <see cref="T:DigitalRune.Undo.IUndoableOperation"/> it will only record
            the operation.
            </para>
            <para>
            After the operation is recorded in the undo buffer it can be undone and redone by calling
            <see cref="M:DigitalRune.Undo.UndoBuffer.Undo"/> and <see cref="M:DigitalRune.Undo.UndoBuffer.Redo"/>.
            </para>
            <para>
            The recording of operations in the undo buffer can be temporarily disabled by setting
            <see cref="P:DigitalRune.Undo.UndoBuffer.AcceptChanges"/> to <see langword="false"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="operation"/> is <see langword="null"/>.
            </exception>
            <seealso cref="P:DigitalRune.Undo.UndoBuffer.AcceptChanges"/>
        </member>
        <member name="M:DigitalRune.Undo.UndoBuffer.ClearAll">
            <summary>
            Clears the undo buffer.
            </summary>
        </member>
        <member name="M:DigitalRune.Undo.UndoBuffer.OnOperationUndone">
            <summary>
            Raises the <see cref="E:DigitalRune.Undo.UndoBuffer.OperationUndone"/> event.
            </summary>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="E:DigitalRune.Undo.UndoBuffer.OperationUndone"/> 
            in a derived class, be sure to call the base class's <see cref="E:DigitalRune.Undo.UndoBuffer.OperationUndone"/> 
            method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:DigitalRune.Undo.UndoBuffer.OnOperationRedone">
            <summary>
            Raises the <see cref="E:DigitalRune.Undo.UndoBuffer.OperationRedone"/> event.
            </summary>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="E:DigitalRune.Undo.UndoBuffer.OperationRedone"/> 
            in a derived class, be sure to call the base class's <see cref="E:DigitalRune.Undo.UndoBuffer.OperationRedone"/> 
            method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:DigitalRune.Undo.UndoBuffer.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Undo.UndoBuffer.PropertyChanged"/> event.
            </summary>
            <param name="eventArgs">
            The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> describing the property that has changed.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Undo.UndoBuffer.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/> 
            in a derived class, be sure to call the base class's <see cref="M:DigitalRune.Undo.UndoBuffer.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/> 
            method so that registered delegates receive the event.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="eventArgs"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Undo.UndoGroup">
            <summary>
            Groups the last <i>n</i> operation into one operation that can be undone with a single Undo
            command.
            </summary>
        </member>
        <member name="P:DigitalRune.Undo.UndoGroup.Description">
            <summary>
            Gets or sets the description of the operation.
            </summary>
            <value>The description of the operation.</value>
        </member>
        <member name="M:DigitalRune.Undo.UndoGroup.#ctor(DigitalRune.Collections.Deque{DigitalRune.Undo.IUndoableOperation},System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Undo.UndoGroup"/> class.
            </summary>
            <param name="undoStack">The stack of undo operations.</param>
            <param name="numberOfOperations">The number of operations to combine.</param>
            <param name="description">The description of the operation.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="undoStack"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Undo.UndoGroup.Undo">
            <summary>
            Undoes the operation.
            </summary>
        </member>
        <member name="M:DigitalRune.Undo.UndoGroup.Do">
            <summary>
            Redoes the operation.
            </summary>
        </member>
        <member name="T:DigitalRune.InternalWeakDelegate">
            <summary>
            Stores <see cref="T:System.Delegate"/> that contains a weak reference to the target.
            </summary>
        </member>
        <member name="F:DigitalRune.InternalWeakDelegate.TargetReference">
            <summary>
            The weak reference of the target object, or <see langword="null"/> if the delegate method is
            a static method.
            </summary>
        </member>
        <member name="F:DigitalRune.InternalWeakDelegate.MethodInfo">
            <summary>
            The metadata of the delegate method.
            </summary>
        </member>
        <member name="F:DigitalRune.InternalWeakDelegate.DelegateType">
            <summary>
            The type of the delegate.
            </summary>
        </member>
        <member name="P:DigitalRune.InternalWeakDelegate.Delegate">
            <summary>
            Gets the <see cref="T:System.Delegate"/> stored by the current 
            <see cref="T:DigitalRune.InternalWeakDelegate"/> object.
            </summary>
            <value>
            <see langword="null"/> if the object referenced by the current 
            <see cref="T:DigitalRune.InternalWeakDelegate"/> object has been garbage collected; otherwise, a 
            reference to the <see cref="T:System.Delegate"/>.
            </value>
        </member>
        <member name="P:DigitalRune.InternalWeakDelegate.IsAlive">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Delegate"/> referenced by this 
            <see cref="T:DigitalRune.InternalWeakDelegate"/> has been garbage collected.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:System.Delegate"/> referenced by the current 
            <see cref="T:DigitalRune.InternalWeakDelegate"/> has not been garbage collected and is still 
            accessible; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
            <strong>Important:</strong> Because an object could potentially be reclaimed for garbage 
            collection immediately after the <see cref="P:DigitalRune.InternalWeakDelegate.IsAlive"/> property returns 
            <see langword="true"/>, using this property is not recommended unless you are testing only 
            for a <see langword="false"/> return value. 
            </para>
            <para>
            If the referenced <see cref="T:System.Delegate"/> is a static method, <see cref="P:DigitalRune.InternalWeakDelegate.IsAlive"/> 
            will always return <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.InternalWeakDelegate.#ctor(System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.InternalWeakDelegate"/> class.
            </summary>
            <param name="delegate">
            The original <see cref="T:System.Delegate"/> to create a weak reference for.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="delegate"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.InternalWeakDelegate.Invoke(System.Object[])">
            <summary>
            Invokes the stored <see cref="T:System.Delegate"/> with the given arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:DigitalRune.WeakDelegate">
            <summary>
            Represents a <see cref="P:DigitalRune.WeakDelegate.Delegate"/> that stores the target object as a weak reference.
            </summary>
            <remarks>
            <strong>Important:</strong> In Silverlight, the target of a <see cref="T:DigitalRune.WeakDelegate"/> needs 
            to be a public method (not a private, protected or anonymous method). This is necessary 
            because of security restrictions in Silverlight.
            </remarks>
        </member>
        <member name="P:DigitalRune.WeakDelegate.TargetReference">
            <summary>
            Gets the weak reference of the target object.
            </summary>
            <value>
            The weak reference of the target object, or <see langword="null"/> if the delegate method is
            a static method.
            </value>
        </member>
        <member name="P:DigitalRune.WeakDelegate.MethodInfo">
            <summary>
            Gets the metadata of the delegate method.
            </summary>
            <value>The metadata of the delegate method.</value>
        </member>
        <member name="P:DigitalRune.WeakDelegate.DelegateType">
            <summary>
            Gets the type of delegate.
            </summary>
            <value>The type of delegate.</value>
        </member>
        <member name="P:DigitalRune.WeakDelegate.Delegate">
            <summary>
            Gets the <see cref="T:System.Delegate"/> stored by the current <see cref="T:DigitalRune.WeakDelegate"/> 
            object.
            </summary>
            <value>
            <see langword="null"/> if the object referenced by the current <see cref="T:DigitalRune.WeakDelegate"/> 
            object has been garbage collected; otherwise, a reference to the <see cref="T:System.Delegate"/>.
            </value>
        </member>
        <member name="P:DigitalRune.WeakDelegate.IsAlive">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Delegate"/> referenced by this 
            <see cref="T:DigitalRune.WeakDelegate"/> has been garbage collected.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:System.Delegate"/> referenced by the current 
            <see cref="T:DigitalRune.WeakDelegate"/> has not been garbage collected and is still accessible; 
            otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
            <strong>Important:</strong> Because an object could potentially be reclaimed for garbage 
            collection immediately after the <see cref="P:DigitalRune.WeakDelegate.IsAlive"/> property returns 
            <see langword="true"/>, using this property is not recommended unless you are testing only 
            for a <see langword="false"/> return value. 
            </para>
            <para>
            If the referenced <see cref="T:System.Delegate"/> is a static method, <see cref="P:DigitalRune.WeakDelegate.IsAlive"/> 
            will always return <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.WeakDelegate.#ctor(System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.WeakDelegate"/> class.
            </summary>
            <param name="delegate">
            The original <see cref="T:System.Delegate"/> to create a weak reference for.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="delegate"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.WeakDelegate.Invoke(System.Object[])">
            <summary>
            Invokes the stored <see cref="T:System.Delegate"/> with the given arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:DigitalRune.WeakDelegate`1">
            <summary>
            Represents a <see cref="T:System.Delegate"/> of a specific type that stores the target object as a weak 
            reference.
            </summary>
            <typeparam name="T">The type of delegate.</typeparam>
            <remarks>
            <strong>Important:</strong> In Silverlight, the target of a <see cref="T:DigitalRune.WeakDelegate"/> needs 
            to be a public method (not a private, protected or anonymous method). This is necessary 
            because of security restrictions in Silverlight.
            </remarks>
        </member>
        <member name="M:DigitalRune.WeakDelegate`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.WeakDelegate`1"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="T"/> must be a delegate type.
            </exception>
        </member>
        <member name="M:DigitalRune.WeakDelegate`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.WeakDelegate`1"/> class.
            </summary>
            <param name="target">
            The original <see cref="T:System.Delegate"/> to create a weak reference for.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="target"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.WeakEvent`1">
            <summary>
            Represents an event that stores the target objects as weak 
            references.
            </summary>
            <typeparam name="T">
            The type of event handler. Must be of type <see cref="T:System.EventHandler"/> or 
            <see cref="T:System.EventHandler`1"/>.
            </typeparam>
            <remarks>
            <strong>Important:</strong> In Silverlight, the event handlers that handle the weak event 
            need to be public methods (no private, protected or anonymous methods). This is necessary 
            because of security restrictions in Silverlight.
            </remarks>
            <example>
            The following examples shows how a class can implement a weak event.
            <code lang="csharp">
            <![CDATA[
            class MyEventSource
            {
              private readonly WeakEvent<EventHandler<EventArgs>> _myEvent = new WeakEvent<EventHandler<EventArgs>>();
            
              public event EventHandler<EventArgs> MyEvent
              {
                add { _myEvent.Add(value); }
                remove { _myEvent.Remove(value); }
              }
              
              protected virtual void OnMyEvent(EventArgs eventArgs)
              {
                _myEvent.Invoke(this, eventArgs);
              }  
            }  
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DigitalRune.WeakEvent`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.WeakEvent`1"/> class.
            </summary>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="T"/> is not of type <see cref="T:System.EventHandler"/> or 
            <see cref="T:System.EventHandler`1"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.WeakEvent`1.Invoke(System.Object,System.EventArgs)">
            <overloads>
            <summary>
            Raises the event.
            </summary>
            </overloads>
            
            <summary>
            Raises the event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:DigitalRune.WeakEventSubscription">
            <summary>
            Represents subscription of a weak event handler to an event. (Can be used to detach the event 
            handler. Is automatically disposed if the event handler is garbage-collected.)
            </summary>
        </member>
        <member name="P:DigitalRune.WeakEventSubscription.RemoveHandler">
            <summary>
            Gets or sets a callback that detaches the event handler from the event source.
            </summary>
            <value>The callback that detaches the event handler from the event source.</value>
        </member>
        <member name="P:DigitalRune.WeakEventSubscription.Listener">
            <summary>
            Gets the object listening to the event.
            </summary>
            <value>
            The object listening to the event. Can be <see langword="null"/> if the object has been
            garbage-collected.
            </value>
        </member>
        <member name="M:DigitalRune.WeakEventSubscription.Dispose">
            <summary>
            Detaches the event handler from the event.
            </summary>
        </member>
        <member name="T:DigitalRune.WeakEventHandler">
            <summary>
            Helper class to add weak event handlers to events of type <see cref="T:System.EventHandler"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.WeakEventHandler.Register``2(``0,``1,System.Action{``0,System.EventHandler},System.Action{``0,System.EventHandler},System.Action{``1,System.Object,System.EventArgs})">
            <summary>
            Registers an event handler that works with a weak reference to the target object.
            </summary>
            <typeparam name="TSender">The type of the sender.</typeparam>
            <typeparam name="TListener">The type of the listener.</typeparam>
            <param name="sender">The object that provides the event.</param>
            <param name="listener">The object that listens to the event.</param>
            <param name="addHandler">A callback method that adds an event handler to the event.</param>
            <param name="removeHandler">
            A callback method that removes an event handler from the event.
            </param>
            <param name="forwardEvent">
            A callback method that forwards the event to the actual event handler.
            </param>
            <returns>
            An <see cref="T:System.IDisposable"/> which can be used to detach the weak event handler from the 
            event.
            </returns>
            <remarks>
            Access to the event and to the real event handler is done through lambda expressions. The
            code holds strong references to these expressions, so they must not capture any variables of
            the target object (listener)!
            </remarks>
            <example>
            <code lang="csharp">
            <![CDATA[
            WeakEventHandler.Register(
                textDocument,
                this,
                (sender, eventHandler) => sender.Changed += eventHandler,
                (sender, eventHandler) => sender.Changed -= eventHandler,
                (listener, sender, eventArgs) => listener.OnDocumentChanged(sender, eventArgs));
            ]]>
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/>, <paramref name="addHandler"/>, <paramref name="removeHandler"/>, 
            <paramref name="listener"/>, or <paramref name="forwardEvent"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.WeakEventHandler`1">
            <summary>
            Helper class to add weak event handlers to events of type
            <see cref="T:System.EventHandler`1"/>.
            </summary>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
        </member>
        <member name="M:DigitalRune.WeakEventHandler`1.Register``2(``0,``1,System.Action{``0,System.EventHandler{`0}},System.Action{``0,System.EventHandler{`0}},System.Action{``1,System.Object,`0})">
            <summary>
            Registers an event handler that works with a weak reference to the target object.
            </summary>
            <typeparam name="TSender">The type of the sender.</typeparam>
            <typeparam name="TListener">The type of the listener.</typeparam>
            <param name="sender">The object that provides the event.</param>
            <param name="listener">The object that listens to the event.</param>
            <param name="addHandler">A callback method that adds an event handler to the event.</param>
            <param name="removeHandler">
            A callback method that removes an event handler from the event.
            </param>
            <param name="forwardEvent">
            A callback method that forwards the event to the actual event handler.
            </param>
            <returns>
            An <see cref="T:System.IDisposable"/> which can be used to detach the weak event handler from the 
            event.
            </returns>
            <remarks>
            Access to the event and to the real event handler is done through lambda expressions. The
            code holds strong references to these expressions, so they must not capture any variables of
            the target object (listener)!
            </remarks>
            <example>
            <code lang="csharp">
            <![CDATA[
            WeakEventHandler<DocumentChangeEventArgs>.Register(
               textDocument,
               this,
               (sender, eventHandler) => sender.Changed += eventHandler,
               (sender, eventHandler) => sender.Changed -= eventHandler,
               (listener, sender, eventArgs) => listener.OnDocumentChanged(sender, eventArgs));
            ]]>
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/>, <paramref name="addHandler"/>, <paramref name="removeHandler"/>,
            <paramref name="listener"/>, or <paramref name="forwardEvent"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.WeakEventHandler`2">
            <summary>
            Helper class to add weak event handlers to events of a certain type of event handler.
            </summary>
            <typeparam name="TEventHandler">The type of the event handler.</typeparam>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
        </member>
        <member name="M:DigitalRune.WeakEventHandler`2.Register``2(``0,``1,System.Func{System.EventHandler{`1},`0},System.Action{``0,`0},System.Action{``0,`0},System.Action{``1,System.Object,`1})">
            <summary>
            Registers an event handler that works with a weak reference to the target object.
            </summary>
            <typeparam name="TSender">The type of the sender.</typeparam>
            <typeparam name="TListener">The type of the listener.</typeparam>
            <param name="sender">The object that provides the event.</param>
            <param name="listener">The object that listens to the event.</param>
            <param name="conversion">
            A function used to convert the given event handler to a delegate compatible with the 
            underlying .NET event.
            </param>
            <param name="addHandler">A callback method that adds an event handler to the event.</param>
            <param name="removeHandler">
            A callback method that removes an event handler from the event.
            </param>
            <param name="forwardEvent">
            A callback method that forwards the event to the actual event handler.
            </param>
            <returns>
            An <see cref="T:System.IDisposable"/> which can be used to detach the weak event handler from the 
            event.
            </returns>
            <remarks>
            Access to the event and to the real event handler is done through lambda expressions. The
            code holds strong references to these expressions, so they must not capture any variables of
            the target object (listener)!
            </remarks>
            <example>
            <code lang="csharp">
            <![CDATA[
            WeakEventHandler<PropertyChangedEventHandler, PropertyChangedEventArgs>.Register(
                textDocument,
                this,
                handler => new PropertyChangedEventHandler(handler),
                (sender, pcHandler) => sender.PropertyChanged += pcHandler,
                (sender, pcHandler) => sender.PropertyChanged -= pcHandler,
                (listener, sender, eventArgs) => listener.OnDocumentChanged(sender, eventArgs));
            ]]>
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sender"/>, <paramref name="addHandler"/>, <paramref name="removeHandler"/>,
            <paramref name="listener"/>, or <paramref name="forwardEvent"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.WeakMulticastDelegate">
            <summary>
            Represents a <see cref="T:System.MulticastDelegate"/> that stores the target objects as weak 
            references.
            </summary>
            <remarks>
            <strong>Important:</strong> In Silverlight, the targets of a 
            <see cref="T:DigitalRune.WeakMulticastDelegate"/> need to be public methods (no private, protected or
            anonymous methods). This is necessary because of security restrictions in Silverlight.
            </remarks>
        </member>
        <member name="P:DigitalRune.WeakMulticastDelegate.Count">
            <summary>
            Gets the number of live delegates in the collection.
            </summary>
            <value>The number of live delegates in the collection.</value>
        </member>
        <member name="M:DigitalRune.WeakMulticastDelegate.Add(System.Delegate)">
            <summary>
            Adds a new <see cref="T:System.Delegate"/> to the <see cref="T:DigitalRune.WeakMulticastDelegate"/>.
            </summary>
            <param name="delegate">The new <see cref="T:System.Delegate"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="delegate"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.WeakMulticastDelegate.Remove(System.Delegate)">
            <summary>
            Removes a <see cref="T:System.Delegate"/> from the <see cref="T:DigitalRune.WeakMulticastDelegate"/>.
            </summary>
            <param name="delegate">The <see cref="T:System.Delegate"/> to remove.</param>
        </member>
        <member name="M:DigitalRune.WeakMulticastDelegate.Invoke(System.Object[])">
            <summary>
            Invokes the stored <see cref="T:System.Delegate"/>s with the given arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:DigitalRune.WeakMulticastDelegate.Purge">
            <summary>
            Purges the garbage-collected delegates.
            </summary>
        </member>
        <member name="T:DigitalRune.WeakMulticastDelegate`1">
            <summary>
            Represents a <see cref="T:System.MulticastDelegate"/> that stores the target objects as weak 
            references.
            </summary>
            <typeparam name="T">The type of delegate.</typeparam>
            <remarks>
            <strong>Important:</strong> In Silverlight, the targets of a 
            <see cref="T:DigitalRune.WeakMulticastDelegate"/> need to be public methods (no private, protected or
            anonymous methods). This is necessary because of security restrictions in Silverlight.
            </remarks>
        </member>
        <member name="M:DigitalRune.WeakMulticastDelegate`1.Add(`0)">
            <overloads>
            <summary>
            Adds a new <see cref="T:System.Delegate"/> to the <see cref="T:DigitalRune.WeakMulticastDelegate`1"/>.
            </summary>
            </overloads>
            
            <summary>
            Adds a new <see cref="T:System.Delegate"/> of a given type to the 
            <see cref="T:DigitalRune.WeakMulticastDelegate`1"/>.
            </summary>
            <param name="delegate">The new <see cref="T:System.Delegate"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="delegate"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.WeakMulticastDelegate`1.Remove(`0)">
            <overloads>
            <summary>
            Removes a <see cref="T:System.Delegate"/> from the <see cref="T:DigitalRune.WeakMulticastDelegate`1"/>.
            </summary>
            </overloads>
            
            <summary>
            Removes a <see cref="T:System.Delegate"/> of a given type from the 
            <see cref="T:DigitalRune.WeakMulticastDelegate`1"/>.
            </summary>
            <param name="delegate">The <see cref="T:System.Delegate"/> to remove.</param>
        </member>
    </members>
</doc>
