<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DigitalRune.Particles</name>
    </assembly>
    <members>
        <member name="T:DigitalRune.Particles.Effectors.AngularVelocityEffector">
            <summary>
            Applies an angular velocity to an angle parameter.
            </summary>
            <remarks>
            <para>
            This effector changes an angle parameter by applying an angular velocity.
            </para>
            <para>
            Used particle parameters:
            <list type="table">
            <listheader><term>Particle Parameter</term><description>Description</description></listheader>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.AngularVelocityEffector.AngleParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that defines the angle in radians. This parameter is modified 
            by this effector. The angle is always kept in the interval [0, 2Ï€[. Per default, the 
            parameter "Angle" is used.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.AngularVelocityEffector.SpeedParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that defines the angular speed in radians per second. Per 
            default, the parameter "AngularSpeed" is used.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.AngularVelocityEffector.AngleParameter">
            <summary>
            Gets or sets the name of the parameter that defines the angle.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that defines the angle.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is "Angle".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.AngularVelocityEffector.SpeedParameter">
            <summary>
            Gets or sets the name of the parameter that defines the rotation speed.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that defines the rotation speed.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is "AngularSpeed".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.AngularVelocityEffector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.AngularVelocityEffector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.AngularVelocityEffector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.AngularVelocityEffector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.AngularVelocityEffector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.AngularVelocityEffector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.AngularVelocityEffector.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.AngularVelocityEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.FuncEffector`2">
            <summary>
            Evaluates a custom (delegate) function for a single input particle parameter and stores the 
            result in another particle parameter.
            </summary>
            <typeparam name="T">The type of the function parameter.</typeparam>
            <typeparam name="TResult">The return type of the function.</typeparam>
            <remarks>
            <para>
            This effector executes a given delegate <see cref="P:DigitalRune.Particles.Effectors.FuncEffector`2.Func"/> to compute the particle parameter 
            value. The delegate function takes a single parameter (<see cref="P:DigitalRune.Particles.Effectors.FuncEffector`2.InputParameter"/>) and the 
            function result is stored in another parameter (<see cref="P:DigitalRune.Particles.Effectors.FuncEffector`2.OutputParameter"/>).
            </para>
            <para>
            Please note: Since this effector executes a delegate call for each particle, it is less 
            efficient than other particle effectors.
            </para>
            <para>
            Used particle parameters:
            <list type="table">
            <listheader><term>Particle Parameter</term><description>Description</description></listheader>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.FuncEffector`2.InputParameter"/></term>
            <description>
            A <typeparamref name="T"/> parameter that provides the function parameter.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.FuncEffector`2.OutputParameter"/></term>
            <description>
            A <typeparamref name="TResult"/> parameter that stores the result of the function.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.FuncEffector`2.InputParameter">
            <summary>
            Gets or sets the name of the input parameter.
            (A varying or uniform parameter of type <typeparamref name="T"/>.)
            </summary>
            <value>
            The name of the input parameter.
            (Parameter type: varying or uniform, value type: <typeparamref name="T"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.FuncEffector`2.OutputParameter">
            <summary>
            Gets or sets the name of the output parameter.
            (A varying or uniform parameter of type <typeparamref name="TResult"/>.)
            </summary>
            <value>
            The name of the output parameter.
            (Parameter type: varying or uniform, value type: <typeparamref name="TResult"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.FuncEffector`2.Func">
            <summary>
            Gets or sets the delegate function.
            </summary>
            <value>The delegate function.</value>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.FuncEffector`2.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.FuncEffector`2.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.FuncEffector`2.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.FuncEffector`2.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.FuncEffector`2.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.FuncEffector`2.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.FuncEffector`3">
            <summary>
            Evaluates a custom (delegate) function for two input particle parameters and stores the result
            in another particle parameter.
            </summary>
            <typeparam name="T1">The type of the first function parameter.</typeparam>
            <typeparam name="T2">The type of the second function parameter.</typeparam>
            <typeparam name="TResult">The return type of the function.</typeparam>
            <remarks>
            <para>
            This effector executes a given delegate <see cref="P:DigitalRune.Particles.Effectors.FuncEffector`3.Func"/> to compute the particle 
            parameter value. The delegate function takes a two parameters (see 
            <see cref="P:DigitalRune.Particles.Effectors.FuncEffector`3.InputParameter1"/> and <see cref="P:DigitalRune.Particles.Effectors.FuncEffector`3.InputParameter2"/>) and the function result is 
            stored in another parameter (see <see cref="P:DigitalRune.Particles.Effectors.FuncEffector`3.OutputParameter"/>).
            </para>
            <para>
            Please note: Since this effector executes a delegate call for each particle, it is less 
            efficient than other particle effectors.
            </para>
            <para>
            Used particle parameters:
            <list type="table">
            <listheader><term>Particle Parameter</term><description>Description</description></listheader>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.FuncEffector`3.InputParameter1"/></term>
            <description>
            A <typeparamref name="T1"/> parameter that provides the first function parameter.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.FuncEffector`3.InputParameter2"/></term>
            <description>
            A <typeparamref name="T2"/> parameter that provides the second function parameter.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.FuncEffector`3.OutputParameter"/></term>
            <description>
            A <typeparamref name="TResult"/> parameter that stores the result of the function.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.FuncEffector`3.InputParameter1">
            <summary>
            Gets or sets the name of the first input parameter.
            (A varying or uniform parameter of type <typeparamref name="T1"/>.)
            </summary>
            <value>
            The name of the first input parameter.
            (Parameter type: varying or uniform, value type: <typeparamref name="T1"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.FuncEffector`3.InputParameter2">
            <summary>
            Gets or sets the name of the second input parameter.
            (A varying or uniform parameter of type <typeparamref name="T2"/>.)
            </summary>
            <value>
            The name of the second input parameter.
            (Parameter type: varying or uniform, value type: <typeparamref name="T2"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.FuncEffector`3.OutputParameter">
            <summary>
            Gets or sets the name of the output parameter.
            (A varying or uniform parameter of type <typeparamref name="TResult"/>.)
            </summary>
            <value>
            The name of the output parameter.
            (Parameter type: varying or uniform, value type: <typeparamref name="TResult"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.FuncEffector`3.Func">
            <summary>
            Gets or sets the delegate function.
            </summary>
            <value>The delegate function.</value>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.FuncEffector`3.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.FuncEffector`3.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.FuncEffector`3.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.FuncEffector`3.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.FuncEffector`3.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.FuncEffector`3.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.LinearAccelerationEffector">
            <summary>
            Applies an acceleration to a particle parameter.
            </summary>
            <remarks>
            <para>
            This effector changes a linear velocity by applying an acceleration.
            </para>
            <para>
            Used particle parameters:
            <list type="table">
            <listheader><term>Particle Parameter</term><description>Description</description></listheader>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.LinearAccelerationEffector.DirectionParameter"/></term>
            <description>
            A normalized <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> parameter that defines the movement direction (direction 
            of the linear velocity vector). This parameter is modified by applying the acceleration.
            Per default, the parameter "Direction" is used.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.LinearAccelerationEffector.SpeedParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that defines the movement speed (magnitude of the linear 
            velocity vector). This parameter is modified by applying the acceleration. 
            Per default, the parameter "LinearSpeed" is used.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.LinearAccelerationEffector.AccelerationParameter"/></term>
            <description>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> parameter that defines the acceleration vector. The direction of the 
            vector defines the acceleration direction. The length of the vector defines the magnitude of 
            the acceleration. Per default, the parameter "LinearAcceleration" is used.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.LinearAccelerationEffector.DirectionParameter">
            <summary>
            Gets or sets the name of the parameter that defines the movement direction.
            (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the parameter that defines the movement direction.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is "Direction".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.LinearAccelerationEffector.SpeedParameter">
            <summary>
            Gets or sets the name of the parameter that defines the movement speed.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that defines the movement speed.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is "LinearSpeed".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.LinearAccelerationEffector.AccelerationParameter">
            <summary>
            Gets or sets the name of the parameter that defines the acceleration vector.
            (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the parameter that defines the acceleration vector.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is "LinearAcceleration".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearAccelerationEffector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.LinearAccelerationEffector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearAccelerationEffector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearAccelerationEffector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearAccelerationEffector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearAccelerationEffector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearAccelerationEffector.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearAccelerationEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.LinearVelocityEffector">
            <summary>
            Applies a linear velocity to a 3D position parameter.
            </summary>
            <remarks>
            <para>
            This effector changes a position parameter by applying a linear velocity.
            </para>
            <para>
            Used particle parameters:
            <list type="table">
            <listheader><term>Particle Parameter</term><description>Description</description></listheader>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.LinearVelocityEffector.PositionParameter"/></term>
            <description>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> parameter that defines the position. This parameter is modified by 
            the effector. Per default, the parameter "Position" is used.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.LinearVelocityEffector.DirectionParameter"/></term>
            <description>
            A normalized <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> parameter that defines the movement direction (direction 
            of the linear velocity vector). Per default, the parameter "Direction" is used.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.LinearVelocityEffector.SpeedParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that defines the movement speed (magnitude of the linear 
            velocity vector). Per default, the parameter "LinearSpeed" is used.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.LinearVelocityEffector.PositionParameter">
            <summary>
            Gets or sets the name of the parameter that defines the position.
            (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the parameter that defines the position.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is "Position".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.LinearVelocityEffector.DirectionParameter">
            <summary>
            Gets or sets the name of the parameter that defines the movement direction.
            (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the parameter that defines the movement direction.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is "Direction".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.LinearVelocityEffector.SpeedParameter">
            <summary>
            Gets or sets the name of the parameter that defines the movement speed.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that defines the movement speed.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is "LinearSpeed".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearVelocityEffector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.LinearVelocityEffector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearVelocityEffector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearVelocityEffector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearVelocityEffector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearVelocityEffector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearVelocityEffector.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.LinearVelocityEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Particles.Effectors"/> namespace provides particle effectors
            which can be used to create and manipulate particles in a particle system.
            </summary>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.ReserveParticleEffector">
            <summary>
            Kills old particles if the particle system reaches the 
            <see cref="P:DigitalRune.Particles.ParticleSystem.MaxNumberOfParticles"/> limit.
            </summary>
            <remarks>
            The number of particles in each <see cref="T:DigitalRune.Particles.ParticleSystem"/> is limited (see 
            <see cref="P:DigitalRune.Particles.ParticleSystem.MaxNumberOfParticles"/>). If the limit is reached, no more new
            particles can be emitted until existing particles die. The <see cref="T:DigitalRune.Particles.Effectors.ReserveParticleEffector"/>
            monitors <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfActiveParticles"/> and if less than 
            <see cref="P:DigitalRune.Particles.Effectors.ReserveParticleEffector.Reserve"/> particles are left, it kills the oldest particles (by setting their 
            "NormalizedAge" to 1) in its <see cref="M:DigitalRune.Particles.Effectors.ReserveParticleEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)"/> method. This effector ensures 
            that there are always free particles ready to be emitted. Usually, this effector should be 
            added as the last effector to the <see cref="P:DigitalRune.Particles.ParticleSystem.Effectors"/> collection of the 
            particle system because it should be updated after all other effectors.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.ReserveParticleEffector.Reserve">
            <summary>
            Gets or sets the number of particles to reserve.
            </summary>
            <value>
            The number of particles to reserve. The default value is 5.
            </value>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.ReserveParticleEffector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.ReserveParticleEffector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.ReserveParticleEffector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.ReserveParticleEffector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.ReserveParticleEffector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.ReserveParticleEffector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.ReserveParticleEffector.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.ReserveParticleEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.SingleDampingEffector">
            <summary>
            Applies a damping to a particle parameter of type <see cref="T:System.Single"/>.
            </summary>
            <remarks>
            <para>
            All parameters must be of type <see cref="T:System.Single"/>.
            </para>
            <para>
            This effector reduces a parameter value over time by applying a damping.
            </para>
            <para>
            Used particle parameters:
            <list type="table">
            <listheader><term>Particle Parameter</term><description>Description</description></listheader>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.SingleDampingEffector.ValueParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that is dampened. Per default, the parameter "LinearSpeed" is 
            used.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.SingleDampingEffector.DampingParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that defines the damping factor. A value of 0 means no 
            damping. Values greater than 0 mean higher damping. Per default, the parameter "Damping" is 
            used.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleDampingEffector.ValueParameter">
            <summary>
            Gets or sets the name of the particle parameter that is damped.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the particle parameter that is damped.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is "LinearSpeed".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleDampingEffector.DampingParameter">
            <summary>
            Gets or sets the name of the particle parameter that defines the strength of the damping.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the particle parameter that defines the strength of the damping.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is "Damping".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleDampingEffector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.SingleDampingEffector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleDampingEffector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleDampingEffector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleDampingEffector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleDampingEffector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleDampingEffector.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleDampingEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.SingleFadeEffector">
            <summary>
            Fades a particle parameter of type <see cref="T:System.Single"/> in and out.
            </summary>
            <remarks>
            <para>
            All parameters must be of type <see cref="T:System.Single"/>.
            </para>
            <para>
            This effector changes a parameter value from 0 to a target value ("fade-in"). Then the value 
            is kept at the target value. Later the value is changed from the target value to 0 
            ("fade-out").
            </para>
            <para>
            The fade-in interval is defined by <see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeInStart"/> and <see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeInEnd"/>. The 
            fade-out interval is defined by <see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeOutStart"/> and <see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeOutEnd"/>. These
            intervals should be non-overlapping and the start values should be less than the corresponding
            end values. Usually, the fade-in interval lies before the fade-out interval, but it is allowed
            to swap the intervals to create a fade-out followed by a fade-in. The factor parameter (see 
            <see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.TimeParameter"/>) defines the progress of the fade-in/out. This parameter is 
            usually the "NormalizedAge" of the particles. 
            </para>
            <para>
            Used particle parameters:
            <list type="table">
            <listheader><term>Particle Parameter</term><description>Description</description></listheader>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.ValueParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that stores the result.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.TargetValueParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that defines the target value. This parameter is optional.
            If it is not set, the target value is 1.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.TimeParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that defines the fade-in/out factor. If this value is between 
            <see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeInStart"/> and <see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeInEnd"/>, then the value parameter is faded in. 
            If this value is between <see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeOutStart"/> and <see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeOutEnd"/>, then the 
            value parameter is faded out. Per default, the parameter "NormalizedAge" is used.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleFadeEffector.ValueParameter">
            <summary>
            Gets or sets the name of the parameter that is faded in/out.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that is faded in/out.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleFadeEffector.TargetValueParameter">
            <summary>
            Gets or sets the name of the parameter that defines the target value.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that defines the target value.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is <see langword="null"/>. If this parameter is missing, the
            target value is 1.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleFadeEffector.TimeParameter">
            <summary>
            Gets or sets the name of the parameter that defines the progress of the fade-in/out.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that defines the progress of the fade-in/out.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is "NormalizedAge".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeInStart">
            <summary>
            Gets or sets the threshold that defines when the fade-in starts.
            </summary>
            <value>
            The threshold that defines when the fade-in starts. 
            This value should be less than <see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeInEnd"/>.
            The default value is 0.
            </value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeInEnd">
            <summary>
            Gets or sets the threshold that defines when the fade-in ends.
            </summary>
            <value>
            The threshold that defines when the fade-in ends. This value should be greater than 
            <see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeInStart"/>. The default value is 0.5.
            </value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeOutStart">
            <summary>
            Gets or sets the threshold that defines when the fade-out starts.
            </summary>
            <value>
            The threshold that defines when the fade-out starts. This value should be less than 
            <see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeOutEnd"/>. The default value is 0.5.
            </value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeOutEnd">
            <summary>
            Gets or sets the threshold that defines when the fade-out ends.
            </summary>
            <value>
            The threshold that defines when the fade-out ends. This value should be greater than 
            <see cref="P:DigitalRune.Particles.Effectors.SingleFadeEffector.FadeOutStart"/>. The default value is 1.
            </value>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleFadeEffector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.SingleFadeEffector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleFadeEffector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleFadeEffector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleFadeEffector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleFadeEffector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleFadeEffector.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleFadeEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.SingleLerpEffector">
            <summary>
            Linearly interpolates a particle parameter of type <see cref="T:System.Single"/> between a start and an 
            end value.
            </summary>
            <remarks>
            <para>
            All parameters must be of type <see cref="T:System.Single"/>.
            </para>
            <para>
            Used particle parameters:
            <list type="table">
            <listheader><term>Particle Parameter</term><description>Description</description></listheader>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.SingleLerpEffector.ValueParameter"/></term>
            <description>
            The <see cref="T:System.Single"/> parameter that stores the result of the linear interpolation.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.SingleLerpEffector.StartParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that defines the start value.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.SingleLerpEffector.EndParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that defines the end value.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.SingleLerpEffector.FactorParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that defines the interpolation factor. If this factor is 0, 
            the interpolation results is equal to the start value. If this factor is 1, the interpolation 
            result is equal to the end value. Per default, the parameter "NormalizedAge" is used.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLerpEffector.ValueParameter">
            <summary>
            Gets or sets the name of the parameter that stores the interpolation result.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that stores the interpolation result.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLerpEffector.StartParameter">
            <summary>
            Gets or sets the name of the parameter that defines the start value.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that defines the start value.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLerpEffector.EndParameter">
            <summary>
            Gets or sets the name of the parameter that defines the end value.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that defines the end value.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLerpEffector.FactorParameter">
            <summary>
            Gets or sets the name of the parameter that defines the interpolation factor.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that defines the interpolation factor.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is "NormalizedAge".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLerpEffector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.SingleLerpEffector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLerpEffector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLerpEffector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLerpEffector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLerpEffector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLerpEffector.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLerpEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector">
            <summary>
            Evaluates a piecewise linear function consisting of 3 segments and multiplies the result with 
            a particle parameter.
            </summary>
            <remarks>
            <para>
            All parameters must be of type <see cref="T:System.Single"/>.
            </para>
            <para>
            A piecewise linear function is defined using several data points:
            (<see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Time0"/>, <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Value0"/>), (<see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Time1"/>, <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Value1"/>),
            (<see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Time2"/>, <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Value2"/>) and (<see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Time3"/>, <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Value3"/>).
            If the time (see <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.TimeParameter"/>) is less than <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Time0"/>, then the
            function value is <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Value0"/>. If the time is greater than <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Time3"/>, then 
            the function value is <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Value3"/>. If the time is between those limits, the function
            value is the interpolation of the nearest data point. The time values <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Time0"/> to 
            <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Time3"/> must be given in ascending order.
            </para>
            <para>
            The result of the function is multiplied with the <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.InputParameter"/> and stored in 
            the <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.OutputParameter"/>. (If <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.InputParameter"/> is not set, then the 
            function value is directly stored in the <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.OutputParameter"/>.)
            </para>
            <para>
            Used particle parameters:
            <list type="table">
            <listheader><term>Particle Parameter</term><description>Description</description></listheader>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.TimeParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that is the input to the piecewise linear function.
            Per default, the parameter "NormalizedAge" is used.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.InputParameter"/></term>
            <description>
            The <see cref="T:System.Single"/> parameter that is multiplied with the function value.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.TimeParameter"/></term>
            <description>
            The <see cref="T:System.Single"/> parameter that stores the result of the function value multiplied with
            the <see cref="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.InputParameter"/>.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.InputParameter">
            <summary>
            Gets or sets the name of the parameter that is multiplied with the value of the 
            piecewise linear function. (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that is multiplied with the value of the piecewise linear 
            function. This parameter is optional.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.OutputParameter">
            <summary>
            Gets or sets the name of the parameter that stores the result.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that stores the result.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.TimeParameter">
            <summary>
            Gets or sets the name of the parameter that is the input for the piecewise linear function.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that is the input for the piecewise linear function.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is "NormalizedAge".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Time0">
            <summary>
            Gets or sets the time of the first data point.
            </summary>
            <value>The time of the first data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Value0">
            <summary>
            Gets or sets the value of the first data point.
            </summary>
            <value>The value of the first data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Time1">
            <summary>
            Gets or sets the time of the second data point.
            </summary>
            <value>The time of the second data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Value1">
            <summary>
            Gets or sets the value of the second data point.
            </summary>
            <value>The value of the second data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Time2">
            <summary>
            Gets or sets the time of the third data point.
            </summary>
            <value>The time of the third data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Value2">
            <summary>
            Gets or sets the value of the third data point.
            </summary>
            <value>The value of the third data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Time3">
            <summary>
            Gets or sets the time of the last data point.
            </summary>
            <value>The time of the last data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.Value3">
            <summary>
            Gets or sets the value of the last data point.
            </summary>
            <value>The value of the last data point.</value>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.StartDirectionEffector">
            <summary>
            Initializes a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> particle parameter as a direction vector and applies the 
            rotation of the <see cref="T:DigitalRune.Particles.ParticleSystem"/>'s <see cref="P:DigitalRune.Particles.ParticleSystem.Pose"/>.
            </summary>
            <remarks>
            <para>
            This effector initializes the start value of a specific particle parameter (see property 
            <see cref="P:DigitalRune.Particles.Effectors.StartDirectionEffector.Parameter"/>) for new particles. The start value is chosen from a given 
            <see cref="P:DigitalRune.Particles.Effectors.StartDirectionEffector.Distribution"/>. If <see cref="P:DigitalRune.Particles.Effectors.StartDirectionEffector.Distribution"/> is <see langword="null"/>, 
            <see cref="P:DigitalRune.Particles.Effectors.StartDirectionEffector.DefaultValue"/> is used as the start value for all particles.
            </para>
            <para>
            This effector acts like a standard <see cref="T:DigitalRune.Particles.Effectors.StartValueEffector`1"/>, except: The vector 
            created by the <see cref="P:DigitalRune.Particles.Effectors.StartDirectionEffector.Distribution"/> or the <see cref="P:DigitalRune.Particles.Effectors.StartDirectionEffector.DefaultValue"/> is treated as a 
            direction vector given in the local coordinate space of the particle system. That means, the 
            direction start value rotates with the particle system. If the 
            <see cref="P:DigitalRune.Particles.ParticleSystem.ReferenceFrame"/> of the particle system is 
            <see cref="F:DigitalRune.Particles.ParticleReferenceFrame.World"/>, the start value of each particle is multiplied 
            with the poses of the particle system (and its parent particle systems) to convert the 
            direction vector from local space to world space. If the 
            <see cref="P:DigitalRune.Particles.ParticleSystem.ReferenceFrame"/> of the particle system is 
            <see cref="F:DigitalRune.Particles.ParticleReferenceFrame.Local"/>, the pose of the particle system is ignored.
            </para>
            <para>
            <strong>Cloning:</strong> When an instance is of this class is cloned, the clone
            references the same <see cref="P:DigitalRune.Particles.Effectors.StartDirectionEffector.Distribution"/>. The <see cref="P:DigitalRune.Particles.Effectors.StartDirectionEffector.Distribution"/> is not cloned.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StartDirectionEffector.Parameter">
            <summary>
            Gets or sets the name of the particle parameter that is initialized.
            (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the particle parameter that is initialized.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is "Direction".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StartDirectionEffector.Distribution">
            <summary>
            Gets or sets the random value distribution that is used to choose a start value for the 
            parameter of a new particle. 
            </summary>
            <value>
            The random value distribution that determines the start value for the parameter of new 
            particles. The default is <see langword="null"/>, which means that the start value is set to
            <see cref="P:DigitalRune.Particles.Effectors.StartDirectionEffector.DefaultValue"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StartDirectionEffector.DefaultValue">
            <summary>
            Gets or sets the start value that is used if <see cref="P:DigitalRune.Particles.Effectors.StartDirectionEffector.Distribution"/> is 
            <see langword="null"/>.
            </summary>
            <value>
            The default start value that is used if <see cref="P:DigitalRune.Particles.Effectors.StartDirectionEffector.Distribution"/> is <see langword="null"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartDirectionEffector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.StartDirectionEffector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartDirectionEffector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartDirectionEffector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartDirectionEffector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartDirectionEffector.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartDirectionEffector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartDirectionEffector.OnInitializeParticles(System.Int32,System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.StartPositionEffector">
            <summary>
            Initializes a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> particle parameter as a position vector and applies the 
            transformation of the <see cref="T:DigitalRune.Particles.ParticleSystem"/>'s <see cref="P:DigitalRune.Particles.ParticleSystem.Pose"/>.
            </summary>
            <remarks>
            <para>
            This effector initializes the start value of a specific particle parameter (see property 
            <see cref="P:DigitalRune.Particles.Effectors.StartPositionEffector.Parameter"/>) for new particles. The start value is chosen from a given 
            <see cref="P:DigitalRune.Particles.Effectors.StartPositionEffector.Distribution"/>. If <see cref="P:DigitalRune.Particles.Effectors.StartPositionEffector.Distribution"/> is <see langword="null"/>, 
            <see cref="P:DigitalRune.Particles.Effectors.StartPositionEffector.DefaultValue"/> is used as the start value for all particles.
            </para>
            <para>
            This effector acts like a standard <see cref="T:DigitalRune.Particles.Effectors.StartValueEffector`1"/>, except: The vector 
            created by the <see cref="P:DigitalRune.Particles.Effectors.StartPositionEffector.Distribution"/> or the <see cref="P:DigitalRune.Particles.Effectors.StartPositionEffector.DefaultValue"/> is treated as a 
            position given in the local coordinate space of the particle system. That means, the position 
            start value moves with the particle system. If the <see cref="P:DigitalRune.Particles.ParticleSystem.ReferenceFrame"/>
            of the particle system is <see cref="F:DigitalRune.Particles.ParticleReferenceFrame.World"/>, the start value of each 
            particle is multiplied with the poses of the particle system (and its parent particle systems)
            to convert the position from local space to world space. If the 
            <see cref="P:DigitalRune.Particles.ParticleSystem.ReferenceFrame"/> of the particle system is 
            <see cref="F:DigitalRune.Particles.ParticleReferenceFrame.Local"/>, the pose of the particle system is ignored.
            </para>
            <para>
            <strong>Cloning:</strong> When an instance is of this class is cloned, the clone references 
            the same <see cref="P:DigitalRune.Particles.Effectors.StartPositionEffector.Distribution"/>. The <see cref="P:DigitalRune.Particles.Effectors.StartPositionEffector.Distribution"/> is not cloned.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StartPositionEffector.Parameter">
            <summary>
            Gets or sets the name of the particle parameter that is initialized.
            (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the particle parameter that is initialized.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is "Position".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StartPositionEffector.Distribution">
            <summary>
            Gets or sets the random value distribution that is used to choose a start value for the 
            parameter of a new particle. 
            </summary>
            <value>
            The random value distribution that determines the start value for the parameter of new 
            particles. The default is <see langword="null"/>, which means that the start value is set to
            <see cref="P:DigitalRune.Particles.Effectors.StartPositionEffector.DefaultValue"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StartPositionEffector.DefaultValue">
            <summary>
            Gets or sets the start value that is used if <see cref="P:DigitalRune.Particles.Effectors.StartPositionEffector.Distribution"/> is 
            <see langword="null"/>.
            </summary>
            <value>
            The start value that is used if <see cref="P:DigitalRune.Particles.Effectors.StartPositionEffector.Distribution"/> is <see langword="null"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartPositionEffector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.StartPositionEffector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartPositionEffector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartPositionEffector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartPositionEffector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartPositionEffector.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartPositionEffector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartPositionEffector.OnInitializeParticles(System.Int32,System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.StartValueEffector`1">
            <summary>
            Initializes a particle parameter.
            </summary>
            <typeparam name="T">The type of the particle parameter.</typeparam>
            <remarks>
            <para>
            This effector initializes the start value of a specific particle parameter (see property 
            <see cref="P:DigitalRune.Particles.Effectors.StartValueEffector`1.Parameter"/>) for new particles. The start value is chosen from a given 
            <see cref="P:DigitalRune.Particles.Effectors.StartValueEffector`1.Distribution"/>. If <see cref="P:DigitalRune.Particles.Effectors.StartValueEffector`1.Distribution"/> is <see langword="null"/>, 
            <see cref="P:DigitalRune.Particles.Effectors.StartValueEffector`1.DefaultValue"/> is used as the start value for all particles.
            </para>
            <para>
            <strong>Cloning:</strong> When an instance is of this class is cloned, the clone references 
            the same <see cref="P:DigitalRune.Particles.Effectors.StartValueEffector`1.Distribution"/>. The <see cref="P:DigitalRune.Particles.Effectors.StartValueEffector`1.Distribution"/> is not cloned.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StartValueEffector`1.Parameter">
            <summary>
            Gets or sets the name of the particle parameter that is initialized.
            (A varying or uniform parameter of type <typeparamref name="T"/>.)
            </summary>
            <value>
            The name of the particle parameter that is initialized.
            (Parameter type: varying or uniform, value type: <typeparamref name="T"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StartValueEffector`1.Distribution">
            <summary>
            Gets or sets the random value distribution that is used to choose a start value for the 
            parameter of a new particle. 
            </summary>
            <value>
            The random value distribution that determines the start value for the parameter of new 
            particles. The default is <see langword="null"/>, which means that the start value is set to 
            the <see cref="P:DigitalRune.Particles.Effectors.StartValueEffector`1.DefaultValue"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StartValueEffector`1.DefaultValue">
            <summary>
            Gets or sets the start value that is set if <see cref="P:DigitalRune.Particles.Effectors.StartValueEffector`1.Distribution"/> is 
            <see langword="null"/>.
            </summary>
            <value>
            The start value that is set if <see cref="P:DigitalRune.Particles.Effectors.StartValueEffector`1.Distribution"/> is <see langword="null"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartValueEffector`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartValueEffector`1.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartValueEffector`1.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartValueEffector`1.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartValueEffector`1.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartValueEffector`1.OnInitializeParticles(System.Int32,System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.StartVelocityBiasEffector">
            <summary>
            Adds a bias velocity to the start velocities of particles.
            </summary>
            <remarks>
            <para>
            This effector changes the initial particle speed and direction by adding a bias velocity. 
            </para>
            <para>
            For example: When a particle emitter is moving, the emitter's velocity can be set as the bias 
            velocity to influence the particles when they are spawned. The <see cref="P:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.Strength"/> property
            is a factor, usually in the range [0, 1], that defines how strong the influence of the emitter
            velocity is.
            </para>
            <para>
            Used particle parameters:
            <list type="table">
            <listheader><term>Particle Parameter</term><description>Description</description></listheader>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.DirectionParameter"/></term>
            <description>
            A normalized <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> parameter that defines the movement direction (direction 
            of the linear velocity vector). This parameter is modified by applying the bias velocity.
            Per default, the parameter "Direction" is used.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.SpeedParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that defines the movement speed (magnitude of the linear 
            velocity vector). This parameter is modified by applying the acceleration. Per default, the 
            parameter "LinearSpeed" is used.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.BiasVelocityParameter"/></term>
            <description>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> parameter that defines the bias velocity. 
            Per default, the parameter "EmitterVelocity" is used.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.DirectionParameter">
            <summary>
            Gets or sets the name of the parameter that defines the movement direction.
            (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the parameter that defines the movement direction.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is "Direction".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.SpeedParameter">
            <summary>
            Gets or sets the name of the parameter that defines the movement speed.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that defines the movement speed.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is "LinearSpeed".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.BiasVelocityParameter">
            <summary>
            Gets or sets the name of the parameter that defines the bias velocity vector.
            (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the parameter that defines the bias velocity vector.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is "EmitterVelocity".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.Strength">
            <summary>
            Gets or sets a factor that is used to scale the bias velocity before adding it to the 
            particle velocity.
            </summary>
            <value>
            The strength of the bias, usually in the range [0, 1]. The default value is 1.
            </value>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.StartVelocityBiasEffector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StartVelocityBiasEffector.OnInitializeParticles(System.Int32,System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.StreamEmitter">
            <summary>
            Creates particles at a configurable emission rate.
            </summary>
            <remarks>
            <para>
            This effectors reads a uniform particle parameter (see <see cref="P:DigitalRune.Particles.Effectors.StreamEmitter.EmissionRateParameter"/>) to
            define the emission rate. If no emission rate parameter is found, the 
            <see cref="P:DigitalRune.Particles.Effectors.StreamEmitter.DefaultEmissionRate"/> is used.
            </para>
            <para>
            The emitter emits a stream of particles until <see cref="P:DigitalRune.Particles.Effectors.StreamEmitter.EmissionLimit"/> number of particles 
            have been created. Then it will stop to emit particles. The internal particle counter is reset 
            when <see cref="M:DigitalRune.Particles.ParticleEffector.Initialize"/> is called (which is automatically called when a
            particle system is <see cref="M:DigitalRune.Particles.ParticleSystem.Reset"/>).
            </para>
            <para>
            This emitter can be configured to create particles in bursts: Simply set a high enough 
            emission rate and limit the number of particles with <see cref="P:DigitalRune.Particles.Effectors.StreamEmitter.EmissionLimit"/>. To trigger 
            another burst, simply increase <see cref="P:DigitalRune.Particles.Effectors.StreamEmitter.EmissionLimit"/> by the burst size.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StreamEmitter.EmissionRateParameter">
            <summary>
            Gets or sets the name of the particle parameter that defines the emission rate (particles 
            per second). (A uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the particle parameter that defines emission rate. 
            (Parameter type: uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StreamEmitter.DefaultEmissionRate">
            <summary>
            Gets or sets the default emission rate that is used if the 
            <see cref="P:DigitalRune.Particles.Effectors.StreamEmitter.EmissionRateParameter"/> is not found.
            </summary>
            <value>
            The default emission rate (particles per second). The default value is 10.
            </value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.StreamEmitter.EmissionLimit">
            <summary>
            Gets or sets the maximum number of emitted particles.
            </summary>
            <value>
            The maximum number of emitted particles. If this property is -1, the emission is unlimited.
            The default value is -1.
            </value>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StreamEmitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.StreamEmitter"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StreamEmitter.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StreamEmitter.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StreamEmitter.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StreamEmitter.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StreamEmitter.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.StreamEmitter.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.TimeToSingleEffector">
            <summary>
            Converts the particle system's <see cref="P:DigitalRune.Particles.ParticleSystem.Time"/> into a <see cref="T:System.Single"/> 
            value and stores it in a particle parameter.
            </summary>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.TimeToSingleEffector.Parameter">
            <summary>
            Gets or sets the name of the parameter that should store the time value.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that should store the time value.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.TimeToSingleEffector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.TimeToSingleEffector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.TimeToSingleEffector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.TimeToSingleEffector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.TimeToSingleEffector.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.TimeToSingleEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.Vector3FLerpEffector">
            <summary>
            Linearly interpolates a particle parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> between a start and 
            an end value.
            </summary>
            <remarks>
            <para>
            Used particle parameters:
            <list type="table">
            <listheader><term>Particle Parameter</term><description>Description</description></listheader>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.Vector3FLerpEffector.ValueParameter"/></term>
            <description>
            The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> parameter that stores the result of the linear interpolation.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.Vector3FLerpEffector.StartParameter"/></term>
            <description>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> parameter that defines the start value.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.Vector3FLerpEffector.EndParameter"/></term>
            <description>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> parameter that defines the end value.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.Vector3FLerpEffector.FactorParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that defines the interpolation factor. If this factor is 0, 
            the interpolation results is equal to the start value. If this factor is 1, the interpolation 
            result is equal to the end value. Per default, the parameter "NormalizedAge" is used.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLerpEffector.ValueParameter">
            <summary>
            Gets or sets the name of the parameter that stores the interpolation result.
            (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the parameter that stores the interpolation result.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLerpEffector.StartParameter">
            <summary>
            Gets or sets the name of the parameter that defines the start value.
            (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the parameter that defines the start value.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLerpEffector.EndParameter">
            <summary>
            Gets or sets the name of the parameter that defines the end value.
            (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the parameter that defines the end value.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLerpEffector.FactorParameter">
            <summary>
            Gets or sets the name of the parameter that defines the interpolation factor.
            (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the parameter that defines the interpolation factor.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is "NormalizedAge".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLerpEffector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.Vector3FLerpEffector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLerpEffector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLerpEffector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLerpEffector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLerpEffector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLerpEffector.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLerpEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector">
            <summary>
            Evaluates 3 piecewise linear functions consisting of 3 segments and multiplies the result with
            a particle parameter. (This effector is the <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> version of the 
            <see cref="T:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector"/>.)
            </summary>
            <remarks>
            <para>
            This effector is similar to the <see cref="T:DigitalRune.Particles.Effectors.SingleLinearSegment3Effector"/>, only that a
            piecewise linear function is evaluated for each component of a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </para>
            <para>
            A piecewise linear function is defined using several data points:
            (<see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Time0"/>, <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Value0"/>), (<see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Time1"/>, <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Value1"/>),
            (<see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Time2"/>, <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Value2"/>) and (<see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Time3"/>, <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Value3"/>).
            If the time (see <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.TimeParameter"/>) is less than <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Time0"/>, then the
            function value is <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Value0"/>. If the time is greater than <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Time3"/>, then 
            the function value is <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Value3"/>. If the time is between those limits, the function
            value is the interpolation of the nearest data point. The time values <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Time0"/> to 
            <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Time3"/> must be given in ascending order.
            </para>
            <para>
            The result of the function is muliplied with the <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.InputParameter"/> (component-wise)
            and stored in the <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.OutputParameter"/>. (If <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.InputParameter"/> is not set, 
            then the function value is directly stored in the <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.OutputParameter"/>.)
            </para>
            <para>
            Used particle parameters:
            <list type="table">
            <listheader><term>Particle Parameter</term><description>Description</description></listheader>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.TimeParameter"/></term>
            <description>
            A <see cref="T:System.Single"/> parameter that is the input to the piecewise linear function.
            Per default, the parameter "NormalizedAge" is used.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.InputParameter"/></term>
            <description>
            The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> parameter that is multiplied with the function value.
            </description>
            </item>
            <item>
            <term><see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.TimeParameter"/></term>
            <description>
            The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> parameter that stores the result of the function value multiplied
            with the <see cref="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.InputParameter"/>.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.InputParameter">
            <summary>
            Gets or sets the name of the parameter that is multiplied with the value of the piecewise 
            linear function. (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the parameter that is multiplied with the value of the piecewise linear 
            function. This parameter is optional.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.OutputParameter">
            <summary>
            Gets or sets the name of the parameter that stores the result.
            (A varying or uniform parameter of type <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.)
            </summary>
            <value>
            The name of the parameter that stores the result.
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>) <br/>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.TimeParameter">
            <summary>
            Gets or sets the name of the parameter that is the input for the piecewise linear function.
            (A varying or uniform parameter of type <see cref="T:System.Single"/>.)
            </summary>
            <value>
            The name of the parameter that is the input for the piecewise linear function.
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>) <br/>
            The default value is "NormalizedAge".
            </value>
            <remarks>
            This property needs to be set before the particle system is running. The particle effector 
            might ignore any changes that occur while the particle system is running.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Time0">
            <summary>
            Gets or sets the time of the first data point.
            </summary>
            <value>The time of the first data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Value0">
            <summary>
            Gets or sets the value of the first data point.
            </summary>
            <value>The value of the first data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Time1">
            <summary>
            Gets or sets the time of the second data point.
            </summary>
            <value>The time of the second data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Value1">
            <summary>
            Gets or sets the value of the second data point.
            </summary>
            <value>The value of the second data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Time2">
            <summary>
            Gets or sets the time of the third data point.
            </summary>
            <value>The time of the third data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Value2">
            <summary>
            Gets or sets the value of the third data point.
            </summary>
            <value>The value of the third data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Time3">
            <summary>
            Gets or sets the time of the last data point.
            </summary>
            <value>The time of the last data point.</value>
        </member>
        <member name="P:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.Value3">
            <summary>
            Gets or sets the value of the last data point.
            </summary>
            <value>The value of the last data point.</value>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.OnRequeryParameters">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.OnUninitialize">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.OnBeginUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.Effectors.Vector3FLinearSegment3Effector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.IParticleParameter">
            <summary>
            Represents a named parameter of a particle, like "Color" or "Position".
            </summary>
            <remarks>
            Particles have several parameters, like "Color", "Position", "Mass", etc. All particle
            parameters must implement <see cref="T:DigitalRune.Particles.IParticleParameter"/>. The name of a parameter (see 
            property <see cref="P:DigitalRune.INamedObject.Name"/>) must be unique within a particle system. See 
            <see cref="T:DigitalRune.Particles.ParticleParameterNames"/> for standard parameter names.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.IParticleParameter.IsUniform">
            <summary>
            Gets a value indicating whether this particle parameter is a uniform parameter or a varying parameter.
            </summary>
            <value>
            <see langword="true"/> if this parameter is uniform; otherwise, <see langword="false"/>
            if this parameters is varying.
            </value>
        </member>
        <member name="T:DigitalRune.Particles.IParticleParameter`1">
            <summary>
            Represents a named, typed parameter of a particle, like "Color" or "Position".
            </summary>
            <typeparam name="T">The type of the particle parameter.</typeparam>
            <remarks>
            <para>
            Particles have several parameters, like "Color", "Position", "Mass", etc. All particle
            parameters must implement <see cref="T:DigitalRune.Particles.IParticleParameter"/>. The name of a parameter (see 
            property <see cref="P:DigitalRune.INamedObject.Name"/>) must be unique within a particle system. See 
            <see cref="T:DigitalRune.Particles.ParticleParameterNames"/> for standard parameter names.
            </para>
            <para>
            <strong>Uniform vs. Varying Particle Parameters:</strong>
            A particle parameter has a default value (see <see cref="P:DigitalRune.Particles.IParticleParameter`1.DefaultValue"/>) and an optional 
            array of values (see <see cref="P:DigitalRune.Particles.IParticleParameter`1.Values"/>). If <see cref="P:DigitalRune.Particles.IParticleParameter`1.Values"/> is <see langword="null"/>,
            the <see cref="P:DigitalRune.Particles.IParticleParameter`1.DefaultValue"/> applies to all particles. This kind of particle parameter is 
            called a "uniform" parameter. If <see cref="P:DigitalRune.Particles.IParticleParameter`1.Values"/> is not <see langword="null"/>, each 
            particle has its own individual value. This kind of particle parameter is called a "varying" 
            parameter.
            </para>
            <para>
            Particle effectors or renderers should not store a direct reference to the 
            <see cref="P:DigitalRune.Particles.IParticleParameter`1.Values"/> array because the particle system can replace the array. Instead, 
            effectors or renderers should only store references to the <see cref="T:DigitalRune.Particles.IParticleParameter`1"/>
            and use the property <see cref="P:DigitalRune.Particles.IParticleParameter`1.Values"/> to retrieve the array when needed.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.IParticleParameter`1.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
            <remarks>
            <para>
            If the <see cref="P:DigitalRune.Particles.IParticleParameter`1.Values"/> array is <see langword="null"/>, then the 
            <see cref="P:DigitalRune.Particles.IParticleParameter`1.DefaultValue"/> applies to all particles. This type of particle parameter is 
            called a "uniform" parameter.
            </para>
            <para>
            If the <see cref="P:DigitalRune.Particles.IParticleParameter`1.Values"/> array is set, then each particles has its own value. This type
            of particle parameter is called a "varying" parameter.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.IParticleParameter`1.Values">
            <summary>
            Gets the particle parameter array that contains one value per particle.
            </summary>
            <value>The particle parameter array. Can be <see langword="null"/>.</value>
            <remarks>
            <para>
            If the <see cref="P:DigitalRune.Particles.IParticleParameter`1.Values"/> array is <see langword="null"/>, then the 
            <see cref="P:DigitalRune.Particles.IParticleParameter`1.DefaultValue"/> applies to all particles. This type of particle parameter is 
            called a "uniform" parameter.
            </para>
            <para>
            If the <see cref="P:DigitalRune.Particles.IParticleParameter`1.Values"/> array is set, then each particles has its own value. This type
            of particle parameter is called a "varying" parameter.
            </para>
            <para>
            Other objects should not store a direct reference to this array because the particle system
            can replace the array. Instead, store a reference to the <see cref="T:DigitalRune.Particles.IParticleParameter`1"/>
            and use this property to retrieve the current array when needed.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Particles.IParticleParameterInternal">
            <exclude/>
        </member>
        <member name="P:DigitalRune.Particles.IParticleParameterInternal.IsUniform">
            <summary>
            Gets a value indicating whether this instance is a uniform particle parameter.
            </summary>
            <value>
            <see langword="true"/> if this instance is a uniform particle parameter; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Particles.IParticleParameterInternal.IsInitialized">
            <summary>
            Gets a value indicating whether this particle parameter is initialized (the default value is 
            not <c>null</c> or <c>default(T)</c>.
            </summary>
            <value>
            <see langword="true"/> if this particle parameter is initialized; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Particles.IParticleParameterInternal.UpdateArrayLength(System.Int32)">
            <summary>
            Updates the length of the array.
            </summary>
            <param name="numberOfParticles">The new number of particles.</param>
            <remarks>
            This method resizes the existing array if the <paramref name="numberOfParticles"/> has 
            changed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.IParticleParameterInternal.AddCopyToCollection(DigitalRune.Particles.ParticleParameterCollection)">
            <summary>
            Adds a parameter to the collection that has the same type and name as this instance.
            </summary>
            <param name="collection">The collection to add a copy to.</param>
        </member>
        <member name="T:DigitalRune.Particles.IParticleSystemService">
            <summary>
            Manages a collection of particle systems.
            </summary>
        </member>
        <member name="P:DigitalRune.Particles.IParticleSystemService.ParticleSystems">
            <summary>
            Gets the particle systems.
            </summary>
            <value>The particle systems.</value>
        </member>
        <member name="T:DigitalRune.Particles.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Particles"/> namespace provides a particle system and related
            types to simulate particle-based effects.
            </summary>
        </member>
        <member name="T:DigitalRune.Particles.ParticleEffector">
            <summary>
            Manipulates a particle system and/or its particles.
            </summary>
            <remarks>
            <para>
            The particle effectors need to be added to a <see cref="P:DigitalRune.Particles.ParticleEffector.ParticleSystem"/>. They define the 
            behavior of the particle system and/or its particles. An effector has several properties and 
            methods that are automatically set or called by the <see cref="P:DigitalRune.Particles.ParticleEffector.ParticleSystem"/>. The members 
            are used in the following order:
            </para>
            <list type="number">
            <item>
            <see cref="P:DigitalRune.Particles.ParticleEffector.ParticleSystem"/> is automatically set when the effector is added to a particle 
            system (see property <see cref="P:DigitalRune.Particles.ParticleSystem.Effectors"/>).
            </item>
            <item>
            <see cref="M:DigitalRune.Particles.ParticleEffector.RequeryParameters"/> is called next. <see cref="M:DigitalRune.Particles.ParticleEffector.RequeryParameters"/> calls
            <see cref="M:DigitalRune.Particles.ParticleEffector.OnRequeryParameters"/>. Derived particle effectors can override this method to get 
            all required particle parameters from the parameter collection of the particle system (see 
            <see cref="P:DigitalRune.Particles.ParticleSystem.Parameters"/>). The particle effector can store references
            to these parameters. Anytime the particle parameters are modified, 
            <see cref="M:DigitalRune.Particles.ParticleEffector.RequeryParameters"/> is called again.
            </item>
            <item>
            <see cref="M:DigitalRune.Particles.ParticleEffector.Initialize"/> is called when the particle system is updated for the first time and 
            anytime the particle system is reset (see <see cref="M:DigitalRune.Particles.ParticleSystem.Reset"/>).
            </item>
            <item>
            Every time the particle system is updated, it calls <see cref="M:DigitalRune.Particles.ParticleEffector.BeginUpdate(System.TimeSpan)"/> of all particle 
            effectors. <see cref="M:DigitalRune.Particles.ParticleEffector.BeginUpdate(System.TimeSpan)"/> calls <see cref="M:DigitalRune.Particles.ParticleEffector.OnBeginUpdate(System.TimeSpan)"/>. Derived particle 
            effectors can override this method to create particles (see 
            <see cref="M:DigitalRune.Particles.ParticleSystem.AddParticles(System.Int32,System.Object)"/>), to change uniform particle 
            parameters or to do other work.
            </item>
            <item>
            After <see cref="M:DigitalRune.Particles.ParticleEffector.BeginUpdate(System.TimeSpan)"/> the particle system calls <see cref="M:DigitalRune.Particles.ParticleEffector.UpdateParticles(System.TimeSpan,System.Int32,System.Int32)"/> of all
            particle effectors. <see cref="M:DigitalRune.Particles.ParticleEffector.UpdateParticles(System.TimeSpan,System.Int32,System.Int32)"/> calls <see cref="M:DigitalRune.Particles.ParticleEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)"/>. 
            Derived particle effectors can override this method to manipulate the particles.
            </item>
            <item>
            When the update of a particle system ends, it calls <see cref="M:DigitalRune.Particles.ParticleEffector.EndUpdate(System.TimeSpan)"/> of all particle 
            effectors. <see cref="M:DigitalRune.Particles.ParticleEffector.EndUpdate(System.TimeSpan)"/> calls <see cref="M:DigitalRune.Particles.ParticleEffector.OnEndUpdate(System.TimeSpan)"/>. Derived particle effectors
            can override this method to perform additional checks, a clean up, or other tasks.
            </item>
            <item>
            Each time a set of new particles is created, the particle system calls 
            <see cref="M:DigitalRune.Particles.ParticleEffector.InitializeParticles(System.Int32,System.Int32,System.Object)"/>. <see cref="M:DigitalRune.Particles.ParticleEffector.InitializeParticles(System.Int32,System.Int32,System.Object)"/> calls 
            <see cref="M:DigitalRune.Particles.ParticleEffector.OnInitializeParticles(System.Int32,System.Int32,System.Object)"/>. Derived particle effectors can override this method to 
            initialize the particle parameters of newly created particles.
            </item>
            <item>
            When a particle effectors is removed from a particle system, <see cref="M:DigitalRune.Particles.ParticleEffector.Uninitialize"/> is 
            called. <see cref="M:DigitalRune.Particles.ParticleEffector.Uninitialize"/> calls <see cref="M:DigitalRune.Particles.ParticleEffector.OnUninitialize"/>. Derived classes
            can override this method to clean up any held resources.
            </item>
            </list>
            <para>
            <strong>Cloning:</strong> A particle effector can be cloned. When a clone is created using 
            <see cref="M:DigitalRune.Particles.ParticleEffector.Clone"/>, a new particle effectors is returned for use in another particle system. 
            <see cref="M:DigitalRune.Particles.ParticleEffector.Clone"/> does not set the property <see cref="P:DigitalRune.Particles.ParticleEffector.ParticleSystem"/> of the clone. See 
            also remarks of derived classes.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleEffector.Name">
            <summary>
            Gets the name of this particle effector.
            </summary>
            <value>
            The name of the particle effector. The default value is <see langword="null"/>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Cannot change the name because the particle effector has already been added to a particle 
            system.
            </exception>
        </member>
        <member name="P:DigitalRune.Particles.ParticleEffector.ParticleSystem">
            <summary>
            Gets or sets the particle system.
            </summary>
            <value>The particle system that owns this particle effector.</value>
            <remarks>
            This property is automatically set when the effector is added to a particle system (see
            property <see cref="P:DigitalRune.Particles.ParticleSystem.Effectors"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleEffector.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Particles.ParticleEffector"/> is enabled.
            </summary>
            <value>
            <see langword="true"/> if enabled; otherwise, <see langword="false"/>. The default value is 
            <see langword="true"/>.
            </value>
            <remarks>
            When disabled the following methods are not executed: 
            <see cref="M:DigitalRune.Particles.ParticleEffector.OnBeginUpdate(System.TimeSpan)"/>, <see cref="M:DigitalRune.Particles.ParticleEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)"/>, <see cref="M:DigitalRune.Particles.ParticleEffector.OnEndUpdate(System.TimeSpan)"/> and 
            <see cref="M:DigitalRune.Particles.ParticleEffector.OnInitializeParticles(System.Int32,System.Int32,System.Object)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.ParticleEffector"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.RequeryParameters">
            <summary>
            Requeries the particle parameters.
            </summary>
            <remarks>
            This method is automatically called by the particle system before the effector is used for 
            the first time and when its particle parameter collection was modified.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.OnRequeryParameters">
            <summary>
            Called when <see cref="M:DigitalRune.Particles.ParticleEffector.RequeryParameters"/> was called.
            </summary>
            <remarks>
            <strong>Notes to Inheritors:</strong> <br/>
            When this method is called, <see cref="P:DigitalRune.Particles.ParticleEffector.ParticleSystem"/> is already
            initialized and can be used.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.Initialize">
            <summary>
            Initializes this particle effector.
            </summary>
            <remarks>
            This method is automatically called by the particle system before the effector is used for 
            the first time and when the particle system is reset. (Particle systems call 
            <see cref="M:DigitalRune.Particles.ParticleEffector.RequeryParameters"/> before <see cref="M:DigitalRune.Particles.ParticleEffector.Initialize"/>, therefore the parameters
            are already available.)
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.OnInitialize">
            <summary>
            Called when <see cref="M:DigitalRune.Particles.ParticleEffector.Initialize"/> was called.
            </summary>
            <remarks>
            <strong>Notes to Inheritors:</strong> <br/>
            When this method is called, <see cref="P:DigitalRune.Particles.ParticleEffector.ParticleSystem"/> is already
            initialized and <see cref="M:DigitalRune.Particles.ParticleEffector.OnRequeryParameters"/> was already called.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.Uninitialize">
            <summary>
            Uninitializes this particle effector.
            </summary>
            <remarks>
            This method is automatically called by the particle system before the effector is removed
            from the particle system.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.OnUninitialize">
            <summary>
            Called when <see cref="M:DigitalRune.Particles.ParticleEffector.Uninitialize"/> was called.
            </summary>
            <remarks>
            <strong>Notes to Inheritors:</strong> <br/>
            When this method is called, the property <see cref="P:DigitalRune.Particles.ParticleEffector.ParticleSystem"/> is 
            still set. The property is automatically set to <see langword="null"/> after this method was
            executed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.BeginUpdate(System.TimeSpan)">
            <summary>
            Called when the particle system begins its update.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
            <remarks>
            This method is automatically called by the particle system at the beginning of its
            <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> method.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.OnBeginUpdate(System.TimeSpan)">
            <summary>
            Called when <see cref="M:DigitalRune.Particles.ParticleEffector.BeginUpdate(System.TimeSpan)"/> was called.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> <br/>
            When this method is called, <see cref="P:DigitalRune.Particles.ParticleEffector.ParticleSystem"/> is already
            initialized and the particle effector is <see cref="P:DigitalRune.Particles.ParticleEffector.Enabled"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.InitializeParticles(System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes new particles.
            </summary>
            <param name="startIndex">The index of the first particle to initialize.</param>
            <param name="count">The number of particles to initialize.</param>
            <param name="emitter">
            The emitter that triggered the particle creation. This can be an effector, another object or
            <see langword="null"/>.
            </param>
            <remarks>
            This method is automatically called by the particle system after new particles have been 
            created. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.OnInitializeParticles(System.Int32,System.Int32,System.Object)">
            <summary>
            Called when <see cref="M:DigitalRune.Particles.ParticleEffector.InitializeParticles(System.Int32,System.Int32,System.Object)"/> was called.
            </summary>
            <param name="startIndex">The index of the first particle to initialize.</param>
            <param name="count">The number of particles to initialize.</param>
            <param name="emitter">
            The emitter that triggered the particle creation. This can be an effector, another object or
            <see langword="null"/>.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> <br/>
            When this method is called, <see cref="P:DigitalRune.Particles.ParticleEffector.ParticleSystem"/> is already
            initialized and the particle effector is <see cref="P:DigitalRune.Particles.ParticleEffector.Enabled"/>. <paramref name="startIndex"/>
            plus <paramref name="count"/> will never exceed the maximal number of particles (= the
            length of the particle parameter arrays). This method does not have to make any index 
            checks. (When <paramref name="startIndex"/> plus <paramref name="count"/> would exceed the 
            length of the particle parameter arrays, <see cref="M:DigitalRune.Particles.ParticleEffector.InitializeParticles(System.Int32,System.Int32,System.Object)"/> calls 
            <see cref="M:DigitalRune.Particles.ParticleEffector.OnInitializeParticles(System.Int32,System.Int32,System.Object)"/> twice.)
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.UpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Updates particles.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
            <param name="startIndex">The index of the first particle to initialize.</param>
            <param name="count">The number of particles to initialize.</param>
            <remarks>
            This method is automatically called when the particle system is updated (see
            <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/>).
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Called when <see cref="M:DigitalRune.Particles.ParticleEffector.UpdateParticles(System.TimeSpan,System.Int32,System.Int32)"/> was called.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
            <param name="startIndex">The index of the first particle to initialize.</param>
            <param name="count">The number of particles to initialize.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> <br/>
            When this method is called, <see cref="P:DigitalRune.Particles.ParticleEffector.ParticleSystem"/> is already
            initialized and the particle effector is <see cref="P:DigitalRune.Particles.ParticleEffector.Enabled"/>. <paramref name="startIndex"/>
            plus <paramref name="count"/> will never exceed the maximal number of particles (= the
            length of the particle parameter arrays). This method does not have to make any index 
            checks. (When <paramref name="startIndex"/> plus <paramref name="count"/> would exceed the 
            length of the particle parameter arrays, <see cref="M:DigitalRune.Particles.ParticleEffector.UpdateParticles(System.TimeSpan,System.Int32,System.Int32)"/> calls 
            <see cref="M:DigitalRune.Particles.ParticleEffector.OnUpdateParticles(System.TimeSpan,System.Int32,System.Int32)"/> twice.)
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.EndUpdate(System.TimeSpan)">
            <summary>
            Called when the particle system finishes its update.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
            <remarks>
            This method is automatically called by the particle system at the end of its
            <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> method.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.OnEndUpdate(System.TimeSpan)">
            <summary>
            Called when <see cref="M:DigitalRune.Particles.ParticleEffector.BeginUpdate(System.TimeSpan)"/> was called.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> <br/>
            When this method is called, <see cref="P:DigitalRune.Particles.ParticleEffector.ParticleSystem"/> is already
            initialized and the particle effector is <see cref="P:DigitalRune.Particles.ParticleEffector.Enabled"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Particles.ParticleEffector"/> that is a clone of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Particles.ParticleEffector"/> that is a clone of the current instance.
            </returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Particles.ParticleEffector.Clone"/> calls 
            <see cref="M:DigitalRune.Particles.ParticleEffector.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Particles.ParticleEffector"/> derived class and <see cref="M:DigitalRune.Particles.ParticleEffector.CloneCore(DigitalRune.Particles.ParticleEffector)"/> to create a copy of
            the current instance. Classes that derive from <see cref="T:DigitalRune.Particles.ParticleEffector"/> need to 
            implement <see cref="M:DigitalRune.Particles.ParticleEffector.CreateInstanceCore"/> and <see cref="M:DigitalRune.Particles.ParticleEffector.CloneCore(DigitalRune.Particles.ParticleEffector)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.ParticleEffector"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a protected method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Particles.ParticleEffector.CreateInstanceCore"/> method, 
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone particle effector. A derived class does not implement 
            <see cref="M:DigitalRune.Particles.ParticleEffector.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Particles.ParticleEffector"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Particles.ParticleEffector.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Particles.ParticleEffector"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Particles.ParticleEffector"/> derived class 
            must implement this method. A typical implementation is to simply call the default 
            constructor and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffector.CloneCore(DigitalRune.Particles.ParticleEffector)">
            <summary>
            Makes the instance a clone of the specified <see cref="T:DigitalRune.Particles.ParticleEffector"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Particles.ParticleEffector"/> derived class 
            must implement this method. A typical implementation is to call <c>base.CloneCore(this)</c> 
            to copy all properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="T:DigitalRune.Particles.ParticleEffectorCollection">
            <summary>
            Manages a collection of <see cref="T:DigitalRune.Particles.ParticleEffector"/>s.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.ParticleEffectorCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.ParticleEffectorCollection"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Particles.ParticleHelper">
            <summary>
            Provides helper methods and extension methods for particle systems.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.ParticleHelper.GetValue``1(DigitalRune.Particles.IParticleParameter{``0},System.Int32)">
            <summary>
            Gets the value of a uniform or a varying particle parameter.
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
            <param name="parameter">The particle parameter.</param>
            <param name="index">
            The index of the particle, or -1 to get the <see cref="P:DigitalRune.Particles.IParticleParameter`1.DefaultValue"/>.
            </param>
            <returns>
            The value of the particle at the given index if the particle parameter is varying and the
            index is zero or positive; otherwise the <see cref="P:DigitalRune.Particles.IParticleParameter`1.DefaultValue"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Particles.ParticleHelper.SetValue``1(DigitalRune.Particles.IParticleParameter{``0},System.Int32,``0)">
            <summary>
            Sets the value of a uniform or varying particle parameter.
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
            <param name="parameter">The particle parameter.</param>
            <param name="index">
            The index of the particle, or -1 to set the <see cref="P:DigitalRune.Particles.IParticleParameter`1.DefaultValue"/>.
            </param>
            <param name="value">The new value.</param>
            <remarks>
            If the particle parameter is varying and <paramref name="index"/> is zero or positive,
            the value of the particle is set. If <paramref name="index"/> is negative, the
            <see cref="P:DigitalRune.Particles.IParticleParameter`1.DefaultValue"/> is set. Otherwise, if the particle
            parameter is uniform and the <paramref name="index"/> is zero or positive, this method
            does nothing.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleHelper.GetPoseWorld(DigitalRune.Particles.ParticleSystem)">
            <summary>
            Gets the world space pose of the particle system, which is obtained by concatenating the 
            poses of the given and all parent particle systems.
            </summary>
            <param name="particleSystem">The particle system.</param>
            <returns>The world space pose of the particle system.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="particleSystem"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Particles.ParticleHelper.IsAlive(DigitalRune.Particles.ParticleSystem)">
            <summary>
            Determines whether the specified particle system is alive.
            </summary>
            <param name="particleSystem">The particle system.</param>
            <returns>
            <see langword="true"/> if the specified particle system is alive; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method checks if the <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfLivingParticles"/> of the
            specified particle system or any of its child particle systems is greater than 0. If the 
            particle system and all children do not have any "living" particles, this method returns 
            <see langword="false"/>.
            </para>
            <para>
            Important note: This method returns <see langword="true"/> if there are temporarily no 
            living particles in the particle system. It can still happen that the particle system 
            contains effectors that will add new particles in the future. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="particleSystem"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Particles.ParticleParameterUsage">
            <summary>
            Describes if a particle effector reads and/or writes a particle parameter.
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterUsage.In">
            <summary>
            The particle parameter is read but not changed.
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterUsage.Out">
            <summary>
            The particle parameter is written. (Overwriting existing parameter values.)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterUsage.InOut">
            <summary>
            The particle parameter is read and written.
            </summary>
        </member>
        <member name="T:DigitalRune.Particles.ParticleParameterAttribute">
            <summary>
            Describes how a particle parameter is used.
            </summary>
        </member>
        <member name="P:DigitalRune.Particles.ParticleParameterAttribute.Usage">
            <summary>
            Gets or sets the particle parameter usage.
            </summary>
            <value>The particle parameter usage.</value>
        </member>
        <member name="P:DigitalRune.Particles.ParticleParameterAttribute.Optional">
            <summary>
            Gets or sets a value indicating whether this the particle parameter is optional.
            </summary>
            <value>
            <see langword="true"/> if optional; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterAttribute.#ctor(DigitalRune.Particles.ParticleParameterUsage)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.ParticleParameterAttribute"/> class.
            </summary>
            <param name="usage">The particle parameter usage.</param>
        </member>
        <member name="T:DigitalRune.Particles.ParticleParameterCollection">
            <summary>
            Manages a collection of particle parameters.
            </summary>
            <remarks>
            <para>
            This collection manages the particle parameters of a particle system. All parameters must have
            a unique name (<see langword="null"/> or empty strings are not allowed).
            </para>
            <para>
            New particle parameters can be added using the methods <see cref="M:DigitalRune.Particles.ParticleParameterCollection.AddUniform``1(System.String)"/> and 
            <see cref="M:DigitalRune.Particles.ParticleParameterCollection.AddVarying``1(System.String)"/>. If a particle parameter with the given name already exists,
            <see cref="M:DigitalRune.Particles.ParticleParameterCollection.AddUniform``1(System.String)"/> returns the existing parameter and does nothing else - even if the
            existing parameter is varying. If a particle parameter with the given name already exists, 
            <see cref="M:DigitalRune.Particles.ParticleParameterCollection.AddVarying``1(System.String)"/> returns the existing parameter if it is varying. But if the 
            existing parameter is uniform, <see cref="M:DigitalRune.Particles.ParticleParameterCollection.AddVarying``1(System.String)"/> replaces the existing parameter. - 
            This means: Calling <see cref="M:DigitalRune.Particles.ParticleParameterCollection.AddUniform``1(System.String)"/> and <see cref="M:DigitalRune.Particles.ParticleParameterCollection.AddVarying``1(System.String)"/> multiple times
            is safe. Varying parameters have higher priority and replace uniform parameters.
            </para>
            <para>
            The generic methods <see cref="M:DigitalRune.Particles.ParticleParameterCollection.AddUniform``1(System.String)"/>, <see cref="M:DigitalRune.Particles.ParticleParameterCollection.AddVarying``1(System.String)"/> and 
            <see cref="M:DigitalRune.Particles.ParticleParameterCollection.Get``1(System.String)"/> throw an <see cref="T:DigitalRune.Particles.ParticleSystemException"/> if a particle 
            parameter with the given name exists but the particle parameter type is different. The method
            <see cref="M:DigitalRune.Particles.ParticleParameterCollection.GetUnchecked``1(System.String)"/> is the same as <see cref="M:DigitalRune.Particles.ParticleParameterCollection.Get``1(System.String,System.Boolean)"/>, except
            that it does not throw an exception. It returns <see langword="null"/> if the requested 
            particle parameter does not exist or the type does not match.
            </para>
            <para>
            <strong>Parameter Inheritance:</strong><br/>
            Per default, the <strong>Get()</strong> methods also search for uniform (but not varying) 
            parameters in the particle parameter collections of parent particle systems if a parameter is 
            not found in this collection. This means that uniform parameters are automatically inherited 
            by child particle systems. Note that enumerating the collection (using 
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>) only returns the locally stored particle 
            parameters, i.e. inherited parameters are not included in the enumeration.
            </para>
            <para>
            Objects that manipulate particle parameters can hold references to the 
            <see cref="T:DigitalRune.Particles.IParticleParameter"/> instances. The event <see cref="E:DigitalRune.Particles.ParticleParameterCollection.Changed"/> is raised when the
            collection is modified. In this case any references to particle parameters get invalid. - The 
            particle parameters could have been replaced or removed. (<see cref="T:DigitalRune.Particles.ParticleEffector"/>s do
            not need to subscribe to the <see cref="E:DigitalRune.Particles.ParticleParameterCollection.Changed"/> event. They will automatically be updated
            by the <see cref="P:DigitalRune.Particles.ParticleParameterCollection.ParticleSystem"/> that owns them.)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleParameterCollection.ParticleSystem">
            <summary>
            Gets the particle system that owns this particle parameter collection.
            </summary>
            <value>
            The particle system that owns this particle parameter collection. Cannot be 
            <see langword="null"/>.
            </value>
        </member>
        <member name="E:DigitalRune.Particles.ParticleParameterCollection.Changed">
            <summary>
            Occurs when the collection was modified.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.#ctor(DigitalRune.Particles.ParticleSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.ParticleParameterCollection"/> class.
            </summary>
            <param name="particleSystem">The particle system that owns this collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="particleSystem"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.Clear">
            <summary>
            Removes all particle parameters in this collection.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains a particle parameter with the given name.
            </summary>
            <param name="name">The name of the parameter (e.g. "Color", "Position", etc.).</param>
            <returns>
            <see langword="true"/> if a particle parameter with the given name exists; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.AddVarying``1(System.String)">
            <summary>
            Adds a varying particle parameter.
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
            <param name="name">The name of the parameter (e.g. "Color", "Position", etc.).</param>
            <returns>The existing or newly created particle parameter.</returns>
            <remarks>
            If the collection does not contain a particle parameter with the given 
            <paramref name="name"/>, a new varying particle parameter is added. If the collection 
            contains a varying particle parameter with the given <paramref name="name"/>, then only the
            existing particle parameter is returned. If the collection contains a uniform particle 
            parameter with the given <paramref name="name"/>, then the existing particle parameter is 
            removed and replaced by a new varying particle parameter.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
            <exception cref="T:DigitalRune.Particles.ParticleSystemException">
            A particle parameter with the given name was found but the parameter type cannot be cast to 
            type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.AddUniform``1(System.String)">
            <summary>
            Adds a uniform particle parameter.
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
            <param name="name">The name of the parameter (e.g. "Color", "Position", etc.).</param>
            <returns>The existing or newly created particle parameter.</returns>
            <remarks>
            If the collection does not contain a particle parameter with the given 
            <paramref name="name"/>, a new uniform particle parameter is added. If the collection
            contains a particle parameter with the given <paramref name="name"/>, then only the
            existing particle parameter is returned - even if the parameter is varying!
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
            <exception cref="T:DigitalRune.Particles.ParticleSystemException">
            A particle parameter with the given name was found but the parameter type cannot be cast to 
            type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.Get``1(System.String)">
            <overloads>
            <summary>
            Gets a particle parameter with the specified type. (If the type is wrong an 
            exception is thrown.)
            </summary>
            </overloads>
            
            <summary>
            Gets a particle parameter with the specified type and name. (If the type is wrong an 
            exception is thrown.)
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
            <param name="name">The name of the parameter (e.g. "Color", "Position", etc.).</param>
            <returns>
            The particle parameter, or <see langword="null"/> if no particle parameter with the given 
            <paramref name="name"/> was found.
            </returns>
            <remarks>
            If the particle parameter is not found in this <see cref="T:DigitalRune.Particles.ParticleParameterCollection"/>,
            then the parameter collections of any parent particle systems are searched as well (only 
            for uniform parameters).
            </remarks>
            <exception cref="T:DigitalRune.Particles.ParticleSystemException">
            A particle parameter with the given name was found, but the parameter type cannot be cast to 
            type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.Get``1(System.String,System.Boolean)">
            <summary>
            Gets a particle parameter with the specified type and name. (If the type is wrong an
            exception is thrown.)
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
            <param name="name">The name of the parameter (e.g. "Color", "Position", etc.).</param>
            <param name="excludeInherited">
            If set to <see langword="true"/> only parameters of this 
            <see cref="T:DigitalRune.Particles.ParticleParameterCollection"/> are returned. If set to <see langword="false"/>
            the parent particle systems are also scanned for uniform particle parameters with the
            specified name.
            </param>
            <returns>
            The particle parameter, or <see langword="null"/> if no particle parameter with the given
            <paramref name="name"/> was found.
            </returns>
            <exception cref="T:DigitalRune.Particles.ParticleSystemException">
            A particle parameter with the given name was found, but the parameter type cannot be cast to
            type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.GetUnchecked``1(System.String)">
            <overloads>
            <summary>
            Gets a particle parameter with the specified type. (If the type is wrong 
            <see langword="null"/> is returned.)
            </summary>
            </overloads>
            
            <summary>
            Gets a particle parameter with the specified type and name. (If the type is wrong 
            <see langword="null"/> is returned.)
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
            <param name="name">The name of the parameter (e.g. "Color", "Position", etc.).</param>
            <returns>
            The particle parameter, or <see langword="null"/> if no particle parameter with the given 
            <paramref name="name"/> and type <typeparamref name="T"/> was found.
            </returns>
            <remarks>
            If the particle parameter is not found in this <see cref="T:DigitalRune.Particles.ParticleParameterCollection"/>,
            then the parameter collections of any parent particle systems are searched as well (only 
            for uniform parameters).
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.GetUnchecked``1(System.String,System.Boolean)">
            <summary>
            Gets a particle parameter with the specified type and name. (If the type is wrong 
            <see langword="null"/> is returned.)
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
            <param name="name">The name of the parameter (e.g. "Color", "Position", etc.).</param>
            <param name="excludeInherited">
            If set to <see langword="true"/> only parameters of this 
            <see cref="T:DigitalRune.Particles.ParticleParameterCollection"/> are returned. If set to <see langword="false"/>
            the parent particle systems are also scanned for uniform particle parameters with the
            specified name.
            </param>
            <returns>
            The particle parameter, or <see langword="null"/> if no particle parameter with the given
            <paramref name="name"/> and type <typeparamref name="T"/> was found.
            </returns>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.Remove(System.String)">
            <summary>
            Removes a particle parameter.
            </summary>
            <param name="name">The name of the parameter (e.g. "Color", "Position", etc.).</param>
            <returns>
            <see langword="true"/> if a particle parameter was found and removed; otherwise,
            <see langword="false"/> if no particle parameter with the given name was found.
            </returns>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Particles.ParticleParameterCollection"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Particles.ParticleParameterCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.System#Collections#Generic#IEnumerable{DigitalRune#Particles#IParticleParameter}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Particles.ParticleParameterCollection"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Particles.ParticleParameterCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Particles.ParticleParameterCollection"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Particles.ParticleParameterCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Particles.ParticleParameterCollection.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Particles.ParticleParameterCollection.Changed"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Particles.ParticleParameterCollection.OnChanged(System.EventArgs)"/> in a derived 
            class, be sure to call the base class's <see cref="M:DigitalRune.Particles.ParticleParameterCollection.OnChanged(System.EventArgs)"/> method so that registered 
            delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Particles.ParticleParameterNames">
            <summary>
            Contains names of common particle parameters.
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Lifetime">
            <summary>
            The lifetime of a particle in seconds.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.NormalizedAge">
            <summary>
            The normalized age in the range [0, 1]. This parameter is created and managed by the
            <see cref="T:DigitalRune.Particles.ParticleSystem"/> class.<br/>
            (Parameter type: varying, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Position">
            <summary>
            The particle position.<br/>
            (Parameter type: varying, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Direction">
            <summary>
            The normalized direction vector that defines the movement direction.<br/>
            (Parameter type: varying, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.LinearSpeed">
            <summary>
            The linear (scalar) speed along the <see cref="F:DigitalRune.Particles.ParticleParameterNames.Direction"/> vector.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.LinearAcceleration">
            <summary>
            The acceleration vector that changes the linear velocity (<see cref="F:DigitalRune.Particles.ParticleParameterNames.Direction"/> and 
            <see cref="F:DigitalRune.Particles.ParticleParameterNames.LinearSpeed"/>).<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Angle">
            <summary>
            The rotation angle in radians.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.AngularSpeed">
            <summary>
            The angular speed that changes the <see cref="F:DigitalRune.Particles.ParticleParameterNames.Angle"/>.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.AngularAcceleration">
            <summary>
            The angular acceleration that changes the <see cref="F:DigitalRune.Particles.ParticleParameterNames.AngularSpeed"/>.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.EmissionRate">
            <summary>
            The emission rate that defines how many particles are generated in particles per second.<br/>
            (Parameter type: uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.EmitterVelocity">
            <summary>
            The emitter velocity vector, usually used to modify the start velocity of particles.<br/>
            (Parameter type: uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Damping">
            <summary>
            The damping factor that defines the strength of the damping. 0 means no damping. Higher 
            values mean stronger damping.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Size">
            <summary>
            The particle size.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Color">
            <summary>
            The particle color.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Alpha">
            <summary>
            The particle opacity (0 = transparent, 1 = opaque).<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.AlphaTest">
            <summary>
            The reference value used in the alpha test. The reference value is a value in the range
            [0, 1]. If the alpha of a pixel is less than the reference alpha, the pixel is discarded.<br/>
            (Parameter type: uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Mass">
            <summary>
            The particle mass.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Restitution">
            <summary>
            The coefficient of restitution (= bounciness) of a particle (0 = no bounce,
            1 = full bounce, no energy is lost).<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.BillboardOrientation">
            <summary>
            The particle billboard orientation.<br/>
            (Parameter type: uniform, value type: depends on the used particle renderer)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Normal">
            <summary>
            The normal vector of a particle.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Axis">
            <summary>
            The axis vector of a particle.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.BlendState">
            <summary>
            The blend state that should be used by the renderer.<br/>
            (Parameter type: uniform, value type: depends on the used particle renderer)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.BlendMode">
            <summary>
            The blend mode that should be used by the renderer: 0 = additive blending, 1 = alpha 
            blending<br/>
            (Parameter type: uniform, value type: depends on the used particle renderer)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.DrawOrder">
            <summary>
            The parameter that defines the draw order for particle systems on the same world space 
            position. Particle systems with higher draw order value are drawn on top of particle systems 
            with lower draw order.<br/>
            (Parameter type: uniform, value type: <see cref="T:System.Int32"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.IsDepthSorted">
            <summary>
            The parameter that indicates if the particles in the particle system should be rendered 
            depth-sorted.<br/>
            (Parameter type: uniform, value type: <see cref="T:System.Boolean"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.SizeX">
            <summary>
            The particle size in x-direction.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.SizeY">
            <summary>
            The particle size in y-direction.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Texture">
            <summary>
            The particle texture.<br/>
            (Parameter type: varying or uniform, value type: depends on the used particle renderer)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Frame">
            <summary>
            The index of the frame in an animated texture (or the index of a texture in a texture 
            atlas).<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Int32"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.AnimationTime">
            <summary>
            The normalized animation time (0 = start of animation, 1 = end of animation), which selects
            the current frame of an animated texture.<br/>
            (Parameter type: varying or uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Softness">
            <summary>
            The softness for rendering soft particles.<br/>
            (Parameter type: uniform, value type: <see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.Type">
            <summary>
            The type of the particles, which determines whether particles are rendered as individual 
            billboards, connected quad strips ("ribbons"), meshes, etc.<br/>
            (Parameter type: uniform, value type: depends on the used particle renderer)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.TextureTiling">
            <summary>
            For ribbons: Defines how a texture is applied to a particle ribbon ("tiling distance").<br/>
            0 = No tiling: The texture is stretched along the ribbon.<br/>
            1 = Tiling: The texture is repeated every particle.<br/>
            <i>n</i> = Tiling with lower frequency: The texture is repeated every <i>n</i> particles.<br/>
            (Parameter type: uniform, value type: <see cref="T:System.Int32"/>)
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleParameterNames.LinkedIndex">
            <summary>
            The index of the next particle that this particle is connected to, for rendering ribbons 
            (a.k.a. trails or lines).<br/>
            (Parameter type: varying, value type: <see cref="T:System.Int32"/>)
            </summary>
        </member>
        <member name="T:DigitalRune.Particles.ParticleReferenceFrame">
            <summary>
            Defines which 3D coordinate system is used for vectors in particle parameters and particle
            effector properties.
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleReferenceFrame.World">
            <summary>
            All parameters are relative to world space (which is the space in which the root particle
            system is placed).
            </summary>
        </member>
        <member name="F:DigitalRune.Particles.ParticleReferenceFrame.Local">
            <summary>
            All parameters are relative to the local space of the particle system.
            </summary>
        </member>
        <member name="T:DigitalRune.Particles.ParticleSystem">
            <summary>
            Represents a system of particles.
            </summary>
            <remarks>
            <para>
            For general information about particle systems, see 
            <see href="http://en.wikipedia.org/wiki/Particle_system"/>
            </para>
            <para>
            <strong>Particle Parameters:</strong> <br/>
            Normally, particle systems use a "Particle" class to store the state of a particle, and all 
            "Particle" instances are stored in an array. This <i>Array of Structures (AoS)</i> approach 
            has the disadvantages that the particle parameters are hard-coded as the properties of the 
            Particle class. For example, the Particle class could contain the properties "Position", 
            "Direction", "Speed", "Size". If a new particle effector wants to store the property "Mass" 
            with the particle, an new "Particle" class has to be defined. And if all particles in a 
            specific particle system should have the same size, then it is a waste of memory to store 
            "Size" per particle. 
            </para>
            <para>
            The DigitalRune Particle System uses a different approach. Particle data is stored in a set of
            separate arrays. This is a <i>Structure of Arrays (SoA)</i> approach. Further, each particle 
            system can decide if a specific particle parameter is constant for all particles 
            (<i>uniform particle parameters</i>), or if each particle can have a different parameter value
            (<i>varying particle parameters</i>). For example: In a smoke particle system, the particle 
            parameter "Color" will be uniform - all particles use the same color (e.g brown for a dirt 
            cloud effect). In a fireworks particle system, the particle parameter "Color" will be varying 
            to give each particle a unique color to create a colorful effect.
            </para>
            <para>
            The <see cref="T:DigitalRune.Particles.ParticleSystem"/> has a property <see cref="P:DigitalRune.Particles.ParticleSystem.Parameters"/> which manages a 
            collection of <see cref="T:DigitalRune.Particles.IParticleParameter`1"/> instances. Each particle parameter has a 
            default value and an optional array. If the particle parameter is uniform, only the 
            <see cref="P:DigitalRune.Particles.IParticleParameter`1.DefaultValue"/> is used and the 
            <see cref="P:DigitalRune.Particles.IParticleParameter`1.Values"/> array is <see langword="null"/>. If the particle 
            parameter is varying, the <see cref="P:DigitalRune.Particles.IParticleParameter`1.Values"/> is used and its length is
            equal to <see cref="P:DigitalRune.Particles.ParticleSystem.MaxNumberOfParticles"/>. <see cref="P:DigitalRune.Particles.ParticleSystem.MaxNumberOfParticles"/> defines the 
            number of particles that can be alive at any given time in the particle system. The particle 
            parameter arrays are used like a circular buffer. The <see cref="P:DigitalRune.Particles.ParticleSystem.ParticleStartIndex"/> defines 
            the array element that contains the first active particle. The current number of active 
            particles is stored in <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfActiveParticles"/>.
            </para>
            <para>
            <strong>Particle Age and Lifetime:</strong> <br/>
            The <see cref="T:DigitalRune.Particles.ParticleSystem"/> itself defines and manages only one particle parameter:
            "NormalizedAge". (All other particle parameters, like "Position", "Color", "Size", "Alpha", 
            etc., must be manually added when needed. <see cref="T:DigitalRune.Particles.ParticleEffector"/>s must be used to 
            initialize and update these particle parameters.)
            </para>
            <para>
            This "NormalizedAge" parameter is varying and stores the relative lifetime of each particle.
            New particles have a normalized age of 0. If the normalized age is equal to or greater than 1,
            the particle is dead. Per default, all particles live 3 seconds, but you can add a uniform or 
            varying particle parameter "Lifetime" to change the lifetime or to give each particle an 
            individual lifetime (measured in seconds).
            </para>
            <para>
            <strong>Killing Particles:</strong> <br/>
            Particles can be killed by setting their "NormalizedAge" to 1 or higher. Dead particles are 
            usually ignored by particle systems and their effectors. But the space is not immediately 
            freed. Particles are created and removed in a first-in-first-out order. That means, in order 
            to free up space for new particles the oldest particles need to be killed first.
            </para>
            <para>
            <strong>Particle Effectors:</strong> <br/>
            A particle system manages a set of <see cref="T:DigitalRune.Particles.ParticleEffector"/>s (see property 
            <see cref="P:DigitalRune.Particles.ParticleSystem.Effectors"/>). These objects define the behavior of the particle system. A particle
            effector can manipulate the particle system, create particles, or change the particle 
            parameters. See <see cref="T:DigitalRune.Particles.ParticleEffector"/> for more information.
            </para>
            <para>
            <strong>Child Particle Systems:</strong> <br/>
            A particle system can own other particle systems (see property <see cref="P:DigitalRune.Particles.ParticleSystem.Children"/>). This 
            allows to create complex layered particle system. For instance, an explosion effect that 
            combines smoke, fire and debris particle systems.
            </para>
            <para>
            <strong>Creating a Particle System:</strong> <br/>
            To create the particle system: Add the required particle parameters to the 
            <see cref="P:DigitalRune.Particles.ParticleSystem.Parameters"/> collection. Then add the particle effectors that define the behavior
            of particle system to the <see cref="P:DigitalRune.Particles.ParticleSystem.Effectors"/> collection. - It is also possible to clone 
            an existing particle system as described below.
            </para>
            <para>
            <strong>Using a Particle System:</strong> <br/>
            To use a configured particle system, you only have to call <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> once per 
            frame. Particle systems can be added to an <see cref="T:DigitalRune.Particles.IParticleSystemService"/>, in which case 
            the particle system service updates the particle system automatically. (Child particle 
            systems, which are owned by another particle system, are also updated automatically.)
            </para>
            <para>
            <strong>Rendering a Particle System:</strong> <br/>
            The particle system does not draw itself because rendering functionality is application and 
            graphics-engine specific. The particle system only manages the particle data. 
            </para>
            <para>
            <strong>IAnimatableObject:</strong> <br/>
            The <see cref="T:DigitalRune.Particles.ParticleSystem"/> implements <see cref="T:DigitalRune.Animation.IAnimatableObject"/>. All uniform 
            particle parameters of a particle system are <see cref="T:DigitalRune.Animation.IAnimatableProperty"/>s. That means 
            they can be animated using DigitalRune Animation.
            </para>
            <para>
            <strong>Cloning:</strong> <br/>
            The <see cref="T:DigitalRune.Particles.ParticleSystem"/> can be cloned. When a clone is created using 
            <see cref="M:DigitalRune.Particles.ParticleSystem.Clone"/>, the whole particle system including the particle parameters, particle 
            effectors and child particle systems is cloned. The returned particle system is in its initial 
            state, which means the runtime state of particle system and the particle states are never 
            copied - each clone starts at <see cref="P:DigitalRune.Particles.ParticleSystem.Time"/> 0 with no particles.
            </para>
            <para>
            The properties <see cref="P:DigitalRune.Particles.ParticleSystem.Random"/>, <see cref="P:DigitalRune.Particles.ParticleSystem.RenderData"/> and <see cref="P:DigitalRune.Particles.ParticleSystem.UserData"/> are 
            not copied.
            </para>
            <para>
            <strong>IGeometricObject:</strong><br/>
            The <see cref="T:DigitalRune.Particles.ParticleSystem"/> implements <see cref="T:DigitalRune.Geometry.IGeometricObject"/>, which means the 
            particle system has a <see cref="P:DigitalRune.Particles.ParticleSystem.Pose"/>, and a <see cref="P:DigitalRune.Particles.ParticleSystem.Shape"/>. These properties are not 
            used by the particle system class itself. The <see cref="P:DigitalRune.Particles.ParticleSystem.Pose"/> can be used to position the 
            particle system in a 3D world or relative to its parent system. The <see cref="P:DigitalRune.Particles.ParticleSystem.Shape"/> can be
            used as the bounding shape for frustum culling. (Please note: The default shape is an 
            <see cref="T:DigitalRune.Geometry.Shapes.InfiniteShape"/>. A better shape should be chosen and updated manually.)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.Random">
            <summary>
            Gets or sets the random number generator used by the particle system.
            </summary>
            <value>The random number generator. (Must not be <see langword="null"/>.)</value>
            <remarks>
            <para>
            The random number generator is created on demand when the property getter is accessed for 
            the first time. When particle systems are updated in parallel (see 
            <see cref="P:DigitalRune.Particles.ParticleSystemManager.EnableMultithreading"/>) each particle system needs to have
            its own random number generator because the class <see cref="P:DigitalRune.Particles.ParticleSystem.Random"/> is not thread-safe!
            </para>
            <para>
            When multiple particle systems are created in close succession, they may be initialized with
            the same random seed. This can lead to particle systems that behave similar and do not look 
            random. If this is a problem, consider setting a random number generator with a carefully 
            chosen seed.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.Service">
            <summary>
            Gets the particle system service.
            </summary>
            <value>
            The particle system service if this instance or the <see cref="P:DigitalRune.Particles.ParticleSystem.Parent"/> particle system was
            added to a particle system service; otherwise, <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.Parent">
            <summary>
            Gets the parent particle systems.
            </summary>
            <value>
            The parent particle system if this instance is the child of another particle system;
            otherwise, <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.Name">
            <summary>
            Gets the name of this particle system.
            </summary>
            <value>
            The name of the particle system. The default value is <see langword="null"/>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Cannot change the name because the particle system has already been added to a particle 
            system service or another particle system.
            </exception>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Particles.ParticleSystem"/> is enabled.
            </summary>
            <value>
            <see langword="true"/> if enabled; otherwise, <see langword="false"/>. The default value is
            <see langword="true"/>.
            </value>
            <remarks>
            If <see cref="P:DigitalRune.Particles.ParticleSystem.Enabled"/> is <see langword="false"/> the particle system is paused and does 
            not change its state when <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> is called.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.MaxNumberOfParticles">
            <summary>
            Gets the maximum number of particles.
            </summary>
            <value>The maximum number of particles. The default value is 100.</value>
            <remarks>
            This value determines the maximum number of particles which can be alive at a single moment.
            This value is equal to the length of the particle parameter arrays. If the maximum allowed 
            number of particles is reached, no new particles can be created. Old particles have to be 
            removed before new particles can be added. (Particles can be killed by setting their 
            "NormalizedAge" to 1 or greater. When killing particles the oldest particles need to be 
            killed first.)
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.ParticleStartIndex">
            <summary>
            Gets index of the first active particle in the particle parameter arrays.
            </summary>
            <value>The index of the first active particle.</value>
            <remarks>
            <see cref="P:DigitalRune.Particles.ParticleSystem.ParticleStartIndex"/> points to the first active particle in the particle 
            parameter arrays. <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfActiveParticles"/> counts how many particles are 
            active. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.NumberOfActiveParticles">
            <summary>
            Gets the number of active particles.
            </summary>
            <value>The number of active particles.</value>
            <remarks>
            <para>
            <see cref="P:DigitalRune.Particles.ParticleSystem.ParticleStartIndex"/> points to the first active particle in the particle 
            parameter arrays. <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfActiveParticles"/> counts how many particles are 
            active. 
            </para>
            <para>
            Usually, <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfActiveParticles"/> is equal to 
            <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfLivingParticles"/> particles because all particles have the same maximal 
            "Lifetime". Only if a custom particle effector randomly kills particles (by setting the 
            particle parameter "NormalizedAge" to a value equal to or greater than 1) or if "Lifetime" 
            is a varying particle parameter, then <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfLivingParticles"/> can be less than 
            <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfActiveParticles"/>; that means that some particles are active but have 
            already died.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.NumberOfLivingParticles">
            <summary>
            Gets the number of living particles.
            </summary>
            <value>The number of living particles.</value>
            <remarks>
            <para>
            <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfLivingParticles"/> counts the number of particles where the 
            "NormalizedAge" parameter is less than 1. This number does not include the living particles 
            of the child particle systems (see <see cref="P:DigitalRune.Particles.ParticleSystem.Children"/>).
            </para>
            <para>
            Usually, <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfActiveParticles"/> is equal to 
            <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfLivingParticles"/> particles because all particles have the same maximal 
            "Lifetime". Only if a custom particle effector randomly kills particles (by setting the 
            particle parameter "NormalizedAge" to a value equal to or greater than 1) or if "Lifetime" 
            is a varying particle parameter, then <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfLivingParticles"/> can be less than 
            <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfActiveParticles"/>; that means that some particles are active but have 
            already died.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.Time">
            <summary>
            Gets the simulation time of the particle system.
            </summary>
            <value>The simulation time of the particle system.</value>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.TimeScaling">
            <summary>
            Gets or sets the time scaling.
            </summary>
            <value>The time scaling. The default value is 1.</value>
            <remarks>
            <see cref="P:DigitalRune.Particles.ParticleSystem.TimeScaling"/> is a factor that is used to scale the <i>deltaTime</i> in 
            <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/>. If <see cref="P:DigitalRune.Particles.ParticleSystem.TimeScaling"/> is larger than 1, the particle system 
            will advance faster. If <see cref="P:DigitalRune.Particles.ParticleSystem.TimeScaling"/> is less than 1, the particle system 
            advances in slow-motion. If <see cref="P:DigitalRune.Particles.ParticleSystem.TimeScaling"/> is 0, the particle system is paused. 
            The particle system behavior is undefined if the value is negative. (Some particle system 
            might support a negative <see cref="P:DigitalRune.Particles.ParticleSystem.TimeScaling"/> to simulate backwards in time.)
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.InitialDelay">
            <summary>
            Gets or sets the initial delay.
            </summary>
            <value>The initial delay. The default value is 0.</value>
            <remarks>
            <para>
            The <see cref="P:DigitalRune.Particles.ParticleSystem.InitialDelay"/> is used by the particle system when the system is updated for
            the first time, or after it was <see cref="M:DigitalRune.Particles.ParticleSystem.Reset"/>. Changing <see cref="P:DigitalRune.Particles.ParticleSystem.InitialDelay"/> of 
            an already running particle system does not have an immediate effect.
            </para>
            <para>
            If <see cref="P:DigitalRune.Particles.ParticleSystem.InitialDelay"/> is greater than zero, the particle system will wait the 
            specified time until it starts to create and simulate particles. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.CurrentDelay">
            <summary>
            Gets or sets the current delay.
            </summary>
            <value>The current delay. The default value is 0.</value>
            <remarks>
            <para>
            When the particle system is updated for the first time or when it is <see cref="M:DigitalRune.Particles.ParticleSystem.Reset"/>,
            <see cref="P:DigitalRune.Particles.ParticleSystem.CurrentDelay"/> is set to the <see cref="P:DigitalRune.Particles.ParticleSystem.InitialDelay"/> (if it is positive). If 
            this value is positive, the particle system will be paused for the given duration. With each
            <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> the <see cref="P:DigitalRune.Particles.ParticleSystem.CurrentDelay"/> is reduced, and the particle system 
            continues to simulate particles as soon as <see cref="P:DigitalRune.Particles.ParticleSystem.CurrentDelay"/> is 0 or negative. 
            </para>
            <para>
            Unlike <see cref="P:DigitalRune.Particles.ParticleSystem.InitialDelay"/>, changing <see cref="P:DigitalRune.Particles.ParticleSystem.CurrentDelay"/> of a running particle
            system has an immediate effect (in the next <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> calls). Each time the 
            particle system is <see cref="M:DigitalRune.Particles.ParticleSystem.Reset"/>, <see cref="P:DigitalRune.Particles.ParticleSystem.CurrentDelay"/> is set to 
            <see cref="P:DigitalRune.Particles.ParticleSystem.InitialDelay"/>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.PreloadDuration">
            <summary>
            Gets or sets the preload duration.
            </summary>
            <value>The preload duration. The default value is 0 (no preloading).</value>
            <remarks>
            <para>
            Usually, particle systems start with no particles and particles are added over time. But for
            some particle systems in a game, the start should not be visible to the user. For example, 
            when the player encounters a waterfall, the waterfall should already be running and not 
            slowly start in front of the player. Such particle systems need to be preloaded.
            </para>
            <para>
            If <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> is called for the first time or after a <see cref="M:DigitalRune.Particles.ParticleSystem.Reset"/> and 
            <see cref="P:DigitalRune.Particles.ParticleSystem.PreloadDuration"/> is greater than 0, the particle system will automatically
            advance its state by executing <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> internally several times. For each 
            internal <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> call the <see cref="P:DigitalRune.Particles.ParticleSystem.PreloadDeltaTime"/> is used as the time
            step size. 
            </para>
            <para>
            Preloading during the first <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> can take a significant amount of time. It
            might be better to make the first <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> call while a game level is loading to
            avoid any slow-downs at runtime. Setting <see cref="P:DigitalRune.Particles.ParticleSystem.PreloadDeltaTime"/> to a larger value 
            will also reduce the needed time for preloading.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.PreloadDeltaTime">
            <summary>
            Gets or sets the preload delta time.
            </summary>
            <value>
            The preload delta time. The default is 1/60 seconds.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Particles.ParticleSystem.PreloadDeltaTime"/> is the time step size used by the particle system while 
            preloading. See <see cref="P:DigitalRune.Particles.ParticleSystem.PreloadDuration"/> for more information.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.CurrentDeltaTime">
            <summary>
            Gets the <i>deltaTime</i> parameter of the last <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> call.
            </summary>
            <value>The <i>deltaTime</i> parameter of the last <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> call.</value>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.EnableMultithreading">
            <summary>
            Gets or sets a value indicating whether multithreading is enabled.
            </summary>
            <value>
            <see langword="true"/> if multithreading is enabled; otherwise, <see langword="false"/>. The
            default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
            When multithreading is enabled the particle system will update child particle systems (see 
            <see cref="P:DigitalRune.Particles.ParticleSystem.Children"/>) on multiple threads to improve the performance. 
            </para>
            <para>
            Multithreading adds an additional overhead, therefore it should only be enabled if the 
            current system has more than one CPU core and if the other cores are not fully utilized by
            the application. Multithreading should be disabled if the system has only one CPU core or
            if all other CPU cores are busy. In some cases it might be necessary to run a benchmark of
            the application and compare the performance with and without multithreading to decide 
            whether multithreading should be enabled or not.
            </para>
            <para>
            The particle system internally uses the class <see cref="T:DigitalRune.Threading.Parallel"/> for parallelization.
            <see cref="T:DigitalRune.Threading.Parallel"/> is a static class that defines how many worker threads are created, 
            how the workload is distributed among the worker threads and more. (See 
            <see cref="T:DigitalRune.Threading.Parallel"/> to find out more on how to configure parallelization.)
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Threading.Parallel"/>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.ReferenceFrame">
            <summary>
            Gets or sets which 3D reference frame is used for particle parameters and particle effector 
            properties.
            </summary>
            <value>
            The used reference frame. The default is <see cref="F:DigitalRune.Particles.ParticleReferenceFrame.World"/>.
            </value>
            <remarks>
            <para>
            Each particle system has a <see cref="P:DigitalRune.Particles.ParticleSystem.Pose"/>. This is like a transformation matrix that
            defines how the particle system is positioned relative to the <see cref="P:DigitalRune.Particles.ParticleSystem.Parent"/> particle 
            system, or relative to world space if the particle system does not have a 
            <see cref="P:DigitalRune.Particles.ParticleSystem.Parent"/>. 
            </para>
            <para>
            Usually, all particle positions, all rotation parameters, all direction parameters, etc. are
            relative to world space. A renderer which draws particles, can render them at the position 
            specified by the position particle parameter. If the particle system moves (by changing its 
            <see cref="P:DigitalRune.Particles.ParticleSystem.Pose"/>), the particles do not move with the particle system. 
            </para>
            <para>
            In some cases, the particle should always be relative to particle system, for example, if 
            the particles are used to render light-points that are fixed on a vehicle. In this case the 
            particle positions must be relative to the <see cref="F:DigitalRune.Particles.ParticleReferenceFrame.Local"/> space 
            of the particle system. A renderer which draws particles must transform particle positions 
            by the <see cref="P:DigitalRune.Particles.ParticleSystem.Pose"/> of this particle system and all parent particle systems.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.Parameters">
            <summary>
            Gets the particle parameters.
            </summary>
            <value>The particle parameters.</value>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.Effectors">
            <summary>
            Gets the particle effectors.
            </summary>
            <value>The particle effectors.</value>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.Children">
            <summary>
            Gets or sets the collection of child particle systems.
            </summary>
            <value>
            The collection of child particle systems. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.RenderData">
            <summary>
            Gets or sets the render data.
            </summary>
            <value>The render data. The default value is <see langword="null"/>.</value>
            <remarks>
            This property is not used by the particle system itself. A particle renderer can use this
            property to store data.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>The user data. The default value is <see langword="null"/>.</value>
            <remarks>
            This property is not used by the particle system itself. This property can be used to store 
            application specific data.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.ParticleSystem"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.Reset">
            <summary>
            Resets the particle system to its initial state. All particle states are cleared.
            </summary>
            <remarks>
            <see cref="M:DigitalRune.Particles.ParticleSystem.Reset"/> does not change the <see cref="P:DigitalRune.Particles.ParticleSystem.Enabled"/> flag.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.OnReset">
            <summary>
            Called when <see cref="M:DigitalRune.Particles.ParticleSystem.Reset"/> was called.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)">
            <summary>
            Advances the state of the particle system.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
            <remarks>
            This method calls <see cref="M:DigitalRune.Particles.ParticleSystem.OnUpdate(System.TimeSpan)"/> which increases the particle ages and calls the 
            <see cref="P:DigitalRune.Particles.ParticleSystem.Effectors"/> and the child <see cref="P:DigitalRune.Particles.ParticleSystem.Children"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.OnUpdate(System.TimeSpan)">
            <summary>
            Called when <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> was called.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> <br/>
            This method is called by <see cref="M:DigitalRune.Particles.ParticleSystem.Update(System.TimeSpan)"/> to do the actual work. This method is only
            called if the particle system is <see cref="P:DigitalRune.Particles.ParticleSystem.Enabled"/> and not delaying. The base 
            implementation calls <see cref="M:DigitalRune.Particles.ParticleEffector.BeginUpdate(System.TimeSpan)"/> of the effectors. Then the 
            particle ages (particle parameter "NormalizedAge") are updated. Next 
            <see cref="M:DigitalRune.Particles.ParticleEffector.UpdateParticles(System.TimeSpan,System.Int32,System.Int32)"/> of the effectors is called to update the 
            particle states. After that the child <see cref="P:DigitalRune.Particles.ParticleSystem.Children"/> are updated. Finally 
            <see cref="P:DigitalRune.Particles.ParticleSystem.ParticleStartIndex"/>, <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfActiveParticles"/> and
            <see cref="P:DigitalRune.Particles.ParticleSystem.NumberOfLivingParticles"/> are updated and 
            <see cref="M:DigitalRune.Particles.ParticleEffector.EndUpdate(System.TimeSpan)"/> of the effectors is called.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.AddParticles(System.Int32)">
            <overloads>
            <summary>
            Creates a number of new particles.
            </summary>
            </overloads>
            
            <summary>
            Creates a number of new particles.
            </summary>
            <param name="numberOfNewParticles">The number of particles to create.</param>
            <returns>
            The number of actually created particles. This number will be less than 
            <paramref name="numberOfNewParticles"/> if the total number of particles in the particle
            system would exceed <see cref="P:DigitalRune.Particles.ParticleSystem.MaxNumberOfParticles"/>.
            </returns>
            <remarks>
            <para>
            The "NormalizedAge" of new particles is set to 0. The particle system will automatically 
            call <see cref="M:DigitalRune.Particles.ParticleEffector.InitializeParticles(System.Int32,System.Int32,System.Object)"/> of all effectors to initialize other
            particle parameters.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.AddParticles(System.Int32,System.Object)">
            <summary>
            Creates a number of new particles from the specified emitter.
            </summary>
            <param name="numberOfNewParticles">The number of particles to create.</param>
            <param name="emitter">
            Optional: The emitter that triggered the particle creation. This can be an effector, another
            object, or <see langword="null"/>. 
            </param>
            <returns>
            The number of actually created particles. This number will be less than 
            <paramref name="numberOfNewParticles"/> if the total number of particles in the particle
            system would exceed <see cref="P:DigitalRune.Particles.ParticleSystem.MaxNumberOfParticles"/>.
            </returns>
            <remarks>
            <para>
            The "NormalizedAge" of new particles is set to 0. The particle system will automatically 
            call <see cref="M:DigitalRune.Particles.ParticleEffector.InitializeParticles(System.Int32,System.Int32,System.Object)"/> of all effectors to initialize other
            particle parameters.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.DigitalRune#Animation#IAnimatableObject#GetAnimatedProperties">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.DigitalRune#Animation#IAnimatableObject#GetAnimatableProperty``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.DigitalRune#Geometry#IGeometricObject#Clone">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Particles.ParticleSystem"/> that is a clone of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Particles.ParticleSystem"/> that is a clone of the current instance.
            </returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Particles.ParticleSystem.Clone"/> calls 
            <see cref="M:DigitalRune.Particles.ParticleSystem.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Particles.ParticleSystem"/> derived class and <see cref="M:DigitalRune.Particles.ParticleSystem.CloneCore(DigitalRune.Particles.ParticleSystem)"/> to create a copy of 
            the current instance. Classes that derive from <see cref="T:DigitalRune.Particles.ParticleSystem"/> need to 
            implement <see cref="M:DigitalRune.Particles.ParticleSystem.CreateInstanceCore"/> and <see cref="M:DigitalRune.Particles.ParticleSystem.CloneCore(DigitalRune.Particles.ParticleSystem)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.ParticleSystem"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a protected method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Particles.ParticleSystem.CreateInstanceCore"/> method, 
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone particle system. A derived class does not implement 
            <see cref="M:DigitalRune.Particles.ParticleSystem.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Particles.ParticleSystem"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Particles.ParticleSystem.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Particles.ParticleSystem"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Particles.ParticleSystem"/> derived class must 
            implement this method. A typical implementation is to simply call the default constructor 
            and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.CloneCore(DigitalRune.Particles.ParticleSystem)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Particles.ParticleSystem"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Particles.ParticleEffector"/> derived class 
            must implement this method. A typical implementation is to call <c>base.CloneCore(this)</c> 
            to copy all properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.Aabb">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.Pose">
            <summary>
            Gets or sets the pose (position and orientation) of the particle system relative to the
            <see cref="P:DigitalRune.Particles.ParticleSystem.Parent"/> or the world.
            </summary>
            <value>The pose (position and orientation) relative to the <see cref="P:DigitalRune.Particles.ParticleSystem.Parent"/>.</value>
            <remarks>
            <para>
            This property specifies the positions and orientation of the particle system, relative to 
            the <see cref="P:DigitalRune.Particles.ParticleSystem.Parent"/> particle system. If <see cref="P:DigitalRune.Particles.ParticleSystem.Parent"/> is <see langword="null"/>,
            the pose describes where the particle system is placed in world space.
            </para>
            <para>
            Changing this property raises the <see cref="E:DigitalRune.Particles.ParticleSystem.PoseChanged"/> event.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.Shape">
            <summary>
            Gets or sets the bounding shape of the particle system.
            </summary>
            <value>
            The bounding shape. The default value is <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/>.
            </value>
            <remarks>
            <para>
            This property can be used as a bounding shape for frustum culling and similar operations. A 
            suitable bounding shape must be set manually. The default value is 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/>.
            </para>
            <para>
            Changing this property raises the <see cref="E:DigitalRune.Particles.ParticleSystem.ShapeChanged"/> event.
            </para>
            <para>
            <strong>Important:</strong> The <see cref="T:DigitalRune.Particles.ParticleSystem"/> implements the interface 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. An <see cref="T:DigitalRune.Geometry.IGeometricObject"/> instance registers event 
            handlers for the <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed"/> event of the 
            contained <see cref="P:DigitalRune.Particles.ParticleSystem.Shape"/>. Therefore, a <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> 
            will have an indirect reference to the <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. This is no problem if
            the geometric object exclusively owns the shape. However, this could lead to problems 
            ("life extension bugs" a.k.a. "memory leaks") when multiple geometric objects share the same
            shape: One geometric object is no longer used but it cannot be collected by the garbage 
            collector because the shape still holds a reference to the object.
            </para>
            <para>
            Therefore, when <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>s are shared between multiple 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/>s: Always set the property <see cref="P:DigitalRune.Particles.ParticleSystem.Shape"/> to 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/> or
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/> when the 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/> is no longer used. Those are special immutable shapes that 
            never raises any <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed"/> events. Setting 
            <see cref="P:DigitalRune.Particles.ParticleSystem.Shape"/> to <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/> or 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Infinite"/> ensures that the internal event 
            handlers are unregistered and the objects can be garbage-collected properly.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystem.DigitalRune#Geometry#IGeometricObject#Scale">
            <summary>
            Gets the scale. - Always returns (1, 1, 1).
            </summary>
            <value>Always returns (1, 1, 1).
            </value>
        </member>
        <member name="E:DigitalRune.Particles.ParticleSystem.PoseChanged">
            <inheritdoc/>
        </member>
        <member name="E:DigitalRune.Particles.ParticleSystem.ShapeChanged">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.OnPoseChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Particles.ParticleSystem.PoseChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Particles.ParticleSystem.OnPoseChanged(System.EventArgs)"/> 
            in a derived class, be sure to call the base class's <see cref="M:DigitalRune.Particles.ParticleSystem.OnPoseChanged(System.EventArgs)"/> 
            method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystem.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Particles.ParticleSystem.ShapeChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Particles.ParticleSystem.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)"/> 
            in a derived class, be sure to call the base class's <see cref="M:DigitalRune.Particles.ParticleSystem.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)"/> 
            method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Particles.ParticleSystemCollection">
            <summary>
            Represents a collection of named <see cref="T:DigitalRune.Particles.ParticleSystem"/>s.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.ParticleSystemCollection"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Particles.ParticleSystemException">
            <summary>
            The exception that is thrown when an error in the particle library occurs.
            </summary>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystemException.ParticleSystem">
            <summary>
            Gets or sets the particle system that caused the exception.
            </summary>
            <value>The particle system that caused the exception.</value>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystemException.ParticleEffector">
            <summary>
            Gets or sets the particle effector that caused the exception.
            </summary>
            <value>The particle effector that caused the exception.</value>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystemException.ParticleParameter">
            <summary>
            Gets or sets the particle parameter that caused the exception.
            </summary>
            <value>The particle parameter that caused the exception.</value>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystemException.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.ParticleSystemException"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.ParticleSystemException"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystemException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.ParticleSystemException"/> class with a 
            specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.ParticleSystemException"/> class with a
            specified error message and a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null"/> if no
            inner exception is specified.
            </param>
        </member>
        <member name="T:DigitalRune.Particles.ParticleSystemManager">
            <summary>
            Manages a collection of particle systems.
            </summary>
            <remarks>
            <para>
            Particle systems can be added to the <see cref="P:DigitalRune.Particles.ParticleSystemManager.ParticleSystems"/> collection. All added
            particle systems are updated when <see cref="M:DigitalRune.Particles.ParticleSystemManager.Update(System.TimeSpan)"/> is called. Usually, 
            <see cref="M:DigitalRune.Particles.ParticleSystemManager.Update(System.TimeSpan)"/> should be called once per frame. 
            </para>
            <para>
            <strong>Multithreading Support:</strong> By default <see cref="P:DigitalRune.Particles.ParticleSystemManager.EnableMultithreading"/> is set 
            on systems with multiple CPU cores and all particles systems are updated in parallel.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystemManager.ParticleSystems">
            <summary>
            Gets the particle systems.
            </summary>
            <value>The particle systems.</value>
            <remarks>
            Note that this collection does not include nested particle systems. A nested particle system
            (a particle system owned by another particle system) is automatically updated when the 
            parent particle system is updated. Only the root particle system needs to be added to the
            <see cref="P:DigitalRune.Particles.ParticleSystemManager.ParticleSystems"/> collection.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.ParticleSystemManager.EnableMultithreading">
            <summary>
            Gets or sets a value indicating whether multithreading is enabled.
            </summary>
            <value>
            <see langword="true"/> if multithreading is enabled; otherwise, <see langword="false"/>. The
            default value is <see langword="true"/> if the current system has more than one CPU cores.
            </value>
            <remarks>
            <para>
            When multithreading is enabled the particle system manager will distribute the workload 
            across multiple processors (CPU cores) to improve the performance. But multithreading also 
            adds an additional overhead, therefore it should only be enabled if the current system has 
            more than one CPU core and if the other cores are not fully utilized by the application. 
            Multithreading should be disabled if the system has only one CPU core or if all other CPU 
            cores are busy. In some cases it might be necessary to run a benchmark of the application 
            and compare the performance with and without multithreading to decide whether multithreading
            should be enabled or not.
            </para>
            <para>
            The particle system manager internally uses the class <see cref="T:DigitalRune.Threading.Parallel"/> for 
            parallelization. <see cref="T:DigitalRune.Threading.Parallel"/> is a static class that defines how many worker 
            threads are created, how the workload is distributed among the worker threads and more. 
            (See <see cref="T:DigitalRune.Threading.Parallel"/> to find out more on how to configure parallelization.)
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Threading.Parallel"/>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystemManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.ParticleSystemManager"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Particles.ParticleSystemManager.Update(System.TimeSpan)">
            <summary>
            Updates all particle systems.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
        </member>
        <member name="T:DigitalRune.Particles.UniformParticleParameter`1">
            <summary>
            Represents a uniform particle parameter. (All particles have the same parameter value.)
            </summary>
            <typeparam name="T">The type of the particle parameter.</typeparam>
            <remarks>
            All particles use <see cref="P:DigitalRune.Particles.UniformParticleParameter`1.DefaultValue"/> as the parameter value. This particle parameter 
            implements <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>, so it can be easily animated.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.UniformParticleParameter`1.Name">
            <summary>
            Gets the name of the particle parameter.
            </summary>
            <value>The name of the particle parameter.</value>
        </member>
        <member name="P:DigitalRune.Particles.UniformParticleParameter`1.DefaultValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Particles.UniformParticleParameter`1.DigitalRune#Particles#IParticleParameter{T}#Values">
            <summary>
            Returns <see langword="null"/>.
            </summary>
            <value>Always <see langword="null"/>.</value>
        </member>
        <member name="P:DigitalRune.Particles.UniformParticleParameter`1.IsUniform">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Particles.UniformParticleParameter`1.DigitalRune#Particles#IParticleParameterInternal#IsInitialized">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.UniformParticleParameter`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.UniformParticleParameter`1"/> class.
            </summary>
            <param name="name">The name of this particle parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Particles.UniformParticleParameter`1.DigitalRune#Particles#IParticleParameterInternal#UpdateArrayLength(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.UniformParticleParameter`1.AddCopyToCollection(DigitalRune.Particles.ParticleParameterCollection)">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Particles.UniformParticleParameter`1.DigitalRune#Animation#IAnimatableProperty#HasBaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Particles.UniformParticleParameter`1.DigitalRune#Animation#IAnimatableProperty#BaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Particles.UniformParticleParameter`1.DigitalRune#Animation#IAnimatableProperty#IsAnimated">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Particles.UniformParticleParameter`1.DigitalRune#Animation#IAnimatableProperty#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Particles.UniformParticleParameter`1.DigitalRune#Animation#IAnimatableProperty{T}#BaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Particles.UniformParticleParameter`1.DigitalRune#Animation#IAnimatableProperty{T}#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Particles.VaryingParticleParameter`1">
            <summary>
            Represents a varying particle parameter. (Each particles has its own parameter value.)
            </summary>
            <typeparam name="T">The type of the particle parameter.</typeparam>
            <remarks>
            Each particle has an individual parameter value stored in <see cref="P:DigitalRune.Particles.VaryingParticleParameter`1.Values"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Particles.VaryingParticleParameter`1.Name">
            <summary>
            Gets the name of the particle parameter.
            </summary>
            <value>The name of the particle parameter.</value>
        </member>
        <member name="P:DigitalRune.Particles.VaryingParticleParameter`1.DigitalRune#Particles#IParticleParameter{T}#DefaultValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Particles.VaryingParticleParameter`1.Values">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Particles.VaryingParticleParameter`1.IsUniform">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Particles.VaryingParticleParameter`1.DigitalRune#Particles#IParticleParameterInternal#IsInitialized">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Particles.VaryingParticleParameter`1.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Particles.VaryingParticleParameter`1"/> class.
            </summary>
            <param name="name">The name of this particle parameter.</param>
            <param name="numberOfParticles">The maximal number of particles.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfParticles"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Particles.VaryingParticleParameter`1.UpdateArrayLength(System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfParticles"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Particles.VaryingParticleParameter`1.AddCopyToCollection(DigitalRune.Particles.ParticleParameterCollection)">
            <inheritdoc/>
        </member>
    </members>
</doc>
