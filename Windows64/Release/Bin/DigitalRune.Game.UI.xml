<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DigitalRune.Game.UI</name>
    </assembly>
    <members>
        <member name="T:DigitalRune.Game.UI.Consoles.ConsoleCommand">
            <summary>
            Defines a game console command.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Consoles.ConsoleCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
            <value>The name of the command.</value>
            <remarks>
            Command names are case-insensitive. And they are stored in lower-case.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Consoles.ConsoleCommand.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
            <remarks>
            This is the help text of the command.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Consoles.ConsoleCommand.Execute">
            <summary>
            Gets or sets the callback that is called when the command was entered.
            </summary>
            <value>
            The callback that is called when the command was entered. The input parameter for the
            callback method is the array of command arguments. (The first argument is the command name.)
            </value>
            <remarks>
            The callback method can throw an exception which will be printed as an error message on the
            console.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommand.#ctor(System.String)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Consoles.ConsoleCommand"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Consoles.ConsoleCommand"/> class.
            </summary>
            <param name="name">The name (see <see cref="P:DigitalRune.Game.UI.Consoles.ConsoleCommand.Name"/>).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is an empty string.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommand.#ctor(System.String,System.String,System.Action{System.String[]})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Consoles.ConsoleCommand"/> class with the given 
            properties.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="callback">
            The callback method that handles the command (see <see cref="P:DigitalRune.Game.UI.Consoles.ConsoleCommand.Execute"/>).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> or <paramref name="callback"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is an empty string.
            </exception>
        </member>
        <member name="T:DigitalRune.Game.UI.Consoles.ConsoleCommandEventArgs">
            <summary>
            Provides arguments for a <see cref="E:DigitalRune.Game.UI.Consoles.IConsole.CommandEntered"/> event.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Consoles.ConsoleCommandEventArgs.Args">
            <summary>
            Gets the command arguments.
            </summary>
            <value>The command arguments.</value>
            <remarks>
            The first argument is the command name.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Consoles.ConsoleCommandEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Game.UI.Consoles.ConsoleCommandEventArgs"/> was
            handled.
            </summary>
            <value>
            <see langword="true"/> if the command was handled; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            Event handler that have handled the command must set this property. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommandEventArgs.#ctor(System.String[])">
            <summary>
            Constructs a new instance of the <see cref="T:DigitalRune.Game.UI.Consoles.ConsoleCommandEventArgs"/> class.
            </summary>
            <param name="args">The command arguments.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="args"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Game.UI.Consoles.ConsoleCommandException">
            <summary>
            Is raised when a console command needs to report errors.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Consoles.ConsoleCommandException.ErrorInvalidArgument">
            <summary>The default error message for an invalid argument.</summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Consoles.ConsoleCommandException.ErrorInvalidNumberOfArguments">
            <summary>The default error message for an invalid number of arguments.</summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Consoles.ConsoleCommandException.ErrorMissingArgument">
            <summary>The default error message for a missing argument.</summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Consoles.ConsoleCommandException.ErrorInvalidCommand">
            <summary>The default error message for an invalid command.</summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommandException.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Consoles.ConsoleCommandException"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Consoles.ConsoleCommandException"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Consoles.ConsoleCommandException"/> class with a
            specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommandException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Consoles.ConsoleCommandException"/> class with a
            specified error message and the argument that caused the error.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="argument">The argument that caused the error.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommandException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Consoles.ConsoleCommandException"/> class with a
            specified error message and a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null"/> if no
            inner exception is specified.
            </param>
        </member>
        <member name="T:DigitalRune.Game.UI.Consoles.ConsoleCommandInterpreter">
            <summary>
            Handles game console commands.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Consoles.ConsoleCommandInterpreter.Console">
            <summary>
            Gets the <see cref="T:DigitalRune.Game.UI.Consoles.IConsole"/>.
            </summary>
            <value>The <see cref="T:DigitalRune.Game.UI.Consoles.IConsole"/>.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Consoles.ConsoleCommandInterpreter.Commands">
            <summary>
            Gets the commands.
            </summary>
            <value>The commands.</value>
            <remarks>
            New custom commands can be added. If the commands throw exceptions, the exceptions are 
            caught and displayed in the console.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommandInterpreter.#ctor(DigitalRune.Game.UI.Consoles.IConsole)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Consoles.ConsoleCommandInterpreter"/> class.
            </summary>
            <param name="console">The <see cref="T:DigitalRune.Game.UI.Consoles.IConsole"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="console"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommandInterpreter.Interpret(DigitalRune.Game.UI.Consoles.ConsoleCommandEventArgs)">
            <summary>
            Handles the specified command. 
            </summary>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.UI.Consoles.ConsoleCommandEventArgs"/> instance containing the event data.
            </param>
            <remarks>
            Types that implementing <see cref="T:DigitalRune.Game.UI.Consoles.IConsole"/> should call this method after the 
            <see cref="E:DigitalRune.Game.UI.Consoles.IConsole.CommandEntered"/> event was executed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommandInterpreter.WriteHelp">
            <summary>
            Displays a general help text.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommandInterpreter.WriteCommandHelp(System.String)">
            <summary>
            Displays a description of a single command.
            </summary>
            <param name="commandName">Name of the command.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommandInterpreter.Clear(System.String[])">
            <summary>
            Clears the console.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommandInterpreter.CollectGarbage(System.String[])">
            <summary>
            Calls the garbage collector and displays the collection time.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.ConsoleCommandInterpreter.ParseCommand(System.String[])">
            <summary>
            Displays the given arguments (for debugging the console itself).
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:DigitalRune.Game.UI.Consoles.IConsole">
            <summary>
            Represents an interactive console for debugging.
            </summary>
            <remarks>
            <para>
            If the user enters a command, the <see cref="E:DigitalRune.Game.UI.Consoles.IConsole.CommandEntered"/> event is raised. If this event 
            is not handled (see <see cref="P:DigitalRune.Game.UI.Consoles.ConsoleCommandEventArgs.Handled"/>), the 
            <see cref="P:DigitalRune.Game.UI.Consoles.IConsole.Interpreter"/> handles the command. 
            </para>
            <para>
            To add new commands, you can either handle the <see cref="E:DigitalRune.Game.UI.Consoles.IConsole.CommandEntered"/> event, or
            add new commands to the <see cref="P:DigitalRune.Game.UI.Consoles.IConsole.Interpreter"/> (see 
            <see cref="P:DigitalRune.Game.UI.Consoles.ConsoleCommandInterpreter.Commands"/>).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Consoles.IConsole.Prompt">
            <summary>
            Gets or sets the prompt text.
            </summary>
            <value>The prompt text. The default is "&gt; "</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Consoles.IConsole.Interpreter">
            <summary>
            Gets the default command interpreter.
            </summary>
            <value>The default command interpreter.</value>
        </member>
        <member name="E:DigitalRune.Game.UI.Consoles.IConsole.CommandEntered">
            <summary>
            Event raised after a command was entered.
            </summary>
            <remarks>
            If an event handler handles a command, it must set the 
            <see cref="P:DigitalRune.Game.UI.Consoles.ConsoleCommandEventArgs.Handled"/> flag. Event handlers should check if this flag
            was already set by another handler. In some cases it make sense that more than one event
            handler handle a single command, for example: When "help" command was entered, all event
            handlers can output their help information.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.IConsole.Clear">
            <summary>
            Clears the console.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.IConsole.WriteLine">
            <summary>
            Writes an empty line in the console.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Consoles.IConsole.WriteLine(System.String)">
            <summary>
            Writes a line of text in the console.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="T:DigitalRune.Game.UI.Consoles.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Game.UI.Consoles"/> namespace provides types to create debugging
            consoles.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Content.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Game.UI.Content"/> namespace contains the run-time components of
            the content pipeline. (Only available in XNA/MonoGame compatible builds.)
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Content.ThemeReader">
            <summary>
            Reads a UI theme from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Content.ThemeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Game.UI.Rendering.Theme)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.Console">
            <summary>
            Provides an interactive console for debugging.
            </summary>
            <remarks>
            <para>
            If the user enters a command, the <see cref="E:DigitalRune.Game.UI.Controls.Console.CommandEntered"/> event is raised. If this event 
            is not handled (see <see cref="P:DigitalRune.Game.UI.Consoles.ConsoleCommandEventArgs.Handled"/>), the 
            <see cref="P:DigitalRune.Game.UI.Controls.Console.Interpreter"/> handles the command. 
            </para>
            <para>
            To add new commands, you can either handle the <see cref="E:DigitalRune.Game.UI.Controls.Console.CommandEntered"/> event, or add new 
            commands to the <see cref="P:DigitalRune.Game.UI.Controls.Console.Interpreter"/> (see 
            <see cref="P:DigitalRune.Game.UI.Consoles.ConsoleCommandInterpreter.Commands"/>).
            </para>
            <para>
            The console has a command history that can be accessed with the up/down keys. The console 
            content can be scrolled with the page up/down keys or a vertical scroll bar.
            </para>
            <para>
            " can be used to group several words. To write " in a command argument it must be escaped
            using \".
            </para>
            <para>
            The <see cref="T:DigitalRune.Game.UI.Controls.Console"/> assumes that a fixed-width <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Font"/> is used.
            </para>
            </remarks>
            <example>
            The following example opens a window containing a console.
            <code lang="csharp">
            <![CDATA[
            void ShowConsoleWindow(UIScreen screen)
            {
              var window = new Window
              {
                Title = "Console Window",
                Width = 480,
                Height = 240
              };
              var console = new Console
              {
                HorizontalAlignment = HorizontalAlignment.Stretch,
                VerticalAlignment = VerticalAlignment.Stretch
              };
              window.Content = console;
            
              // Print a message in the console.
              console.WriteLine("Enter 'help' to see all available commands.");
            
              // Register a new command 'close', which closes the console window.
              var closeCommand = new ConsoleCommand("close", "Close console.", _ => window.Close());
              console.Interpreter.Commands.Add(closeCommand);
            
              window.Show(_screen);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Console.CaretIndex">
            <summary>
            Gets or sets the position of the caret.
            </summary>
            <value>The position of the caret (zero-based index).</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Console.Text">
            <summary>
            Gets the text currently entered at the prompt.
            </summary>
            <value>The text currently entered at the prompt.</value>
            <remarks>
            <para>
            The current text is not in <see cref="P:DigitalRune.Game.UI.Controls.Console.TextLines"/>.
            </para>
            <para>
            Call <see cref="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateArrange"/> after changing the text to update the 
            console. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Console.Interpreter">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Console.History">
            <summary>
            Gets the command history.
            </summary>
            <value>The command history.</value>
            <remarks>
            This list contains the last commands (whole line of text including arguments) that were 
            entered into the console. The max number of history entries is limited by 
            <see cref="P:DigitalRune.Game.UI.Controls.Console.MaxHistoryEntries"/>. The entries are sorted. History[0] contains the oldest 
            entry. History[History.Count - 1] contains the newest entry. The list does not contain
            duplicate entries.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Console.MaxHistoryEntries">
            <summary>
            Gets or sets the max number of entries in the command history.
            </summary>
            <value>The max number of history entries.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Console.Prompt">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Console.TextLines">
            <summary>
            Gets the text content of the console line by line.
            </summary>
            <value>The text lines.</value>
            <remarks>
            <para>
            A single string in this list is the result of a single <see cref="M:DigitalRune.Game.UI.Controls.Console.WriteLine(System.String)"/>. To
            add text to the console, call <see cref="M:DigitalRune.Game.UI.Controls.Console.WriteLine(System.String)"/> and do not change this list
            directly.
            </para>
            <para>
            A single text line can create several <see cref="P:DigitalRune.Game.UI.Controls.Console.VisualLines"/> if the line is too long and
            must be wrapped at the max column limit of the console.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Console.VisualLines">
            <summary>
            Gets the text lines, exactly as they should be displayed (wrapping already applied).
            </summary>
            <value>The text, exactly as it should be displayed (wrapping already applied).</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Console.VisualCaretX">
            <summary>
            Gets the x-position of the caret (in columns).
            </summary>
            <value>
            The x-position of the caret (in columns). This value can be -1 to indicate that the caret is
            not visible.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Console.VisualCaretY">
            <summary>
            Gets the y-position of the caret (in rows).
            </summary>
            <value>The y-position of the caret (in rows).</value>
        </member>
        <member name="E:DigitalRune.Game.UI.Controls.Console.CommandEntered">
            <inheritdoc/>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Console.LineOffsetPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Console.LineOffset"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Console.LineOffset">
            <summary>
            Gets or sets the line offset for scrolling. 
            This is a game object property.
            </summary>
            <value>
            The line offset. 0 means that the end of the console text is visible. A positive value
            indicates the amount of lines to scroll back up to older content.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Console.MaxLinesPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Console.MaxLines"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Console.MaxLines">
            <summary>
            Gets or sets the max number of text lines. 
            This is a game object property.
            </summary>
            <value>The max number of text lines.</value>
            <remarks>
            The console will "forget" the older <see cref="P:DigitalRune.Game.UI.Controls.Console.TextLines"/> if the number of
            <see cref="P:DigitalRune.Game.UI.Controls.Console.TextLines"/> exceeds this value.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Console.VerticalScrollBarStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Console.VerticalScrollBarStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Console.VerticalScrollBarStyle">
            <summary>
            Gets or sets the style that is applied to the vertical scroll bar. 
            This is a game object property.
            </summary>
            <value>
            The style that is applied to the vertical scroll bar. If this property is 
            <see langword="null"/> or an empty string no scroll bar is used.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.Console"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.Console"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.OnUnload">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.Clear">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.WriteLine">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.OnCommandEntered(DigitalRune.Game.UI.Consoles.ConsoleCommandEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.UI.Controls.Console.CommandEntered"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:DigitalRune.Game.UI.Consoles.ConsoleCommandEventArgs"/> object that provides the arguments for the event.
            </param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.ParseCommand(System.String)">
            <summary>
            Parses a command and returns the command arguments.
            </summary>
            <param name="text">The text.</param>
            <returns>The command arguments. The first argument is the command name itself.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.OnArrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.OnRender(DigitalRune.Game.UI.Controls.UIRenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.WrapLines">
            <summary>
            Computes the visual lines from the console text lines.
            </summary>
            <remarks>
            Text lines are split into several lines if they are larger than _numberOfColumns
            or if they contain '\n'.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.ComputeStartWrappedLine">
            <summary>
            Computes the index of the first visible line in _wrappedLines.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.Cut">
            <summary>
            Removes the current <see cref="P:DigitalRune.Game.UI.Controls.Console.Text"/> from the console and copies it to the clipboard.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.Copy">
            <summary>
            Copies the current <see cref="P:DigitalRune.Game.UI.Controls.Console.Text"/> to the clipboard.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Console.Paste">
            <summary>
            Pastes the contents of the clipboard into the current <see cref="P:DigitalRune.Game.UI.Controls.Console.Text"/>
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.Button">
            <summary>
            Represents a button control. 
            </summary>
            <example>
            The following examples shows how to create a button and handle the 
            <see cref="E:DigitalRune.Game.UI.Controls.ButtonBase.Click"/> event.
            <code lang="csharp">
            <![CDATA[
            var button = new Button
            {
              Content = new TextBlock { Text = "Click Me!" },
              Margin = new Vector4F(4),
              Padding = new Vector4F(6),
              HorizontalAlignment = HorizontalAlignment.Stretch,
            };
            
            // To show the button, add it to an existing content control or panel.
            panel.Children.Add(button);
            
            // To handle button clicks, simply add an event handler to the Click event.
            button.Click += OnButtonClicked;
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Button.IsCancelPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Button.IsCancel"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Button.IsCancel">
            <summary>
            Gets or sets a value that indicates whether a <see cref="T:DigitalRune.Game.UI.Controls.Button"/> is a Cancel button. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:DigitalRune.Game.UI.Controls.Button"/> is a Cancel button; otherwise, 
            <see langword="false"/>. The default is <see langword="false"/>.
            </value>
            <remarks>
            A user can activate the Cancel button by pressing the ESC key on the keyboard or the B or
            BACK button on the gamepad. 
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Button.IsDefaultPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Button.IsDefault"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Button.IsDefault">
            <summary>
            Gets or sets a value that indicates whether a <see cref="T:DigitalRune.Game.UI.Controls.Button"/> is the default button. 
            This is a game object property. 
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:DigitalRune.Game.UI.Controls.Button"/> is the default button; otherwise, 
            <see langword="false"/>. The default is <see langword="false"/>.
            </value>
            <remarks>
            A user can activate the default button by pressing the ENTER or SPACE key on the keyboard
            or the A or START button on the gamepad. 
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Button.IsRepeatButtonPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Button.IsRepeatButton"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Button.IsRepeatButton">
            <summary>
            Gets or sets a value indicating whether this instance is repeat button. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this instance is repeat button; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            A repeat button raises the <see cref="E:DigitalRune.Game.UI.Controls.ButtonBase.Click"/> event repeatedly from the time it
            is pressed until it is released. Repeat buttons automatically set the 
            <see cref="P:DigitalRune.Game.UI.Controls.ButtonBase.ClickMode"/> to <see cref="F:DigitalRune.Game.UI.Controls.ClickMode.Press"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.Button"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Button.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.ButtonBase">
            <summary>
            Implements the basic functionality common to button controls.
            </summary>
            <remarks>
            <para>
            Buttons can be pressed using the left mouse button, or the ENTER or SPACE keys on the keyboard
            or the A button on the gamepad (when the button is focused).
            </para>
            <para>
            <strong>Visual States:</strong> The <see cref="P:DigitalRune.Game.UI.Controls.ButtonBase.VisualState"/>s of this control are:
            "Disabled", "Default", "MouseOver", "Focused", "Pressed"
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ButtonBase.VisualState">
            <inheritdoc/>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ButtonBase.ClickModePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ButtonBase.ClickMode"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ButtonBase.ClickMode">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Game.UI.Controls.ClickMode"/>. 
            This is a game object property.
            </summary>
            <value>The <see cref="T:DigitalRune.Game.UI.Controls.ClickMode"/>.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ButtonBase.IsDownPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ButtonBase.IsDown"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ButtonBase.IsDown">
            <summary>
            Gets a value indicating whether this button is currently pressed down. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this button is currently pressed down; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ButtonBase.IsClickedPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ButtonBase.IsClicked"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ButtonBase.IsClicked">
            <summary>
            Gets (or sets) a value indicating whether this button was clicked in this frame. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this instance was clicked in this frame; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ButtonBase.ClickEventId">
            <summary> 
            The ID of the <see cref="E:DigitalRune.Game.UI.Controls.ButtonBase.Click"/> game object event.
            </summary>
        </member>
        <member name="E:DigitalRune.Game.UI.Controls.ButtonBase.Click">
            <summary>
            Occurs when the button is clicked (<see cref="P:DigitalRune.Game.UI.Controls.ButtonBase.IsClicked"/> changed to 
            <see langword="true"/>). This is a game object event.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ButtonBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.ButtonBase"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ButtonBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.ButtonBase"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ButtonBase.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ButtonBase.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.UI.Controls.ButtonBase.Click"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors: </strong>When overriding <see cref="M:DigitalRune.Game.UI.Controls.ButtonBase.OnClick(System.EventArgs)"/> in a 
            derived class, be sure to call the base class's <see cref="M:DigitalRune.Game.UI.Controls.ButtonBase.OnClick(System.EventArgs)"/> method so that 
            registered delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.CheckBox">
            <summary>
            Represents a check box.
            </summary>
            <example>
            <para>
            The following example shows how to create a check box.
            </para>
            <code lang="csharp">
            <![CDATA[
            var checkBox = new CheckBox
            {
              Margin = new Vector4F(4),
              Content = new TextBlock { Text = "Enable feature XYZ" },
              IsChecked = true
            };
            
            // To show the check box, add it to an existing content control or panel.
            panel.Children.Add(checkBox);
            ]]>
            </code>
            <para>
            Read the <see cref="P:DigitalRune.Game.UI.Controls.ToggleButton.IsChecked"/> property to determine the state of the check 
            box. You can also attach an event handler to this property to be notified when the state 
            changes. (The <see cref="E:DigitalRune.Game.GameProperty`1.Changed"/> event only fires when the value 
            effectively changes.)
            </para>
            <code lang="csharp">
            <![CDATA[
            GameProperty<bool> isCheckedProperty = checkBox.Properties.Get<bool>("IsChecked");
            isCheckedProperty.Changed += OnCheckBoxChanged;
            ]]>
            </code>
            <para>
            Alternatively, you can also handle the <see cref="E:DigitalRune.Game.UI.Controls.ButtonBase.Click"/> event. (Check boxes are
            derived from <see cref="T:DigitalRune.Game.UI.Controls.ToggleButton"/>.)
            </para>
            </example>
            <seealso cref="T:DigitalRune.Game.UI.Controls.RadioButton"/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.CheckBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.CheckBox"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.CheckBox.OnToggle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.ClickMode">
            <summary>
            Specifies when the <see cref="E:DigitalRune.Game.UI.Controls.ButtonBase.Click"/> event should be raised for a control. 
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ClickMode.Release">
            <summary>
            Specifies that the <see cref="E:DigitalRune.Game.UI.Controls.ButtonBase.Click"/> event should be raised when the button is
            pressed and released.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ClickMode.Press">
            <summary>
            Specifies that the <see cref="E:DigitalRune.Game.UI.Controls.ButtonBase.Click"/> event should be raised when the button is
            pressed.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.DropDown">
            <summary>
            Represents a popup that displays the <see cref="T:DigitalRune.Game.UI.Controls.DropDownItem"/>s of a 
            <see cref="T:DigitalRune.Game.UI.Controls.DropDownButton"/>.
            </summary>
            <example>
            The following example creates a drop down button containing several items.
            <code lang="csharp">
            <![CDATA[
            // Create a drop down button.
            var dropDown = new DropDownButton
            {
              HorizontalAlignment = HorizontalAlignment.Stretch,
              Margin = new Vector4F(4),
              MaxDropDownHeight = 250,
            };
            
            // Add a few random items.
            for (int i = 0; i < 20; i++)
              dropDown.Items.Add("DropDownItem " + i);
            
            // Select the first item in the list.
            dropDown.SelectedIndex = 0;
            
            // To show the drop down button, add it to an existing content control or panel.
            panel.Children.Add(dropDown);
            ]]>
            </code>
            Read the <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.SelectedIndex"/> property to find out which item is 
            currently selected. You can also attach an event handler to this property to be notified when 
            the selection changes.
            <code lang="csharp">
            <![CDATA[
            GameProperty<int> selectedIndexProperty = dropDown.Properties.Get<int>("SelectedIndex");
            selectedIndexProperty.Changed += OnSelectionChanged;
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.DropDown.Owner">
            <summary>
            Gets the <see cref="T:DigitalRune.Game.UI.Controls.DropDownButton"/> that owns this <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/>.
            </summary>
            <value>The <see cref="T:DigitalRune.Game.UI.Controls.DropDownButton"/> that owns this <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/>.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.DropDown.DropDownItemStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.DropDown.DropDownItemStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.DropDown.DropDownItemStyle">
            <summary>
            Gets or sets the style that is applied to <see cref="T:DigitalRune.Game.UI.Controls.DropDownItem"/>s. 
            This is a game object property.
            </summary>
            <value>
            The style that is applied to <see cref="T:DigitalRune.Game.UI.Controls.DropDownItem"/>s. 
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.DropDown.TitleTextBlockStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.DropDown.TitleTextBlockStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.DropDown.TitleTextBlockStyle">
            <summary>
            Gets or sets the style that is applied to the <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.Title"/>
            (only on Windows Phone 7). This is a game object property.
            </summary>
            <value>
            The style that is applied to the <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.Title"/>.
            Can be <see langword="null"/> or an empty string to hide the title.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDown.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDown.#ctor(DigitalRune.Game.UI.Controls.DropDownButton)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="owner"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDown.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDown.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDown.Open">
            <summary>
            Opens this <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/> (adds it to the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>).
            </summary>
            <exception cref="T:DigitalRune.Game.UI.UIException">
            <see cref="P:DigitalRune.Game.UI.Controls.DropDown.Owner"/> is not loaded. The owner must be loaded before the
            <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/> can be shown.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDown.Close">
            <summary>
            Closes this <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/> (removes it from the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>).
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.DropDownButton">
            <summary>
            Represents a drop down button. 
            </summary>
            <remarks>
            <para>
            The button displays a single item of a collection of <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.Items"/>. When the button is
            pressed, all <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.Items"/> are displayed in a <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/> that pops up and
            the user can select another item.
            </para>
            <para>
            The <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.Items"/> can be any objects; normally they are strings. To display the objects
            the method <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.CreateControlForItem"/> is called. Per default, the objects are 
            displayed with <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/>s, but <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.CreateControlForItem"/> can be 
            changed to another method that creates other controls (e.g. <see cref="T:DigitalRune.Game.UI.Controls.Image"/>s).
            </para>
            </remarks>
            <example>
            The following example creates a drop down button containing several items.
            <code lang="csharp">
            <![CDATA[
            // Create a drop down button.
            var dropDown = new DropDownButton
            {
              HorizontalAlignment = HorizontalAlignment.Stretch,
              Margin = new Vector4F(4),
              MaxDropDownHeight = 250,
            };
            
            // Add a few random items.
            for (int i = 0; i < 20; i++)
              dropDown.Items.Add("Item " + i);
            
            // Select the first item in the list.
            dropDown.SelectedIndex = 0;
            
            // To show the drop down button, add it to an existing content control or panel.
            panel.Children.Add(dropDown);
            ]]>
            </code>
            Read the <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.SelectedIndex"/> property to find out which item is currently selected. 
            You can also attach an event handler to this property to be notified when the selection 
            changes.
            <code lang="csharp">
            <![CDATA[
            GameProperty<int> selectedIndexProperty = dropDown.Properties.Get<int>("SelectedIndex");
            selectedIndexProperty.Changed += OnSelectionChanged;
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.DropDownButton.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.DropDownButton.CreateControlForItem">
            <summary>
            Gets or sets the method that creates <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>s for the <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.Items"/>.
            </summary>
            <value>
            The method that creates <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>s for the <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.Items"/>. If this 
            property is <see langword="null"/>, <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/>s are used to display the 
            <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.Items"/>. The default is <see langword="null"/>.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.DropDownButton.DropDownStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.DropDownStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.DropDownButton.DropDownStyle">
            <summary>
            Gets or sets the style that is applied to the <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/>. 
            This is a game object property.
            </summary>
            <value>
            The style that is applied to the <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/>. If the style is not a valid
            string, the <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/> is disabled.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.DropDownButton.SelectedIndexPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.SelectedIndex"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.DropDownButton.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item. 
            This is a game object property.
            </summary>
            <value>
            The index of the selected item; or -1 if no item is selected. 
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.DropDownButton.MaxDropDownHeightPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.MaxDropDownHeight"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.DropDownButton.MaxDropDownHeight">
            <summary>
            Gets or sets the maximal height of the <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/> in pixels. 
            This is a game object property.
            </summary>
            <value>
            The maximal height of the <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/> in pixels.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.DropDownButton.TitlePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.Title"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.DropDownButton.Title">
            <summary>
            Gets or sets the title that is displayed in the <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/> (only on Windows 
            Phone 7). This is a game object property.
            </summary>
            <value>
            The title that is displayed in the <see cref="T:DigitalRune.Game.UI.Controls.DropDown"/> (only on Windows Phone 7).
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDownButton.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.DropDownButton"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDownButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.DropDownButton"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDownButton.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDownButton.OnUnload">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDownButton.CreateControl(System.Object)">
            <summary>
            Creates a new control for the item. 
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDownButton.OnUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.DropDownItem">
            <summary>
            Represents an item of <see cref="T:DigitalRune.Game.UI.Controls.DropDownButton"/> control.
            </summary>
            <example>
            The following example creates a drop down button containing several items.
            <code lang="csharp">
            <![CDATA[
            // Create a drop down button.
            var dropDown = new DropDownButton
            {
              HorizontalAlignment = HorizontalAlignment.Stretch,
              Margin = new Vector4F(4),
              MaxDropDownHeight = 250,
            };
            
            // Add a few random items.
            for (int i = 0; i < 20; i++)
              dropDown.Items.Add("DropDownItem " + i);
            
            // Select the first item in the list.
            dropDown.SelectedIndex = 0;
            
            // To show the drop down button, add it to an existing content control or panel.
            panel.Children.Add(dropDown);
            ]]>
            </code>
            Read the <see cref="P:DigitalRune.Game.UI.Controls.DropDownButton.SelectedIndex"/> property to find out which item is 
            currently selected. You can also attach an event handler to this property to be notified when 
            the selection changes.
            <code lang="csharp">
            <![CDATA[
            GameProperty<int> selectedIndexProperty = dropDown.Properties.Get<int>("SelectedIndex");
            selectedIndexProperty.Changed += OnSelectionChanged;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDownItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.DropDownItem"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.DropDownItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.DropDownItem"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.RadioButton">
            <summary>
            Enables the user to select a single option from a of choices when paired with other 
            <see cref="T:DigitalRune.Game.UI.Controls.RadioButton"/> controls. 
            </summary>
            <remarks>
            Radio buttons can be grouped into different groups. Radio buttons belong together if they have
            the same parent and the same <see cref="P:DigitalRune.Game.UI.Controls.RadioButton.GroupName"/>.
            </remarks>
            <example>
            The following examples creates two groups of radio buttons. The radio buttons are surrounded
            by group boxes.
            <code lang="csharp">
            <![CDATA[
            // Group 123
            var radioButton1 = new RadioButton
            {
              Margin = new Vector4F(4, 8, 4, 4),
              Content = new TextBlock { Text = "Option 1" },
              IsChecked = true,
              GroupName = "Group 123"
            };
            
            var radioButton2 = new RadioButton
            {
              Margin = new Vector4F(4, 2, 4, 2),
              Content = new TextBlock { Text = "Option 2" },
              GroupName = "Group 123"
            };
            
            var radioButton3 = new RadioButton
            {
              Margin = new Vector4F(4, 2, 4, 4),
              Content = new TextBlock { Text = "Option 3" },
              GroupName = "Group 123"
            };
            
            var stackPanel = new StackPanel();
            stackPanel.Children.Add(radioButton1);
            stackPanel.Children.Add(radioButton2);
            stackPanel.Children.Add(radioButton3);
            
            var groupBox123 = new GroupBox
            {
              Title = "Options 1, 2, 3",
              HorizontalAlignment = HorizontalAlignment.Stretch,
              Margin = new Vector4F(4),
              Content = stackPanel
            };
            
            // Group ABC
            var radioButtonA = new RadioButton
            {
              Margin = new Vector4F(4, 8, 4, 4),
              Content = new TextBlock { Text = "Option A" },
              IsChecked = true,
              GroupName = "Group ABC"
            };
            
            var radioButtonB = new RadioButton
            {
              Margin = new Vector4F(4, 2, 4, 2),
              Content = new TextBlock { Text = "Option B" },
              GroupName = "Group ABC"
            };
            
            var radioButtonC = new RadioButton
            {
              Margin = new Vector4F(4, 2, 4, 4),
              Content = new TextBlock { Text = "Option C" },
              GroupName = "Group ABC"
            };
            
            stackPanel = new StackPanel();
            stackPanel.Children.Add(radioButtonA);
            stackPanel.Children.Add(radioButtonB);
            stackPanel.Children.Add(radioButtonC);
            
            var groupBoxABC = new GroupBox
            {
              Title = "Options A, B, C",
              HorizontalAlignment = HorizontalAlignment.Stretch,
              Margin = new Vector4F(4),
              Content = stackPanel
            };
            
            // To show the groups, add them to an existing panel.
            panel.Children.Add(groupBox123);
            panel.Children.Add(groupBoxABC);
            ]]>
            </code>
            </example>
            <seealso cref="T:DigitalRune.Game.UI.Controls.CheckBox"/>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.RadioButton.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>The name of the group.</value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.RadioButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.RadioButton"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.RadioButton.OnToggle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.ToggleButton">
            <summary>
            Base class for controls that can switch states, such as <see cref="T:DigitalRune.Game.UI.Controls.CheckBox"/> or 
            <see cref="T:DigitalRune.Game.UI.Controls.RadioButton"/>.
            </summary>
            <remarks>
            <strong>Visual States:</strong> The <see cref="P:DigitalRune.Game.UI.Controls.ToggleButton.VisualState"/>s of this control are:
            "Checked-Disabled", "Unchecked-Disabled", "Checked-Default", "Unchecked-Default", 
            "Checked-MouseOver", "Unchecked-MouseOver", "Checked-Focused", "Unchecked-Focused", 
            "Checked-Pressed", "Unchecked-Pressed"
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ToggleButton.VisualState">
            <inheritdoc/>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ToggleButton.IsCheckedPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ToggleButton.IsChecked"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ToggleButton.IsChecked">
            <summary>
            Gets or sets a value indicating whether this toggle button is checked. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this toggle button is checked; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ToggleButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.ToggleButton"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ToggleButton.OnClick(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ToggleButton.OnToggle">
            <summary>
            Called when the toggle button is clicked.
            </summary>
            <remarks>
            This method must be implemented by derived classes and is responsible for changing the
            <see cref="P:DigitalRune.Game.UI.Controls.ToggleButton.IsChecked"/> property.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.ContentControl">
            <summary>
            Represents a control with another <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> as content.
            </summary>
            <remarks>
            The <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/> is another <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> that is drawn inside the 
            <see cref="T:DigitalRune.Game.UI.Controls.ContentControl"/>. The <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Padding"/> is applied to the bounds of
            the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ContentControl.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ContentControl.ContentBounds">
            <summary>
            Gets the content bounds that define where the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/> is drawn.
            </summary>
            <value>The content bounds.</value>
            <remarks>
            Per default, the content bounds are the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualBounds"/> of this control 
            minus the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Padding"/>. Derived classes can define a different placement 
            strategy by overriding this property.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ContentControl.ContentStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.ContentStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ContentControl.ContentStyle">
            <summary>
            Gets or sets the style that is applied to the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/>. 
            This is a game object property.
            </summary>
            <value>
            The style that is applied to the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/>. This value can be 
            <see langword="null"/> in which case the style of the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/> is not changed.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ContentControl.ClipContentPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.ClipContent"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ContentControl.ClipContent">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/> is clipped to the
            <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.ContentBounds"/> or whether the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/> can draw outside the
            <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.ContentBounds"/>. This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/> is clipped to the 
            <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.ContentBounds"/>; otherwise, <see langword="false"/> if the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/>
            can draw outside the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.ContentBounds"/>. The default is <see langword="false"/>
            because clipping costs performance and most games use a fixed layout where clipping is not
            needed.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.ContentControl"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ContentControl.OnTemplateChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ContentControl.OnContentChanged(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Called when the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/> was exchanged.
            </summary>
            <param name="newContent">The new content.</param>
            <param name="oldContent">The old content.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ContentControl.HitTest(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ContentControl.OnMeasure(DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ContentControl.OnArrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.GroupBox">
            <summary>
            Represents a control that creates a container that has a border and a header for other user 
            interface (UI) content.
            </summary>
            <example>
            The following examples creates two groups of radio buttons. The radio buttons are surrounded
            by group boxes.
            <code lang="csharp">
            <![CDATA[
            // Group 123
            var radioButton1 = new RadioButton
            {
              Margin = new Vector4F(4, 8, 4, 4),
              Content = new TextBlock { Text = "Option 1" },
              IsChecked = true,
              GroupName = "Group 123"
            };
            
            var radioButton2 = new RadioButton
            {
              Margin = new Vector4F(4, 2, 4, 2),
              Content = new TextBlock { Text = "Option 2" },
              GroupName = "Group 123"
            };
            
            var radioButton3 = new RadioButton
            {
              Margin = new Vector4F(4, 2, 4, 4),
              Content = new TextBlock { Text = "Option 3" },
              GroupName = "Group 123"
            };
            
            var stackPanel = new StackPanel();
            stackPanel.Children.Add(radioButton1);
            stackPanel.Children.Add(radioButton2);
            stackPanel.Children.Add(radioButton3);
            
            var groupBox123 = new GroupBox
            {
              Title = "Options 1, 2, 3",
              HorizontalAlignment = HorizontalAlignment.Stretch,
              Margin = new Vector4F(4),
              Content = stackPanel
            };
            
            // Group ABC
            var radioButtonA = new RadioButton
            {
              Margin = new Vector4F(4, 8, 4, 4),
              Content = new TextBlock { Text = "Option A" },
              IsChecked = true,
              GroupName = "Group ABC"
            };
            
            var radioButtonB = new RadioButton
            {
              Margin = new Vector4F(4, 2, 4, 2),
              Content = new TextBlock { Text = "Option B" },
              GroupName = "Group ABC"
            };
            
            var radioButtonC = new RadioButton
            {
              Margin = new Vector4F(4, 2, 4, 4),
              Content = new TextBlock { Text = "Option C" },
              GroupName = "Group ABC"
            };
            
            stackPanel = new StackPanel();
            stackPanel.Children.Add(radioButtonA);
            stackPanel.Children.Add(radioButtonB);
            stackPanel.Children.Add(radioButtonC);
            
            var groupBoxABC = new GroupBox
            {
              Title = "Options A, B, C",
              HorizontalAlignment = HorizontalAlignment.Stretch,
              Margin = new Vector4F(4),
              Content = stackPanel
            };
            
            // To show the groups, add them to an existing panel.
            panel.Children.Add(groupBox123);
            panel.Children.Add(groupBoxABC);
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.GroupBox.TitleTextBlockStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.GroupBox.TitleTextBlockStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.GroupBox.TitleTextBlockStyle">
            <summary>
            Gets or sets the style that is applied to the <see cref="P:DigitalRune.Game.UI.Controls.GroupBox.Title"/>. 
            This is a game object property.
            </summary>
            <value>
            The style that is applied to the <see cref="P:DigitalRune.Game.UI.Controls.GroupBox.Title"/>. Can be <see langword="null"/> or an 
            empty string to hide the title.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.GroupBox.TitlePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.GroupBox.Title"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.GroupBox.Title">
            <summary>
            Gets or sets the title. 
            This is a game object property.
            </summary>
            <value>The title.</value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.GroupBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.GroupBox"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.GroupBox.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.GroupBox.OnUnload">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.ScrollBarVisibility">
            <summary>
            Specifies the visibility of a <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/> for scrollable content. 
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollBarVisibility.Disabled">
            <summary>
            A scroll bar does not appear even when the <see cref="T:DigitalRune.Game.UI.Controls.ScrollViewer"/> cannot display all of
            the content. The content size is restricted by the size of the <see cref="T:DigitalRune.Game.UI.Controls.ScrollViewer"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollBarVisibility.Auto">
            <summary>
            A scroll bar appears when the <see cref="T:DigitalRune.Game.UI.Controls.ScrollViewer"/> cannot display all of the content. 
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollBarVisibility.Hidden">
            <summary>
            A scroll bar does not appear even when the <see cref="T:DigitalRune.Game.UI.Controls.ScrollViewer"/> cannot display all of 
            the content. The content size is not limited by the size of the <see cref="T:DigitalRune.Game.UI.Controls.ScrollViewer"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollBarVisibility.Visible">
            <summary>
            A scroll bar always appears. 
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.ScrollViewer">
            <summary>
            Represents a scrollable area that can contain other visible controls. 
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Game.UI.Controls.ScrollViewer"/> displays a part of the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/>,
            which can be larger than the size of the <see cref="T:DigitalRune.Game.UI.Controls.ScrollViewer"/>.
            </para>
            <para>
            The visible part can be controlled using two scroll bars or the mouse wheel. When scrolling
            with the mouse wheel, the scroll speed is proportional to <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.SmallChange"/>. 
            </para>
            <para>
            <strong>Phone and Tablets:</strong> On phone and tablets the <see cref="T:DigitalRune.Game.UI.Controls.ScrollViewer"/> can be
            controlled with touch input (only vertical scrolling). A flick gesture creates a scroll
            velocity that is slowly damped. The vertical scroll bar is transparent by default and becomes
            visible during scrolling. The dynamic scroll behavior can be configured using 
            <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.MinScrollVelocity"/>, <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.MaxScrollVelocity"/>, <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.ScrollDamping"/>
            and <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.FlickScrollVelocityFactor"/>, and is the same for all 
            <see cref="T:DigitalRune.Game.UI.Controls.ScrollViewer"/> instances.
            </para>
            <para>
            The user can push the content beyond the usual limits by dragging the content with the finger
            or by scrolling really fast. The content automatically bounces back when the user is not
            touching the control. This effect is simulated with a "damped spring". The properties
            <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.SpringConstant"/>, <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.SpringDamping"/> and <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.SpringLength"/>
            control the effect. The visual effect is achieved by applying a scale transform to the
            <see cref="N:DigitalRune.Game.UI.Content"/> (see <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderScale"/>). (Any existing render
            transform will be overwritten!)
            </para>
            </remarks>
            <example>
            The following example shows to display a large image inside a scroll viewer.
            <code lang="csharp">
            <![CDATA[
            // Use an image control to display a texture.
            var image = new Image
            {
              Texture = content.Load<Texture2D>("Image_1024x1024")
            };
            
            // Use a scroll viewer to show a region of the texture.
            var scrollViewer = new ScrollViewer
            {
              Margin = new Vector4F(4),
              Width = 200
              Height = 200,
            };
            scrollViewer.Content = image;
            
            // To show the scroll viewer, add it to an existing content control or panel.
            panel.Children.Add(scrollViewer);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.MinScrollVelocity">
            <summary>
            Phone/tablet only: Gets or sets the minimal scroll velocity that determines when scrolling
            is stopped.
            </summary>
            <value>
            The minimal scroll velocity that determines when scrolling is stopped. The default is 100.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.MaxScrollVelocity">
            <summary>
            Phone/tablet only: Gets or sets the maximal allowed scroll velocity. (Higher scrolling
            velocities are clamped to this value.)
            </summary>
            <value>
            The maximal allowed scroll velocity. The default is 2400.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.ScrollDamping">
            <summary>
            Phone/tablet only: Gets or sets the damping factor with which the scrolling is damped.
            </summary>
            <value>
            The damping factor with which the scrolling is damped. The default value is 1.5. Higher
            values increase damping.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.SpringConstant">
            <summary>
            Phone/tablet only: Gets or sets the spring constant which is applied when the user drags
            the content beyond the limit.
            </summary>
            <value>
            The spring constant which is applied when the user drags the content beyond the limit. The 
            default value is 180.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.SpringDamping">
            <summary>
            Phone/tablet only: Gets or sets the damping which is applied when the user drags the content
            beyond the limit.
            </summary>
            <value>
            The damping which is applied when the user drags the content beyond the limit. The default
            value is 12. Higher values increase damping.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.SpringLength">
            <summary>
            Phone/tablet only: Gets or sets the max spring length which defines how far the user can
            drag the content beyond the limit.
            </summary>
            <value>
            The max spring length which defines how far the user can drag the content beyond the limit.
            The default value is 100.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.FlickScrollVelocityFactor">
            <summary>
            Phone/tablet only: Gets or sets the factor that defines the scroll velocity after a flick
            gesture.
            </summary>
            <value>
            The factor that defines the scroll velocity after a flick gesture. The default is 0.04.
            Use higher values to scroll faster after a flick gesture.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.ScrollThreshold">
            <summary>
            Gets or sets the vertical scroll threshold that the finger movement has to exceed 
            to start a scroll action.
            </summary>
            <value>The scroll threshold in pixels.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.ExtentWidth">
            <summary>
            Gets the extent width which is equal to the desired width of the 
            <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/>.
            </summary>
            <value>
            The extent width which is equal to the desired width of the 
            <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.ExtentHeight">
            <summary>
            Gets the extent height which is equal to the desired height of the 
            <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/>.
            </summary>
            <value>
            The extent height which is equal to the desired height of the 
            <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.ViewportWidth">
            <summary>
            Gets the width of the viewport which defines the visual part of the 
            <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/>.
            </summary>
            <value>
            The width of the viewport which defines the visual part of the 
            <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.ViewportHeight">
            <summary>
            Gets the height of the viewport which defines the visual part of the 
            <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/>.
            </summary>
            <value>
            The height of the viewport which defines the visual part of the 
            <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.ContentBounds">
            <inheritdoc/>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollViewer.HorizontalScrollBarVisibilityPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.HorizontalScrollBarVisibility"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Game.UI.Controls.ScrollBarVisibility"/> of the horizontal 
            <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>. This is a game object property.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Game.UI.Controls.ScrollBarVisibility"/> of the horizontal <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollViewer.VerticalScrollBarVisibilityPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.VerticalScrollBarVisibility"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.VerticalScrollBarVisibility">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Game.UI.Controls.ScrollBarVisibility"/> of the vertical <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>. 
            This is a game object property.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Game.UI.Controls.ScrollBarVisibility"/> of the vertical <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollViewer.HorizontalOffsetPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.HorizontalOffset"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset (= the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> of the 
            horizontal <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>). This is a game object property.
            </summary>
            <value>
            The horizontal offset (= the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> of the horizontal 
            <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>).
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollViewer.VerticalOffsetPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.VerticalOffset"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.VerticalOffset">
            <summary>
            Gets or sets the vertical offset (= the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> of the vertical 
            <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>). This is a game object property.
            </summary>
            <value>
            The vertical offset (= the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> of the vertical 
            <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>).
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollViewer.HorizontalScrollBarStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.HorizontalScrollBarStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.HorizontalScrollBarStyle">
            <summary>
            Gets or sets the style that is applied to the horizontal <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>. 
            This is a game object property.
            </summary>
            <value>
            The style that is applied to the horizontal <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>. Can be 
            <see langword="null"/> or an empty string to hide the scroll bar.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollViewer.VerticalScrollBarStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.VerticalScrollBarStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollViewer.VerticalScrollBarStyle">
            <summary>
            Gets or sets the style that is applied to the vertical <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>. 
            This is a game object property.
            </summary>
            <value>
            The style that is applied to the vertical <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>. Can be 
            <see langword="null"/> or an empty string to hide the title.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.ScrollViewer"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollViewer.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollViewer.OnUnload">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollViewer.OnMeasure(DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollViewer.OnArrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollViewer.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollViewer.OnUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollViewer.BringIntoView(DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Changes <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.HorizontalOffset"/> and <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.VerticalOffset"/> such that the
            <paramref name="control"/> is visible in the viewport.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollViewer.BringIntoView(DigitalRune.Game.UI.RectangleF)">
            <summary>
            Changes <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.HorizontalOffset"/> and <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.VerticalOffset"/> such that the given
            rectangle (in screen coordinates) is scrolled into the viewport.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollViewer.BringIntoViewHorizontal(DigitalRune.Game.UI.RectangleF)">
            <summary>
            Changes <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.HorizontalOffset"/> such that the given rectangle (in screen coordinates)
            is scrolled into the viewport.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollViewer.BringIntoViewVertical(DigitalRune.Game.UI.RectangleF)">
            <summary>
            Changes <see cref="P:DigitalRune.Game.UI.Controls.ScrollViewer.VerticalOffset"/> such that the given rectangle (in screen coordinates)
            is scrolled into the viewport.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.TabControl">
            <summary>
            Represents a control that contains multiple items that share the same space on the screen. 
            </summary>
            <remarks>
            Tabs can be switched with the gamepad shoulder buttons or the mouse.
            </remarks>
            <example>
            The following example creates a tab controls containing 3 tab items:
            <code lang="csharp">
            <![CDATA[
            var tabControl = new TabControl
            {
              HorizontalAlignment = HorizontalAlignment.Stretch,
              Margin = new Vector4F(4)
            };
            
            // Add 3 pages to to the tab control.
            var tabItem0 = new TabItem
            {
              TabPage = new TextBlock { Margin = new Vector4F(4), Text = "Page 0" },
              Content = new TextBlock { Text = "Content of page 0" }
            };
            var tabItem1 = new TabItem
            {
              TabPage = new TextBlock { Margin = new Vector4F(4), Text = "Page 1" },
              Content = new TextBlock { Text = "Content of page 1" }
            };
            var tabItem2 = new TabItem
            {
              TabPage = new TextBlock { Margin = new Vector4F(4), Text = "Page 2" },
              Content = new TextBlock { Text = "Content of page 2" }
            };
            tabControl.Items.Add(tabItem0);
            tabControl.Items.Add(tabItem1);
            tabControl.Items.Add(tabItem2);
            
            // Select the second page.
            tabControl.SelectedIndex = 1;
            
            // To show the tab control, add it to an existing content control or panel.
            panel.Children.Add(tabControl);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TabControl.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TabControl.SelectedIndexPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TabControl.SelectedIndex"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TabControl.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item. 
            This is a game object property.
            </summary>
            <value>
            The index of the selected item; or -1 if no item is selected. 
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TabControl.TabItemPanelStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TabControl.TabItemPanelStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TabControl.TabItemPanelStyle">
            <summary>
            Gets or sets the style that is used for the panel that displays the selected item. 
            This is a game object property.
            </summary>
            <value>
            The style that is used for the panel that displays the selected item. If this property is 
            <see langword="null"/> or an empty string the tab items are hidden.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TabControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.TabControl"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TabControl.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TabControl.OnUnload">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TabControl.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TabControl.Select(System.Int32)">
            <overloads>
            <summary>
            Selects a <see cref="T:DigitalRune.Game.UI.Controls.TabItem"/>.
            </summary>
            </overloads>
            
            <summary>
            Selects a <see cref="T:DigitalRune.Game.UI.Controls.TabItem"/> by index.
            </summary>
            <param name="index">The index of the item in the <see cref="P:DigitalRune.Game.UI.Controls.TabControl.Items"/> collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TabControl.Select(DigitalRune.Game.UI.Controls.TabItem)">
            <summary>
            Selects the specified <see cref="T:DigitalRune.Game.UI.Controls.TabItem"/>.
            </summary>
            <param name="tabItem">
            The <see cref="T:DigitalRune.Game.UI.Controls.TabItem"/> (must be one of the <see cref="P:DigitalRune.Game.UI.Controls.TabControl.Items"/>).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="tabItem"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="tabItem"/> is not an item of this <see cref="T:DigitalRune.Game.UI.Controls.TabControl"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TabControl.UpdateContent">
            <summary>
            Updates the content of the <see cref="T:DigitalRune.Game.UI.Controls.TabControl"/>.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.TabItem">
            <summary>
            Represents a selectable item inside a <see cref="P:DigitalRune.Game.UI.Controls.TabItem.TabControl"/>. 
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Game.UI.Controls.TabItem"/> is the clickable tab that the user clicks to switch to this tab.
            If this <see cref="T:DigitalRune.Game.UI.Controls.TabItem"/> is selected, the <see cref="P:DigitalRune.Game.UI.Controls.TabItem.TabPage"/> of this control is
            displayed in the <see cref="P:DigitalRune.Game.UI.Controls.TabItem.TabControl"/>.
            </para>
            <para>
            <strong>Visual States:</strong> The <see cref="P:DigitalRune.Game.UI.Controls.TabItem.VisualState"/>s of this control are:
            "Disabled", "Default", "MouseOver", "Selected"
            </para>
            </remarks>
            <example>
            The following example creates a tab controls containing 3 tab items:
            <code lang="csharp">
            <![CDATA[
            var tabControl = new TabControl
            {
              HorizontalAlignment = HorizontalAlignment.Stretch,
              Margin = new Vector4F(4)
            };
            
            // Add 3 pages to to the tab control.
            var tabItem0 = new TabItem
            {
              TabPage = new TextBlock { Margin = new Vector4F(4), Text = "Page 0" },
              Content = new TextBlock { Text = "Content of page 0" }
            };
            var tabItem1 = new TabItem
            {
              TabPage = new TextBlock { Margin = new Vector4F(4), Text = "Page 1" },
              Content = new TextBlock { Text = "Content of page 1" }
            };
            var tabItem2 = new TabItem
            {
              TabPage = new TextBlock { Margin = new Vector4F(4), Text = "Page 2" },
              Content = new TextBlock { Text = "Content of page 2" }
            };
            tabControl.Items.Add(tabItem0);
            tabControl.Items.Add(tabItem1);
            tabControl.Items.Add(tabItem2);
            
            // Select the second page.
            tabControl.SelectedIndex = 1;
            
            // To show the tab control, add it to an existing content control or panel.
            panel.Children.Add(tabControl);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TabItem.TabPage">
            <summary>
            Gets or sets the control that should be displayed as <see cref="P:DigitalRune.Game.UI.Controls.TabItem.TabControl"/> content.
            </summary>
            <value>The control that should be displayed as <see cref="P:DigitalRune.Game.UI.Controls.TabItem.TabControl"/> content.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TabItem.TabControl">
            <summary>
            Gets the <see cref="P:DigitalRune.Game.UI.Controls.TabItem.TabControl"/>.
            </summary>
            <value>The <see cref="P:DigitalRune.Game.UI.Controls.TabItem.TabControl"/>.</value>
            <remarks>
            This property is automatically set when the <see cref="T:DigitalRune.Game.UI.Controls.TabItem"/> is added to the 
            <see cref="P:DigitalRune.Game.UI.Controls.TabControl.Items"/> of a <see cref="T:DigitalRune.Game.UI.Controls.TabControl"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TabItem.VisualState">
            <inheritdoc/>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TabItem.IsSelectedPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TabItem.IsSelected"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TabItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Game.UI.Controls.TabItem"/> is selected in the
            <see cref="P:DigitalRune.Game.UI.Controls.TabItem.TabControl"/>. This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:DigitalRune.Game.UI.Controls.TabItem"/> is selected in the 
            <see cref="P:DigitalRune.Game.UI.Controls.TabItem.TabControl"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TabItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.TabItem"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TabItem.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.Window">
            <summary>
            Provides the ability to create, configure, show, and manage the lifetime of windows and 
            dialog boxes.
            </summary>
            <remarks>
            <para>
            A window is <see cref="T:DigitalRune.Game.UI.Controls.ContentControl"/>. The <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/> is usually
            a <see cref="T:DigitalRune.Game.UI.Controls.Panel"/>. Besides the <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/> the window contains an
            <see cref="P:DigitalRune.Game.UI.Controls.Window.Icon"/>, a <see cref="P:DigitalRune.Game.UI.Controls.Window.Title"/> and a Close button.
            </para>
            <para>
            The window can be dragged with the mouse if <see cref="P:DigitalRune.Game.UI.Controls.Window.CanDrag"/> is <see langword="true"/>. A
            dragging operation starts when the user clicks any part of the window (except over nested
            controls). The window can be resized with the mouse if <see cref="P:DigitalRune.Game.UI.Controls.Window.CanResize"/> is 
            <see langword="true"/>. A resize operation starts when the user clicks the border of the
            window. <see cref="P:DigitalRune.Game.UI.Controls.Window.ResizeBorder"/> defines the size of the border where resize operations can
            start. For windows that can be dragged or resized, use only top/left for the 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VerticalAlignment"/> and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.HorizontalAlignment"/>.
            </para>
            <para>
            <strong>Visual States:</strong> The <see cref="P:DigitalRune.Game.UI.Controls.Window.VisualState"/>s of this control are:
            "Disabled", "Default", "Active"
            </para>
            </remarks>
            <example>
            The following example shows how to create a simple message box.
            <code lang="csharp">
            <![CDATA[
            private void ShowMessageBox(UIScreen screen, string title, string message)
            {
              // ----- Create the message box.
              var text = new TextBlock
              {
                Text = message,
                Margin = new Vector4F(4),
                HorizontalAlignment = HorizontalAlignment.Center,
              };
            
              var button = new Button
              {
                Content = new TextBlock { Text = "Ok" },
                IsCancel = true,    // Cancel buttons are clicked when the user presses ESC (or BACK or B on the gamepad).
                IsDefault = true,   // Default buttons are clicked when the user presses ENTER or SPACE (or START or A on the gamepad).
                Margin = new Vector4F(4),
                Width = 60,
                HorizontalAlignment = HorizontalAlignment.Center,
              };
            
              var stackPanel = new StackPanel { Margin = new Vector4F(4) };
              stackPanel.Children.Add(text);
              stackPanel.Children.Add(button);
              
              var window = new Window
              {
                CanResize = false,
                IsModal = true,   // Modal dialogs consume all input until the window is closed.
                Content = stackPanel,
                MinHeight = 0,
                Title = title,
              };
            
              button.Click += (s, e) => window.Close();
            
              // ----- Show the window in the center of the screen.
              // First, we need to open the window. 
              window.Show(screen);
            
              // The window is now part of the visual tree of controls and can be measured. (The 
              // window does not have a fixed size. Window.Width and Window.Height are NaN. The 
              // size is calculated automatically depending on its content.)
              window.Measure(new Vector2F(float.PositiveInfinity));
              
              // Measure() computes DesiredWidth and DesiredHeight. With this info we can center the 
              // window on the screen.
              window.X = screen.ActualWidth / 2 - window.DesiredWidth / 2;
              window.Y = screen.ActualHeight / 2 - window.DesiredHeight / 2;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.Owner">
            <summary>
            Gets the owner of this window that was specified in <see cref="M:DigitalRune.Game.UI.Controls.Window.Show(DigitalRune.Game.UI.Controls.UIControl)"/> (typically a 
            <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>).
            </summary>
            <value>
            The owner of this window that was specified in <see cref="M:DigitalRune.Game.UI.Controls.Window.Show(DigitalRune.Game.UI.Controls.UIControl)"/> (typically a 
            <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>).
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.VisualState">
            <inheritdoc/>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.CanDragPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Window.CanDrag"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.CanDrag">
            <summary>
            Gets or sets a value indicating whether this window can dragged with the mouse. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this window can dragged with the mouse; otherwise, 
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.CanResizePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Window.CanResize"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.CanResize">
            <summary>
            Gets or sets a value indicating whether this window can be resized with the mouse. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this window can be resized with the mouse; otherwise, 
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            Note: Resizing should be disabled if a render transformation is permanently applied to the 
            window.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.ResizeBorderPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Window.ResizeBorder"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.ResizeBorder">
            <summary>
            Gets or sets the dimensions of the window border where resize operations can start. 
            This is a game object property.
            </summary>
            <value>
            The dimensions of the window border where resize operations can start. The default value
            is (4, 4, 4, 4).
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.DialogResultPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Window.DialogResult"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.DialogResult">
            <summary>
            Gets or sets the dialog result. 
            This is a game object property.
            </summary>
            <value>The dialog result.</value>
            <remarks>
            <para>
            This property is set to <see langword="null"/> when <see cref="M:DigitalRune.Game.UI.Controls.Window.Show(DigitalRune.Game.UI.Controls.UIControl)"/> is called. Otherwise
            this property is not changed automatically. It is typically expected that OK buttons set
            this property to <see langword="true"/> and Cancel buttons set this property to 
            <see langword="false"/>.
            </para>
            <para>
            <strong>Special notes for Windows Universal (UWP):</strong> <br/>
            Usually, the type of this property is a nullable Boolean. In UWP nullable game object
            properties cannot be used because of a bug in .NET Native. Therefore, the type of this
            property is not nullable in the UWP build. A possible workaround is to use a different
            property for the dialog result, e.g. a property that uses returns an integer or an
            enumeration.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.HideOnClosePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Window.HideOnClose"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.HideOnClose">
            <summary>
            Gets or sets a value indicating whether a this window is made in visible or totally
            removed from the control tree when the window is closed. This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if <see cref="M:DigitalRune.Game.UI.Controls.Window.Close"/> hides this window by setting
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsVisible"/> to <see langword="false"/>; otherwise, 
            <see langword="false"/> if <see cref="M:DigitalRune.Game.UI.Controls.Window.Close"/> detaches the window from the 
            <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.IsActivePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Window.IsActive"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.IsActive">
            <summary>
            Gets a value indicating whether this window is the currently active window. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this window is the currently active window; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            Of all visible windows, only one window can be active. If <see cref="M:DigitalRune.Game.UI.Controls.Window.Activate"/> is called 
            the window is made active and all other windows are made inactive. Do not change 
            <see cref="P:DigitalRune.Game.UI.Controls.Window.IsActive"/> directly, use <see cref="M:DigitalRune.Game.UI.Controls.Window.Activate"/> instead.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.IsModalPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Window.IsModal"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.IsModal">
            <summary>
            Gets or sets a value indicating whether this window is a modal dialog. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this window is a modal dialog; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            A modal window blocks all input from windows that are behind the modal window. The user must
            close the modal window before he/she can interact with the other windows. The default value 
            is <see langword="false"/>.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.IconStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Window.IconStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.IconStyle">
            <summary>
            Gets or sets the style that is applied to the <see cref="T:DigitalRune.Game.UI.Controls.Image"/> control that draws the 
            <see cref="P:DigitalRune.Game.UI.Controls.Window.Icon"/>. This is a game object property.
            </summary>
            <value>
            The style that is applied to the <see cref="T:DigitalRune.Game.UI.Controls.Image"/> control that draws the 
            <see cref="P:DigitalRune.Game.UI.Controls.Window.Icon"/>. Can be <see langword="null"/> or an empty string to hide the icon. The 
            default value is "Icon".
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.IconPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Window.Icon"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.Icon">
            <summary>
            Gets or sets the texture that contains the window icon. 
            This is a game object property.
            </summary>
            <value>
            The texture that contains the window icon. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.IconSourceRectanglePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Window.IconSourceRectangle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.IconSourceRectangle">
            <summary>
            Gets or sets the region of the <see cref="P:DigitalRune.Game.UI.Controls.Window.Icon"/> texture that contains the icon. 
            This is a game object property.
            </summary>
            <value>
            The region of the <see cref="P:DigitalRune.Game.UI.Controls.Window.Icon"/> texture that contains the icon. Can be 
            <see langword="null"/> if the whole <see cref="P:DigitalRune.Game.UI.Controls.Window.Icon"/> texture should be drawn. 
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            <para>
            <strong>Special notes for Windows Universal (UWP):</strong> <br/>
            Usually, the type of this property is a nullable rectangle. In UWP nullable game object
            properties cannot be used because of a bug in .NET Native. Therefore, the type of this
            property is not nullable in the UWP build. Use an <see cref="P:Microsoft.Xna.Framework.Rectangle.Empty"/> rectangle if
            the whole texture should be displayed.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.TitleTextBlockStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Window.TitleTextBlockStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.TitleTextBlockStyle">
            <summary>
            Gets or sets the style that is applied to the <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> that draws the window 
            <see cref="P:DigitalRune.Game.UI.Controls.Window.Title"/>. This is a game object property.
            </summary>
            <value>
            The style that is applied to the <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> that draws the window 
            <see cref="P:DigitalRune.Game.UI.Controls.Window.Title"/>. Can be <see langword="null"/> or an empty string to hide the title.
            The default value is "TitleTextBlock".
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.TitlePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Window.Title"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.Title">
            <summary>
            Gets or sets the window title that is visible in the caption bar. 
            This is a game object property.
            </summary>
            <value>
            The window title that is visible in the caption bar. The default value is "Unnamed".
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.CloseButtonStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Window.CloseButtonStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Window.CloseButtonStyle">
            <summary>
            Gets or sets the style that is applied to the Close button. 
            This is a game object property.
            </summary>
            <value>
            The style that is applied to the Close button. Set this property to <see langword="null"/> 
            or an empty string to remove the Close button. The default value is "CloseButton".
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.ClosingEventId">
            <summary> 
            The ID of the <see cref="E:DigitalRune.Game.UI.Controls.Window.Closing"/> game object event.
            </summary>
        </member>
        <member name="E:DigitalRune.Game.UI.Controls.Window.Closing">
            <summary>
            Occurs when the window is closing. Allows to cancel the closing operation. 
            This is a game object event.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Window.ClosedEventId">
            <summary> 
            The ID of the <see cref="E:DigitalRune.Game.UI.Controls.Window.Closed"/> game object event.
            </summary>
        </member>
        <member name="E:DigitalRune.Game.UI.Controls.Window.Closed">
            <summary>
            Occurs when the window was closed using the <see cref="M:DigitalRune.Game.UI.Controls.Window.Close"/> method. 
            This is a game object event.
            </summary>
            <remarks>
            Depending on <see cref="P:DigitalRune.Game.UI.Controls.Window.HideOnClose"/> "closed" means either removed from the 
            <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/> or only hidden (<see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsVisible"/> is 
            <see langword="false"/>). This event is only called if the window is closed using the 
            <see cref="M:DigitalRune.Game.UI.Controls.Window.Close"/> method.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Window.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.Window"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Window.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.Window"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Window.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Window.OnUnload">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Window.Activate">
            <summary>
            Activates this window (and deactivates all other windows).
            </summary>
            <returns>
            <see langword="true"/> if this window was successfully activated; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            Activating also brings the window to the front.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Window.Show(DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Opens a window and returns without waiting for the newly opened window to close.
            </summary>
            <param name="owner">
            The owner of this window. If this window is closed, the focus moves back to the owner. Must
            not be <see langword="null"/>.
            </param>
            <remarks>
            The window is added to the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/> of the <paramref name="owner"/> 
            (unless it was already added to a screen) and activated (see <see cref="M:DigitalRune.Game.UI.Controls.Window.Activate"/>).
            <see cref="P:DigitalRune.Game.UI.Controls.Window.DialogResult"/> is reset to <see langword="null"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="owner"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="owner"/> is not loaded. The owner needs to be a visible control.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Window.Close">
            <summary>
            Closes this window.
            </summary>
            <remarks>
            This method raises the <see cref="E:DigitalRune.Game.UI.Controls.Window.Closing"/> and <see cref="E:DigitalRune.Game.UI.Controls.Window.Closed"/> events. The close
            operation can be canceled in <see cref="E:DigitalRune.Game.UI.Controls.Window.Closing"/>. If <see cref="P:DigitalRune.Game.UI.Controls.Window.HideOnClose"/> is 
            <see langword="true"/>, the window will only be hidden (<see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsVisible"/>
            is set to <see langword="false"/>). If <see cref="P:DigitalRune.Game.UI.Controls.Window.HideOnClose"/> is <see langword="false"/>
            the window is removed from the control tree.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Window.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Window.GetWindow(DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Gets the window that contains the given <paramref name="control"/>.
            </summary>
            <param name="control">The control.</param>
            <returns>
            The window that contains the <paramref name="control"/>, or <see langword="null"/> if
            the control is not part of a window (controls can be direct children of the screen, no 
            intermediate window is required).
            </returns>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.Image">
            <summary>
            Represents a control that displays an image.
            </summary>
            <remarks>
            The <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Foreground"/> color can be used to tint the image. 
            (The default value is <see cref="P:Microsoft.Xna.Framework.Color.White"/>.)
            </remarks>
            <example>
            The following examples shows how to create a button containing an icon and a text label.
            <code lang="csharp">
            <![CDATA[
            // Create a horizontal stack panel containing an icon and a label.
            var buttonContentPanel = new StackPanel { Orientation = Orientation.Horizontal };
            
            buttonContentPanel.Children.Add(new Image
            {
              Width = 16,
              Height = 16,
              Texture = content.Load<Texture2D>("Icons"),   // Load existing texture.
              SourceRectangle = new Rectangle(0, 0, 16, 16) // Optional: Select region in texture.
            });
            
            buttonContentPanel.Children.Add(new TextBlock
            {
              Margin = new Vector4F(4, 0, 0, 0),
              Text = "Label",
              VerticalAlignment = VerticalAlignment.Center,
            });
            
            var button = new Button
            {
              Content = buttonContentPanel,
              Margin = new Vector4F(4),
            };
            
            // To show the button, add it to an existing content control or panel.
            panel.Children.Add(button);
            
            // To handle button clicks simply add an event handler to the Click event.
            button.Click += OnButtonClicked;
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Image.TexturePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Image.Texture"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Image.Texture">
            <summary>
            Gets or sets the texture with the image that should be displayed. 
            This is a game object property.
            </summary>
            <value>The texture with the image that should be displayed.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Image.SourceRectanglePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Image.SourceRectangle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Image.SourceRectangle">
            <summary>
            Gets or sets the source rectangle that defines the region of the <see cref="P:DigitalRune.Game.UI.Controls.Image.Texture"/>
            that should be displayed. This is a game object property.
            </summary>
            <value>
            The source rectangle. Can be <see langword="null"/> if the whole texture should be
            displayed.
            </value>
            <remarks>
            <para>
            <strong>Special notes for Windows Universal (UWP):</strong> <br/>
            Usually, the type of this property is a nullable rectangle. In UWP nullable game object
            properties cannot be used because of a bug in .NET Native. Therefore, the type of this 
            property is not nullable in the UWP build. Use an <see cref="P:Microsoft.Xna.Framework.Rectangle.Empty"/> rectangle if
            the whole texture should be displayed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Image.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.Image"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Image.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.Image"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Image.OnMeasure(DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.InputContext">
            <summary>
            Provides information during processing of device input.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.InputContext.DeltaTime">
            <summary>
            Gets or sets the size of the current time step.
            </summary>
            <value>The size of the current time step.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.InputContext.ScreenMousePosition">
            <summary>
            Gets or sets the absolute mouse position in screen coordinates.
            </summary>
            <value>The absolute mouse position in screen coordinates.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.InputContext.ScreenMousePositionDelta">
            <summary>
            Gets or sets the mouse position change since the last frame in screen coordinates.
            </summary>
            <value>The mouse position change since the last frame in screen coordinates.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.InputContext.MousePosition">
            <summary>
            Gets or sets the mouse position in local coordinates (after the 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform"/> was undone).
            </summary>
            <value>
            The mouse position in local coordinates (after the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform"/> 
            was undone).
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.InputContext.MousePositionDelta">
            <summary>
            Gets or sets the mouse position change since the last frame in local coordinates (after the 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform"/> was undone).
            </summary>
            <value>
            The mouse position change since the last frame in local coordinates (after the 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform"/> was undone).
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.InputContext.AllowedPlayer">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> of the player from which input is 
            accepted.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> of the player from which input is accepted.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.InputContext.IsMouseOver">
            <summary>
            Gets or sets a value indicating whether the mouse is over the current control.
            </summary>
            <value>
            <see langword="true"/> if the mouse is over the current control; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            If this flag is <see langword="true"/>, the <see cref="M:DigitalRune.Game.UI.Controls.UIControl.HitTest(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Mathematics.Algebra.Vector2F)"/> for the current
            control should still be made. But parent controls can set this flag to 
            <see langword="false"/> if they do not want the current control to handle mouse-over related
            actions or if they apply a clipping to the position of the child and the mouse is in the
            clipped area.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.InputContext.Data">
            <summary>
            Gets a generic collection of name/value pairs which can be used to store custom data.
            </summary>
            <value>
            A generic collection of name/value pairs which can be used to store custom data.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.InputContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.InputContext"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.InputEventArgs">
            <summary>
            Provides arguments for <see cref="E:DigitalRune.Game.UI.Controls.UIControl.InputProcessing"/> and
            <see cref="E:DigitalRune.Game.UI.Controls.UIControl.InputProcessed"/> events.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.InputEventArgs.Context">
            <summary>
            Gets or sets the input context.
            </summary>
            <value>The input context.</value>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.ContextMenu">
            <summary>
            Represents a popup menu that enables a control to expose functionality that is specific to 
            the context of the control. 
            </summary>
            <remarks>
            The <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/> of the <see cref="T:DigitalRune.Game.UI.Controls.ContextMenu"/> is a 
            <see cref="T:DigitalRune.Game.UI.Controls.StackPanel"/> containing the menu items. The <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.ContentStyle"/> 
            defines the appearance of the panel.
            </remarks>
            <example>
            The following example creates a multi-line text box with a context menu.
            <code lang="csharp">
            <![CDATA[
            // Create a multi-line text box.
            var textBox = new TextBox
            {
              Margin = new Vector4F(4),
              Text = "Lorem ipsum dolor sit ...",
              MaxLines = 5,   // Show max 5 lines of text.
              HorizontalAlignment = HorizontalAlignment.Stretch,
            };
            
            // Add a context menu (Cut, Copy, Paste) to the text box.
            var contextMenu = new ContextMenu();
            var cut = new MenuItem { Content = new TextBlock { Text = "Cut" } };
            var copy = new MenuItem { Content = new TextBlock { Text = "Copy" } };
            var paste = new MenuItem { Content = new TextBlock { Text = "Paste" } };
            cut.Click += (s, e) => textBox.Cut();
            copy.Click += (s, e) => textBox.Copy();
            paste.Click += (s, e) => textBox.Paste();
            contextMenu.Items.Add(cut);
            contextMenu.Items.Add(copy);
            contextMenu.Items.Add(paste);
            textBox.ContextMenu = contextMenu;
            
            // To show the text box, add it to an existing content control or panel.
            panel.Children.Add(textBox);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ContextMenu.Owner">
            <summary>
            Gets the <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> that opened this <see cref="T:DigitalRune.Game.UI.Controls.ContextMenu"/>.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> that opened this <see cref="T:DigitalRune.Game.UI.Controls.ContextMenu"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ContextMenu.Items">
            <summary>
            Gets the menu items.
            </summary>
            <value>
            The menu items. These can be any <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> but usually <see cref="T:DigitalRune.Game.UI.Controls.MenuItem"/>s
            or clickable controls, like buttons, should be used.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ContextMenu.OffsetPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ContextMenu.Offset"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ContextMenu.Offset">
            <summary>
            Gets or sets the offset relative to the opening position. 
            This is a game object property.
            </summary>
            <value>The offset to the opening position.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ContextMenu.IsOpenPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ContextMenu.IsOpen"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ContextMenu.IsOpen">
            <summary>
            Gets or sets a value indicating whether this context menu is currently is visible. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this context menu is currently visible; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ContextMenu.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.ContextMenu"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ContextMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.ContextMenu"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ContextMenu.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ContextMenu.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ContextMenu.Open(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Opens this <see cref="T:DigitalRune.Game.UI.Controls.ContextMenu"/> (adds it to the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>).
            </summary>
            <param name="owner">The control that opened this context menu.</param>
            <param name="position">
            The position of the mouse cursor - or where the context menu should be opened.
            (<see cref="P:DigitalRune.Game.UI.Controls.ContextMenu.Offset"/> will be applied to this position.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="owner"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="owner"/> is not loaded. The owner needs to be a visible control.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ContextMenu.Close">
            <summary>
            Closes this <see cref="T:DigitalRune.Game.UI.Controls.ContextMenu"/> (removes it from the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>).
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ContextMenu.OnUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.MenuItem">
            <summary>
            Represents an item of a menu (e.g. a <see cref="T:DigitalRune.Game.UI.Controls.ContextMenu"/>).
            </summary>
            <remarks>
            A <see cref="T:DigitalRune.Game.UI.Controls.MenuItem"/> is basically a button - but with a different style.
            </remarks>
            <example>
            The following example creates a multi-line text box with a context menu.
            <code lang="csharp">
            <![CDATA[
            // Create a multi-line text box.
            var textBox = new TextBox
            {
              Margin = new Vector4F(4),
              Text = "Lorem ipsum dolor sit ...",
              MaxLines = 5,   // Show max 5 lines of text.
              HorizontalAlignment = HorizontalAlignment.Stretch,
            };
            
            // Add a context menu (Cut, Copy, Paste) to the text box.
            var contextMenu = new ContextMenu();
            var cut = new MenuItem { Content = new TextBlock { Text = "Cut" } };
            var copy = new MenuItem { Content = new TextBlock { Text = "Copy" } };
            var paste = new MenuItem { Content = new TextBlock { Text = "Paste" } };
            cut.Click += (s, e) => textBox.Cut();
            copy.Click += (s, e) => textBox.Copy();
            paste.Click += (s, e) => textBox.Paste();
            contextMenu.Items.Add(cut);
            contextMenu.Items.Add(copy);
            contextMenu.Items.Add(paste);
            textBox.ContextMenu = contextMenu;
            
            // To show the text box, add it to an existing content control or panel.
            panel.Children.Add(textBox);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.MenuItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.MenuItem"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.MenuItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.MenuItem"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Game.UI.Controls"/> namespace provides graphical user interface
            controls.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.Canvas">
            <summary>
            Defines an area within which you can explicitly position child elements by using coordinates 
            that are relative to the <see cref="T:DigitalRune.Game.UI.Controls.Canvas"/> area.
            </summary>
            <remarks>
            To place controls on a canvas, add the controls to the <see cref="P:DigitalRune.Game.UI.Controls.Panel.Children"/> 
            collection. Set the properties <see cref="P:DigitalRune.Game.UI.Controls.UIControl.X"/> and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Y"/> to 
            position the controls.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Canvas.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.Canvas"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Canvas.OnMeasure(DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.Panel">
            <summary>
            Provides a base class for all <see cref="T:DigitalRune.Game.UI.Controls.Panel"/> controls. Use panels to position and 
            arrange child controls.
            </summary>
            <remarks>
            Note: Panels ignore <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Padding"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Panel.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Panel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.Panel"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.StackPanel">
            <summary>
            Arranges child elements into a single line that can be oriented horizontally or vertically. 
            </summary>
            <example>
            The following examples shows how to create a button containing an icon and a text label.
            <code lang="csharp">
            <![CDATA[
            // Create a horizontal stack panel containing an icon and a label.
            var buttonContentPanel = new StackPanel { Orientation = Orientation.Horizontal };
            
            buttonContentPanel.Children.Add(new Image
            {
              Width = 16,
              Height = 16,
              Texture = content.Load<Texture2D>("Icons"),   // Load existing texture.
              SourceRectangle = new Rectangle(0, 0, 16, 16) // Optional: Select region in texture.
            });
            
            buttonContentPanel.Children.Add(new TextBlock
            {
              Margin = new Vector4F(4, 0, 0, 0),
              Text = "Label",
              VerticalAlignment = VerticalAlignment.Center,
            });
            
            var button = new Button
            {
              Content = buttonContentPanel,
              Margin = new Vector4F(4),
            };
            
            // To show the button, add it to an existing content control or panel.
            panel.Children.Add(button);
            
            // To handle button clicks simply add an event handler to the Click event.
            button.Click += OnButtonClicked;
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.StackPanel.OrientationPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.StackPanel.Orientation"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.StackPanel.Orientation">
            <summary>
            Gets or sets the orientation of the stack panel. 
            This is a game object property.
            </summary>
            <value>The orientation of the stack panel.</value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.StackPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.StackPanel"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.StackPanel.OnMeasure(DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.StackPanel.OnArrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.ProgressBar">
            <summary>
            Indicates the progress of an operation. 
            </summary>
            <remarks>
            The progress is usually indicated as the length of a bar (determined by the 
            <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/>). If the mode is set to <see cref="P:DigitalRune.Game.UI.Controls.ProgressBar.IsIndeterminate"/>, the value 
            automatically cycles between 0 and 100 and an animation based on this value is rendered.
            </remarks>
            <example>
            The following example creates a simple progress bar.
            <code lang="csharp">
            <![CDATA[
            // Create progress bar.
            var progressBar = new ProgressBar
            {
              IsIndeterminate = false,
              Margin = new Vector4F(4, 8, 4, 4),
              HorizontalAlignment = HorizontalAlignment.Stretch,
            };
            
            // To show the progress bar, add it to an existing content control or panel.
            panel.Children.Add(progressBar);
            
            // Set its value to indicate the progress.
            progressBar.Value = 75; // Progress in percent.
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ProgressBar.IsIndeterminatePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ProgressBar.IsIndeterminate"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ProgressBar.IsIndeterminate">
            <summary>
            Gets or sets a value that indicates whether the progress bar reports generic progress with
            a repeating pattern or reports progress based on the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> property. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if the progress bar reports generic progress with a repeating 
            pattern; <see langword="false"/> if the progress bar reports progress based on the 
            <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> property. The default is <see langword="false"/>. 
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ProgressBar.IndeterminateCycleTimePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ProgressBar.IsIndeterminate"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ProgressBar.IndeterminateCycleTime">
            <summary>
            Gets or sets a value indicating how long an animation cycle in <see cref="P:DigitalRune.Game.UI.Controls.ProgressBar.IsIndeterminate"/> 
            mode takes. This is a game object property.
            </summary>
            <value>
            A value indicating how long an animation cycle in <see cref="P:DigitalRune.Game.UI.Controls.ProgressBar.IsIndeterminate"/> mode takes. 
            The default value is 4 seconds.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ProgressBar.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.ProgressBar"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ProgressBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.ProgressBar"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ProgressBar.OnUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.RangeBase">
            <summary>
            Represents an element that has a value within a specific range, such as the 
            <see cref="T:DigitalRune.Game.UI.Controls.ProgressBar"/>, <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>, and <see cref="T:DigitalRune.Game.UI.Controls.Slider"/> controls. 
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.RangeBase.MinimumPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Minimum"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.RangeBase.Minimum">
            <summary>
            Gets or sets the minimum possible <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> of the range element. 
            This is a game object property.
            </summary>
            <value>
            The minimum possible <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> of the range element. The default is 0.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.RangeBase.MaximumPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Maximum"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.RangeBase.Maximum">
            <summary>
            Gets or sets the maximum possible <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> of the range element. 
            This is a game object property.
            </summary>
            <value>
            The maximum possible <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> of the range element. The default is 100.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.RangeBase.ValuePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.RangeBase.Value">
            <summary>
            Gets or sets the current value of the range element. 
            This is a game object property.
            </summary>
            <value>
            The current value of the range element. The default is 0.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.RangeBase.SmallChangePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.SmallChange"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.RangeBase.SmallChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> of a 
            <see cref="T:DigitalRune.Game.UI.Controls.RangeBase"/> control. This is a game object property.
            </summary>
            <value>
            A value to be added to or subtracted from the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> of a 
            <see cref="T:DigitalRune.Game.UI.Controls.RangeBase"/> control. The default is 1.
            </value>
            <remarks>
            Classes derived from <see cref="T:DigitalRune.Game.UI.Controls.RangeBase"/> determine how this property is used.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.RangeBase.LargeChangePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.LargeChange"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.RangeBase.LargeChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> of a 
            <see cref="T:DigitalRune.Game.UI.Controls.RangeBase"/> control. This is a game object property.
            </summary>
            <value>
            A value to be added to or subtracted from the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/> of a 
            <see cref="T:DigitalRune.Game.UI.Controls.RangeBase"/> control. The default is 10.
            </value>
            <remarks>
            Classes derived from <see cref="T:DigitalRune.Game.UI.Controls.RangeBase"/> determine how this property is used.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.RangeBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.RangeBase"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.RangeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.RangeBase"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.ScrollBar">
            <summary>
            Represents a control that provides a scroll bar that has a sliding <see cref="T:DigitalRune.Game.UI.Controls.Thumb"/> whose
            position corresponds to a value and buttons to change the value.
            </summary>
            <remarks>
            A <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/> has a sliding <see cref="T:DigitalRune.Game.UI.Controls.Thumb"/>. <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/>
            defines the position of the thumb. <see cref="P:DigitalRune.Game.UI.Controls.ScrollBar.ViewportSize"/> defines the size of the thumb.
            The scroll bar also has two buttons that can be clicked to change the 
            <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/>. The "empty" space between the thumb and the buttons can also
            be clicked (like a repeat button) to change the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/>.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollBar.OrientationPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ScrollBar.Orientation"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollBar.Orientation">
            <summary>
            Gets or sets the orientation of the scroll bar. 
            This is a game object property.
            </summary>
            <value>The orientation.</value>
            <remarks>
            Changing this property has no effect after the scroll bar was loaded.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollBar.ViewportSizePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ScrollBar.ViewportSize"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollBar.ViewportSize">
            <summary>
            Gets or sets the size of the viewport relative to the full extent of the scrollable content. 
            This is a game object property.
            </summary>
            <value>
            The size of the viewport relative to the full extent of the scrollable content. This is a 
            value in the range ]0, 1]. 0 means that the extent of the scrollable content is infinite 
            (which does not happen in practice). 1 means that the full scrollable content is visible in 
            the scroll viewer. 0.5 means that the scroll viewer can show half of the scrollable content. 
            Etc. The default value is 0.1. 
            </value>
            <remarks>
            The <see cref="P:DigitalRune.Game.UI.Controls.ScrollBar.ViewportSize"/> defines the size of the draggable <see cref="T:DigitalRune.Game.UI.Controls.Thumb"/>.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollBar.ThumbStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ScrollBar.ThumbStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollBar.ThumbStyle">
            <summary>
            Gets or sets the style that is applied to the <see cref="T:DigitalRune.Game.UI.Controls.Thumb"/>. 
            This is a game object property.
            </summary>
            <value>
            The style that is applied to the <see cref="T:DigitalRune.Game.UI.Controls.Thumb"/>. Can be <see langword="null"/> or an 
            empty string to hide the thumb.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollBar.DecrementButtonStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ScrollBar.DecrementButtonStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollBar.DecrementButtonStyle">
            <summary>
            Gets or sets the style that is applied to the button that decreases the 
            <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/>. This is a game object property.
            </summary>
            <value>
            The style that is applied to the button that decreases the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/>.
            Can be <see langword="null"/> or an empty string to hide the button.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.ScrollBar.IncrementButtonStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.ScrollBar.IncrementButtonStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.ScrollBar.IncrementButtonStyle">
            <summary>
            Gets or sets the style that is applied to the button that increments the 
            <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/>. This is a game object property.
            </summary>
            <value>
            The style that is applied to the button that increments the <see cref="P:DigitalRune.Game.UI.Controls.RangeBase.Value"/>.
            Can be <see langword="null"/> or an empty string to hide the button.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollBar.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollBar.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollBar.OnUnload">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollBar.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.ScrollBar.OnArrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.Slider">
            <summary>
            Represents a control that lets the user select from a range of values by moving a 
            <see cref="T:DigitalRune.Game.UI.Controls.Thumb"/> control. 
            </summary>
            <remarks>
            <para>
            To change the value, the user can move the thumb or click in the non-thumb area. This area
            acts as a repeat button. The slider can also be moved using LEFT/RIGHT/HOME/END on the 
            keyboard or the left thumb stick or the directional pad of the gamepad.
            </para>
            <para>
            The area in which the thumb moves can be restricted using the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Padding"/>.
            </para>
            </remarks>
            <example>
            The following examples shows how to create a slider and display its value.
            <code lang="csharp">
            <![CDATA[
            var slider = new Slider
            {
              Value = 60,
              Margin = new Vector4F(4),
              HorizontalAlignment = HorizontalAlignment.Stretch,
            };
            
            var textBlock = new TextBlock
            {
              Margin = new Vector4F(4, 0, 4, 4),
              Text = "(Value = 60)",
              HorizontalAlignment = HorizontalAlignment.Right
            };
            
            // To connect the slider with the text box, we need to get the "Value" property.
            var valueProperty = slider.Properties.Get<float>("Value");
            
            // This property is a GameObjectProperty<float>. We can attach an event handler to 
            // the Changed event of the property.
            valueProperty.Changed += (s, e) => textBlock.Text = "(Value = " + (int)e.NewValue + ")";
            
            panel.Children.Add(slider);
            panel.Children.Add(textBlock);
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Slider.ThumbStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Slider.ThumbStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Slider.ThumbStyle">
            <summary>
            Gets or sets the style that is applied to the thumb control. 
            This is a game object property.
            </summary>
            <value>
            The style that is applied to the thumb control. Can be <see langword="null"/> or an empty 
            string to hide the thumb.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Slider.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.Slider"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Slider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.Slider"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Slider.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Slider.OnUnload">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Slider.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Slider.OnArrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.Thumb">
            <summary>
            Represents a control that can be dragged by the user. 
            </summary>
            <remarks>
            <para>
            <strong>Visual States:</strong> The <see cref="P:DigitalRune.Game.UI.Controls.Thumb.VisualState"/>s of this control are:
            "Disabled", "Default", "MouseOver", "Focused", "Dragging"
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Thumb.VisualState">
            <inheritdoc/>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Thumb.IsDraggingPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Thumb.IsDragging"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Thumb.IsDragging">
            <summary>
            Gets or sets a value indicating whether this thumb is currently dragged by the user. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this thumb is currently dragged by the user; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.Thumb.DragDeltaPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.Thumb.DragDelta"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.Thumb.DragDelta">
            <summary>
            Gets or sets the dragging distance relative to the start position of the drag operation. 
            This is a game object property.
            </summary>
            <value>The dragging distance relative to the start position of the drag operation.</value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Thumb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.Thumb"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.Thumb.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.TextBlock">
            <summary>
            Provides a lightweight control for displaying small amounts of text, supporting text 
            wrapping at word boundaries.
            </summary>
            <example>
            The following examples shows how to create a button and handle the 
            <see cref="E:DigitalRune.Game.UI.Controls.ButtonBase.Click"/> event.
            <code lang="csharp">
            <![CDATA[
            var button = new Button
            {
              Content = new TextBlock { Text = "Click Me!" },
              Margin = new Vector4F(4),
              Padding = new Vector4F(6),
              HorizontalAlignment = HorizontalAlignment.Stretch,
            };
            
            // To show the button, add it to an existing content control or panel.
            panel.Children.Add(button);
            
            // To handle button clicks simply add an event handler to the Click event.
            button.Click += OnButtonClicked;
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBlock.VisualText">
            <summary>
            Gets the text exactly as it should be displayed (wrapping already applied).
            </summary>
            <value>The text, exactly as it should be displayed (wrapping already applied).</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBlock.VisualClip">
            <summary>
            Gets a value indicating whether the renderer should clip the rendered 
            <see cref="P:DigitalRune.Game.UI.Controls.TextBlock.VisualText"/>.
            </summary>
            <value>
            <see langword="true"/> if the renderer should clip the text; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            If this value is <see langword="true"/>, the renderer should clip the text rendering. This
            flag is set if text must be clipped within characters (e.g. if the whole text block is not
            high enough). The clipping rectangle is defined by the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualBounds"/>
            and applying the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Padding"/>.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBlock.UseEllipsisPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBlock.UseEllipsis"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBlock.UseEllipsis">
            <summary>
            Gets or sets a value indicating whether an ellipsis ("…") should be appended when the text
            must be clipped. This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if an ellipsis ("…") should be appended; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBlock.WrapTextPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBlock.WrapText"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBlock.WrapText">
            <summary>
            Gets or sets a value indicating whether text is wrapped when the available space is not
            wide enough. This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if text is wrapped when the available space is not wide enough; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBlock.TextPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBlock.Text"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBlock.Text">
            <summary>
            Gets or sets the text. 
            This is a game object property.
            </summary>
            <value>The text.</value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBlock.OnMeasure(DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBlock.SplitText">
            <summary>
            Gets the list of words for the current <see cref="P:DigitalRune.Game.UI.Controls.TextBlock.Text"/>.
            </summary>
            <remarks>
            Words are separated by spaces. <see langword="null"/> is added to the list for newline 
            symbols.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.TextBox">
            <summary>
            Represents a control that can be used to display or edit unformatted text.
            </summary>
            <remarks>
            The text box can be a multi-line text box (if <see cref="P:DigitalRune.Game.UI.Controls.TextBox.MinLines"/> or <see cref="P:DigitalRune.Game.UI.Controls.TextBox.MaxLines"/>
            is greater than 1). It supports vertical scrolling but not horizontal scrolling. On Windows, 
            text can be entered using the keyboard. On Windows Phone 7, the software keyboard is opened 
            when the text box is clicked. On Xbox 360, the software keyboard is opened when the text box
            is focused and A on the gamepad is clicked.
            </remarks>
            <example>
            The following example creates a multi-line text box with a context menu.
            <code lang="csharp">
            <![CDATA[
            // Create a multi-line text box.
            var textBox = new TextBox
            {
              Margin = new Vector4F(4),
              Text = "Lorem ipsum dolor sit ...",
              MaxLines = 5,   // Show max 5 lines of text.
              HorizontalAlignment = HorizontalAlignment.Stretch,
            };
            
            // Add a context menu (Cut, Copy, Paste) to the text box.
            var contextMenu = new ContextMenu();
            var cut = new MenuItem { Content = new TextBlock { Text = "Cut" } };
            var copy = new MenuItem { Content = new TextBlock { Text = "Copy" } };
            var paste = new MenuItem { Content = new TextBlock { Text = "Paste" } };
            cut.Click += (s, e) => textBox.Cut();
            copy.Click += (s, e) => textBox.Copy();
            paste.Click += (s, e) => textBox.Paste();
            contextMenu.Items.Add(cut);
            contextMenu.Items.Add(copy);
            contextMenu.Items.Add(paste);
            textBox.ContextMenu = contextMenu;
            
            // To show the text box, add it to an existing content control or panel.
            panel.Children.Add(textBox);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.CaretIndex">
            <summary>
            Gets or sets the position of the caret.
            </summary>
            <value>The position of the caret (zero-based index).</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.IsMultiline">
            <summary>
            Gets a value indicating whether this text box is a multi-line text box that accepts ENTER
            keys to create new lines.
            </summary>
            <value>
            <see langword="true"/> if this text box is multi-line text box that accepts ENTER keys to
            create new lines; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            A text box is a multi-line text box if <see cref="P:DigitalRune.Game.UI.Controls.TextBox.MaxLines"/> is greater than 1.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.SelectedText">
            <summary>
            Gets the content of the current selection in the text box.
            </summary>
            <value>
            The content of the current selection in the text box. Returns <see cref="F:System.String.Empty"/> if
            nothing is selected.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBox.TextPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.Text"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.Text">
            <summary>
            Gets or sets the text. 
            This is a game object property.
            </summary>
            <value>The text.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBox.GuideTitlePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.GuideTitle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.GuideTitle">
            <summary>
            Gets or sets the title that is displayed with the software keyboard.
            This is a game object property.
            </summary>
            <value>The title that is displayed with the software keyboard.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBox.GuideDescriptionPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.GuideDescription"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.GuideDescription">
            <summary>
            Gets or sets the description that is displayed with the software keyboard.
            This is a game object property.
            </summary>
            <value>The description that is displayed with the software keyboard.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBox.IsReadOnlyPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.IsReadOnly"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this text box is read-only. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this text box is read-only; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBox.IsPasswordPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.IsPassword"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.IsPassword">
            <summary>
            Gets or sets a value indicating whether this text box is a password box that displays
            <see cref="P:DigitalRune.Game.UI.Controls.TextBox.PasswordCharacter"/>s instead of the real characters. This is a game object 
            property.
            </summary>
            <value>
            <see langword="true"/> if this text box is a password box that displays
            <see cref="P:DigitalRune.Game.UI.Controls.TextBox.PasswordCharacter"/>s instead of the real characters; otherwise, 
            <see langword="false"/>. Only single-line text boxes (where <see cref="P:DigitalRune.Game.UI.Controls.TextBox.MaxLines"/> is 1) can
            be password boxes.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBox.PasswordCharacterPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.PasswordCharacter"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.PasswordCharacter">
            <summary>
            Gets or sets the character that is used instead of normal character if 
            <see cref="P:DigitalRune.Game.UI.Controls.TextBox.IsPassword"/> is set. This is a game object property.
            </summary>
            <value>
            The character that is used instead of normal character if <see cref="P:DigitalRune.Game.UI.Controls.TextBox.IsPassword"/> is set.
            </value>
            <remarks>
            Note: The password character must be included in the used SpriteFont (see 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Font"/>)!
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBox.MaxLengthPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.MaxLength"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.MaxLength">
            <summary>
            Gets or sets the maximal number of characters in the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.Text"/>. 
            This is a game object property.
            </summary>
            <value>The maximal number of characters in the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.Text"/>.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBox.MinLinesPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.MinLines"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.MinLines">
            <summary>
            Gets or sets the minimal number of visible lines. 
            This is a game object property.
            </summary>
            <value>The minimal number of visible lines.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBox.MaxLinesPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.MaxLines"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.MaxLines">
            <summary>
            Gets or sets the maximal number of visible lines. 
            This is a game object property.
            </summary>
            <value>
            The maximal number of visible lines. The default is 1. If this property is greater than 1,
            the text box is a multi-line text box (<see cref="P:DigitalRune.Game.UI.Controls.TextBox.IsMultiline"/>).
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBox.SelectionColorPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.SelectionColor"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.SelectionColor">
            <summary>
            Gets or sets the background color used for text selections. 
            This is a game object property.
            </summary>
            <value>
            The background color used for text selections.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBox.VerticalScrollBarVisibilityPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.VerticalScrollBarVisibility"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.VerticalScrollBarVisibility">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Game.UI.Controls.ScrollBarVisibility"/> of the vertical <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>. 
            This is a game object property.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Game.UI.Controls.ScrollBarVisibility"/> of the vertical <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.TextBox.VerticalScrollBarStylePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.VerticalScrollBarStyle"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.VerticalScrollBarStyle">
            <summary>
            Gets or sets the style that is applied to the vertical <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>. 
            This is a game object property.
            </summary>
            <value>
            The style that is applied to the vertical <see cref="T:DigitalRune.Game.UI.Controls.ScrollBar"/>. Can be 
            <see langword="null"/> or an empty string to hide the scroll bar.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.TextBox"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.TextBox"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.OnUnload">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.ShowGuide(System.Nullable{Microsoft.Xna.Framework.PlayerIndex})">
            <summary>
            Displays the Guide keyboard.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.Enter">
            <summary>
            Inserts a newline, but only for multiline text boxes and if <see cref="P:DigitalRune.Game.UI.Controls.TextBox.MaxLength"/> is not 
            yet reached.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.Backspace">
            <summary>
            Deletes the current selection or the previous character.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.Delete">
            <summary>
            Deletes the current selection or the current character.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.MoveLeft(DigitalRune.Game.Input.ModifierKeys)">
            <summary>
            Moves the caret left.
            </summary>
            <param name="modifierKeys">The modifier keys.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.MoveRight(DigitalRune.Game.Input.ModifierKeys)">
            <summary>
            Moves the caret right.
            </summary>
            <param name="modifierKeys">The modifier keys.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.MoveUp(DigitalRune.Game.Input.ModifierKeys)">
            <summary>
            Moves the caret up by one line.
            </summary>
            <param name="modifierKeys">The modifier keys.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.MoveDown(DigitalRune.Game.Input.ModifierKeys)">
            <summary>
            Moves the caret down by one line.
            </summary>
            <param name="modifierKeys">The modifier keys.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.Home(DigitalRune.Game.Input.ModifierKeys)">
            <summary>
            Moves the caret to start of line or start of whole text.
            </summary>
            <param name="modifierKeys">The modifier keys.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.End(DigitalRune.Game.Input.ModifierKeys)">
            <summary>
            Moves the caret to end of line or end of whole text.
            </summary>
            <param name="modifierKeys">The modifier keys.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.PageUp(DigitalRune.Game.Input.ModifierKeys)">
            <summary>
            Moves the caret one page up.
            </summary>
            <param name="modifierKeys">The modifier keys.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.PageDown(DigitalRune.Game.Input.ModifierKeys)">
            <summary>
            Moves the caret one page down.
            </summary>
            <param name="modifierKeys">The modifier keys.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.ClearSelection">
            <summary>
            Clears the text selection.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.Select(System.Int32,System.Int32)">
            <summary>
            Selects a range of text in the text box.
            </summary>
            <param name="start">
            The zero-based index of the first character in the selection.
            </param>
            <param name="length">
            The length of the selection, in characters.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The selection defined by <paramref name="start"/> and <paramref name="length"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.SelectAll">
            <summary>
            Selects all contents of the text box.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.Cut">
            <summary>
            Removes the current selection from the text box and copies it to the clipboard.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.Copy">
            <summary>
            Copies the current selection from the text box to the clipboard.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.Paste">
            <summary>
            Pastes the contents of the clipboard into the text box.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.SelectWordOrWhiteSpace(System.Int32)">
            <summary>
            Selects the word or white-space at the given index.
            </summary>
            <param name="index">The zero-based index of a character in <see cref="P:DigitalRune.Game.UI.Controls.TextBox.Text"/>.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.StartSelection(DigitalRune.Game.Input.ModifierKeys)">
            <summary>
            Starts, appends or clears the selection depending on the currently pressed modifier keys.
            </summary>
            <param name="modifierKeys">The modifier keys.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.DeleteSelection">
            <summary>
            Deletes the currently selected text.
            </summary>
            <returns>
            <see langword="true"/> if the text has been changed; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.VisualOffset">
            <summary>
            Gets the offset which is the horizontal offset for single-line text boxes or the vertical
            offset for multi-line text boxes (see also <see cref="P:DigitalRune.Game.UI.Controls.TextBox.MaxLines"/> and 
            <see cref="P:DigitalRune.Game.UI.Controls.TextBox.IsMultiline"/>).
            </summary>
            <value>
            The offset which is the horizontal offset for single-line text boxes or the vertical offset
            for multi-line text boxes (see also <see cref="P:DigitalRune.Game.UI.Controls.TextBox.MaxLines"/> and <see cref="P:DigitalRune.Game.UI.Controls.TextBox.IsMultiline"/>).
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.VisualText">
            <summary>
            Gets the text exactly as it should be displayed (wrapping already applied).
            </summary>
            <value>The text, exactly as it should be displayed (wrapping already applied).</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.VisualCaret">
            <summary>
            Gets the position of the top left corner of the caret rectangle/line.
            </summary>
            <value>The position of the top left corner of the caret rectangle/line.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.VisualClip">
            <summary>
            Gets the clipping rectangle.
            </summary>
            <value>
            The clipping rectangle.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.TextBox.VisualSelectionBounds">
            <summary>
            Gets the bounds of the text selection (for rendering).
            </summary>
            <value>
            The bounds of the text selection (for rendering).
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.OnMeasure(DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.OnArrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.UpdateScrollBarVisibility(System.String,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Updates the visibility of the vertical scroll bar.
            </summary>
            <param name="text">The text.</param>
            <param name="contentSize">The size of the text area.</param>
            <param name="font">The font.</param>
            <returns>
            <see langword="true"/> if the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.VisualText"/> has been updated; otherwise,
            <see langword="false"/> when the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.VisualText"/> still needs to be updated.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.UpdateVisualText(System.String,System.Single,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Updates the <see cref="P:DigitalRune.Game.UI.Controls.TextBox.VisualText"/> including text wrapping.
            </summary>
            <param name="text">The text.</param>
            <param name="textWidth">The available width.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.WrapText(System.Single,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Computes the <see cref="F:DigitalRune.Game.UI.Controls.TextBox._lineStarts"/> array that indicates where new lines have to start.
            </summary>
            <param name="maxWidth">The max width in pixels.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.UpdateVisualCaret(System.String,DigitalRune.Game.UI.RectangleF,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Updates the visual caret position.
            </summary>
            <param name="text">The text.</param>
            <param name="textBounds">The text bounds.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.UpdateSelectionBounds(System.String,DigitalRune.Game.UI.RectangleF,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Updates the text selection bounds.
            </summary>
            <param name="text">The text.</param>
            <param name="textBounds">The text bounds.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.GetIndex(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Game.UI.Controls.UIScreen)">
            <summary>
            Gets the nearest index of the caret for a given screen position (e.g. for a mouse click).
            </summary>
            <param name="position">The absolute screen position.</param>
            <param name="screen">The screen.</param>
            <returns>The index of the caret.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.TextBox.GetPosition(System.Int32,System.String,DigitalRune.Game.UI.RectangleF,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            Gets the position of the given index.
            </summary>
            <param name="index">The zero-based index of a character in <paramref name="text"/>.</param>
            <param name="text">The text.</param>
            <param name="textBounds">The text bounds.</param>
            <param name="font">The font.</param>
            <returns>The upper, left corner of the character</returns>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.UIControl">
            <summary>
            Represents the base class for user interface (UI) controls.
            </summary>
            <remarks>
            <para>
            <strong>The Visual Tree:</strong> Controls are managed in a visual tree. Each control has a 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualParent"/> and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualChildren"/>. <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualChildren"/> are
            managed by the control classes themselves; this collection should not be directly changed by
            the user. The controls will automatically put a "logical child" into the 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualChildren"/> collection if necessary. The root of the visual tree is the 
            <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/> which starts all update, layout and render traversals. The 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualParent"/> of the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/> is <see langword="null"/>. Only
            objects in the visual tree handle input, take part in the layout process and are rendered.
            </para>
            <para>
            <strong>The Logical Tree: </strong> <see cref="T:DigitalRune.Game.UI.Controls.ContentControl"/>s have a 
            <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/> property. <see cref="T:DigitalRune.Game.UI.Controls.Panel"/>s and the 
            <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/> have a <strong>Children</strong> property. Other controls may have an 
            <strong>Items</strong> property. Using these properties the user can create parent-child
            relationships which define the logical tree. 
            </para>
            <para>
            <strong>A Logical/Visual Tree Example:</strong> A <see cref="T:DigitalRune.Game.UI.Controls.Window"/> is a 
            <see cref="T:DigitalRune.Game.UI.Controls.ContentControl"/>, therefore it has a <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/> 
            property. The user adds a logical child to the window by setting the Content property. The
            window will automatically put the Content into the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualChildren"/> collection
            because the Content should be updated and rendered with the window. The window has a few more
            visual children: An <see cref="T:DigitalRune.Game.UI.Controls.Image"/> control that draws the window icon, a 
            <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> that draws the window title and a <see cref="T:DigitalRune.Game.UI.Controls.Button"/> that represents
            the Close button of a window. These "internal" controls are also visual children.
            </para>
            <para>
            <strong>IsLoaded:</strong> The <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> is loaded 
            (<see cref="P:DigitalRune.Game.GameObject.IsLoaded"/>) when the control is added to the 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualChildren"/> of a loaded control, or when the control is in the 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualChildren"/> of an unloaded parent control and the parent control is loaded. 
            <see cref="M:DigitalRune.Game.GameObject.Update(System.TimeSpan)"/> is automatically called if the control is loaded.
            </para>
            <para>
            <strong>PropertyChanged Events: </strong> <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
            events are only raised for game object properties, like <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Background"/>, 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsEnabled"/>, etc. The event is not raised for "normal" properties, like 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualIsEnabled"/>, <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Screen"/>, <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualState"/>, etc.
            </para>
            <para>
            <strong>Render Transforms:</strong> Controls have a <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform"/> that is
            defined using the game object properties <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransformOrigin"/>, 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTranslation"/>, <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderRotation"/> and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderScale"/>.
            The render transform can be used to scale, rotate and translate the control. The render
            transform is correctly applied when input is handled (e.g. mouse clicks). But the render
            transform is ignored in the layout process.
            </para>
            <para>
            <strong>UIControl Properties:</strong> A <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> is derived from 
            <see cref="T:DigitalRune.Game.GameObject"/> and therefore has game object properties (see 
            <see cref="T:DigitalRune.Game.GameProperty`1"/>) and game object events (see <see cref="T:DigitalRune.Game.GameEvent`1"/>). One
            big advantage of the game object property system is that they can be initialized in the XML
            file of the UI <see cref="T:DigitalRune.Game.UI.Rendering.Theme"/>. The UI control properties are extended game object 
            properties: They must be created using <see cref="M:DigitalRune.Game.UI.Controls.UIControl.CreateProperty``1(System.Type,System.String,System.String,System.String,``0,DigitalRune.Game.UI.Controls.UIPropertyOptions)"/> and 
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.CreateEvent``1(System.Type,System.String,System.String,System.String,``0)"/>. <see cref="T:DigitalRune.Game.UI.Controls.UIPropertyOptions"/> can be assigned to UI control 
            properties (see <see cref="M:DigitalRune.Game.UI.Controls.UIControl.GetPropertyOptions(System.Int32)"/> and <see cref="M:DigitalRune.Game.UI.Controls.UIControl.SetPropertyOptions(System.Int32,DigitalRune.Game.UI.Controls.UIPropertyOptions)"/>). 
            Depending on the <see cref="T:DigitalRune.Game.UI.Controls.UIPropertyOptions"/> property changes automatically invoke 
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateMeasure"/>, <see cref="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateArrange"/>, or 
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateVisual"/> when required. Game object properties have only one global 
            default value. If a control class, e.g. a Button, should have class-specific default values, 
            the method <see cref="M:DigitalRune.Game.UI.Controls.UIControl.OverrideDefaultValue``1(System.Type,System.Int32,``0)"/> can be used.
            </para>
            <para>
            <strong>Styles and Templates:</strong> Each control has a <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Style"/>. When the 
            control is loaded. The control retrieves style information (e.g. default values) from the 
            <see cref="T:DigitalRune.Game.UI.Rendering.IUIRenderer"/> and creates a template game object with property values determined
            by the used <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Style"/>. This game object is set as the 
            <see cref="P:DigitalRune.Game.GameObject.Template"/>. To apply a new style to an already loaded control, the
            control must first be removed from the visual tree and afterwards added back again to the
            visual tree.
            </para>
            <para>
            <strong>The Layout Process:</strong> The layout process is a simplified version of the 
            WPF/Silverlight layout process. The layout process starts at the root of the visual tree (the 
            <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>) or when <see cref="M:DigitalRune.Game.UI.Controls.UIControl.UpdateLayout"/> is called. First, 
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Measure(DigitalRune.Mathematics.Algebra.Vector2F)"/> is called for all controls in the visual tree. <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Measure(DigitalRune.Mathematics.Algebra.Vector2F)"/>
            computes the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.DesiredWidth"/> and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.DesiredHeight"/> of a control. These
            values are determined either by the theme or the user (see <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Width"/>, 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Height"/>, <see cref="P:DigitalRune.Game.UI.Controls.UIControl.MinWidth"/> and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.MinHeight"/>) or automatically 
            computed by the control. It is also possible to call <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Measure(DigitalRune.Mathematics.Algebra.Vector2F)"/> manually. 
            </para>
            <para>
            After that, <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Arrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)"/> is called for all controls in the visual
            tree. <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Arrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)"/> computes the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualX"/>, 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualY"/>, <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualWidth"/> and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualHeight"/> of a control 
            in screen coordinates. The actual bounds are determined by the properties <see cref="P:DigitalRune.Game.UI.Controls.UIControl.X"/>, 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Y"/>, <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Margin"/>, <see cref="P:DigitalRune.Game.UI.Controls.UIControl.HorizontalAlignment"/> and 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VerticalAlignment"/>. (<see cref="P:DigitalRune.Game.UI.Controls.UIControl.X"/> and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Y"/> are usually only used 
            for controls in a <see cref="T:DigitalRune.Game.UI.Controls.Canvas"/> or directly under the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>.) The 
            measure and arrange results are cached, and the layout process is only repeated when 
            necessary. A new layout process can be issued using <see cref="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateMeasure"/> or 
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateArrange"/>. When game object properties are changed, they automatically 
            invalidate the layout if necessary. Derived classes can override <see cref="M:DigitalRune.Game.UI.Controls.UIControl.OnMeasure(DigitalRune.Mathematics.Algebra.Vector2F)"/> and 
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.OnArrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)"/> to customize the layout results.
            </para>
            <para>
            <strong>The Rendering Process:</strong> The rendering process starts at the root of the visual
            tree (the screen) when <see cref="M:DigitalRune.Game.UI.Controls.UIScreen.Draw(System.TimeSpan)"/> is called by the user. 
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Render(DigitalRune.Game.UI.Controls.UIRenderContext)"/> will be called for each control in the visual tree. Derived classes can 
            override <see cref="M:DigitalRune.Game.UI.Controls.UIControl.OnRender(DigitalRune.Game.UI.Controls.UIRenderContext)"/> to do custom drawing. Per default, <see cref="M:DigitalRune.Game.UI.Controls.UIControl.OnRender(DigitalRune.Game.UI.Controls.UIRenderContext)"/> lets
            the renderer draw the control (see <see cref="M:DigitalRune.Game.UI.Rendering.IUIRenderer.Render(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)"/>).
            </para>
            <para>
            <strong>Custom Rendering:</strong> There are several ways to customize the appearance and 
            rendering of controls:
            <list type="bullet">
            <item>
            If the <see cref="T:DigitalRune.Game.UI.Rendering.UIRenderer"/> is used: Change the styles in the UI theme (see the themes in 
            the example projects).
            </item>
            <item>
            If the <see cref="T:DigitalRune.Game.UI.Rendering.UIRenderer"/> is used: Add a new render method to the 
            <see cref="P:DigitalRune.Game.UI.Rendering.UIRenderer.RenderCallbacks"/> of the <see cref="T:DigitalRune.Game.UI.Rendering.UIRenderer"/> if custom drawing 
            code is necessary.
            </item>
            <item>
            Use your own <see cref="T:DigitalRune.Game.UI.Rendering.IUIRenderer"/> instead of the <see cref="T:DigitalRune.Game.UI.Rendering.UIRenderer"/>.
            </item>
            <item>
            Override <see cref="M:DigitalRune.Game.UI.Controls.UIControl.OnRender(DigitalRune.Game.UI.Controls.UIRenderContext)"/> of a specific <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>.
            </item>
            </list>
            </para>
            <para>
            <strong>Visual States:</strong> The <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualState"/>s of this control are:
            "Disabled", "Default"
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Screen">
            <summary>
            Gets the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/> or <see langword="null"/> if the control is not in a visual tree
            under a screen.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.UIService">
            <summary>
            Gets the <see cref="T:DigitalRune.Game.UI.IUIService"/>.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Game.UI.IUIService"/> or <see langword="null"/> if the control is not in a visual
            tree under a screen.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.InputService">
            <summary>
            Gets the <see cref="T:DigitalRune.Game.Input.IInputService"/>.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Game.Input.IInputService"/> or <see langword="null"/> if the control is not in a visual
            tree under a screen.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.VisualState">
            <summary>
            Gets the visual state of the control as string.
            </summary>
            <value>The visual state of the control as string.</value>
            <remarks>
            The visual state defines how the control should be rendered. The possible states depend on
            the type of control. The default states are "Default" and "Disabled". Other controls can add
            additional states like "MouseOver", "Pressed", etc.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The style.</value>
            <remarks>
            The style of a control defines how it should be rendered and what default values it should
            use. When a control is loaded or when the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Style"/> is changed, a template game
            object will be created with default values defined by the renderer. (The renderer defines
            the visual theme including default values.) This game object is then set as the
            <see cref="P:DigitalRune.Game.GameObject.Template"/> of this <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.VisualParent">
            <summary>
            Gets the visual parent.
            </summary>
            <value>The visual parent.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.VisualChildren">
            <summary>
            Gets the visual children.
            </summary>
            <value>The visual children.</value>
            <remarks>
            This collection should only be modified by the controls themselves and not by the user.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.ActualIsEnabled">
            <summary>
            Gets a value indicating whether this control is actually enabled, taking into account the 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsEnabled"/> flag and the state of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualParent"/>.
            </summary>
            <value>
            <see langword="true"/> if this control <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsEnabled"/> and 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualIsEnabled"/> of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualParent"/> is <see langword="true"/>; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.ActualIsVisible">
            <summary>
            Gets a value indicating whether this control is actually visible, taking into account the 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsVisible"/> flag and the state of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualParent"/>.
            </summary>
            <value>
            <see langword="true"/> if this control <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsVisible"/> and 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualIsVisible"/> of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualParent"/> is <see langword="true"/>; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.AllowedPlayer">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> from which input is accepted.
            </summary>
            <value>The <see cref="T:DigitalRune.Game.Input.LogicalPlayerIndex"/> from which input is accepted.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.ContextMenu">
            <summary>
            Gets or sets the context menu that should pop up when the control is right-clicked
            (tap-and-hold on Windows Phone 7).
            </summary>
            <value>
            The context menu. The default is <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Cursor">
            <summary>
            Gets or sets the mouse cursor that should be displayed when the mouse is over this control.
            </summary>
            <value>
            The mouse cursor that should be displayed when the mouse is over this control.
            </value>
            <remarks>
            This object must be of type <strong>System.Windows.Forms.Cursor</strong>. (The type 
            <see cref="T:System.Object"/> is used to avoid referencing 
            <strong>System.Windows.Forms.dll</strong> in this portable library.)
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.HasRenderTransform">
            <summary>
            Gets a value indicating whether this control has a render transform that is not the 
            identity transformation.
            </summary>
            <value>
            <see langword="true"/> if this control has render transform that is not the identity 
            transformation; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.IsFocusWithin">
            <summary>
            Gets (or sets) a value indicating whether the focus is on this control or on any of 
            the visual children.
            </summary>
            <value>
            <see langword="true"/> if this control <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsFocused"/> or if the focus is within
            any of the visual children; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.IsMouseDirectlyOver">
            <summary>
            Gets a value indicating whether the mouse is over this control and not over a visual child 
            control.
            </summary>
            <value>
            <see langword="true"/> if this mouse is over this control and not over a visual child; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform">
            <summary>
            Gets the render transformation.
            </summary>
            <value>The render transformation.</value>
            <remarks>
            <para>
            Render transforms scales, rotates and translates the control. This can be used for 
            animations, but it should be used sparingly since it costs performance. When handling input
            (e.g. mouse clicks) the render transform is considered and, for example, rotated buttons can
            be clicked normally.
            </para>
            <para>
            The render transformation is defined using the properties 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransformOrigin"/>, <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderScale"/>, 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderRotation"/>, and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTranslation"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Tag">
            <summary>
            Gets or sets a user-defined tag.
            </summary>
            <value>The user-defined tag.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.UserData">
            <summary>
            Gets or sets user-defined data.
            </summary>
            <value>User-defined data.</value>
            <remarks>
            This property is intended for application-specific data and is not used by the control 
            itself. 
            </remarks>
        </member>
        <member name="E:DigitalRune.Game.UI.Controls.UIControl.InputProcessing">
            <summary>
            Occurs before the device input is processed.
            </summary>
            <remarks>
            Handle this event to handle input BEFORE the control gets a chance to handle the input.
            </remarks>
        </member>
        <member name="E:DigitalRune.Game.UI.Controls.UIControl.InputProcessed">
            <summary>
            Occurs after the device input was processed.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.BackgroundPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Background"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Background">
            <summary>
            Gets or sets the background color. 
            This is a game object property.
            </summary>
            <value>The background color.</value>
            <remarks>
            If the background color is not transparent (<strong>Color.A</strong> is not 0), then the
            <see cref="T:DigitalRune.Game.UI.Rendering.IUIRenderer"/> clears the background rectangle of this control with the 
            background color.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.ForegroundPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Foreground"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Foreground">
            <summary>
            Gets or sets the foreground color. 
            This is a game object property.
            </summary>
            <value>The foreground color.</value>
            <remarks>
            How this property is used depends on the control type.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.OpacityPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Opacity"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Opacity">
            <summary>
            Gets or sets the opacity. 
            This is a game object property.
            </summary>
            <value>
            The opacity. 0 for a fully transparent (invisible) control. 1 for a fully opaque control. 
            </value>
            <remarks>
            If this value is less than 1, the control including its visual children are rendered
            transparent.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.FontPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Font"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Font">
            <summary>
            Gets or sets the font that is used if the control renders text. 
            This is a game object property.
            </summary>
            <value>The font.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.IsEnabledPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsEnabled"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this control is enabled. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this control is enabled; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            Disabled controls and its visual children are drawn and take part in the layout process but 
            they do not handle input. See also <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualIsEnabled"/>.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.IsVisiblePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsVisible"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.IsVisible">
            <summary>
            Gets or sets a value indicating whether this control is visible.
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this control is visible; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            This property can be set to <see langword="false"/> to hide the control and its visual
            children. Invisible controls are not drawn, they do not take part in the layout process and
            they do not handle input. See also <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualIsVisible"/>.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.IsMouseOverPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsMouseOver"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.IsMouseOver">
            <summary>
            Gets or sets a value indicating whether the mouse is over this control or over a visual 
            child. This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if the mouse is over this control or over a visual child; otherwise,
            <see langword="false"/>.
            </value>
            <remarks>
            <para>
            Use <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsMouseDirectlyOver"/> to check if the mouse is over this control but not
            over a visual child.
            </para>
            <para>
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsMouseOver"/> is set automatically before the input is handled (before
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)"/>) and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsMouseDirectlyOver"/> is set after all visual
            children have handled the input.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.ToolTipPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ToolTip"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.ToolTip">
            <summary>
            Gets or sets the tool tip.
            This is a game object property.
            </summary>
            <value>
            The tool tip, which is either a <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>, a <see cref="T:System.String"/>, or an
            <see cref="T:System.Object"/> (see remarks). The default value is <see langword="null"/>.
            </value>
            <remarks>
            <para>
            If a tool tip is set, the <see cref="T:DigitalRune.Game.UI.ToolTipManager"/> will automatically display a tool tip
            if the mouse hovers over the control for certain time without moving.
            </para>
            <para>
            The tool tip can be a <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>, a <see cref="T:System.String"/>, or an 
            <see cref="T:System.Object"/>:
            <list type="bullet">
            <item>
            <description>
            <strong>UIControl:</strong> If the tool tip is a control, then the control is shown as the 
            content of the <see cref="P:DigitalRune.Game.UI.ToolTipManager.ToolTipControl"/>.
            </description>
            </item>
            <item>
            <description>
            <strong>String:</strong> If the tool tip is a <see cref="T:System.String"/>, then the string will be 
            wrapped in a <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> and shown in the 
            <see cref="P:DigitalRune.Game.UI.ToolTipManager.ToolTipControl"/>.
            </description>
            </item>
            <item>
            <description>
            <strong>Object:</strong> If the tool tip is an <see cref="T:System.Object"/>, then the string 
            representation of the object will be shown as the tool tip. (The string will be wrapped in a
            <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> and shown in the <see cref="P:DigitalRune.Game.UI.ToolTipManager.ToolTipControl"/>.
            </description>
            </item>
            </list>
            </para>
            <para>
            The user can override this behavior by setting a 
            <see cref="P:DigitalRune.Game.UI.ToolTipManager.CreateToolTipContent"/> callback in the 
            <see cref="T:DigitalRune.Game.UI.ToolTipManager"/>. The callback receives the value stored in 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ToolTip"/> and returns the <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> that will be shown in the 
            <see cref="P:DigitalRune.Game.UI.ToolTipManager.ToolTipControl"/>.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.RenderTransformOriginPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransformOrigin"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransformOrigin">
            <summary>
            Gets or sets the relative origin of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform"/>. 
            This is a game object property.
            </summary>
            <value>
            The relative origin of the render transformation. (0, 0) represents the upper left corner
            and (1, 1) represents the lower right corner of the element.
            </value>
            <seealso cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform"/>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.RenderScalePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderScale"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.RenderScale">
            <summary>
            Gets or sets the scale of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform"/>. 
            This is a game object property.
            </summary>
            <value>The scale factor.</value>
            <seealso cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform"/>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.RenderRotationPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderRotation"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.RenderRotation">
            <summary>
            Gets or sets the rotation of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform"/>. 
            This is a game object property.
            </summary>
            <value>The rotation angle in radians.</value>
            <seealso cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform"/>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.RenderTranslationPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTranslation"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.RenderTranslation">
            <summary>
            Gets or sets the translation of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform"/>. 
            This is a game object property.
            </summary>
            <value>The translation vector.</value>
            <seealso cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderTransform"/>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.IsFocusedPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsFocused"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.IsFocused">
            <summary>
            Gets a value indicating whether this control has the input focus. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this control has the input focus; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            This value is controlled by the <see cref="T:DigitalRune.Game.UI.FocusManager"/>.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.IsFocusScopePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsFocusScope"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.IsFocusScope">
            <summary>
            Gets or sets a value indicating whether this control is a focus scope. 
            This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this control is a focus scope; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            Within focus scopes the focus can be moved using arrow keys on the keyboard or thumbstick 
            and direction pad on the gamepad. See <see cref="T:DigitalRune.Game.UI.FocusManager"/>.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.AutoUnfocusPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.AutoUnfocus"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.AutoUnfocus">
            <summary>
            Gets or sets a value indicating whether this control clears the focus when the mouse clicks
            another control than the currently focused control. This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this control clears the focus when a control other than the
            currently focused control is clicked; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            For <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>s the property <see cref="P:DigitalRune.Game.UI.Controls.UIControl.AutoUnfocus"/> is usually set because 
            when the user clicks the screen he/she usually wants to interact with the 3D scene behind 
            the screen. The currently selected control should lose the focus.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.FocusablePropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Focusable"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Focusable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> can receive the input 
            focus. This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if this focus can receive the input focus; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            Text blocks are usually not focusable. Buttons and other interactive elements are usually
            focusable. 
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.FocusWhenMouseOverPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.FocusWhenMouseOver"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.FocusWhenMouseOver">
            <summary>
            Gets or sets a value indicating whether the control automatically receives focus when the
            mouse is over the control (without being clicked). This is a game object property.
            </summary>
            <value>
            <see langword="true"/> if the control automatically receives focus when the mouse is over
            the control; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            This property can be set for menus where the focus (= the "selection") should follow the 
            mouse cursor.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.XPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.X"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.X">
            <summary>
            Gets or sets the x-position offset of the control. (Use this only for controls in a 
            <see cref="T:DigitalRune.Game.UI.Controls.Canvas"/> or under the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>.) This is a game object property.
            </summary>
            <value>The x-position offset of the control.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.YPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Y"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Y">
            <summary>
            Gets or sets the y-position offset of the control. (Use this only for controls in a 
            <see cref="T:DigitalRune.Game.UI.Controls.Canvas"/> or under the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>.) This is a game object property.
            </summary>
            <value>The y-position offset of the control.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.WidthPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Width"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Width">
            <summary>
            Gets or sets the user-defined width. 
            This is a game object property.
            </summary>
            <value>
            The user-defined width. If this value is NaN, the desired width of the control is computed
            automatically.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.HeightPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Height"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Height">
            <summary>
            Gets or sets the user-defined height. 
            This is a game object property.
            </summary>
            <value>
            The user-defined height. If this value is NaN, the desired height of the control is computed
            automatically. The default value is NaN
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.MinWidthPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.MinWidth"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.MinWidth">
            <summary>
            Gets or sets the minimal width of the control. 
            This is a game object property.
            </summary>
            <value>The minimal width of the control.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.MinHeightPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.MinHeight"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.MinHeight">
            <summary>
            Gets or sets the minimal height of the control. 
            This is a game object property.
            </summary>
            <value>The minimal height of the control.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.MaxWidthPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.MaxWidth"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.MaxWidth">
            <summary>
            Gets or sets the maximal width of the control. 
            This is a game object property.
            </summary>
            <value>The maximal width of the control.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.MaxHeightPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.MaxHeight"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.MaxHeight">
            <summary>
            Gets or sets the maximal height of the control. 
            This is a game object property.
            </summary>
            <value>The maximal height of the control.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.PaddingPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Padding"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Padding">
            <summary>
            Gets or sets the padding. 
            This is a game object property.
            </summary>
            <value>The padding as 4D vector (left, top, right bottom).</value>
            <remarks>
            How this value is used depends on the control type.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.MarginPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Margin"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.Margin">
            <summary>
            Gets or sets the margin. 
            This is a game object property.
            </summary>
            <value>The margin as 4D vector (left, top, right bottom).</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.HorizontalAlignmentPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.HorizontalAlignment"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of this control. 
            This is a game object property.
            </summary>
            <value>The horizontal alignment.</value>
            <remarks>
            When both a <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Width"/> and a <see cref="P:DigitalRune.Game.UI.Controls.UIControl.HorizontalAlignment"/> of 
            <see cref="F:DigitalRune.Game.UI.HorizontalAlignment.Stretch"/> are set, then the explicitly set width has 
            priority and horizontal alignment will be ignored.
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIControl.VerticalAlignmentPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VerticalAlignment"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of this control. 
            This is a game object property.
            </summary>
            <value>The vertical alignment.</value>
            <remarks>
            When both a <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Height"/> and a <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VerticalAlignment"/> of 
            <see cref="F:DigitalRune.Game.UI.VerticalAlignment.Stretch"/> are set, then the explicitly set height has 
            priority and vertical alignment will be ignored.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.OnUnload">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.Focus">
            <summary>
            Moves the input focus to this control.
            </summary>
            <returns>
            <see langword="true"/> if the focus was moved to this control; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.OnUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.HandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <summary>
            Handles the input.
            </summary>
            <param name="context">The input context.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <summary>
            Called when the control should handle device input.
            </summary>
            <param name="context">The input context.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Game.UI.Controls.UIControl.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)"/> in a 
            derived class, be sure to call the base class's <see cref="M:DigitalRune.Game.UI.Controls.UIControl.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)"/> method. The base
            implementation of this method calls <see cref="M:DigitalRune.Game.UI.Controls.UIControl.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)"/> for all visual children.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.HitTest(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Tests if a position is over a control.
            </summary>
            <param name="control">
            The control. If <see langword="null"/>, the position is checked against this control.
            </param>
            <param name="position">The position.</param>
            <returns>
            <see langword="true"/> if a mouse click at the <paramref name="position"/> can hit
            <paramref name="control"/>.
            </returns>
            <remarks>
            <para>
            The default implementation returns <see langword="true"/> if <paramref name="control"/> is
            this control or <see langword="null"/> and if the <paramref name="position"/> is within the
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualBounds"/>. The default implementation returns always <see langword="true"/> 
            if <paramref name="control"/> is a control other than this control.
            </para>
            <para>
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.HitTest(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Mathematics.Algebra.Vector2F)"/> is automatically called during the input traversal of the visual tree
            to set the <see cref="P:DigitalRune.Game.UI.Controls.InputContext.IsMouseOver"/> flag in the <see cref="T:DigitalRune.Game.UI.Controls.InputContext"/>. 
            It is not recommended to call <see cref="M:DigitalRune.Game.UI.Controls.UIControl.HitTest(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Mathematics.Algebra.Vector2F)"/> manually.
            </para>
            <para>
            This method can be used in two ways: 
            </para>
            <para>
            A) <c>myControl.HitTest(null, position)</c> is called to check if the position is within 
            this control. <see cref="M:DigitalRune.Game.UI.Controls.UIControl.HitTest(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Mathematics.Algebra.Vector2F)"/> can be changed in derived classes to create controls 
            where the hit zone is not rectangular, e.g. a round button. 
            </para>
            <para>
            B) <c>parent.HitTest(child, position)</c> is automatically called by a parent control (e.g.
            a <see cref="T:DigitalRune.Game.UI.Controls.ContentControl"/>) during the input traversal to check "if the parent allows 
            the child to be hit". <see cref="M:DigitalRune.Game.UI.Controls.UIControl.HitTest(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Mathematics.Algebra.Vector2F)"/> can be changed in derived classes to clip the 
            hit zone of the child. For example, a <see cref="T:DigitalRune.Game.UI.Controls.ScrollViewer"/> (which is derived from
            <see cref="T:DigitalRune.Game.UI.Controls.ContentControl"/>) will only return true if the position of the child is within 
            the viewport. The child itself does not know that part of it is invisible.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.Render(DigitalRune.Game.UI.Controls.UIRenderContext)">
            <summary>
            Renders the control (including visual children).
            </summary>
            <param name="context">The render context.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.OnRender(DigitalRune.Game.UI.Controls.UIRenderContext)">
            <summary>
            Called when the control and its visual children should be rendered.
            </summary>
            <param name="context">The render context.</param>
            <remarks>
            <para>
            The base implementation calls <see cref="M:DigitalRune.Game.UI.Rendering.IUIRenderer.Render(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)"/> to let the renderer perform
            the drawing. This method can be overridden in derived classes to perform custom drawing
            using any means. 
            </para>
            <para>
            <strong>Important:</strong> If this method changes the render states or uses a sprite batch
            other than the <see cref="P:DigitalRune.Game.UI.Rendering.IUIRenderer.SpriteBatch"/> of the <see cref="T:DigitalRune.Game.UI.Rendering.IUIRenderer"/>, 
            <see cref="M:DigitalRune.Game.UI.Rendering.IUIRenderer.EndBatch"/> must be called to flush the current sprite batch before
            custom drawing code is executed.
            <code lang="csharp">
            <![CDATA[
            public class CustomControl : UIControl
            {
              ...
            
              protected override void OnRender(RenderContext context)
              {
                // Get the renderer of the screen that owns this control.
                var renderer = Screen.Renderer;
            
                // The renderer batches all SpriteBatch drawing calls together. Since we want to 
                // change the graphics device settings, we have to commit the current batch.
                renderer.EndBatch();
            
                // Do custom rendering here.
                ...
              }
            }
            ]]>
            </code>
            </para>
             </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.BringIntoView">
            <summary>
            Attempts to bring this element into view, within any scrollable regions it is contained
            within.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.GetFocusedChild">
            <summary>
            Gets the visual child where <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsFocusWithin"/> is <see langword="true"/>.
            </summary>
            <returns>The visual child that contains the focus.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.GetControl(System.String)">
            <summary>
            Gets a control by name from the visual subtree of this control.
            </summary>
            <param name="name">The control name.</param>
            <returns>
            The control with the given name; or <see langword="null"/> if no matching control is found.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.UpdateVisualChildrenCopy">
            <summary>
            Updates <see cref="F:DigitalRune.Game.UI.Controls.UIControl._visualChildrenCopy"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.OnPropertyChanged``1(DigitalRune.Game.GameProperty{``0},``0,``0)">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.DesiredWidth">
            <summary>
            Gets the desired width (including <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Margin"/>) (which is computed in
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Measure(DigitalRune.Mathematics.Algebra.Vector2F)"/>).
            </summary>
            <value>The desired width (including <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Margin"/>).</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.DesiredHeight">
            <summary>
            Gets the desired height (including <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Margin"/>) (which is computed in
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Measure(DigitalRune.Mathematics.Algebra.Vector2F)"/>).
            </summary>
            <value>The desired height (including <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Margin"/>).</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.IsMeasureValid">
            <summary>
            Gets a value indicating whether the <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Measure(DigitalRune.Mathematics.Algebra.Vector2F)"/> results 
            (<see cref="P:DigitalRune.Game.UI.Controls.UIControl.DesiredWidth"/> and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.DesiredHeight"/>) are up-to-date.
            </summary>
            <value>
            <see langword="true"/> if <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Measure(DigitalRune.Mathematics.Algebra.Vector2F)"/> results are up-to-date; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            This flag is set to <see langword="false"/> when <see cref="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateMeasure"/> is called.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.ActualX">
            <summary>
            Gets the actual X position of the top left corner of the control's bounds in screen 
            coordinates (computed in <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Arrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)"/>).
            </summary>
            <value>The actual X position of the top left corner in screen coordinates.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.ActualY">
            <summary>
            Gets the actual Y position of the top left corner of the control's bounds in screen 
            coordinates (computed in <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Arrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)"/>).
            </summary>
            <value>The actual Y position of the top left corner in screen coordinates.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.ActualWidth">
            <summary>
            Gets the actual width of the control (computed in 
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Arrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)"/>).
            </summary>
            <value>The actual width of the control.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.ActualHeight">
            <summary>
            Gets the actual height of the control (computed in 
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Arrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)"/>).
            </summary>
            <value>The actual height of the control.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.ActualBounds">
            <summary>
            Gets the actual bounding rectangle of the control (defined by <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualX"/>, 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualY"/>, <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualWidth"/> and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualHeight"/>).
            </summary>
            <value>The actual bounding rectangle of the control in screen coordinates.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.IsArrangeValid">
            <summary>
            Gets a value indicating whether the <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Arrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)"/> results are 
            up-to-date.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Arrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)"/> results are 
            up-to-date; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            This flag is set to <see langword="false"/> when <see cref="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateArrange"/> is called.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.RendererInfo">
            <summary>
            Gets or sets the cached renderer data.
            </summary>
            <value>The cached renderer data.</value>
            <remarks>
            This property is not used by the <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> itself; it is reserved for use by a 
            <see cref="T:DigitalRune.Game.UI.Rendering.IUIRenderer"/>. The renderer can cache data in this property and re-use it as 
            long as <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsVisualValid"/> is <see langword="true"/>. <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsVisualValid"/> 
            is automatically set after <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Render(DigitalRune.Game.UI.Controls.UIRenderContext)"/> was executed and reset when 
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateVisual"/> is called. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.RenderData">
            <summary>
            Gets or sets the cached renderer data.
            </summary>
            <value>The cached renderer data.</value>
            <remarks>
            This property is not used by the <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> itself; it is reserved for use by a 
            <see cref="T:DigitalRune.Game.UI.Rendering.IUIRenderer"/>. The renderer can cache data in this property and re-use it as 
            long as <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsVisualValid"/> is <see langword="true"/>. <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsVisualValid"/> 
            is automatically set after <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Render(DigitalRune.Game.UI.Controls.UIRenderContext)"/> was executed and reset when 
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateVisual"/> is called. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIControl.IsVisualValid">
            <summary>
            Gets a value indicating whether the cached <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderData"/> is up-to-date.
            </summary>
            <value>
            <see langword="true"/> if the cached <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderData"/> is up-to-date; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            This flag is set to <see langword="false"/> when <see cref="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateVisual"/> is called.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateMeasure">
            <summary>
            Invalidates the measurement state (layout) for the control.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateArrange">
            <summary>
            Invalidates the arrange state (layout) for the control.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateVisual">
            <summary>
            Invalidates the cached <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderData"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.UpdateLayout">
            <summary>
            Ensures that all visual child controls of this element are properly updated for layout.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.Measure(DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Updates the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.DesiredWidth"/> and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.DesiredHeight"/> of the control.
            </summary>
            <param name="availableSize">
            The available space that the parent can allocate to this control. The control can ignore
            this parameter and request a larger size.
            </param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.OnMeasure(DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Called by <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Measure(DigitalRune.Mathematics.Algebra.Vector2F)"/> to compute the control-specific desired size.
            </summary>
            <param name="availableSize">
            The available space that the parent can allocate to this control. The <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Margin"/>
            has already been subtracted from this size. The control can ignore this parameter and
            request a larger size. This parameter is used by controls that adapt their size to the
            available space, like wrap panels.
            </param>
            <returns>
            The desired size (without <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Margin"/>).
            </returns>
            <remarks>
            This method does not change the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.DesiredWidth"/> and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.DesiredHeight"/>
            properties, it only returns the desired size as the result of the method. This method must
            call <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Measure(DigitalRune.Mathematics.Algebra.Vector2F)"/> of the visual children.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.Arrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Positions child elements and determines a size for a control. 
            </summary>
            <param name="position">
            The actual position of this control as determined by the parent.
            </param>
            <param name="size">
            The actual size of this control as determined by the parent.
            </param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.OnArrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Called by <see cref="M:DigitalRune.Game.UI.Controls.UIControl.Arrange(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)"/> to arrange the visual children.
            </summary>
            <param name="position">The actual position of this control.</param>
            <param name="size">The actual size of this control.</param>
            <remarks>
            When this method is called, <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualX"/>, <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualY"/>, 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualWidth"/> and <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ActualHeight"/> are already up-to-date.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.Arrange(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Arranges the specified control considering the horizontal and vertical alignment of the
            given control.
            </summary>
            <param name="control">The control.</param>
            <param name="position">The position.</param>
            <param name="constraintSize">The constraint size.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.CreateEvent``1(System.Type,System.String,System.String,System.String,``0)">
            <summary>
            Creates a game object event for a <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>. (This method replaces
            <see cref="M:DigitalRune.Game.GameObject.CreateEvent``1(System.String,System.String,System.String,``0)"/> of the <see cref="T:DigitalRune.Game.GameObject"/> class.)
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="ownerType">The control type.</param>
            <param name="name">The name of the event.</param>
            <param name="category">The category of the event.</param>
            <param name="description">The description of the event.</param>
            <param name="defaultEventArgs">The default event arguments.</param>
            <returns>The ID of the created event.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="ownerType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.CreateProperty``1(System.Type,System.String,System.String,System.String,``0,DigitalRune.Game.UI.Controls.UIPropertyOptions)">
            <summary>
            Creates a game object property for a <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>. (This method replaces
            <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/> of the <see cref="T:DigitalRune.Game.GameObject"/> class.)
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="ownerType">The control type.</param>
            <param name="name">The name of the property.</param>
            <param name="category">The category of the property.</param>
            <param name="description">The description of the property.</param>
            <param name="defaultValue">The default value.</param>
            <param name="options">The <see cref="T:DigitalRune.Game.UI.Controls.UIPropertyOptions"/>.</param>
            <returns>The ID of the created property</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="ownerType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.OverrideDefaultValue``1(System.Type,System.Int32,``0)">
            <summary>
            Overrides the default value of a game object property for a specific class.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="ownerType">The class type.</param>
            <param name="propertyId">The ID of the game object property.</param>
            <param name="defaultValue">The new default value.</param>
            <remarks>
            These class-specific default values are applied to the template when the control is loaded.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="ownerType"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.GetPropertyOptions(System.Int32)">
            <summary>
            Gets the <see cref="T:DigitalRune.Game.UI.Controls.UIPropertyOptions"/> of game object property.
            </summary>
            <param name="propertyId">The ID of the game object property.</param>
            <returns>The <see cref="T:DigitalRune.Game.UI.Controls.UIPropertyOptions"/>.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.SetPropertyOptions(System.Int32,DigitalRune.Game.UI.Controls.UIPropertyOptions)">
            <summary>
            Sets the <see cref="T:DigitalRune.Game.UI.Controls.UIPropertyOptions"/> of a game object property.
            </summary>
            <param name="propertyId">The ID of the game object property.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIControl.ApplyTemplate">
            <summary>
            Creates the template game object with default values defined by the renderer/theme.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.UIPropertyOptions">
            <summary>
            Defines how the property influences layout and rendering.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIPropertyOptions.None">
            <summary>
            No options are specified; the property does not influence the UI.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIPropertyOptions.AffectsMeasure">
            <summary>
            The measure pass of layout compositions is affected by value changes to this property. 
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIPropertyOptions.AffectsArrange">
            <summary>
            The arrange pass of layout compositions is affected by value changes to this property. 
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIPropertyOptions.AffectsRender">
            <summary>
            Some aspect of rendering or layout composition (other than measure or arrange) is affected 
            by value changes to this property.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.UIRenderContext">
            <summary>
            Provides information during rendering of UI controls.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIRenderContext.DeltaTime">
            <summary>
            Gets or sets the size of the current time step.
            </summary>
            <value>The size of the current time step.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIRenderContext.Opacity">
            <summary>
            Gets or sets the absolute opacity.
            </summary>
            <value>The absolute opacity. The default value is 1.0f.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIRenderContext.RenderTransform">
            <summary>
            Gets or sets the absolute render transformation.
            </summary>
            <value>
            The absolute render transformation. The default value is 
            <see cref="F:DigitalRune.Game.UI.Rendering.RenderTransform.Identity"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIRenderContext.Data">
            <summary>
            Gets a generic collection of name/value pairs which can be used to store custom data.
            </summary>
            <value>
            A generic collection of name/value pairs which can be used to store custom data.
            </value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIRenderContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.UIRenderContext"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.UIScreen">
            <summary>
            Manages and draws <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>s and <see cref="T:DigitalRune.Game.UI.Controls.Window"/>s.
            </summary>
            <remarks>
            <para>
            A screen is the root of a tree of <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>s. Controls can be added to the 
            screen using the <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.Children"/> collection. The controls can be positioned using
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.X"/>, <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Y"/> like in a canvas, or using alignment and
            margins as usual.
            </para>
            <para>
            The screen starts all HandleInput/Measure/Arrange/Render traversals of the visual tree of
            <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>s. 
            </para>
            <para>
            Screens are not drawn automatically. <see cref="M:DigitalRune.Game.UI.Controls.UIScreen.Draw(System.TimeSpan)"/> must be called manually to 
            draw the screen and all contained controls. If <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Width"/> and 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Height"/> are not set, the screen fills the whole viewport. The screen
            does not limit the layout size of the child controls. - Children can be positions outside the
            screen area.
            </para>
            <para>
            Per default, screens are not focus scopes (see <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.FocusManager"/>) because usually 
            the 3D scene is drawn behind the screen and the screen should not "absorb" arrow key input or
            thumbstick/direction pad input.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.UIService">
            <summary>
            Gets the <see cref="T:DigitalRune.Game.UI.IUIService"/>.
            </summary>
            <value>The <see cref="T:DigitalRune.Game.UI.IUIService"/>.</value>
            <remarks>
            This property is automatically set when the screen is added to the 
            <see cref="P:DigitalRune.Game.UI.IUIService.Screens"/> collection of a <see cref="T:DigitalRune.Game.UI.IUIService"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.Renderer">
            <summary>
            Gets the renderer that defines the styles and renders controls for this screen.
            </summary>
            <value>The renderer that defines the styles and renders controls for this screen.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.ControlUnderMouse">
            <summary>
            Gets the control under mouse cursor.
            </summary>
            <value>The control under mouse cursor.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.InputEnabled">
            <summary>
            Gets or sets a value indicating whether input is enabled for this screen.
            </summary>
            <value>
            <see langword="true"/> if input is enabled for this screen; otherwise, 
            <see langword="false"/> if the screen and all child controls ignore input.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.FocusManager">
            <summary>
            Gets or sets the <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.FocusManager"/>.
            </summary>
            <value>
            The <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.FocusManager"/>. Can be set to another <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.FocusManager"/> but not to 
            <see langword="null"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.ToolTipManager">
            <summary>
            Gets the <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.ToolTipManager"/>.
            </summary>
            <value>The <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.ToolTipManager"/>.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.Microsoft#Xna#Framework#IDrawable#Visible">
            <summary>
            Returns the same value as <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsVisible"/>.
            </summary>
            <value>
            The same value as <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsVisible"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.ZIndex">
            <summary>
            Gets or sets the z-index that determines the draw order of all 
            <see cref="P:DigitalRune.Game.UI.IUIService.Screens"/> of the same <see cref="T:DigitalRune.Game.UI.IUIService"/>
            </summary>
            <value>
            The z-index that determines the draw order of all <see cref="P:DigitalRune.Game.UI.IUIService.Screens"/> of the 
            same <see cref="T:DigitalRune.Game.UI.IUIService"/>.
            </value>
            <remarks>
            Lower values mean the screen is drawn first, behind other screens. Screens are updated in
            the reverse order: The screen with the highest value is updated first because it covers the
            other screens.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.Microsoft#Xna#Framework#IDrawable#DrawOrder">
            <summary>
            Returns the same value as <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.ZIndex"/>.
            </summary>
            <value>
            The same value as <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.ZIndex"/>.
            </value>
        </member>
        <member name="E:DigitalRune.Game.UI.Controls.UIScreen.Microsoft#Xna#Framework#IDrawable#VisibleChanged">
            <summary>
            Event raised after the <see cref="P:Microsoft.Xna.Framework.IDrawable.Visible"/> property value has changed.
            </summary>
        </member>
        <member name="E:DigitalRune.Game.UI.Controls.UIScreen.Microsoft#Xna#Framework#IDrawable#DrawOrderChanged">
            <summary>
            Event raised after the <see cref="P:Microsoft.Xna.Framework.IDrawable.DrawOrder"/> property value has changed.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIScreen.ToolTipDelayPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.ToolTipDelay"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.ToolTipDelay">
            <summary>
            Gets the time which the mouse has to stand still before a tool tip pops up. 
            This is a game object property.
            </summary>
            <value>The time which the mouse has to stand still before a tool tip pops up.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIScreen.ToolTipOffsetPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.ToolTipOffset"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.ToolTipOffset">
            <summary>
            Gets the offset of the tool tip to the mouse position. 
            This is a game object property.
            </summary>
            <value>The offset of the tool tip to the mouse position.</value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIScreen.MouseWheelScrollDeltaPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.MouseWheelScrollDelta"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.MouseWheelScrollDelta">
            <summary>
            Gets or sets the amount of the delta value of a single mouse wheel rotation increment. 
            This is a game object property.
            </summary>
            <value>
            The amount of the delta value of a single mouse wheel rotation increment.
            </value>
        </member>
        <member name="F:DigitalRune.Game.UI.Controls.UIScreen.MouseWheelScrollLinesPropertyId">
            <summary> 
            The ID of the <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.MouseWheelScrollLines"/> game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.UIScreen.MouseWheelScrollLines">
            <summary>
            Gets or sets the number of lines to scroll when the mouse wheel is rotated. 
            This is a game object property.
            </summary>
            <value>The number of lines to scroll when the mouse wheel is rotated.</value>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIScreen.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIScreen.#ctor(System.String,DigitalRune.Game.UI.Rendering.IUIRenderer)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/> class.
            </summary>
            <param name="name">The name of the screen.</param>
            <param name="renderer">
            The renderer that defines the styles and visual appearance for controls in this screen. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> or <paramref name="renderer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is an empty string.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIScreen.OnUpdate(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIScreen.OnHandleInput(DigitalRune.Game.UI.Controls.InputContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIScreen.OnMeasure(DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIScreen.Draw(Microsoft.Xna.Framework.GameTime)">
            <overloads>
            <summary>
            Draws the screen with all controls.
            </summary>
            </overloads>
            
            <summary>
            Draws the screen with all controls.
            </summary>
            <param name="gameTime">Snapshot of the game's timing state.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="gameTime"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIScreen.Draw(System.TimeSpan)">
            <summary>
            Draws the screen with all controls.
            </summary>
            <param name="deltaTime">The size of the current time step.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIScreen.OnRender(DigitalRune.Game.UI.Controls.UIRenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIScreen.BringToFront(DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Brings a control to the front of the z-order.
            </summary>
            <param name="control">The control.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="control"/> is not a child of this UI screen.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIScreen.OnDrawOrderChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Xna.Framework.IDrawable.DrawOrderChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.UIScreen.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.UI.Controls.UIScreen.VisibleChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
        </member>
        <member name="T:DigitalRune.Game.UI.Controls.VisualChildCollection">
            <summary>
            Manages a collection of child <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>s for a parent <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Controls.VisualChildCollection.IsChanged">
            <summary>
            Gets or sets a value indicating whether the collection is modified.
            </summary>
            <value>
            <see langword="true"/> if this collection is modified; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            This flag is read and reset by the <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.VisualChildCollection.#ctor(DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Controls.VisualChildCollection"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.VisualChildCollection.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.VisualChildCollection.InsertItem(System.Int32,DigitalRune.Game.UI.Controls.UIControl)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.VisualChildCollection.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.VisualChildCollection.SetItem(System.Int32,DigitalRune.Game.UI.Controls.UIControl)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.VisualChildCollection.MoveItem(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.VisualChildCollection.GetParent(DigitalRune.Game.UI.Controls.UIControl)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Controls.VisualChildCollection.SetParent(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIControl)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.FocusManager">
            <summary>
            Controls which UI control has the focus.
            </summary>
            <remarks>
            <para>
            The focus defines which control receives the device input. Controls must be 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Focusable"/> to be able to get the focus. 
            </para>
            <para>
            Focus scopes handle the focus movement. A control is a <see cref="P:DigitalRune.Game.UI.FocusManager.FocusScope"/> if 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.IsFocusScope"/> is set. Per default, only <see cref="T:DigitalRune.Game.UI.Controls.Window"/>s are focus
            scopes. If a control is inside a focus scope is focused, the focus can be moved to another
            control of the same focus scope using the arrow keys on the keyboard, the left thumb stick or
            the DPad on the gamepad.
            </para>
            <para>
            Each <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/> has a <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.FocusManager"/>. It is allowed to
            exchange the focus manager instance. Derived focus manager classes can override 
            <see cref="M:DigitalRune.Game.UI.FocusManager.OnMoveFocus(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{DigitalRune.Game.UI.Controls.UIControl})"/> to change how the focus moves.
            </para>
            <para>
            Sometimes it is desirable to automatically move the focus to the control under the mouse, e.g.
            when the mouse moves over menu entries. For this <see cref="P:DigitalRune.Game.UI.Controls.UIControl.FocusWhenMouseOver"/> 
            can be set for a control, e.g. for the control that represents the menu entry. 
            </para>
            <para>
            The UI control property <see cref="P:DigitalRune.Game.UI.Controls.UIControl.AutoUnfocus"/> can be set if the focus should be
            removed from the control (and its nested controls) if the user clicks onto the non-focusable
            space of the screen. <see cref="P:DigitalRune.Game.UI.Controls.UIControl.AutoUnfocus"/> is usually set for controls that are 
            focus scopes or for the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.FocusManager.Screen">
            <summary>
            Gets the screen.
            </summary>
            <value>The screen.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.FocusManager.FocusedControl">
            <summary>
            Gets the control that currently has the focus.
            </summary>
            <value>The focused control.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.FocusManager.FocusScope">
            <summary>
            Gets the focus scope that currently contains the focused control.
            </summary>
            <value>The focus scope.</value>
            <remarks>
            This value can be <see langword="null"/>, e.g. if the focused control is a child of the
            <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/> and the screen is no focus scope. (Per default, screens are not
            focus scopes.)
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.FocusManager.#ctor(DigitalRune.Game.UI.Controls.UIScreen)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.FocusManager"/> class.
            </summary>
            <param name="screen">The screen.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="screen"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.FocusManager.ClearFocus">
            <summary>
            Removes the focus from the current <see cref="P:DigitalRune.Game.UI.FocusManager.FocusedControl"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.FocusManager.Focus(DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Moves focus to a control.
            </summary>
            <param name="control">
            The control that should get the focus. (If <paramref name="control"/> is 
            <see langword="null"/>, this method does nothing. Use <see cref="M:DigitalRune.Game.UI.FocusManager.ClearFocus"/> to remove the
            focus from a control.)
            </param>
            <returns>
            <see langword="true"/> if the focus was moved; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            Disabled or invisible controls cannot be focused. If the <paramref name="control"/> is not
            itself <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Focusable"/>, the method tries to focus a child control.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.FocusManager.MoveFocus(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.Input.LogicalPlayerIndex)">
            <summary>
            Checks input devices and moves the focus if according input is detected.
            </summary>
            <param name="control">The control.</param>
            <param name="allowedPlayer">The player that controls the input.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.FocusManager.OnMoveFocus(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{DigitalRune.Game.UI.Controls.UIControl})">
            <summary>
            Called when the focus should be moved to another control.
            </summary>
            <param name="moveLeft">If set to <see langword="true"/> the focus should move left.</param>
            <param name="moveRight">If set to <see langword="true"/> the focus should move right.</param>
            <param name="moveUp">If set to <see langword="true"/> the focus should move up.</param>
            <param name="moveDown">If set to <see langword="true"/> the focus should move down.</param>
            <param name="focusableControls">The focusable controls of the current focus scopes.</param>
            <returns>The target control that should receive the focus.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.FocusManager.GetFocusableControls(DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Recursively collects all focusable controls of the same focus scope.
            </summary>
            <param name="control">The control.</param>
            <remarks>
            The focusable controls are stored in _focusableControls. <see cref="P:DigitalRune.Game.UI.FocusManager.FocusedControl"/> will 
            be excluded from the list.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.FocusManager.GetDistance(DigitalRune.Game.UI.RectangleF,DigitalRune.Game.UI.RectangleF)">
            <summary>
            Gets the distance vector between the closest points (pointing from the first to the second 
            rectangle).
            </summary>
            <param name="rectangle0">The first rectangle.</param>
            <param name="rectangle1">The second rectangle.</param>
            <returns>
            The distance vector between the closest points of the two rectangle. The vector points from 
            <paramref name="rectangle0"/> to <paramref name="rectangle1"/>. The vector is (0, 0) if the 
            rectangles are intersecting.
            </returns>
        </member>
        <member name="T:DigitalRune.Game.UI.HorizontalAlignment">
            <summary>
            Describes how a child element is horizontally positioned or stretched within a parent's layout
            slot. 
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.HorizontalAlignment.Left">
            <summary>
            The child element is aligned to the left of the parent's layout slot. 
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.HorizontalAlignment.Center">
            <summary>
            The child element is aligned to the center of the parent's layout slot.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.HorizontalAlignment.Right">
            <summary>
            The child element is aligned to the right of the parent's layout slot.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.HorizontalAlignment.Stretch">
            <summary>
            The child element stretches to fill the parent's layout slot. 
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.KeyMap">
            <summary>
            Maps XNA <see cref="T:Microsoft.Xna.Framework.Input.Keys"/> (key codes) to characters (keyboard layout).
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.KeyMap.Item(Microsoft.Xna.Framework.Input.Keys,DigitalRune.Game.Input.ModifierKeys)">
            <summary>
            Gets or sets the <see cref="T:System.Char"/> with the specified key and modifiers.
            </summary>
            <remarks>
            If an entry is set that does not yet exist, the entry is added to the map. If an entry is
            fetched that does not exist, 0 is returned.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.KeyMap.AutoKeyMap">
            <summary>
            Gets the an automatic key mapping for the current culture.
            </summary>
            <value>An automatic key mapping.</value>
            <remarks>
            <para>
            For Windows: Windows OS functions are used to get key mapping for the active keyboard 
            layout. 
            </para>
            <para>
            For Xbox 360: An English key mapping is used for USB keyboards. For the ChatPad an English
            or German key mapping is used, based on the current culture.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.KeyMap.GermanKeyMap">
            <summary>
            Gets the German key mapping.
            </summary>
            <value>The German key mapping.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.KeyMap.EnglishKeyMap">
            <summary>
            Gets the English key mapping.
            </summary>
            <value>The English key mapping.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.KeyMap.EnglishKeyMapGermanChatPad">
            <summary>
            Gets the English key mapping, but with a German key mapping for the ChatPad.
            </summary>
            <value>The English key mapping, but with a German key mapping for the ChatPad.</value>
        </member>
        <member name="M:DigitalRune.Game.UI.KeyMap.#ctor">
            <overloads>
            <summary>
            Initializes a new empty instance of the <see cref="T:DigitalRune.Game.UI.KeyMap"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new empty instance of the <see cref="T:DigitalRune.Game.UI.KeyMap"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.KeyMap.#ctor(DigitalRune.Game.UI.KeyMap)">
            <summary>
            Initializes a instance of the <see cref="T:DigitalRune.Game.UI.KeyMap"/> class with the entries
            from another <see cref="T:DigitalRune.Game.UI.KeyMap"/>.
            </summary>
            <param name="source">The source map that will be cloned.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.KeyMap.Load(System.Xml.XmlReader)">
            <summary>
            Loads the key map entries.
            </summary>
            <param name="reader">
            An XML reader for th XML document containing the key map entries.
            </param>
        </member>
        <member name="M:DigitalRune.Game.UI.KeyMap.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the key map entries.
            </summary>
            <param name="writer"> The XML writer to which the key map is written.</param>
        </member>
        <member name="T:DigitalRune.Game.UI.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Game.UI"/> namespace provides general types to manage a graphical
            user interface (GUI).
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Orientation">
            <summary>
            Defines the different orientations that a control or layout can have. 
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Orientation.Vertical">
            <summary>
            Control or layout should be vertically oriented. 
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Orientation.Horizontal">
            <summary>
            Control or layout should be horizontally oriented
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.RectangleF">
            <summary>
            Represents a 2-dimensional rectangle (single precision).
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.RectangleF.Empty">
            <summary>
            An empty rectangle (all values set to zero).
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.RectangleF.X">
            <summary>
            The x-coordinate of the rectangle. (Same as <see cref="P:DigitalRune.Game.UI.RectangleF.Left"/>.)
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.RectangleF.Y">
            <summary>
            The y-coordinate of the rectangle. (Same as <see cref="P:DigitalRune.Game.UI.RectangleF.Top"/>.)
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.RectangleF.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.RectangleF.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.RectangleF.Left">
            <summary>
            Gets the x-coordinate of the left side of the rectangle.
            </summary>
            <value>The x-coordinate of the left side of the rectangle.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.RectangleF.Right">
            <summary>
            Gets the x-coordinate of the right side of the rectangle.
            </summary>
            <value>The x-coordinate of the right side of the rectangle.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.RectangleF.Top">
            <summary>
            Gets the y-coordinate of the top side of the rectangle.
            </summary>
            <value>The y-coordinate of the top side of the rectangle.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.RectangleF.Bottom">
            <summary>
            Gets the y-coordinate of the bottom side of the rectangle.
            </summary>
            <value>The y-coordinate of the bottom side of the rectangle.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.RectangleF.Location">
            <summary>
            Gets or sets the position of the upper, left corner of the rectangle.
            </summary>
            <value>The position of the upper, left corner of the rectangle.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.RectangleF.Size">
            <summary>
            Gets or sets the size (width, height) of the rectangle.
            </summary>
            <value>The size (width, height) of the rectangle.</value>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.RectangleF"/> struct.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.RectangleF"/> struct with the given values.
            </summary>
            <param name="x">The x-coordinate of the rectangle.</param>
            <param name="y">The y-coordinate of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.#ctor(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.RectangleF"/> struct from a 
            <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.Equals(DigitalRune.Game.UI.RectangleF)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.op_Equality(DigitalRune.Game.UI.RectangleF,DigitalRune.Game.UI.RectangleF)">
            <summary>
            Compares two <see cref="T:DigitalRune.Game.UI.RectangleF"/>s to determine whether they are the same.
            </summary>
            <param name="rectangle1">The first rectangle.</param>
            <param name="rectangle2">The second rectangle.</param>
            <returns>
            <see langword="true"/> if the rectangles are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.op_Inequality(DigitalRune.Game.UI.RectangleF,DigitalRune.Game.UI.RectangleF)">
            <summary>
            Compares two <see cref="T:DigitalRune.Game.UI.RectangleF"/>s to determine whether they are the different.
            </summary>
            <param name="rectangle1">The first rectangle.</param>
            <param name="rectangle2">The second rectangle.</param>
            <returns>
            <see langword="true"/> if the rectangles are different; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.Contains(DigitalRune.Mathematics.Algebra.Vector2F)">
            <overloads>
            <summary>
            Determines whether the rectangle contains a point or rectangle.
            </summary>
            </overloads>
            
            <summary>
            Determines whether rectangle contains the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>
            <see langword="true"/> if the rectangle contains the point; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.Contains(DigitalRune.Game.UI.RectangleF)">
            <summary>
            Determines whether rectangle contains the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
            <see langword="true"/> if this rectangle contains <paramref name="rectangle"/>; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.Intersects(DigitalRune.Game.UI.RectangleF)">
            <summary>
            Determines whether this rectangle intersects with the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>
            <see langword="true"/> if the rectangle intersect; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.Intersect(DigitalRune.Game.UI.RectangleF,DigitalRune.Game.UI.RectangleF)">
            <summary>
            Creates a rectangle that contains the overlap between the given rectangles.
            </summary>
            <param name="rectangle1">The first rectangle.</param>
            <param name="rectangle2">The second rectangle.</param>
            <returns>
            The overlap between <paramref name="rectangle1"/> and <paramref name="rectangle2"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.Union(DigitalRune.Game.UI.RectangleF,DigitalRune.Game.UI.RectangleF)">
            <summary>
            Creates the smallest rectangle that contains the given rectangles.
            </summary>
            <param name="rectangle1">The first rectangle.</param>
            <param name="rectangle2">The second rectangle.</param>
            <returns>
            The smallest rectangle that contains <paramref name="rectangle1"/> and 
            <paramref name="rectangle2"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.ToRectangle(System.Boolean)">
            <summary>
            Converts the <see cref="T:DigitalRune.Game.UI.RectangleF"/> (floating-point, single precision) to a 
            <see cref="T:Microsoft.Xna.Framework.Rectangle"/> (integer precision).
            </summary>
            <param name="round">
            If set to <see langword="true"/> the values will be rounded; otherwise, the decimal part
            will be truncated.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.ToString">
            <overloads>
            <summary>
            Returns the string representation of this rectangle.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this rectangle.
            </summary>
            <returns>The string representation of this rectangle.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.RectangleF.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this rectangle using the specified culture-specific
            format information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information
            </param>
            <returns>The string representation of this rectangle.</returns>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.IUIRenderer">
            <summary>
            Manages and renders the visual appearance of a UI.
            </summary>
            <remarks>
            <para>
            A renderer draws a control when the <see cref="M:DigitalRune.Game.UI.Rendering.IUIRenderer.Render(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)"/> method is called. Controls are
            usually rendered by copying images from a texture atlas to the screen - but different 
            renderers can use different methods. The renderer has a <see cref="P:DigitalRune.Game.UI.Rendering.IUIRenderer.SpriteBatch"/> that is used
            to render the images. <see cref="M:DigitalRune.Game.UI.Rendering.IUIRenderer.BeginBatch"/> can be called to start a batch with the
            default settings of the renderer. <see cref="M:DigitalRune.Game.UI.Rendering.IUIRenderer.BeginBatch"/> is normally automatically called
            when a <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/> is rendered and the batch is finished with 
            <see cref="M:DigitalRune.Game.UI.Rendering.IUIRenderer.EndBatch"/> when the whole screen was rendered. This way all controls are rendered
            as a single batch. If a control must be rendered with different render states or a different
            sprite batch, <see cref="M:DigitalRune.Game.UI.Rendering.IUIRenderer.EndBatch"/> must be called to flush the current batch.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.IUIRenderer.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.IUIRenderer.SpriteBatch">
            <summary>
            Gets the sprite batch that is used to draw all images for the UI controls.
            </summary>
            <value>The sprite batch that is used to draw all images for the UI controls.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.IUIRenderer.Templates">
            <summary>
            Gets the UI control templates that define the game object properties for the different 
            styles.
            </summary>
            <value>
            The UI control templates that define the game object properties for the different styles.
            </value>
            <remarks>
            A renderer defines the style of controls. When controls are loaded, they use
            <see cref="M:DigitalRune.Game.UI.Rendering.IUIRenderer.GetAttribute``1(System.String,System.String,``0@)"/> to initialize their properties. The <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>
            creates a template game object for each style and caches the template in this dictionary.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.IUIRenderer.GetAttribute``1(System.String,System.String,``0@)">
            <summary>
            Gets a style-specific attribute value.
            </summary>
            <typeparam name="T">The type of the attribute value.</typeparam>
            <param name="style">The style.</param>
            <param name="name">The name of the attribute.</param>
            <param name="result">The attribute value.</param>
            <returns>
            <see langword="true"/> if the renderer can provide a value for the attribute; otherwise, 
            <see langword="false"/> if the renderer does not know the style or the attribute.
            </returns>
            <remarks>
            The renderer can define the visual style of the <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>s. When a control is 
            loaded, it initializes its properties with values provided by this method.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.IUIRenderer.GetCursor(System.String)">
            <summary>
            Gets a mouse cursor.
            </summary>
            <param name="name">
            The name of the mouse cursor. This name is any string - usually the asset name - that 
            identifies the cursor, e.g. "Wait". Can be <see langword="null"/> to get the default 
            cursor.
            </param>
            <returns>The mouse cursor.</returns>
            <remarks>
            This object must be of type <strong>System.Windows.Forms.Cursor</strong>. (The type 
            <see cref="T:System.Object"/> is used to avoid referencing 
            <strong>System.Windows.Forms.dll</strong> in this portable library.)
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.IUIRenderer.GetFont(System.String)">
            <summary>
            Gets a sprite font.
            </summary>
            <param name="name">
            The name of the font. This name is any string - usually the asset name - that identifies the 
            font, e.g. "Console". Can be <see langword="null"/> to get the default font.
            </param>
            <returns>The font.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.IUIRenderer.GetTexture(System.String)">
            <summary>
            Gets a texture.
            </summary>
            <param name="name">
            The name of the texture. This name is any string - usually the asset name - that identifies 
            the texture, e.g. "UITexture". Can be <see langword="null"/> to get the default texture.
            </param>
            <returns>
            The font.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.IUIRenderer.BeginBatch">
            <summary>
            Calls the <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})"/> method of the
            <see cref="P:DigitalRune.Game.UI.Rendering.IUIRenderer.SpriteBatch"/> with default settings.
            </summary>
            <remarks>
            This method remembers if it was already called. Redundant calls of this method are safe.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.IUIRenderer.Render(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)">
            <summary>
            Renders the specified control.
            </summary>
            <param name="control">The control.</param>
            <param name="context">The render context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.IUIRenderer.EndBatch">
            <summary>
            Calls <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End"/> method of the
            <see cref="P:DigitalRune.Game.UI.Rendering.IUIRenderer.SpriteBatch"/> to commit the current batch.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Game.UI.Rendering"/> namespace provides types for rendering the
            graphical user interface.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.RenderTransform">
            <summary>
            Represents a render transformation.
            </summary>
            <remarks>
            <para>
            The render transformation defines a 2D SRT transformation: Scaling followed by a rotation 
            followed by a translation. The center of the scaling and rotation can be set explicitly.
            </para>
            <para>
            Note that a render transformation cannot be inverted. The inverse is not an SRT 
            transformation. But you can convert the render transformation to a 3x3 matrix.
            </para>
            <para>
            Render transformations can be combined using multiplication. The order of the transformations 
            is right-to-left - the same as when using matrices (<see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/>, etc.). 
            </para>
            <para>
            <strong>SpriteBatch Rendering:</strong> The render transformation also provides wrapper 
            methods for the Draw-routines of the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>. The render transformation will
            be automatically applied to all sprites and strings that are drawn.
            </para>
            <para>
            <strong>Important:</strong> The combination of rotations and non-uniform scaling can be 
            problematic. Non-uniform scaling should only be used if the non-uniform scale is set by the
            last render transform in a hierarchy. (E.g. if an element in a visual tree has a rotation and
            the parent element has a non-uniform scaling, the child element won't be rendered correctly.)
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Rendering.RenderTransform.Identity">
            <summary>
            The identity transform.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Rendering.RenderTransform.Origin">
            <summary>
            The origin of the render transformations in screen coordinates.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Rendering.RenderTransform.Scale">
            <summary>
            The scale.
            </summary>
            <remarks>
            Note that some combinations of non-uniform scalings and rotations are not supported. (See
            class description of <see cref="T:DigitalRune.Game.UI.Rendering.RenderTransform"/>.)
            </remarks>
        </member>
        <member name="F:DigitalRune.Game.UI.Rendering.RenderTransform.Rotation">
            <summary>
            The rotation given as the angle in radians.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Rendering.RenderTransform.Translation">
            <summary>
            The translation.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.#ctor(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,System.Single,DigitalRune.Mathematics.Algebra.Vector2F)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Rendering.RenderTransform"/> struct.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Rendering.RenderTransform"/> struct.
            </summary>
            <param name="origin">The origin of the transformations in screen coordinates.</param>
            <param name="scale">The scale factors.</param>
            <param name="rotation">The rotation angle in radians.</param>
            <param name="translation">The translation vector.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.#ctor(DigitalRune.Mathematics.Algebra.Vector2F,System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,System.Single,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Rendering.RenderTransform"/> struct.
            </summary>
            <param name="position">
            The upper, left corner of the current element in screen coordinates.
            </param>
            <param name="width">The width of the element.</param>
            <param name="height">The height of the element.</param>
            <param name="relativeOrigin">
            The relative origin of the render transformation. (0, 0) represents the upper, left corner
            and (1, 1) represents the lower, right corner of the element.
            </param>
            <param name="scale">The scale factors.</param>
            <param name="rotation">The rotation angle in radians.</param>
            <param name="translation">The translation vector.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.Equals(DigitalRune.Game.UI.Rendering.RenderTransform)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.op_Equality(DigitalRune.Game.UI.Rendering.RenderTransform,DigitalRune.Game.UI.Rendering.RenderTransform)">
            <summary>
            Compares two <see cref="T:DigitalRune.Game.UI.Rendering.RenderTransform"/>s to determine whether they are the same.
            </summary>
            <param name="transform1">The first render transform.</param>
            <param name="transform2">The second render transform.</param>
            <returns>
            <see langword="true"/> if the render transforms are equal; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.op_Inequality(DigitalRune.Game.UI.Rendering.RenderTransform,DigitalRune.Game.UI.Rendering.RenderTransform)">
            <summary>
            Compares two <see cref="T:DigitalRune.Game.UI.Rendering.RenderTransform"/>s to determine whether they are the different.
            </summary>
            <param name="transform1">The first render transform.</param>
            <param name="transform2">The second render transform.</param>
            <returns>
            <see langword="true"/> if the render transforms are different; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.ToRenderPosition(DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Transforms a position.
            </summary>
            <param name="position">The position in screen coordinates.</param>
            <returns>The transformed position in screen coordinates.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.FromRenderPosition(DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Transforms a position by the inverse of this render transformation.
            </summary>
            <param name="position">The transformed position in screen coordinates.</param>
            <returns>The position in screen coordinates.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.ToRenderDirection(DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Transforms a direction.
            </summary>
            <param name="direction">The direction.</param>
            <returns>The transformed direction.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.FromRenderDirection(DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Transforms a direction by the inverse of this render transformation.
            </summary>
            <param name="direction">The transformed direction.</param>
            <returns>The direction.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.Transform(DigitalRune.Game.UI.RectangleF)">
            <summary>
            Transforms the specified rectangle. (Does not work with rotations!)
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>The transformed rectangle.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.op_Multiply(DigitalRune.Game.UI.Rendering.RenderTransform,DigitalRune.Game.UI.Rendering.RenderTransform)">
            <summary>
            Multiplies two render transformation.
            </summary>
            <param name="transform2">The first render transformation.</param>
            <param name="transform1">The second render transformation.</param>
            <returns>
            The product <paramref name="transform2"/> * <paramref name="transform1"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.Multiply(DigitalRune.Game.UI.Rendering.RenderTransform,DigitalRune.Game.UI.Rendering.RenderTransform)">
            <summary>
            Multiplies two render transformation.
            </summary>
            <param name="transform2">The first render transformation.</param>
            <param name="transform1">The second render transformation.</param>
            <returns>
            The product <paramref name="transform2"/> * <paramref name="transform1"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.ToMatrix33F">
            <summary>
            Converts this render transformation to a 3x3 matrix.
            </summary>
            <returns>
            A 3x3-matrix that represents the same transformation.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.ToMatrix22F">
            <summary>
            Converts this render transformation to a 2x2 matrix that only represents the scaling and the
            rotation (no translation).
            </summary>
            <returns>
            A 2x2-matrix that represents the scaling and the rotation (no translation).
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.op_Implicit(DigitalRune.Game.UI.Rendering.RenderTransform)~DigitalRune.Mathematics.Algebra.Matrix33F">
            <summary>
            Converts a render transformation to a 3x3 matrix.
            </summary>
            <param name="transform">The render transformation.</param>
            <returns>
            A 3x3-matrix that represents the same transformation.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.op_Implicit(DigitalRune.Game.UI.Rendering.RenderTransform)~DigitalRune.Mathematics.Algebra.Matrix22F">
            <summary>
            Converts a render transformation to a 2x2 matrix that only represents the scaling and the
            rotation (no translation).
            </summary>
            <param name="transform">The render transformation.</param>
            <returns>
            A 2x2-matrix that represents the scaling and the rotation (no translation).
            </returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
            <overloads>
            <summary>
            Transforms a sprite and adds it to a batch of sprites for rendering. 
            </summary>
            </overloads>
            
            <summary>
            Transforms a sprite and adds it to a batch of sprites for rendering using the specified 
            texture, position and color. 
            </summary>
            <param name="spriteBatch">The sprite batch for rendering.</param>
            <param name="texture">The texture.</param>
            <param name="position">The location in screen coordinates to draw the sprite.</param>
            <param name="color">
            The color to tint a sprite. Use white for full color with no tinting.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="spriteBatch"/> or <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Mathematics.Algebra.Vector2F,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color)">
            <summary>
            Transforms a sprite and adds it to a batch of sprites for rendering using the specified 
            texture, position, source rectangle and color. 
            </summary>
            <param name="spriteBatch">The sprite batch for rendering.</param>
            <param name="texture">The texture.</param>
            <param name="position">The location in screen coordinates to draw the sprite.</param>
            <param name="sourceRectangle">
            A rectangle that specifies (in texels) the source texels from a texture. Use 
            <see langword="null"/> to draw the entire texture.
            </param>
            <param name="color">
            The color to tint a sprite. Use white for full color with no tinting.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="spriteBatch"/> or <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Game.UI.RectangleF,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color)">
            <summary>
            Transforms a sprite and adds it to a batch of sprites for rendering using the specified 
            texture, position, source rectangle and color. 
            </summary>
            <param name="spriteBatch">The sprite batch for rendering.</param>
            <param name="texture">The texture.</param>
            <param name="destinationRectangle">
            A rectangle that specifies (in screen coordinates) the destination for drawing the sprite. 
            If this rectangle is not the same size as the source rectangle, the sprite will be scaled to 
            fit.
            </param>
            <param name="sourceRectangle">
            A rectangle that specifies (in texels) the source texels from a texture. Use 
            <see langword="null"/> to draw the entire texture.
            </param>
            <param name="color">
            The color to tint a sprite. Use white for full color with no tinting.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="spriteBatch"/> or <paramref name="texture"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
            <overloads>
            <summary>
            Transforms a string and adds it to a batch of sprites for rendering.
            </summary>
            </overloads>
            
            <summary>
            Transforms a string and adds it to a batch of sprites for rendering using the specified 
            font, text, position, and color.
            </summary>
            <param name="spriteBatch">The sprite batch for rendering.</param>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">The text string.</param>
            <param name="position">The location in screen coordinates to draw the sprite.</param>
            <param name="color">
            The color to tint a sprite. Use white for full color with no tinting.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="spriteBatch"/> or <paramref name="spriteFont"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
            <summary>
            Transforms a string and adds it to a batch of sprites for rendering using the specified 
            font, text, position, and color.
            </summary>
            <param name="spriteBatch">The sprite batch for rendering.</param>
            <param name="spriteFont">A font for displaying text.</param>
            <param name="text">The text string.</param>
            <param name="position">The location in screen coordinates to draw the sprite.</param>
            <param name="color">
            The color to tint a sprite. Use white for full color with no tinting.
            </param>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.ToString">
            <overloads>
            <summary>
            Returns the string representation of this render transform.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this render transform.
            </summary>
            <returns>The string representation of this render transform.</returns>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.RenderTransform.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this pose using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information
            </param>
            <returns>The string representation of this pose.</returns>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.Theme">
            <summary>
            Represents a UI theme that defines the properties and visual appearance of UI controls.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Game.UI.Rendering.Theme"/> can be built at runtime, but usually a theme is defined in an XML files 
            that is processed in the XNA Content Pipeline and loaded via the XNA ContentManager.
            </para>
            <para>
            The XML file specifies mouse cursors (only used in Windows), fonts, a texture and styles. The 
            texture is a texture atlas containing all images that are necessary to render the controls. 
            The styles define property values and the visual appearance of UI controls.
            </para>
            <para>
            <strong>XML Format:</strong>
            See the example themes to learn how the XML file is structured. Colors, rectangles and 4D 
            vectors are specified using 4 float values separated with commas, semicolons and/or spaces, 
            for example "100,200,300,400". (Colors are defined as <i>"red,green,blue,alpha"</i>, 
            rectangles are defined as <i>"x,y,width,height"</i>, borders/margins/paddings are defined as 
            "left,top,right,bottom".)
            </para>
            <para>
            <strong>Processing and Loading:</strong>
            To load a theme add the XML file to an XNA Content Project. The content project needs to 
            reference the following DigitalRune content pipeline assemblies: 
            "DigitalRune.Mathematics.Content.Pipeline.dll" and DigitalRune.Game.UI.Content.Pipeline.dll".
            Once the assembly references are added, set the <strong>Content Importer</strong> and the 
            <strong>Content Processor</strong> of the XML file to "UI Theme - DigitalRune". The theme and 
            all related files are then automatically built together with the content project.
            </para>
            <para>
            At runtime the theme can be loaded using the game's ContentManager.
            <code lang="csharp">
            <![CDATA[
            Theme theme = Content.Load<Theme>("BlendBlue");
            ]]>
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.Theme.Content">
            <summary>
            Gets or sets the content manager.
            </summary>
            <value>The content manager.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.Theme.Cursors">
            <summary>
            Gets the cursor definitions.
            </summary>
            <value>The cursors.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.Theme.Fonts">
            <summary>
            Gets the fonts definitions.
            </summary>
            <value>The fonts.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.Theme.Textures">
            <summary>
            Gets the textures.
            </summary>
            <value>The textures.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.Theme.Styles">
            <summary>
            Gets the styles of the controls.
            </summary>
            <value>The styles.</value>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.Theme.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Rendering.Theme"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.ThemeAttribute">
            <summary>
            Represents an attribute of the UI theme (<see cref="P:DigitalRune.Game.UI.Rendering.ThemeAttribute.Name"/> and <see cref="P:DigitalRune.Game.UI.Rendering.ThemeAttribute.Value"/>).
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeAttribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
            <value>The name of the attribute.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeAttribute.Value">
            <summary>
            Gets or sets the value of the attribute.
            </summary>
            <value>The value of the attribute.</value>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.ThemeCursor">
            <summary>
            Represents a mouse cursor of the UI theme.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeCursor.Name">
            <summary>
            Gets the name of the cursor.
            </summary>
            <value>The name of the cursor.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeCursor.IsDefault">
            <summary>
            Gets or sets a value indicating whether this cursor is the default cursor.
            </summary>
            <value>
            <see langword="true"/> if this cursor is the default cursor; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeCursor.Cursor">
            <summary>
            Gets or sets the cursor.
            </summary>
            <value>The cursor.</value>
            <remarks>
            This object must be of type <strong>System.Windows.Forms.Cursor</strong>. (The type 
            <see cref="T:System.Object"/> is used to avoid referencing 
            <strong>System.Windows.Forms.dll</strong> in this portable library.)
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.ThemeFont">
            <summary>
            Represents a font of the UI theme.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeFont.Name">
            <summary>
            Gets or sets the name of the font.
            </summary>
            <value>The name of the font.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeFont.IsDefault">
            <summary>
            Gets or sets a value indicating whether this font is the default font.
            </summary>
            <value>
            <see langword="true"/> if this font is the default font; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeFont.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.ThemeHelper">
            <summary>
            Provides methods that help to load and parse a UI theme.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.ThemeHelper.ParseHorizontalAlignment(System.String)">
            <summary>
            Converts the specified string representation of a horizontal alignment to its 
            <see cref="T:DigitalRune.Game.UI.HorizontalAlignment"/> equivalent, or throws an exception if the string cannot be
            converted to a <see cref="T:DigitalRune.Game.UI.HorizontalAlignment"/>.
            </summary>
            <param name="value">
            The value. If this value is <see langword="null"/> or an empty string, 
            <see cref="F:DigitalRune.Game.UI.HorizontalAlignment.Left"/> is returned as the default value.
            </param>
            <returns>The <see cref="T:DigitalRune.Game.UI.HorizontalAlignment"/>.</returns>
            <exception cref="T:System.FormatException">
            Cannot convert <paramref name="value"/> to <see cref="T:DigitalRune.Game.UI.HorizontalAlignment"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.ThemeHelper.ParseVerticalAlignment(System.String)">
            <summary>
            Converts the specified string representation of a vertical alignment to its 
            <see cref="T:DigitalRune.Game.UI.VerticalAlignment"/> equivalent, or throws an exception if the string cannot be
            converted to a <see cref="T:DigitalRune.Game.UI.VerticalAlignment"/>.
            </summary>
            <param name="value">
            The value. If this value is <see langword="null"/> or an empty string, 
            <see cref="F:DigitalRune.Game.UI.VerticalAlignment.Top"/> is returned as the default value.
            </param>
            <returns>The <see cref="T:DigitalRune.Game.UI.VerticalAlignment"/>.</returns>
            <exception cref="T:System.FormatException">
            Cannot convert <paramref name="value"/> to <see cref="T:DigitalRune.Game.UI.VerticalAlignment"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.ThemeHelper.ParseTileMode(System.String)">
            <summary>
            Converts the specified string representation of a tile mode to its 
            <see cref="T:DigitalRune.Game.UI.Rendering.TileMode"/> equivalent, or throws an exception if the string cannot be
            converted to a <see cref="T:DigitalRune.Game.UI.Rendering.TileMode"/>.
            </summary>
            <param name="value">
            The value. If this value is <see langword="null"/> or an empty string, 
            <see cref="F:DigitalRune.Game.UI.Rendering.TileMode.None"/> is returned as the default value.
            </param>
            <returns>The <see cref="T:DigitalRune.Game.UI.Rendering.TileMode"/>.</returns>
            <exception cref="T:System.FormatException">
            Cannot convert <paramref name="value"/> to <see cref="T:DigitalRune.Game.UI.Rendering.TileMode"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.ThemeHelper.ParseColor(System.String,Microsoft.Xna.Framework.Color)">
            <summary>
            Converts the specified string representation of a color to its <see cref="T:Microsoft.Xna.Framework.Color"/> 
            equivalent, or throws an exception if the string cannot be converted to a 
            <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </summary>
            <param name="value">
            The value. If this value is <see langword="null"/> or an empty string, the 
            <paramref name="defaultColor"/> is returned.
            </param>
            <param name="defaultColor">The default color that is used for empty strings.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Color"/>.</returns>
            <exception cref="T:System.FormatException">
            Cannot convert <paramref name="value"/> to <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.ThemeHelper.ParseVector2F(System.String)">
            <summary>
            Converts the specified string representation of a 2-dimensional vector to its 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> equivalent, or throws an exception if the string cannot be
            converted to a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <param name="value">
            The value. If this value is <see langword="null"/> or an empty string, 
            <see cref="F:DigitalRune.Mathematics.Algebra.Vector2F.Zero"/> is returned as the default value.
            </param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.</returns>
            <exception cref="T:System.FormatException">
            Cannot convert <paramref name="value"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.ThemeHelper.ParseVector3F(System.String)">
            <summary>
            Converts the specified string representation of a 3-dimensional vector to its 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> equivalent, or throws an exception if the string cannot be
            converted to a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <param name="value">
            The value. If this value is <see langword="null"/> or an empty string, 
            <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Zero"/> is returned as the default value.
            </param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.</returns>
            <exception cref="T:System.FormatException">
            Cannot convert <paramref name="value"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.ThemeHelper.ParseVector4F(System.String)">
            <summary>
            Converts the specified string representation of a 4-dimensional vector to its 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> equivalent, or throws an exception if the string cannot be
            converted to a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="value">
            The value. If this value is <see langword="null"/> or an empty string, 
            <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.Zero"/> is returned as the default value.
            </param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.</returns>
            <exception cref="T:System.FormatException">
            Cannot convert <paramref name="value"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.ThemeHelper.ParseRectangle(System.String)">
            <summary>
            Converts the specified string representation of a rectangle to its <see cref="T:Microsoft.Xna.Framework.Rectangle"/> 
            equivalent, or throws an exception if the string cannot be converted to a 
            <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="value">
            The value. If this value is <see langword="null"/> or an empty string, a rectangle is 
            returned where all values are 0.
            </param>
            <returns>
            The <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Cannot convert <paramref name="value"/> to <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.ThemeImage">
            <summary>
            Represents an image of the UI theme.
            </summary>
            <remarks>
            The image is a region in a texture atlas of the theme. Images support 9-grid scaling.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeImage.Name">
            <summary>
            Gets or sets the name of the image.
            </summary>
            <value>The name of the image.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeImage.Texture">
            <summary>
            Gets or sets the texture atlas containing the image.
            </summary>
            <value>
            The texture atlas containing the image. (Can be <see langword="null"/> to use the default 
            texture atlas.)
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeImage.SourceRectangle">
            <summary>
            Gets or sets the source rectangle of the image in the texture atlas of the theme.
            </summary>
            <value>The source rectangle.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeImage.Margin">
            <summary>
            Gets or sets the margin (left, top, right, bottom).
            </summary>
            <value>
            The margin (left, top, right, bottom). Can be negative to draw outside of the control area.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeImage.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>The horizontal alignment.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeImage.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>The vertical alignment.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeImage.TileMode">
            <summary>
            Gets or sets the tile mode.
            </summary>
            <value>
            The tile mode that defines whether the image is repeated and how. The default value is
            <see cref="F:DigitalRune.Game.UI.Rendering.TileMode.None"/>.
            </value>
            <remarks>
            Note that, when either the <see cref="P:DigitalRune.Game.UI.Rendering.ThemeImage.HorizontalAlignment"/> or the 
            <see cref="P:DigitalRune.Game.UI.Rendering.ThemeImage.VerticalAlignment"/> is set to <see cref="F:DigitalRune.Game.UI.HorizontalAlignment.Stretch"/> then
            the image is never tiled.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeImage.Border">
            <summary>
            Gets or sets the border that defines the 9-grid layout for image stretching.
            </summary>
            <value>The border that defines the 9-grid layout.</value>
            <remarks>
            When the alignment is set to <i>Stretch</i>, the image will be stretched to fill the control 
            area. A typical <i>9-grid scaling</i> is applied and the <see cref="P:DigitalRune.Game.UI.Rendering.ThemeImage.Border"/> defines the 
            left/right/top/bottom margins. The left-top, left-bottom, right-top and right-bottom parts 
            of the image will not be stretched. The center-top and center-bottom parts will be stretched 
            horizontally. The left-center and right-center parts will be stretched vertically. The 
            center part will be stretched horizontally and vertically.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeImage.IsOverlay">
            <summary>
            Gets or sets a value indicating whether this image is drawn on top of the control.
            </summary>
            <value>
            <see langword="true"/> if this image is drawn on top of the control; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeImage.Color">
            <summary>
            Gets or sets the tint color.
            </summary>
            <value>The tint color.</value>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.ThemeState">
            <summary>
            Represents a visual state of a UI control.
            </summary>
            <remarks>
            <para>
            In each frame a control is in one visual state (see <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualState"/>) and 
            this state defines the current appearance (e.g. the sprite images that should be drawn). 
            </para>
            <para>
            <strong>Inherited states:</strong> Controls that are nested inside other controls (e.g. a 
            <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> inside a <see cref="T:DigitalRune.Game.UI.Controls.Button"/>) can inherit a visual state from its
            parent control. For example, a <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> does not have a "Focused" state. But
            the UI theme can define a "Focused" state for the <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> and set the 
            <see cref="P:DigitalRune.Game.UI.Rendering.ThemeState.IsInherited"/> flag. This state will be used when the visual parent control of the 
            <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> is in its "Focused" state. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeState.Name">
            <summary>
            Gets or sets the name of the state.
            </summary>
            <value>The name of the state.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeState.IsInherited">
            <summary>
            Gets or sets a value indicating whether this state is inherited.
            </summary>
            <value>
            <see langword="true"/> if this state is inherited; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>s have <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualState"/>s like "Default", 
            "Disabled". The possible set of visual states depends on the control type. For example, a 
            <see cref="T:DigitalRune.Game.UI.Controls.Button"/> has a "Focused" state whereas a <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> does not have
            this visual state. But: If the <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> is set as the 
            <see cref="P:DigitalRune.Game.UI.Controls.ContentControl.Content"/> of a <see cref="T:DigitalRune.Game.UI.Controls.Button"/>, it can inherit the "Focused"
            state from the parent button control. In this case <see cref="P:DigitalRune.Game.UI.Rendering.ThemeState.IsInherited"/> must be set to 
            <see langword="true"/>. The inherited visual state is used, when the control does not have 
            the state but is inside a parent control that has the state.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeState.Images">
            <summary>
            Gets the images that create the appearance of the control.
            </summary>
            <value>The images.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeState.Background">
            <summary>
            Gets or sets the background color.
            </summary>
            <value>The background color.</value>
            <remarks>
            If a control is in this state, then the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Background"/> property is set
            to this value (unless this value is <see langword="null"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeState.Foreground">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <value>The foreground color.</value>
            <remarks>
            If a control is in this state, then the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Foreground"/> property is set
            to this value (unless this value is <see langword="null"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeState.Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
            <value>The opacity.</value>
            <remarks>
            If a control is in this state, then the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Opacity"/> property is set
            to this value (unless this value is <see langword="null"/>).
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.ThemeState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Rendering.ThemeState"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.ThemeStyle">
            <summary>
            Represents a visual style of a UI control.
            </summary>
            <remarks>
            <para>
            Styles define the properties and visual appearance of UI controls. Each style has a number of 
            visual states (<see cref="P:DigitalRune.Game.UI.Rendering.ThemeStyle.States"/>). In each frame a control is in one visual state (see 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.VisualState"/>) and this state defines the current appearance.
            </para>
            <para>
            A style can inherit from another style. For example, if a style "TextBlock" was already
            defined in the theme, then a "GreenTextBlock" can inherit from "TextBlock" and only needs to 
            set the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Foreground"/> color property to green - all other properties are 
            inherited from the parent style.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeStyle.Name">
            <summary>
            Gets or sets the name of the style.
            </summary>
            <value>The name of the style.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeStyle.Inherits">
            <summary>
            Gets or sets the style from which this style inherits settings.
            </summary>
            <value>The style from which this style inherits settings.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeStyle.Attributes">
            <summary>
            Gets the attributes that have been defined for this style.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeStyle.States">
            <summary>
            Gets the visual states.
            </summary>
            <value>The visual states.</value>
            <remarks>
            The <see cref="T:DigitalRune.Game.UI.Rendering.UIRenderer"/> selects the first matching state from this collection. The
            visual states should therefore be sorted by priority in case there are conflicting states.
            For example, when a style includes inherited visual states (see 
            <see cref="P:DigitalRune.Game.UI.Rendering.ThemeState.IsInherited"/>) and normal visual states, then the inherited visual 
            states need to be the first in the collection. Otherwise, the render will most likely ignore
            them.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.ThemeStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Rendering.ThemeStyle"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.ThemeTexture">
            <summary>
            Represents a texture of the UI theme.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeTexture.Name">
            <summary>
            Gets or sets the name of the texture.
            </summary>
            <value>The name of the texture.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeTexture.IsDefault">
            <summary>
            Gets or sets a value indicating whether this texture is the default texture.
            </summary>
            <value>
            <see langword="true"/> if this texture is the default texture; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.ThemeTexture.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>The texture.</value>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.TileMode">
            <summary>
            Specifies whether the theme image is a tile that is repeated and how.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Rendering.TileMode.None">
            <summary>
            The image is not repeated. Only one copy of the image is drawn.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Rendering.TileMode.TileX">
            <summary>
            The image is repeated horizontally only.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Rendering.TileMode.TileY">
            <summary>
            The image is repeated vertically only.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.Rendering.TileMode.TileXY">
            <summary>
            The image is repeated both horizontally and vertically.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.Rendering.UIRenderer">
            <summary>
            Manages and renders the visual appearance of a UI. (Default implementation.)
            </summary>
            <remarks>
            <para>
            This class implements <see cref="T:DigitalRune.Game.UI.Rendering.IUIRenderer"/> (see comments of <see cref="T:DigitalRune.Game.UI.Rendering.IUIRenderer"/>). 
            </para>
            <para>
            When creating the <see cref="T:DigitalRune.Game.UI.Rendering.UIRenderer"/> a UI theme (see <see cref="P:DigitalRune.Game.UI.Rendering.UIRenderer.Theme"/>) must be 
            specified. The renderer will use the attributes and styles of the theme to render the 
            controls.
            </para>
            <para>
            <strong>Thread-Safety:</strong> This class is not thread-safe. <see cref="M:DigitalRune.Game.UI.Rendering.UIRenderer.Render(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)"/> must not 
            be called simultaneously in concurrent threads.
            </para>
            <para>
            <strong>Render Callbacks:</strong> This class has a dictionary <see cref="P:DigitalRune.Game.UI.Rendering.UIRenderer.RenderCallbacks"/>
            which defines the methods used for rendering. When 
            <see cref="M:DigitalRune.Game.UI.Rendering.UIRenderer.Render(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)"/> is called, the style of the control is
            determined and the render callback for the style is used to render the control. If a render
            method is not given for a given style, the parent styles are used (a <see cref="T:DigitalRune.Game.UI.Rendering.ThemeStyle"/>
            can inherit from another style, see <see cref="P:DigitalRune.Game.UI.Rendering.ThemeStyle.Inherits"/>). See also 
            <see cref="P:DigitalRune.Game.UI.Rendering.UIRenderer.RenderCallbacks"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.UIRenderer.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
            <value>
            <see langword="true"/> if this instance has been disposed of; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.UIRenderer.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.UIRenderer.SpriteBatch">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.UIRenderer.Theme">
            <summary>
            Gets the UI theme.
            </summary>
            <value>The UI theme.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.UIRenderer.Templates">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.#ctor(Microsoft.Xna.Framework.Game,DigitalRune.Game.UI.Rendering.Theme)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Rendering.UIRenderer"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Rendering.UIRenderer"/> class.
            (Not available in Silverlight.)
            </summary>
            <param name="game">The XNA Game instance.</param>
            <param name="theme">The loaded UI theme.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="game"/> or <paramref name="theme"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,DigitalRune.Game.UI.Rendering.Theme)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.Rendering.UIRenderer"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="theme">The loaded UI theme.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> or <paramref name="theme"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.Dispose">
            <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Game.UI.Rendering.UIRenderer"/> class.
            </summary>
            <remarks>
            This method calls the virtual <see cref="M:DigitalRune.Game.UI.Rendering.UIRenderer.Dispose(System.Boolean)"/> method, passing in 
            <see langword="true"/>, and then suppresses finalization of the instance.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Game.UI.Rendering.UIRenderer"/> class 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.GetAttribute``1(System.String,System.String,``0@)">
            <summary>
            Gets a style-specific attribute value.
            </summary>
            <typeparam name="T">The type of the attribute value.</typeparam>
            <param name="style">The style.</param>
            <param name="name">The name of the attribute.</param>
            <param name="result">The attribute value.</param>
            <returns>
            <see langword="true"/> if the renderer can provide a value for the attribute; otherwise, 
            <see langword="false"/> if the renderer does not know the style or the attribute.
            </returns>
            <remarks>
            This method calls <see cref="M:DigitalRune.Game.UI.Rendering.UIRenderer.OnParseAttribute``1(DigitalRune.Game.UI.Rendering.ThemeAttribute,``0@)"/> to convert a 
            <see cref="T:DigitalRune.Game.UI.Rendering.ThemeAttribute"/> to a value of type <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.OnParseAttribute``1(DigitalRune.Game.UI.Rendering.ThemeAttribute,``0@)">
            <summary>
            Called by <see cref="M:DigitalRune.Game.UI.Rendering.UIRenderer.GetAttribute``1(System.String,System.String,``0@)"/> to convert attributes to values.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="attribute">The attribute.</param>
            <param name="result">The parsed value.</param>
            <returns>
            <see langword="true"/> if the <see cref="P:DigitalRune.Game.UI.Rendering.ThemeAttribute.Value"/> could be converted to the
            type <typeparamref name="T"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            The base implementation of this method supports following types: <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>,
            <see cref="T:Microsoft.Xna.Framework.Color"/>, <see cref="T:Microsoft.Xna.Framework.Rectangle"/>, <see cref="T:Microsoft.Xna.Framework.Rectangle"/>?,
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>, enumerations, types that have a <see cref="!:TypeConverter"/>, and
            types that implement <see cref="T:System.IConvertible"/>.
            </para>
            <para>
            Derived classes can override this method to add support for additional types.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.GetCursor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.GetFont(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.GetTexture(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.BeginBatch">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.EndBatch">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.UIRenderer.WhiteTexture">
            <summary>
            Gets a white 1x1 texture.
            </summary>
            <value>A texture with a single white texel.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.Rendering.UIRenderer.RenderCallbacks">
            <summary>
            Gets the render callbacks.
            </summary>
            <value>The render callbacks.</value>
            <remarks>
            <para>
            The render callbacks are methods that render a given control. The keys in this dictionary 
            are the style names, e.g. "TextBox". 
            </para>
            <para>
            The render callbacks get the <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> to be rendered and a 
            <see cref="T:DigitalRune.Game.UI.Controls.UIRenderContext"/> that contains additional information as input parameters. When
            the render callback is called, the background of the control has already been cleared by the
            <see cref="T:DigitalRune.Game.UI.Rendering.UIRenderer"/> if the <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> uses a 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Background"/> color. The <see cref="T:DigitalRune.Game.UI.Controls.UIRenderContext"/> contains the 
            control's effective <see cref="P:DigitalRune.Game.UI.Controls.UIRenderContext.Opacity"/> and the effective 
            <see cref="P:DigitalRune.Game.UI.Controls.UIRenderContext.RenderTransform"/>. (These properties are automatically updated
            by the <see cref="T:DigitalRune.Game.UI.Rendering.UIRenderer"/>.)
            </para>
            <para>
            Render callbacks may cache information in <see cref="P:DigitalRune.Game.UI.Controls.UIControl.RenderData"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.Render(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.GetRenderCallback(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Rendering.ThemeStyle)">
            <summary>
            Gets the render callback that should be used to draw the control with the given style.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.GetState(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Rendering.ThemeStyle)">
            <summary>
            Gets the <see cref="T:DigitalRune.Game.UI.Rendering.ThemeState"/> for the current visual state of the given control.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.GetActualBoundsRounded(DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Gets the actual bounds snapped to pixels.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.GetContentBoundsRounded(DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Gets the content bounds (= actual bounds - padding) snapped to pixels.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.GetOpacity(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext,DigitalRune.Game.UI.Rendering.ThemeState)">
            <summary>
            Gets the effective opacity (the product of the opacities of all visual ancestors).
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.GetBackground(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Rendering.ThemeState,System.Single)">
            <summary>
            Gets the background with pre-multiplied alpha for the given opacity.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.GetForeground(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Rendering.ThemeState,System.Single)">
            <summary>
            Gets the foreground with pre-multiplied alpha for the given opacity.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderUIControl(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)">
            <summary>
            RenderCallback for the style "UIControl".
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderContentControl(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)">
            <summary>
            RenderCallback for the style "ContentControl".
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderTextBlock(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)">
            <summary>
            RenderCallback for the style "TextBlock".
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderImageControl(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)">
            <summary>
            RenderCallback for the style "Image".
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderSlider(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)">
            <summary>
            RenderCallback for the style "Slider".
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderProgressBar(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)">
            <summary>
            RenderCallback for the style "ProgressBar".
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderConsole(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)">
            <summary>
            RenderCallback for the style "Console".
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderTextBox(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext)">
            <summary>
            RenderCallback for the style "TextBox".
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderImages(DigitalRune.Game.UI.Controls.UIControl,DigitalRune.Game.UI.Controls.UIRenderContext,System.Boolean)">
            <summary>
            Renders the <see cref="T:DigitalRune.Game.UI.Rendering.ThemeImage"/>s of the current visual state of the given context.
            </summary>
            <param name="control">The control.</param>
            <param name="context">The render context.</param>
            <param name="drawOverlays">
            If set to <see langword="true"/> only overlay images are rendered; otherwise, only
            background images are rendered. See <see cref="P:DigitalRune.Game.UI.Rendering.ThemeImage.IsOverlay"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderImage(DigitalRune.Game.UI.RectangleF,DigitalRune.Game.UI.Rendering.ThemeImage,System.Single,DigitalRune.Game.UI.Rendering.RenderTransform)">
            <summary>
            Renders a <see cref="T:DigitalRune.Game.UI.Rendering.ThemeImage"/>.
            </summary>
            <param name="bounds">The control's bounding rectangle.</param>
            <param name="image">The image.</param>
            <param name="opacity">The opacity.</param>
            <param name="transform">The render transform.</param>
            <remarks>
            This method uses the <paramref name="image"/> properties (alignment, margin, etc.) and the 
            render transformation to render the image into the target (<paramref name="bounds"/>).
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderStretchedImage(Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Game.UI.Rendering.ThemeImage,DigitalRune.Game.UI.RectangleF,DigitalRune.Game.UI.Rendering.RenderTransform,Microsoft.Xna.Framework.Color)">
            <summary>
            Renders an image with alignment and optional stretching.
            </summary>
            <param name="texture">The UI texture.</param>
            <param name="image">The image.</param>
            <param name="area">The area to fill.</param>
            <param name="transform">The render transform.</param>
            <param name="color">The tint color.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderImage(Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Game.UI.RectangleF,Microsoft.Xna.Framework.Rectangle,DigitalRune.Game.UI.HorizontalAlignment,DigitalRune.Game.UI.VerticalAlignment,DigitalRune.Game.UI.Rendering.TileMode,DigitalRune.Game.UI.Rendering.RenderTransform,Microsoft.Xna.Framework.Color)">
            <summary>
            Renders an image with alignment and optional tiling.
            </summary>
            <param name="texture">The UI texture.</param>
            <param name="area">The area to fill.</param>
            <param name="source">The source rectangle of the image in the UI texture.</param>
            <param name="horizontalAlignment">The horizontal alignment.</param>
            <param name="verticalAlignment">The vertical alignment.</param>
            <param name="tileMode">The tile mode.</param>
            <param name="transform">The render transform.</param>
            <param name="color">The tint color.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderTileX(Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Game.UI.RectangleF,DigitalRune.Game.UI.RectangleF,Microsoft.Xna.Framework.Rectangle,DigitalRune.Game.UI.Rendering.RenderTransform,Microsoft.Xna.Framework.Color)">
            <summary>
            Renders an image repeated times in horizontal direction.
            </summary>
            <param name="texture">The UI texture.</param>
            <param name="area">The area to fill.</param>
            <param name="destination">The destination rectangle of the left, top tile.</param>
            <param name="source">The source rectangle of the image in the UI texture.</param>
            <param name="transform">The render transform.</param>
            <param name="color">The tint color.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderTileY(Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Game.UI.RectangleF,DigitalRune.Game.UI.RectangleF,Microsoft.Xna.Framework.Rectangle,DigitalRune.Game.UI.Rendering.RenderTransform,Microsoft.Xna.Framework.Color)">
            <summary>
            Renders an image repeated times in vertical direction.
            </summary>
            <param name="texture">The UI texture.</param>
            <param name="area">The area to fill.</param>
            <param name="destination">The destination rectangle of the left, top tile.</param>
            <param name="source">The source rectangle of the image in the UI texture.</param>
            <param name="transform">The render transform.</param>
            <param name="color">The tint color.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.RenderTileXY(Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Game.UI.RectangleF,DigitalRune.Game.UI.RectangleF,Microsoft.Xna.Framework.Rectangle,DigitalRune.Game.UI.Rendering.RenderTransform,Microsoft.Xna.Framework.Color)">
            <summary>
            Renders an image repeated times in horizontal and vertical direction.
            </summary>
            <param name="texture">The UI texture.</param>
            <param name="area">The area to fill.</param>
            <param name="destination">The destination rectangle of the left, top tile.</param>
            <param name="source">The source rectangle of the image in the UI texture.</param>
            <param name="transform">The render transform.</param>
            <param name="color">The tint color.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.ClipX(DigitalRune.Game.UI.RectangleF,DigitalRune.Game.UI.RectangleF@,Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            Clips the image horizontally to the given area.
            </summary>
            <param name="area">The allowed area.</param>
            <param name="destination">The destination rectangle of the image. </param>
            <param name="source">The source rectangle of the image in the UI texture.</param>
            <returns>
            <see langword="true"/> if the right of the image was clipped; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            This computes the clipping and modifies <paramref name="destination"/> and 
            <paramref name="source"/> accordingly.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.Rendering.UIRenderer.ClipY(DigitalRune.Game.UI.RectangleF,DigitalRune.Game.UI.RectangleF@,Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            Clips the image vertically to the given area.
            </summary>
            <param name="area">The allowed area.</param>
            <param name="destination">The destination rectangle of the image.</param>
            <param name="source">The source rectangle of the image in the UI texture.</param>
            <returns>
            <see langword="true"/> if the bottom of the image was clipped; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            This computes the clipping and modifies <paramref name="destination"/> and 
            <paramref name="source"/> accordingly.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.UI.LayoutSerializer">
            <summary>
            Loads/saves objects from/to a XML file. (Currently, only loading objects is implemented!)
            </summary>
            <remarks>
            <para>
            The <strong>Load</strong> method reads an XML document, creates and returns the objects specified 
            in the XML document. Here is an example XML file:
            </para>
            <example>
            <code lang="csharp">
            <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <Layout DefaultNamespace="DigitalRune.Game.UI.Controls">
              <MyClass Namespace="NamespaceFoo1.Foo2">
                <Data>123</Data>
              </MyClass>
              
              <Button Name="Button0">
                <X>100</X>
                <VerticalAlignment>Bottom</VerticalAlignment>
                <Height>50</Height>
                <Width>100</Width>
                <Text>This is a test button...</Text>
              </Button>
            
              <Window Name="Window1" Namespace="DigitalRune.Game.UI.Controls">
                <Content>
                  <StackPanel Name="Panel0">
                    <Children>
                      <TextBox Name="TextBox0">
                        <Text>Default text</Text>
                      </TextBox>
                      <TextBox Name="TextBox1">
                        <Text>Default text</Text>
                      </TextBox>
                    </Children>
                  </StackPanel>
                </Content>
              </Window>
            </Layout>
            ]]>
            </code>
            <para>
            The XML file can contain any types of classes. The types must be defined in the this assembly 
            or in an assembly referenced by the <see cref="P:DigitalRune.Game.UI.LayoutSerializer.Assemblies"/> list. Properties of the objects 
            can be specified in XML attributes or in XML elements. Each type can have a <c>Namespace</c> 
            attribute. For example, if the XML above is loaded, an instance of 
            <c>NamespaceFoo1.Foo2.MyClass</c> is created. If no namespace attribute is specified, the
            <c>DefaultNamespace</c> of the root node <c>Layout</c> is used.
            </para>
            <para>
            Properties that are lists (interface <see cref="T:System.Collections.IList"/>) are also supported, see 
            <c>Window.Children</c> in the example above. The collection property (e.g. 
            <c>Window.Children</c>) is not initialized by the <see cref="T:DigitalRune.Game.UI.LayoutSerializer"/>, the 
            <see cref="T:DigitalRune.Game.UI.LayoutSerializer"/> will only try to add items to the collection.
            </para>
            </example>
            <para>
            The <see cref="T:DigitalRune.Game.UI.LayoutSerializer"/> can be used with an <strong>XDocument</strong> and with
            a <see cref="T:System.Xml.XmlReader"/>. Only the later is available in portable class library builds
            for .NET 4.0.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.LayoutSerializer.Assemblies">
            <summary>
            Gets assemblies that contain the types.
            </summary>
            <value>The assemblies that contain the types.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.LayoutSerializer.DefaultNamespace">
            <summary>
            Gets or sets the default namespace specified in the "Layout" node of the XML file.
            </summary>
            <value>The default namespace.</value>
            <remarks>
            This property is only set while loading objects. It will automatically be reset to 
            null when <strong>Load</strong> is finished.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.LayoutSerializer.Load(System.Xml.XmlReader)">
            <summary>
            Loads the objects specified in the given XML container.
            </summary>
            <param name="xmlReader">The XML reader.</param>
            <returns>The instances created from the XML definition.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="xmlReader"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            Error while loading the objects. See exception message.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.LayoutSerializer.OnGetType(System.Xml.XmlReader)">
            <summary>
            Called to find a type for the given XML element.
            </summary>
            <param name="reader">The XML reader positioned on the XML element.</param>
            <returns>The type for the given XML element.</returns>
            <remarks>
            Per default, this method searches the current assembly and the <see cref="P:DigitalRune.Game.UI.LayoutSerializer.Assemblies"/>
            for the type. Derived classes can override this method to retrieve the type from other
            assemblies.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.UI.LayoutSerializer.OnCreateInstance(System.Type,System.Xml.XmlReader)">
            <summary>
            Called when a game instance needs to be created.
            </summary>
            <param name="type">The type of the object.</param>
            <param name="reader">
            The XML reader positioned on the node with data for the instance.
            </param>
            <returns>A new instance of the <paramref name="type"/>.</returns>
            <remarks>
            Per default, the parameterless constructor of <paramref name="type"/> is invoked. This
            method can be overridden in derived classes to support types that do not have a 
            parameterless default constructor or that require a special initialization. 
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.UI.ToolTipManager">
            <summary>
            Manages tool tips.
            </summary>
            <remarks>
            <para>
            Each <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/> has a <see cref="P:DigitalRune.Game.UI.Controls.UIScreen.ToolTipManager"/>. (Currently it is not
            possible to use a custom ToolTipManager.)
            </para>
            <para>
            Tool tips can be defined per control using the property <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ToolTip"/>. The 
            tool tip can be a <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>, a <see cref="T:System.String"/>, or an <see cref="T:System.Object"/>:
            <list type="bullet">
            <item>
            <description>
            <strong>UIControl:</strong> If the tool tip is a control, then the control is shown as the
            content of the <see cref="P:DigitalRune.Game.UI.ToolTipManager.ToolTipControl"/>.
            </description>
            </item>
            <item>
            <description>
            <strong>String:</strong> If the tool tip is a <see cref="T:System.String"/>, then the string will be
            wrapped in a 
            <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> and shown in the <see cref="P:DigitalRune.Game.UI.ToolTipManager.ToolTipControl"/>.
            </description>
            </item>
            <item>
            <description>
            <strong>Object:</strong> If the tool tip is an <see cref="T:System.Object"/>, then the string
            representation of the object will be shown as the tool tip. (The string will be wrapped in a 
            <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> and shown in the <see cref="P:DigitalRune.Game.UI.ToolTipManager.ToolTipControl"/>.
            </description>
            </item>
            </list>
            </para>
            <para>
            The user can override this behavior by setting the <see cref="P:DigitalRune.Game.UI.ToolTipManager.CreateToolTipContent"/> 
            callback. The callback receives the value stored in <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ToolTip"/> and 
            returns the <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> that will be shown in the <see cref="P:DigitalRune.Game.UI.ToolTipManager.ToolTipControl"/>.
            </para>
            <para>
            <strong>Control Styles:</strong> Per default, the <see cref="P:DigitalRune.Game.UI.ToolTipManager.ToolTipControl"/> uses the style 
            "ToolTip" and the <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/> that wraps the tool tip content uses the style 
            "ToolTipText". (See <see cref="P:DigitalRune.Game.UI.Controls.UIControl.Style"/> for more information about styles.)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.ToolTipManager.CreateToolTipContent">
            <summary>
            Gets or sets a callback that creates a <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> for a 
            <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ToolTip"/>.
            </summary>
            <value>
            <para>
            A method that creates a <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> for a <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ToolTip"/>. This 
            method receives the value of the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ToolTip"/> property and must return a
            <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/> which should be shown in the <see cref="P:DigitalRune.Game.UI.ToolTipManager.ToolTipControl"/>. 
            </para>
            <para>
            If the method is null or returns null, the <see cref="P:DigitalRune.Game.UI.Controls.UIControl.ToolTip"/> will be wrapped 
            in a <see cref="T:DigitalRune.Game.UI.Controls.TextBlock"/>s and shown in the <see cref="P:DigitalRune.Game.UI.ToolTipManager.ToolTipControl"/>.
            </para>
            <para>
            The default is <see langword="null"/>.
            </para>
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.ToolTipManager.IsToolTipOpen">
            <summary>
            Gets a value indicating whether a tool tip is currently shown.
            </summary>
            <value>
            <see langword="true"/> if a tool tip is currently visible; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.ToolTipManager.Screen">
            <summary>
            Gets or sets the screen.
            </summary>
            <value>The screen.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.ToolTipManager.ToolTipControl">
            <summary>
            Gets the <see cref="T:DigitalRune.Game.UI.Controls.ContentControl"/> that shows the tool tip.
            </summary>
            <value>The tool tip control.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.ToolTipManager.ToolTipDelay">
            <summary>
            Gets the time which the mouse has to stand still before a tool tip pops up.
            </summary>
            <value>The time which the mouse has to stand still before a tool tip pops up.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.ToolTipManager.ToolTipOffset">
            <summary>
            Gets the offset of the tool tip to the mouse position.
            </summary>
            <value>The offset of the tool tip to the mouse position.</value>
        </member>
        <member name="M:DigitalRune.Game.UI.ToolTipManager.#ctor(DigitalRune.Game.UI.Controls.UIScreen)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.ToolTipManager"/> class.
            </summary>
            <param name="screen">The screen.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.ToolTipManager.ShowToolTip(System.Object,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Shows a tool tip.
            </summary>
            <param name="toolTip">The tool tip.</param>
            <param name="mousePosition">The mouse position.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.ToolTipManager.CloseToolTip">
            <summary>
            Hides the tool tip or does nothing if no tool tip is visible.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.UI.UIException">
            <summary>
            Occurs when an exception in the game UI occurs.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.UIException.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.UIException"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.UIException"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.UIException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.UIException"/> class with a specified error
            message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.UIException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.UIException"/> class with a specified 
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null"/> if no 
            inner exception is specified.
            </param>
        </member>
        <member name="T:DigitalRune.Game.UI.UIHelper">
            <summary>
            Provides helper methods for working with <see cref="T:DigitalRune.Game.UI.Controls.UIControl"/>s.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.UIHelper.GetRoot(DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Returns the root control of the visual tree.
            </summary>
            <param name="control">The control where to start the search.</param>
            <returns>The root control.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.UIHelper.GetAncestors(DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Gets the ancestors of the control in the visual tree.
            </summary>
            <param name="control">The control where to start the search.</param>
            <returns>The ancestors of <paramref name="control"/> in the visual tree.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.UIHelper.GetSelfAndAncestors(DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Gets the control and its ancestors in the visual tree.
            </summary>
            <param name="control">The control where to start the search.</param>
            <returns>The <paramref name="control"/> and its ancestors in the visual tree.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.UIHelper.GetDescendants(DigitalRune.Game.UI.Controls.UIControl)">
            <overloads>
            <summary>
            Gets the descendants of the control in the visual tree.
            </summary>
            </overloads>
            
            <summary>
            Gets the descendants of the control in the visual tree using a depth-first search.
            </summary>
            <param name="control">The control where to start the search.</param>
            <returns>The descendants of <paramref name="control"/> in the visual tree.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.UIHelper.GetDescendants(DigitalRune.Game.UI.Controls.UIControl,System.Boolean)">
            <summary>
            Gets the descendants of the control in the visual tree using either a depth-first or a 
            breadth-first search.
            </summary>
            <param name="control">The control where to start the search.</param>
            <param name="depthFirst">
            If set to <see langword="true"/> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
            <returns>The descendants of <paramref name="control"/> in the visual tree.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.UIHelper.GetSubtree(DigitalRune.Game.UI.Controls.UIControl)">
            <overloads>
            <summary>
            Gets the subtree (the given control and all of its descendants in the visual tree).
            </summary>
            </overloads>
            
            <summary>
            Gets the subtree (the given control and all of its descendants in the visual tree) using a 
            depth-first search.
            </summary>
            <param name="control">The control where to start the search.</param>
            <returns>
            The <paramref name="control"/> and all of its descendants in the visual tree.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.UIHelper.GetSubtree(DigitalRune.Game.UI.Controls.UIControl,System.Boolean)">
            <summary>
            Gets the subtree (the given control and all of its descendants in the visual tree) using 
            either a depth-first or a breadth-first search.
            </summary>
            <param name="control">The control where to start the search.</param>
            <param name="depthFirst">
            If set to <see langword="true"/> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
            <returns>
            The <paramref name="control"/> and all of its descendants in the visual tree.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.UIHelper.GetLeaves(DigitalRune.Game.UI.Controls.UIControl)">
            <summary>
            Gets the leaves of the control in the visual tree.
            </summary>
            <param name="control">The control where to start the search.</param>
            <returns>
            The leaves of <paramref name="control"/> in the visual tree.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Game.UI.UIManager">
            <summary>
            Manages the game user interface.
            </summary>
            <remarks>
            <para>
            The most important job of this class is to update the screens. Therefore, <see cref="M:DigitalRune.Game.UI.UIManager.Update(System.TimeSpan)"/>
            must be called once per frame.
            </para>
            <para>
            The <see cref="T:DigitalRune.Game.UI.UIManager"/> monitors the game window orientation and calls 
            <see cref="M:DigitalRune.Game.UI.Controls.UIControl.InvalidateMeasure"/> when it changes (only relevant on Windows Phone 7).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.UIManager.Cursor">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.UI.UIManager.GameForm">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.UI.UIManager.InputService">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.UI.UIManager.KeyMap">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Game.UI.UIManager.Screens">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.UI.UIManager.#ctor(Microsoft.Xna.Framework.Game,DigitalRune.Game.Input.IInputService)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.UIManager"/> class.
            </summary>
            <param name="game">The XNA game instance.</param>
            <param name="inputService">The input service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="game"/> or <paramref name="inputService"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.UIManager.Update(System.TimeSpan)">
            <summary>
            Updates the UI.
            </summary>
            <param name="deltaTime">The size of the current time step.</param>
        </member>
        <member name="T:DigitalRune.Game.UI.UIScreenCollection">
            <summary>
            Represents a collection of <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.UIScreenCollection.#ctor(DigitalRune.Game.UI.UIManager)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.UI.UIScreenCollection"/> class.
            </summary>
            <param name="uiManager">The <see cref="T:DigitalRune.Game.UI.UIManager"/>.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.UIScreenCollection.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:DigitalRune.Game.UI.UIScreenCollection"/>. 
            </summary>
        </member>
        <member name="M:DigitalRune.Game.UI.UIScreenCollection.InsertItem(System.Int32,DigitalRune.Game.UI.Controls.UIScreen)">
            <summary>
            Inserts an element into the <see cref="T:DigitalRune.Game.UI.UIScreenCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0, or <paramref name="index"/> is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cannot add item to <see cref="T:DigitalRune.Game.UI.UIScreenCollection"/>. The item is already part of a 
            different <see cref="T:DigitalRune.Game.UI.UIScreenCollection"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.UIScreenCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:DigitalRune.Game.UI.UIScreenCollection"/>.
            </summary>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:DigitalRune.Game.UI.UIScreenCollection.SetItem(System.Int32,DigitalRune.Game.UI.Controls.UIScreen)">
            <summary>
            Replaces the item at the specified index with the specified item.
            </summary>
            <param name="index">The zero-based index of the item to be replaced.</param>
            <param name="item">The new item.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Cannot add item to <see cref="T:DigitalRune.Game.UI.UIScreenCollection"/>. The item is already part of a different 
            <see cref="T:DigitalRune.Game.UI.UIScreenCollection"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.UI.UIScreenCollection.MoveItem(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.UI.IUIService">
            <summary>
            Provides the ability to configure and control the graphical user interface.
            </summary>
            <remarks>
            <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>s can be added to the <see cref="P:DigitalRune.Game.UI.IUIService.Screens"/> collection. Screens are 
            automatically updated. But screens are not automatically drawn! 
            <see cref="M:DigitalRune.Game.UI.Controls.UIScreen.Draw(System.TimeSpan)"/> must be called manually.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.IUIService.Cursor">
            <summary>
            Gets or sets the mouse cursor, overriding the default mouse cursor.
            </summary>
            <value>
            The mouse cursor, overriding the current mouse cursor. Set to <see langword="null"/> to 
            use the default mouse cursor. 
            </value>
            <remarks>
            <para>
            This object must be of type <strong>System.Windows.Forms.Cursor</strong>. (The type 
            <see cref="T:System.Object"/> is used to avoid referencing 
            <strong>System.Windows.Forms.dll</strong> in this portable library.)
            </para>
            <para>
            Normally, the control under the mouse determines the current mouse cursor. If this property
            is set, the automatically determined cursor is overridden. This is useful, for example,
            if a Wait cursor should displayed.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.IUIService.GameForm">
            <summary>
            Gets the <strong>Form</strong> of the XNA <strong>Game</strong>.
            </summary>
            <value>The <strong>Form</strong> of the XNA <strong>Game</strong>.</value>
            <remarks>
            <para>
            This property is only set in Windows (desktop) builds. On most other platforms it is 
            <see langword="null"/>.
            </para>
            <para>
            This object must be of type <strong>System.Windows.Forms.Form</strong>. (The type 
            <see cref="T:System.Object"/> is used to avoid referencing 
            <strong>System.Windows.Forms.dll</strong> in this portable library.)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.UI.IUIService.InputService">
            <summary>
            Gets the input service.
            </summary>
            <value>The input service.</value>
        </member>
        <member name="P:DigitalRune.Game.UI.IUIService.KeyMap">
            <summary>
            Gets or sets the key map that translates <see cref="T:Microsoft.Xna.Framework.Input.Keys"/> to characters.
            </summary>
            <value>
            The key map. The default is a key map that is automatically chosen based on the current
            culture settings.
            </value>
        </member>
        <member name="P:DigitalRune.Game.UI.IUIService.Screens">
            <summary>
            Gets the <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>s.
            </summary>
            <value>The <see cref="T:DigitalRune.Game.UI.Controls.UIScreen"/>s.</value>
        </member>
        <member name="T:DigitalRune.Game.UI.VerticalAlignment">
            <summary>
            Describes how a child element is vertically positioned or stretched within a parent's layout
            slot. 
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.VerticalAlignment.Top">
            <summary>
            The child element is aligned to the top of the parent's layout slot.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.VerticalAlignment.Center">
            <summary>
            The child element is aligned to the center of the parent's layout slot.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.VerticalAlignment.Bottom">
            <summary>
            The child element is aligned to the bottom of the parent's layout slot.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.UI.VerticalAlignment.Stretch">
            <summary>
            The child element stretches to fill the parent's layout slot. 
            </summary>
        </member>
    </members>
</doc>
