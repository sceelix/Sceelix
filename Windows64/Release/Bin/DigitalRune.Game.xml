<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DigitalRune.Game</name>
    </assembly>
    <members>
        <member name="T:DigitalRune.Game.DataStore`1">
            <summary>
            Stores data that can be accessed using an ID or index.
            </summary>
            <typeparam name="T">The type of the data items.</typeparam>
            <remarks>
            <para>
            Data in the <see cref="T:DigitalRune.Game.DataStore`1"/> can be be accessed using an ID or index.
            <strong>ID:</strong>
            Each data item must have a unique ID. The ID is required to read/write data items. Storing a
            data item with a certain ID will add a new entry to the data store - or overwrite an existing 
            entry, if an entry with for given ID already exits. Data items are sorted ascending based on 
            their ID for fast retrieval. Accessing data items based on their ID is O(log <i>n</i>).
            </para>
            <para>
            <strong>Index:</strong>
            Data items can also be read based on their index in the data store. However, this approach is
            not recommended as the index will change when data items are added or removed. Reading data 
            based on their index is O(<i>1</i>).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.DataStore`1.Count">
            <summary>
            Gets the number of items in the data store.
            </summary>
            <value>The number of items in the data store.</value>
        </member>
        <member name="M:DigitalRune.Game.DataStore`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.DataStore`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.DataStore`1.Set(System.Int32,`0)">
            <summary>
            Adds the given item to the data store.
            </summary>
            <param name="id">The ID.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:DigitalRune.Game.DataStore`1.Clear">
            <summary>
            Removes all items from the data store.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.DataStore`1.Get(System.Int32)">
            <summary>
            Gets the item for the given ID.
            </summary>
            <param name="id">The ID.</param>
            <returns>
            The data with the given ID, or the default value of <typeparamref name="T"/> if no 
            data for the given <paramref name="id"/> is in the data store.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.DataStore`1.GetByIndex(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name="index">The zero-based index of the data.</param>
            <returns>
            The data that is stored at the given index. If the index is out of range, the default value
            of <typeparamref name="T"/> is returned.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.DataStore`1.GetIdByIndex(System.Int32)">
            <summary>
            Gets the ID of the item at the given index.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The ID of the data stored at the given index.</returns>
        </member>
        <member name="M:DigitalRune.Game.DataStore`1.IndexOfId(System.Int32)">
            <summary>
            Searches for the index of the item with the given ID.
            </summary>
            <param name="id">The ID to search for.</param>
            <returns>
            <para>
            The index of the specified item, if <paramref name="id"/> is found. 
            </para>
            <para>
            If <paramref name="id"/> is not found and <paramref name="id"/> is less than one or more IDs
            in the collection, a negative number which is the bitwise complement of the index of the
            first ID that is larger. 
            </para>
            <para>
            If <paramref name="id"/> is not found and <paramref name="id"/> is greater than any of the 
            IDs in the collection, a negative number which is the bitwise complement of (the index of 
            the last ID plus 1).
            </para>
            </returns>
        </member>
        <member name="M:DigitalRune.Game.DataStore`1.IndexOf(`0)">
            <summary>
            Gets the index of the given item.
            </summary>
            <param name="data">The data.</param>
            <returns>
            The zero-based index of the given item; or -1 if the data is not in the data store.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.DataStore`1.Remove(System.Int32)">
            <summary>
            Removes data with the given ID.
            </summary>
            <param name="id">The ID of the data that should be removed.</param>
            <returns>
            <see langword="true"/> if the data was removed; <see langword="false"/> if the data was not 
            stored in the data store.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.DataStore`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the given index.
            </summary>
            <param name="index">The index of the data that should be removed.</param>
        </member>
        <member name="T:DigitalRune.Game.GameEventCollection">
            <summary>
            Manages a collection of game object events.
            </summary>
            <remarks>
            This collection implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>, but enumerating the collection
            allocates heap memory (garbage!) and should only be used in game editors and not in
            performance critical paths of a game.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.GameEventCollection.Owner">
            <summary>
            Gets the game object that owns this collection.
            </summary>
            <value>The game object that owns this collection.</value>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.#ctor(DigitalRune.Game.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.GameEventCollection"/> struct.
            </summary>
            <param name="owner">The game object that owns this collection.</param>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.GetMetadataChecked``1(System.String)">
            <summary>
            Gets the metadata by name and performs several parameter checks. Exceptions
            are thrown when the name is invalid or no metadata is found.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is an empty string.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.Add``1(System.String)">
            <overloads>
            <summary>
            Adds an event.
            </summary>
            </overloads>
            
            <summary>
            Adds an event with the given name.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="name">The event name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            The event is not defined. Events must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateEvent``1(System.String,System.String,System.String,``0)"/> before they can be added.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.Add``1(System.Int32)">
            <summary>
            Adds an event with the given ID.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="id">The ID of the event.</param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="id"/> is invalid. Events must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateEvent``1(System.String,System.String,System.String,``0)"/> before they can be added.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.Add``1(DigitalRune.Game.GameEventMetadata{``0})">
            <summary>
            Adds an event for the given metadata.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="metadata">The metadata of the event.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.Get``1(System.String)">
            <overloads>
            <summary> 
            Gets a game object event.
            </summary>
            </overloads>
            
            <summary>
            Gets the event with the given name.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="name">The name of the event.</param>
            <returns>The game object event.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            The event is not defined. Events must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateEvent``1(System.String,System.String,System.String,``0)"/> before they can be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.Get``1(System.Int32)">
            <summary>
            Gets the event with the given ID.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="id">The ID of the event.</param>
            <returns>The event.</returns>
            <exception cref="T:System.ArgumentException">
            The <paramref name="id"/> is invalid. Events must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateEvent``1(System.String,System.String,System.String,``0)"/> before they can be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.Get``1(DigitalRune.Game.GameEventMetadata{``0})">
            <summary>
            Gets the event for the given metadata.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="metadata">The metadata of the property.</param>
            <returns>The property</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.Remove``1(System.String)">
            <overloads>
            <summary> 
            Removes a game object event.
            </summary>
            </overloads>
            
            <summary>
            Removes the event with the given name.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="name">The name of the event.</param>
            <returns>
            <see langword="true"/> if the event was removed; otherwise, <see langword="false"/>
            if the event was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            The event is not defined. Events must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateEvent``1(System.String,System.String,System.String,``0)"/> before they can be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.Remove(System.Int32)">
            <summary>
            Removes the event with the given ID.
            </summary>
            <param name="id">The ID of the event.</param>
            <returns>
            <see langword="true"/> if the event was removed; otherwise, <see langword="false"/>
            if the event was not found.
            </returns>
            <exception cref="T:System.ArgumentException">
            The <paramref name="id"/> is invalid. Events must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateEvent``1(System.String,System.String,System.String,``0)"/> before they can be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.Remove(DigitalRune.Game.IGameEventMetadata)">
            <summary>
            Removes the event for the given metadata.
            </summary>
            <param name="metadata">The metadata of the event.</param>
            <returns>
            <see langword="true"/> if the event was removed; otherwise, <see langword="false"/>
            if the event was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures 
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.Equals(DigitalRune.Game.GameEventCollection)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/> 
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.op_Equality(DigitalRune.Game.GameEventCollection,DigitalRune.Game.GameEventCollection)">
            <summary>
            Compares two <see cref="T:DigitalRune.Game.GameEventCollection"/>s to determine whether they are the same.
            </summary>
            <param name="collection1">The first <see cref="T:DigitalRune.Game.GameEventCollection"/>.</param>
            <param name="collection2">The second <see cref="T:DigitalRune.Game.GameEventCollection"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="collection1"/> and 
            <paramref name="collection2"/> are the same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameEventCollection.op_Inequality(DigitalRune.Game.GameEventCollection,DigitalRune.Game.GameEventCollection)">
            <summary>
            Compares two <see cref="T:DigitalRune.Game.GameEventCollection"/>s to determine whether they are different.
            </summary>
            <param name="collection1">The first <see cref="T:DigitalRune.Game.GameEventCollection"/>.</param>
            <param name="collection2">The second <see cref="T:DigitalRune.Game.GameEventCollection"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="collection1"/> and 
            <paramref name="collection2"/> are different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Game.GameEventData`1">
            <summary>
            Stores the event handlers of a game event.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.EventArgs"/>.</typeparam>
        </member>
        <member name="T:DigitalRune.Game.GameEventHandler`1">
            <summary>
            Provides the <see cref="T:System.EventHandler`1"/> that raises a game event when another
            event occurs.
            </summary>
            <typeparam name="T">The type of the event args.</typeparam>
        </member>
        <member name="M:DigitalRune.Game.GameEventHandler`1.#ctor(DigitalRune.Game.GameEvent{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.GameEventHandler`1"/> class.
            </summary>
            <param name="gameEvent">The game event.</param>
        </member>
        <member name="M:DigitalRune.Game.GameEventHandler`1.Raise(System.Object,System.EventArgs)">
            <summary>
            Raises game event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:DigitalRune.Game.GameEventMetadata`1">
            <summary>
            Identifies and describes a game object event.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
        </member>
        <member name="P:DigitalRune.Game.GameEventMetadata`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GameEventMetadata`1.Id">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GameEventMetadata`1.Category">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GameEventMetadata`1.Description">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GameEventMetadata`1.DefaultEventArgs">
            <summary>
            Gets or sets the default event arguments.
            </summary>
            <value>The default event arguments.</value>
            <remarks>
            If the event is raised without user-defined event arguments, the default arguments are
            passed to the event handlers.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.GameEventMetadata`1.DigitalRune#Game#IGameEventMetadata#DefaultEventArgs">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.GameEventMetadata`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.GameEventMetadata`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.GameEventMetadata`1.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.GameEventMetadata`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="id">The ID.</param>
            <remarks>
            The event metadata is automatically added to the <see cref="P:DigitalRune.Game.GameEventMetadata`1.Events"/> collection!
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.GameEvent`1">
            <summary>
            Represents event of a <see cref="T:DigitalRune.Game.GameObject"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.EventArgs"/>.</typeparam>
        </member>
        <member name="P:DigitalRune.Game.GameEvent`1.Owner">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GameEvent`1.Metadata">
            <summary>
            Gets the event metadata.
            </summary>
            <value>The event metadata.</value>
        </member>
        <member name="P:DigitalRune.Game.GameEvent`1.DigitalRune#Game#IGameEvent#Metadata">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GameEvent`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GameEvent`1.RaiseOnEvent">
            <summary>
            Event handler that automatically raises this game object event when another event occurs.
            </summary>
            <remarks>
            <para>
            This event handler can be used to raise this game event in response to another event. It 
            can, for example, be used to connect the <see cref="E:DigitalRune.Game.GameProperty`1.Changed"/> event of a 
            <see cref="T:DigitalRune.Game.GameProperty`1"/> to this event.
            </para>
            <code lang="csharp">
            <![CDATA[
            myFloatProperty.Changed += new EventHandler<GamePropertyEventArgs<float>>(myEvent.RaiseOnEvent);
            ]]>
            </code>
            <para>
            <c>myEvent</c> is fired every time when <c>myFloatProperty</c> changes its value.
            </para>
            </remarks>
        </member>
        <member name="E:DigitalRune.Game.GameEvent`1.Event">
            <summary>
            The event.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.GameEvent`1.#ctor(DigitalRune.Game.GameObject,DigitalRune.Game.GameEventMetadata{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.GameEvent`1"/> struct.
            </summary>
            <param name="owner">The game object that owns this event.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:DigitalRune.Game.GameEvent`1.Raise">
            <overloads>
            <summary>
            Raises the game object event.
            </summary>
            </overloads>
            
            <summary>
            Raises the event with default arguments.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.GameEvent`1.Raise(`0)">
            <summary>
            Raises the event with the given arguments.
            </summary>
            <param name="eventArgs">The event arguments.</param>
        </member>
        <member name="M:DigitalRune.Game.GameEvent`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures 
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameEvent`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameEvent`1.Equals(DigitalRune.Game.GameEvent{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/> 
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameEvent`1.op_Equality(DigitalRune.Game.GameEvent{`0},DigitalRune.Game.GameEvent{`0})">
            <summary>
            Compares two <see cref="T:DigitalRune.Game.GameEvent`1"/>s to determine whether they are the same.
            </summary>
            <param name="event1">The first <see cref="T:DigitalRune.Game.GameEvent`1"/>.</param>
            <param name="event2">The second <see cref="T:DigitalRune.Game.GameEvent`1"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="event1"/> and 
            <paramref name="event2"/> are the same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameEvent`1.op_Inequality(DigitalRune.Game.GameEvent{`0},DigitalRune.Game.GameEvent{`0})">
            <summary>
            Compares two <see cref="T:DigitalRune.Game.GameEventCollection"/>s to determine whether they are different.
            </summary>
            <param name="event1">The first <see cref="T:DigitalRune.Game.GameEvent`1"/>.</param>
            <param name="event2">The second <see cref="T:DigitalRune.Game.GameEvent`1"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="event1"/> and 
            <paramref name="event2"/> are different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Game.IGameEvent">
            <summary>
            Base interface for <see cref="T:DigitalRune.Game.GameEvent`1"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.IGameEvent.Owner">
            <summary>
            Gets the game object that owns this event.
            </summary>
            <value>The <see cref="T:DigitalRune.Game.GameObject"/> that owns this event.</value>
        </member>
        <member name="P:DigitalRune.Game.IGameEvent.Metadata">
            <summary>
            Gets the event metadata.
            </summary>
            <value>The event metadata.</value>
        </member>
        <member name="T:DigitalRune.Game.IGameEventMetadata">
            <summary>
            Identifies and describes a game object event.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.IGameEventMetadata.Id">
            <summary>
            Gets the unique ID.
            </summary>
            <value>The unique ID.</value>
        </member>
        <member name="P:DigitalRune.Game.IGameEventMetadata.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
            <remarks>
            This can be any string, like "Appearance", "Behavior", that can be used to group events in a
            game editor. See <see cref="T:DigitalRune.Game.GamePropertyCategories"/> for a list of default categories.
            </remarks>
            <seealso cref="T:DigitalRune.Game.GamePropertyCategories"/>
        </member>
        <member name="P:DigitalRune.Game.IGameEventMetadata.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
            <remarks>
            This can be any string that describes the event for users of a game editor.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.IGameEventMetadata.DefaultEventArgs">
            <summary>
            Gets the default event arguments.
            </summary>
            <value>The default event arguments.</value>
            <remarks>
            If the event is raised without user-defined event arguments, the default arguments are
            passed to the event handlers.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.GameObject">
            <summary>
            Represents an object of a game.
            </summary>
            <remarks>
            <para>
            <see cref="T:DigitalRune.Game.GameObject"/>s represent individual items of game logic that are updated once per 
            frame. Game objects are also called game components, game entities, controls, actors, etc.
            </para>
            <para>
            Important note: Each game object must be given a name that is unique within the 
            <see cref="T:DigitalRune.Game.IGameObjectService"/> or the <see cref="T:DigitalRune.Game.GameObjectCollection"/> in which it will 
            be used.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Derived classes should override 
            <see cref="M:DigitalRune.Game.GameObject.OnUpdate(System.TimeSpan)"/>. <see cref="M:DigitalRune.Game.GameObject.OnUpdate(System.TimeSpan)"/> is the place for the logic of the 
            game object.
            </para>
            <para>
            <strong>Interface IAnimatableObject:</strong> The game object implements the
            interface <see cref="T:DigitalRune.Animation.IAnimatableObject"/>. All game object properties can be animated by the 
            DigitalRune Animation system! Any game property can be cast into an 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> by calling <see cref="M:DigitalRune.Game.GameProperty`1.AsAnimatable"/>.
            </para>
            <para>
            <strong>Interface INotifyPropertyChanged:</strong> The game object implements 
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>. For <see cref="T:DigitalRune.Game.GameProperty`1"/>s this is automatically
            handled by the <see cref="T:DigitalRune.Game.GameProperty`1"/> itself. If derived classes need to raise the 
            event for "normal" properties, they have to call
            <see cref="M:DigitalRune.Game.GameObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.GameObject.IsLoaded">
            <summary>
            Gets a value indicating whether the content of this object was loaded.
            </summary>
            <value>
            <see langword="true"/> if the content of this instance is loaded; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            This flag is automatically set and reset in <see cref="M:DigitalRune.Game.GameObject.Load"/> and <see cref="M:DigitalRune.Game.GameObject.Unload"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.GameObject.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name of the game object.</value>
            <remarks>
            The name should be unique and must not be changed when the game object is already loaded.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot change name of a game object because it is already loaded.
            </exception>
        </member>
        <member name="P:DigitalRune.Game.GameObject.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template. The default is <see langword="null"/>.</value>
            <remarks>
            <para>
            If a template is set, this game object has the same properties and events as the 
            template object. If a game object property does not have a local value (see 
            <see cref="P:DigitalRune.Game.GameProperty`1.HasLocalValue"/>), the property value of the template is used
            as the default value.
            </para>
            <para>
            A template object itself can also have a template.
            </para>
            </remarks>
        </member>
        <member name="E:DigitalRune.Game.GameObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Occurs when a property value has changed.
            </summary>
        </member>
        <member name="E:DigitalRune.Game.GameObject.PropertyChanged">
            <summary>
            Occurs when a property value has changed.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.GameObject.NeedToCallPropertyChanged">
            <summary>
            <see langword="true"/> if event handlers are registered for a <see cref="E:DigitalRune.Game.GameObject.PropertyChanged"/> 
            event.
            </summary>
        </member>
        <member name="E:DigitalRune.Game.GameObject.TemplateChanged">
            <summary>
            Occurs when the <see cref="P:DigitalRune.Game.GameObject.Template"/> changed.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.GameObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.GameObject"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.GameObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.GameObject"/> class.
            </summary>
            <param name="name">The unique name.</param>
        </member>
        <member name="M:DigitalRune.Game.GameObject.Load">
            <summary>
            Loads the content of the game object.
            </summary>
            <remarks>
            <para>
            This method is automatically called when the game object is added to a 
            <see cref="T:DigitalRune.Game.IGameObjectService"/>. 
            </para>
            <para>
            <see cref="M:DigitalRune.Game.GameObject.OnLoad"/> will be called automatically in this method. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.GameObject.OnLoad">
            <summary>
            Called when the game object should load its content.
            </summary>
            <remarks>
            This method is automatically called after the game object was added to a 
            <see cref="T:DigitalRune.Game.IGameObjectService"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.GameObject.Unload">
            <summary>
            Unloads the content of the game object.
            </summary>
            <remarks>
            <para>
            This method is automatically called when the game object is removed from a 
            <see cref="T:DigitalRune.Game.IGameObjectService"/>. 
            </para>
            <para>
            <see cref="M:DigitalRune.Game.GameObject.OnUnload"/> will be called automatically in this method.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.GameObject.OnUnload">
            <summary>
            Called when the game object should unload its content.
            </summary>
            <remarks>
            This method is automatically called before the game object is removed from its
            <see cref="T:DigitalRune.Game.IGameObjectService"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.GameObject.NewFrame">
            <summary>
            Tells the game object to prepare itself for the next time step.
            </summary>
            <remarks>
            <para>
            This method has to be called at the beginning of a time step. This is normally done
            automatically by the <see cref="T:DigitalRune.Game.IGameObjectService"/>. Do not call this method manually
            unless you have to emulate the function of a <see cref="T:DigitalRune.Game.IGameObjectService"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.GameObject.Update(System.TimeSpan)">
            <summary>
            Updates this game object.
            </summary>
            <param name="deltaTime">The elapsed time since the last frame.</param>
            <remarks>
            <para>
            Normally, this method is called by the <see cref="T:DigitalRune.Game.IGameObjectService"/> each frame. It can
            be called manually, for example, in <see cref="M:DigitalRune.Game.GameObject.OnUpdate(System.TimeSpan)"/> to make sure that another game
            object is updated before this game object. - But in general it is not required to call this
            method.
            </para>
            <para>
            It is safe to call this method multiple times. It will only be executed once per time step.
            </para>
            <para>
            <see cref="M:DigitalRune.Game.GameObject.OnUpdate(System.TimeSpan)"/> will be called automatically in this method.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.GameObject.OnUpdate(System.TimeSpan)">
            <summary>
            Called when the game object should be updated.
            </summary>
            <param name="deltaTime">The elapsed time since the last frame.</param>
            <remarks>
            This method is automatically called in <see cref="M:DigitalRune.Game.GameObject.Update(System.TimeSpan)"/> if the game object
            hasn't already been updated in the current time step. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.GameObject.OnPropertyChanged``1(DigitalRune.Game.GamePropertyEventArgs{``0})">
            <overloads>
            <summary>
            Raises the <see cref="E:DigitalRune.Game.GameObject.PropertyChanged"/> event.
            </summary>
            </overloads>
            
            <summary>
            Raises the <see cref="E:DigitalRune.Game.GameObject.PropertyChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:DigitalRune.Game.GamePropertyEventArgs`1"/> object that provides the arguments for the event.
            </param>
        </member>
        <member name="M:DigitalRune.Game.GameObject.OnPropertyChanged``1(DigitalRune.Game.GameProperty{``0},``0,``0)">
            <summary>
            Is called after a game object property was changed.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="gameProperty">The game object property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:DigitalRune.Game.GameObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Game.GameObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/> in a 
            derived class, be sure to call the base class's <see cref="M:DigitalRune.Game.GameObject.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/> method so 
            that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.GameObject.OnTemplateChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.GameObject.TemplateChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Game.GameObject.OnTemplateChanged(System.EventArgs)"/> in a 
            derived class, be sure to call the base class's <see cref="M:DigitalRune.Game.GameObject.OnTemplateChanged(System.EventArgs)"/> method so 
            that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.GameObject.DigitalRune#Animation#IAnimatableObject#GetAnimatedProperties">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.GameObject.DigitalRune#Animation#IAnimatableObject#GetAnimatableProperty``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)">
            <summary>
            Defines a game object property.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="name">The name.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The property metadata.</returns>
            <remarks>
            Game object properties must be defined using this method before they can be used. Properties
            are identified by name and type. If a property with the given <paramref name="name"/>
            and type <typeparamref name="T"/> has already been defined, the metadata of the existing
            property is returned and the other parameters (<paramref name="category"/>, 
            <paramref name="description"/> and <paramref name="defaultValue"/>) are ignored!
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> must not be an empty string.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameObject.CreateEvent``1(System.String,System.String,System.String,``0)">
            <summary>
            Defines a game object event.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="name">The name.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="defaultEventArgs">
            The default event arguments that are used when the event is raised without custom event
            arguments.
            </param>
            <returns>The event metadata.</returns>
            <remarks>
            Game object events must be defined using this method before they can be used. Events are
            identified by name and type. If an event with the given <paramref name="name"/> and type 
            <typeparamref name="T"/> has already been defined, the metadata of the existing event is
            returned and the other parameters (<paramref name="category"/>, 
            <paramref name="description"/> and <paramref name="defaultEventArgs"/>) are ignored!
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> must not be an empty string.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameObject.GetPropertyMetadata``1(System.String)">
            <overloads>
            <summary>
            Gets game object property metadata.
            </summary>
            </overloads>
            
            <summary>
            Gets the metadata of the property with the given name.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="name">The property name.</param>
            <returns>
            The property metadata, or <see langword="null"/> if no property with the given 
            <paramref name="name"/> was defined with <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameObject.GetPropertyMetadata``1(System.Int32)">
            <summary>
            Gets the metadata of the property with the given ID.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="id">The property ID.</param>
            <returns>
            The property metadata, or <see langword="null"/> if no property with the given 
            <paramref name="id"/> was defined with <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameObject.GetEventMetadata``1(System.String)">
            <overloads>
            <summary>
            Gets the game object event metadata.
            </summary>
            </overloads>
            
            <summary>
            Gets metadata for the event with the given name.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="name">The event name.</param>
            <returns>
            The event metadata, or <see langword="null"/> if no event with the given 
            <paramref name="name"/> was defined with <see cref="M:DigitalRune.Game.GameObject.CreateEvent``1(System.String,System.String,System.String,``0)"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameObject.GetEventMetadata``1(System.Int32)">
            <summary>
            Gets the metadata of the event with the given ID.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="id">The event ID.</param>
            <returns>
            The event metadata, or <see langword="null"/> if no event with the given 
            <paramref name="id"/> was defined with <see cref="M:DigitalRune.Game.GameObject.CreateEvent``1(System.String,System.String,System.String,``0)"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameObject.GetPropertyMetadata">
            <summary>
            Gets the metadata of all game object properties that were created with 
            <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/>.
            </summary>
            <returns>
            The global collection of all created game object property metadata.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameObject.GetEventMetadata">
            <summary>
            Gets the metadata of all game object events that were created with 
            <see cref="M:DigitalRune.Game.GameObject.CreateEvent``1(System.String,System.String,System.String,``0)"/>.
            </summary>
            <returns>
            The global collection of all created game object event metadata.
            </returns>
        </member>
        <member name="P:DigitalRune.Game.GameObject.Properties">
            <summary>
            Gets the game object properties.
            </summary>
            <value>The properties of the game object.</value>
            <remarks>
            The property collection is a collection of all properties of the game object and user
            defined properties. The user and other game object can add additional properties to this 
            collection.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.GameObject.Events">
            <summary>
            Gets the game object events.
            </summary>
            <value>The events of the game object.</value>
            <remarks>
            <para>
            The event collection is a collection of all events of the game object and user defined
            events. The user and other game elements can add additional events to this collection.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.GameObject.GetValue``1(System.String)">
            <overloads>
            <summary> 
            Gets the value of a game object property.
            </summary>
            </overloads>
            
            <summary>
            Gets the value of the property with the given name.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>
            The value of the property.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="propertyName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="propertyName"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            The property is not defined. Properties must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/> before they can be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameObject.GetValue``1(System.Int32)">
            <summary>
            Gets the value of the property with the given ID.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="propertyId">The ID of the property.</param>
            <returns>
            The value of the property.
            </returns>
            <exception cref="T:System.ArgumentException">
            The <paramref name="propertyId"/> is invalid. Properties must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/> before they can be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameObject.GetValue``1(DigitalRune.Game.GamePropertyMetadata{``0})">
            <summary>
            Gets the value of the property with the given metadata.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="propertyMetadata">The metadata of the property.</param>
            <returns>
            The value of the property.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="propertyMetadata"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameObject.SetValue``1(System.String,``0)">
            <overloads>
            <summary>
            Sets the value of a game object property.
            </summary>
            </overloads>
            
            <summary>
            Sets the value of the property with the given name.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The new value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="propertyName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="propertyName"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            The property is not defined. Properties must be defined with
            <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/> before they can be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameObject.SetValue``1(System.Int32,``0)">
            <summary>
            Sets the value of the property with the given ID.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="propertyId">The ID of the property.</param>
            <param name="value">The new value.</param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="propertyId"/> is invalid. Properties must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/> before they can be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameObject.SetValue``1(DigitalRune.Game.GamePropertyMetadata{``0},``0)">
            <summary>
            Set the value of the property for the given metadata.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="propertyMetadata">The metadata of the property.</param>
            <param name="value">The new value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="propertyMetadata"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Game.GameObjectCollection">
            <summary>
            Manages a collection of game objects.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.GameObjectCollection.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:DigitalRune.Game.GameObjectCollection"/>. 
            </summary>
        </member>
        <member name="M:DigitalRune.Game.GameObjectCollection.InsertItem(System.Int32,DigitalRune.Game.GameObject)">
            <summary>
            Inserts an element into the <see cref="T:DigitalRune.Game.GameObjectCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already loaded, probably belongs to another service. Or the name 
            of the game object is not unique.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0, or <paramref name="index"/> is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameObjectCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:DigitalRune.Game.GameObjectCollection"/>.
            </summary>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:DigitalRune.Game.GameObjectCollection.SetItem(System.Int32,DigitalRune.Game.GameObject)">
            <summary>
            Replaces the item at the specified index with the specified item.
            </summary>
            <param name="index">The zero-based index of the item to be replaced.</param>
            <param name="item">The new item.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already loaded, probably belongs to another service. Or the name 
            of the game object is not unique.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GameObjectCollection.MoveItem(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Game.GameObjectManager">
            <summary>
            Manages a collection of <see cref="T:DigitalRune.Game.GameObject"/>s.
            </summary>
            <remarks>
            <para>
            This class has a collection of game objects. The game can add objects and the objects will be
            updated once per frame. Therefore, <see cref="M:DigitalRune.Game.GameObjectManager.Update(System.TimeSpan)"/> has to be called
            once per frame in the game loop.
            </para>
            <para>
            If a game objects removes another game object from the <see cref="P:DigitalRune.Game.GameObjectManager.Objects"/> list, the other
            object will be effectively removed at the end of <see cref="M:DigitalRune.Game.GameObjectManager.Update(System.TimeSpan)"/>
            method. That means <see cref="M:DigitalRune.Game.GameObject.Update(System.TimeSpan)"/> for the current frame will still be
            executed, and in the next frame the object is removed.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.GameObjectManager.Objects">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.GameObjectManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.GameObjectManager"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.GameObjectManager.Update(System.TimeSpan)">
            <summary>
            Updates all game objects.
            </summary>
            <param name="deltaTime">The elapsed time since the last frame.</param>
        </member>
        <member name="T:DigitalRune.Game.GamePropertyCategories">
            <summary>
            Defines a set of standard categories for game object properties and events.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.GamePropertyCategories.Appearance">
            <summary>
            Properties related to how an object appears.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.GamePropertyCategories.Behavior">
            <summary>
            Properties related to how an object acts.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.GamePropertyCategories.Common">
            <summary>
            Properties common among different objects.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.GamePropertyCategories.Default">
            <summary>
            Properties that are grouped in a default category.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.GamePropertyCategories.Input">
            <summary>
            Properties related to input.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.GamePropertyCategories.Layout">
            <summary>
            Properties related to layout.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.GamePropertyCategories.Style">
            <summary>
            Properties related to styling.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.IGameObjectService">
            <summary>
            Manages <see cref="T:DigitalRune.Game.GameObject"/>s.
            </summary>
            <remarks>
            <see cref="T:DigitalRune.Game.GameObject"/>s in these list are automatically updated, usually once per frame.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.IGameObjectService.Objects">
            <summary>
            Gets the game objects.
            </summary>
            <value>The game objects.</value>
            <remarks>
            Each game object is identified by its unique name.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.AnimatableGamePropertyData`1">
            <summary>
            Wraps a <see cref="T:DigitalRune.Game.GameProperty`1"/> and makes it animatable.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
        </member>
        <member name="T:DigitalRune.Game.GamePropertyChangeHandler`1">
            <summary>
            Provides the <see cref="T:System.EventHandler`1"/> that connects a game property with
            another game property.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyChangeHandler`1.#ctor(DigitalRune.Game.GameProperty{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.GamePropertyChangeHandler`1"/> class.
            </summary>
            <param name="gameProperty">The game property.</param>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyChangeHandler`1.Change(System.Object,DigitalRune.Game.GamePropertyEventArgs{`0})">
            <summary>
            Updates the value of the game property.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.GamePropertyEventArgs`1"/> instance containing the event data.
            </param>
        </member>
        <member name="T:DigitalRune.Game.GamePropertyCollection">
            <summary>
            Manages a collection of game object properties.
            </summary>
            <remarks>
            This collection implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>, but enumerating the collection
            allocates heap memory (garbage!) and should only be used in game editors and not in
            performance critical paths of a game.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.GamePropertyCollection.Owner">
            <summary>
            Gets the game object that owns this collection.
            </summary>
            <value>The game object that owns this collection.</value>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.#ctor(DigitalRune.Game.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.GamePropertyCollection"/> struct.
            </summary>
            <param name="owner">The game object that owns this collection.</param>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.GetMetadataChecked``1(System.String)">
            <summary>
            Gets the metadata by name and performs several parameter checks. Exceptions are thrown when
            the name is invalid or no metadata is found.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is an empty string.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.Add``1(System.String)">
            <overloads>
            <summary>
            Adds a game object property with its default value.
            </summary>
            </overloads>
            
            <summary>
            Adds a property with with the given name.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="name">The property name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            The property is not defined. Properties must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/> before they can be added.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.Add``1(System.Int32)">
            <summary>
            Adds a property with the given ID.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="id">The ID of the property.</param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="id"/> is invalid. Properties must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/> before they can be added.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.Add``1(DigitalRune.Game.GamePropertyMetadata{``0})">
            <summary>
            Adds a property for the given metadata.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="metadata">The metadata of the property.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.Get``1(System.String)">
            <overloads>
            <summary> 
            Gets a game object property.
            </summary>
            </overloads>
            
            <summary>
            Gets the property with the given name.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="name">The name of the property.</param>
            <returns>The property.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            The property is not defined. Properties must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/> before they can be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.Get``1(System.Int32)">
            <summary>
            Gets the property with the given ID.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="id">The ID of the property.</param>
            <returns>The property.</returns>
            <exception cref="T:System.ArgumentException">
            The <paramref name="id"/> is invalid. Note: Properties must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/> before they can be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.Get``1(DigitalRune.Game.GamePropertyMetadata{``0})">
            <summary>
            Gets the property for the given metadata.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="metadata">The metadata of the property.</param>
            <returns>The property</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.Remove``1(System.String)">
            <overloads>
            <summary> 
            Removes a game object property.
            </summary>
            </overloads>
            
            <summary>
            Removes the property with the given name.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="name">The name of the property.</param>
            <returns>
            <see langword="true"/> if the property was removed; otherwise, <see langword="false"/>
            if the property was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentException">
            The property is not defined. Properties must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/> before they can be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.Remove(System.Int32)">
            <summary>
            Removes the property with the given ID.
            </summary>
            <param name="id">The ID of the property.</param>
            <returns>
            <see langword="true"/> if the property was removed; otherwise, <see langword="false"/>
            if the property was not found.
            </returns>
            <exception cref="T:System.ArgumentException">
            The <paramref name="id"/> is invalid. Note: Properties must be defined with 
            <see cref="M:DigitalRune.Game.GameObject.CreateProperty``1(System.String,System.String,System.String,``0)"/> before they can be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.Remove(DigitalRune.Game.IGamePropertyMetadata)">
            <summary>
            Removes the property for the given metadata.
            </summary>
            <param name="metadata">The metadata of the property.</param>
            <returns>
            <see langword="true"/> if the property was removed; otherwise, <see langword="false"/> if
            the property was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="metadata"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures 
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.Equals(DigitalRune.Game.GamePropertyCollection)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/> 
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.op_Equality(DigitalRune.Game.GamePropertyCollection,DigitalRune.Game.GamePropertyCollection)">
            <summary>
            Compares two <see cref="T:DigitalRune.Game.GamePropertyCollection"/>s to determine whether they are the same.
            </summary>
            <param name="collection1">The first <see cref="T:DigitalRune.Game.GamePropertyCollection"/>.</param>
            <param name="collection2">The second <see cref="T:DigitalRune.Game.GamePropertyCollection"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="collection1"/> and 
            <paramref name="collection2"/> are the same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyCollection.op_Inequality(DigitalRune.Game.GamePropertyCollection,DigitalRune.Game.GamePropertyCollection)">
            <summary>
            Compares two <see cref="T:DigitalRune.Game.GamePropertyCollection"/>s to determine whether they are different.
            </summary>
            <param name="collection1">The first <see cref="T:DigitalRune.Game.GamePropertyCollection"/>.</param>
            <param name="collection2">The second <see cref="T:DigitalRune.Game.GamePropertyCollection"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="collection1"/> and 
            <paramref name="collection2"/> are different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Game.GamePropertyData`1">
            <summary>
            Stores the value of a game property.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
        </member>
        <member name="T:DigitalRune.Game.GamePropertyEventArgs">
            <summary>
            Provides data for the <see cref="E:DigitalRune.Game.GameProperty`1.Changing"/> and the 
            <see cref="E:DigitalRune.Game.GameProperty`1.Changed"/> event of a game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.GamePropertyEventArgs.Property">
            <summary>
            Gets the game object property.
            </summary>
            <value>The game object property.</value>
        </member>
        <member name="T:DigitalRune.Game.GamePropertyEventArgs`1">
            <summary>
            Provides data for the <see cref="E:DigitalRune.Game.GameProperty`1.Changing"/> and the 
            <see cref="E:DigitalRune.Game.GameProperty`1.Changed"/> event of a game object property.
            </summary>
            <typeparam name="T">The type of the game object property value.</typeparam>
            <remarks>
            <para>
            These type of event arguments are passed to event handlers when the value of a game object 
            property changes. This class stores the <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.OldValue"/> and the <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.NewValue"/> 
            of the property. Event handlers of the <see cref="E:DigitalRune.Game.GameProperty`1.Changing"/> can set the 
            <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.CoercedValue"/> to coerce the property to a corrected value.
            <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.CoercedValue"/> is not used in <see cref="E:DigitalRune.Game.GameProperty`1.Changed"/> events.
            </para>
            <para>
            In detail: When the user calls a <strong>SetValue</strong> method of a 
            <see cref="T:DigitalRune.Game.GameObject"/> the <see cref="E:DigitalRune.Game.GameProperty`1.Changing"/> event is raised (unless
            the new value is the same as the current property value). The <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.OldValue"/> of the
            event arguments is set to the current property value. <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.NewValue"/> and 
            <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.CoercedValue"/> are set to the value that was specified in 
            <strong>SetValue</strong>. The <see cref="E:DigitalRune.Game.GameProperty`1.Changing"/> event handlers can
            change the <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.CoercedValue"/>. After all <see cref="E:DigitalRune.Game.GameProperty`1.Changing"/> event
            handlers have been called the property value is set to the <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.CoercedValue"/>. After
            that, if the <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.CoercedValue"/> is different from the <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.OldValue"/>, the 
            <see cref="E:DigitalRune.Game.GameProperty`1.Changed"/> event is raised. In the event arguments the 
            <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.OldValue"/> is the same as in the <see cref="E:DigitalRune.Game.GameProperty`1.Changing"/> event. 
            <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.NewValue"/> is set to the new property value (which is the coerced value). 
            <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.CoercedValue"/> is not used in <see cref="E:DigitalRune.Game.GameProperty`1.Changed"/> events.
            </para>
            <para>
            <strong>Important:</strong> Event handlers of the <see cref="E:DigitalRune.Game.GameProperty`1.Changing"/> and 
            <see cref="E:DigitalRune.Game.GameProperty`1.Changed"/> events should not directly change the game object
            property using a <strong>SetValue</strong> method. This can result in unexpected behavior. The
            <see cref="P:DigitalRune.Game.GamePropertyEventArgs`1.CoercedValue"/> property of this event arguments can be used instead.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.GamePropertyEventArgs`1.Property">
            <summary>
            Gets the game object property.
            </summary>
            <value>The game object property.</value>
        </member>
        <member name="P:DigitalRune.Game.GamePropertyEventArgs`1.OldValue">
            <summary>
            Gets the old value of the game object property.
            </summary>
            <value>
            The value that the game object property had before the 
            <see cref="E:DigitalRune.Game.GameProperty`1.Changing"/> and the <see cref="E:DigitalRune.Game.GameProperty`1.Changed"/> were
            raised.
            </value>
        </member>
        <member name="P:DigitalRune.Game.GamePropertyEventArgs`1.NewValue">
            <summary>
            Gets the new value of the game object property.
            </summary>
            <value>
            The new value that should be stored in the game object property.
            </value>
        </member>
        <member name="P:DigitalRune.Game.GamePropertyEventArgs`1.CoercedValue">
            <summary>
            Gets or sets the coerced value.
            </summary>
            <value> The coerced value.</value>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyEventArgs`1.Create(DigitalRune.Game.GameProperty{`0},`0,`0)">
            <summary>
            Creates a new instance using resource pooling.
            </summary>
            <param name="property">The property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>
            An <see cref="T:DigitalRune.Game.GamePropertyEventArgs`1"/> instance.
            </returns>
            <remarks>
            This method tries to obtain a free instance from a resource pool. If no instance is
            available, a new instance is allocated on the heap. The caller of this method should call
            <see cref="M:DigitalRune.Game.GamePropertyEventArgs`1.Recycle"/> when the instance is no longer needed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyEventArgs`1.Recycle">
            <summary>
            Recycles the specified instance using resource pooling.
            </summary>
            <remarks>
            This method returns the instance to a resource pool from which it can later be obtained 
            again using <see cref="M:DigitalRune.Game.GamePropertyEventArgs`1.Create(DigitalRune.Game.GameProperty{`0},`0,`0)"/>.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.GamePropertyMetadata`1">
            <summary>
            Identifies and describes a game object property.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
        </member>
        <member name="P:DigitalRune.Game.GamePropertyMetadata`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GamePropertyMetadata`1.Id">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GamePropertyMetadata`1.Category">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GamePropertyMetadata`1.Description">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GamePropertyMetadata`1.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:DigitalRune.Game.GamePropertyMetadata`1.DigitalRune#Game#IGamePropertyMetadata#DefaultValue">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyMetadata`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Game.GamePropertyMetadata`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.GamePropertyMetadata`1.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.GamePropertyMetadata`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="id">The ID.</param>
            <remarks>
            The property metadata is automatically added to the <see cref="P:DigitalRune.Game.GamePropertyMetadata`1.Properties"/> collection!
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.GameProperty`1">
            <summary>
            Represents a property of a <see cref="T:DigitalRune.Game.GameObject"/>
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <remarks>
            <strong>Animation:</strong> Game objects and their game object properties can be animated 
            using the DigitalRune Animation system. In order to animate a specific property
            <see cref="M:DigitalRune.Game.GameProperty`1.AsAnimatable"/> needs to be called. This method returns an 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> for the given property which can be passed to the 
            animation system.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.GameProperty`1.Owner">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GameProperty`1.Metadata">
            <summary>
            Gets the property metadata.
            </summary>
            <value>The property metadata.</value>
        </member>
        <member name="P:DigitalRune.Game.GameProperty`1.DigitalRune#Game#IGameProperty#Metadata">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GameProperty`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GameProperty`1.HasLocalValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GameProperty`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:DigitalRune.Game.GameProperty`1.DigitalRune#Game#IGameProperty#Value">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.GameProperty`1.Change">
            <summary>
            Event handler that automatically changes the value of the property.
            </summary>
            <remarks>
            <para>
            This event handler can be used to connect the property to the property of another game 
            object. It can, for example, be used to connect the <see cref="E:DigitalRune.Game.GameProperty`1.Changed"/>
            event of a <see cref="T:DigitalRune.Game.GameProperty`1"/> to this event.
            </para>
            <code lang="csharp">
            <![CDATA[
            GameObject.CreateProperty<Vector3F>(
              "Position", 
              GamePropertyCategories.Common, 
              "Defines the 3D position.", 
              new Vector3F());
            
            var gameObject1 = new GameObject();
            var gameObject2 = new GameObject();
            
            var property1 = gameObject1.Properties.Get<Vector3F>("Position");
            var property2 = gameObject2.Properties.Get<Vector3F>("Position");
            property1.Changed += property2.Change;
            ]]>
            </code>
            <para>
            Now, whenever the position of the first game object changes the position of the second game 
            object will be updated and set to the same value.
            </para>
            </remarks>
        </member>
        <member name="E:DigitalRune.Game.GameProperty`1.Changing">
            <summary>
            Occurs when the <see cref="P:DigitalRune.Game.GameProperty`1.Value"/> is about to change.
            </summary>
            <remarks>
            <para>
            The <i>sender</i> of the event will be the <see cref="T:DigitalRune.Game.GameObject"/> that owns this
            <see cref="T:DigitalRune.Game.GameProperty`1"/>.
            </para>
            <para>
            This event can be used to coerce the new property value. See 
            <see cref="T:DigitalRune.Game.GamePropertyEventArgs`1"/> for more information.
            </para>
            <para>
            Event handlers should not change the value of the property, as this would cause a new 
            <see cref="E:DigitalRune.Game.GameProperty`1.Changing"/> event to be raised.
            </para>
            </remarks>
        </member>
        <member name="E:DigitalRune.Game.GameProperty`1.Changed">
            <summary>
            Occurs when the <see cref="P:DigitalRune.Game.GameProperty`1.Value"/> changed.
            </summary>
            <remarks>
            <para>
            The <i>sender</i> of the event will be the <see cref="T:DigitalRune.Game.GameObject"/> that owns this
            <see cref="T:DigitalRune.Game.GameProperty`1"/>.
            </para>
            <para>
            Event handlers should not change the value of the property, as this would cause new 
            <see cref="E:DigitalRune.Game.GameProperty`1.Changing"/> and <see cref="E:DigitalRune.Game.GameProperty`1.Changed"/> events to be raised.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.GameProperty`1.#ctor(DigitalRune.Game.GameObject,DigitalRune.Game.GamePropertyMetadata{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.GameProperty`1"/> struct.
            </summary>
            <param name="owner">The game object that owns this property.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:DigitalRune.Game.GameProperty`1.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.GameProperty`1.Reset">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.GameProperty`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures 
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameProperty`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameProperty`1.Equals(DigitalRune.Game.GameProperty{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/> 
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameProperty`1.op_Equality(DigitalRune.Game.GameProperty{`0},DigitalRune.Game.GameProperty{`0})">
            <summary>
            Compares two <see cref="T:DigitalRune.Game.GameProperty`1"/>s to determine whether they are the same.
            </summary>
            <param name="property1">The first <see cref="T:DigitalRune.Game.GameProperty`1"/>.</param>
            <param name="property2">The second <see cref="T:DigitalRune.Game.GameProperty`1"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="property1"/> and 
            <paramref name="property2"/> are the same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameProperty`1.op_Inequality(DigitalRune.Game.GameProperty{`0},DigitalRune.Game.GameProperty{`0})">
            <summary>
            Compares two <see cref="T:DigitalRune.Game.GameProperty`1"/>s to determine whether they are different.
            </summary>
            <param name="property1">The first <see cref="T:DigitalRune.Game.GameProperty`1"/>.</param>
            <param name="property2">The second <see cref="T:DigitalRune.Game.GameProperty`1"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="property1"/> and 
            <paramref name="property2"/> are different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.GameProperty`1.op_Explicit(DigitalRune.Game.GameProperty{`0})~`0">
            <summary>
            Returns the value of the specified <see cref="T:DigitalRune.Game.GameProperty`1"/>.
            </summary>
            <param name="property">The game object property.</param>
            <returns>The value of the game object property.</returns>
        </member>
        <member name="M:DigitalRune.Game.GameProperty`1.AsAnimatable">
            <summary>
            Returns an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> that can be used to animate this
            <see cref="T:DigitalRune.Game.GameProperty`1"/>.
            </summary>
            <returns>
            An <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> instance that animates this game object property.
            </returns>
            <remarks>
            If this method is called more than once on the same game object property, it always returns
            the same <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> instance and the
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> instances are kept alive by the game object. Only if
            the game object property is removed from a game object (using e.g. 
            <see cref="M:DigitalRune.Game.GamePropertyCollection.Remove(System.Int32)"/>), the <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> 
            instance is removed too, and the next call of <see cref="M:DigitalRune.Game.GameProperty`1.AsAnimatable"/> will return a new 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> instance.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.IGameProperty">
            <summary>
            Base interface for <see cref="T:DigitalRune.Game.GameProperty`1"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.IGameProperty.Owner">
            <summary>
            Gets the game object that owns this property.
            </summary>
            <value>The <see cref="T:DigitalRune.Game.GameObject"/> that owns this property.</value>
        </member>
        <member name="P:DigitalRune.Game.IGameProperty.Metadata">
            <summary>
            Gets the property metadata.
            </summary>
            <value>The property metadata.</value>
        </member>
        <member name="P:DigitalRune.Game.IGameProperty.HasLocalValue">
            <summary>
            Gets a value indicating whether this property has a local value.
            </summary>
            <value>
            <see langword="true"/> if this property is set to a local value; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <para>
            If no value was set for a property, then the property has the same value as in the 
            <see cref="P:DigitalRune.Game.GameObject.Template"/> of the game object. If no template is set, then the
            property uses the <see cref="P:DigitalRune.Game.GamePropertyMetadata`1.DefaultValue"/> defined in the 
            <see cref="T:DigitalRune.Game.GamePropertyMetadata`1"/>. In these cases the property does not have a local
            value.
            </para>
            <para>
            If a value was set using a <strong>SetValue</strong> method of the <see cref="T:DigitalRune.Game.GameObject"/>,
            then the property has a local value - even if the new value is the same as the default 
            value!
            </para>
            <para>
            A local value can only be removed using the <see cref="M:DigitalRune.Game.IGameProperty.Reset"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.IGameProperty.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:DigitalRune.Game.IGameProperty.Parse(System.String)">
            <summary>
            Parses the specified string and updates the <see cref="P:DigitalRune.Game.GameProperty`1.Value"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DigitalRune.Game.IGameProperty.Reset">
            <summary>
            Removes any local values and sets the property to its default value.
            </summary>
            <remarks>
            See description in <see cref="P:DigitalRune.Game.IGameProperty.HasLocalValue"/>.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.IGamePropertyMetadata">
            <summary>
            Identifies and describes a game object property.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.IGamePropertyMetadata.Id">
            <summary>
            Gets the unique ID.
            </summary>
            <value>The unique ID.</value>
        </member>
        <member name="P:DigitalRune.Game.IGamePropertyMetadata.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
            <remarks>
            This can be any string, like "Appearance", "Behavior", that can be used to group properties
            in a game editor. See <see cref="T:DigitalRune.Game.GamePropertyCategories"/> for a list of default categories.
            </remarks>
            <seealso cref="T:DigitalRune.Game.GamePropertyCategories"/>
        </member>
        <member name="P:DigitalRune.Game.IGamePropertyMetadata.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
            <remarks>
            This can be any string that describes the property for users of a game editor.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.IGamePropertyMetadata.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="T:DigitalRune.Game.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Game"/> namespace provides common types to implement game logic.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.States.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Game.States"/> namespace provides types to create complex state
            machines.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.States.State">
            <summary>
            Defines a state in a state machine.
            </summary>
            <remarks>
            Important note: Each state must be given a name that is unique within the 
            <see cref="T:DigitalRune.Game.States.StateCollection"/> in which it will be used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.State.IsActive">
            <summary>
            Gets a value indicating whether this state is active.
            </summary>
            <value>
            <see langword="true"/> if this state is active; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.States.State.Name">
            <summary>
            Gets or sets the name of the state.
            </summary>
            <value>The name of the state.</value>
            <exception cref="T:System.InvalidOperationException">
            Cannot change name of a state because it is already part of <see cref="T:DigitalRune.Game.States.StateCollection"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Game.States.State.Owner">
            <summary>
            Gets the state collection that owns this state.
            </summary>
            <value>The state collection that owns this state.</value>
        </member>
        <member name="P:DigitalRune.Game.States.State.ParallelSubStates">
            <summary>
            Gets the parallel sub-state collections.
            </summary>
            <value>The parallel sub-state collections.</value>
            <remarks>
            If there are no sub-states, this collection is empty. If this state has sub-states
            but no concurrent sub-states, then this collection contains exactly one 
            <see cref="T:DigitalRune.Game.States.StateCollection"/>. If this state has several concurrent sub-states, this 
            collection contains several <see cref="T:DigitalRune.Game.States.StateCollection"/>s. The states in each 
            <see cref="T:DigitalRune.Game.States.StateCollection"/> are executed in parallel. ("Parallel" in this context means
            that the sub-states are executed "independently from each other". It does not necessarily
            mean that the sub-states are executed concurrently on different threads.)
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.State.Transitions">
            <summary>
            Gets the transitions.
            </summary>
            <value>The transitions.</value>
            <remarks>
            If a <see cref="P:DigitalRune.Game.States.Transition.SourceState"/> of a <see cref="T:DigitalRune.Game.States.Transition"/> is set, the 
            transition is automatically added to the <see cref="P:DigitalRune.Game.States.State.Transitions"/> collection of the source
            state. In most cases it is not necessary to manually add transitions to this collection. -
            However, if a transition is added to this collection, the 
            <see cref="P:DigitalRune.Game.States.Transition.SourceState"/> property of the transitions is set automatically.
            </remarks>
        </member>
        <member name="E:DigitalRune.Game.States.State.Enter">
            <summary>
            Occurs when the state is entered.
            </summary>
        </member>
        <member name="E:DigitalRune.Game.States.State.Update">
            <summary>
            Occurs when the state is updated.
            </summary>
        </member>
        <member name="E:DigitalRune.Game.States.State.Exit">
            <summary>
            Occurs when the state is exited.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.States.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.States.State"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.States.State.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.States.State"/> class.
            </summary>
            <param name="name">The name of this state.</param>
        </member>
        <member name="M:DigitalRune.Game.States.State.Contains(DigitalRune.Game.States.State)">
            <summary>
            Determines whether the given state is a sub-state.
            </summary>
            <param name="subState">The other state.</param>
            <returns>
            <see langword="true"/> if <paramref name="subState"/> is a sub-state of this state; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.States.State.UpdateTransitions(DigitalRune.Game.States.StateEventArgs)">
            <summary>
            Performs state transitions.
            </summary>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.States.StateEventArgs"/> instance containing the required data.
            </param>
            <returns>
            The firing transition; or <see langword="null"/> if no transition is firing.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.States.State.EnterState(DigitalRune.Game.States.Transition,DigitalRune.Game.States.StateEventArgs)">
            <summary>
            Enters the state.
            </summary>
            <param name="transition">The firing transition.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.States.StateEventArgs"/> instance containing the required data.
            </param>
        </member>
        <member name="M:DigitalRune.Game.States.State.UpdateState(DigitalRune.Game.States.StateEventArgs)">
            <summary>
            Updates the state.
            </summary>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.States.StateEventArgs"/> instance containing the required data.
            </param>
        </member>
        <member name="M:DigitalRune.Game.States.State.ExitState(DigitalRune.Game.States.Transition,DigitalRune.Game.States.StateEventArgs)">
            <summary>
            Exits to the specified target state.
            </summary>
            <param name="transition">The firing transition.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.States.StateEventArgs"/> instance containing the required data.
            </param>
            <returns>
            <see langword="true"/> if this state was exited. <see langword="false"/> if this state is 
            still active because the target state is a sub-state of this state.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.States.State.OnEnter(DigitalRune.Game.States.StateEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.States.State.Enter"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:DigitalRune.Game.States.StateEventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Game.States.State.OnEnter(DigitalRune.Game.States.StateEventArgs)"/> in a derived
            class, be sure to call the base class's <see cref="M:DigitalRune.Game.States.State.OnEnter(DigitalRune.Game.States.StateEventArgs)"/> method so that registered
            delegates receive the event.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.States.State.OnUpdate(DigitalRune.Game.States.StateEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.States.State.Update"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:DigitalRune.Game.States.StateEventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Game.States.State.OnUpdate(DigitalRune.Game.States.StateEventArgs)"/> in a derived
            class, be sure to call the base class's <see cref="M:DigitalRune.Game.States.State.OnUpdate(DigitalRune.Game.States.StateEventArgs)"/> method so that registered
            delegates receive the event.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.States.State.OnExit(DigitalRune.Game.States.StateEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.States.State.Exit"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:DigitalRune.Game.States.StateEventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Game.States.State.OnExit(DigitalRune.Game.States.StateEventArgs)"/> in a derived
            class, be sure to call the base class's <see cref="M:DigitalRune.Game.States.State.OnExit(DigitalRune.Game.States.StateEventArgs)"/> method so that registered
            delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.States.StateCollection">
            <summary>
            Manages a collection of <see cref="T:DigitalRune.Game.States.State"/>s.
            </summary>
            <remarks>
            <see langword="null"/> items or duplicate items are not allowed in this collection. The 
            collection has a few special state references: <see cref="P:DigitalRune.Game.States.StateCollection.InitialState"/>, 
            <see cref="P:DigitalRune.Game.States.StateCollection.FinalState"/>, and <see cref="P:DigitalRune.Game.States.StateCollection.ActiveState"/>. These references must refer to states
            contained in the collection. If a referenced state is removed from the collection the 
            reference is set to <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.StateCollection.InitialState">
            <summary>
            Gets or sets the initial state.
            </summary>
            <value>The initial state.</value>
            <remarks>
            Per default and if this value is set to <see langword="null"/>, the first state in the 
            collection is the initial state. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.StateCollection.FinalState">
            <summary>
            Gets or sets the final state.
            </summary>
            <value>The final state. The default value is <see langword="null"/>.</value>
            <remarks>
            <para>
            A final state is only relevant if this state collection contains the sub-states of another 
            state and the parent state has an event-less transition (= a transition where 
            <see cref="P:DigitalRune.Game.States.Transition.FireAlways"/> is set). An event-less transition usually fires
            immediately. But when a final state is set, the event-less transition can only fire when the
            final state of the sub-states is active.
            </para>
            <para>
            If a state has parallel sub-states with multiple final states, then all final states must be 
            active before any event-less transitions can fire.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.StateCollection.SaveHistory">
            <summary>
            Gets or sets a value indicating whether this state collection has a "history state".
            </summary>
            <value>
            <see langword="true"/> if the collection saves its history; otherwise, 
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            When a state collection is re-entered, the initial state becomes active. But if this 
            property is set to <see langword="true"/>, the state collection remembers its history and on
            re-enter the last active state is reactivated. This functionality implements the "history
            state" of standard UML state machine.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.StateCollection.ActiveState">
            <summary>
            Gets the active state.
            </summary>
            <value>The active state - or <see langword="null"/> if no state is active.</value>
        </member>
        <member name="P:DigitalRune.Game.States.StateCollection.LastActiveState">
            <summary>
            Gets or sets the last active state.
            </summary>
            <value>The last active state.</value>
            <remarks>
            This state is used as the initial state if the state collection is re-entered and 
            <see cref="P:DigitalRune.Game.States.StateCollection.SaveHistory"/> is enabled.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.StateCollection.Owner">
            <summary>
            Gets the state that owns this state collection.
            </summary>
            <value>
            The owner state - or <see langword="null"/> if the owner is the state machine itself.
            </value>
        </member>
        <member name="M:DigitalRune.Game.States.StateCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.States.StateCollection"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.States.StateCollection.ContainsRecursive(DigitalRune.Game.States.State)">
            <summary>
            Determines whether the specified state is directly or indirectly contained in this 
            collection.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.States.StateCollection.GetChild(DigitalRune.Game.States.State)">
            <summary>
            Gets the child that is or contains the given state.
            </summary>
            <param name="state">The state or sub-state.</param>
            <returns>
            The child that is or contains <paramref name="state"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.States.StateCollection.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.States.StateCollection.InsertItem(System.Int32,DigitalRune.Game.States.State)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">
            The object to insert. The value can be <see langword="null"/> for reference types.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. Duplicate states are not 
            allowed in the collection.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero. Or <paramref name="index"/> is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.States.StateCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero. Or <paramref name="index"/> is equal to or 
            greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.States.StateCollection.SetItem(System.Int32,DigitalRune.Game.States.State)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">
            The new value for the element at the specified index. The value can be 
            <see langword="null"/> for reference types.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection. Duplicate states are not 
            allowed in the collection.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            Or <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.States.StateCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Game.States.StateCollection"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Game.States.StateCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.States.StateCollection.UpdateTransitions(DigitalRune.Game.States.StateEventArgs)">
            <summary>
            Performs state transitions.
            </summary>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.States.StateEventArgs"/> instance containing the required data.
            </param>
            <returns>
            The firing transition; or <see langword="null"/> if no transition is firing.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.States.StateCollection.EnterState(DigitalRune.Game.States.Transition,DigitalRune.Game.States.StateEventArgs)">
            <summary>
            Enters a new state.
            </summary>
            <param name="transition">The transition. (Can be <see langword="null"/>.)</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.States.StateEventArgs"/> instance containing the required data.
            </param>
        </member>
        <member name="M:DigitalRune.Game.States.StateCollection.UpdateState(DigitalRune.Game.States.StateEventArgs)">
            <summary>
            Updates the active state.
            </summary>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.States.StateEventArgs"/> instance containing the required data.
            </param>
        </member>
        <member name="M:DigitalRune.Game.States.StateCollection.ExitState(DigitalRune.Game.States.Transition,DigitalRune.Game.States.StateEventArgs)">
            <summary>
            Exits to the specified target state.
            </summary>
            <param name="transition">The firing transition.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.States.StateEventArgs"/> instance containing the required data.
            </param>
        </member>
        <member name="M:DigitalRune.Game.States.StateCollection.GetCollection(DigitalRune.Game.States.State,DigitalRune.Game.States.State)">
            <summary>
            Gets the collection that contains the two given states.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.States.StateEventArgs">
            <summary>
            Provides arguments for the <see cref="E:DigitalRune.Game.States.State.Enter"/>, <see cref="E:DigitalRune.Game.States.State.Update"/> and
            <see cref="E:DigitalRune.Game.States.State.Exit"/> events of a <see cref="T:DigitalRune.Game.States.State"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Game.States.StateEventArgs.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
            <remarks>
            The value of <see cref="F:DigitalRune.Game.States.StateEventArgs.Empty"/> is a read-only instance of <see cref="T:DigitalRune.Game.States.StateEventArgs"/> 
            equivalent to the result of calling the <see cref="T:DigitalRune.Game.States.StateEventArgs"/> constructor.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.StateEventArgs.DeltaTime">
            <summary>
            Gets the size of the current time step.
            </summary>
            <value>The size of the current time step.</value>
        </member>
        <member name="M:DigitalRune.Game.States.StateEventArgs.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.States.StateEventArgs"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.States.StateEventArgs"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.States.StateEventArgs.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.States.StateEventArgs"/> class for the given time
            step.
            </summary>
            <param name="deltaTime">The size of the current time step.</param>
        </member>
        <member name="T:DigitalRune.Game.States.StateMachine">
            <summary>
            Represents a state machine.
            </summary>
            <remarks>
            <para>
            This is an implementation of the UML state machine view.
            </para>
            <para>
            <see cref="M:DigitalRune.Game.States.StateMachine.Update(System.TimeSpan)"/> must be called to let the state machine advance a single
            time step. All transitions and state updates are performed only when the method 
            <see cref="M:DigitalRune.Game.States.StateMachine.Update(System.TimeSpan)"/> is called. Transition events between <see cref="M:DigitalRune.Game.States.StateMachine.Update(System.TimeSpan)"/> calls are 
            stored and executed at the beginning of the next <see cref="M:DigitalRune.Game.States.StateMachine.Update(System.TimeSpan)"/> call.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.StateMachine.States">
            <summary>
            Gets the states.
            </summary>
            <value>The states.</value>
        </member>
        <member name="M:DigitalRune.Game.States.StateMachine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.States.StateMachine"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.States.StateMachine.Update(System.TimeSpan)">
            <summary>
            Updates the state machine.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
        </member>
        <member name="T:DigitalRune.Game.States.SubStatesCollection">
            <summary>
            Manages the parallel sub-states of a <see cref="T:DigitalRune.Game.States.State"/>.
            </summary>
            <remarks>
            <see langword="null"/> or duplicate items are not allowed in this collection.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.States.SubStatesCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.States.SubStatesCollection"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.States.Transition">
            <summary>
            Defines a transition between two states.
            </summary>
            <remarks>
            <para>
            A transition changes the active state from <see cref="P:DigitalRune.Game.States.Transition.SourceState"/> to 
            <see cref="P:DigitalRune.Game.States.Transition.TargetState"/>. It "fires" if <see cref="M:DigitalRune.Game.States.Transition.Fire"/> was called and the 
            <see cref="P:DigitalRune.Game.States.Transition.Guard"/> condition evaluates to <see langword="true"/>. The 
            <see cref="M:DigitalRune.Game.States.Transition.Fire(System.Object,System.EventArgs)"/> method has an event handler signature, so it can be
            connect to a standard .NET event.
            </para>
            <para>
            The <see cref="E:DigitalRune.Game.States.Transition.Action"/> event is raised when a transition is performed. Transitions are
            performed at the beginning of <see cref="T:DigitalRune.Game.States.StateMachine"/>.<see cref="M:DigitalRune.Game.States.StateMachine.Update(System.TimeSpan)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.Transition.Delay">
            <summary>
            Gets or sets the time delay.
            </summary>
            <value>The time delay.</value>
            <remarks>
            If the transition was triggered, the transition is delayed for this time span.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.Transition.Guard">
            <summary>
            Gets or sets the guard predicate.
            </summary>
            <value>
            The guard predicate. Per default, this value is <see langword="null"/> - which is treated as
            "always true".
            </value>
            <remarks>
            A transition can fire if this predicate returns <see langword="true"/>. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.Transition.FireAlways">
            <summary>
            Gets or sets a value indicating whether this transition should fire always.
            </summary>
            <value>
            <see langword="true"/> if transition fires always; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            Setting this value to <see langword="true"/> creates a transition that does not need a
            <see cref="M:DigitalRune.Game.States.Transition.Fire"/> call to be triggered. Instead it acts as if <see cref="M:DigitalRune.Game.States.Transition.Fire"/> is 
            called in each time step. Even if this value is <see langword="true"/>, the 
            <see cref="P:DigitalRune.Game.States.Transition.Guard"/> condition and the <see cref="P:DigitalRune.Game.States.Transition.Delay"/> are still active. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.Transition.Name">
            <summary>
            Gets or sets the name of the state.
            </summary>
            <value>The name of the state.</value>
        </member>
        <member name="P:DigitalRune.Game.States.Transition.SourceState">
            <summary>
            Gets or sets the source state.
            </summary>
            <value>The source state.</value>
            <remarks>
            Setting/resetting this property automatically updates the <see cref="P:DigitalRune.Game.States.State.Transitions"/> 
            collection of the source state. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.Transition.TargetState">
            <summary>
            Gets or sets the target state.
            </summary>
            <value>The target state.</value>
        </member>
        <member name="E:DigitalRune.Game.States.Transition.Action">
            <summary>
            Occurs when the transition is performed.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.States.Transition.Fire">
            <overloads>
            <summary>
            Fires this transition.
            </summary>
            </overloads>
            
            <summary>
            Fires this transition.
            </summary>
            <remarks>
            If this method is called, the transition's <see cref="P:DigitalRune.Game.States.Transition.Guard"/> condition is evaluated
            in the next time step of the <see cref="T:DigitalRune.Game.States.StateMachine"/>. If the <see cref="P:DigitalRune.Game.States.Transition.Guard"/>
            condition is <see langword="true"/>, the transition is performed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.States.Transition.Fire(System.Object,System.EventArgs)">
            <summary>
            Fires this transition. (Event handler signature)
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
            <remarks>
            <para>
            If this method is called, the transition's <see cref="P:DigitalRune.Game.States.Transition.Guard"/> condition is evaluated
            in the next time step of the <see cref="T:DigitalRune.Game.States.StateMachine"/>. If the <see cref="P:DigitalRune.Game.States.Transition.Guard"/>
            condition is <see langword="true"/>, the transition is performed.
            </para>
            <para>
            This method can be used as an event handler.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.States.Transition.Update(System.TimeSpan)">
            <summary>
            Checks if the transition should be performed.
            </summary>
            <param name="deltaTime">The time step.</param>
            <returns>
            <see langword="true"/> if the transition should be performed; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Game.States.Transition.OnAction(DigitalRune.Game.States.StateEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.States.Transition.Action"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:DigitalRune.Game.States.StateEventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Game.States.Transition.OnAction(DigitalRune.Game.States.StateEventArgs)"/> in a derived
            class, be sure to call the base class's <see cref="M:DigitalRune.Game.States.Transition.OnAction(DigitalRune.Game.States.StateEventArgs)"/> method so that registered
            delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.States.TransitionCollection">
            <summary>
            Manages the <see cref="T:DigitalRune.Game.States.Transition"/>s of a <see cref="T:DigitalRune.Game.States.State"/>.
            </summary>
            <remarks>
            <see langword="null"/> or duplicate items are not allowed in this collection.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.States.TransitionCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:DigitalRune.Game.States.Transition"/> with the specified name.
            </summary>
            <param name="name">The name of the transition.</param>
        </member>
        <member name="M:DigitalRune.Game.States.TransitionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.States.TransitionCollection"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.Timing.GameClockEventArgs">
            <summary>
            Provides arguments for a game clock's <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/> event.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.Timing.GameClockEventArgs.DeltaTime">
            <summary>
            Gets the amount of time that has elapsed since the last <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/>
            event.
            </summary>
            <value>The elapsed time since the last <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/> event.</value>
        </member>
        <member name="P:DigitalRune.Game.Timing.GameClockEventArgs.GameTime">
            <summary>
            Gets the game time, which is the sum of all <see cref="P:DigitalRune.Game.Timing.GameClockEventArgs.DeltaTime"/> values.
            </summary>
            <value>The game time, which is the sum of all <see cref="P:DigitalRune.Game.Timing.GameClockEventArgs.DeltaTime"/> values.</value>
        </member>
        <member name="P:DigitalRune.Game.Timing.GameClockEventArgs.TotalTime">
            <summary>
            Gets the duration (wall clock time) for which the clock is running.
            </summary>
            <value>The duration (wall clock time) for which the clock is running.</value>
        </member>
        <member name="T:DigitalRune.Game.Timing.HighPrecisionClock">
            <summary>
            Accurately measures the time by using the system's performance counter.
            (Not available in Silverlight.)
            </summary>
            <remarks>
            <para>
            The method <see cref="M:DigitalRune.Game.Timing.HighPrecisionClock.Update"/> has to be called regularly to trigger <see cref="E:DigitalRune.Game.Timing.HighPrecisionClock.TimeChanged"/>
            events.
            </para>
            <para>
            The <see cref="T:DigitalRune.Game.Timing.HighPrecisionClock"/> by default uses a performance counter to accurately 
            measure time. If no performance counter is available, the system timer is used to measures 
            elapsed time. 
            </para>
            <para>
            See <see cref="T:DigitalRune.Game.Timing.IGameClock"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.HighPrecisionClock.IsRunning">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.HighPrecisionClock.DeltaTime">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.HighPrecisionClock.MaxDeltaTime">
            <value>
            The max limit for <see cref="P:DigitalRune.Game.Timing.HighPrecisionClock.DeltaTime" />. The default value is 100 ms.
            </value>
            <inheritdoc />
        </member>
        <member name="P:DigitalRune.Game.Timing.HighPrecisionClock.GameTime">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.HighPrecisionClock.TotalTime">
            <inheritdoc/>
        </member>
        <member name="E:DigitalRune.Game.Timing.HighPrecisionClock.TimeChanged">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.HighPrecisionClock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.Timing.HighPrecisionClock"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.Timing.HighPrecisionClock.Start">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.HighPrecisionClock.Stop">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.HighPrecisionClock.Reset">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.HighPrecisionClock.ResetDeltaTime">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.HighPrecisionClock.Update">
            <summary>
            Updates the time (needs to be called regularly).
            </summary>
            <remarks>
            This method advances the <see cref="P:DigitalRune.Game.Timing.HighPrecisionClock.GameTime"/>, calculates the <see cref="P:DigitalRune.Game.Timing.HighPrecisionClock.DeltaTime"/> 
            (time that has elapsed since the last call of <see cref="M:DigitalRune.Game.Timing.HighPrecisionClock.Update"/>) and raises the 
            <see cref="E:DigitalRune.Game.Timing.HighPrecisionClock.TimeChanged"/> event.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.Timing.HighPrecisionClock.OnTimeChanged(DigitalRune.Game.Timing.GameClockEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.Timing.HighPrecisionClock.TimeChanged"/> event.
            </summary>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.Timing.GameClockEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:DigitalRune.Game.Timing.IGameClock">
            <summary>
            Measures time and raises an event when time changes.
            </summary>
            <remarks>
            <para>
            A game clock measures elapsed time. Call <see cref="M:DigitalRune.Game.Timing.IGameClock.Start"/> to start or resume the time 
            measurement. Call <see cref="M:DigitalRune.Game.Timing.IGameClock.Stop"/> to pause the time measurement. <see cref="M:DigitalRune.Game.Timing.IGameClock.Reset"/> stops
            the time measurement and sets the measured time to 0. The flag <see cref="P:DigitalRune.Game.Timing.IGameClock.IsRunning"/>
            indicates whether the clock is currently measuring time.
            </para>
            <para>
            When time changes, the event <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/> is raised. This event is usually 
            raised at variable (or fixed) intervals to indicate the beginning of a new frame. Between
            <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/> events, the time is treated as constant.
            </para>
            <para>
            <see cref="P:DigitalRune.Game.Timing.IGameClock.TotalTime"/> indicates the total duration for which the clock is running. 
            <see cref="P:DigitalRune.Game.Timing.IGameClock.DeltaTime"/> indicates the time since the last <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/> event or 
            the time since the last <see cref="M:DigitalRune.Game.Timing.IGameClock.ResetDeltaTime"/> call, whichever is more recent.
            <see cref="P:DigitalRune.Game.Timing.IGameClock.GameTime"/> is the sum of all <see cref="P:DigitalRune.Game.Timing.IGameClock.DeltaTime"/> values. If 
            <see cref="M:DigitalRune.Game.Timing.IGameClock.ResetDeltaTime"/> is never executed, <see cref="P:DigitalRune.Game.Timing.IGameClock.TotalTime"/> and 
            <see cref="P:DigitalRune.Game.Timing.IGameClock.GameTime"/> are equal. If <see cref="M:DigitalRune.Game.Timing.IGameClock.ResetDeltaTime"/> was called, 
            <see cref="P:DigitalRune.Game.Timing.IGameClock.TotalTime"/> is greater than <see cref="P:DigitalRune.Game.Timing.IGameClock.GameTime"/>. After long-running operations 
            (e.g. file access) <see cref="M:DigitalRune.Game.Timing.IGameClock.ResetDeltaTime"/> can be called to reset the measurement of 
            <see cref="P:DigitalRune.Game.Timing.IGameClock.DeltaTime"/>. This avoids large jumps of the <see cref="P:DigitalRune.Game.Timing.IGameClock.GameTime"/>. 
            </para>
            <para>
            A game usually has one <see cref="T:DigitalRune.Game.Timing.IGameClock"/> that is running permanently and acts as the 
            central time source. Each game module can further have its own <see cref="T:DigitalRune.Game.Timing.IGameTimer"/>. The 
            <see cref="T:DigitalRune.Game.Timing.IGameTimer"/> controls the timing of the game module. For example: A 
            <see cref="T:DigitalRune.Game.Timing.FixedStepTimer"/> ensures that a game module is updated with a constant frame rate.
            All <see cref="T:DigitalRune.Game.Timing.IGameTimer"/>s are updated by the central <see cref="T:DigitalRune.Game.Timing.IGameClock"/>.
            </para>
            <para>
            The <see cref="T:DigitalRune.Game.Timing.IGameClock"/> is not running by default - <see cref="M:DigitalRune.Game.Timing.IGameClock.Start"/> needs to be 
            called explicitly. The clock should be suspended (<see cref="M:DigitalRune.Game.Timing.IGameClock.Stop"/> method) when the 
            application becomes inactive or the application windows is minimized. Call <see cref="M:DigitalRune.Game.Timing.IGameClock.Start"/> 
            to resume the clock when the application becomes active again.
            </para>
            </remarks> 
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameClock.IsRunning">
            <summary>
            Gets a value indicating whether the clock is running.
            </summary>
            <value>
            <see langword="true"/> if the clock is running; otherwise, <see langword="false"/> if the 
            clock is paused.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameClock.DeltaTime">
            <summary>
            Gets the amount of time that has elapsed since the last <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/>
            event.
            </summary>
            <value>The elapsed time since the last <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/> event.</value>
            <remarks>
            This value is updated before the <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/> is raised. Between
            two <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/> events this value is constant.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameClock.MaxDeltaTime">
            <summary>
            Gets the max limit for <see cref="P:DigitalRune.Game.Timing.IGameClock.DeltaTime"/>.
            </summary>
            <value>The max limit for <see cref="P:DigitalRune.Game.Timing.IGameClock.DeltaTime"/>.</value>
            <remarks>
            <para>
            <see cref="P:DigitalRune.Game.Timing.IGameClock.DeltaTime"/> is clamped to <see cref="P:DigitalRune.Game.Timing.IGameClock.MaxDeltaTime"/>. This is useful to avoid
            large time jumps when the game is paused in the debugger or waiting for a blocking operation
            where the user cannot interact with the game.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameClock.GameTime">
            <summary>
            Gets the game time, which is the sum of all <see cref="P:DigitalRune.Game.Timing.IGameClock.DeltaTime"/> values.
            </summary>
            <value>The game time, which is the sum of all <see cref="P:DigitalRune.Game.Timing.IGameClock.DeltaTime"/> values.</value>
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameClock.TotalTime">
            <summary>
            Gets the duration (wall clock time) for which the clock is running.
            </summary>
            <value>The duration (wall clock time) for which the clock is running.</value>
        </member>
        <member name="E:DigitalRune.Game.Timing.IGameClock.TimeChanged">
            <summary>
            Occurs when the time changed.
            </summary>
            <remarks>
            This event is raised at variable or fixed intervals to indicate the beginning of the next
            frame of the game.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.Timing.IGameClock.Start">
            <summary>
            Starts/resumes the clock.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.Timing.IGameClock.Stop">
            <summary>
            Pauses the clock.
            </summary>
            <remarks>
            The clock is paused and <see cref="P:DigitalRune.Game.Timing.IGameClock.IsRunning"/> is set to <see langword="false"/>. The times
            are not reset. The clock can be resumed by calling <see cref="M:DigitalRune.Game.Timing.IGameClock.Start"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.Timing.IGameClock.Reset">
            <summary>
            Stops the clock and resets all times to 0.
            </summary>
            <remarks>
            The clock is paused and <see cref="P:DigitalRune.Game.Timing.IGameClock.IsRunning"/> is set to <see langword="false"/>. The times
            are reset. The clock can be restarted by calling <see cref="M:DigitalRune.Game.Timing.IGameClock.Start"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.Timing.IGameClock.ResetDeltaTime">
            <summary>
            Resets the time measurement for the current <see cref="P:DigitalRune.Game.Timing.IGameClock.DeltaTime"/>. The next 
            <see cref="P:DigitalRune.Game.Timing.IGameClock.DeltaTime"/> will be the time since <see cref="M:DigitalRune.Game.Timing.IGameClock.ResetDeltaTime"/> was called.
            </summary>
            <remarks>
            <see cref="P:DigitalRune.Game.Timing.IGameClock.DeltaTime"/> represents the time since the last <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/> event. 
            If there are long-running operations, it can happen that it takes a long time until the next
            <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/> event is raised, and <see cref="P:DigitalRune.Game.Timing.IGameClock.DeltaTime"/> is a very large value
            that is not useful for the game logic. For example, this could cause large jumps in the 
            motion of objects. To avoid this problem, call <see cref="M:DigitalRune.Game.Timing.IGameClock.ResetDeltaTime"/> after a 
            long-running operation to restart the time measurement for <see cref="P:DigitalRune.Game.Timing.IGameClock.DeltaTime"/>.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.Timing.ManualClock">
            <summary>
            A simple game clock that needs to be updated manually.
            </summary>
            <remarks>
            <para>
            This <see cref="T:DigitalRune.Game.Timing.IGameClock"/> does not measure time by itself. <see cref="M:DigitalRune.Game.Timing.ManualClock.Update(System.TimeSpan)"/> must be 
            called regularly to advance the time.
            </para>
            <para>
            See <see cref="T:DigitalRune.Game.Timing.IGameClock"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.ManualClock.IsRunning">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.ManualClock.DeltaTime">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.ManualClock.MaxDeltaTime">
            <value>
            The max limit for <see cref="P:DigitalRune.Game.Timing.ManualClock.DeltaTime" />. The default value is 100 ms.
            </value>
            <inheritdoc />
        </member>
        <member name="P:DigitalRune.Game.Timing.ManualClock.GameTime">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.ManualClock.TotalTime">
            <inheritdoc/>
        </member>
        <member name="E:DigitalRune.Game.Timing.ManualClock.TimeChanged">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.ManualClock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.Timing.ManualClock"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Game.Timing.ManualClock.Start">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.ManualClock.Stop">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.ManualClock.Reset">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.ManualClock.DigitalRune#Game#Timing#IGameClock#ResetDeltaTime">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">
            This method is called.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.Timing.ManualClock.Update(System.TimeSpan)">
            <summary>
            Increases the time by the specified time span if the clock is running. (This method needs to
            be called regularly.)
            </summary>
            <param name="deltaTime">
            The elapsed time since the last <see cref="M:DigitalRune.Game.Timing.ManualClock.Update(System.TimeSpan)"/> call.
            </param>
        </member>
        <member name="M:DigitalRune.Game.Timing.ManualClock.OnTimeChanged(DigitalRune.Game.Timing.GameClockEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.Timing.ManualClock.TimeChanged"/> event.
            </summary>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.Timing.GameClockEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:DigitalRune.Game.Timing.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Game.Timing"/> namespace contains clocks and timers for and
            interactive applications and games.
            </summary>
        </member>
        <member name="T:DigitalRune.Game.Timing.FixedStepTimer">
            <summary>
            Controls the timing of a game or game component using fixed-sized time steps.
            </summary>
            <remarks>
            <para>
            See <see cref="T:DigitalRune.Game.Timing.IGameTimer"/> for basic information about game timers.
            </para>
            <para>
            The <see cref="T:DigitalRune.Game.Timing.FixedStepTimer"/> triggers new time steps (<see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/>
            event) in fixed-sized intervals. The size of each time step is <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> or an 
            integer multiple of <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>. <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.MaxNumberOfSteps"/> determines the 
            maximal size of time step: The upper limit of a time step is 
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.MaxNumberOfSteps"/> ∙ <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>. The time beyond this limit will be 
            ignored. (<see cref="P:DigitalRune.Game.Timing.FixedStepTimer.LostTime"/> indicates the amount of time that is dropped in the current 
            time step.)
            </para>
            <para>
            The timer waits until at least <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> seconds have passed since the last time 
            step. During the waiting time the <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.Idle"/> event is raised. <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.IdleTime"/> 
            indicates the time to wait until the next time step.
            </para>
            <para>
            If the time that has passed is not exactly an integer multiple of <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> then 
            the remainder will be considered in the next time step (see also <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedTime"/>
            ). (Exception: <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.MaxNumberOfSteps"/> ∙ <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> is the upper limit. The
            time beyond this value will be dropped.)
            </para>
            <para>
            If the elapsed time since the last last time step is equal to or larger than two times the 
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>, the timer will either raise one <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> event with 
            a <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.DeltaTime"/> that is an integer multiple of <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>, or it will 
            raise several <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> events immediately after each other where each 
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.DeltaTime"/> is equal to <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>. This behavior is controlled by the
            property <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulateTimeSteps"/>. If <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulateTimeSteps"/> is 
            <see langword="true"/>, the timer will raise one <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> event with the
            accumulated <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.DeltaTime"/>.
            </para>
            <para>
            To check if the game is running slowly, the properties <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedSteps"/> and 
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.PendingSteps"/> can be checked. During a time step, <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedSteps"/>
            should be equal to 1 and <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.PendingSteps"/> should be equal to 0, otherwise the game 
            is running slowly - the workload of one time step exceeds the desired <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>. 
            To improve the frame rate of the game, it should reduce its workload and probably skip the 
            rendering until <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedSteps"/> and <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.PendingSteps"/> are back to 
            their normal values. When the game is running slowly and starts to omit work, the game can 
            also call <see cref="M:DigitalRune.Game.Timing.IGameClock.ResetDeltaTime"/> of the <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.Clock"/> to reset the 
            elapsed time of the clock and avoid large jumps of the game time.
            </para>
            <para>
            <strong>Memory Leaks:</strong> If a <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.Clock"/> is set and the timer is running, the 
            game timer handles the <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/> event of the clock. This means, 
            the clock stores a strong reference to the timer and might prevent the timer from being 
            garbage collected. If the timer is not needed anymore, call <see cref="M:DigitalRune.Game.Timing.FixedStepTimer.Stop"/> or set the 
            property <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.Clock"/> tp <see langword="null"/> to allow the timer to be garbage 
            collected.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.Clock">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.FrameCount">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.IsRunning">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.Time">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.DeltaTime">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.IdleTime">
            <summary>
            Gets the idle time.
            </summary>
            <value>The idle time.</value>
            <remarks>
            <para>
            The timer waits until at least <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> seconds have passed before a new time 
            step (<see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> event) is performed. <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.IdleTime"/> 
            indicates the time to wait until the next time step. The <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.Idle"/> event is raised 
            if <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.IdleTime"/> is greater than 0. The application can handle this event to 
            perform additional tasks instead of waiting.
            </para>
            <para>
            The property <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.IdleTime"/> is reset each time step.
            </para>
            <para>
            The value is also scaled by <see cref="P:DigitalRune.Game.Timing.IGameTimer.Speed"/>. <see cref="P:DigitalRune.Game.Timing.IGameTimer.Time"/>, 
            <see cref="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime"/>, <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.IdleTime"/>, and <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.LostTime"/> have
            the same scale. Except that <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.IdleTime"/> and <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.LostTime"/> cannot be
            negative. They always return the absolute value.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.LostTime">
            <summary>
            Gets the amount of time dropped in the current time step.
            </summary>
            <value>The lost time.</value>
            <remarks>
            <para>
            If a time step takes longer than <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.MaxNumberOfSteps"/> ∙ <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> 
            seconds the time above this value is dropped. The dropped time will not be recovered in the 
            next time step. The time is lost.
            </para>
            <para>
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.LostTime"/> is adjusted each time step and only refers to the current time step. 
            (The lost time of multiple time steps is not accumulated.)
            </para>
            <para>
            A value greater than 0 indicates that the application is running too slow: The last time 
            step took longer than <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.MaxNumberOfSteps"/> · <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> seconds to 
            compute.
            </para>
            <para>
            The value is also scaled by <see cref="P:DigitalRune.Game.Timing.IGameTimer.Speed"/>. <see cref="P:DigitalRune.Game.Timing.IGameTimer.Time"/>, 
            <see cref="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime"/>, <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.IdleTime"/>, and <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.LostTime"/> have
            the same scale. Except that <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.IdleTime"/> and <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.LostTime"/> cannot be
            negative. They always return the absolute value.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedTime">
            <summary>
            Gets the accumulated time.
            </summary>
            <value>The accumulated time.</value>
            <remarks>
            <para>
            The timer accumulates the time in <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedTime"/> until at least 
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> seconds have passed before a new time step 
            (<see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> event) is performed. During a 
            <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> event <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedTime"/> is zero if exactly
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> seconds have passed since the last <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> event. 
            If more time has passed, <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedTime"/> contains the exceeding time. 
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedTime"/> is always less than <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>.
            </para>
            <para>
            During <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.Idle"/> events, <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedTime"/> is equal to the elapsed time
            since the last <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> event, and following is true:
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedTime"/> + <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.IdleTime"/> = <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.Speed">
            <inheritdoc/>
        </member>
        <member name="E:DigitalRune.Game.Timing.FixedStepTimer.Idle">
            <inheritdoc/>
        </member>
        <member name="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulateTimeSteps">
            <summary>
            Gets or sets a value indicating whether the time steps are accumulated.
            </summary>
            <value>
            <see langword="true"/> if time steps are accumulated; otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.
            </value>
            <remarks>
            <para>
            When this value is <see langword="true"/> (default) and a time interval greater than the 
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> has passed then <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> event can be 
            triggered with a <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.DeltaTime"/> that is an integer multiple of the 
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>. 
            </para>
            <para>
            In contrast: If this value is <see langword="false"/>, then the 
            <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> event is always trigged with a <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.DeltaTime"/> 
            that is equal to <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>. If a timer interval greater than 
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> has passed, several <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> events will 
            be triggered in a row.
            </para>
            <para>
            If <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulateTimeSteps"/> is <see langword="false"/> then the method that handles
            the <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> event can be sure that the <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.DeltaTime"/> 
            is always constant. The disadvantage is that multiple <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> 
            events can be triggered in a sequence which might not be optimal for performance (i.e. 
            overhead in the event handler could be executed more often than necessary).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize">
            <summary>
            Gets or sets the minimal size of a time step.
            </summary>
            <value>The minimal size of a time step. The default value is 1/60 seconds.</value>
            <remarks>
            <para>
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> defines the minimal size of a time step. The size of a time step will
            be <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> or an integer multiple thereof (maximal: 
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.MaxNumberOfSteps"/> ∙ <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>).
            </para>
            <para>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.StepSizeTolerance">
            <summary>
            Gets or sets the allowed step size deviation.
            </summary>
            <value>The allowed step size deviation. The default value is 0.25 ms.</value>
            <remarks>
            If the difference of the elapsed time and the target <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/> is less than
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSizeTolerance"/>, then the deviation is ignored and the elapsed time is
            clamped to exactly <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>. A small allowed deviation is important if a game
            with a target frame rate of 60 Hz uses vsync and runs on a monitor with a different frame
            rate, e.g. 59.94 Hz NTSC display.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.MaxNumberOfSteps">
            <summary>
            Gets or sets the maximal number of sub-steps for one time step.
            </summary>
            <value>
            The maximal number of sub-steps for one time step. The default value is 8.
            </value>
            <remarks>
            This value implicitly defines the maximum size of a time step. A time step will be an 
            integer multiple of <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>, but maximal 
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.MaxNumberOfSteps"/> ∙ <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedSteps">
            <summary>
            Gets the number of accumulated steps.
            </summary>
            <value>The number of accumulated steps.</value>
            <remarks>
            <para>
            This property is only set during a <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> event. After each 
            <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> event it is reset to 0. During a <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> event 
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedSteps"/> indicates how many fixed time steps have been accumulated. In
            other words:
            </para>
            <para>
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedSteps"/> = |<see cref="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime"/> / <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>|
            </para>
            <para>
            If the game is fast enough or if <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulateTimeSteps"/> is <see langword="false"/>,
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedSteps"/> is exactly 1 during a <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> event. Only
            if the game is running slowly and <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulateTimeSteps"/> is <see langword="true"/>,
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulatedSteps"/> can be greater than 1.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.FixedStepTimer.PendingSteps">
            <summary>
            Gets the number of pending steps.
            </summary>
            <value>The number of pending steps.</value>
            <remarks>
            <para>
            During a time step (when <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> is raised), this property indicates how 
            many time steps are still pending. 
            </para>
            <para>
            If the game is fast enough or if <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulateTimeSteps"/> is <see langword="true"/>,
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.PendingSteps"/> is always 0 during a <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> event. Only
            if the game is running slowly and <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.AccumulateTimeSteps"/> is <see langword="false"/>,
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.PendingSteps"/> can be greater than 1 and indicates how many <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/>
            events will be triggered immediately after the current <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> event.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.Timing.FixedStepTimer.#ctor(DigitalRune.Game.Timing.IGameClock)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.Timing.FixedStepTimer"/> class.
            </summary>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:DigitalRune.Game.Timing.FixedStepTimer.Start">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.FixedStepTimer.Stop">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.FixedStepTimer.Reset">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.FixedStepTimer.OnIdle(DigitalRune.Game.Timing.GameTimerEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.Idle"/> event.
            </summary>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.Timing.GameTimerEventArgs"/> instance containing 
            the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Game.Timing.FixedStepTimer.OnTimeChanged(DigitalRune.Game.Timing.GameTimerEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.Timing.FixedStepTimer.TimeChanged"/> event.
            </summary>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.Timing.GameTimerEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:DigitalRune.Game.Timing.GameTimerEventArgs">
            <summary>
            Provides arguments for a game timer's <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> event.
            </summary>
        </member>
        <member name="P:DigitalRune.Game.Timing.GameTimerEventArgs.FrameCount">
            <summary>
            Gets the number of frames since the start of the timer (= the number of 
            <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> events).
            </summary>
            <value>The number of frames.</value>
        </member>
        <member name="P:DigitalRune.Game.Timing.GameTimerEventArgs.Time">
            <summary>
            Gets the game time.
            </summary>
            <value>The game time.</value>
        </member>
        <member name="P:DigitalRune.Game.Timing.GameTimerEventArgs.DeltaTime">
            <summary>
            Gets the elapsed game time since the last time step.
            </summary>
            <value>
            The elapsed game time since the last time step.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Timing.GameTimerEventArgs.IdleTime">
            <summary>
            Gets the idle time.
            </summary>
            <value>The idle time.</value>
            <remarks>
            See <see cref="P:DigitalRune.Game.Timing.IGameTimer.IdleTime"/> for more information.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.GameTimerEventArgs.LostTime">
            <summary>
            Gets the lost time.
            </summary>
            <value>The lost time.</value>
            <remarks>
            See <see cref="P:DigitalRune.Game.Timing.IGameTimer.LostTime"/> for more information.
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.GameTimerEventArgs.AccumulatedTime">
            <summary>
            Gets the accumulated time.
            </summary>
            <value>The accumulated time.</value>
            <remarks>
            See <see cref="P:DigitalRune.Game.Timing.IGameTimer.AccumulatedTime"/> for more information.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.Timing.IGameTimer">
            <summary>
            Controls the timing of a game or a game component.
            </summary>
            <remarks>
            <para>
            <see cref="T:DigitalRune.Game.Timing.IGameTimer"/>s must be attached to a <see cref="T:DigitalRune.Game.Timing.IGameClock"/>. They are updated 
            automatically by handling the clock's <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/> event.
            </para>
            <para>
            A game usually has one <see cref="T:DigitalRune.Game.Timing.IGameClock"/> that is running permanently and acts as the 
            central time source. Each game or game component can further have its own 
            <see cref="T:DigitalRune.Game.Timing.IGameTimer"/>. The <see cref="T:DigitalRune.Game.Timing.IGameTimer"/> controls the timing of the game 
            component. For example: A <see cref="T:DigitalRune.Game.Timing.FixedStepTimer"/> ensures that a game component is 
            updated with a constant frame rate. All <see cref="T:DigitalRune.Game.Timing.IGameTimer"/>s are updated by the central 
            <see cref="T:DigitalRune.Game.Timing.IGameClock"/>.
            </para>
            <para>
            The terms 'time step' and 'frame' in this documentation refer to the <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> 
            event. The <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> event triggers a new time step. (In a game the 
            <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> event usually triggers the "Update" method of a game module which 
            computes and renders the next frame.)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameTimer.Clock">
            <summary>
            Gets or sets the clock.
            </summary>
            <value>
            The clock. Can be <see langword="null"/>. Without a valid clock, the timer is paused.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameTimer.FrameCount">
            <summary>
            Gets the number of frames since the start of the timer (= the number of 
            <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> events).
            </summary>
            <value>The number of frames.</value>
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameTimer.IsRunning">
            <summary>
            Gets a value indicating whether the timer is running.
            </summary>
            <value>
            <see langword="true"/> if the timer is running; otherwise, <see langword="false"/> if the 
            timer is paused. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameTimer.Time">
            <summary>
            Gets the game time.
            </summary>
            <value>The game time.</value>
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime">
            <summary>
            Gets the elapsed game time since the last time step.
            </summary>
            <value>The elapsed game time since the last time step.</value>
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameTimer.IdleTime">
            <summary>
            Gets the idle time.
            </summary>
            <value>The idle time.</value>
            <remarks>
            <para>
            Most game timers can be configured to start a new time step only at certain intervals. For
            example, the <see cref="T:DigitalRune.Game.Timing.FixedStepTimer"/> only performs time steps at a fixed time interval 
            such as 1/60 seconds (see <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>). Or, the 
            <see cref="T:DigitalRune.Game.Timing.VariableStepTimer"/> waits until at least a minimal amount of time has passed 
            since the last time step (see <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MinDeltaTime"/>).
            </para>
            <para>
            <see cref="P:DigitalRune.Game.Timing.IGameTimer.IdleTime"/> indicates the time that needs to pass until the next time step will
            be performed (see event <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/>).The <see cref="E:DigitalRune.Game.Timing.IGameTimer.Idle"/> event is raised 
            if <see cref="P:DigitalRune.Game.Timing.IGameTimer.IdleTime"/> is greater than 0. The application can handle this event to 
            perform additional tasks instead of waiting.
            </para>
            <para>
            The property <see cref="P:DigitalRune.Game.Timing.IGameTimer.IdleTime"/> is reset each time step.
            </para>
            <para>
            The value is also scaled by <see cref="P:DigitalRune.Game.Timing.IGameTimer.Speed"/>. <see cref="P:DigitalRune.Game.Timing.IGameTimer.Time"/>, 
            <see cref="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime"/>, <see cref="P:DigitalRune.Game.Timing.IGameTimer.IdleTime"/>, and <see cref="P:DigitalRune.Game.Timing.IGameTimer.LostTime"/> have the same
            scale. Except that <see cref="P:DigitalRune.Game.Timing.IGameTimer.IdleTime"/> and <see cref="P:DigitalRune.Game.Timing.IGameTimer.LostTime"/> cannot be negative.
            They always return the absolute value.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameTimer.LostTime">
            <summary>
            Gets the amount of time dropped in the current time step.
            </summary>
            <value>The lost time.</value>
            <remarks>
            <para>
            In most game timers the maximal time of time step can be limited. For example, see property 
            <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.MaxNumberOfSteps"/> of <see cref="T:DigitalRune.Game.Timing.FixedStepTimer"/> or property 
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MaxDeltaTime"/> of <see cref="T:DigitalRune.Game.Timing.VariableStepTimer"/>. If a time
            step takes longer than the maximal allowed amount of time, <see cref="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime"/> is set to
            the maximal allowed amount of time, the time above this value is dropped. The dropped time
            will not be recovered in the next time steps. The time is lost.
            </para>
            <para>
            This mechanism is necessary to preserve stability in physics simulations or other game 
            components. As a result the game is running slower than real-time (wall clock time), but the
            simulation stays stable.
            </para>
            <para>
            <see cref="P:DigitalRune.Game.Timing.IGameTimer.LostTime"/> is adjusted each time step and only refers to the current time step. 
            (The lost time of multiple time steps is not accumulated.)
            </para>
            <para>
            The value is also scaled by <see cref="P:DigitalRune.Game.Timing.IGameTimer.Speed"/>. <see cref="P:DigitalRune.Game.Timing.IGameTimer.Time"/>, 
            <see cref="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime"/>, <see cref="P:DigitalRune.Game.Timing.IGameTimer.IdleTime"/>, and <see cref="P:DigitalRune.Game.Timing.IGameTimer.LostTime"/> have the same 
            scale. Except that <see cref="P:DigitalRune.Game.Timing.IGameTimer.IdleTime"/> and <see cref="P:DigitalRune.Game.Timing.IGameTimer.LostTime"/> cannot be negative.
            They always return the absolute value.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameTimer.AccumulatedTime">
            <summary>
            Gets the accumulated time.
            </summary>
            <value>The accumulated time.</value>
            <remarks>
            <para>
            Some game timers can be configured to start a new time step only at certain intervals. For
            example, the <see cref="T:DigitalRune.Game.Timing.FixedStepTimer"/> only performs time steps at a fixed time interval 
            such as 1/60 seconds (see <see cref="P:DigitalRune.Game.Timing.FixedStepTimer.StepSize"/>). When a time step is
            preformed (<see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> is raised), <see cref="P:DigitalRune.Game.Timing.IGameTimer.AccumulatedTime"/> indicates
            the current elapsed time that exceeds the interval size. When an <see cref="E:DigitalRune.Game.Timing.IGameTimer.Idle"/> event
            is raised, <see cref="P:DigitalRune.Game.Timing.IGameTimer.AccumulatedTime"/> indicates the elapsed since the last 
            <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> event. <see cref="P:DigitalRune.Game.Timing.IGameTimer.AccumulatedTime"/> is always less than the 
            configured time interval for time steps. 
            </para>
            <para>
            For example: A fixed step timer is configured to perform time steps at 1 second intervals.
            If the timer is updated by the clock and exactly 1 second has passed, 
            <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> is raised and <see cref="P:DigitalRune.Game.Timing.IGameTimer.AccumulatedTime"/> is 0. If 1.3 seconds 
            have passed since the last time step, <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> is raised and 
            <see cref="P:DigitalRune.Game.Timing.IGameTimer.AccumulatedTime"/> is 0.3 seconds. During <see cref="E:DigitalRune.Game.Timing.IGameTimer.Idle"/> events, 
            <see cref="P:DigitalRune.Game.Timing.IGameTimer.AccumulatedTime"/> is equal to the time step interval minus the 
            <see cref="P:DigitalRune.Game.Timing.IGameTimer.IdleTime"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.IGameTimer.Speed">
            <summary>
            Gets or sets the speed ratio at which the game time progresses.
            </summary>
            <value>The speed ratio. The default value is 1.0.</value>
            <remarks>
            <para>
            Each timer is bound to a <see cref="T:DigitalRune.Game.Timing.IGameClock"/>. <see cref="P:DigitalRune.Game.Timing.IGameTimer.Speed"/> defines how fast the 
            time progresses in comparison to the <see cref="T:DigitalRune.Game.Timing.IGameClock"/>. A value of 2.0 means that 
            this timer advances twice as fast as the real time. A value less than 1.0 creates a slow 
            motion effect. Negative values should be handled with caution: The game logic needs to be 
            able to deal with negative values.
            </para>
            <para>
            Changing <see cref="P:DigitalRune.Game.Timing.IGameTimer.Speed"/> only effects future time changes, i.e. it does not affect the 
            current <see cref="P:DigitalRune.Game.Timing.IGameTimer.Time"/> or <see cref="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime"/>.
            </para>
            </remarks>
        </member>
        <member name="E:DigitalRune.Game.Timing.IGameTimer.Idle">
            <summary>
            Occurs when application is idle.
            </summary>
            <remarks>
            This event is raised when the timer is updated, but there is time left before the next time 
            step should be performed. See <see cref="P:DigitalRune.Game.Timing.IGameTimer.IdleTime"/> for more details.
            </remarks>
        </member>
        <member name="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged">
            <summary>
            Occurs when the game time has advanced.
            </summary>
            <remarks>
            This event triggers the next time step (frame).
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.Timing.IGameTimer.Reset">
            <summary>
            Stops the timer and resets the time to zero.
            </summary>
            <remarks>
            This method stops the timer and sets the <see cref="P:DigitalRune.Game.Timing.IGameTimer.FrameCount"/>, <see cref="P:DigitalRune.Game.Timing.IGameTimer.Time"/>,
            <see cref="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime"/>, <see cref="P:DigitalRune.Game.Timing.IGameTimer.LostTime"/>, <see cref="P:DigitalRune.Game.Timing.IGameTimer.IdleTime"/> to zero. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.Timing.IGameTimer.Start">
            <summary>
            Starts/resumes the timer.
            </summary>
            <remarks>
            Calling <see cref="M:DigitalRune.Game.Timing.IGameTimer.Start"/> for an already running timer does nothing. This method does not 
            reset <see cref="P:DigitalRune.Game.Timing.IGameTimer.FrameCount"/> or <see cref="P:DigitalRune.Game.Timing.IGameTimer.Time"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Game.Timing.IGameTimer.Stop">
            <summary>
            Pauses the timer.
            </summary>
            <remarks>
            Calling <see cref="M:DigitalRune.Game.Timing.IGameTimer.Stop"/> does nothing if the timer is not running. This method does not 
            reset <see cref="P:DigitalRune.Game.Timing.IGameTimer.FrameCount"/> or <see cref="P:DigitalRune.Game.Timing.IGameTimer.Time"/>.
            </remarks>
        </member>
        <member name="T:DigitalRune.Game.Timing.VariableStepTimer">
            <summary>
            Controls the timing of a game or game component using variable time steps.
            </summary>
            <remarks>
            <para>
            See <see cref="T:DigitalRune.Game.Timing.IGameTimer"/> for basic information about game timers.
            </para>
            <para>
            The <see cref="T:DigitalRune.Game.Timing.VariableStepTimer"/> triggers a new time step 
            (<see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> event) as soon as the last time step has finished.
            <see cref="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime"/> returns the elapsed time since the last time step.
            </para>
            <para>
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MinDeltaTime"/> (default: 0) can be used to set the minimal size of a time step. If 
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MinDeltaTime"/> is greater than 0 than the timer waits until at least 
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MinDeltaTime"/> has passed before the next time step is triggered. During the 
            waiting time the <see cref="E:DigitalRune.Game.Timing.VariableStepTimer.Idle"/> event is raised. <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.IdleTime"/> indicates the time
            to wait until the next time step.
            </para>
            <para>
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MaxDeltaTime"/> (default: <see cref="F:System.TimeSpan.MaxValue"/>) can be used to set the 
            maximal size of a time step. If the previous time step took longer than 
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MaxDeltaTime"/>, then the size of the time step will be limited to 
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MaxDeltaTime"/>. The time beyond this value will be ignored. <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.LostTime"/>
            indicates the time that has been dropped. 
            </para>
            <para>
            <strong>Memory Leaks:</strong> If a <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.Clock"/> is set and the timer is running, the 
            game timer handles the <see cref="E:DigitalRune.Game.Timing.IGameClock.TimeChanged"/> event of the clock. This means, 
            the clock stores a strong reference to the timer and might prevent the timer from being 
            garbage collected. If the timer is not needed anymore, call <see cref="M:DigitalRune.Game.Timing.VariableStepTimer.Stop"/> or set the 
            property <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.Clock"/> tp <see langword="null"/> to allow the timer to be garbage 
            collected.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.VariableStepTimer.Clock">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.VariableStepTimer.FrameCount">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.VariableStepTimer.IsRunning">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.VariableStepTimer.Time">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.VariableStepTimer.DeltaTime">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.VariableStepTimer.IdleTime">
            <summary>
            Gets the idle time.
            </summary>
            <value>The idle time.</value>
            <remarks>
            <para>
            If <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MinDeltaTime"/> is set the timer waits until at least this amount of time has 
            passed before a new time step (<see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> event) is performed. 
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.IdleTime"/> indicates the waiting time until the next time step. The 
            <see cref="E:DigitalRune.Game.Timing.VariableStepTimer.Idle"/> event is raised if <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.IdleTime"/> is greater than 0. The 
            application can handle this event to perform additional tasks instead of waiting.
            </para>
            <para>
            The property <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.IdleTime"/> is reset each time step.
            </para>
            <para>
            The value is also scaled by <see cref="P:DigitalRune.Game.Timing.IGameTimer.Speed"/>. <see cref="P:DigitalRune.Game.Timing.IGameTimer.Time"/>, 
            <see cref="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime"/>, <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.IdleTime"/>, and <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.LostTime"/>
            have the same scale. Except that <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.IdleTime"/> and <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.LostTime"/> 
            cannot be negative. They always return the absolute value.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.VariableStepTimer.LostTime">
            <summary>
            Gets the amount of time dropped in the current time step.
            </summary>
            <value>The lost time.</value>
            <remarks>
            <para>
            If a time step takes longer than <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MaxDeltaTime"/> the time above this value is 
            dropped. The dropped time will not be recovered in the next time step. The time is lost.
            </para>
            <para>
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.LostTime"/> is adjusted each time step and only refers to the current time step. 
            (The lost time of multiple time steps is not accumulated.)
            </para>
            <para>
            A value greater than 0 indicates that the application is running too slow: The last time 
            step took longer than <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MaxDeltaTime"/> seconds to compute.
            </para>
            <para>
            The value is also scaled by <see cref="P:DigitalRune.Game.Timing.IGameTimer.Speed"/>. <see cref="P:DigitalRune.Game.Timing.IGameTimer.Time"/>, 
            <see cref="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime"/>, <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.IdleTime"/>, and <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.LostTime"/>
            have the same scale. Except that <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.IdleTime"/> and <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.LostTime"/> 
            cannot be negative. They always return the absolute value.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.VariableStepTimer.AccumulatedTime">
            <summary>
            Gets the accumulated time.
            </summary>
            <value>The accumulated time.</value>
            <remarks>
            <para>
            During <see cref="E:DigitalRune.Game.Timing.VariableStepTimer.TimeChanged"/> events, <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.AccumulatedTime"/> is always zero.
            </para>
            <para>
            During <see cref="E:DigitalRune.Game.Timing.VariableStepTimer.Idle"/> events, <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.AccumulatedTime"/> is equal to the elapsed
            time since the last <see cref="E:DigitalRune.Game.Timing.VariableStepTimer.TimeChanged"/> event, and following is true:
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.AccumulatedTime"/> + <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.IdleTime"/> = <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MinDeltaTime"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Game.Timing.VariableStepTimer.Speed">
            <inheritdoc/>
        </member>
        <member name="E:DigitalRune.Game.Timing.VariableStepTimer.Idle">
            <inheritdoc/>
        </member>
        <member name="E:DigitalRune.Game.Timing.VariableStepTimer.TimeChanged">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Game.Timing.VariableStepTimer.MinDeltaTime">
            <summary>
            Gets or sets the minimal size of a time step.
            </summary>
            <value>The minimal amount of time for time step. The default value is 0.</value>
            <remarks>
            <para>
            The timer waits until at least this amount of time has passed before a new 
            <see cref="E:DigitalRune.Game.Timing.IGameTimer.TimeChanged"/> event is raised. Use this value to limit the frame 
            rate. For example: <c>MinDeltaTime = new TimeSpan(166666)</c> limits the frame rate to 
            60 Hz.
            </para>
            <para>
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MinDeltaTime"/> causes the application to wait until the enough time has elapsed 
            to perform the next time step. During the waiting time the <see cref="E:DigitalRune.Game.Timing.VariableStepTimer.Idle"/> event is 
            raised. This event can be used to perform additional work instead of waiting. 
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.IdleTime"/> indicates the remaining time until the next time step occurs.
            </para>
            <para>
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MinDeltaTime"/> ≤ <see cref="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime"/> ≤ <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MaxDeltaTime"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Game.Timing.VariableStepTimer.MaxDeltaTime">
            <summary>
            Gets or sets the maximal amount of time for a time step.
            </summary>
            <value>
            The maximal size of a time step. The default value is <see cref="F:System.TimeSpan.MaxValue"/>.
            </value>
            <remarks>
            <para>
            If a time step takes longer than <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MaxDeltaTime"/> the time above this value is 
            dropped. The dropped time will not be recovered in the next time step. The time is lost (see
            also: <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.LostTime"/>).
            </para>
            <para>
            <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MinDeltaTime"/> ≤ <see cref="P:DigitalRune.Game.Timing.IGameTimer.DeltaTime"/> ≤ <see cref="P:DigitalRune.Game.Timing.VariableStepTimer.MaxDeltaTime"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Game.Timing.VariableStepTimer.#ctor(DigitalRune.Game.Timing.IGameClock)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Game.Timing.VariableStepTimer"/> class.
            </summary>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:DigitalRune.Game.Timing.VariableStepTimer.Start">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.VariableStepTimer.Stop">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.VariableStepTimer.Reset">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Game.Timing.VariableStepTimer.OnTimeChanged(DigitalRune.Game.Timing.GameTimerEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.Timing.VariableStepTimer.TimeChanged"/> event.
            </summary>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.Timing.GameTimerEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Game.Timing.VariableStepTimer.OnIdle(DigitalRune.Game.Timing.GameTimerEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Game.Timing.VariableStepTimer.Idle"/> event.
            </summary>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Game.Timing.GameTimerEventArgs"/> instance containing the event data.
            </param>
        </member>
    </members>
</doc>
