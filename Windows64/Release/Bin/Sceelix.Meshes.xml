<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sceelix.Meshes</name>
    </assembly>
    <members>
        <member name="F:Sceelix.Meshes.Data.MeshEntity._faces">
            <summary>
            List of faces that define this mesh.
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Data.MeshEntity.#ctor(System.Collections.Generic.IEnumerable{Sceelix.Meshes.Data.Face},System.Nullable{Sceelix.Mathematics.Data.BoxScope})">
            <summary>
            Creates a mesh entity from a set of faces and a given scope.
            </summary>
            <param name="faces">Face enumeration with the faces</param>
            <param name="scope">(Optional) Explicit boxscope. If not defined, the standard scope calculation will be performed.</param>
        </member>
        <member name="M:Sceelix.Meshes.Data.MeshEntity.#ctor(Sceelix.Meshes.Data.Face[])">
            <summary>
            Creates a mesh entity from one (or many) face(s).
            </summary>
            <param name="faces"></param>
        </member>
        <member name="M:Sceelix.Meshes.Data.MeshEntity.Add(Sceelix.Meshes.Data.Face)">
            <summary>
            Adds the face to the mesh and updates the boxscope.
            </summary>
            <param name="face"></param>
        </member>
        <member name="M:Sceelix.Meshes.Data.MeshEntity.AddRange(System.Collections.Generic.IEnumerable{Sceelix.Meshes.Data.Face})">
            <summary>
            Adds the faces to the mesh and updates the boxscope.
            </summary>
            <param name="faces"></param>
        </member>
        <member name="M:Sceelix.Meshes.Data.MeshEntity.AdjustScope">
            <summary>
            Maintains the orientation and recalculates the translation and sizes so that it encompasses the MeshEntity.
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Data.MeshEntity.AdjustScope(Sceelix.Mathematics.Data.BoxScope)">
            <summary>
            Maintains the orientation of the parent and recalculates the translation and sizes so that it encompasses the current MeshEntity.
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Data.MeshEntity.CleanFaceConnections">
            <summary>
            Removes possible links/references to faces/vertices that may not be part of this mesh.
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Data.MeshEntity.RemoveAndDetach(Sceelix.Meshes.Data.Face,System.Boolean)">
            <summary>
            Removes the face, detaches it from associated vertices and adjusts the scope.
            </summary>
            <param name="face"></param>
        </member>
        <member name="P:Sceelix.Meshes.Data.MeshEntity.Centroid">
            <summary>
            Average position of all mesh vertices, i.e. the mesh centroid.
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.MeshEntity.BoxScope">
            <summary>
            The current boxscope that encloses the mesh. When set, will call the AdjustScope() function to make sure it completely encloses the mesh.
            
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.MeshEntity.SubEntityTree">
            <summary>
            A listing of all subentites that this entity encompasses.
            Order of type or hierarchy is not guaranteed.
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.MeshEntity.Perimeter">
            <summary>
            The sum of the perimeters of all faces in the mesh.
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.MeshEntity.BoxScopeList">
            <summary>
            The scope of the whole mesh, indicating base position, orientation and sizes.
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.Edge.Normal">
            <summary>
            Normal to the edge, obtained by averaging the normals of the adjacent faces.
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Data.Edge.CoincidentWith(Sceelix.Meshes.Data.Edge)">
            <summary>
            Checks if this edge shares the same vertices with the given edge
            (regardless if they are the source or the target vertices). 
            </summary>
            <param name="edge">The edge.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Data.Edge.DeepClone">
            <summary>
            REFACTORING NEEDED!!!
            http://mathforum.org/library/drmath/view/62814.html
            </summary>
            <param name="otherEdge"></param>
            <param name="includingEnds"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Data.Edge.Intersects(Sceelix.Meshes.Data.Edge,System.Boolean)">
            <summary>
            Verifies if a 3D edge intersects another.
            http://mathforum.org/library/drmath/view/62814.html
            </summary>
            <param name="otherEdge"></param>
            <param name="includingEnds"></param>
            <returns></returns>
        </member>
        <member name="T:Sceelix.Meshes.Data.Edge.CoincidencyEqualityComparer">
            <summary>
            The equality comparer for edges that verifies if two edges are coincident 
            (have the same vertices, but could have different directions).
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Data.Face">
            <summary>
            Class Face.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Data.Face.MaterialKey">
            <summary>
            The material key
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.AddHole(System.Collections.Generic.IEnumerable{Sceelix.Mathematics.Data.Vector3D})">
            <summary>
            Joey: Converts the  vectorlist to vertex list and than adds it using regular function
            </summary>
            <param name="vectorList"></param>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.ContainsPoint(Sceelix.Mathematics.Data.Vector3D)">
            <summary>
            Checks if the face the 3D point within its boundary (in the 3D domain).
            Unfinished - works only for convex polygons.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.ContainsPoint(Sceelix.Mathematics.Data.Vector2D)">
            <summary>
            Checks if the face boundary contains the given point (on the 2D domain, considering only X and Y)
            Algorithm: http://www.codeproject.com/Tips/84226/Is-a-Point-inside-a-Polygon
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.DeepClone">
            <summary>
            Performs a deep clone of the object.
            Superclass function performs a memberwiseclone.
            </summary>
            <returns>IEntity.</returns>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.Detach">
            <summary>
            Detaches the face from its vertices.
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.IsCoincidentWith(Sceelix.Meshes.Data.Face)">
            <summary>
            Not quite accurate, but will do for now.
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.#ctor(Sceelix.Mathematics.Data.Vector3D[])">
            <summary>
            Creates a face from a set of 3D Vectors, in clockwise order
            </summary>
            <param name="vertexPositions">Set of 3D vectors</param>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.#ctor(System.Collections.Generic.IEnumerable{Sceelix.Mathematics.Data.Vector3D})">
            <summary>
            Creates a face from a set of 3D Vectors, in clockwise order
            </summary>
            <param name="vertexPositions">Set of 3D vectors</param>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.#ctor(Sceelix.Meshes.Data.Vertex[])">
            <summary>
            Creates a face from a set of vertices, in clockwise order
            </summary>
            <param name="vertices">Set of vertices</param>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.#ctor(System.Collections.Generic.IEnumerable{Sceelix.Meshes.Data.Vertex})">
            <summary>
            Creates a face from an enumerable of vertices, in clockwise order
            </summary>
            <param name="vertices">Set of vertices</param>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.#ctor(Sceelix.Collections.CircularList{Sceelix.Meshes.Data.Vertex})">
            <summary>
            Creates a face from an enumerable of vertices, in clockwise order
            </summary>
            <param name="vertices">Set of vertices</param>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.RecalculateIsPlanar">
            <summary>
            Updates the value of IsPlanar and returns that newly calculated value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.RecalculateIfConvex">
            <summary>
            Updates the value of IfConvex and returns that newly calculated value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Data.Face.CalculateNormal">
            <summary>
            Newell's Method for calculating Planar polygon normals
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.Face.Item(System.Int32)">
            <summary>
            Gets the Vertex located at the input index. Does a circular search, so both negative and oversized indices are accepted.
            </summary>
            <param name="index">Index of the vertex to be located</param>
            <returns>The vertex at the indicated location</returns>
        </member>
        <member name="P:Sceelix.Meshes.Data.Face.Vertices">
            <summary>
            An inumerable allowing to iterate over the vertices of the face
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.Face.HalfVertices">
            <summary>
            An inumerable allowing to iterate over the half vertices of the face
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.Face.Edges">
            <summary>
            An inumerable allowing to iterate over the edges of the face
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Data.HalfVertex.GetEmanatingEdge">
            <summary>
            Get edge that starts at this vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Data.Triangle.SameSide(Sceelix.Mathematics.Data.Vector3D,Sceelix.Mathematics.Data.Vector3D,Sceelix.Mathematics.Data.Vector3D,Sceelix.Mathematics.Data.Vector3D)">
            <summary>
            
            http://www.blackpawn.com/texts/pointinpoly/default.html
            </summary>
            <param name="p1"></param>
            <param name="c"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Sceelix.Meshes.Data.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Data.Vertex._position">
            <summary>
            3D Location of the vertex
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.Vertex.AllHalfVertices">
            <summary>
            Gets all half vertices that start or end from this vertex.
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.Vertex.HalfVertices">
            <summary>
            Gets half vertices that start from this vertex.
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.Vertex.Position">
            <summary>
            3D Location of the vertex
            </summary>
            [NaturalAttribute]
        </member>
        <member name="M:Sceelix.Meshes.Data.Vertex.CreateInterpolatedVertex(Sceelix.Meshes.Data.Face,Sceelix.Mathematics.Data.Vector3D,Sceelix.Meshes.Data.Vertex)">
            <summary>
            This is a hacked function, not working properly for normal faces. Created for the sake of the triangulation of self-intersecting faces.
            </summary>
            <param name="face"></param>
            <param name="position"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="P:Sceelix.Meshes.Data.Vertex.AdjacentFaces">
            <summary>
            An inumerable allowing to iterate over the vertices of the face
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.Vertex.AdjacentVertices">
            <summary>
            An inumerable allowing to iterate over the vertices of the face
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.Vertex.OutgoingEdges">
            <summary>
            Enumerates all the edges that start with this vertex.
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.Vertex.IncomingEdges">
            <summary>
            Enumerates all the edges that end in this vertex.
            </summary>
        </member>
        <member name="P:Sceelix.Meshes.Data.Vertex.AllEdges">
            <summary>
            Enumerates all the edges that either start or end in this vertex
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Helpers.ActorEntityHelper.ResetTranslation``1(``0,Sceelix.Meshes.Helpers.TranslationReset,Sceelix.Meshes.Helpers.TranslationReset,Sceelix.Meshes.Helpers.TranslationReset)">
            <summary>
            Centers the on origin.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actor">The actor.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Helpers.ActorEntityHelper.Rotate``1(``0,System.Single,Sceelix.Mathematics.Data.Vector3D,Sceelix.Mathematics.Data.Vector3D,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Rotates an actor entity in the 3D World.
            </summary>
            <typeparam name="T">Type of entity, which should be a subtype of IActor.</typeparam>
            <param name="actor">Actor to be rotated.</param>
            <param name="angleDegrees">Angle (in degrees) to rotate the actor.</param>
            <param name="axis">The axis around which the actor should be rotated.</param>
            <param name="pivot">The pivot offset of the axis around which the actor should be rotated.</param>
            <param name="axisRelativeToScope">If true, the axis direction is relative to the scope orientation.</param>
            <param name="pivotRelativeToScope">If true, the pivot offset is relative to the scope origin.</param>
            <param name="pivotOffsetRelative">If true, the pivot offset has a scope-size relative value (between 0 and 1).</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Helpers.ActorEntityHelper.Translate``1(``0,Sceelix.Mathematics.Data.Vector3D,System.Boolean)">
            <summary>
            Translates an actor entity in the 3D World.
            </summary>
            <typeparam name="T">Type of entity, which should be a subtype of IActor.</typeparam>
            <param name="actor">Actor to be translated.</param>
            <param name="amount">Sized vector with the direction and amount to translate.</param>
            <param name="relativeToScope">If true, the translation is relative to the scope orientation.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Helpers.MeshEntityHelper.CreateBox(System.Single,System.Single,System.Single)">
            <summary>
            Creates a Box Mesh.
            </summary>
            <param name="width">Size of the box in X.</param>
            <param name="length">Size of the box in Y.</param>
            <param name="height">Size of the box in Z.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Helpers.MeshEntityHelper.CreateCone(System.Single,System.Int32,System.Single)">
            <summary>
            Creates a Cylinder Mesh.
            </summary>
            <param name="radius"></param>
            <param name="segments"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Helpers.MeshEntityHelper.CreateCube(System.Single)">
            <summary>
            Creates a Cube Mesh.
            </summary>
            <param name="size">Size of the cube's edges in every direction.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Helpers.MeshEntityHelper.CreateCylinder(System.Single,System.Int32,System.Single)">
            <summary>
            Creates a Cylinder Mesh.
            </summary>
            <param name="radius"></param>
            <param name="segments"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Helpers.MeshEntityHelper.CreateRectangle(System.Single,System.Int32)">
            <summary>
            Creates a Rectangle Mesh.
            </summary>
            <param name="width">Size of the rectangle in X.</param>
            <param name="length">Size of the rectangle in Y.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Helpers.MeshEntityHelper.CreateSphere(System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a Sphere Mesh.
            </summary>
            <param name="radius">Radius of the sphere.</param>
            <param name="verticalSegments">Number of segments/partitions in the vertical direction.</param>
            <param name="horizontalSegments">Number of segments/partitions in the horizontal direction.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Helpers.MeshEntityHelper.Extrude(Sceelix.Meshes.Data.MeshEntity,System.Single,System.Boolean)">
            <summary>
            Extrudes all the faces of the mesh in the direction of their normal faces.
            </summary>
            <param name="entity">Mesh to be extruded.</param>
            <param name="amount">Size of the extrusion blocks.</param>
            <param name="cap">If true, a face with a flipped orientation will be added where the original mesh faces were.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Helpers.MeshEntityHelper.Offset(Sceelix.Meshes.Data.MeshEntity,System.Single,System.String)">
            <summary>
            Replaces all faces with offset versions that either go inward or outward.
            </summary>
            <param name="entity">Mesh to be extruded.</param>
            <param name="amount">Size of the extrusion blocks.</param>
            <param name="cap">If true, a face with a flipped orientation will be added where the original mesh faces were.</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Helpers.MeshEntityHelper.Pyramidize(Sceelix.Meshes.Data.MeshEntity,System.Single,System.Boolean)">
            <summary>
            Creates a pyramid on all the faces of the mesh in the direction of their normal faces.
            </summary>
            <param name="entity">Mesh to be pyramidized.</param>
            <param name="height">Height of the pyramid.</param>
            <param name="cap">If true, a face with a flipped orientation will be added where the original mesh faces were.</param>
            <returns></returns>
        </member>
        <member name="T:Sceelix.Meshes.Materials.EmissiveMaterial">
            <summary>
            Why material is generic:
            - Easier to create derivatives, because
               - No need to implement equality comparer
               - No need to implement serializer
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Materials.SingleTextureMaterial">
            <summary>
            Why material is generic:
            - Easier to create derivatives, because
               - No need to implement equality comparer
               - No need to implement serializer
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Operations.DivideAndConquerTriangulation.Triangulate(Sceelix.Meshes.Data.Face)">
            <summary>
            Does a more complex triangulation on concave and holed polygon
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Operations.Triangulation.AddContourToLibTess(LibTessDotNet.Tess,Sceelix.Collections.CircularList{Sceelix.Meshes.Data.Vertex},System.Nullable{Sceelix.Mathematics.Data.Matrix},System.Boolean)">
            <summary>
            Adds a contour of a polygon to the external library
            </summary>
            <param name="tess"></param>
            <param name="vertices"></param>
            <param name="angle"></param>
            <param name="hole"></param>
            <param name="rotationMatrix"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Operations.Triangulation.Triangulate(Sceelix.Meshes.Data.Face)">
            <summary>
            Triangulates a polygon with holes.
            </summary>
            <param name="face">Face to be triangulated</param>
            <returns>List of triangles</returns>
        </member>
        <member name="M:Sceelix.Meshes.Operations.Triangulation.TriangulateConvex(Sceelix.Meshes.Data.Face)">
            <summary>
            Does a simple triangulation for convex triangles
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Operations.Triangulation.TriangulateLibTessDotNet(Sceelix.Meshes.Data.Face)">
            <summary>
            Uses a external library to do the triangulation
            Does a more complex triangulation on concave and holed polygon
            </summary>
            <param name="face"></param>
            <returns>List of face triangles</returns>
        </member>
        <member name="T:Sceelix.Meshes.Operations.TriangulationEdge">
            <summary>
            Auxiliary class for the triangulation of self-intersecting faces that result in the creation of new vertices, whose propertes need to be interpolated.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Parameters.MeshPropertyParameter">
            <summary>
            Reads/calculates properties from mesh entities.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.PropertyProcedure.PropertyParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshPropertyParameter._input">
            <summary>
            Mesh entity from which to read the properties.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshPropertyParameter._output">
            <summary>
            Mesh entity from which the properties were read.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshPropertyParameter._parameterArea">
            <summary>
            Area of all faces.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshPropertyParameter._parameterAxisSizes">
            <summary>
            Returns the scope axis Sizes.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshPropertyParameter._parameterCentroid">
            <summary>
            Center of the mesh.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshPropertyParameter._parameterEdges">
            <summary>
            Gets a list of all vertex position pairs of all edges.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshPropertyParameter._parameterFaceCount">
            <summary>
            Number of faces in the mesh.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshPropertyParameter._parameterIsConvex">
            <summary>
            Indicates if all the faces in this mesh are convex.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshPropertyParameter._parameterIsSelfIntersecting">
            <summary>
            Indicates if all the faces in this mesh are convex.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshPropertyParameter._parameterPerimeter">
            <summary>
            Perimeter of all the edges of all faces.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshPropertyParameter._parameterRectangle">
            <summary>
            X-Y Axis Aligned bounding rectangle.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshPropertyParameter._parameterVertexCount">
            <summary>
            Number of vertices in the mesh.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Parameters.MeshSeparateParameter">
            <summary>
            Separation options.
            </summary>
            <seealso cref="T:Sceelix.Core.Parameters.CompoundParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshSeparateParameter._parameterAttributes">
            <summary>
            Defines what the attributes of the individual meshes should be:
            if they should take the attributes of the parent, use the ones of the face
            or mix both.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Parameters.MeshSeparateParameter._parameterScope">
            <summary>
            Defines how the 3D Scope of the individual meshes should be:
            if they should inherit from the parent mesh or assume new ones, adjusted
            to the orientation of the face.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.BillboardCreateProcedure">
            <summary>
            Creates billboard entities with given characteristics.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.BillboardCreateProcedure._output">
            <summary>
            Billboard created according to the defined parameters and/or inputs.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.BillboardCreateProcedure._parameterColor">
            <summary>
            Color tint of the billboard.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.BillboardCreateProcedure._parameterFile">
            <summary>
            Image to be set as billboard.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.BillboardCreateProcedure._parameterSize">
            <summary>
            Size of the billboard in width (X) and height (Y).
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshClipProcedure">
            <summary>
            Performs Clipping operations (Union, Intersection, Difference, Xor) between mesh faces that lie on the same plane.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshClipProcedure._inputSource">
            <summary>
            The first/source/minuend mesh used in the clipping operation.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshClipProcedure._inputTarget">
            <summary>
            The second/target/subtrahend mesh used in the clipping operation.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshClipProcedure._output">
            <summary>
            Resulting mesh from the clipping operation.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshClipProcedure._parameterClipType">
            <summary>
            Type of clipping operation to apply.<br/>
            <b>Union</b> means that the result is the sum of the face areas.<br/>
            <b>Intersection</b> means that the result is the intersection of the faces areas.<br/>
            <b>Difference</b> means that the result is the difference between the faces areas (where the target removes intersecting areas from the source).<br/>
            <b>Difference</b> means that the result corresponds to the areas that do not overlap.<br/>
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure">
            <summary>
            Creates Meshes of primitive models (cubes, spheres),
            or from other Entity types.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure._output">
            <summary>
            Mesh created according to the defined parameters and/or inputs.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure._parameterPrimitive">
            <summary>
            Type of primitive to create.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.CubeMeshParameter">
            <summary>
            Creates a cube.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.CubeMeshParameter._sizeParameter">
            <summary>
            Size of each side of the cube.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.BoxMeshParameter">
            <summary>
            Creates a box.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.BoxMeshParameter._parameterWidth">
            <summary>
            Width (size in X) of the box.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.BoxMeshParameter._parameterLength">
            <summary>
            Length (size in Y) of the box.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.BoxMeshParameter._parameterHeight">
            <summary>
            Height (size in Z) of the box.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.OctahedronMeshParameter">
            <summary>
            Creates an Octahedron.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.OctahedronMeshParameter._parameterRadius">
            <summary>
            Radius of the Octahedron
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.IcosahedronMeshParameter">
            <summary>
            Creates an Icosahedron.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.IcosahedronMeshParameter._parameterSize">
            <summary>
            Side length of the Icosahedron
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.DodecahedronMeshParameter">
            <summary>
            Creates an Dodecahedron.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.DodecahedronMeshParameter._parameterSize">
            <summary>
            Side length of the Dodecahedron
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.SphereMeshParameter">
            <summary>
            Creates a sphere.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.SphereMeshParameter._horizontalSegmentsParameter">
            <summary>
            Number of horizontal segments (parallels) in which the sphere will be divided.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.SphereMeshParameter._radiusParameter">
            <summary>
            Radius of the sphere.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.SphereMeshParameter._verticalSegmentsParameter">
            <summary>
            Number of vertical segments (meridians) in which the sphere will be divided.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.CylinderMeshParameter">
            <summary>
            Creates a cylinder.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.CylinderMeshParameter._heightParameter">
            <summary>
            Height of the cylinder.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.CylinderMeshParameter._radiusParameter">
            <summary>
            Radius of the cylinder.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.CylinderMeshParameter._segmentsParameter">
            <summary>
            Number of horizontal segments (meridians) of the cylinder.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.ConeMeshParameter">
            <summary>
            Creates a cone.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.ConeMeshParameter._heightParameter">
            <summary>
            Height of the cone.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.ConeMeshParameter._radiusParameter">
            <summary>
            Radius of the cone.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.ConeMeshParameter._segmentsParameter">
            <summary>
            Number of horizontal segments (meridians) of the cone.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.FaceMeshParameter">
            <summary>
            Creates a face from a set of coordinates.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.FaceMeshParameter._boundaryParameter">
            <summary>
            Points defining the boundary of the face. At least 3 points are required and the first and last point should differ.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.RectangleMeshParameter">
            <summary>
            Creates a rectangle.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.RectangleMeshParameter._widthParameter">
            <summary>
            Width (size in X) of the rectangle.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.RectangleMeshParameter._heightParameter">
            <summary>
            Height (size in Y) of the rectangle.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.LShapeMeshParameter">
            <summary>
            Creates an L-shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.LShapeMeshParameter._widthParameter">
            <summary>
            Width (size in X) of the shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.LShapeMeshParameter._heightParameter">
            <summary>
            Height (size in Y) of the shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.LShapeMeshParameter._internalWidthParameter">
            <summary>
            Width (size in X) of the shape body. Should be smaller than the Width.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.LShapeMeshParameter._internalHeightParameter">
            <summary>
            Height (size in Y) of the shape body. Should be smaller than the Height.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.TShapeMeshParameter">
            <summary>
            Creates an T-shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.TShapeMeshParameter._widthParameter">
            <summary>
            Width (size in X) of the shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.TShapeMeshParameter._heightParameter">
            <summary>
            Height (size in Y) of the shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.TShapeMeshParameter._internalWidthParameter">
            <summary>
            Width (size in X) of the shape body. Should be smaller than the Width.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.TShapeMeshParameter._internalHeightParameter">
            <summary>
            Height (size in Y) of the shape body. Should be smaller than the Height.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.UShapeMeshParameter">
            <summary>
            Creates an U-shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.UShapeMeshParameter._widthParameter">
            <summary>
            Width (size in X) of the shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.UShapeMeshParameter._heightParameter">
            <summary>
            Height (size in Y) of the shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.UShapeMeshParameter._internalWidthParameter">
            <summary>
            Width (size in X) of the shape body. Should be smaller than the Width.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.UShapeMeshParameter._internalHeightParameter">
            <summary>
            Height (size in Y) of the shape body. Should be smaller than the Height.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.ZShapeMeshParameter">
            <summary>
            Creates an Z-shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.ZShapeMeshParameter._widthParameter">
            <summary>
            Width (size in X) of the shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.ZShapeMeshParameter._heightParameter">
            <summary>
            Height (size in Y) of the shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.ZShapeMeshParameter._internalWidthParameter">
            <summary>
            Width (size in X) of the shape body. Should be smaller than the Width.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.ZShapeMeshParameter._internalHeightParameter">
            <summary>
            Height (size in Y) of the shape body. Should be smaller than the Height.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.CrossMeshParameter">
            <summary>
            Creates an cross shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.CrossMeshParameter._widthParameter">
            <summary>
            Width (size in X) of the shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.CrossMeshParameter._heightParameter">
            <summary>
            Height (size in Y) of the shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.CrossMeshParameter._internalWidthParameter">
            <summary>
            Width (size in X) of the shape body. Should be smaller than the Width.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.CrossMeshParameter._internalHeightParameter">
            <summary>
            Height (size in Y) of the shape body. Should be smaller than the Height.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.CircleMeshParameter">
            <summary>
            Creates a circular shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.CircleMeshParameter._radiusParameter">
            <summary>
            Radius of the circle.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.CircleMeshParameter._segmentsParameter">
            <summary>
            Number of segments of the circle.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.StarMeshParameter">
            <summary>
            Creates a star shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.StarMeshParameter._pointsParameter">
            <summary>
            Number of segments of the star.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.StarMeshParameter._radius1Parameter">
            <summary>
            Radius of the first layer of points.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.StarMeshParameter._radius2Parameter">
            <summary>
            Radius of the second layer of points.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.TextMeshParameter">
            <summary>
            Creates a set of faces with the shape of a given input text. 
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.TextMeshParameter._textParameter">
            <summary>
            Text Content.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.TextMeshParameter._fontParameter">
            <summary>
            Font of the text.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.TextMeshParameter._sizeParameter">
            <summary>
            Size of the text.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.TextMeshParameter._styleParameter">
            <summary>
            Font style.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.TextMeshParameter._attributeCharacter">
            <summary>
            Stores the index of character in each face. The actual caracter can then be obtained in an expression from the original text.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshCreateProcedure.RandomFaceMeshParameter">
            <summary>
            Creates a random looking face.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.RandomFaceMeshParameter._parameterSeed">
            <summary>
            Seed of the random generator.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.RandomFaceMeshParameter._parameterSize">
            <summary>
            Size/scale of the face.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshCreateProcedure.RandomFaceMeshParameter._parameterVertexCount">
            <summary>
            Number of vertices of the face.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshDecomposeProcedure">
            <summary>
            Decomposes a Mesh into faces, vertices or half-vertices, all without 
            destroying the links between the mesh parts.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshDecomposeProcedure._input">
            <summary>
            Mesh to be decomposed.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshDecomposeProcedure._output">
            <summary>
            Mesh subentities (according to the selected "Entity Type" parameter).
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshDecomposeProcedure._outputMesh">
            <summary>
            The original mesh.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshDecomposeProcedure._parameterSubEntities">
            <summary>
            The type of entities into which the mesh should be decomposed.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshDivideProcedure">
            <summary>
            Divides meshes into submeshes according to specific criteria.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshDivideProcedure._input">
            <summary>
            The mesh to be divided.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshDivideProcedure._output">
            <summary>
            The divided meshes, according to the defined groups.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshDivideProcedure._parameterMeshDivideGroups">
            <summary>
            Criteria by which the mesh should be divided. If none is indicated, the whole set of faces will be considered.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshDivideProcedure._parameterSeparateMesh">
            <summary>
            if true, each one of the faces of the mesh will be placed into a separate mesh entity.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshDivideProcedure.MeshDivideAttributeSetParameter">
            <summary>
            Divides the meshes by attribute value, i.e. building sets of faces that share the same value.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshDivideProcedure.MeshDivideParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshDivideProcedure.MeshDivideAttributeSetParameter._parameterValue">
            <summary>
            Value to divide the meshes by.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshDivideProcedure.MeshDivideDirectionSetParameter">
            <summary>
            Divides the meshes into sets of faces that share the same (approximate) normal direction.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshDivideProcedure.MeshDivideParameter" />
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshDivideProcedure.MeshDivideAdjacencySetParameter">
            <summary>
            Divides the meshes by their vertex connections.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshDivideProcedure.MeshDivideParameter" />
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshDivideProcedure.MeshDivideSizeParameter">
            <summary>
            Divides the meshes by number of faces of vertices, so that they don't exceed the requested size.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshDivideProcedure.MeshDivideParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshDivideProcedure.MeshDivideSizeParameter._parameterType">
            <summary>
            Type of element to divide by:<br/>
            <b>Faces</b> means that the meshes will not exceed the indicated face count.<br/>
            <b>Vertices</b> means that the meshes will not exceed the indicated vertex count.<br/>
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshDivideProcedure.MeshDivideSizeParameter._parameterCount">
            <summary>
            The maximum allowed count of faces or vertices to keep in each resulting mesh.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshFlipProcedure">
            <summary>
            Flips mesh faces or coordinates.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshFlipProcedure._parameterFlip">
            <summary>
            Type of mesh flipping operation to perform.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshFlipProcedure.FlipCoordinatesParameter">
            <summary>
            Flips coordinates of all vertex positions.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshFlipProcedure.MeshFlipParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshFlipProcedure.FlipCoordinatesParameter._parameterChoiceCoords">
            <summary>
            Coordinates to flip. For example, "X&lt;-&gt;Y" flips the X with the Y coordinate.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshFlipProcedure.FlipFacesParameter">
            <summary>
            Flips the orientation of the mesh faces.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshFlipProcedure.MeshFlipParameter" />
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshInstanceCreateProcedure">
            <summary>
            Creates mesh instances of a given input mesh.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshInstanceCreateProcedure._input">
            <summary>
            Mesh to be turned into a mesh instance.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshInstanceCreateProcedure._output">
            <summary>
            The created mesh instance.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshLoftProcedure">
            <summary>
            Performs mesh lofting by interpolating the first faces of the input meshes 
            into a new mesh.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.SystemProcedure" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoftProcedure._input">
            <summary>
            The meshes whose first faces are to be interpolated.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoftProcedure._output">
            <summary>
            The lofted mesh.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoftProcedure._parameterSegments">
            <summary>
            Number of segments generated between each pair of faces.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoftProcedure._parameterLowerStrength">
            <summary>
            Lower curve strength at each connected face. Can access the attributes of each mesh using the @@attributeName notation.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoftProcedure._parameterUpperStrength">
            <summary>
            Upper curve strength at each connected face. Can access the attributes of each mesh using the @@attributeName notation.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure">
            <summary>
            Applies rendering materials to meshes.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure._parameterMaterial">
            <summary>
            The type of material to apply to the faces of this mesh.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.ColorMaterialParameter">
            <summary>
            Renders the faces with a given color.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.MeshMaterialParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.ColorMaterialParameter._parameterColor">
            <summary>
            Color to render the faces with. 
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.ColorMaterialParameter._parameterSpecularPower">
            <summary>
            The specular power for lighting calculations (deprecated).
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.EmissiveMaterialParameter">
            <summary>
            Renders the faces with an emissive color.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.MeshMaterialParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.EmissiveMaterialParameter._parameterColor">
            <summary>
            Color to render the faces with. 
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.TextureMaterialParameter">
            <summary>
            Renders the faces with a diffuse texture.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.MeshMaterialParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.TextureMaterialParameter._parameterTexture">
            <summary>
            The diffuse texture.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.TransparentMaterialParameter">
            <summary>
            Renders the faces with a diffuse texture with configurable transparency.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.MeshMaterialParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.TransparentMaterialParameter._parameterDiffuse">
            <summary>
            The diffuse texture.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.TransparentMaterialParameter._parameterTransparency">
            <summary>
            The level of transparency.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.ReflectiveMaterialParameter">
            <summary>
            Renders the faces with a diffuse and normal texture with reflective properties (mirror-like rendering).
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.MeshMaterialParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.ReflectiveMaterialParameter._parameterTexture">
            <summary>
            The diffuse texture.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.ReflectiveMaterialParameter._parameterNormal">
            <summary>
            The normal/bump texture.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.BumpMaterialParameter">
            <summary>
            Renders the faces with a bump effect, using a diffuse, normal and specular texture.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.MeshMaterialParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.BumpMaterialParameter._parameterTexture">
            <summary>
            The diffuse texture.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.BumpMaterialParameter._parameterBumpTexture">
            <summary>
            The normal texture of the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.BumpMaterialParameter._parameterSpecularTexture">
            <summary>
            Optional: The specular texture of the material.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.FurMaterialParameter">
            <summary>
            Renders the faces with a fur-looking effect to the mesh faces. Useful to simulate grass or otherwise furry materials.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.FurMaterialParameter._parameterTexture">
            <summary>
            The underlying texture to set on the face.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.FurMaterialParameter._parameterFurDensity">
            <summary>
            Density of the fur effect of the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.FurMaterialParameter._parameterJitterMapScale">
            <summary>
            The jitter map scale of the material effect.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.FurMaterialParameter._parameterMaxFurLength">
            <summary>
            The maximum length of each fur hair.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.FurMaterialParameter._parameterSelfShadowStrength">
            <summary>
            The strength of the self shadowing effect.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.ParallaxOcclusionMaterialParameter">
            <summary>
            Renders the faces with the parallax occlusion effect, using a diffuse, normal, height and specular texture.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.MeshMaterialParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.ParallaxOcclusionMaterialParameter._parameterDiffuse">
            <summary>
            The diffuse texture.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.ParallaxOcclusionMaterialParameter._parameterHeight">
            <summary>
            The height texture.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.ParallaxOcclusionMaterialParameter._parameterNormal">
            <summary>
            The normal texture.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.ParallaxOcclusionMaterialParameter._parameterSpecular">
            <summary>
            Optional: The specular texture. 
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.WaterMaterialParameter">
            <summary>
             Renders the faces with a flowing water effect.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.MeshMaterialParameter" />
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.RemoteMaterialParameter">
            <summary>
            Renders the faces with a material that exists on the platform/application/engine where the meshes are deployed.
            For example, setting a path like "Assets/Path/To/Material.mat" in an engine like Unity would result in having the
            material in that path loaded.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.MeshMaterialParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.RemoteMaterialParameter._parameterPath">
            <summary>
            Path to the material in the target platform.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter">
            <summary>
            A material that can have a different combination of properties, as defined by the platform where the material will be applied.
            By default, it will use some sort of reflection/meta approach to match the property values with the given property names. 
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter._parameterShaderName">
            <summary>
            Name/Path of the shader.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter._parameterPropertyList">
            <summary>
            List of custom properties of the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.CustomMaterialPropertyParameter._parameterName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.StringPropertyParameter">
            <summary>
            Sets a textual property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.StringPropertyParameter._parameterValue">
            <summary>
            The string value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.IntPropertyParameter">
            <summary>
            Sets an integer property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.IntPropertyParameter._parameterValue">
            <summary>
            The integer value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.BoolPropertyParameter">
            <summary>
            Sets a boolean property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.BoolPropertyParameter._parameterValue">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.FloatPropertyParameter">
            <summary>
            Sets a floating-point property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.FloatPropertyParameter._parameterValue">
            <summary>
            The floating-point value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.Vector2PropertyParameter">
            <summary>
            Sets a vector2 property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.Vector2PropertyParameter._parameterValue">
            <summary>
            The vector2 value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.Vector3PropertyParameter">
            <summary>
            Sets a vector3 property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.Vector3PropertyParameter._parameterValue">
            <summary>
            The vector3 value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.ColorPropertyParameter">
            <summary>
            Sets a color property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.ColorPropertyParameter._parameterValue">
            <summary>
            The color value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.TexturePropertyParameter">
            <summary>
            Sets a texture property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.TexturePropertyParameter._parameterValue">
            <summary>
            The path to the texture.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.CustomMaterialParameter.TexturePropertyParameter._parameterType">
            <summary>
            Type of texture/semantics.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter">
            <summary>
            A material that may not exist by default in the target platform, unless explicitly interpreted/decoded/implement by the user.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter._parameterType">
            <summary>
            The material type/name.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter._parameterPropertyList">
            <summary>
            List of properties of the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.OtherMaterialPropertyParameter._parameterName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.StringPropertyParameter">
            <summary>
            Sets a textural property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.StringPropertyParameter._parameterValue">
            <summary>
            The string value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.IntPropertyParameter">
            <summary>
            Sets an integer property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.IntPropertyParameter._parameterValue">
            <summary>
            The integer value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.BoolPropertyParameter">
            <summary>
            Sets a boolean property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.BoolPropertyParameter._parameterValue">
            <summary>
            The boolean value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.FloatPropertyParameter">
            <summary>
            Sets an floating-point property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.FloatPropertyParameter._parameterValue">
            <summary>
            The floating-point value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.Vector2PropertyParameter">
            <summary>
            Sets a vector2 property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.Vector2PropertyParameter._parameterValue">
            <summary>
            The vector2 value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.Vector3PropertyParameter">
            <summary>
            Sets a vector3 property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.Vector3PropertyParameter._parameterValue">
            <summary>
            The vector3 value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.ColorPropertyParameter">
            <summary>
            Sets a color property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.ColorPropertyParameter._parameterValue">
            <summary>
            The color value.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.TexturePropertyParameter">
            <summary>
            Sets a texture property on the material.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMaterialProcedure.OtherMaterialParameter.TexturePropertyParameter._parameterValue">
            <summary>
            The path to the texture.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshMergeProcedure">
            <summary>
            Merges multiple meshes into a single one.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMergeProcedure._input">
            <summary>
            The type of input port. <br/>
            Setting a <b>Single</b> (square) input means that the node will be executed once for all meshes. Useful to merge any collection of meshes at once. <br/>
            Setting a <b>Dual</b> (circles) input means that the node will be executed once for each pair of meshes. Useful to merge exactly two meshes at once.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMergeProcedure._output">
            <summary>
            The merged meshes, according to the defined criteria.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMergeProcedure._parameterCriteria">
            <summary>
            Criteria on which to group the meshes. If none is defined, all the meshes will be merged into one. 
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshMergeProcedure._parameterScopeMerge">
            <summary>
            How the scope for the merged meshes should be defined.<br/>
            <b>First</b>: The scope from the first mesh will be selected and adapted to the new mesh size.<br/>
            <b>Reset</b>: The scope will be reset, meaning that it will be aligned to the world axes.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure">
            <summary>
            Applies sequences of geometrical, scope or property 
            transformations to the given input mesh.
            </summary>
            <Coiso></Coiso>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure._parameterOperation">
            <summary>
            The operation to be applied to the mesh.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.LatheParameter">
            <summary>
            Performs a lathe operation that creates a new mesh from rotating the input mesh around a given axis.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.LatheParameter._parameterAxis">
            <summary>
            The axis around which the lathe operation should be performed.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.LatheParameter._parameterDistance">
            <summary>
            Distance from the axis. 
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.LatheParameter._parameterSegments">
            <summary>
            Number of segments that the created mesh should posses.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.TriangulateParameter">
            <summary>
            Triangulates the mesh so that the created mesh is only made out of triangles.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.MeshModifyParameter" />
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.ManipulateNormalsParameter">
            <summary>
            Updates the normal vectors at the mesh vertices.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.MeshModifyParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.ManipulateNormalsParameter._parameterType">
            <summary>
            Type of normal calculation to perform.<br/>
            <b>Flat</b> means that the normals of the vertices will match the corresponding face normal, creating a flat shading effect.<br/>
            <b>Smooth</b> means that the normals of the vertices will be averaged from the faces they belong to, creating a smooth shading effect.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.PyramidizeParameter">
            <summary>
            Creates pyramid geometries from each mesh face.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.MeshModifyParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.PyramidizeParameter._parameterHeight">
            <summary>
            The height of the created pyramids.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.PyramidizeParameter._parameterCap">
            <summary>
            Indicate if the original face should be included in the final result as well
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.ConvexifyParameter">
            <summary>
            Replaces the mesh faces with convex polygonal ones.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.MeshModifyParameter" />
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.SpherifyParameter">
            <summary>
            Creates hemisphere geometries from each mesh face.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.MeshModifyParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.SpherifyParameter._parameterHeight">
            <summary>
            Height of the hemispheres.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.SpherifyParameter._parameterCircleSectionAngle">
            <summary>
            Angle defining the hemisphere curvature.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.SpherifyParameter._parameterSegments">
            <summary>
            Number of segments to interpolate the hemispheres..
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.SpherifyParameter.CapParameter">
            <summary>
            Indicate if the original face should be included in the final result as well
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.SimplifyParameter">
            <summary>
            Simplifies faces of the mesh by removing vertices which do not introduce a noticeable detail.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.SimplifyParameter._parameterAngleTolerance">
            <summary>
            The angle tolerance, in degrees. Vertices whose edge angles differ less than this value from 180 degrees (meaning that they are rather straight) are removed.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.OffsetParameter">
            <summary>
            Replaces all faces with offset versions that either go inward or outward.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.MeshModifyParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.OffsetParameter._parameterAmount">
            <summary>
            Amount to be offset.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.OffsetParameter._attributeSection">
            <summary>
            Attribute where the type of created face will be stored. Resulting faces of this operation will have this attribute set at either
            "Inside" or "Outside".
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Procedures.MeshModifyProcedure.OffsetParameter.OffsetInside(Sceelix.Meshes.Data.MeshEntity,Sceelix.Meshes.Data.Face,System.Single)">
            <summary>
            Offsets a given shape to the inside.
            </summary>
            <param name="meshEntity">The MeshEntity with the face.</param>
            <param name="face">Face to offset</param>
            <param name="amount">Amount of offset. Must be a positive value.</param>
            <returns>The inside of the offset. The outside faces are added to the passed MeshEntity.</returns>
        </member>
        <member name="M:Sceelix.Meshes.Procedures.MeshModifyProcedure.OffsetParameter.OffsetOutside(Sceelix.Meshes.Data.MeshEntity,Sceelix.Meshes.Data.Face,System.Single)">
            <summary>
            Offsets a given MeshEntity to the outside.
            </summary>
            <param name="meshEntity">The MeshEntity with the face.</param>
            <param name="face">Face to offset</param>
            <param name="amount">Amount of offset. Must be a positive value.</param>
            <returns>The outside of the offset. The passed MeshEntity remains unaltered.</returns>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.AdvancedOffsetParameter">
            <summary>
            Replaces all faces with offset versions that either go inward or outward.
            Similar to the "Offset" option, but returns better results for more complex, concave faces, yet has some limitations on some simpler cases.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.MeshModifyParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.AdvancedOffsetParameter._parameterAmount">
            <summary>
            Amount to be offset.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.AdvancedOffsetParameter._parameterStyle">
            <summary>
            Style of corners to generate. Applies to positive (outward) offsets only.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.AdvancedOffsetParameter._parameterKeepOriginal">
            <summary>
            Indicates if the "Inside" section (and the performed hole) should be kept (in case of positive offset)
            or if the "Outside" section (with its hole) should be kept (in case of negative offset).
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.AdvancedOffsetParameter._attributeSection">
            <summary>
            Attribute where the type of created face will be stored. Resulting faces of this operation will have this attribute set at either
            "Inside" or "Outside".
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.PrismifyParameter">
            <summary>
            Creates prism geometries from each mesh face.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.PrismifyParameter._parameterAmount">
            <summary>
            Dimension of the prism to create. This can either be set as the height value or the angle between the planes.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.PrismifyParameter._parameterStyle">
            <summary>
            Type of prism to create.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.PrismifyParameter._attributeSection">
            <summary>
            Attribute where the type of created face will be stored. Possible values are "Top" and "Side".
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Procedures.MeshModifyProcedure.PrismifyParameter.BuildSkeletonRoof(Sceelix.Meshes.Data.MeshEntity,Sceelix.Meshes.Data.Face,System.Single,System.Boolean)">
            <summary>
            https://github.com/reinterpretcat/csharp-libs/tree/master/straight_skeleton
            </summary>
            <param name="face"></param>
            <param name="value"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Procedures.MeshModifyProcedure.PrismifyParameter.DefinePlanes(Sceelix.Mathematics.Data.BoxScope,System.Single,Sceelix.Mathematics.Geometry.Plane3D@,Sceelix.Mathematics.Geometry.Plane3D@,Sceelix.Mathematics.Geometry.Plane3D@)">
            <summary>
            Defines the 2 planes that limit the roof.
            </summary>
            <param name="planeScope"></param>
            <param name="height"></param>
            <param name="plane0"></param>
            <param name="plane1"></param>
            <param name="planeOrthogonal"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Procedures.MeshModifyProcedure.PrismifyParameter.ProcessTopFaces(Sceelix.Meshes.Data.Face,Sceelix.Mathematics.Geometry.Line3D,Sceelix.Mathematics.Geometry.Plane3D,Sceelix.Collections.CircularList{Sceelix.Meshes.Procedures.MeshModifyProcedure.PrismifyParameter.ExtendedVertex}@)">
            <summary>
            Creates the faces that define the roof.
            </summary>
            <param name="face"></param>
            <param name="middleLine"></param>
            <param name="planeOrthogonal"></param>
            <param name="extendedBaseVertexList"></param>
            <param name="orthogonal"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Meshes.Procedures.MeshModifyProcedure.PrismifyParameter.ProcessWallFaces(Sceelix.Meshes.Data.MeshEntity,Sceelix.Meshes.Data.Face,Sceelix.Collections.CircularList{Sceelix.Meshes.Procedures.MeshModifyProcedure.PrismifyParameter.ExtendedVertex},Sceelix.Mathematics.Geometry.Plane3D,Sceelix.Mathematics.Geometry.Plane3D,System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}})">
            <summary>
            
            </summary>
            <param name="face"></param>
            <param name="extendedBaseVertexList"></param>
            <param name="plane0"></param>
            <param name="plane1"></param>
            <param name="faceIndices"></param>
            <returns></returns>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.SharedInsetParameter">
            <summary>
            Replaces all faces with inset versions based on the edges that are not shared.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.MeshModifyParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.SharedInsetParameter._parameterAmount">
            <summary>
            Amount to be inset.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.SharedInsetParameter._attributeSection">
            <summary>
            Attribute where the type of created face will be stored. Resulting faces of this operation will have this attribute set at either
            "Inside" or "Outside".
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.CleanupParameter">
            <summary>
            Removes vertices that are too close together.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.MeshModifyParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.CleanupParameter._parameterDistance">
            <summary>
            The minimum allowed distance between the vertices. Vertices whose distance is lower than this value will be removed.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.AlignScopeToFaceParameter">
            <summary>
            Aligns the scope to the first edge of a given face.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.AlignScopeTypeParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.AlignScopeToFaceParameter._parameterFaceIndex">
            <summary>
            Index of the face whose first edge will serve as base for scope alignment.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.AlignScopeToEdgeParameter">
            <summary>
            Aligns the scope to the given edge of a given face.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.AlignScopeTypeParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.AlignScopeToEdgeParameter._parameterFaceIndex">
            <summary>
            Index of the edge (for the selected face) that will serve as base for scope alignment.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.AlignScopeToEdgeParameter._parameterEdgeIndex">
            <summary>
            Index of the face whose edge will serve as base for scope alignment.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.AlignScopeParameter">
            <summary>
            Aligns the mesh scope to a particular face or edge.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.MeshModifyParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.AlignScopeParameter._parameterAlignScopeType">
            <summary>
            Type of scope alignment to perform.
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Procedures.MeshModifyProcedure.AlignScopeParameter.#ctor">
            <summary>
            Scope axis to which the alignment should be performed.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.NormalExtrudeParameter">
            <summary>
            Extrudes along the face normals.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.ExtrudeMethodParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.NormalExtrudeParameter._parameterOffsetAmount">
            <summary>
            Amount to offset at the end of the extrusion. 
            Positive values means the end will be larger, negative values means that it will be smaller.
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Procedures.MeshModifyProcedure.NormalExtrudeParameter.Extrude(Sceelix.Meshes.Data.MeshEntity,System.Single)">
            <summary>
            Standard extrusion, without any offset.
            </summary>
            <param name="meshEntity"></param>
            <param name="amount"></param>
            <param name="createCap"></param>
        </member>
        <member name="M:Sceelix.Meshes.Procedures.MeshModifyProcedure.NormalExtrudeParameter.ExtrudeOffsetInside(Sceelix.Meshes.Data.MeshEntity,Sceelix.Meshes.Data.Face,System.Single,System.Single)">
            <summary>
            Offsets a given MeshEntity to the inside.
            </summary>
            <param name="meshEntity">The MeshEntity with the face.</param>
            <param name="parameterAttributeSection"></param>
            <param name="face">Face to offset</param>
            <param name="amount">Amount of offset. Must be a positive value.</param>
            <param name="extrudeAmount"></param>
            <returns>The inside of the offset. The outside faces are added to the passed shape.</returns>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.DirectionalExtrudeParameter">
            <summary>
            Extrudes along a given direction.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.ExtrudeMethodParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.DirectionalExtrudeParameter._parameterDirection">
            <summary>
            Direction of the extrusion.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.DirectionalExtrudeParameter._parameterOffsetAmount">
            <summary>
            Amount of offset at the end of the extrude. 
            Positive values means the end will be larger, negative values means that it will be smaller.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.DirectionalExtrudeParameter._parameterRelativeTo">
            <summary>
            Indicates if the operation should be relative to the scope's direction or to the world.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.DirectionalExtrudeParameter._parameterBendTop">
            <summary>
            Indicates if the top should be bent, making the top face's normal match the extruded direction.
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Procedures.MeshModifyProcedure.DirectionalExtrudeParameter.DirectionalExtrude(Sceelix.Meshes.Data.MeshEntity,Sceelix.Mathematics.Data.Vector3D,System.Boolean)">
            <summary>
            Standard extrusion, without any offset.
            </summary>
            <param name="meshEntity"></param>
            <param name="direction"></param>
            <param name="bendTop"></param>
            <param name="amount"></param>
            <param name="createCap"></param>
        </member>
        <member name="M:Sceelix.Meshes.Procedures.MeshModifyProcedure.DirectionalExtrudeParameter.ExtrudeOffsetInside(Sceelix.Meshes.Data.MeshEntity,Sceelix.Meshes.Data.Face,System.Single,Sceelix.Mathematics.Data.Vector3D,System.Boolean)">
            <summary>
            Offsets a given MeshEntity to the inside.
            </summary>
            <param name="meshEntity">The MeshEntity with the face.</param>
            <param name="parameterAttributeSection"></param>
            <param name="face">Face to offset</param>
            <param name="offsetAmount">Amount of offset. Must be a positive value.</param>
            <param name="extrudeAmount"></param>
            <returns>The inside of the offset. The outside faces are added to the passed shape.</returns>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.SharedExtrudeParameter">
            <summary>
            Extrudes along the shared edges.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.TransformExtrudeExtrude">
            <summary>
            Extrudes along the face normals while performing scaling and rotation transformations.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.ExtrudeMethodParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.TransformExtrudeExtrude._parameterAngle">
            <summary>
            The angle to be rotated.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.TransformExtrudeExtrude._parameterAxis">
            <summary>
            The angle around which to rotate.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.TransformExtrudeExtrude._parameterSizing">
            <summary>
            The type of sizing to consider.<br/>
            <b>Radius</b> means that the indicated value corresponds to the radius for rotation.<br/>
            <b>Length</b> means that the indicated value corresponds to the length of the extrusion block.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.TransformExtrudeExtrude._parameterScaling">
            <summary>
            The amount of scaling to perform, from the bottom to the top.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.TransformExtrudeExtrude._parameterSegments">
            <summary>
            The number of segments in which the extrusion should be divided.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.ExtrudeParameter">
            <summary>
            Creates extruded geometries from each mesh face.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshModifyProcedure.MeshModifyParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.ExtrudeParameter._parameterAmount">
            <summary>
            Amount to be extruded.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.ExtrudeParameter._parameterExtrudeMethod">
            <summary>
            Extrusion method to be applied.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.ExtrudeParameter._parameterCap">
            <summary>
            Indicates if the original face should be included in the final result as well
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshModifyProcedure.ExtrudeParameter._parameterAttributeSection">
            <summary>
            Attribute where to store the name of the section for each created face. Values can be "Top" (for the top faces), "Side" 
            (for the side faces), "Cap" (for the bottom faces, if the Cap option is checked), or "Inside" (for the side faces that result from holes).
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSplitProcedure">
            <summary>
            Splits the input mesh into several slices according
            to specific constraints.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSplitProcedure._input">
            <summary>
            Mesh that is meant to be split.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSplitProcedure._parameterSplitAxis">
            <summary>
            The planes/axes that define the direction of the splitting.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSplitProcedure._parameterSplits">
            <summary>
            List of slices to split.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSplitProcedure._attributeIndex">
            <summary>
            Attribute where the index of the 
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Procedures.MeshSplitProcedure.GetPlaneAndSize(Sceelix.Meshes.Data.MeshEntity,Sceelix.Mathematics.Data.Vector3D,System.Single@)">
            <summary>
            Determines the cutting plane (located at the "bottom" of the scope) and the available size to cut
            </summary>
            <param name="meshEntity"></param>
            <param name="cutDirection"></param>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSplitProcedure.RepetitiveSliceParameter">
            <summary>
            Splits the meshes repeatedly while there is available spacing.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSplitProcedure.SliceParameter">
            <summary>
            Splits a mesh piece with a given size.
            </summary>
            <seealso cref="T:Sceelix.Core.Parameters.CompoundParameter" />
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshSplitProcedure.ISliceParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSplitProcedure.SliceParameter.Output">
            <summary>
            The mesh section that was split.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSplitProcedure.SliceParameter.SizeParameter">
            <summary>
            Size of the slice.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSplitProcedure.SliceParameter.SizingParameter">
            <summary>
            If "Absolute", the value of "Amount" will be considered as an absolute value, if "Relative", the value will be a percentage. (0 - 1)
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSplitProcedure.SliceParameter.FlexibleParameter">
            <summary>
            If checked, the size of this slice will be adjusted according to the available space.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSplitProcedure.SliceParameter.CapParameter">
            <summary>
            If the object being split is a closed solid, activating this option will make the inner cut face visible.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSplitProcedure.PlaneNormalParameter">
            <summary>
            Splits the mesh by a given plane.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshSplitProcedure.SplitAxisParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSplitProcedure.PlaneNormalParameter._parameterSplitAxis">
            <summary>
            The normal direction of the plane.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSplitProcedure.PlaneNormalParameter._parameterScopeRelative">
            <summary>
            Indicates if the specified plane normal is relative to the scope orientation or not.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSplitProcedure.ScopeAxisParameter">
            <summary>
            Splits the mesh along a given scope axis.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshSplitProcedure.SplitAxisParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSplitProcedure.ScopeAxisParameter._parameterSplitAxis">
            <summary>
            Scope axis along which the splitting will occur.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSplitProcedure.RelativeAxisParameter">
            <summary>
            Splits the mesh along an axis based on their relative size.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshSplitProcedure.SplitAxisParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSplitProcedure.RelativeAxisParameter._parameterAxis">
            <summary>
            The axis along which to split the mesh.<br/>
            <b>Minimum</b> means that the shortest axis will be chosen.<br/>
            <b>Maximum</b> means that the longest axis will be chosen.<br/>
            <b>Intermediate</b> means that the other axis (neither shortest or longest) will be chosen.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSubselectProcedure">
            <summary>
            Selects a subset of faces from a given mesh
            creating new meshes.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSubselectProcedure._input">
            <summary>
            The mesh which to apply the subselection to.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSubselectProcedure._parameterMeshSelection">
            <summary>
            The mesh selections to apply.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSubselectProcedure.MeshSelectionParameter.Output">
            <summary>
            The mesh resulting from the faces that matched the respective selection.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSubselectProcedure.MeshSelectionParameter.ParameterSeparateMesh">
            <summary>
            if true, each one of the faces of the mesh will be placed into a separate mesh entity.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSubselectProcedure.IndexSelectionParameter">
            <summary>
            Selects faces from the mesh by their index.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshSubselectProcedure.MeshSelectionParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSubselectProcedure.IndexSelectionParameter.ParameterIndex">
            <summary>
            Index of the face to select.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSubselectProcedure.CustomSelectionParameter">
            <summary>
            Selects faces by a custom condition.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshSubselectProcedure.MeshSelectionParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSubselectProcedure.CustomSelectionParameter._parameterCondition">
            <summary>
            Condition to evaluate for each face. If true, the face will be included in the resulting mesh.
            Can access the attributes of each face using the @@attributeName notation.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSubselectProcedure.AllSelectionParameter">
            <summary>
            Selects all (remaining) faces.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshSubselectProcedure.MeshSelectionParameter" />
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSubselectProcedure.DirectionSelectionParameter">
            <summary>
            Selects faces based on the direction of their normals.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshSubselectProcedure.MeshSelectionParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSubselectProcedure.DirectionSelectionParameter._parameterDirectionSelection">
            <summary>
            The direction of the face normals.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSubselectProcedure.DirectionSelectionParameter._parameterAngleTolerance">
            <summary>
            The angle tolerance which will be used for the comparison.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSubselectProcedure.DirectionSelectionParameter._parameterRelativeTo">
            <summary>
            Indicates if the direction to compare to will be relative to the scope or the world.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshUnifyProcedure">
            <summary>
            Unifies faces and vertices of meshes.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUnifyProcedure._parameterUnify">
            <summary>
            Type of unification operation to perform.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshUnifyProcedure.UnifyPlanarFacesParameter">
            <summary>
            Unifies faces that lie on the same plane. Vertices should be shared, so applying a vertex unification
            first may be necessary.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshUnifyProcedure.MeshUnifyParameter" />
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshUnifyProcedure.UnifyVerticesParameter">
            <summary>
            Merges mesh vertices that are overlapping (or positioned close together) into the same vertex reference.<br/>
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshUnifyProcedure.MeshUnifyParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUnifyProcedure.UnifyVerticesParameter._parameterTolerance">
            <summary>
            The distance tolerance used for determining if two vertices should be joined.
            </summary>
        </member>
        <member name="M:Sceelix.Meshes.Procedures.MeshUnifyProcedure.UnifyVerticesParameter.Unify(Sceelix.Meshes.Data.MeshEntity,System.Single)">
            <summary>
            Much slower approach! Needs a quadtree, at least.
            </summary>
            <param name="meshEntity"></param>
            <param name="maximumDistance"></param>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshUnifyProcedure.RemoveCoincidentFacesParameter">
            <summary>
            Removes faces that may be connecting the same vertices.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshUnifyProcedure.MeshUnifyParameter" />
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure">
            <summary>
            Sets up UV mapping for meshes.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure._parameterUVMapping">
            <summary>
            The UV mapping operation/shape to apply.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.CoordinateSizingParameter">
            <summary>
            Defines the coordinate sizing for the given coordinate.
            </summary>
            <seealso cref="T:Sceelix.Core.Parameters.CompoundParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.CoordinateSizingParameter.ParameterSize">
            <summary>
            Scale of the coordinate mapping.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.CoordinateSizingParameter.ParameterAbsolute">
            <summary>
             Indicates if the defined size is an absolute value (in world space), or relative to the chosen surrounding shape's size.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.FlipUVParameter">
            <summary>
            Flips the current UV mapping coordinates in the U or V axis.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.UVMappingParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.FlipUVParameter._parameterFlipU">
            <summary>
            Indicates if the U coordinate should be flipped.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.FlipUVParameter._parameterFlipV">
            <summary>
            Indicates if the V coordinate should be flipped.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.ScaleUVParameter">
            <summary>
            Scale the UV coordinates.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.UVMappingParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.ScaleUVParameter._parameterAmount">
            <summary>
            The value to multiply with the UV coordinates.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.CylinderUVMappingParameter">
            <summary>
            Applies UV mapping coordinates based on a surrounding cylinder shape.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.UVMappingParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.CylinderUVMappingParameter._parameterU">
            <summary>
            U coordinate map sizing. 
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.CylinderUVMappingParameter._parameterV">
            <summary>
            V coordinate map sizing. 
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.FaceUVMappingParameter">
            <summary>
            Applies UV mapping coordinates based on each face's surrounding plane scope shape.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.UVMappingParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.FaceUVMappingParameter._parameterU">
            <summary>
            U coordinate map sizing. 
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.FaceUVMappingParameter._parameterV">
            <summary>
            V coordinate map sizing. 
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.BoxUVMappingParameter">
            <summary>
            Applies UV mapping coordinates based on a surrounding box shape.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.BoxUVMappingParameter._parameterU">
            <summary>
            U coordinate map sizing. 
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.BoxUVMappingParameter._parameterV">
            <summary>
            V coordinate map sizing. 
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.ScopeUVMappingParameter">
            <summary>
            Applies UV mapping coordinates based on the surrounding scope shape.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.UVMappingParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.ScopeUVMappingParameter._parameterU">
            <summary>
            U coordinate map sizing. 
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.ScopeUVMappingParameter._parameterV">
            <summary>
            V coordinate map sizing. 
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.SphereUVMapping">
            <summary>
            Applies UV mapping coordinates based on a surrounding sphere shape.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshUVMapProcedure.UVMappingParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.SphereUVMapping._parameterU">
            <summary>
            U coordinate map sizing. 
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshUVMapProcedure.SphereUVMapping._parameterV">
            <summary>
            V coordinate map sizing. 
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshLoadProcedure">
            <summary>
            Loads Meshes from disk from standard formats.
            </summary>
            <seealso cref="T:Sceelix.Core.Procedures.SystemProcedure" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoadProcedure._output">
            <summary>
            The loaded mesh entity.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoadProcedure._parameterFileName">
            <summary>
            Name of the file to load.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoadProcedure._parameterRotateAxis">
            <summary>
            Rotates the loaded meshes by 90º around the X-Axis. 
            Useful to compensate for differences in the Up vector, since many systems use Y-Up, while Sceelix uses Z-up. 
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoadProcedure._parameterFlipFaces">
            <summary>
            Flips all mesh faces. Useful to compensate for differences in face winding order (clockwise vs. counterclockwise).
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoadProcedure._parameterFlipTexture">
            <summary>
            Flips the V coordinate for all texture coordinates. Useful to compensate for differences in UV setup (V-Up or V-Down).
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoadProcedure._parameterLoadMaterials">
            <summary>
            Indicates if the materials should also be loaded. Default is True.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoadProcedure._parameterResetAbsolutePaths">
            <summary>
            Indicates if the referenced files/textures, if defined with absolute paths, should be reset and made relative to the defined "Texture Folder" parameter.
            This is useful when the models were save with absolute paths referencing paths from other computers.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoadProcedure._textureFolder">
            <summary>
            Folder name/path, relative to the file, where the textures can be found. Useful to compensate for possible mismatches between
            the locations indicated in the imported file and the actual texture locations.
            For example: "Textures", "../Images", "Files/Textures", etc.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshLoadProcedure._attributeName">
            <summary>
            Name of the attribute that should store the "Name" of the mesh.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSaveProcedure">
            <summary>
            Saves meshes to disk in standard formats.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure._parameterInput">
            <summary>
            The type of input port. <br/>
            Setting a <b>Single</b> (circle) input means that the node will be executed once per mesh. Useful when different meshes are meant to be sent to different files, in which case the file path should be set as an expression. <br/>
            Setting a <b>Collective</b> (square) input means that the node will be executed once for all meshes. Useful to export all meshes into one file.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure._output">
            <summary>
            The mesh that was saved to file.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure._parameterFormat">
            <summary>
            The file format to export to.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure.MeshSaveParameter._parameterFlipFaces">
            <summary>
            Indicates if the faces should be flipped. This may be required for exporting to certain platforms
            where the face orientation is different.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSaveProcedure.ObjSaveParameter">
            <summary>
            Saves meshes to the .OBJ file format.
            </summary>
            <seealso cref="T:Sceelix.Meshes.Procedures.MeshSaveProcedure.MeshSaveParameter" />
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure.ObjSaveParameter.TextureFolderName">
            <summary>
            Relative folder where the textures are saved.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure.ObjSaveParameter.MaterialExporters">
            <summary>
            Specific functions that export materials
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure.ObjSaveParameter._attributeGroupName">
            <summary>
            The attribute group name for mesh aggregation. Different values can be set for each mesh using the @@attributeName notation.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure.ObjSaveParameter._exportMaterialsParameter">
            <summary>
            Indicates if the materials should be exported, too (as a .MTL file).
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure.ObjSaveParameter._parameterFileLocation">
            <summary>
            Location where to store the file.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure.ObjSaveParameter._parameterFlipYZ">
            <summary>
            Indicates if the Y/Z coordinates should be flipped. Useful when exporting to platforms where the Up axis is different.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSaveProcedure.FbxSaveParameter">
            <summary>
            Saves meshes to the .FBX file format.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure.FbxSaveParameter.TextureFolderName">
            <summary>
            Relative folder where the textures are saved.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure.FbxSaveParameter._materialExporterHandlers">
            <summary>
            Specific functions that export materials
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure.FbxSaveParameter._parameterFileLocation">
            <summary>
            Location where to store the file.
            </summary>
        </member>
        <member name="T:Sceelix.Meshes.Procedures.MeshSaveProcedure.VRMLSaveParameter">
            <summary>
            Saves meshes to the .VRML file format.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure.VRMLSaveParameter.TextureFolderName">
            <summary>
            Relative folder where the textures are saved.
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure.VRMLSaveParameter._materialExporters">
            <summary>
            Specific functions that export materials
            </summary>
        </member>
        <member name="F:Sceelix.Meshes.Procedures.MeshSaveProcedure.VRMLSaveParameter._parameterFileLocation">
            <summary>
            Location where to store the file.
            </summary>
        </member>
    </members>
</doc>
