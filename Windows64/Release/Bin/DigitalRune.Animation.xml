<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DigitalRune.Animation</name>
    </assembly>
    <members>
        <member name="T:DigitalRune.Animation.AnimatableProperty`1">
            <summary>
            Represents a property that can be animated. (Default implementation.)
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <remarks>
            <para>
            An <see cref="T:DigitalRune.Animation.AnimatableProperty`1"/> represents a standalone value, which can be animated by
            the animation system. (Use <see cref="T:DigitalRune.Animation.DelegateAnimatableProperty`1"/> if you want to animate
            an existing field or property instead of creating a standalone value.)
            </para>
            <para>
            <see cref="T:DigitalRune.Animation.AnimatableProperty`1"/> provides a default implementation of the interface 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> which is required by the animation system. It internally 
            stores two values: a <i>base value</i> and an <i>animation value</i>.
            </para>
            <para>
            <strong>Base Value:</strong> The base value is the value of the property that is valid when 
            no animations are active. The animation system reads the base value but does not change it.
            The base value is used by certain types of animations: For example, additive animations will
            add the result of the animations to the base value value. Another example are 
            "From-To-Animations": If only the "To" value is defined then the animation will animate from
            the base value of the property to the "To" value defined in the animation.
            </para>
            <para>
            <strong>Animation Value:</strong> The animation value of the property is determined by the 
            animations that are controlling the property. The properties 
            <see cref="P:DigitalRune.Animation.IAnimatableProperty.IsAnimated"/> and 
            <see cref="P:DigitalRune.Animation.IAnimatableProperty`1.AnimationValue"/> are set by the animations system and 
            should be treated as read-only. <see cref="P:DigitalRune.Animation.IAnimatableProperty.IsAnimated"/> is 
            <see langword="true"/> when an animation is active; <see langword="false"/> indicates that no 
            animations are active. In this case the base value is the effective value of the property.
            </para>   
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#HasBaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#BaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#IsAnimated">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty{T}#BaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty{T}#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableProperty`1.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
            <value>The value of the property.</value>
            <remarks>
            Writing <see cref="P:DigitalRune.Animation.AnimatableProperty`1.Value"/> changes the base value of the property. Reading 
            <see cref="P:DigitalRune.Animation.AnimatableProperty`1.Value"/> returns the effective value of the property. (If the property is 
            animated, then the animation value is effective value. If no animations are active, then the
            base value is the effective value.) 
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.DelegateAnimatableProperty`1">
            <summary>
            Wraps an existing field or property and makes it animatable.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <remarks>
            <para>
            The animation system can only animate objects of type <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.
            Normal CLR field or properties do not implement this interface and can therefore not be 
            animated directly. The <see cref="T:DigitalRune.Animation.DelegateAnimatableProperty`1"/> wraps an existing field or
            property and makes it accessible for the animation system.
            </para>
            <para>
            The <see cref="T:DigitalRune.Animation.DelegateAnimatableProperty`1"/> requires two callbacks: One that reads the
            value (see <see cref="P:DigitalRune.Animation.DelegateAnimatableProperty`1.GetValue"/>) and one that writes the value (<see cref="P:DigitalRune.Animation.DelegateAnimatableProperty`1.SetValue"/>). The
            callbacks can read/write any existing field or property.
            </para>
            <para>
            This type of <see cref="T:DigitalRune.Animation.IAnimatableProperty"/> does not have a
            <see cref="P:DigitalRune.Animation.IAnimatableProperty`1.BaseValue"/>, which means that it does not support additive
            animations or certain types of from/to/by-animations. Use <see cref="T:DigitalRune.Animation.AnimatableProperty`1"/>
            instead of <see cref="T:DigitalRune.Animation.DelegateAnimatableProperty`1"/> if this functionality is required.
            </para>
            <para>
            Note: The animation system does not keep animatable properties alive. It automatically 
            removes animations if the <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> is no longer referenced by 
            another object. This means, the created <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> needs to be kept
            alive as long as the property should be animated.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.GetValue">
            <summary>
            Gets or sets the callback that reads the property value.
            </summary>
            <value>The callback that reads the property value.</value>
        </member>
        <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.SetValue">
            <summary>
            Gets or sets the callback that writes the property value.
            </summary>
            <value>The callback that writes the property value.</value>
        </member>
        <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#HasBaseValue">
            <summary>
            Gets a value indicating whether this property has a base value.
            </summary>
            <value>Returns always <see langword="false"/>.</value>
        </member>
        <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#BaseValue">
            <summary>
            Not implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Always throws <see cref="T:System.NotImplementedException"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#IsAnimated">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty{T}#BaseValue">
            <summary>
            Not implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Always throws <see cref="T:System.NotImplementedException"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.DelegateAnimatableProperty`1.DigitalRune#Animation#IAnimatableProperty{T}#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.DelegateAnimatableProperty`1.#ctor(System.Func{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.DelegateAnimatableProperty`1"/> class.
            </summary>
            <param name="getter">A callback that reads the property value.</param>
            <param name="setter">A callback that writes the property value.</param>
        </member>
        <member name="T:DigitalRune.Animation.IImmediateAnimatableProperty">
            <summary>
            Represents an <see cref="T:DigitalRune.Animation.IAnimatableProperty"/> which needs to be applied immediately in the
            animation system.
            </summary>
            <remarks>
            These types of properties have priority and are treated special by the animation system.
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.ImmediateAnimatableProperty`1">
            <summary>
            Represents an <see cref="T:DigitalRune.Animation.AnimatableProperty`1"/> which needs to be applied immediately in the
            animation system.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.AnimationCompositionChain`1">
            <summary>
            Manages a collection of animations that are combined and applied to a certain property.
            </summary>
            <typeparam name="T">The type of animation value.</typeparam>
            <remarks>
            The animated property is stored using a weak reference. Animation composition chains will be 
            automatically removed from the animation system if either the target object is garbage 
            collected or the composition chain is empty.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationCompositionChain`1.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimationCompositionChain`1.DigitalRune#Animation#IAnimationCompositionChain#Property">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimationCompositionChain`1.Property">
            <inheritdoc cref="P:DigitalRune.Animation.IAnimationCompositionChain.Property"/>
        </member>
        <member name="P:DigitalRune.Animation.AnimationCompositionChain`1.Traits">
            <summary>
            Gets the animation value traits.
            </summary>
            <value>The animation value traits.</value>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DigitalRune.Animation.AnimationCompositionChain`1"/> class from 
            being created.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.Create(DigitalRune.Animation.IAnimatableProperty{`0},DigitalRune.Animation.Traits.IAnimationValueTraits{`0})">
            <summary>
            Creates a new instance of the <see cref="T:DigitalRune.Animation.AnimationCompositionChain`1"/> class.
            </summary>
            <param name="property">The property that should be animated.</param>
            <param name="traits">The animation value traits.</param>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="property"/> or <paramref name="traits"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.Recycle">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.Initialize(DigitalRune.Animation.IAnimatableProperty{`0},DigitalRune.Animation.Traits.IAnimationValueTraits{`0})">
            <summary>
            Initializes the <see cref="T:DigitalRune.Animation.AnimationCompositionChain`1"/>.
            </summary>
            <param name="property">The property that should be animated.</param>
            <param name="traits">The animation value traits.</param>
            <exception cref="T:System.ArgumentNullException">
            Either <paramref name="property"/> or <paramref name="traits"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.Update(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.Apply">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.SetProperty(DigitalRune.Animation.IAnimatableProperty{`0})">
            <summary>
            Writes the property value.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.ResetProperty(DigitalRune.Animation.IAnimatableProperty{`0})">
            <summary>
            Resets the property.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.TakeSnapshot">
            <summary>
            Takes a snapshot of the current animation value.
            </summary>
            <remarks>
            The first animation instance in the composition chain will receive snapshot as its source
            value instead of the properties' base value.
            </remarks>
            <seealso cref="M:DigitalRune.Animation.AnimationCompositionChain`1.ClearSnapshot"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.ClearSnapshot">
            <summary>
            Clears any previously taken snapshot.
            </summary>
            <see cref="M:DigitalRune.Animation.AnimationCompositionChain`1.TakeSnapshot"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Animation.AnimationCompositionChain`1"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Animation.AnimationCompositionChain`1"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.System#Collections#Generic#IEnumerable{DigitalRune#Animation#AnimationInstance}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.System#Collections#Generic#ICollection{DigitalRune#Animation#AnimationInstance}#Add(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is not of type <see cref="T:DigitalRune.Animation.AnimationInstance`1"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.System#Collections#Generic#ICollection{DigitalRune#Animation#AnimationInstance}#Contains(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.System#Collections#Generic#ICollection{DigitalRune#Animation#AnimationInstance}#CopyTo(DigitalRune.Animation.AnimationInstance[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting 
            at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.<br/>
            Or, <paramref name="arrayIndex"/> is equal to or greater than the length of
            <paramref name="array"/>.<br/>
            Or, the number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.
            </exception>
            
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.System#Collections#Generic#ICollection{DigitalRune#Animation#AnimationInstance}#Remove(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>. This method also returns 
            <see langword="false"/> if <paramref name="item"/> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:DigitalRune.Animation.AnimationCompositionChain`1.System#Collections#Generic#ICollection{DigitalRune#Animation#AnimationInstance}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.System#Collections#Generic#IList{DigitalRune#Animation#AnimationInstance}#IndexOf(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is not of type <see cref="T:DigitalRune.Animation.AnimationInstance`1"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChain`1.System#Collections#Generic#IList{DigitalRune#Animation#AnimationInstance}#Insert(System.Int32,DigitalRune.Animation.AnimationInstance)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is not of type <see cref="T:DigitalRune.Animation.AnimationInstance`1"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.AnimationCompositionChain`1.System#Collections#Generic#IList{DigitalRune#Animation#AnimationInstance}#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not of type <see cref="T:DigitalRune.Animation.AnimationInstance`1"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Animation.AnimationCompositionChainCollection">
            <summary>
            Manages a collection of <see cref="T:DigitalRune.Animation.IAnimationCompositionChain"/>s.
            </summary>
            <remarks>
            <para>
            The composition chains are stored in a list. All composition chains that handle 
            <see cref="T:DigitalRune.Animation.IImmediateAnimatableProperty"/>s are stored in the front of the list. These 
            composition chains are not sorted. 
            </para>
            <para>
            All other composition chains are stored in the back of the list. These chains are sorted using
            the hash code of the <see cref="T:DigitalRune.Animation.IAnimatableProperty"/>. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationCompositionChainCollection.NumberOfChains">
            <summary>
            Gets the total number of composition chains in this collection.
            </summary>
            <value>The total number of composition chains.</value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationCompositionChainCollection.NumberOfImmediateChains">
            <summary>
            Gets the number of composition chains that handle <see cref="T:DigitalRune.Animation.IImmediateAnimatableProperty"/>s. 
            These chains are stored at the start of the collection.
            </summary>
            <value>
            The number of composition chains that handle <see cref="T:DigitalRune.Animation.IImmediateAnimatableProperty"/>s.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationCompositionChainCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:DigitalRune.Animation.IAnimationCompositionChain"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Animation.IAnimationCompositionChain"/> at the specified index.
            </value>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChainCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationCompositionChainCollection"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChainCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChainCollection.System#Collections#Generic#IEnumerable{DigitalRune#Animation#IAnimationCompositionChain}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the 
            <see cref="T:DigitalRune.Animation.AnimationCompositionChainCollection"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for 
            <see cref="T:DigitalRune.Animation.AnimationCompositionChainCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChainCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the 
            <see cref="T:DigitalRune.Animation.AnimationCompositionChainCollection"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Animation.AnimationCompositionChainCollection"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChainCollection.Get(DigitalRune.Animation.IAnimatableProperty,System.Int32@,DigitalRune.Animation.IAnimationCompositionChain@)">
            <summary>
            Gets the composition chain for the specified <paramref name="property"/>.
            </summary>
            <param name="property">The animatable property.</param>
            <param name="index">
            The index of the composition chain in this collection. If no suitable composition chain is 
            found, this is the index where a new composition chain should be inserted.
            </param>
            <param name="chain">
            The found composition chain. <see langword="null"/> if no suitable chain was found.
            </param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChainCollection.Insert(System.Int32,DigitalRune.Animation.IAnimationCompositionChain)">
            <summary>
            Inserts the composition chain at the specified index. 
            </summary>
            <param name="index">
            The index. (Use <see cref="M:DigitalRune.Animation.AnimationCompositionChainCollection.Get(DigitalRune.Animation.IAnimatableProperty,System.Int32@,DigitalRune.Animation.IAnimationCompositionChain@)"/> to find the correct index.)
            </param>
            <param name="compositionChain">The composition chain to insert.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChainCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the composition chain at the given index.
            </summary>
            <param name="index">The index of the composition chain to remove.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCompositionChainCollection.Validate">
            <summary>
            Executes a lot of assertions in DEBUG builds to validate the integrity of this collection.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.AnimationController">
            <summary>
            Provides interactive control over an animation.
            </summary>
            <remarks>
            <para>
            Animation controllers provide interactive control over animations. They are created when a new
            animation is started using one of the <strong>StartAnimation</strong>-methods of the 
            <see cref="T:DigitalRune.Animation.IAnimationService"/>. Animation controllers can also be created explicitly by 
            calling one of the <strong>CreateController</strong>-methods. Using the animation controller 
            the user can:
            <list type="bullet">
            <item>
            <description>
            Start the animation by calling <see cref="M:DigitalRune.Animation.AnimationController.Start"/>, if the animation is not already running.
            </description>
            </item>
            <item>
            <description>
            Pause the animation by calling <see cref="M:DigitalRune.Animation.AnimationController.Pause"/>. (The animation will hold its current
            animation value, but won't advance.)
            </description>
            </item>
            <item>
            <description>
            Continue a previously paused animation by calling <see cref="M:DigitalRune.Animation.AnimationController.Resume"/>.
            </description>
            </item>
            <item>
            <description>
            Stop an animation by calling <see cref="M:DigitalRune.Animation.AnimationController.Stop"/>.
            </description>
            </item>
            <item>
            <description>
            Query the state of the animation using the property <see cref="P:DigitalRune.Animation.AnimationController.State"/>.
            </description>
            </item>
            <item>
            <description>
            Query the current time of the animation by reading the property <see cref="P:DigitalRune.Animation.AnimationController.Time"/>.
            </description>
            </item>
            <item>
            <description>
            Jump to a certain point in time by setting the property <see cref="P:DigitalRune.Animation.AnimationController.Time"/>.
            </description>
            </item>
            <item>
            <description>
            Etc.
            </description>
            </item>
            </list>
            </para>
            <para>
            <strong>Animation State and Timing:</strong> The property <see cref="P:DigitalRune.Animation.AnimationController.State"/> returns the 
            current state of the animation. The animation can be <see cref="F:DigitalRune.Animation.AnimationState.Delayed"/>, 
            <see cref="F:DigitalRune.Animation.AnimationState.Playing"/>, <see cref="F:DigitalRune.Animation.AnimationState.Filling"/> or 
            <see cref="F:DigitalRune.Animation.AnimationState.Stopped"/>. But the state does not indicate whether the animation 
            timing is active. The property <see cref="P:DigitalRune.Animation.AnimationController.IsPaused"/> indicates whether the animation timing 
            is active or paused.
            </para>
            <para>
            <strong>Memory Management:</strong> The following information is relevant for users who want
            to reduce garbage collector (GC) overhead, in particular on the Xbox 360.
            </para>
            <para>
            The type <see cref="T:DigitalRune.Animation.AnimationController"/> is a value type (struct). It is a lightweight 
            handle that stores a reference to the <see cref="T:DigitalRune.Animation.IAnimationService"/> and the 
            <see cref="P:DigitalRune.Animation.AnimationController.AnimationInstance"/>.
            </para>
            <para>
            Objects of type <see cref="T:DigitalRune.Animation.AnimationInstance"/> are automatically created when a new 
            animation controller is created. The animation instances maintain the runtime-state of the
            animations. Animation instances can be recycled when they are no longer used. They can then be 
            reused by the animation system for future animations.
            </para>
            <para>
            It is recommended to recycle animation instances in order to reduce the number of memory
            allocations at runtime. Animation instances can be recycled explicitly by calling 
            <see cref="M:DigitalRune.Animation.AnimationController.Recycle"/>. Or, they can be recycled automatically by calling 
            <see cref="M:DigitalRune.Animation.AnimationController.AutoRecycle"/> or setting the property <see cref="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled"/> to 
            <see langword="true"/>. If <see cref="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled"/> is set, then the animation system 
            will automatically recycle the animation instances once the animation has stopped. The 
            property <see cref="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled"/> is <see langword="false"/> by default.
            </para>
            <para>
            The method <see cref="M:DigitalRune.Animation.AnimationController.Recycle"/> can be called at any time, regardless of whether 
            <see cref="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled"/> is set. The property <see cref="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled"/> can 
            also be changed at any time - it will only take effect when the animation stops.
            </para>
            <para>
            Once the animation instance has been recycled the struct <see cref="T:DigitalRune.Animation.AnimationController"/> 
            becomes invalid. The property <see cref="P:DigitalRune.Animation.AnimationController.IsValid"/> indicates whether the animation instance
            is still alive or has already been recycled.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationController.AnimationService">
            <summary>
            Gets the animation service.
            </summary>
            <value>
            The <see cref="T:DigitalRune.Animation.IAnimationService"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationController.AnimationInstance">
            <summary>
            Gets the root animation instance.
            </summary>
            <value>
            The root animation instance. (Or <see langword="null"/> if the animation instance has 
            already been recycled and the animation controller is no longer valid.)
            </value>
            <remarks>
            Animation instances maintain the runtime-state of the animations. See 
            <see cref="T:DigitalRune.Animation.AnimationInstance"/> for more information.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationController.IsValid">
            <summary>
            Gets a value indicating whether this animation controller is valid.
            </summary>
            <value>
            <see langword="true"/> if this animation controller is valid; 
            otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
            This property indicates whether the animation controller is still valid. 
            <see langword="false"/> means that associated animation instances have been recycled by the 
            animation system and the controller can no longer be used.
            </para>
            <para>
            See description of <see cref="T:DigitalRune.Animation.AnimationController"/> for more info.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled">
            <summary>
            Gets or sets a value indicating whether the animation instance should be automatically
            recycled when the animation is stopped and removed from the animation system.
            </summary>
            <value>
            <see langword="true"/> if the animation instance is recycled automatically; otherwise, 
            <see langword="false"/>. (The property also returns <see langword="false"/> if the animation
            instance has already been recycled and the animation controller is no longer valid.)
            </value>
            <remarks>
            <para>
            Objects of type <see cref="T:DigitalRune.Animation.AnimationInstance"/> are automatically created when a 
            new animation controller is created. The animation instances maintain the runtime-state of 
            the animations. The animation instances can be recycled when they are no longer used. They 
            can then be reused by the animation system for future animations.
            </para>
            <para>
            It is recommended to recycle animation instances in order to reduce the number of memory
            allocations at runtime. Animation instances can be recycled explicitly by calling 
            <see cref="M:DigitalRune.Animation.AnimationController.Recycle"/>. Or, they can be recycled automatically by calling 
            <see cref="M:DigitalRune.Animation.AnimationController.AutoRecycle"/> or setting the property <see cref="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled"/> to 
            <see langword="true"/>. If <see cref="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled"/> is set, then the animation 
            system will automatically recycle the animation instances once the animation has stopped.
            </para>
            <para>
            The method <see cref="M:DigitalRune.Animation.AnimationController.Recycle"/> can be called at any time, regardless of whether 
            <see cref="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled"/> is set. The property <see cref="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled"/> can 
            also be changed at any time - it will only take effect when the animation stops.
            </para>
            <para>
            Once the animation instance has been recycled the struct <see cref="T:DigitalRune.Animation.AnimationController"/> 
            becomes invalid. The property <see cref="P:DigitalRune.Animation.AnimationController.IsValid"/> indicates whether the animation instance
            is still alive or has already been recycled.
            </para>
            <para>
            Note that calling the methods <see cref="M:DigitalRune.Animation.AnimationController.Recycle"/>, <see cref="M:DigitalRune.Animation.AnimationController.AutoRecycle"/>, or setting 
            the property <see cref="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled"/> has no effect if the animation controller is 
            invalid.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationController.IsPaused">
            <summary>
            Gets a value indicating whether the animation is paused.
            </summary>
            <value>
            <see langword="true"/> if the animation is paused; otherwise, <see langword="false"/>.
            (The property returns <see langword="false"/> if the animation instance has already been
            recycled and the animation controller is no longer valid.)
            </value>
            <seealso cref="M:DigitalRune.Animation.AnimationController.Pause"/>
            <seealso cref="M:DigitalRune.Animation.AnimationController.Resume"/>
        </member>
        <member name="P:DigitalRune.Animation.AnimationController.Speed">
            <summary>
            Gets or sets the rate at which time progresses.
            </summary>
            <value>
            The speed ratio. The default value is 1. (The property returns <see cref="F:System.Single.NaN"/> if
            the animation instance has already been recycled and the animation controller is no longer
            valid.)
            </value>
            <remarks>
            <para>
            This property gets or sets the speed ratio of the <see cref="P:DigitalRune.Animation.AnimationController.AnimationInstance"/>. See 
            <see cref="P:DigitalRune.Animation.AnimationInstance.Speed"/> for more information.
            </para>
            <para>
            Note that setting the property <see cref="P:DigitalRune.Animation.AnimationController.Speed"/> has no effect if the animation controller
            is invalid.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationController.State">
            <summary>
            Gets the current state of the animation.
            </summary>
            <value>
            The current state of the animation. (The property returns 
            <see cref="F:DigitalRune.Animation.AnimationState.Stopped"/> if the animation instance has already been recycled and
            the animation controller is no longer valid.)
            </value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationController.Time">
            <summary>
            Gets or sets the current animation time.
            </summary>
            <value>
            The current animation time. (The animation time is <see langword="null"/> if the animation 
            has not been started or the animation instance has already been recycled and the animation 
            controller is no longer valid.)
            </value>
            <para>
            Note that setting the property <see cref="P:DigitalRune.Animation.AnimationController.Time"/> has no effect if the animation controller 
            is invalid.
            </para>
        </member>
        <member name="P:DigitalRune.Animation.AnimationController.Weight">
            <summary>
            Gets or sets the animation weight.
            </summary>
            <value>
            The animation weight. The default value is 1. (The property returns <see cref="F:System.Single.NaN"/> 
            if the animation instance has already been recycled and the animation controller is no 
            longer valid.)
            </value>
            <remarks>
            <para>
            This property gets or sets the animation weight of the <see cref="P:DigitalRune.Animation.AnimationController.AnimationInstance"/>. See 
            <see cref="P:DigitalRune.Animation.AnimationInstance.Weight"/> for more information.
            </para>
            <para>
            Note that setting the property <see cref="P:DigitalRune.Animation.AnimationController.Weight"/> has no effect if the animation 
            controller is invalid.
            </para>
            </remarks>
        </member>
        <member name="E:DigitalRune.Animation.AnimationController.Completed">
            <summary>
            Occurs when the animation has completed playing. Use with caution - see remarks.
            </summary>
            <remarks>
            <para>
            This event adds or removes an event handler to or from the completion event of the 
            <see cref="P:DigitalRune.Animation.AnimationController.AnimationInstance"/>. There are several points to consider when using completion 
            events. Be sure to read <see cref="E:DigitalRune.Animation.AnimationInstance.Completed"/> for a detailed
            description!
            </para>
            <para>
            Note that adding or removing an event handler has no effect if the animation controller is 
            invalid.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.AnimationController.#ctor(DigitalRune.Animation.AnimationManager,DigitalRune.Animation.AnimationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationController"/> struct.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationController.AutoRecycle">
            <summary>
            Automatically recycles the animation instances when the animation is stopped and removed 
            from the animation system.
            </summary>
            <inheritdoc cref="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationController.Recycle">
            <summary>
            Recycles the animation instances associated with this controller.
            </summary>
            <inheritdoc cref="P:DigitalRune.Animation.AnimationController.AutoRecycleEnabled"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationController.Pause">
            <summary>
            Stops the animation from progressing.
            </summary>
            <remarks>
            <para>
            This method stops the animation from progressing. The animation will stop at the current
            animation time and hold the current animation value. The timing can be resumed by calling 
            <see cref="M:DigitalRune.Animation.AnimationController.Resume"/>.
            </para>
            <para>
            Note that calling <see cref="M:DigitalRune.Animation.AnimationController.Pause"/> or <see cref="M:DigitalRune.Animation.AnimationController.Resume"/> has no effect if the animation
            controller is invalid.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Animation.AnimationController.IsPaused"/>
            <seealso cref="M:DigitalRune.Animation.AnimationController.Resume"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationController.Resume">
            <summary>
            Resumes an animation that was previously paused.
            </summary>
            <remarks>
            <para>
            This method resumes the animation timing from where it was stopped. The timing can be 
            stopped by calling <see cref="M:DigitalRune.Animation.AnimationController.Pause"/>.
            </para>
            <para>
            Note that calling <see cref="M:DigitalRune.Animation.AnimationController.Pause"/> or <see cref="M:DigitalRune.Animation.AnimationController.Resume"/> has no effect if the animation
            controller is invalid.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Animation.AnimationController.IsPaused"/>
            <seealso cref="M:DigitalRune.Animation.AnimationController.Pause"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationController.Start">
            <overloads>
            <summary>
            Starts the animation.
            </summary>
            </overloads>
            
            <summary>
            Starts the animation immediately.
            </summary>
            <remarks>
            <para>
            The animation will be started immediately using <see cref="M:DigitalRune.Animation.AnimationTransitions.SnapshotAndReplace"/>. 
            Call <see cref="M:DigitalRune.Animation.AnimationController.Start(DigitalRune.Animation.Transitions.AnimationTransition)"/> if another type of transition (for example, a
            fade-in) should be used.
            </para>
            <para>
            <strong>Important:</strong> When animations are started or stopped the animations do not 
            take effect immediately. That means the new animation values are not immediately applied to 
            the properties that are being animated. The animations are evaluated when the animation 
            system is updated (see <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/>) and new animation values are
            written when <see cref="M:DigitalRune.Animation.AnimationManager.ApplyAnimations"/> is called.
            </para>
            <para>
            The method <see cref="M:DigitalRune.Animation.AnimationController.UpdateAndApply"/> can be called to immediately evaluate and apply the
            animation. But in most cases it is not necessary to call this method explicitly.
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Animation.AnimationException">
            Cannot start animation. The animation instance associated with the current animation 
            controller is already running or has already been recycled and the animation controller is
            no longer valid.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationController.Start(DigitalRune.Animation.Transitions.AnimationTransition)">
            <summary>
            Starts the animation using the specified transition.
            </summary>
            <param name="transition">
            The transition that determines how the new animation is applied. The class 
            <see cref="T:DigitalRune.Animation.AnimationTransitions"/> provides a set of predefined animation transitions.
            </param>
            <inheritdoc cref="M:DigitalRune.Animation.AnimationController.Start"/>
            <exception cref="T:DigitalRune.Animation.AnimationException">
            Cannot start animation. The animation instance associated with the current animation 
            controller is already running or has already been recycled and the animation controller is
            no longer valid.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationController.Stop">
            <overloads>
            <summary>
            Stops the animation.
            </summary>
            </overloads>
            
            <summary>
            Stops the animation immediately.
            </summary>
            <remarks>
            <para>
            Once the animation is stopped, call <see cref="M:DigitalRune.Animation.AnimationController.Start"/> to restart the animation.
            </para>
            <para>
            Note that calling the method <see cref="M:DigitalRune.Animation.AnimationController.Stop"/> (or one of its overloads) has no effect if 
            the animation controller is invalid.
            </para>
            <para>
            <strong>Important:</strong> When animations are started or stopped the animations do not 
            take effect immediately. That means the new animation values are not immediately applied to 
            the properties that are being animated. The animations are evaluated when the animation 
            system is updated (see <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/>) and new animation values are
            written when <see cref="M:DigitalRune.Animation.AnimationManager.ApplyAnimations"/> is called.
            </para>
            <para>
            The method <see cref="M:DigitalRune.Animation.AnimationController.UpdateAndApply"/> can be called to immediately evaluate and apply the
            animation. But in most cases it is not necessary to call this method explicitly.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.AnimationController.Stop(System.TimeSpan)">
            <summary>
            Stops the animation by fading it out over time.
            </summary>
            <param name="fadeOutDuration">
            The duration over which the existing animation fades out.
            </param>
            <inheritdoc cref="M:DigitalRune.Animation.AnimationController.Stop"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationController.UpdateAndApply">
            <summary>
            Immediately evaluates the animation and applies the new animation values.
            </summary>
            <remarks>
            <para>
            When an animation is started or stopped, the values of the animated properties do not change 
            immediately. The new animation values will be computed and set when the animation system is 
            updated. See <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/> and 
            <see cref="M:DigitalRune.Animation.AnimationManager.ApplyAnimations"/>.
            </para>
            <para>
            But in certain cases when an animation is started or stopped the animated properties should 
            be updated immediately. In these case the method <see cref="M:DigitalRune.Animation.AnimationController.UpdateAndApply"/> needs to be 
            called after the animation is started or stopped. This method immediately evaluates the 
            animation and applies the new animation values to the properties that are being animated. 
            </para>
            <para>
            The method can also be called if an animation is modified (e.g. key frames are added or 
            removed) and the changes should take effect immediately.
            </para>
            <para>
            In most cases it is not necessary to call this method because the animation service updates 
            and applies animations automatically. 
            </para>
            <para>
            Note that <see cref="M:DigitalRune.Animation.AnimationController.UpdateAndApply"/> does not advance the time of the animation. The 
            animation is evaluated at the current time.
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Animation.AnimationException">
            Cannot update and apply animation. The animation instance associated with the current 
            animation controller is already running or has already been recycled and the animation 
            controller is no longer valid.
            </exception>
        </member>
        <member name="T:DigitalRune.Animation.AnimationException">
            <summary>
            The exception that is thrown when an error occurs in the animation system.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationException.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationException"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationException"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationException"/> class with a specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationException"/> class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null"/> if no
            inner exception is specified.
            </param>
        </member>
        <member name="T:DigitalRune.Animation.AnimationHelper">
            <summary>
            Provides helper methods for working with animations.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.Max(System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns the larger of the two durations.
            </summary>
            <param name="duration1">The first duration to compare.</param>
            <param name="duration2">The second duration to compare.</param>
            <returns>
            Parameter <paramref name="duration1"/> or <paramref name="duration2"/>, whichever is larger.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.GetState(DigitalRune.Animation.ITimeline,System.TimeSpan)">
            <summary>
            Gets the state of the animation for the specified time on the timeline. (This helper method
            can be used for animations which start at time 0 and run with normal speed.)
            </summary>
            <param name="timeline">The timeline.</param>
            <param name="time">The time on the timeline.</param>
            <returns>The animation state.</returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.GetAnimationTime(DigitalRune.Animation.ITimeline,System.TimeSpan)">
            <summary>
            Gets the animation time for the specified time value on the timeline. (This helper method
            can be used for animations which start at time 0 and run with normal speed.)
            </summary>
            <param name="timeline">The timeline.</param>
            <param name="time">The time on the timeline.</param>
            <returns>
            The animation time. (Or <see langword="null"/> if the animation is not active at 
            <paramref name="time"/>.)
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.IsInMirroredOscillation(System.TimeSpan,System.TimeSpan,System.TimeSpan,DigitalRune.Animation.LoopBehavior)">
            <summary>
            Determines whether the given time value corresponds to a mirrored oscillation loop.
            </summary>
            <param name="time">The time value.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="loopBehavior">The loop behavior.</param>
            <returns>
            <see langword="true"/> if the time value is in a mirrored oscillation loop; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.LoopParameter(System.TimeSpan,System.TimeSpan,System.TimeSpan,DigitalRune.Animation.LoopBehavior,System.TimeSpan@)">
            <summary>
            Handles different loop behaviors by changing the given time value so that it lies between 
            start and end time.
            </summary>
            <param name="time">The time value.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="loopBehavior">The loop behavior.</param>
            <param name="loopedTime">The adjusted time value.</param>
            <returns>
            <see langword="true"/> if the current cycle requires an offset; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.GetCycleOffset``1(System.TimeSpan,System.TimeSpan,System.TimeSpan,``0@,``0@,DigitalRune.Animation.Traits.IAnimationValueTraits{``0},DigitalRune.Animation.LoopBehavior,``0@)">
            <summary>
            Gets the cycle offset for a time value.
            </summary>
            <typeparam name="T">The type of animation value.</typeparam>
            <param name="time">The time value.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="startValue">In: The animation value at <paramref name="startTime"/>.</param>
            <param name="endValue">In: The animation value at <paramref name="endTime"/>.</param>
            <param name="traits">The traits of the animation value.</param>
            <param name="loopBehavior">The post-loop behavior.</param>
            <param name="cycleOffset">
            Out: The cycle offset.
            </param>
            <remarks>
            The cycle offset is <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.SetIdentity(`0@)"/> if the 
            <see cref="T:DigitalRune.Animation.LoopBehavior"/> is unequal to <see cref="F:DigitalRune.Animation.LoopBehavior.CycleOffset"/> or if the 
            <paramref name="time"/> is in the regular cycle (between the first and the last key frame).
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.GetRoot(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Returns the root instance of an animation tree.
            </summary>
            <param name="animationInstance">The animation instance where to start the search.</param>
            <returns>The root instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animationInstance"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.GetAncestors(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Gets the ancestors of the <see cref="T:DigitalRune.Animation.AnimationInstance"/> in the animation tree.
            </summary>
            <param name="animationInstance">The animation instance where to start the search.</param>
            <returns>
            The ancestors of <paramref name="animationInstance"/> in the animation tree.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animationInstance"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.GetSelfAndAncestors(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Gets the <see cref="T:DigitalRune.Animation.AnimationInstance"/> and its ancestors in the animation tree.
            </summary>
            <param name="animationInstance">The animation instance where to start the search.</param>
            <returns>
            The <paramref name="animationInstance"/> and its ancestors in the animation tree.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animationInstance"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.GetDescendants(DigitalRune.Animation.AnimationInstance)">
            <overloads>
            <summary>
            Gets the descendants of the <see cref="T:DigitalRune.Animation.AnimationInstance"/> in the animation tree.
            </summary>
            </overloads>
            
            <summary>
            Gets the descendants of the <see cref="T:DigitalRune.Animation.AnimationInstance"/> in the animation tree using a
            depth-first search.
            </summary>
            <param name="animationInstance">The animation instance where to start the search.</param>
            <returns>
            The descendants of <paramref name="animationInstance"/> in the animation tree.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animationInstance"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.GetDescendants(DigitalRune.Animation.AnimationInstance,System.Boolean)">
            <summary>
            Gets the descendants of the <see cref="T:DigitalRune.Animation.AnimationInstance"/> in the animation tree 
            using either a depth-first or a breadth-first search.
            </summary>
            <param name="animationInstance">The animation instance where to start the search.</param>
            <param name="depthFirst">
            If set to <see langword="true"/> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
            <returns>
            The descendants of <paramref name="animationInstance"/> in the animation tree.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animationInstance"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.GetSubtree(DigitalRune.Animation.AnimationInstance)">
            <overloads>
            <summary>
            Gets the subtree (the given <see cref="T:DigitalRune.Animation.AnimationInstance"/> and all of its descendants in the
            animation tree).
            </summary>
            </overloads>
            
            <summary>
            Gets the subtree (the given <see cref="T:DigitalRune.Animation.AnimationInstance"/> and all of its descendants in the
            animation tree) using a depth-first search.
            </summary>
            <param name="animationInstance">The animation instance where to start the search.</param>
            <returns>
            The <paramref name="animationInstance"/> and all of its descendants in the animation tree.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animationInstance"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.GetSubtree(DigitalRune.Animation.AnimationInstance,System.Boolean)">
            <summary>
            Gets the subtree (the given <see cref="T:DigitalRune.Animation.AnimationInstance"/> and all of its descendants in the
            animation tree) using either a depth-first or a breadth-first search.
            </summary>
            <param name="animationInstance">The animation instance where to start the search.</param>
            <param name="depthFirst">
            If set to <see langword="true"/> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
            <returns>
            The <paramref name="animationInstance"/> and all of its descendants in the animation tree.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animationInstance"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.GetLeaves(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Gets the leaves of the <see cref="T:DigitalRune.Animation.AnimationInstance"/> in the animation tree.
            </summary>
            <param name="animationInstance">The animation instance where to start the search.</param>
            <returns>
            The leaves of <paramref name="animationInstance"/> in the animation tree.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animationInstance"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.ComputeLinearVelocity(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Computes the linear velocity that moves an object from the current position to a 
            target position.
            </summary>
            <param name="currentPosition">The current position.</param>
            <param name="targetPosition">The target position.</param>
            <param name="deltaTime">The time over which the movement takes place (in seconds).</param>
            <returns>
            The linear velocity vector. If an object is moved with this velocity starting at
            <paramref name="currentPosition"/>, it will arrive at <paramref name="targetPosition"/>
            after <paramref name="deltaTime"/> seconds.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.ComputeAngularVelocity(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
            <overloads>
            <summary>
            Computes the angular velocity that rotates an object from the current orientation to a 
            target orientation.
            </summary>
            </overloads>
            
            <summary>
            Computes the angular velocity that rotates an object from the current orientation to a 
            target orientation.
            </summary>
            <param name="currentOrientation">The current orientation.</param>
            <param name="targetOrientation">The target orientation.</param>
            <param name="deltaTime">The time over which the rotation takes place (in seconds).</param>
            <returns>
            The angular velocity vector. If an object is rotated with this velocity starting at
            <paramref name="currentOrientation"/>, it will arrive at <paramref name="targetOrientation"/>
            after <paramref name="deltaTime"/> seconds.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.ComputeAngularVelocity(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F,System.Single)">
            <summary>
            Computes the angular velocity that rotates an object from the current orientation to a 
            target orientation.
            </summary>
            <param name="currentOrientation">The current orientation.</param>
            <param name="targetOrientation">The target orientation.</param>
            <param name="deltaTime">The time over which the rotation takes place (in seconds).</param>
            <returns>
            The angular velocity vector. If an object is rotated with this velocity starting at
            <paramref name="currentOrientation"/>, it will arrive at <paramref name="targetOrientation"/>
            after <paramref name="deltaTime"/> seconds.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationHelper.Compress(DigitalRune.Animation.SrtKeyFrameAnimation,System.Single,System.Single,System.Single)">
            <summary>
            Compresses the specified animation using simple lossy compression algorithm.
            </summary>
            <param name="animation">The animation.</param>
            <param name="scaleThreshold">The scale threshold.</param>
            <param name="rotationThreshold">The rotation threshold in degrees.</param>
            <param name="translationThreshold">The translation threshold.</param>
            <returns>
            The compressed animation. Or <see langword="null"/> if the animation does contain any
            key frames.
            </returns>
            <remarks>
            <para>
            This method takes an <see cref="T:DigitalRune.Animation.SrtKeyFrameAnimation"/> and removes not needed scale,
            rotation or translation channels. It further removes key frames that can be interpolated
            from the neighbor key frames. This a lossy compression and the threshold parameters define
            the allowed errors. If the thresholds are 0 or negative, this compression is lossless. If
            the thresholds are greater than 0 (recommended), the compression is lossy. The best way to
            determine optimal thresholds is to compare the compressed animation with the uncompressed
            animation visually.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animation" /> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Animation.AnimationInstance">
            <summary>
            Represents an instance of an animation timeline.
            </summary>
            <remarks>
            <para>
            Animation instances are used to play back animations. They maintain the runtime-state of an 
            animation. 
            </para>
            <para>
            Animation instances are automatically created and managed by the animation system when a new 
            animation is started using one of the <strong>StartAnimation</strong>-methods or when an 
            animation controller is created using one of the <strong>CreateController</strong>-methods 
            (see <see cref="T:DigitalRune.Animation.IAnimationService"/>). 
            </para>
            <para>
            <strong>Animation Value:</strong> An animation usually produces a value as the output. The
            base class <see cref="T:DigitalRune.Animation.AnimationInstance"/> manages the timeline of the animation. The derived 
            class <see cref="T:DigitalRune.Animation.AnimationInstance`1"/> manages the animation value. The animation system
            automatically applies the output values to the properties that are being animated (see 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>).
            </para>
            <para>
            <strong>Animation State and Timing:</strong> The property <see cref="P:DigitalRune.Animation.AnimationInstance.State"/> returns the 
            current state of the animation. The animation can be <see cref="F:DigitalRune.Animation.AnimationState.Delayed"/>, 
            <see cref="F:DigitalRune.Animation.AnimationState.Playing"/>, <see cref="F:DigitalRune.Animation.AnimationState.Filling"/> or 
            <see cref="F:DigitalRune.Animation.AnimationState.Stopped"/>. But the state does not indicate whether the animation 
            timing is active. The property <see cref="P:DigitalRune.Animation.AnimationInstance.IsPaused"/> indicates whether the animation timing 
            is active or paused.
            </para>
            <para>
            Active animations are managed by the <see cref="T:DigitalRune.Animation.AnimationManager"/>. The animation system 
            automatically advances and updates the animations.
            </para>
            <para>
            The current state of an animation is computed once per frame (in 
            <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/>) and cached until the next frame. The animation instance
            does not monitor the animation for changes. I.e. when the animation is modified the animation 
            instance needs to be notified by calling <see cref="M:DigitalRune.Animation.AnimationInstance.Invalidate"/>. Otherwise, it can return an 
            invalid state in the current frame. For example, an animation instance plays a certain 
            <see cref="T:DigitalRune.Animation.TimelineClip"/>. During playback the user changes the 
            <see cref="P:DigitalRune.Animation.TimelineClip.Delay"/> of the animation. Now, when the user reads 
            <see cref="P:DigitalRune.Animation.AnimationInstance.State"/> in the same frame the instance might return the wrong value. The user 
            needs to call <see cref="M:DigitalRune.Animation.AnimationInstance.Invalidate"/> to get the correct, up-to-date value. (It is not 
            necessary to call <see cref="M:DigitalRune.Animation.AnimationInstance.Invalidate"/> if the animations are updated using 
            <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/>. <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/>
            automatically computes the new values.)
            </para>
            <para>
            <strong>Animation Tree:</strong> Animation instances can have children. For example, when a 
            <see cref="T:DigitalRune.Animation.TimelineGroup"/> is started it creates a root instance that has several children - 
            one animation instance per animation in the timeline group. A timeline group might contain 
            other timeline groups. The animation instances are organized in a tree structure.
            </para>
            <para>
            Only the root instance of a tree can be controlled interactively (using an 
            <see cref="T:DigitalRune.Animation.AnimationController"/>).
            </para>
            <para>
            <strong>Speed Ratio:</strong> The playback speed of the animation tree can be controlled by
            changing the property <see cref="P:DigitalRune.Animation.AnimationInstance.Speed"/>. The speed ratio defines the rate at which time 
            progresses. The default value is 1. A value of, for example, 2 means that the animation runs 
            twice as fast. A value of 0.5 causes the animation to run in slow-motion at half speed.
            </para>
            <para>
            Note that the only the speed ratio of the root instance in the animation tree can be 
            controlled. (Changing the speed ratio of other nodes in the animation tree has no effect.)
            </para>
            <para>
            <strong>Animation Weights:</strong> Each animation instance has a weight (see 
            <see cref="P:DigitalRune.Animation.AnimationInstance.Weight"/>) that defines the intensity of the animation. It is a factor that is 
            applied to the animation output. The animation weight is in particular relevant when multiple
            animations should be combined. Each animation combines its output with the output of the
            previous stage in the animation composition chain. (If the animation is the first animation of
            a composition chain it combines its value with the base value of the property that is being
            animated.)
            </para>
            <para>
            The default value is 1, which means that 100% of the animation is returned overriding any 
            previous stage in an animation composition chain. A value of 0.75 means that result is
            weighted combination of the previous stage (25%) and the output of the current animation
            (75%). A value of 0 basically disables the output of the current stage.
            </para>
            <para>
            Changing the animation weight of an instance affects the entire subtree: The current animation
            instance and all children. The effective animation weight is the product of all weights from
            the root instance to the current animation instance.
            </para>
            <para>
            <strong>Secondary Animations:</strong> An animation instance itself is an 
            <see cref="T:DigitalRune.Animation.IAnimatableObject"/>, which means that it has properties which can be animated.
            The properties that can be animated are <see cref="P:DigitalRune.Animation.AnimationInstance.Speed"/> and <see cref="P:DigitalRune.Animation.AnimationInstance.Weight"/>. 
            Secondary animation can be used, for example, to fade-in an animation by letting the animation
            weight go from 0 to 1 over time.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.RunCount">
            <summary>
            Gets a value that indicates the version of the animation instance.
            </summary>
            <value>The version of the animation instance.</value>
            <remarks>
            This number is automatically incremented every time the animation instance is recycled.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.Parent">
            <summary>
            Gets the parent of this animation instance.
            </summary>
            <value>
            The parent of this animation instance; <see langword="null"/>, if the current instance does 
            not have a parent.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.Children">
            <summary>
            Gets the children of this animation instance.
            </summary>
            <value>The children of this animation instance.</value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.Animation">
            <summary>
            Gets the animation timeline that is being played back.
            </summary>
            <value>The animation timeline that is being played back.</value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.AutoRecycleEnabled">
            <summary>
            Gets or sets a value indicating whether this animation instance should be automatically
            recycled when it is stopped and removed from the animation system.
            </summary>
            <value>
            <see langword="true"/> if the animation instance is recycled automatically; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            See <see cref="T:DigitalRune.Animation.AnimationController"/> for more information.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.IsPaused">
            <summary>
            Gets a value indicating whether this animation instance is paused.
            </summary>
            <value>
            <see langword="true"/> if this animation instance (or any of its ancestors in the animation
            tree) is paused; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.IsRoot">
            <summary>
            Gets a value indicating whether this animation instance is the root node in the animation 
            tree.
            </summary>
            <value>
            <see langword="true"/> if animation instance is the root node in the animation tree; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.State">
            <summary>
            Gets the current state of the animation.
            </summary>
            <value>The current state of the animation.</value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.Time">
            <summary>
            Gets or sets the current animation time.
            </summary>
            <value>
            The current animation time. (The animation time is <see langword="null"/> if the instance 
            has not been started.)
            </value>
            <exception cref="T:System.InvalidOperationException">
            Cannot set animation time because this is not the root instance. The animation instance is 
            a node in the animation tree, but only the root node of the tree can be controlled directly.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.SpeedProperty">
            <summary>
            Gets the <see cref="P:DigitalRune.Animation.AnimationInstance.Speed"/> property as an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.
            </summary>
            <value>
            The <see cref="P:DigitalRune.Animation.AnimationInstance.Speed"/> property as an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.Speed">
            <summary>
            Gets or sets the rate at which time progresses.
            </summary>
            <value>The speed ratio. The default value is 1.</value>
            <remarks>
            <para>
            The speed ratio defines the rate at which time progresses on the timeline. The default value
            is 1. A value of, for example, 2 means that the animation runs twice as fast. A value of
            0.5 causes the animation to run in slow-motion with half speed.
            </para>
            <para>
            Note that the only the speed ratio of the root instance in the animation tree can be 
            controlled. (Changing the speed ratio of other nodes in the animation tree has no effect.)
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is NaN or infinity.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.WeightProperty">
            <summary>
            Gets the <see cref="P:DigitalRune.Animation.AnimationInstance.Weight"/> property as an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.
            </summary>
            <value>
            The <see cref="P:DigitalRune.Animation.AnimationInstance.Weight"/> property as an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.Weight">
            <summary>
            Gets or sets the animation weight.
            </summary>
            <value>
            The animation weight. The value lies in the range [0, 1]. The default value is 1.
            </value>
            <remarks>
            <para>
            The animation weight defines the intensity of the animation. It is a factor that is applied 
            to the animation output. The animation weight is in particular relevant when multiple 
            animations should be combined. Each animation combines its output with the output of the 
            previous stage in the animation composition chain. (If the animation is the first animation 
            of a composition chain it combines its value with the base value of the property that is 
            being animated.)
            </para>
            <para>
            The default value is 1 which means that 100% of the animation is returned, overriding any 
            previous stage in a animation composition chain. A value of 0.75 means that result is
            weighted combination of the previous stage (25%) and the output of the current animation
            (75%). A value of 0 basically disables the output of the current animation.
            </para>
            <para>
            Changing the animation weight of an instance affects the entire subtree: the current 
            animation instance and all children. The effective animation weight is the product of all 
            weights from the root node to the current animation instance.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or greater than 1.
            </exception>
        </member>
        <member name="E:DigitalRune.Animation.AnimationInstance.Completed">
            <summary>
            Occurs when the animation has completed playing. Use with caution - see remarks.
            </summary>
            <remarks>
            <para>
            A root instance has completed playing when the root timeline has reached the end of its 
            duration (including any repeats). A child instance is considered to have finished playing 
            when the root instance has finished playing.
            </para>
            <para>
            <strong>Important:</strong> The completion event does not trigger when animation is 
            explicitly stopped or removed before it has reached the end of its duration. (But the 
            completion event is triggered when the user sets the <see cref="P:DigitalRune.Animation.AnimationInstance.Time"/> to a value past the 
            end of the duration.)
            </para>
            <para>
            The completion event is not raised immediately when the state of the animation changes. 
            Instead, the <see cref="T:DigitalRune.Animation.AnimationManager"/> records all animations that have finished 
            playing in <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/> and explicitly raises the completion events
            in <see cref="M:DigitalRune.Animation.AnimationManager.ApplyAnimations"/>.
            </para>
            <para>
            <strong>Use with Caution:</strong> The animation system uses weak references to ensure that
            animations do not accidentally keep the animated objects and properties alive. Animations 
            are automatically removed if the animated objects are removed (i.e. garbage collected). But 
            the <see cref="E:DigitalRune.Animation.AnimationInstance.Completed"/> event stores the event handlers using a strong reference. If an 
            event handler keeps the animation objects or properties alive, then the animation system 
            will not be able to automatically remove the animation and the referenced resources. To 
            ensure that all resources are properly freed, make sure that one of the following conditions 
            is true:
            <list type="bullet">
            <item>
            <description>
            The completion event handlers do not keep the target object or properties that are being
            animated alive.
            </description>
            </item>
            <item>
            <description>
            The completion event handlers are removed explicitly if they are no longer required.
            </description>
            </item>
            <item>
            <description>
            The animation is stopped explicitly when it is no longer needed, e.g. by calling 
            <see cref="M:DigitalRune.Animation.AnimationController.Stop"/>).
            </description>
            </item>
            <item>
            <description>
            The animation is stopped implicitly, e.g. by starting a new animation which replaces it.
            </description>
            </item>
            <item>
            <description>
            The animation has a limited duration and stops automatically. (The 
            <see cref="P:DigitalRune.Animation.ITimeline.FillBehavior"/> needs to be set to <see cref="F:DigitalRune.Animation.FillBehavior.Stop"/>.)
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.RequiresCompletedEvent">
            <summary>
            Gets a value indicating whether the animation service needs to call 
            <see cref="M:DigitalRune.Animation.AnimationInstance.RaiseCompletedEvent"/> when the animation completes.
            </summary>
            <value>
            <see langword="true"/> if the animation service needs to call 
            <see cref="M:DigitalRune.Animation.AnimationInstance.RaiseCompletedEvent"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationInstance"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.Create(DigitalRune.Animation.ITimeline)">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Animation.AnimationInstance"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <param name="animation">The animation timeline.</param>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Animation.AnimationInstance"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Animation.AnimationInstance.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animation"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.Recycle">
            <summary>
            Recycles this animation instance (including all children).
            </summary>
            <remarks>
            <para>
            This method resets this instance (and all children) and returns it to a resource pool if 
            resource pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.Initialize(DigitalRune.Animation.ITimeline)">
            <summary>
            Initializes the animation instance.
            </summary>
            <param name="animation">The animation timeline.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animation"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.Reset">
            <summary>
            Resets this animation instance.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.CreateChildCollection">
            <summary>
            Creates the child collection of this animation instance.
            </summary>
            <returns>The child collection to be used by this animation instance.</returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.GetEffectiveWeight">
            <summary>
            Gets the effective animation weight.
            </summary>
            <returns>The effective animation weight.</returns>
            <remarks>
            The effective animation weight is the product of all animation weights (from the root 
            instance in the animation tree to current animation instance).
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.AdvanceTime(System.TimeSpan)">
            <summary>
            Advances the animation time by the given time.
            </summary>
            <param name="deltaTime">The elapsed time.</param>
            <remarks>
            Calling this method has no effect when the animation instance or any of its ancestors in the 
            animation tree is paused.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot advance animation because this is not the root instance. The animation instance is a 
            node in the animation tree, but only the root node of the tree can be controlled directly.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.SetTime(System.Nullable{System.TimeSpan})">
            <summary>
            Sets the animation time of the current animation instance and updates all children.
            </summary>
            <param name="time">The time value to set.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.Invalidate">
            <summary>
            Invalidates the current state of the animation.
            </summary>
            <remarks>
            <para>
            This method needs to be called manually if the animation data (such as the begin time of an 
            animation) is changed and other objects want to read the animation state in the same frame.
            If an animation instance has been invalidated, it will automatically recompute its state
            when <see cref="P:DigitalRune.Animation.AnimationInstance.State"/> is read.
            </para>
            <para>
            In is not necessary to explicitly call this method if <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/> 
            is called. In this case the state of the animation will be recomputed automatically.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.Pause">
            <summary>
            Stops the animation from progressing.
            </summary>
            <remarks>
            <para>
            This method stops the animation timing. The animation no longer progresses when 
            <see cref="M:DigitalRune.Animation.AnimationInstance.AdvanceTime(System.TimeSpan)"/> is called. The timing can be resumed by calling 
            <see cref="M:DigitalRune.Animation.AnimationInstance.Resume"/>.
            </para>
            <para>
            Pausing an animation instance implicitly pauses all child instances.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot pause animation because this is not the root instance. The animation instance is a 
            node in the animation tree, but only the root node of the tree can be controlled directly.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.Resume">
            <summary>
            Resumes an animation that was previously stopped.
            </summary>
            <remarks>
            <para>
            This method resumes the animation timing from where it was stopped. The timing can be 
            stopped by calling <see cref="M:DigitalRune.Animation.AnimationInstance.Pause"/>.
            </para>
            <para>
            Resuming an animation instance implicitly resumes all child instances.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot pause animation because this is not the root instance. The animation instance is a
            node in the animation tree, but only the root node of the tree can be controlled directly.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.IsAssignableTo(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
            <overloads>
            <summary>
            Determines whether the animation tree can be assigned to the given objects or properties.
            </summary>
            </overloads>
            
            <summary>
            Determines whether this animation tree can be assigned to the specified set of objects.
            </summary>
            <param name="objects">The set of animatable objects.</param>
            <returns>
            <see langword="true"/> if this animation instance (or one of its children) can be assigned 
            to <paramref name="objects"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.IsAssignableTo(DigitalRune.Animation.IAnimatableObject)">
            <summary>
            Determines whether this animation tree can be assigned to the specified object.
            </summary>
            <param name="obj">The animatable object.</param>
            <returns>
            <see langword="true"/> if this animation instance (or one of its children) can be assigned 
            to <paramref name="obj"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.IsAssignableTo(DigitalRune.Animation.IAnimatableProperty)">
            <summary>
            Determines whether this animation tree can be assigned to the specified property.
            </summary>
            <param name="property">The animatable property.</param>
            <returns>
            <see langword="true"/> if this animation instance (or one of its children) can be assigned 
            to <paramref name="property"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.IsAssignedTo(DigitalRune.Animation.IAnimatableProperty)">
            <summary>
            Determines whether this animation tree is assigned to the specified property.
            </summary>
            <param name="property">The animatable property.</param>
            <returns>
            <see langword="true"/> if this animation instance (or one of its children) is assigned to 
            <paramref name="property"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.AssignTo(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
            <overloads>
            <summary>
            Assigns this animation tree to objects or properties.
            </summary>
            </overloads>
            
            <summary>
            Assigns this animation tree to the specified set of objects.
            </summary>
            <param name="objects">The collection of animatable object.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.AssignTo(DigitalRune.Animation.IAnimatableObject)">
            <summary>
            Assigns this animation tree to the specified object.
            </summary>
            <param name="obj">The animatable object.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.AssignTo(DigitalRune.Animation.IAnimatableProperty)">
            <summary>
            Assigns this animation tree to the specified property.
            </summary>
            <param name="property">The animatable property.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.GetAssignedInstance(DigitalRune.Animation.IAnimatableProperty)">
            <summary>
            Checks whether this animation tree is assigned to a certain animated property and returns 
            the animation instance.
            </summary>
            <param name="property">The animatable property.</param>
            <returns>
            The animation instance that is assigned to <paramref name="property"/>. 
            <see langword="null"/> if neither this instance nor its children are assigned to the
            property. If multiple children are assigned to the property the last found child is 
            returned.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.GetAssignedProperties(System.Collections.Generic.List{DigitalRune.Animation.IAnimatableProperty})">
            <summary>
            Gets all assigned properties and stores them in the given list.
            </summary>
            <param name="properties">A list in which the target properties shall be stored.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.IsActive(DigitalRune.Animation.AnimationManager)">
            <summary>
            Determines whether this animation tree is currently applied to any properties.
            </summary>
            <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager"/>.</param>
            <returns>
            <see langword="true"/> if this animation tree is applied to any properties; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.AddToCompositionChains(DigitalRune.Animation.AnimationManager,DigitalRune.Animation.HandoffBehavior,DigitalRune.Animation.AnimationInstance)">
            <summary>
            Applies this animation tree to the assigned properties.
            </summary>
            <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager"/>.</param>
            <param name="handoffBehavior">
            A value indicating how the new animations interact with existing ones.
            </param>
            <param name="previousInstance">
            Optional: The animation instance after which this animation instance will be added in the 
            animation composition chain. If set to <see langword="null"/> this animation instance will 
            be appended at the end of the composition chain. This parameter is only relevant when 
            <paramref name="handoffBehavior"/> is <see cref="F:DigitalRune.Animation.HandoffBehavior.Compose"/>. 
            </param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.RemoveFromCompositionChains(DigitalRune.Animation.AnimationManager)">
            <summary>
            Removes this animation tree from the animated properties.
            </summary>
            <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager"/>.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.StopSecondaryAnimations(DigitalRune.Animation.AnimationManager)">
            <summary>
            Stops all animations that affect the animation tree (such as animations that control the 
            speed ratios or animation weights).
            </summary>
            <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager"/>.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.UpdateAndApply(DigitalRune.Animation.AnimationManager)">
            <summary>
            Immediately evaluates the given animation instance and applies the new animation values.
            </summary>
            <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager"/>.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.OnCompleted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Animation.AnimationInstance.Completed"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Animation.AnimationInstance.OnCompleted(System.EventArgs)"/> in a derived
            class, be sure to call the base class's <see cref="M:DigitalRune.Animation.AnimationInstance.OnCompleted(System.EventArgs)"/> method so that registered 
            delegates receive the event.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance.DigitalRune#INamedObject#Name">
            <summary>
            Not implemented.
            </summary>
            <value>
            Not implemented. Always returns <see cref="F:System.String.Empty"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.DigitalRune#Animation#IAnimatableObject#GetAnimatedProperties">
            <summary>
            Gets the properties which are currently being animated.
            </summary>
            <returns>
            The properties which are currently being animated.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance.DigitalRune#Animation#IAnimatableObject#GetAnimatableProperty``1(System.String)">
            <summary>
            Gets the property with given name and type which can be animated.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <returns>
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty"/> that has the given name and type; otherwise, 
            <see langword="null"/> if the object does not have an property with this name or type.
            </returns>
            <remarks>
            An animation instance has two animatable properties: <see cref="P:DigitalRune.Animation.AnimationInstance.Speed"/> and 
            <see cref="P:DigitalRune.Animation.AnimationInstance.Weight"/>.
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.AnimationInstanceCollection">
            <summary>
            Manages the children of an animation instance.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstanceCollection.#ctor(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationInstanceCollection"/> class.
            </summary>
            <param name="owner">The animation instance that owns this child collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="owner" /> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="owner"/> already owns a child collection.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstanceCollection.#ctor(DigitalRune.Animation.AnimationInstance,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationInstanceCollection"/> class.
            </summary>
            <param name="owner">The animation instance that owns this child collection.</param>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstanceCollection.GetParent(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Gets the parent of an object.
            </summary>
            <param name="child">The child object.</param>
            <returns>The parent of <paramref name="child"/>.</returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstanceCollection.SetParent(DigitalRune.Animation.AnimationInstance,DigitalRune.Animation.AnimationInstance)">
            <summary>
            Sets the parent of the given object.
            </summary>
            <param name="parent">The parent to set.</param>
            <param name="child">The child object.</param>
        </member>
        <member name="T:DigitalRune.Animation.AnimationInstance`1">
            <summary>
            Represents an instance of an animation.
            </summary>
            <typeparam name="T">The type of animation value.</typeparam>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance`1.Property">
            <summary>
            Gets the target property that is being animated.
            </summary>
            <value>
            The target property that is being animated. Returns <see langword="null"/> if the instance
            is not assigned to a property or if the owner of the property has been garbage collected.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationInstance`1.Animation">
            <summary>
            Gets the animation that is being played back.
            </summary>
            <value>The animation that is being played back.</value>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DigitalRune.Animation.AnimationInstance`1"/> class from being
            created.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.Create(DigitalRune.Animation.IAnimation{`0})">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Animation.AnimationInstance`1"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <param name="animation">The animation that should be played back.</param>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Animation.AnimationInstance`1"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Animation.AnimationInstance`1.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animation"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.Recycle">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Animation.AnimationInstance"/> class.
            </summary>
            <remarks>
            <para>
            This method resets this instance and returns it to a resource pool if resource pooling is 
            enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.CreateChildCollection">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.GetValue(`0@,`0@,`0@)">
            <summary>
            Gets the current animation value.
            </summary>
            <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its
            own source value.
            </param>
            <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its
            own target value.
            </param>
            <param name="result">
            Out: The value of the animation at the current time. (The animation returns 
            <paramref name="defaultSource"/> if the animation is currently 
            <see cref="F:DigitalRune.Animation.AnimationState.Delayed"/> or <see cref="F:DigitalRune.Animation.AnimationState.Stopped"/>.)
            </param>
            <remarks>
            <para>
            Note that the parameters need to be passed by reference. <paramref name="defaultSource"/> 
            and <paramref name="defaultTarget"/> are input parameters. The resulting animation value is 
            stored in <paramref name="result"/>.
            </para>
            <para>
            The values of the <paramref name="defaultSource"/> and the <paramref name="defaultTarget"/>
            parameters depend on where the animation is used. If the animation is used to animate an 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>, then the values depend on the position of the
            animation in the composition chain:
            <list type="bullet">
            <item>
            <description>
            If the animation has replaced another animation using 
            <see cref="M:DigitalRune.Animation.AnimationTransitions.SnapshotAndReplace"/>: 
            <paramref name="defaultSource"/> is the last output value of the animation which was 
            replaced and <paramref name="defaultTarget"/> is the base value of the animated property.
            </description>
            </item>
            <item>
            <description>
            If the animation is the first in an animation composition chain: 
            <paramref name="defaultSource"/> and <paramref name="defaultTarget"/> are the base value of
            the animated property.
            </description>
            </item>
            <item>
            <description>
            If the animation is not the first in an animation composition chain: 
            <paramref name="defaultSource"/> is the output of the previous stage in the composition 
            chain and <paramref name="defaultTarget"/> is the base value of the animated property.
            </description>
            </item>
            </list>
            </para>
            <para>
            If the animation is not used to animate an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>, the values
            need to be set by the user depending on the context where the animation is used. (In most
            cases it is safe to ignore the parameters and just pass default values.)
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.IsAssignableTo(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.IsAssignableTo(DigitalRune.Animation.IAnimatableObject)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.IsAssignableTo(DigitalRune.Animation.IAnimatableProperty)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.IsAssignedTo(DigitalRune.Animation.IAnimatableProperty)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.AssignTo(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.AssignTo(DigitalRune.Animation.IAnimatableObject)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.AssignTo(DigitalRune.Animation.IAnimatableProperty)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.GetAssignedInstance(DigitalRune.Animation.IAnimatableProperty)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.GetAssignedProperties(System.Collections.Generic.List{DigitalRune.Animation.IAnimatableProperty})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.IsActive(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.AddToCompositionChains(DigitalRune.Animation.AnimationManager,DigitalRune.Animation.HandoffBehavior,DigitalRune.Animation.AnimationInstance)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.RemoveFromCompositionChains(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationInstance`1.UpdateAndApply(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.AnimationManager">
            <summary>
            Represents the animations system which can be used to play back animations.
            </summary>
            <remarks>
            <para>
            This class implements the <see cref="T:DigitalRune.Animation.IAnimationService"/>. See documentation of
            <see cref="T:DigitalRune.Animation.IAnimationService"/>.
            </para>
            <para>
            This class has two important methods: <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/> must be called once per frame,
            and it updates all managed animations. The new animation values are internally cached but not 
            applied until <see cref="M:DigitalRune.Animation.AnimationManager.ApplyAnimations"/> is called. <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/> can usually be 
            called parallel to other game services (graphics, physics, AI, etc.). 
            <see cref="M:DigitalRune.Animation.AnimationManager.ApplyAnimations"/> should be called when it is safe to write the animation results 
            to the animated objects and properties.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationManager.EnableMultithreading">
            <summary>
            Gets or sets a value indicating whether multithreading is enabled.
            </summary>
            <value>
            <see langword="true"/> if multithreading is enabled; otherwise, <see langword="false"/>. The
            default value is <see langword="true"/> if the current system has more than one CPU cores.
            </value>
            <remarks>
            <para>
            When multithreading is enabled the animation system will distribute the workload across 
            multiple processors (CPU cores) to improve the performance. 
            </para>
            <para>
            Multithreading adds an additional overhead, therefore it should only be enabled if the 
            current system has more than one CPU core and if the other cores are not fully utilized by
            the application. Multithreading should be disabled if the system has only one CPU core or
            if all other CPU cores are busy. In some cases it might be necessary to run a benchmark of
            the application and compare the performance with and without multithreading to decide
            whether multithreading should be enabled or not.
            </para>
            <para>
            The animation system internally uses the class <see cref="T:DigitalRune.Threading.Parallel"/> for parallelization.
            <see cref="T:DigitalRune.Threading.Parallel"/> is a static class that defines how many worker threads are created, 
            how the workload is distributed among the worker threads and more. (See 
            <see cref="T:DigitalRune.Threading.Parallel"/> to find out more on how to configure parallelization.)
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Threading.Parallel"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationManager"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.IsAnimated(DigitalRune.Animation.IAnimatableObject)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.IsAnimated(DigitalRune.Animation.IAnimatableProperty)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.CreateController(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
            <overloads>
            <summary>
            Creates a new animation controller which can be used to apply the given animation on the
            specified objects or properties.
            </summary>
            </overloads>
            
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.CreateController(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableObject)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.CreateController(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableProperty)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.StartAnimation(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
            <overloads>
            <summary>
            Starts an animation on the specified objects or properties.
            </summary>
            </overloads>
            
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.StartAnimation(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject},DigitalRune.Animation.Transitions.AnimationTransition)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableObject)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableObject,DigitalRune.Animation.Transitions.AnimationTransition)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableProperty)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableProperty,DigitalRune.Animation.Transitions.AnimationTransition)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.StartAnimation(DigitalRune.Animation.AnimationInstance,DigitalRune.Animation.Transitions.AnimationTransition)">
            <summary>
            Starts the animations using the specified transition.
            </summary>
            <param name="animationInstance">The animation instance.</param>
            <param name="transition">
            The animation transition. (Can be <see langword="null"/>, in which case
            <see cref="M:DigitalRune.Animation.AnimationTransitions.SnapshotAndReplace"/> will be used.)
            </param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.StopAnimation(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
            <overloads>
            <summary>
            Stops the animation on the specified objects or properties.
            </summary>
            </overloads>
            
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.StopAnimation(DigitalRune.Animation.IAnimatableObject)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.StopAnimation(DigitalRune.Animation.IAnimatableProperty)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.StopAnimation(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Stops the specified animations.
            </summary>
            <param name="animationInstance">The animation instance.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.Add(DigitalRune.Animation.AnimationInstance,DigitalRune.Animation.HandoffBehavior,DigitalRune.Animation.AnimationInstance)">
            <summary>
            Registers the specified animation instance.
            </summary>
            <param name="animationInstance">The animation instance.</param>
            <param name="handoffBehavior">
            A value indicating how the new animations interact with existing ones.
            </param>
            <param name="previousInstance">
            Optional: The animation instance after which <paramref name="animationInstance"/> will be 
            added in the animation composition chain. If set to <see langword="null"/> 
            <paramref name="animationInstance"/> will be appended at the end of the composition chain. 
            This parameter is only relevant when <paramref name="handoffBehavior"/> is 
            <see cref="F:DigitalRune.Animation.HandoffBehavior.Compose"/>. 
            </param>
            <remarks>
            <para>
            This method adds the specified animation tree (<paramref name="animationInstance"/> and all
            of its children) to the animation system. The animation system will from now on
            automatically advance and update the animations.
            </para>
            <para>
            Adding and removing animation instances is usually controlled by 
            <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition"/> instances.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animationInstance" /> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Cannot add <paramref name="animationInstance"/> to animation system. The animation instance 
            is already registered, or it is not a root instance.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.Remove(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Unregisters the specified animation instance.
            </summary>
            <param name="animationInstance">The animation instance.</param>
            <remarks>
            <para>
            This method removes the specified animation tree from the animation system. If 
            <see cref="P:DigitalRune.Animation.AnimationInstance.AutoRecycleEnabled"/> is set on the root node of the animation 
            tree, then all instances will be recycled.
            </para>
            <para>
            Adding and removing animation instances is usually controlled by 
            <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition"/> instances.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Cannot remove <paramref name="animationInstance"/> from the animation system. The animation 
            instance is not a root instance.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.RemoveBefore(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Removes all animations before the specified animation.
            </summary>
            <param name="animationInstance">The animation instance.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.StopTransitions(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Removes the animation transitions controlling the given animation instance.
            </summary>
            <param name="animationInstance">The animation instance.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.Add(DigitalRune.Animation.Transitions.AnimationTransition)">
            <summary>
            Adds the specified animation transition.
            </summary>
            <param name="transition">The animation transition.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.Remove(DigitalRune.Animation.Transitions.AnimationTransition)">
            <summary>
            Removes the specified animation transition.
            </summary>
            <param name="transition">The animation transition.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)">
            <summary>
            Updates all animations.
            </summary>
            <param name="deltaTime">
            The elapsed time since the last update. (If <paramref name="deltaTime"/> is negative,
            this method does nothing. It does not reverse the animations.)
            </param>
            <remarks>
            <para>
            The method <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/> advances all animations and computes the animation values.
            Note however, that the new animation values are not yet applied to the animated properties. 
            <see cref="M:DigitalRune.Animation.AnimationManager.ApplyAnimations"/> needs to be called to write the new animation values!
            </para>
            <para>
            Similarly, completion events (see <see cref="E:DigitalRune.Animation.AnimationInstance.Completed"/>) are recorded, 
            but are not yet triggered. Completion events are also triggered in 
            <see cref="M:DigitalRune.Animation.AnimationManager.ApplyAnimations"/>!
            </para>
            </remarks>
            <seealso cref="M:DigitalRune.Animation.AnimationManager.ApplyAnimations"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.UpdateAnimations(System.TimeSpan)">
            <summary>
            Advances the animation instances.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.UpdateAnimation(System.Int32)">
            <summary>
            Advances the animation instance with the given index.
            </summary>
            <param name="i">The index.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.UpdateTransitions(System.TimeSpan)">
            <summary>
            Updates the animation transitions.
            </summary>
            <param name="deltaTime">The elapsed time since the last update.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.CheckAnimations">
            <summary>
            Removes all animation instances which have stopped.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.IncrementalCleanup">
            <summary>
            Incremental cleanup: Removes animation instances if their targets have been garbage 
            collected.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.UpdateCompositionChains">
            <summary>
            Updates the animation composition chains.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.UpdateCompositionChain(System.Int32)">
            <summary>
            Updates the composition chain with the given index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.ApplyAnimations">
            <summary>
            Applies the new animation values to all animated properties.
            </summary>
            <inheritdoc cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/>
            <seealso cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.UpdateAndApplyAnimation(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
            <overloads>
            <summary>
            Immediately evaluates the specified animations and applies the new animation values.
            </summary>
            </overloads>
            
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.UpdateAndApplyAnimation(DigitalRune.Animation.IAnimatableObject)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.UpdateAndApplyAnimation(System.Collections.Generic.List{DigitalRune.Animation.IAnimatableProperty})">
            <summary>
            Immediately evaluates the animations of the given properties and applies the new animation 
            values.
            </summary>
            <param name="properties">The properties that need to be updated.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.UpdateAndApplyAnimation(DigitalRune.Animation.IAnimatableProperty)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationManager.GetCompositionChain``1(DigitalRune.Animation.IAnimatableProperty{``0},DigitalRune.Animation.Traits.IAnimationValueTraits{``0},System.Boolean)">
            <summary>
            Gets the animation composition chain of the given animatable property and type.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">
            The animatable property. Can be <see langword="null"/>.
            </param>
            <param name="traits">
            The animation value traits.
            </param>
            <param name="createIfNotFound">
            If set to <see langword="true"/> a new animation composition chain will be created 
            automatically when necessary. (<paramref name="property"/> must not be 
            <see langword="null"/>.)
            </param>
            <returns>
            The <see cref="T:DigitalRune.Animation.IAnimationCompositionChain"/> of the animated property.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="createIfNotFound"/> is set, but <paramref name="property"/> or 
            <paramref name="traits"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Animation.Animation`1">
            <summary>
            Provides a base implementation for animations.
            </summary>
            <typeparam name="T">The type of the animation value.</typeparam>
            <remarks>
            <para>
            <see cref="T:DigitalRune.Animation.Animation`1"/> provides a base implementation which is extended by the different
            types of animations in DigitalRune Animation. The base class implements the interfaces 
            <see cref="T:DigitalRune.Animation.ITimeline"/> and <see cref="T:DigitalRune.Animation.IAnimation`1"/>, which means that an 
            <see cref="T:DigitalRune.Animation.Animation`1"/> is both a timeline and an animation. The timeline part defines when
            an animation starts and how long it is active. (When the animation system is playing an 
            animation it is actually playing back a timeline.) The animation part defines the actual 
            animation of a value.
            </para>
            <para>
            See interfaces <see cref="T:DigitalRune.Animation.ITimeline"/> and <see cref="T:DigitalRune.Animation.IAnimation`1"/> to read more about 
            timelines and animations.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Animation`1.FillBehavior">
            <summary>
            Gets or sets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
            <value>
            A value that specifies how the animation behaves when it reaches the end of its duration.
            The default value is <see cref="F:DigitalRune.Animation.FillBehavior.Hold"/>.
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.ITimeline.FillBehavior"/>
        </member>
        <member name="P:DigitalRune.Animation.Animation`1.IsAdditive">
            <summary>
            Gets or sets a value indicating whether the output of the animation is added to the current
            value of the property that is being animated.
            </summary>
            <value>
            <see langword="true"/> if this animation is additive; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Animation`1.TargetObject">
            <summary>
            Gets or sets the object to which the animation is applied by default.
            </summary>
            <value>
            The object to which the animation is applied by default. The default value is 
            <see langword="null"/>.
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.ITimeline.TargetObject"/>
        </member>
        <member name="P:DigitalRune.Animation.Animation`1.TargetProperty">
            <summary>
            Gets or sets the property to which the animation is applied by default.
            </summary>
            <value>
            The property to which the animation is applied by default. The default value is 
            <see langword="null"/>
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.IAnimation.TargetProperty"/>
        </member>
        <member name="P:DigitalRune.Animation.Animation`1.Traits">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Animation`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Animation`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Animation`1.CreateInstance">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Animation`1.CreateBlendAnimation">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Animation`1.GetAnimationTime(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Animation`1.GetState(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Animation`1.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Animation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Animation`1.GetValueCore(System.TimeSpan,`0@,`0@,`0@)">
            <summary>
            Evaluates the animation function at the specified animation time.
            </summary>
            <param name="time">The animation time.</param>
            <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
            <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
            <param name="result">
            Out: The value of the animation at the given time.
            </param>
            <remarks>
            <para>
            The method <see cref="M:DigitalRune.Animation.Animation`1.GetValueCore(System.TimeSpan,`0@,`0@,`0@)"/> implements the <i>animation function</i>. It is called
            automatically by <see cref="M:DigitalRune.Animation.Animation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)"/> to compute the current animation value.
            </para>
            <para>
            Note that the parameters are passed by reference. <paramref name="defaultSource"/> and
            <paramref name="defaultTarget"/> are input parameters. The resulting animation value is 
            stored in <paramref name="result"/>. 
            </para>
            <para>
            The values of the <paramref name="defaultSource"/> and the <paramref name="defaultTarget"/>
            parameter depends on where the animation is used. If the animation is used to animate an 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> then the values depend on the position of the animation
            in the composition chain:
            <list type="bullet">
            <item>
            <description>
            If the animation has replaced another animation using 
            <see cref="M:DigitalRune.Animation.AnimationTransitions.SnapshotAndReplace"/>: <paramref name="defaultSource"/> is
            the last output value of the animation which was replaced and 
            <paramref name="defaultTarget"/> is the base value of the animated property.
            </description>
            </item>
            <item>
            <description>
            If the animation is the first in an animation composition chain: 
            <paramref name="defaultSource"/> and <paramref name="defaultTarget"/> are the base value of
            the animated property.
            </description>
            </item>
            <item>
            <description>
            If the animation is not the first in an animation composition chain: 
            <paramref name="defaultSource"/> is the output of the previous stage in the composition 
            chain and <paramref name="defaultTarget"/> is the base value of the animated property.
            </description>
            </item>
            </list>
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The sole purpose of this method is to evaluate the
            animation function at the given time. All other tasks (handling of additive animations,
            animation blending) are automatically handled by the base class.
            </para>
            <para>
            The parameter <paramref name="time"/> contains the <i>local time</i> of the animation. (Any 
            parameters such as <see cref="P:DigitalRune.Animation.TimelineClip.Delay"/>, <see cref="P:DigitalRune.Animation.TimelineClip.Duration"/>,
            <see cref="P:DigitalRune.Animation.TimelineClip.Speed"/>, or <see cref="P:DigitalRune.Animation.TimelineClip.LoopBehavior"/> have already 
            been applied.)
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.AnimationState">
            <summary>
            Defines the state of an animation.
            </summary>
            <remarks>
            <para>
            Animations are positioned on a timeline. The current state of an animation depends on the 
            current time on the timeline. The method <see cref="M:DigitalRune.Animation.ITimeline.GetState(System.TimeSpan)"/> can be used to query
            the current state for a given time value. 
            </para>
            <para>
            <see cref="F:DigitalRune.Animation.AnimationState.Playing"/> indicates that the animation is active and produces animation values.
            </para>
            <para>
            The animation state is <see cref="F:DigitalRune.Animation.AnimationState.Delayed"/> when the timeline is active, but the start of the
            animation has been delayed. The types <see cref="T:DigitalRune.Animation.TimelineClip"/> and 
            <see cref="T:DigitalRune.Animation.AnimationClip`1"/> can be used to delay the start of an animation. The animation
            state is <see cref="F:DigitalRune.Animation.AnimationState.Delayed"/> as long as the current time is less than the 
            <see cref="P:DigitalRune.Animation.TimelineClip.Delay"/>. The animation does not produce an output in this state.
            </para>
            <para>
            When the time value reaches the end of the duration the state becomes either 
            <see cref="F:DigitalRune.Animation.AnimationState.Filling"/> when the <see cref="P:DigitalRune.Animation.ITimeline.FillBehavior"/> is set to 
            <see cref="F:DigitalRune.Animation.FillBehavior.Hold"/> or <see cref="F:DigitalRune.Animation.AnimationState.Stopped"/> when the fill behavior is set to 
            <see cref="F:DigitalRune.Animation.FillBehavior.Stop"/>.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Animation.AnimationState.Stopped">
            <summary>
            The animation is halted and does not return any values.
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.AnimationState.Delayed">
            <summary>
            The start of the animation has been delayed and animation does not yet return any values. 
            (Animations can be delayed using the types <see cref="T:DigitalRune.Animation.TimelineClip"/> or 
            <see cref="T:DigitalRune.Animation.AnimationClip`1"/>.)
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.AnimationState.Playing">
            <summary>
            The animation is active and produces an animation value.
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.AnimationState.Filling">
            <summary>
            The duration of the animation is exceeded and the animation returns the last animation 
            value.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.ColorAnimation">
            <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Color"/> value by applying an animation to each component of the color.
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animations.dll.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.ColorAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.ColorAnimation.R">
            <summary>
            Gets or sets the animation of the red component.
            </summary>
            <value>The animation of the red component.</value>
        </member>
        <member name="P:DigitalRune.Animation.ColorAnimation.G">
            <summary>
            Gets or sets the animation of the green component.
            </summary>
            <value>The animation of the green component.</value>
        </member>
        <member name="P:DigitalRune.Animation.ColorAnimation.B">
            <summary>
            Gets or sets the animation of the blue component.
            </summary>
            <value>The animation of the blue component.</value>
        </member>
        <member name="P:DigitalRune.Animation.ColorAnimation.A">
            <summary>
            Gets or sets the animation of the alpha component.
            </summary>
            <value>The animation of the alpha component.</value>
        </member>
        <member name="M:DigitalRune.Animation.ColorAnimation.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.ColorAnimation"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.ColorAnimation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.ColorAnimation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.ColorAnimation"/> class with the specified
            animations.
            </summary>
            <param name="r">The animation of the red component.</param>
            <param name="g">The animation of the green component.</param>
            <param name="b">The animation of the blue component.</param>
            <param name="a">The animation of the alpha component.</param>
        </member>
        <member name="M:DigitalRune.Animation.ColorAnimation.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.ColorAnimation.GetValueCore(System.TimeSpan,Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.QuaternionAnimation">
            <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Quaternion"/> value by applying an animation to each component of the
            quaternion. (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animations.dll.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionAnimation.X">
            <summary>
            Gets or sets the animation of the x component.
            </summary>
            <value>The animation of the x component.</value>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionAnimation.Y">
            <summary>
            Gets or sets the animation of the y component.
            </summary>
            <value>The animation of the y component.</value>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionAnimation.Z">
            <summary>
            Gets or sets the animation of the z component.
            </summary>
            <value>The animation of the z component.</value>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionAnimation.W">
            <summary>
            Gets or sets the animation of the w component.
            </summary>
            <value>The animation of the w component.</value>
        </member>
        <member name="M:DigitalRune.Animation.QuaternionAnimation.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionAnimation"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionAnimation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.QuaternionAnimation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionAnimation"/> class with the 
            specified animations.
            </summary>
            <param name="x">The animation of the x component.</param>
            <param name="y">The animation of the y component.</param>
            <param name="z">The animation of the z component.</param>
            <param name="w">The animation of the w component.</param>
        </member>
        <member name="M:DigitalRune.Animation.QuaternionAnimation.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.QuaternionAnimation.GetValueCore(System.TimeSpan,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.QuaternionFAnimation">
            <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> value by applying an animation to each component of the
            quaternion.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionFAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionFAnimation.W">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.W"/> component.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.W"/> component.</value>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionFAnimation.X">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.X"/> component.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.X"/> component.</value>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionFAnimation.Y">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.Y"/> component.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.Y"/> component.</value>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionFAnimation.Z">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.Z"/> component.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.Z"/> component.</value>
        </member>
        <member name="M:DigitalRune.Animation.QuaternionFAnimation.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionFAnimation"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionFAnimation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.QuaternionFAnimation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.QuaternionFAnimation"/> class with the 
            specified animations.
            </summary>
            <param name="w">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.W"/> component.</param>
            <param name="x">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.X"/> component.</param>
            <param name="y">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.Y"/> component.</param>
            <param name="z">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.Z"/> component.</param>
        </member>
        <member name="M:DigitalRune.Animation.QuaternionFAnimation.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.QuaternionFAnimation.GetValueCore(System.TimeSpan,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.SrtAnimation">
            <summary>
            Animates an <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> by applying an animation to each component (scale,
            rotate, translate) of the transform.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.SrtAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.SrtAnimation.Scale">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Scale"/> value.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Scale"/> value.</value>
        </member>
        <member name="P:DigitalRune.Animation.SrtAnimation.Rotation">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Rotation"/> value.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Rotation"/> value.</value>
        </member>
        <member name="P:DigitalRune.Animation.SrtAnimation.Translation">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Translation"/> value.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Translation"/> value.</value>
        </member>
        <member name="M:DigitalRune.Animation.SrtAnimation.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.SrtAnimation"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.SrtAnimation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.SrtAnimation.#ctor(DigitalRune.Animation.IAnimation{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Animation.IAnimation{DigitalRune.Mathematics.Algebra.QuaternionF},DigitalRune.Animation.IAnimation{DigitalRune.Mathematics.Algebra.Vector3F})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.SrtAnimation"/> class with the 
            specified animations.
            </summary>
            <param name="scale">The animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Scale"/> component.</param>
            <param name="rotation">The animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Rotation"/> component.</param>
            <param name="translation">The animation of the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Translation"/> component.</param>
        </member>
        <member name="M:DigitalRune.Animation.SrtAnimation.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.SrtAnimation.GetValueCore(System.TimeSpan,DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector2Animation">
            <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Vector2"/> value by applying an animation to each component of the
            vector. (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animations.dll.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Vector2Animation.Traits">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector2Animation.X">
            <summary>
            Gets or sets the animation of the x component.
            </summary>
            <value>The animation of the x component.</value>
        </member>
        <member name="P:DigitalRune.Animation.Vector2Animation.Y">
            <summary>
            Gets or sets the animation of the y component.
            </summary>
            <value>The animation of the y component.</value>
        </member>
        <member name="M:DigitalRune.Animation.Vector2Animation.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2Animation"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2Animation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Vector2Animation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2Animation"/> class with the specified
            animations.
            </summary>
            <param name="x">The animation of the x component.</param>
            <param name="y">The animation of the y component.</param>
        </member>
        <member name="M:DigitalRune.Animation.Vector2Animation.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Vector2Animation.GetValueCore(System.TimeSpan,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector2FAnimation">
            <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> value by applying an animation to each component of the
            vector.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.Vector2FAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector2FAnimation.X">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector2F.X"/> component.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector2F.X"/> component.</value>
        </member>
        <member name="P:DigitalRune.Animation.Vector2FAnimation.Y">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector2F.Y"/> component.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector2F.Y"/> component.</value>
        </member>
        <member name="M:DigitalRune.Animation.Vector2FAnimation.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2FAnimation"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2FAnimation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Vector2FAnimation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector2FAnimation"/> class with the specified
            animations.
            </summary>
            <param name="x">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector2F.X"/> component.</param>
            <param name="y">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector2F.Y"/> component.</param>
        </member>
        <member name="M:DigitalRune.Animation.Vector2FAnimation.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Vector2FAnimation.GetValueCore(System.TimeSpan,DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector3Animation">
            <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Vector3"/> value by applying an animation to each component of the
            vector. (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animations.dll.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Vector3Animation.Traits">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector3Animation.X">
            <summary>
            Gets or sets the animation of the x component.
            </summary>
            <value>The animation of the x component.</value>
        </member>
        <member name="P:DigitalRune.Animation.Vector3Animation.Y">
            <summary>
            Gets or sets the animation of the y component.
            </summary>
            <value>The animation of the y component.</value>
        </member>
        <member name="P:DigitalRune.Animation.Vector3Animation.Z">
            <summary>
            Gets or sets the animation of the z component.
            </summary>
            <value>The animation of the z component.</value>
        </member>
        <member name="M:DigitalRune.Animation.Vector3Animation.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3Animation"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3Animation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Vector3Animation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3Animation"/> class with the specified
            animations.
            </summary>
            <param name="x">The animation of the x component.</param>
            <param name="y">The animation of the y component.</param>
            <param name="z">The animation of the z component.</param>
        </member>
        <member name="M:DigitalRune.Animation.Vector3Animation.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Vector3Animation.GetValueCore(System.TimeSpan,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector3FAnimation">
            <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> value by applying an animation to each component of the
            vector.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.Vector3FAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector3FAnimation.X">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.X"/> component.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.X"/> component.</value>
        </member>
        <member name="P:DigitalRune.Animation.Vector3FAnimation.Y">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Y"/> component.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Y"/> component.</value>
        </member>
        <member name="P:DigitalRune.Animation.Vector3FAnimation.Z">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Z"/> component.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Z"/> component.</value>
        </member>
        <member name="M:DigitalRune.Animation.Vector3FAnimation.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3FAnimation"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3FAnimation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Vector3FAnimation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector3FAnimation"/> class with the specified
            animations.
            </summary>
            <param name="x">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.X"/> component.</param>
            <param name="y">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Y"/> component.</param>
            <param name="z">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Z"/> component.</param>
        </member>
        <member name="M:DigitalRune.Animation.Vector3FAnimation.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Vector3FAnimation.GetValueCore(System.TimeSpan,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector4Animation">
            <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Vector4"/> value by applying an animation to each component of the
            vector. (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animations.dll.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Vector4Animation.Traits">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector4Animation.X">
            <summary>
            Gets or sets the animation of the x component.
            </summary>
            <value>The animation of the x component.</value>
        </member>
        <member name="P:DigitalRune.Animation.Vector4Animation.Y">
            <summary>
            Gets or sets the animation of the y component.
            </summary>
            <value>The animation of the y component.</value>
        </member>
        <member name="P:DigitalRune.Animation.Vector4Animation.Z">
            <summary>
            Gets or sets the animation of the z component.
            </summary>
            <value>The animation of the z component.</value>
        </member>
        <member name="P:DigitalRune.Animation.Vector4Animation.W">
            <summary>
            Gets or sets the animation of the w component.
            </summary>
            <value>The animation of the w component.</value>
        </member>
        <member name="M:DigitalRune.Animation.Vector4Animation.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4Animation"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4Animation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Vector4Animation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4Animation"/> class with the specified
            animations.
            </summary>
            <param name="x">The animation of the x component.</param>
            <param name="y">The animation of the y component.</param>
            <param name="z">The animation of the z component.</param>
            <param name="w">The animation of the w component.</param>
        </member>
        <member name="M:DigitalRune.Animation.Vector4Animation.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Vector4Animation.GetValueCore(System.TimeSpan,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector4FAnimation">
            <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> value by applying an animation to each component of the
            vector.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.Vector4FAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector4FAnimation.X">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.X"/> component.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.X"/> component.</value>
        </member>
        <member name="P:DigitalRune.Animation.Vector4FAnimation.Y">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.Y"/> component.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.Y"/> component.</value>
        </member>
        <member name="P:DigitalRune.Animation.Vector4FAnimation.Z">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.Z"/> component.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.Z"/> component.</value>
        </member>
        <member name="P:DigitalRune.Animation.Vector4FAnimation.W">
            <summary>
            Gets or sets the animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.W"/> component.
            </summary>
            <value>The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.W"/> component.</value>
        </member>
        <member name="M:DigitalRune.Animation.Vector4FAnimation.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4FAnimation"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4FAnimation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Vector4FAnimation.#ctor(DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single},DigitalRune.Animation.IAnimation{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Vector4FAnimation"/> class with the specified
            animations.
            </summary>
            <param name="x">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.X"/> component.</param>
            <param name="y">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.Y"/> component.</param>
            <param name="z">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.Z"/> component.</param>
            <param name="w">The animation of the <see cref="F:DigitalRune.Mathematics.Algebra.Vector4F.W"/> component.</param>
        </member>
        <member name="M:DigitalRune.Animation.Vector4FAnimation.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Vector4FAnimation.GetValueCore(System.TimeSpan,DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.AnimationClip`1">
            <summary>
            Plays back a clip of another animation.
            </summary>
            <typeparam name="T">The type of the animation value.</typeparam>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Animation.AnimationClip`1"/> has the following purposes:
            <list type="number">
            <item>
            <description>
            <para>
            <strong>Select animation clip:</strong> The properties <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipStart"/> and 
            <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipEnd"/> can be used to select an interval from another animation (see property
            <see cref="P:DigitalRune.Animation.AnimationClip`1.Animation"/>). The properties are optional: <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipStart"/> and 
            <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipEnd"/> are <see langword="null"/> by default, which means that the entire
            animation is selected. It is also possible to set only <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipStart"/> or 
            <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipEnd"/> - in this case only one side of the original animation will be clipped.
            </para>
            <para>
            The property <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipOffset"/> defines a time offset which is applied when the 
            animation clip is played back. If the selected clip is, for example, 10 seconds long and 
            <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipOffset"/> is 5 seconds, then the playback of the clip will start in the middle.
            </para>
            </description>
            </item>
            <item>
            <description>
            <strong>Arrange animation clip on timeline:</strong> The properties <see cref="P:DigitalRune.Animation.AnimationClip`1.Delay"/>, 
            <see cref="P:DigitalRune.Animation.AnimationClip`1.Duration"/>, <see cref="P:DigitalRune.Animation.AnimationClip`1.Speed"/> can be used to position the selected animation 
            clip along the timeline: The start of the animation clip can be postponed using the property 
            <see cref="P:DigitalRune.Animation.AnimationClip`1.Delay"/>. The duration of the animation can be overridden using the property 
            <see cref="P:DigitalRune.Animation.AnimationClip`1.Duration"/>. Note that, when the duration exceeds the actual length of the clip 
            than the clip is automatically repeated using a certain loop behavior (see below). The 
            <see cref="P:DigitalRune.Animation.AnimationClip`1.Speed"/> defines the rate at which the animation clip is played back.
            </description>
            </item>
            </list>
            </para> 
            <para>
            <strong>Loop Behavior:</strong> The property <see cref="P:DigitalRune.Animation.AnimationClip`1.Duration"/> defines the length of the 
            playback. If the duration is not set (default value is <see langword="null"/>), the animation 
            clip plays exactly once (clip length = <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipEnd"/> - <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipStart"/>). If 
            the users sets a duration greater than the actual length of the clip, the clip is repeated 
            using a certain loop behavior. 
            </para>
            <para>
            The property <see cref="P:DigitalRune.Animation.AnimationClip`1.LoopBehavior"/> defines the behavior past the end of the animation 
            clip. The default loop behavior is <see cref="F:DigitalRune.Animation.LoopBehavior.Constant"/> 
            which means that the last value of the animation clip is returned for the rest of the 
            duration. The loop behavior <see cref="F:DigitalRune.Animation.LoopBehavior.Cycle"/> causes the 
            animation clip to be repeated from the start. The loop behavior 
            <see cref="F:DigitalRune.Animation.LoopBehavior.CycleOffset"/> is similar to 
            <see cref="F:DigitalRune.Animation.LoopBehavior.Cycle"/> except that it also applies an offset
            to the animation values in each new iteration. The loop behavior 
            <see cref="F:DigitalRune.Animation.LoopBehavior.Oscillate"/> (also known as 'auto-reverse' or
            'ping-pong') automatically repeats the animation clip in reverse order, so that the animation
            clip is played back and forth for the defined duration.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.Animation">
            <summary>
            Gets or sets the original animation from which a clip is played back.
            </summary>
            <value>The original animation from which a clip is played back.</value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.FillBehavior">
            <summary>
            Gets or sets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
            <value>
            A value that specifies how the animation behaves when it reaches the end of its duration.
            The default value is <see cref="F:DigitalRune.Animation.FillBehavior.Hold"/>.
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.TimelineClip.FillBehavior"/>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.IsAdditive">
            <summary>
            Gets or sets a value indicating whether the output of the animation is added to the current
            value of the property that is being animated.
            </summary>
            <value>
            <see langword="true"/> if this animation is additive; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.TargetObject">
            <summary>
            Gets or sets the object to which the animation is applied by default.
            </summary>
            <value>
            The object to which the animation is applied by default. The default value is 
            <see langword="null"/>.
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.ITimeline.TargetObject"/>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.TargetProperty">
            <summary>
            Gets or sets the property to which the animation is applied by default.
            </summary>
            <value>
            The property to which the animation is applied by default. The default value is 
            <see langword="null"/>
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.IAnimation.TargetProperty"/>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.ClipStart">
            <summary>
            Gets or sets the start time of the animation clip.
            </summary>
            <value>
            The time at which the original animation should be started. The default value is 
            <see langword="null"/>, which indicates that the original animation should be played from 
            the beginning.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipStart"/> and <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipEnd"/> define the interval of the original 
            animation that should be played.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.ClipEnd">
            <summary>
            Gets or sets the end time of the animation clip.
            </summary>
            <value>
            The time at which the original animation should be stopped. The default value is 
            <see langword="null"/>, which indicates that the original animation should be played until 
            it ends.
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.AnimationClip`1.ClipStart"/>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.ClipOffset">
            <summary>
            Gets the time offset that is applied to the selected animation clip.
            </summary>
            <value>
            A time offset that is applied to the animation clip. The default value is 0.
            </value>
            <remarks>
            <para>
            The property <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipOffset"/> defines a time offset which is applied when the
            animation clip is played back. If the selected clip is, for example, 10 seconds long and
            <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipOffset"/> is 5 seconds, then the playback of the clip will start in the
            middle.
            </para>
            <para>
            By default, the animation clip is played forward from <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipStart"/> to
            <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipEnd"/>. In this case the <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipOffset"/> is added to the
            <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipStart"/>.
            </para>
            <para>
            When <see cref="P:DigitalRune.Animation.AnimationClip`1.IsClipReversed"/> is set, the animation clip is played backward from
            <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipEnd"/> to <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipStart"/>. In this case the <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipOffset"/>
            is subtracted from <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipEnd"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.IsClipReversed">
            <summary>
            Gets or sets a value indicating whether to play the clip in reverse.
            </summary>
            <value>
            <see langword="true"/> if the clip is played in reverse; otherwise, 
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.Delay">
            <summary>
            Gets or sets the time at which the animation clip begins.
            </summary>
            <value>
            The time at which the animation should begin. The default value is 0.
            </value>
            <remarks>
            <para>
            This property can be used to delay the start of an animation. The delay time marks the time
            on the timeline when the animation clip starts. The <see cref="P:DigitalRune.Animation.AnimationClip`1.Speed"/> does not affect the 
            delay. For example, an animation clip with a delay of 3 seconds, a duration of 10 seconds 
            and a speed ratio of 2 will start after 3 seconds and run for 5 seconds with double speed.
            </para>
            <para>
            Note: The delay time can also be negative. For example, an animation with a delay time of 
            -2.5 seconds and a duration of 5 seconds will start right in the middle of the animation 
            clip.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.Duration">
            <summary>
            Gets or sets the duration for which the animation clip is played.
            </summary>
            <value>
            The duration for which the animation clip is played. The default value is 
            <see langword="null"/>, which indicates that the animation clip should be played once from 
            <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipStart"/> to <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipEnd"/>.
            </value>
            <remarks>
            <para>
            The properties <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipStart"/> and <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipEnd"/> define the duration of the
            animation clip. If the properties are not set then the original animation is played in its
            entirety. The property <see cref="P:DigitalRune.Animation.AnimationClip`1.Duration"/> can be set to override the duration of the 
            animation clip. If <see cref="P:DigitalRune.Animation.AnimationClip`1.Duration"/> is greater than the length of the animation clip, 
            the clip will be repeated using the defined loop behavior (see <see cref="P:DigitalRune.Animation.AnimationClip`1.LoopBehavior"/>).
            </para>
            <para>
            The effective duration depends on the <see cref="P:DigitalRune.Animation.AnimationClip`1.Speed"/>: For example, an animation clip 
            with a delay of 3 seconds, a duration of 10 seconds and a speed ratio of 2 will start after 
            3 seconds and run for 5 seconds with double speed.
            </para>
            <para>
            The default value is <see langword="null"/>, which indicates that the duration is 
            'automatic' or 'unknown'. In this case the animation clip plays exactly once. A duration of
            <see cref="F:System.TimeSpan.MaxValue"/> can be set to repeat the animation clip forever. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.Speed">
            <summary>
            Gets or sets the speed ratio at which the animation clip is played.
            </summary>
            <value>
            The rate at which time progresses for the animation clip. The value must be a finite number 
            greater than or equal to 0. The default value is 1.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or not a finite value.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.Traits">
            <inheritdoc cref="P:DigitalRune.Animation.IAnimation`1.Traits"/>
        </member>
        <member name="P:DigitalRune.Animation.AnimationClip`1.LoopBehavior">
            <summary>
            Gets or sets the behavior of the animation past the end of the animation clip.
            </summary>
            <value>
            The behavior of the animation past the end of the animation clip. The default value is 
            <see cref="F:DigitalRune.Animation.LoopBehavior.Constant"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Animation.AnimationClip`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationClip`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationClip`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationClip`1.#ctor(DigitalRune.Animation.IAnimation{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimationClip`1"/> class for the given
            animation.
            </summary>
            <param name="animation">The original animation.</param>
        </member>
        <member name="M:DigitalRune.Animation.AnimationClip`1.CreateInstance">
            <inheritdoc cref="M:DigitalRune.Animation.ITimeline.CreateInstance"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationClip`1.CreateBlendAnimation">
            <inheritdoc cref="M:DigitalRune.Animation.IAnimation.CreateBlendAnimation"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationClip`1.GetClip(System.TimeSpan@,System.TimeSpan@,System.TimeSpan@)">
            <summary>
            Gets the interval of the original animation that should be played.
            </summary>
            <param name="start">The start time of the animation clip.</param>
            <param name="end">The end time of the animation clip.</param>
            <param name="length">The length of the animation clip.</param>
            <exception cref="T:DigitalRune.Animation.InvalidAnimationException">
            Invalid animation clip. <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipStart"/> is greater than <see cref="P:DigitalRune.Animation.AnimationClip`1.ClipEnd"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationClip`1.GetState(System.TimeSpan)">
            <inheritdoc cref="M:DigitalRune.Animation.ITimeline.GetState(System.TimeSpan)"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationClip`1.GetAnimationTime(System.TimeSpan)">
            <inheritdoc cref="M:DigitalRune.Animation.ITimeline.GetAnimationTime(System.TimeSpan)"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationClip`1.GetTotalDuration">
            <inheritdoc cref="M:DigitalRune.Animation.ITimeline.GetTotalDuration"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationClip`1.GetValue(System.TimeSpan,`0@,`0@,`0@)">
            <inheritdoc cref="M:DigitalRune.Animation.IAnimation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)"/>
            <exception cref="T:DigitalRune.Animation.InvalidAnimationException">
            Cannot evaluate animation clip because the animation clip is empty.
            </exception>
        </member>
        <member name="T:DigitalRune.Animation.TimelineClip">
            <summary>
            Plays back a clip of another animation timeline.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Animation.TimelineClip"/> has the following purposes:
            <list type="number">
            <item>
            <description>
            <para>
            <strong>Select animation clip:</strong> The properties <see cref="P:DigitalRune.Animation.TimelineClip.ClipStart"/> and 
            <see cref="P:DigitalRune.Animation.TimelineClip.ClipEnd"/> can be used to select an interval from another animation timeline (see 
            property <see cref="P:DigitalRune.Animation.TimelineClip.Timeline"/>). The properties are optional: <see cref="P:DigitalRune.Animation.TimelineClip.ClipStart"/> and 
            <see cref="P:DigitalRune.Animation.TimelineClip.ClipEnd"/> are <see langword="null"/> by default, which means that the entire
            animation timeline is selected. It is also possible to set only <see cref="P:DigitalRune.Animation.TimelineClip.ClipStart"/> or 
            <see cref="P:DigitalRune.Animation.TimelineClip.ClipEnd"/> - in this case only one side of the original animation timeline will be
            clipped.
            </para>
            <para>
            The property <see cref="P:DigitalRune.Animation.TimelineClip.ClipOffset"/> defines a time offset which is applied when the 
            animation clip is played back. If the selected clip is, for example, 10 seconds long and 
            <see cref="P:DigitalRune.Animation.TimelineClip.ClipOffset"/> is 5 seconds, then the playback of the clip will start in the middle.
            </para>
            </description>
            </item>
            <item>
            <description>
            <strong>Arrange animation clip on timeline:</strong> The properties <see cref="P:DigitalRune.Animation.TimelineClip.Delay"/>, 
            <see cref="P:DigitalRune.Animation.TimelineClip.Duration"/>, <see cref="P:DigitalRune.Animation.TimelineClip.Speed"/> can be used to position the selected animation 
            clip along the timeline: The start of the animation clip can be postponed using the property 
            <see cref="P:DigitalRune.Animation.TimelineClip.Delay"/>. The duration of the animation can be overridden using the property 
            <see cref="P:DigitalRune.Animation.TimelineClip.Duration"/>. Note that, when the duration exceeds the actual length of the clip 
            than the clip is automatically repeated using a certain loop behavior (see below). The 
            <see cref="P:DigitalRune.Animation.TimelineClip.Speed"/> defines the rate at which the animation clip is played back.
            </description>
            </item>
            </list>
            </para> 
            <para>
            <strong>Loop Behavior:</strong> The property <see cref="P:DigitalRune.Animation.TimelineClip.Duration"/> defines the length of the 
            playback. If the duration is not set (default value is <see langword="null"/>), the animation 
            clip plays exactly once (clip length = <see cref="P:DigitalRune.Animation.TimelineClip.ClipEnd"/> - <see cref="P:DigitalRune.Animation.TimelineClip.ClipStart"/>). If 
            the users sets a duration greater than the actual length of the clip, the clip is repeated 
            using a certain loop behavior. 
            </para>
            <para>
            The property <see cref="P:DigitalRune.Animation.TimelineClip.LoopBehavior"/> defines the behavior past the end of the clip. The 
            default loop behavior is <see cref="F:DigitalRune.Animation.LoopBehavior.Constant"/> which means that the 
            last value of the clip is returned for the rest of the duration. The loop behavior 
            <see cref="F:DigitalRune.Animation.LoopBehavior.Cycle"/> causes the clip to be repeated from the start. The 
            loop behavior <see cref="F:DigitalRune.Animation.LoopBehavior.Oscillate"/> (also known as 'auto-reverse' or 
            'ping-pong') automatically repeats the clip in reverse order, so that the clip is played back 
            and forth for the defined duration.
            </para>
            <para>
            Note that the loop behavior <see cref="F:DigitalRune.Animation.LoopBehavior.CycleOffset"/> is not supported.
            This behavior is only available for animations of a certain type (use
            <see cref="T:DigitalRune.Animation.AnimationClip`1"/> instead).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.TimelineClip.Timeline">
            <summary>
            Gets or sets the original animation timeline from which a clip is played back.
            </summary>
            <value>The original animation timeline from which a clip played back.</value>
        </member>
        <member name="P:DigitalRune.Animation.TimelineClip.FillBehavior">
            <summary>
            Gets or sets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
            <value>
            A value that specifies how the animation behaves when it reaches the end of its duration.
            The default value is <see cref="F:DigitalRune.Animation.FillBehavior.Hold"/>.
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.ITimeline.FillBehavior"/>
        </member>
        <member name="P:DigitalRune.Animation.TimelineClip.TargetObject">
            <summary>
            Gets or sets the object to which the animation is applied by default.
            </summary>
            <value>
            The object to which the animation is applied by default. The default value is 
            <see langword="null"/>.
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.ITimeline.TargetObject"/>
        </member>
        <member name="P:DigitalRune.Animation.TimelineClip.ClipStart">
            <summary>
            Gets or sets the start time of the animation clip.
            </summary>
            <value>
            The time at which the original timeline should be started. The default value is 
            <see langword="null"/>, which indicates that the original timeline should be played from the
            beginning.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Animation.TimelineClip.ClipStart"/> and <see cref="P:DigitalRune.Animation.TimelineClip.ClipEnd"/> define the interval of the original 
            timeline that should be played.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.TimelineClip.ClipEnd">
            <summary>
            Gets or sets the end time of the animation clip.
            </summary>
            <value>
            The time at which the original timeline should be stopped. The default value is 
            <see langword="null"/>, which indicates that the original timeline should be played until it
            ends.
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.TimelineClip.ClipStart"/>
        </member>
        <member name="P:DigitalRune.Animation.TimelineClip.ClipOffset">
            <summary>
            Gets the time offset that is applied to the selected animation clip.
            </summary>
            <value>
            A time offset that is applied to the animation clip. The default value is 0.
            </value>
            <remarks>
            <para>
            The property <see cref="P:DigitalRune.Animation.TimelineClip.ClipOffset"/> defines a time offset which is applied when the
            animation clip is played back. If the selected clip is, for example, 10 seconds long and
            <see cref="P:DigitalRune.Animation.TimelineClip.ClipOffset"/> is 5 seconds, then the playback of the clip will start in the
            middle.
            </para>
            <para>
            By default, the animation clip is played forward from <see cref="P:DigitalRune.Animation.TimelineClip.ClipStart"/> to
            <see cref="P:DigitalRune.Animation.TimelineClip.ClipEnd"/>. In this case the <see cref="P:DigitalRune.Animation.TimelineClip.ClipOffset"/> is added to the
            <see cref="P:DigitalRune.Animation.TimelineClip.ClipStart"/>.
            </para>
            <para>
            When <see cref="P:DigitalRune.Animation.TimelineClip.IsClipReversed"/> is set, the animation clip is played backward from
            <see cref="P:DigitalRune.Animation.TimelineClip.ClipEnd"/> to <see cref="P:DigitalRune.Animation.TimelineClip.ClipStart"/>. In this case the <see cref="P:DigitalRune.Animation.TimelineClip.ClipOffset"/>
            is subtracted from <see cref="P:DigitalRune.Animation.TimelineClip.ClipEnd"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.TimelineClip.IsClipReversed">
            <summary>
            Gets or sets a value indicating whether to play the clip in reverse.
            </summary>
            <value>
            <see langword="true"/> if the clip is played in reverse; otherwise, 
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.TimelineClip.Delay">
            <summary>
            Gets or sets the time at which the animation clip begins.
            </summary>
            <value>
            The time at which the animation should begin. The default value is 0.
            </value>
            <remarks>
            <para>
            This property can be used to delay the start of an animation. The delay time marks the time
            on the timeline when the animation clip starts. The <see cref="P:DigitalRune.Animation.TimelineClip.Speed"/> does not affect the 
            delay. For example, an animation clip with a delay of 3 seconds, a duration of 10 seconds 
            and a speed ratio of 2 will start after 3 seconds and run for 5 seconds with double speed.
            </para>
            <para>
            Note: The delay time can also be negative. For example, an animation with a delay time of 
            -2.5 seconds and a duration of 5 seconds will start right in the middle of the animation 
            clip.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.TimelineClip.Duration">
            <summary>
            Gets or sets the duration for which the animation clip is played.
            </summary>
            <value>
            The duration for which the animation clip is played. The default value is 
            <see langword="null"/>, which indicates that the animation clip should be played once from 
            <see cref="P:DigitalRune.Animation.TimelineClip.ClipStart"/> to <see cref="P:DigitalRune.Animation.TimelineClip.ClipEnd"/>.
            </value>
            <remarks>
            <para>
            The properties <see cref="P:DigitalRune.Animation.TimelineClip.ClipStart"/> and <see cref="P:DigitalRune.Animation.TimelineClip.ClipEnd"/> define the duration of the
            animation clip. If the properties are not set then the original animation is played in its
            entirety. The property <see cref="P:DigitalRune.Animation.TimelineClip.Duration"/> can be set to override the duration of the 
            animation clip. If <see cref="P:DigitalRune.Animation.TimelineClip.Duration"/> is greater than the length of the animation clip, 
            the clip will be repeated using the defined loop behavior (see <see cref="P:DigitalRune.Animation.TimelineClip.LoopBehavior"/>).
            </para>
            <para>
            The effective duration depends on the <see cref="P:DigitalRune.Animation.TimelineClip.Speed"/>: For example, an animation clip 
            with a delay of 3 seconds, a duration of 10 seconds and a speed ratio of 2 will start after 
            3 seconds and run for 5 seconds with double speed.
            </para>
            <para>
            The default value is <see langword="null"/>, which indicates that the duration is 
            'automatic' or 'unknown'. In this case the animation clip plays exactly once. A duration of
            <see cref="F:System.TimeSpan.MaxValue"/> can be set to repeat the animation clip forever. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.TimelineClip.Speed">
            <summary>
            Gets or sets the speed ratio at which the animation clip is played.
            </summary>
            <value>
            The rate at which time progresses for the animation clip. The value must be a finite number 
            greater than or equal to 0. The default value is 1.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or not a finite value.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.TimelineClip.LoopBehavior">
            <summary>
            Gets or sets the behavior of the animation past the end of the animation clip.
            </summary>
            <value>
            The behavior of the animation past the end of the animation clip. The default value is 
            <see cref="F:DigitalRune.Animation.LoopBehavior.Constant"/>.
            </value>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is set to <see cref="F:DigitalRune.Animation.LoopBehavior.CycleOffset"/>. This 
            loop behavior is not supported by a <see cref="T:DigitalRune.Animation.TimelineClip"/>. (Check out 
            <see cref="T:DigitalRune.Animation.AnimationClip`1"/> instead.)
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.TimelineClip.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.TimelineClip"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.TimelineClip"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.TimelineClip.#ctor(DigitalRune.Animation.ITimeline)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.TimelineClip"/> class for the given timeline.
            </summary>
            <param name="timeline">The timeline.</param>
        </member>
        <member name="M:DigitalRune.Animation.TimelineClip.CreateInstance">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.TimelineClip.GetClip(System.TimeSpan@,System.TimeSpan@,System.TimeSpan@)">
            <summary>
            Gets the interval of the original timeline that should be played.
            </summary>
            <param name="start">The start time of the animation clip.</param>
            <param name="end">The end time of the animation clip.</param>
            <param name="length">The length of the animation clip.</param>
            <exception cref="T:DigitalRune.Animation.InvalidAnimationException">
            Invalid timeline clip. <see cref="P:DigitalRune.Animation.TimelineClip.ClipStart"/> is greater than <see cref="P:DigitalRune.Animation.TimelineClip.ClipEnd"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.TimelineClip.GetState(System.TimeSpan)">
            <inheritdoc cref="M:DigitalRune.Animation.ITimeline.GetState(System.TimeSpan)"/>
        </member>
        <member name="M:DigitalRune.Animation.TimelineClip.GetAnimationTime(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.TimelineClip.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.TimelineGroup">
            <summary>
            Organizes a group of animations which can be played simultaneously.
            </summary>
            <remarks>
            <para>
            Different animations can be grouped together to be executed simultaneously. The group of 
            animations is sometimes called "storyboard".
            </para>
            <para>
            <para>
            <strong>Nested Timelines:</strong> Timeline groups can be nested. That means a 
            <see cref="T:DigitalRune.Animation.TimelineGroup"/> can contain other <see cref="T:DigitalRune.Animation.TimelineGroup"/>s.
            </para>
            <strong>Important:</strong> Animations must not be added or removed while the timeline group 
            is playing!
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.TimelineGroup.FillBehavior">
            <summary>
            Gets or sets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
            <value>
            A value that specifies how the animation behaves when it reaches the end of its duration.
            The default value is <see cref="F:DigitalRune.Animation.FillBehavior.Hold"/>.
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.ITimeline.FillBehavior"/>
        </member>
        <member name="P:DigitalRune.Animation.TimelineGroup.TargetObject">
            <summary>
            Gets or sets the object to which the animation is applied by default.
            </summary>
            <value>
            The object to which the animation is applied by default. The default value is 
            <see langword="null"/>.
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.ITimeline.TargetObject"/>
        </member>
        <member name="P:DigitalRune.Animation.TimelineGroup.Count">
            <summary>
            Gets the number of timelines contained in the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.
            </summary>
            <value>The number of timelines contained in the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.</value>
        </member>
        <member name="P:DigitalRune.Animation.TimelineGroup.System#Collections#Generic#ICollection{DigitalRune#Animation#ITimeline}#IsReadOnly">
            <summary>
            Gets a value indicating whether this collection is read-only.
            </summary>
            <value>
            <see langword="true"/> if this collection is read-only; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.TimelineGroup.Item(System.Int32)">
            <summary>
            Gets or sets the timeline at the specified index.
            </summary>
            <value>The timeline at the specified index.</value>
            <param name="index">The zero-based index of the timeline to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Animation.TimelineGroup.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>. The <see cref="T:DigitalRune.Animation.TimelineGroup"/> does not
            allow <see langword="null"/> values.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.TimelineGroup"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.CreateInstance">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.GetAnimationTime(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.GetState(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.System#Collections#Generic#IEnumerable{DigitalRune#Animation#ITimeline}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Animation.TimelineGroup"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Animation.TimelineGroup"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.Add(DigitalRune.Animation.ITimeline)">
            <summary>
            Adds a timeline to the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.
            </summary>
            <param name="timeline">
            The timeline to add to the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeline"/> is <see langword="null"/>. The <see cref="T:DigitalRune.Animation.TimelineGroup"/> does 
            not allow <see langword="null"/> values.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.Clear">
            <summary>
            Removes all timelines from the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.Contains(DigitalRune.Animation.ITimeline)">
            <summary>
            Determines whether the <see cref="T:DigitalRune.Animation.TimelineGroup"/> contains a specific timeline.
            </summary>
            <param name="timeline">The timeline to locate in the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="timeline"/> is found in the 
            <see cref="T:DigitalRune.Animation.TimelineGroup"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.System#Collections#Generic#ICollection{DigitalRune#Animation#ITimeline}#CopyTo(DigitalRune.Animation.ITimeline[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:DigitalRune.Animation.TimelineGroup"/> to an <see cref="T:System.Array"/>, starting 
            at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Animation.TimelineGroup"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of elements in the 
            source <see cref="T:DigitalRune.Animation.TimelineGroup"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.Remove(DigitalRune.Animation.ITimeline)">
            <summary>
            Removes the first occurrence of a specific timeline from the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.
            </summary>
            <param name="timeline">The timeline to remove from the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="timeline"/> was successfully removed from the 
            <see cref="T:DigitalRune.Animation.TimelineGroup"/>; otherwise, <see langword="false"/>. This method also returns 
            <see langword="false"/> if <paramref name="timeline"/> is not found in the original 
            <see cref="T:DigitalRune.Animation.TimelineGroup"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.IndexOf(DigitalRune.Animation.ITimeline)">
            <summary>
            Determines the index of a specific timeline in the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.
            </summary>
            <param name="timeline">The timeline to locate in the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.</param>
            <returns>
            The index of <paramref name="timeline"/> if found in the <see cref="T:DigitalRune.Animation.TimelineGroup"/>; 
            otherwise, -1.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.Insert(System.Int32,DigitalRune.Animation.ITimeline)">
            <summary>
            Inserts a timeline into the <see cref="T:DigitalRune.Animation.TimelineGroup"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="timeline"/> should be inserted.
            </param>
            <param name="timeline">
            The timeline to insert into the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeline"/> is <see langword="null"/>. The <see cref="T:DigitalRune.Animation.TimelineGroup"/> does 
            not allow <see langword="null"/> values.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.TimelineGroup.RemoveAt(System.Int32)">
            <summary>
            Removes the timeline at the specified index from the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.
            </summary>
            <param name="index">The zero-based index of the timeline to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:DigitalRune.Animation.TimelineGroup"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Animation.AnimationCurve`4">
            <summary>
            Animates a value using an animation curve. (Base implementation.)
            </summary>
            <typeparam name="TValue">
            The type of the animation value.
            </typeparam>
            <typeparam name="TPoint">
            The type of the curve points, such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>, etc.
            </typeparam>
            <typeparam name="TCurveKey">
            The type of the curve key. (A type derived from <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2"/>.)
            </typeparam>
            <typeparam name="TCurve">
            The type of the curve. (A type derived from 
            <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3"/>.)
            </typeparam>
            <remarks>
            <para>
            The animation curve (see property 
            <see cref="P:DigitalRune.Animation.AnimationCurve`4.Curve"/>) contains several curve
            keys (also known as 'key frames') that define the change of the value. The curve parameter is
            the animation time. A curve key defines the current value at a certain point in time. It also
            defines the type of interpolation that is used for the segment between the current and the
            next curve key. All relevant types of spline-based interpolations can be used for the curve
            segments.
            </para>
            <para>
            <strong>Duration:</strong> An animation curve, by default, runs from the start (curve 
            parameter = 0) until the last curve key is reached. The parameter of the last curve key
            determines the natural duration of the animation. The optional properties 
            <see cref="P:DigitalRune.Animation.AnimationCurve`4.StartParameter"/> and <see cref="P:DigitalRune.Animation.AnimationCurve`4.EndParameter"/> can be used to explicitly define
            which part of the animation curve should be played.
            </para>
            <para>
            <strong>Loop Behavior:</strong> When the <see cref="P:DigitalRune.Animation.AnimationCurve`4.StartParameter"/> is less than the 
            parameter of the first curve key or <see cref="P:DigitalRune.Animation.AnimationCurve`4.EndParameter"/> is greater than the parameter 
            of the last curve key then the curve is automatically repeated using a certain loop behavior. 
            The loop behavior can be defined using the properties 
            <see cref="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PreLoop"/> and 
            <see cref="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PostLoop"/> of the <see cref="P:DigitalRune.Animation.AnimationCurve`4.Curve"/>.
            </para>
            <para>
            <strong>Important:</strong> The animation curve requires that the curve keys are sorted 
            ascending by their parameter (time value). The method 
            <see cref="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.Sort"/> can be called to sort all curve 
            keys.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationCurve`4.Curve">
            <summary>
            Gets or sets the curve that defines the animation.
            </summary>
            <value>The curve that defines the animation.</value>
        </member>
        <member name="P:DigitalRune.Animation.AnimationCurve`4.StartParameter">
            <summary>
            Gets or sets the start parameter.
            </summary>
            <value>The start parameter. The default value is <see cref="F:System.Single.NaN"/>.</value>
            <remarks>
            <para>
            An animation curve, by default, runs from the start (curve parameter = 0) until the last
            curve key is reached. The parameter of the last curve key determines the natural duration of
            the animation. The properties <see cref="P:DigitalRune.Animation.AnimationCurve`4.StartParameter"/> and <see cref="P:DigitalRune.Animation.AnimationCurve`4.EndParameter"/>
            can be used to explicitly define which part of the animation curve should be played.
            </para>
            <para>
            The <see cref="P:DigitalRune.Animation.AnimationCurve`4.StartParameter"/> can be set to <see cref="F:System.Single.NaN"/> to play the animation
            from the start (curve parameter = 0).
            </para>
            <para>
            The <see cref="P:DigitalRune.Animation.AnimationCurve`4.EndParameter"/> can be set to <see cref="F:System.Single.NaN"/> to automatically play 
            the animation until the last curve key is reached.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.AnimationCurve`4.EndParameter">
            <summary>
            Gets or sets the end parameter.
            </summary>
            <value>The end parameter. The default value is <see cref="F:System.Single.NaN"/>.</value>
            <inheritdoc cref="P:DigitalRune.Animation.AnimationCurve`4.StartParameter"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCurve`4.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:DigitalRune.Animation.AnimationCurve`4"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCurve`4.GetNaturalDuration">
            <summary>
            Determines the natural duration of the curve.
            </summary>
            <returns>The natural duration of the curve.</returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCurve`4.GetClip(System.TimeSpan@,System.TimeSpan@,System.TimeSpan@)">
            <summary>
            Gets the interval of the curve that should be played.
            </summary>
            <param name="start">The start parameter.</param>
            <param name="end">The end parameter.</param>
            <param name="length">The length of the interval.</param>
            <exception cref="T:DigitalRune.Animation.InvalidAnimationException">
            Invalid <see cref="P:DigitalRune.Animation.AnimationCurve`4.StartParameter"/> and <see cref="P:DigitalRune.Animation.AnimationCurve`4.EndParameter"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCurve`4.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCurve`4.GetValueCore(System.TimeSpan,`0@,`0@,`0@)">
            <inheritdoc cref="M:DigitalRune.Animation.Animation`1.GetValueCore(System.TimeSpan,`0@,`0@,`0@)"/>
        </member>
        <member name="M:DigitalRune.Animation.AnimationCurve`4.GetValueFromPoint(`1)">
            <summary>
            Gets the animation value from a given point on the curve.
            </summary>
            <param name="point">The point on the curve.</param>
            <returns>The animation value.</returns>
        </member>
        <member name="T:DigitalRune.Animation.Curve2FAnimation">
            <summary>
            Animates a <see cref="T:System.Single"/> value using a predefined animation curve.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Curve2FAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Curve2FAnimation.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Curve2FAnimation"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Curve2FAnimation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Curve2FAnimation.#ctor(DigitalRune.Mathematics.Interpolation.Curve2F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Curve2FAnimation"/> class with the given curve.
            </summary>
            <param name="curve">The curve.</param>
        </member>
        <member name="M:DigitalRune.Animation.Curve2FAnimation.GetValueFromPoint(DigitalRune.Mathematics.Algebra.Vector2F)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Path2FAnimation">
            <summary>
            Animates a point in 2D space that follows a predefined path.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Path2FAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Path2FAnimation.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Path2FAnimation"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Path2FAnimation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Path2FAnimation.#ctor(DigitalRune.Mathematics.Interpolation.Path2F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Path2FAnimation"/> class with the given path.
            </summary>
            <param name="path">The 2D path.</param>
        </member>
        <member name="T:DigitalRune.Animation.Path3FAnimation">
            <summary>
            Animates a point in 3D space that follows a predefined path.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Path3FAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Path3FAnimation.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Path3FAnimation"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Path3FAnimation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Path3FAnimation.#ctor(DigitalRune.Mathematics.Interpolation.Path3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Path3FAnimation"/> class with the given path.
            </summary>
            <param name="path">The 3D path.</param>
        </member>
        <member name="T:DigitalRune.Animation.PathAnimation`3">
            <summary>
            Animates a point that follows a predefined path. (Base implementation.)
            </summary>
            <typeparam name="TPoint">
            The type of the path points, such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>, etc.
            </typeparam>
            <typeparam name="TPathKey">
            The type of the path key. (A type derived from <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2"/>.)
            </typeparam>
            <typeparam name="TPath">
            The type of the path. (A type derived from 
            <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3"/>.)
            </typeparam>
            <remarks>
            <para>
            A path animation moves a point in space along a predefined path (see property 
            <see cref="P:DigitalRune.Animation.PathAnimation`3.Path"/>). The animation path is a spline-based curve consisting of several path 
            keys (also known as 'key frames'). A path key defines a point in space. The parameter of a 
            path key is the animation time - the time at which the point on the path is reached. A path
            key also defines the type of interpolation that is used for the segment between the current 
            and the next path key. All relevant types of spline-based interpolations can be used for the 
            path segments.
            </para>
            <para>
            <strong>Duration:</strong> A path animation, by default, runs from the start (parameter = 0)
            until the last path key is reached. The parameter of the last path key determines the natural
            duration of the animation. The optional properties <see cref="P:DigitalRune.Animation.PathAnimation`3.StartParameter"/> and 
            <see cref="P:DigitalRune.Animation.PathAnimation`3.EndParameter"/> can be used to explicitly define which part of the path should be 
            played.
            </para>
            <para>
            <strong>Loop Behavior:</strong> When the <see cref="P:DigitalRune.Animation.PathAnimation`3.StartParameter"/> is less than the 
            parameter of the first path key or <see cref="P:DigitalRune.Animation.PathAnimation`3.EndParameter"/> is greater than the parameter 
            of the last path key then the path is automatically repeated using a certain loop behavior. 
            The loop behavior can be defined using the properties 
            <see cref="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PreLoop"/> and 
            <see cref="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PostLoop"/> of the <see cref="P:DigitalRune.Animation.PathAnimation`3.Path"/>.
            </para>
            <para>
            <strong>Important:</strong> The path animation requires that the path keys are sorted 
            ascending by their parameter (time value). The method 
            <see cref="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.Sort"/> can be called to sort all path 
            keys.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.PathAnimation`3.Path">
            <summary>
            Gets or sets the animation path.
            </summary>
            <value>The animation path.</value>
        </member>
        <member name="P:DigitalRune.Animation.PathAnimation`3.ReturnsTangent">
            <summary>
            Gets or sets a value indicating whether the animation returns the tangent or the point on 
            the path.
            </summary>
            <value>
            If <see langword="true"/> the animation returns the tangent of the path. If 
            <see langword="false"/> the animation returns the point on the path. The default value is 
            <see langword="false"/>.
            </value>
            <remarks>
            A <see cref="P:DigitalRune.Animation.PathAnimation`3.Path"/> is a function that defines a point and a tangent at a given parameter. 
            The parameter in this case is the animation time. By default, the 
            <see cref="M:DigitalRune.Animation.Animation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)"/> method of the animation return points defined by the 
            path. When <see cref="P:DigitalRune.Animation.PathAnimation`3.ReturnsTangent"/> is set to <see langword="true"/> the animation 
            returns the tangents along the path instead of the points.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.PathAnimation`3.StartParameter">
            <summary>
            Gets or sets the start parameter.
            </summary>
            <value>The start parameter. The default value is <see cref="F:System.Single.NaN"/>.</value>
            <remarks>
            <para>
            A path animation, by default, runs from the start (parameter = 0) until the last path key is
            reached. The parameter of the last path key determines the natural duration of the 
            animation. The properties <see cref="P:DigitalRune.Animation.PathAnimation`3.StartParameter"/> and <see cref="P:DigitalRune.Animation.PathAnimation`3.EndParameter"/> can be
            used to explicitly define which part of the path should be played.
            </para>
            <para>
            The <see cref="P:DigitalRune.Animation.PathAnimation`3.StartParameter"/> can be set to <see cref="F:System.Single.NaN"/> to play the animation
            from the start (parameter = 0).
            </para>
            <para>
            The <see cref="P:DigitalRune.Animation.PathAnimation`3.EndParameter"/> can be set to <see cref="F:System.Single.NaN"/> to automatically play 
            the animation until the last path key is reached.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.PathAnimation`3.EndParameter">
            <summary>
            Gets or sets the end parameter.
            </summary>
            <value>The end parameter. The default value is <see cref="F:System.Single.NaN"/>.</value>
            <inheritdoc cref="P:DigitalRune.Animation.PathAnimation`3.StartParameter"/>
        </member>
        <member name="M:DigitalRune.Animation.PathAnimation`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.PathAnimation`3"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.PathAnimation`3.GetNaturalDuration">
            <summary>
            Determines the natural duration of the path.
            </summary>
            <returns>The natural duration of the path.</returns>
        </member>
        <member name="M:DigitalRune.Animation.PathAnimation`3.GetClip(System.TimeSpan@,System.TimeSpan@,System.TimeSpan@)">
            <summary>
            Gets the interval of the path that should be played.
            </summary>
            <param name="start">The start parameter.</param>
            <param name="end">The end parameter.</param>
            <param name="length">The length of the interval.</param>
            <exception cref="T:DigitalRune.Animation.InvalidAnimationException">
            Invalid <see cref="P:DigitalRune.Animation.PathAnimation`3.StartParameter"/> and <see cref="P:DigitalRune.Animation.PathAnimation`3.EndParameter"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.PathAnimation`3.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.PathAnimation`3.GetValueCore(System.TimeSpan,`0@,`0@,`0@)">
            <inheritdoc cref="M:DigitalRune.Animation.Animation`1.GetValueCore(System.TimeSpan,`0@,`0@,`0@)"/>
        </member>
        <member name="T:DigitalRune.Animation.FillBehavior">
            <summary>
            Defines the behavior of an animation when its duration is exceeded.
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.FillBehavior.Hold">
            <summary>
            When the animation reaches the end of its duration it holds its last animation value until
            it is stopped or reset. (In some animation systems this behavior is also called 'Freeze'.) 
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.FillBehavior.Stop">
            <summary>
            The animation is stopped when it reaches the end of its duration. (In some animation systems
            this behavior is called 'Remove'.)
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.ColorFromToByAnimation">
            <summary>
            Animates a <see langword="Color"/> value from/to/by a certain value.
            (Only available in the XNA-compatible build.)
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.ColorFromToByAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.FromToByAnimation`1">
            <summary>
            Animates a value from/to/by a certain value. (Base implementation.)
            </summary>
            <typeparam name="T">The type of the animation value.</typeparam>
            <remarks>
            <para>
            This type of animation changes a value from, to, or by a certain value depending on the 
            properties set:
            <list type="table">
            <listheader>
            <term>Properties Specified</term>
            <description>Resulting Behavior</description>
            </listheader>
            <item>
            <term>From and To</term>
            <description>
            The animation interpolates between the value specified by <see cref="P:DigitalRune.Animation.FromToByAnimation`1.From"/> and the value 
            specified by <see cref="P:DigitalRune.Animation.FromToByAnimation`1.To"/>.
            </description>
            </item>
            <item>
            <term>From and By</term>
            <description>
            The animation interpolates between the value specified by <see cref="P:DigitalRune.Animation.FromToByAnimation`1.From"/> and the sum of 
            the values specified by <see cref="P:DigitalRune.Animation.FromToByAnimation`1.From"/> and <see cref="P:DigitalRune.Animation.FromToByAnimation`1.By"/>.
            </description>
            </item>
            <item>
            <term>From</term>
            <description>
            <para>
            The animation interpolates between the value specified by <see cref="P:DigitalRune.Animation.FromToByAnimation`1.From"/> and the default 
            source value (see parameters of <see cref="M:DigitalRune.Animation.Animation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)"/>). 
            </para>
            <para>
            When an 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty"/> is animated this means that the <see cref="P:DigitalRune.Animation.FromToByAnimation`1.From"/> value is 
            animated towards the output of the previous animation. If there is no previous animation, then
            the <see cref="P:DigitalRune.Animation.FromToByAnimation`1.From"/> value is animated towards the base value of the property. 
            </para>
            </description>
            </item>
            <item>
            <term>To</term>
            <description>
            <para>
            The animation interpolates from the default source value (see parameters of 
            <see cref="M:DigitalRune.Animation.Animation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)"/>) to the value specified by <see cref="P:DigitalRune.Animation.FromToByAnimation`1.To"/>. 
            </para>
            <para>
            When an 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty"/> is animated this means that the output of the previous 
            animation is animated towards the <see cref="P:DigitalRune.Animation.FromToByAnimation`1.To"/> value. If there is no previous animation,
            then the base value of the property is animated towards the <see cref="P:DigitalRune.Animation.FromToByAnimation`1.To"/> value.
            </para>
            </description>
            </item>
            <item>
            <term>By</term>
            <description>
            <para>
            The animation interpolates from the default source value (see parameters of 
            <see cref="M:DigitalRune.Animation.Animation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)"/>) to the sum of this value plus the value specified by 
            <see cref="P:DigitalRune.Animation.FromToByAnimation`1.By"/>. 
            </para>
            <para>
            When an <see cref="T:DigitalRune.Animation.IAnimatableProperty"/> is animated this means that the output of the
            previous animation is animated towards the sum of the this value plus the <see cref="P:DigitalRune.Animation.FromToByAnimation`1.By"/> 
            value. If there is no previous animation, then the base value of the property is animated 
            towards the sum of the base value plus the <see cref="P:DigitalRune.Animation.FromToByAnimation`1.By"/> value.
            </para>
            </description>
            </item>
            <item>
            <term>No properties set</term>
            <description>
            <para>
            The animation interpolates between the default source value to the default target value (see
            parameters of <see cref="M:DigitalRune.Animation.Animation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)"/>). 
            </para>
            <para>
            When an <see cref="T:DigitalRune.Animation.IAnimatableProperty"/> is animated this means that the previous animation's
            output value is animated towards the base value of the property.
            </para>
            </description>
            </item>
            </list>
            </para>
            <para>
            If both <see cref="P:DigitalRune.Animation.FromToByAnimation`1.To"/> and <see cref="P:DigitalRune.Animation.FromToByAnimation`1.By"/> are specified, the <see cref="P:DigitalRune.Animation.FromToByAnimation`1.By"/> value will
            be ignored.
            </para>
            <para>
            The property <see cref="P:DigitalRune.Animation.FromToByAnimation`1.Duration"/> specifies the period of time over which the interpolation
            takes place.
            </para>
            <para>
            By default, the animation interpolates linearly between the specified values. An easing
            function (see property <see cref="P:DigitalRune.Animation.FromToByAnimation`1.EasingFunction"/>) can be applied to control the pace of the
            transition. 
            </para>
            <para>
            The property <see cref="P:DigitalRune.Animation.Animation`1.IsAdditive"/> can be set to add the output of the 
            animation to the property that is being animated. Note that the animation needs to be fully 
            defined to be additive. A from/to/by animation is fully defined if either <see cref="P:DigitalRune.Animation.FromToByAnimation`1.From"/> 
            and <see cref="P:DigitalRune.Animation.FromToByAnimation`1.To"/> or <see cref="P:DigitalRune.Animation.FromToByAnimation`1.From"/> and <see cref="P:DigitalRune.Animation.FromToByAnimation`1.By"/> are set. The result is 
            undefined if the animation is only partially defined (either the start or the final value is 
            missing)!
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.FromToByAnimation`1.Duration">
            <summary>
            Gets or sets the duration of the interpolation.
            </summary>
            <value>The duration of the interpolation. (The default value is 1 second.)
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.FromToByAnimation`1.From">
            <summary>
            Gets or sets the start value of the animation.
            </summary>
            <value>
            The start value of the animation. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.FromToByAnimation`1.To">
            <summary>
            Gets or sets the final value of the animation.
            </summary>
            <value>
            The final value of the animation. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.FromToByAnimation`1.By">
            <summary>
            Gets or sets the final value of the animation relative to the start value.
            </summary>
            <value>
            The final value of the animation relative to the start value. The default value is 
            <see langword="null"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.FromToByAnimation`1.EasingFunction">
            <summary>
            Gets or sets the easing function that controls the pace of the interpolation.
            </summary>
            <value>
            The easing function that controls the pace of the interpolation. The default value is 
            <see langword="null"/>, which means that a linear interpolation is applied.
            </value>
            <remarks>
            An <see cref="T:DigitalRune.Animation.Easing.IEasingFunction"/> can be applied to control the pace of the interpolation.
            For example, a <see cref="T:DigitalRune.Animation.Easing.CubicEase"/> can be used to start slow, but then accelerate 
            towards the target value. Special easing functions, such as the <see cref="T:DigitalRune.Animation.Easing.BounceEase"/> or 
            <see cref="T:DigitalRune.Animation.Easing.ElasticEase"/> can be used to create special animation effects, such as bounces
            or oscillations.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.FromToByAnimation`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.FromToByAnimation`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.FromToByAnimation`1.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.FromToByAnimation`1.GetValueCore(System.TimeSpan,`0@,`0@,`0@)">
            <inheritdoc cref="M:DigitalRune.Animation.Animation`1.GetValueCore(System.TimeSpan,`0@,`0@,`0@)"/>
        </member>
        <member name="T:DigitalRune.Animation.QuaternionFFromToByAnimation">
            <summary>
            Animates a <see langword="QuaternionF"/> value from/to/by a certain value.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionFFromToByAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.QuaternionFromToByAnimation">
            <summary>
            Animates a <see langword="Quaternion"/> value from/to/by a certain value.
            (Only available in the XNA-compatible build.)
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionFromToByAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.SingleFromToByAnimation">
            <summary>
            Animates a <see langword="Single"/> value from/to/by a certain value.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.SingleFromToByAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.SrtFromToByAnimation">
            <summary>
            Animates an <see langword="SrtTransform"/> from/to/by a certain value.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.SrtFromToByAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector2FFromToByAnimation">
            <summary>
            Animates a <see langword="Vector2F"/> value from/to/by a certain value.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector2FFromToByAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector2FromToByAnimation">
            <summary>
            Animates a <see langword="Vector2"/> value from/to/by a certain value.
            (Only available in the XNA-compatible build.)
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector2FromToByAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector3FFromToByAnimation">
            <summary>
            Animates a <see langword="Vector3F"/> value from/to/by a certain value.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector3FFromToByAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector3FromToByAnimation">
            <summary>
            Animates a <see langword="Vector3"/> value from/to/by a certain value.
            (Only available in the XNA-compatible build.)
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector3FromToByAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector4FFromToByAnimation">
            <summary>
            Animates a <see langword="Vector4F"/> value from/to/by a certain value.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector4FFromToByAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector4FromToByAnimation">
            <summary>
            Animates a <see langword="Vector4"/> value from/to/by a certain value.
            (Only available in the XNA-compatible build.)
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector4FromToByAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.IAnimation">
            <summary>
            Defines the change of a value over time.
            </summary>
            <remarks>
            <para>
            An animation in the traditional sense is the rapid display of images to create the illusion of
            movement. Here, in <strong>DigitalRune Animation</strong>, the term animation is used in a 
            more general way: An animation determines the change of value over time. 
            </para>
            <para>
            Animations can be applied to all kinds of properties in an application. In a user-interface 
            properties such as size, position, rotation, color, opacity, etc. can be animated to create 
            interesting visual effects. In virtual worlds more complex animations can be used to control 
            the motions of objects or virtual characters.
            </para>
            <para>
            An animation defines the transition of a value over time. It is basically a function 
            <i>x</i> = <i>f</i>(<i>t</i>) where the parameter <i>t</i> is called the <i>animation time</i>
            and the result <i>x</i> is the <i>animation value</i>. The method 
            <see cref="M:DigitalRune.Animation.IAnimation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)"/> can be used to evaluate the animation value.
            </para>
            <para>
            <strong>Target Object and Property:</strong> An animation can be applied to a property of a 
            given object. The animation system allows to apply an animation to an object or a group of 
            objects without explicitly specifying the property that should be animated. In this case the 
            animation system automatically matches the target object and properties using the properties 
            <see cref="P:DigitalRune.Animation.ITimeline.TargetObject"/> and <see cref="P:DigitalRune.Animation.IAnimation.TargetProperty"/>. 
            <see cref="P:DigitalRune.Animation.ITimeline.TargetObject"/> and <see cref="P:DigitalRune.Animation.IAnimation.TargetProperty"/> are optional strings
            that can be set to identify the target.
            </para>
            <para>
            For example, a <see cref="T:DigitalRune.Animation.TimelineGroup"/> can be used to define a complex set of animations. 
            Each animation is assigned to an object/property by setting 
            <see cref="P:DigitalRune.Animation.ITimeline.TargetObject"/> and <see cref="P:DigitalRune.Animation.IAnimation.TargetProperty"/>. At runtime, when the 
            <see cref="T:DigitalRune.Animation.TimelineGroup"/> is started the animation system will automatically apply the
            animations to the matching objects.
            </para>
            <para>
            The animation system first checks whether the property <see cref="P:DigitalRune.Animation.ITimeline.TargetObject"/> is
            set and matches the name of any of the given objects. The animation system assumes that all
            objects have a unique name. Therefore, as soon as one match is found the animation system
            ignores all remaining objects/properties. If a match is found, it checks whether the object
            has a matching animatable property. If the property <see cref="P:DigitalRune.Animation.ITimeline.TargetObject"/> is
            not set (the value is <see langword="null"/> or an empty string), the animation system checks
            all objects for a matching property.
            </para>
            <para>
            The animation system checks whether an animatable property matches the property 
            <see cref="P:DigitalRune.Animation.IAnimation.TargetProperty"/> and whether the type of the property is compatible with the 
            animation. An animation is applied to the first matching property. If there are multiple 
            potential matches the animation is only applied to the first match.
            </para>
            <para>
            Note that timelines can be nested. In this case the parent's 
            <see cref="P:DigitalRune.Animation.ITimeline.TargetObject"/> or <see cref="P:DigitalRune.Animation.IAnimation.TargetProperty"/> property overrides the 
            values set by child animations. For example, if the property 
            <see cref="P:DigitalRune.Animation.ITimeline.TargetObject"/> is set in a <see cref="T:DigitalRune.Animation.TimelineGroup"/> the value 
            overrides the <see cref="P:DigitalRune.Animation.ITimeline.TargetObject"/> properties of all child 
            animations/timelines.
            </para>
            <para>
            <strong>Additive Animations:</strong> Animations can be additive, meaning that the animation
            value is added to the target property. If there are multiple animation in an composition 
            chain, the animation value will be added to the output of the previous stage. If the animation 
            is the first animation in a composition chain, the animation value is added to the base value 
            of the property that is being animated.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.IAnimation.TargetProperty">
            <summary>
            Gets the property to which the animation is applied by default.
            </summary>
            <value>The property to which the animation is applied by default.</value>
            <remarks>
            See <see cref="T:DigitalRune.Animation.IAnimation`1"/> for more information.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.IAnimation.CreateBlendAnimation">
            <summary>
            Creates a new <see cref="T:DigitalRune.Animation.BlendAnimation`1"/>. (For internal use only.)
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Animation.BlendAnimation`1"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Animation.IAnimation`1">
            <summary>
            Defines the change of a value over time.
            </summary>
            <typeparam name="T">The type of the animation value.</typeparam>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.IAnimation`1.Traits">
            <summary>
            Gets the traits of the animation values.
            </summary>
            <value>The traits of the animation values.</value>
        </member>
        <member name="M:DigitalRune.Animation.IAnimation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)">
            <summary>
            Gets the value of the animation at the specified time.
            </summary>
            <param name="time">The time value on the timeline.</param>
            <param name="defaultSource">
            In: The source value that should be used by the animation if the animation does not have its 
            own source value.
            </param>
            <param name="defaultTarget">
            In: The target value that should be used by the animation if the animation does not have its 
            own target value.
            </param>
            <param name="result">
            Out: The value of the animation at the given time. (The animation returns 
            <paramref name="defaultSource"/> if the animation is <see cref="F:DigitalRune.Animation.AnimationState.Delayed"/> 
            or <see cref="F:DigitalRune.Animation.AnimationState.Stopped"/> at <paramref name="time"/>.)
            </param>
            <remarks>
            <para>
            Note that the parameters need to be passed by reference. <paramref name="defaultSource"/> 
            and <paramref name="defaultTarget"/> are input parameters. The resulting animation value is 
            stored in <paramref name="result"/>.
            </para>
            <para>
            The values of the <paramref name="defaultSource"/> and the <paramref name="defaultTarget"/>
            parameters depend on where the animation is used. If the animation is used to animate an 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>, then the values depend on the position of the
            animation in the composition chain:
            <list type="bullet">
            <item>
            <description>
            If the animation has replaced another animation using 
            <see cref="M:DigitalRune.Animation.AnimationTransitions.SnapshotAndReplace"/>: 
            <paramref name="defaultSource"/> is the last output value of the animation which was 
            replaced and <paramref name="defaultTarget"/> is the base value of the animated property.
            </description>
            </item>
            <item>
            <description>
            If the animation is the first in an animation composition chain: 
            <paramref name="defaultSource"/> and <paramref name="defaultTarget"/> are the base value of
            the animated property.
            </description>
            </item>
            <item>
            <description>
            If the animation is not the first in an animation composition chain: 
            <paramref name="defaultSource"/> is the output of the previous stage in the composition 
            chain and <paramref name="defaultTarget"/> is the base value of the animated property.
            </description>
            </item>
            </list>
            </para>
            <para>
            If the animation is not used to animate an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>, the values
            need to be set by the user depending on the context where the animation is used. (In most
            cases it is safe to ignore the parameters and just pass default values.)
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.ITimeline">
            <summary>
            Positions an animation along a timeline.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Animation.ITimeline"/> is used to define when an animation starts and how long it is 
            active. Timelines can be played back by the animation system.
            </para>
            <para>
            <strong>Fill Behavior:</strong> The property <see cref="P:DigitalRune.Animation.ITimeline.FillBehavior"/> defines the behavior
            of the animation when its duration is exceeded. The fill behavior 
            <see cref="F:DigitalRune.Animation.FillBehavior.Hold"/> indicates that the animation holds its last 
            animation value when the end of the duration is reached. The last animation value is returned
            until the animation is reset or stopped. The fill behavior 
            <see cref="F:DigitalRune.Animation.FillBehavior.Stop"/> indicates that the animation should be removed when 
            the end of the duration is reached.
            </para>
            <para>
            <strong>Animation State:</strong> The current state of an animation (see enumeration 
            <see cref="T:DigitalRune.Animation.AnimationState"/>) depends on the current time on the timeline. The method 
            <see cref="M:DigitalRune.Animation.ITimeline.GetState(System.TimeSpan)"/> can be used to query the current state for a given time value. The 
            animation can be <see cref="F:DigitalRune.Animation.AnimationState.Delayed"/> when the animation is scheduled but has
            not yet started. <see cref="F:DigitalRune.Animation.AnimationState.Playing"/> indicates that the animation is active. 
            When the time reaches the end of the duration the state becomes either 
            <see cref="F:DigitalRune.Animation.AnimationState.Filling"/> when the <see cref="P:DigitalRune.Animation.ITimeline.FillBehavior"/> is set to 
            <see cref="F:DigitalRune.Animation.FillBehavior.Hold"/> or <see cref="F:DigitalRune.Animation.AnimationState.Stopped"/> when the 
            fill behavior is set to <see cref="F:DigitalRune.Animation.FillBehavior.Stop"/>. When a timeline is 
            <see cref="F:DigitalRune.Animation.AnimationState.Stopped"/> it is automatically removed from the animation system.
            </para>
            <para>
            <strong>Animation Time:</strong> The animation time is the local time of the animation. The
            animation time is required when the animation needs to be evaluated. The function 
            <see cref="M:DigitalRune.Animation.ITimeline.GetAnimationTime(System.TimeSpan)"/> can be used to convert a time value on the timeline to the 
            animation time. 
            </para>
            <para>
            <strong>Nested Timelines:</strong> Timelines can be nested: A <see cref="T:DigitalRune.Animation.TimelineGroup"/>, for
            example, is a timeline that groups other animations. The time values of a nested timeline are
            relative to the parent timeline.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.ITimeline.FillBehavior">
            <summary>
            Gets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
            <value>
            A value that specifies how the animation behaves when it reaches the end of its duration.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.ITimeline.TargetObject">
            <summary>
            Gets the object to which the animation is applied by default.
            </summary>
            <value>
            The object to which the animation is applied by default.
            </value>
            <remarks>
            See <see cref="T:DigitalRune.Animation.IAnimation`1"/> for more information.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.ITimeline.CreateInstance">
            <summary>
            Creates an animation instance that can be used to play back the animation. 
            (For internal use only.)
            </summary>
            <returns>
            An <see cref="T:DigitalRune.Animation.AnimationInstance"/> that can be used to play back the animation.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.ITimeline.GetAnimationTime(System.TimeSpan)">
            <summary>
            Gets the animation time for the specified time on the timeline.
            </summary>
            <param name="time">The time on the timeline.</param>
            <returns>
            The animation time. (The return value is <see langword="null"/> if the animation is not 
            active at <paramref name="time"/>.)
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.ITimeline.GetState(System.TimeSpan)">
            <summary>
            Gets the state of the animation for the specified time on the timeline.
            </summary>
            <param name="time">The time on the timeline.</param>
            <returns>The state of the animation.</returns>
        </member>
        <member name="M:DigitalRune.Animation.ITimeline.GetTotalDuration">
            <summary>
            Gets the total length of the timeline.
            </summary>
            <returns>The total length of the timeline.</returns>
            <remarks>
            <para>
            The total duration is the effective length of the animation timeline. Depending on the type 
            of timeline, the total duration can be the natural duration of the underlying animation or 
            might be set explicitly by the user.
            </para>
            <para>
            <strong>Notes to Implementors:</strong> The duration must be 0 or a positive value. 
            <see cref="F:System.TimeSpan.MaxValue"/> can be returned to indicate that the animation runs forever.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.AscendingKeyFrameComparer`1">
            <summary>
            Defines a method to compare <see cref="T:DigitalRune.Animation.IKeyFrame`1"/> objects.
            </summary>
            <typeparam name="T">The type of the value stored in the key frame.</typeparam>
        </member>
        <member name="M:DigitalRune.Animation.AscendingKeyFrameComparer`1.Compare(DigitalRune.Animation.IKeyFrame{`0},DigitalRune.Animation.IKeyFrame{`0})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or
            greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of x and y, as shown in the following 
            table.
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/>.</description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:DigitalRune.Animation.ColorKeyFrameAnimation">
            <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Color"/> value using key frames.
            (Only available in the XNA-compatible build.)
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.ColorKeyFrameAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.IKeyFrame`1">
            <summary>
            Defines the value of an animation at a certain point in time.
            </summary>
            <typeparam name="T">The type of the value stored in the key frame.</typeparam>
        </member>
        <member name="P:DigitalRune.Animation.IKeyFrame`1.Time">
            <summary>
            Gets the time offset from the start of the animation to the key frame.
            </summary>
            <value>The time of the key frame.</value>
        </member>
        <member name="P:DigitalRune.Animation.IKeyFrame`1.Value">
            <summary>
            Gets the animation value of the key frame.
            </summary>
            <value>The animation value of the key frame.</value>
        </member>
        <member name="T:DigitalRune.Animation.KeyFrame`1">
            <summary>
            Defines the value of an animation at a certain point in time.
            </summary>
            <typeparam name="T">The type of the value stored in the key frame.</typeparam>
        </member>
        <member name="P:DigitalRune.Animation.KeyFrame`1.Time">
            <summary>
            Gets or sets the time offset from the start of the animation to this key frame.
            </summary>
            <value>The time value of the key frame.</value>
        </member>
        <member name="P:DigitalRune.Animation.KeyFrame`1.Value">
            <summary>
            Gets or sets the animation value for this key frame.
            </summary>
            <value>The animation value of the key frame.</value>
        </member>
        <member name="M:DigitalRune.Animation.KeyFrame`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.KeyFrame`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.KeyFrame`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.KeyFrame`1.#ctor(System.TimeSpan,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.KeyFrame`1"/> class with the given time and
            value.
            </summary>
            <param name="time">The time value of the key frame.</param>
            <param name="value">The animation value of the key frame.</param>
        </member>
        <member name="T:DigitalRune.Animation.KeyFrameAnimation`1">
            <summary>
            Animates a value based on predefined key frames. (Base implementation.)
            </summary>
            <typeparam name="T">The type of the animation value.</typeparam>
            <remarks>
            <para>
            A key frame animation contains a list of key frames (see property <see cref="P:DigitalRune.Animation.KeyFrameAnimation`1.KeyFrames"/>) 
            that define the animation values at certain points in time. When the animation is played the 
            class automatically looks up the animation value in the list of key frames.
            </para>
            <para>
            <strong>Key Frame Interpolation:</strong> The property <see cref="P:DigitalRune.Animation.KeyFrameAnimation`1.EnableInterpolation"/>
            defines whether interpolation between key frames is enabled. When the property is set
            (default) the values between two key frames are interpolated. Each key frame animation class
            decides which type of a interpolation is most appropriate. For example, linear interpolation
            (LERP) is used for <see langword="Single"/>, <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>, 
            etc. LERP is also used for <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> (Spherical linear interpolation (SLERP)
            is not used for performance reasons). When 
            interpolation is disabled, the animation returns the value of the previous key frame. 
            </para>
            <para>
            Please note that key frame animations (such as <see cref="T:DigitalRune.Animation.SingleKeyFrameAnimation"/>, 
            <see cref="T:DigitalRune.Animation.Vector2FKeyFrameAnimation"/>, <see cref="T:DigitalRune.Animation.Vector3FKeyFrameAnimation"/>, etc.) 
            provide only limited control over interpolation between key frames. Curve-based animations 
            (such as <see cref="T:DigitalRune.Animation.Curve2FAnimation"/>, <see cref="T:DigitalRune.Animation.Path2FAnimation"/>, 
            <see cref="T:DigitalRune.Animation.Path3FAnimation"/>, etc.) offer more advanced control: Curve-based animations allow
            to define an interpolation spline for each segment of the animation.
            </para>
            <para>
            <strong>Cyclic Animations:</strong> A key frame animation, by default, runs until the last 
            key frame is reached. The types <see cref="T:DigitalRune.Animation.TimelineClip"/> and <see cref="T:DigitalRune.Animation.AnimationClip`1"/>
            can be used to repeat the entire key frame animation (or a certain clip) for a number of times 
            using a certain loop-behavior (see <see cref="P:DigitalRune.Animation.TimelineClip.LoopBehavior"/>).
            </para>
            <para>
            <strong>Important:</strong> The key frame animation requires that the key frames are sorted 
            ascending by their time value. The method <see cref="M:DigitalRune.Animation.KeyFrameCollection`1.Sort"/> can be 
            called to sort all key frames.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.KeyFrameAnimation`1.EnableInterpolation">
            <summary>
            Gets or sets a value indicating whether values between key frames are interpolated.
            </summary>
            <value>
            <see langword="true"/> if interpolation of key frames is enabled; otherwise, 
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.KeyFrameAnimation`1.KeyFrames">
            <summary>
            Gets the collection of key frames.
            </summary>
            <value>The collection of key frames.</value>
        </member>
        <member name="M:DigitalRune.Animation.KeyFrameAnimation`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.KeyFrameAnimation`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.KeyFrameAnimation`1.GetKeyFrameIndex(System.TimeSpan)">
            <summary>
            Gets the index of the key frame <i>before</i> or at the given animation time.
            </summary>
            <param name="time">The animation time.</param>
            <returns>
            The index of the key frame or <c>-1</c> if no suitable key frame exists.
            </returns>
            <remarks>
            This method assumes that the key frames are sorted and returns index of the key frame with 
            the largest <see cref="P:DigitalRune.Animation.IKeyFrame`1.Time"/> value that is less than or equal to the given 
            parameter <paramref name="time"/>. The time value will lie between the key frame at the 
            returned index and the key frame at index + 1. If <paramref name="time"/> is beyond the 
            start or end of the path, a key frame index according to <see cref="T:DigitalRune.Animation.LoopBehavior"/> is 
            returned.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.KeyFrameAnimation`1.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.KeyFrameAnimation`1.GetValueCore(System.TimeSpan,`0@,`0@,`0@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.KeyFrameCollection`1">
            <summary>
            Manages a collection of key frames.
            </summary>
            <typeparam name="T">The type of the animation value.</typeparam>
            <remarks>
            <strong>Important:</strong> The <see cref="T:DigitalRune.Animation.KeyFrameAnimation`1"/> expects that the key frames
            are sorted by their time. But the <see cref="T:DigitalRune.Animation.KeyFrameCollection`1"/> does not automatically
            order the key frames. The method <see cref="M:DigitalRune.Animation.KeyFrameCollection`1.Sort"/> needs to be called if key frames are added
            in the wrong order!
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.KeyFrameCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Animation.KeyFrameCollection`1"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Animation.KeyFrameCollection`1"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.KeyFrameCollection`1.Sort">
            <summary>
            Sorts the key frames in the collection by their time value.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.QuaternionFKeyFrameAnimation">
            <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> value using key frames.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionFKeyFrameAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.QuaternionKeyFrameAnimation">
            <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Quaternion"/> value using key frames.
            (Only available in the XNA-compatible build.)
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.QuaternionKeyFrameAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.SingleKeyFrameAnimation">
            <summary>
            Animates a <see cref="T:System.Single"/> value using key frames.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.SingleKeyFrameAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.SrtKeyFrameAnimation">
            <summary>
            Animates an <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> using key frames.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.SrtKeyFrameAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector2FKeyFrameAnimation">
            <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> value using key frames.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector2FKeyFrameAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector2KeyFrameAnimation">
            <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Vector2"/> value using key frames.
            (Only available in the XNA-compatible build.)
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector2KeyFrameAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector3FKeyFrameAnimation">
            <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> value using key frames.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector3FKeyFrameAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector3KeyFrameAnimation">
            <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Vector3"/> value using key frames.
            (Only available in the XNA-compatible build.)
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector3KeyFrameAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector4FKeyFrameAnimation">
            <summary>
            Animates a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> value using key frames.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector4FKeyFrameAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Vector4KeyFrameAnimation">
            <summary>
            Animates a <see cref="T:Microsoft.Xna.Framework.Vector4"/> value using key frames. 
            (Only available in the XNA-compatible build.)
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Vector4KeyFrameAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.LoopBehavior">
            <summary>
            Defines the behavior of an animation when it is repeated.
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.LoopBehavior.Constant">
            <summary>
            The animation value is constant. The animation repeats the nearest valid animation value
            (the start value if time &lt; start time, or the end value of the animation if time &gt;
            end time).
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.LoopBehavior.Cycle">
            <summary>
            The animation will be repeated if the time value goes past the end of the animation. (Note
            that the start and end value of cyclic animations needs to be identical to have smooth 
            transitions between iterations.)
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.LoopBehavior.CycleOffset">
            <summary>
            The animation will be repeated if the time value goes past the end animation. Additionally, 
            the animation values of the next cycle will be offset by the difference between the end 
            value and start value of the animation to enable smooth transitions between iterations.
            (This behavior can be used to achieve cyclic animations that accumulate the animation values
            from one iteration to the next time.)
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.LoopBehavior.Oscillate">
            <summary>
            The animation will be automatically reversed and repeated. (This behavior is also known as
            'auto-reverse' or 'ping-pong'.)
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.AnimatableBlendWeight">
            <summary>
            Represents a blend weight of an animation in a <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableBlendWeight.DigitalRune#Animation#IAnimatableProperty#HasBaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableBlendWeight.DigitalRune#Animation#IAnimatableProperty#BaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableBlendWeight.DigitalRune#Animation#IAnimatableProperty#IsAnimated">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableBlendWeight.DigitalRune#Animation#IAnimatableProperty#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableBlendWeight.DigitalRune#Animation#IAnimatableProperty{System#Single}#BaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableBlendWeight.DigitalRune#Animation#IAnimatableProperty{System#Single}#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.AnimatableBlendWeight.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
            <value>The value of the property.</value>
            <remarks>
            Writing <see cref="P:DigitalRune.Animation.AnimatableBlendWeight.Value"/> changes the base value of the property. Reading 
            <see cref="P:DigitalRune.Animation.AnimatableBlendWeight.Value"/> returns the effective value of the property. (If the property is 
            animated, then the animation value is effective value. If no animations are active, then the
            base value is the effective value.) 
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.AnimatableBlendWeight.#ctor(DigitalRune.Animation.BlendGroup,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.AnimatableBlendWeight"/> class.
            </summary>
            <param name="blendGroup">The blend group.</param>
            <param name="weight">The blend weight.</param>
        </member>
        <member name="T:DigitalRune.Animation.BlendAnimation">
            <summary>
            Blends animations within a <see cref="T:DigitalRune.Animation.BlendGroup"/>. (For internal use only.)
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.BlendAnimation.Group">
            <summary>
            Gets the <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.BlendAnimation.FillBehavior">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.BlendAnimation.TargetObject">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.BlendAnimation.TargetProperty">
            <inheritdoc cref="P:DigitalRune.Animation.Animation`1.TargetProperty"/>
        </member>
        <member name="M:DigitalRune.Animation.BlendAnimation.Initialize(DigitalRune.Animation.BlendGroup,System.String)">
            <summary>
            Initializes the <see cref="T:DigitalRune.Animation.BlendAnimation`1"/> for specified number of animation.
            </summary>
            <param name="blendGroup">The <see cref="T:DigitalRune.Animation.BlendGroup"/>.</param>
            <param name="targetProperty">The property to which the animation is applied.</param>
        </member>
        <member name="M:DigitalRune.Animation.BlendAnimation.AddAnimation(System.Int32,DigitalRune.Animation.IAnimation)">
            <summary>
            Adds the specified animation to the <see cref="T:DigitalRune.Animation.BlendAnimation`1"/>.
            </summary>
            <param name="index">The index of the animation.</param>
            <param name="animation">The animation.</param>
            <remarks>
            The method does nothing if <paramref name="animation"/> is not of the correct type 
            <see cref="T:DigitalRune.Animation.IAnimation`1"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.BlendAnimation.CreateInstance">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.BlendAnimation.DigitalRune#Animation#IAnimation#CreateBlendAnimation">
            <summary>
            Not implemented. Throws an <see cref="T:DigitalRune.Animation.AnimationException"/>.
            </summary>
            <returns>
            Not implemented. Throws an <see cref="T:DigitalRune.Animation.AnimationException"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.BlendAnimation.GetAnimationTime(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.BlendAnimation.GetState(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.BlendAnimation.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.BlendAnimation`1">
            <summary>
            Blends animations within a <see cref="T:DigitalRune.Animation.BlendGroup"/>. (For internal use only.)
            </summary>
            <typeparam name="T">The type of the animation value.</typeparam>
        </member>
        <member name="P:DigitalRune.Animation.BlendAnimation`1.Traits">
            <inheritdoc cref="P:DigitalRune.Animation.IAnimation`1.Traits"/>
        </member>
        <member name="M:DigitalRune.Animation.BlendAnimation`1.Initialize(DigitalRune.Animation.BlendGroup,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.BlendAnimation`1.AddAnimation(System.Int32,DigitalRune.Animation.IAnimation)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.BlendAnimation`1.CreateInstance">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.BlendAnimation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)">
            <inheritdoc cref="M:DigitalRune.Animation.IAnimation`1.GetValue(System.TimeSpan,`0@,`0@,`0@)"/>
            <exception cref="T:DigitalRune.Animation.InvalidAnimationException">
            Cannot evaluate blend animation because the blend animation is empty or the blend group is
            not set.
            </exception>
        </member>
        <member name="T:DigitalRune.Animation.BlendGroup">
            <summary>
            Blends two or more animations.
            </summary>
            <remarks>
            <para>
            A blend group is a collection of animations (timelines). It automatically blends the
            animations based on a blend weight, which can be set using 
            <see cref="M:DigitalRune.Animation.BlendGroup.SetWeight(DigitalRune.Animation.ITimeline,System.Single)"/>. The blend weight indicates the importance of the
            corresponding animation. For example, if one animation has a blend weight of 1 and another
            animation has a blend weight of 0.5 then the second has less influence on the animation
            result. A blend weight can be set to 0 to disable the animation.
            </para>
            <para>
            The blend weights are internally normalized, meaning that the blend weights do not need be in 
            the range [0, 1] when they are set. Blend weights can have any value equal to or greater than
            0. The sum of all blend weights should be greater than 0 - i.e. at least one animation should
            to be active!
            </para>
            <para>
            A blend group can contain <see cref="T:DigitalRune.Animation.TimelineGroup"/>s. In this case the animations within one
            <see cref="T:DigitalRune.Animation.TimelineGroup"/> are blended with the matching animations in the other 
            <see cref="T:DigitalRune.Animation.TimelineGroup"/>s. The animations are matched by comparing the 
            <see cref="P:DigitalRune.Animation.IAnimation.TargetProperty"/> properties.
            </para>
            <para>
            <strong>Synchronization:</strong> Most animations have different durations. When blending 
            cyclic animations, for example, a "Walk" cycle and a "Run" cycle of a character, then it is
            important to synchronize the durations of the animations. When a "Walk" cycle and a "Run" 
            cycle are blended with equal blend weights then the result should be the average of "Walk" and
            "Run". The duration of the blended animation should be the average both cycles. A key frame of
            the "Walk" cycle needs to be interpolated with the matching key frame of the "Run" cycle. In 
            order to synchronize the animations the method <see cref="M:DigitalRune.Animation.BlendGroup.SynchronizeDurations"/> needs to be 
            called when all animations have been set.
            </para>
            <para>
            Note that synchronization is optional. The methods <see cref="M:DigitalRune.Animation.BlendGroup.SynchronizeDurations"/> does not
            need to be called if the contained animations do not need to be synchronized.
            </para>
            <para>
            <strong>Limitations:</strong> A blend group has certain limitations.
            <list type="bullet">
            <item>
            <description>
            The timelines within a blend group must be of type <see cref="T:DigitalRune.Animation.TimelineGroup"/> or implement
            <see cref="T:DigitalRune.Animation.IAnimation`1"/>.
            </description>
            </item>
            <item>
            <description>
            If a <see cref="T:DigitalRune.Animation.TimelineGroup"/> is added to a blend group, it should only contain animations 
            (<see cref="T:DigitalRune.Animation.IAnimation`1"/>). Nested timelines, such as <see cref="T:DigitalRune.Animation.TimelineGroup"/> within a
            <see cref="T:DigitalRune.Animation.TimelineGroup"/>, are not supported and will be ignored.
            </description>
            </item>
            <item>
            <description>
            If a <see cref="T:DigitalRune.Animation.TimelineGroup"/>s is added to a blend group, the 
            <see cref="P:DigitalRune.Animation.IAnimation.TargetProperty"/> must be set for all animations in the
            <see cref="T:DigitalRune.Animation.TimelineGroup"/>. This is necessary because the blend group matches the animations
            of one <see cref="T:DigitalRune.Animation.TimelineGroup"/> with those of the other <see cref="T:DigitalRune.Animation.TimelineGroup"/>s by 
            comparing the <see cref="P:DigitalRune.Animation.IAnimation.TargetProperty"/>. A <see cref="T:DigitalRune.Animation.TimelineGroup"/> should 
            not contain multiple animations that target the same property.
            </description>
            </item>
            <item>
            <description>
            The <see cref="P:DigitalRune.Animation.BlendGroup.TargetObject"/> of the animations within a blend group will be ignored. Only
            the property <see cref="P:DigitalRune.Animation.BlendGroup.TargetObject"/> of the blend group itself will be read.
            </description>
            </item>
            <item>
            <description>
            Animations must not be added to or removed from the blend group if the animation is already 
            playing. (However, if all playing animation instances of the blend group are stopped and the 
            associated <see cref="T:DigitalRune.Animation.AnimationController"/>s are recycled, then animations can be added or 
            removed, and the blend group can be restarted.)
            </description>
            </item>
            <item>
            <description>
            A blend group does not support additive animations. The property 
            <see cref="P:DigitalRune.Animation.Animation`1.IsAdditive"/> of contained animations will be ignored.
            </description>
            </item>
            </list>
            </para>
            <para>
            <strong>Animating Blend Weights:</strong> The blend weights in a blend group can be animated.
            The method <see cref="M:DigitalRune.Animation.BlendGroup.GetWeightAsAnimatable(DigitalRune.Animation.ITimeline)"/> returns an 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> that represent the blend weight of the specified timeline
            and can be animated. 
            </para>
            <para>
            A blend group also implements the interface <see cref="T:DigitalRune.Animation.IAnimatableObject"/>. The blend weights
            can also be retrieved using <see cref="M:DigitalRune.Animation.IAnimatableObject.GetAnimatableProperty``1(System.String)"/> where the
            blend weights are identified using the strings "Weight0", Weight1", etc. The suffix is the 
            index of the associated timeline.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.BlendGroup.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.BlendGroup.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="P:DigitalRune.Animation.BlendGroup.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last
            element.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.Enumerator.#ctor(DigitalRune.Animation.BlendGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.BlendGroup.Enumerator"/> struct.
            </summary>
            <param name="blendGroup">The <see cref="T:DigitalRune.Animation.BlendGroup"/> to be enumerated.</param>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; 
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Animation.BlendGroup"/> was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.BlendGroup.FillBehavior">
            <summary>
            Gets or sets a value that specifies how the animation behaves when it reaches the end of its 
            duration.
            </summary>
            <value>
            A value that specifies how the animation behaves when it reaches the end of its duration.
            The default value is <see cref="F:DigitalRune.Animation.FillBehavior.Hold"/>.
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.ITimeline.FillBehavior"/>
        </member>
        <member name="P:DigitalRune.Animation.BlendGroup.TargetObject">
            <summary>
            Gets or sets the object to which the animation is applied by default.
            </summary>
            <value>
            The object to which the animation is applied by default. The default value is 
            <see langword="null"/>.
            </value>
            <inheritdoc cref="P:DigitalRune.Animation.ITimeline.TargetObject"/>
        </member>
        <member name="P:DigitalRune.Animation.BlendGroup.Count">
            <summary>
            Gets the number of timelines contained in the <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </summary>
            <value>The number of timelines contained in the <see cref="T:DigitalRune.Animation.BlendGroup"/>.</value>
        </member>
        <member name="P:DigitalRune.Animation.BlendGroup.System#Collections#Generic#ICollection{DigitalRune#Animation#ITimeline}#IsReadOnly">
            <summary>
            Gets a value indicating whether this collection is read-only.
            </summary>
            <value>
            <see langword="true"/> if this collection is read-only; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.BlendGroup.Item(System.Int32)">
            <summary>
            Gets or sets the timeline at the specified index.
            </summary>
            <value>The timeline at the specified index.</value>
            <param name="index">The zero-based index of the timeline to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Animation.BlendGroup.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>. The <see cref="T:DigitalRune.Animation.BlendGroup"/> does not
            allow <see langword="null"/> values.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.BlendGroup.Delay">
            <summary>
            Gets or sets the time at which the animation begins.
            </summary>
            <value>
            The time at which the animation should begin. The default value is 0.
            </value>
            <remarks>
            <para>
            This property can be used to delay the start of an animation. The delay time marks the time
            on the timeline when the animation starts. The <see cref="P:DigitalRune.Animation.BlendGroup.Speed"/> does not affect the 
            delay. For example, an animation with a delay of 3 seconds, a duration of 10 seconds 
            and a speed ratio of 2 will start after 3 seconds and run for 5 seconds with double speed.
            </para>
            <para>
            Note: The delay time can also be negative. For example, an animation with a delay time of 
            -2.5 seconds and a duration of 5 seconds will start right in the middle of the animation.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.BlendGroup.Duration">
            <summary>
            Gets or sets the duration for which the animation is played.
            </summary>
            <value>
            The duration for which the animation is played. The default value is <see langword="null"/>.
            </value>
            <remarks>
            <para>
            The property <see cref="P:DigitalRune.Animation.BlendGroup.Duration"/> can be set to override the duration of the animation. If
            <see cref="P:DigitalRune.Animation.BlendGroup.Duration"/> is greater than the length of the animations in the blend group, the 
            blend group will be repeated using the defined loop behavior (see 
            <see cref="P:DigitalRune.Animation.BlendGroup.LoopBehavior"/>).
            </para>
            <para>
            The effective duration depends on the <see cref="P:DigitalRune.Animation.BlendGroup.Speed"/>: For example, an animation with a 
            delay of 3 seconds, a duration of 10 seconds and a speed ratio of 2 will start after 3 
            seconds and run for 5 seconds with double speed.
            </para>
            <para>
            The default value is <see langword="null"/>, which indicates that the duration is 
            'automatic' or 'unknown'. In this case the blend group plays exactly once. A duration of
            <see cref="F:System.TimeSpan.MaxValue"/> can be set to repeat the animation forever. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.BlendGroup.Speed">
            <summary>
            Gets or sets the speed ratio at which the animation is played.
            </summary>
            <value>
            The rate at which time progresses for the blend group. The value must be a finite number 
            greater than or equal to 0. The default value is 1.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or not a finite value.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.BlendGroup.LoopBehavior">
            <summary>
            Gets or sets the behavior of the animations past the end of the duration.
            </summary>
            <value>
            The behavior of the animations past the end of the duration. The default value is 
            <see cref="F:DigitalRune.Animation.LoopBehavior.Cycle"/>.
            </value>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is set to <see cref="F:DigitalRune.Animation.LoopBehavior.CycleOffset"/>. This 
            loop behavior is not supported by a <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.BlendGroup.SynchronizedDuration">
            <summary>
            Gets the duration of a single cycle of the blended animations.
            </summary>
            <value>The duration of a single cycle of the blended animations.</value>
            <remarks>
            This property is only valid after <see cref="M:DigitalRune.Animation.BlendGroup.SynchronizeDurations"/>. If the animations are
            not synchronized, the property returns the duration of the longest animation in the blend
            group.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.BlendGroup"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.CreateInstance">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.CreateBlendAnimations(System.Int32,DigitalRune.Animation.IAnimation)">
            <summary>
            Creates the required <see cref="T:DigitalRune.Animation.BlendAnimation"/>s and adds the given timeline to the 
            <see cref="T:DigitalRune.Animation.BlendAnimation"/>.
            </summary>
            <param name="index">The index of <paramref name="animation"/> in the blend group.</param>
            <param name="animation">
            The animation to add to a <see cref="T:DigitalRune.Animation.BlendAnimation"/>. Can be <see langword="null"/>.
            </param>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.SynchronizeDurations">
            <summary>
            Synchronizes the durations of the animations in the blend group.
            </summary>
            <remarks>
            <para>
            Many animations that need to be blended have different durations. For example, a "Walk"
            animation has a different duration than a "Run" animation. In order to blend the matching
            frames the durations of the animations in the blend group need to be synchronized. 
            Synchronization of durations is typically required for cyclic animations that should be 
            mixed.
            </para>
            <para>
            The method <see cref="M:DigitalRune.Animation.BlendGroup.SynchronizeDurations"/> needs to be called once after all animations 
            have been added to the blend group to synchronize them. (It does not need be called again if
            blend weights are changed or when animations are added or removed. However, if the duration
            of one animation is changed manually - for example, by appending key frames to a key frame
            animation - then <see cref="M:DigitalRune.Animation.BlendGroup.SynchronizeDurations"/> needs to be called a second time to
            update the blend group.)
            </para>
            <para>
            If the durations are synchronized the total animation duration of the blend group is the
            weighted average of all animations. If the durations are not synchronized then the total 
            durations is determined by the longest animation in the blend group.
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Animation.InvalidAnimationException">
            The sum of the blend weights in the blend group is 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.OnTimelineChanged(System.Int32)">
            <summary>
            Called when a timeline was added or removed.
            </summary>
            <param name="index">
            The index of the new timeline; -1 if a timeline was removed.
            </param>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.OnWeightChanged">
            <summary>
            Called when one or more blend weights were changed.
            (For use by <see cref="T:DigitalRune.Animation.AnimatableBlendWeight"/>.)
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.CacheDuration(System.Int32)">
            <summary>
            Caches the total duration of the timeline with the given index.
            </summary>
            <param name="index">The index of the timeline.</param>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.Update">
            <summary>
            Updates this instance.
            </summary>
            <remarks>
            Call <see cref="M:DigitalRune.Animation.BlendGroup.Update"/> before calling <see cref="M:DigitalRune.Animation.BlendGroup.GetTimeNormalizationFactor(System.Int32)"/> to ensure
            that the animations are synchronized.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.NormalizeWeights">
            <summary>
            Normalizes the blend weights and caches the results.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.UpdateDuration">
            <summary>
            Synchronizes the durations if necessary and computes factors which are required to normalize 
            animation times.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.GetNormalizedWeight(System.Int32)">
            <summary>
            Gets the normalized blend weight.
            </summary>
            <param name="index">The index of the timeline in the <see cref="T:DigitalRune.Animation.BlendGroup"/>.</param>
            <returns>The normalized blend weight.</returns>
            <remarks>
            Call <see cref="M:DigitalRune.Animation.BlendGroup.Update"/> before calling <see cref="M:DigitalRune.Animation.BlendGroup.GetNormalizedWeight(System.Int32)"/> to ensure
            that the normalized weights are up-to-date.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.GetTimeNormalizationFactor(System.Int32)">
            <summary>
            Gets the factor that needs to be multiplied with the animation time to synchronize the
            animation with the specified index.
            </summary>
            <param name="index">The index of the animation in the blend group.</param>
            <returns>The time normalization factor.</returns>
            <remarks>
            Call <see cref="M:DigitalRune.Animation.BlendGroup.Update"/> before calling <see cref="M:DigitalRune.Animation.BlendGroup.GetTimeNormalizationFactor(System.Int32)"/> to ensure
            that the durations are synchronized.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.GetState(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.GetAnimationTime(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.AdjustTimeline(System.TimeSpan,System.TimeSpan@)">
            <summary>
            Adjusts the time on the timeline in case the blend weights have changed. (This is necessary
            to keep the cycles in sync.)
            </summary>
            <param name="time">The time on the timeline.</param>
            <param name="duration">
            In/Out: The synchronized duration. <see cref="F:System.TimeSpan.Zero"/> if the animations are not
            synchronized.
            </param>
            <returns>The adjusted time on the timeline.</returns>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.GetWeight(DigitalRune.Animation.ITimeline)">
            <overloads>
            <summary>
            Gets the weight of a timeline.
            </summary>
            </overloads>
            
            <summary>
            Gets the blend weight of the specified timeline.
            </summary>
            <param name="timeline">The timeline.</param>
            <returns>The blend weight of the timeline.</returns>
            <exception cref="T:System.ArgumentException">
            The <see cref="T:DigitalRune.Animation.BlendGroup"/> does not contain the specified timeline.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.GetWeight(System.Int32)">
            <summary>
            Gets the blend weight of the timeline with the specified index.
            </summary>
            <param name="index">The index of the timeline in the <see cref="T:DigitalRune.Animation.BlendGroup"/>.</param>
            <returns>The blend weight of the timeline.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Animation.BlendGroup.Count"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.GetWeightAsAnimatable(DigitalRune.Animation.ITimeline)">
            <overloads>
            <summary>
            Gets the blend weight of a timeline as an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.
            </summary>
            </overloads>
            
            <summary>
            Gets the blend weight of the specified timeline as an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.
            </summary>
            <param name="timeline">The timeline.</param>
            <returns>
            The blend weight of the timeline as an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> can be used to animate the blend weight.
            It can also be used to directly read and write the blend weight.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The <see cref="T:DigitalRune.Animation.BlendGroup"/> does not contain the specified timeline.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.GetWeightAsAnimatable(System.Int32)">
            <summary>
            Gets the blend weight of the timeline with the specified index as an 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.
            </summary>
            <param name="index">The index of the timeline in the <see cref="T:DigitalRune.Animation.BlendGroup"/>.</param>
            <returns>
            The blend weight of the timeline as an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.
            </returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> can be used to animate the blend weight.
            It can also be used to directly read and write the blend weight.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Animation.BlendGroup.Count"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.SetWeight(DigitalRune.Animation.ITimeline,System.Single)">
            <overloads>
            <summary>
            Sets the blend weight of a timeline.
            </summary>
            </overloads>
            
            <summary>
            Sets the blend weight of the specified timeline.
            </summary>
            <param name="timeline">The timeline.</param>
            <param name="weight">The blend weight of the timeline.</param>
            <exception cref="T:System.ArgumentException">
            The <see cref="T:DigitalRune.Animation.BlendGroup"/> does not contain the specified timeline.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="weight"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.SetWeight(System.Int32,System.Single)">
            <summary>
            Sets the blend weight of the timeline at the specified index.
            </summary>
            <param name="index">The index of the timeline in the <see cref="T:DigitalRune.Animation.BlendGroup"/>.</param>
            <param name="weight">The blend weight of the timeline.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Animation.BlendGroup.Count"/>. Or,
            <paramref name="weight"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.System#Collections#Generic#IEnumerable{DigitalRune#Animation#ITimeline}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Animation.BlendGroup"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.Add(DigitalRune.Animation.ITimeline)">
            <overloads>
            <summary>
            Adds a timeline to the <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </summary>
            </overloads>
            
            <summary>
            Adds a timeline with a blend weight of 1 to the <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </summary>
            <param name="timeline">The timeline to add to the <see cref="T:DigitalRune.Animation.BlendGroup"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeline"/> is <see langword="null"/>. The <see cref="T:DigitalRune.Animation.BlendGroup"/> does 
            not allow <see langword="null"/> values.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.Add(DigitalRune.Animation.ITimeline,System.Single)">
            <summary>
            Adds a timeline with the specified blend weight to the <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </summary>
            <param name="timeline">The timeline to add to the <see cref="T:DigitalRune.Animation.BlendGroup"/>.</param>
            <param name="weight">The blend weight of the timeline.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeline"/> is <see langword="null"/>. The <see cref="T:DigitalRune.Animation.BlendGroup"/> does 
            not allow <see langword="null"/> values.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="weight"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.Clear">
            <summary>
            Removes all timelines from the <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.Contains(DigitalRune.Animation.ITimeline)">
            <summary>
            Determines whether the <see cref="T:DigitalRune.Animation.BlendGroup"/> contains a specific timeline.
            </summary>
            <param name="timeline">The timeline to locate in the <see cref="T:DigitalRune.Animation.BlendGroup"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="timeline"/> is found in the 
            <see cref="T:DigitalRune.Animation.BlendGroup"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.System#Collections#Generic#ICollection{DigitalRune#Animation#ITimeline}#CopyTo(DigitalRune.Animation.ITimeline[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:DigitalRune.Animation.BlendGroup"/> to an <see cref="T:System.Array"/>, starting 
            at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Animation.BlendGroup"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of elements in the 
            source <see cref="T:DigitalRune.Animation.BlendGroup"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.IndexOf(DigitalRune.Animation.ITimeline)">
            <summary>
            Determines the index of a specific timeline in the <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </summary>
            <param name="timeline">The timeline to locate in the <see cref="T:DigitalRune.Animation.BlendGroup"/>.</param>
            <returns>
            The index of <paramref name="timeline"/> if found in the <see cref="T:DigitalRune.Animation.BlendGroup"/>;
            otherwise, -1.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.Insert(System.Int32,DigitalRune.Animation.ITimeline)">
            <summary>
            Inserts a timeline into the <see cref="T:DigitalRune.Animation.BlendGroup"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="timeline"/> should be inserted.
            </param>
            <param name="timeline">
            The timeline to insert into the <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeline"/> is <see langword="null"/>. The <see cref="T:DigitalRune.Animation.BlendGroup"/> does 
            not allow <see langword="null"/> values.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.Remove(DigitalRune.Animation.ITimeline)">
            <summary>
            Removes the first occurrence of a specific timeline from the <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </summary>
            <param name="timeline">The timeline to remove from the <see cref="T:DigitalRune.Animation.BlendGroup"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="timeline"/> was successfully removed from the 
            <see cref="T:DigitalRune.Animation.BlendGroup"/>; otherwise, <see langword="false"/>. This method also returns 
            <see langword="false"/> if <paramref name="timeline"/> is not found in the original 
            <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.RemoveAt(System.Int32)">
            <summary>
            Removes the timeline at the specified index from the <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </summary>
            <param name="index">The zero-based index of the timeline to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Animation.BlendGroup.DigitalRune#INamedObject#Name">
            <summary>
            Not implemented.
            </summary>
            <value>
            Not implemented. Always returns <see cref="F:System.String.Empty"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.DigitalRune#Animation#IAnimatableObject#GetAnimatedProperties">
            <summary>
            Gets the properties which are currently being animated.
            </summary>
            <returns>
            The properties which are currently being animated.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroup.DigitalRune#Animation#IAnimatableObject#GetAnimatableProperty``1(System.String)">
            <summary>
            Gets the property with given name and type which can be animated.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <returns>
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty"/> that has the given name and type; otherwise, 
            <see langword="null"/> if the object does not have an property with this name or type.
            </returns>
            <remarks>
            The blend weights in a blend group can be animated. The blend weights are identified using 
            the strings "Weight0", Weight1", etc., where the suffix is the index of the timeline.
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.BlendGroupInstance">
            <summary>
            Represents an instance of a <see cref="T:DigitalRune.Animation.BlendGroup"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroupInstance.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DigitalRune.Animation.BlendGroupInstance"/> class from being 
            created.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroupInstance.Create(DigitalRune.Animation.BlendGroup)">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Animation.BlendGroupInstance"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <param name="blendGroup">The <see cref="T:DigitalRune.Animation.BlendGroup"/> that should be played back.</param>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Animation.BlendGroupInstance"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Animation.BlendGroupInstance.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="blendGroup"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroupInstance.Recycle">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Animation.AnimationInstance"/> class.
            </summary>
            <remarks>
            <para>
            This method resets this instance and returns it to a resource pool if resource pooling is 
            enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.BlendGroupInstance.SetTime(System.Nullable{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Character.AnimatableBoneTransform">
            <summary>
            Represents an <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> of a bone that can be animated (no base value).
            </summary>
            <remarks>
            When the bone transform is changed, the bone data in the skeleton pose is invalidated.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.AnimatableBoneTransform.DigitalRune#Animation#IAnimatableProperty#HasBaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Character.AnimatableBoneTransform.DigitalRune#Animation#IAnimatableProperty#BaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Character.AnimatableBoneTransform.DigitalRune#Animation#IAnimatableProperty#IsAnimated">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Character.AnimatableBoneTransform.DigitalRune#Animation#IAnimatableProperty#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Character.AnimatableBoneTransform.DigitalRune#Animation#IAnimatableProperty{DigitalRune#Animation#Character#SrtTransform}#BaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Character.AnimatableBoneTransform.DigitalRune#Animation#IAnimatableProperty{DigitalRune#Animation#Character#SrtTransform}#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Character.AnimatableBoneTransform.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.AnimatableBoneTransform"/> class.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
        </member>
        <member name="T:DigitalRune.Animation.Character.CcdIKSolver">
            <summary>
            Modifies a skeleton using the cyclic-coordinate descent (CCD) algorithm.
            </summary>
            <remarks>
            <para>
            This <see cref="T:DigitalRune.Animation.Character.IKSolver"/> uses the cyclic-coordinate descent (CCD) algorithm to modify a
            bone chain to reach the <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> position. <see cref="P:DigitalRune.Animation.Character.CcdIKSolver.RootBoneIndex"/>
            determines the first bone in the chain. <see cref="P:DigitalRune.Animation.Character.CcdIKSolver.TipBoneIndex"/> determines the last bone
            that is included in the chain. This IK solver rotates all bones in the chain, so that the tip
            of the bone chain reaches the <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> position.
            </para>
            <para>
            This solver uses an iterative algorithm. <see cref="P:DigitalRune.Animation.Character.CcdIKSolver.NumberOfIterations"/> limits the maximal
            number allowed iterations. The algorithm ends early if the distance between the
            <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> and the tip of the chain is less than 
            <see cref="P:DigitalRune.Animation.Character.CcdIKSolver.AllowedDeviation"/>.
            </para>
            <para>
            <strong>Bone rotation limits: </strong><br/>
            Per default, the <see cref="T:DigitalRune.Animation.Character.IKSolver"/> assumes that the bones can rotate in any direction
            without rotation limits. If the bone rotations should be limited (e.g. "do not rotate about
            the y axis" or "do not rotate more than 45°"), then a <see cref="P:DigitalRune.Animation.Character.CcdIKSolver.LimitBoneTransforms"/>
            callback must be set. The <see cref="P:DigitalRune.Animation.Character.CcdIKSolver.LimitBoneTransforms"/> callback must be a method that
            checks the current bone rotations and removes any invalid rotations. See 
            <see cref="P:DigitalRune.Animation.Character.CcdIKSolver.LimitBoneTransforms"/> for more details.
            </para>
            <para>
            See also <see cref="T:DigitalRune.Animation.Character.IKSolver"/> for more general information. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.CcdIKSolver.RootBoneIndex">
            <summary>
            Gets or sets the index of the root bone.
            </summary>
            <value>The index of the root bone.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.CcdIKSolver.TipBoneIndex">
            <summary>
            Gets or sets the index of the tip bone.
            </summary>
            <value>The index of the tip bone.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.CcdIKSolver.TipOffset">
            <summary>
            Gets or sets the tip offset in tip bone space.
            </summary>
            <value>
            The tip offset in tip bone space. The default is a zero vector.
            </value>
            <remarks>
            If this offset is zero, the IK solver will try to move the origin of the tip bone to the
            <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/>. For example, if the solver is used for an arm and the hand
            bone is the tip bone, then the character will "grab" the target with the wrist where the
            hand bone starts. The <see cref="P:DigitalRune.Animation.Character.CcdIKSolver.TipOffset"/> should be set to the offset from the wrist to
            the hand center. Then the target will be grabbed correctly with the hand center and not the
            wrist.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.CcdIKSolver.NumberOfIterations">
            <summary>
            Gets or sets the number of iterations.
            </summary>
            <value>The number of iterations. The default is 10.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.CcdIKSolver.AllowedDeviation">
            <summary>
            Gets or sets the allowed distance error.
            </summary>
            <value>The allowed distance error. The default is 0.01.</value>
            <remarks>
            <para>
            This solver uses an iterative algorithm. The algorithm ends early if the distance between
            the <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> and the tip of the chain is less than 
            <see cref="P:DigitalRune.Animation.Character.CcdIKSolver.AllowedDeviation"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.CcdIKSolver.BoneGain">
            <summary>
            Gets or sets the bone gain.
            </summary>
            <value>The bone gain in the range ]0, 1]. The default is 1.</value>
            <remarks>
            If this value is less than 1, the algorithm will need more iterations to reach the target
            but the result will be smoother.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.CcdIKSolver.LimitBoneTransforms">
            <summary>
            Gets or sets the a callback that enforces rotation limits.
            </summary>
            <value>
            The callback that enforces rotation limits. The default is <see langword="null"/>.
            </value>
            <remarks>
            <para>
            If this property is <see langword="null"/>, the bone rotations are not limited. If the bone 
            rotations should be limited, this property must be set to a method that enforces the bone 
            limits: The method should simply check the bones and rotate the bones back to the allowed 
            range. 
            </para>
            <para>
            This method is called every time a bone was rotated. The method will get the bone index as 
            the only parameter. The method should check and correct the rotation of the given bone. (But
            it can check other bones as well, e.g. child bones if they must have a certain orientation 
            in model space...)
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.CcdIKSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.CcdIKSolver"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.CcdIKSolver.OnInvalidate">
            <summary>
            Called when the <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> was exchanged.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.CcdIKSolver.OnSolve(System.Single)">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)"/> is called.
            </summary>
            <param name="deltaTime">The current time step (in seconds).</param>
        </member>
        <member name="T:DigitalRune.Animation.Character.ClosedFormIKSolver">
            <summary>
            Modifies a skeleton using a non-iterative, closed-form IK solver.
            </summary>
            <remarks>
            <para>
            This <see cref="T:DigitalRune.Animation.Character.IKSolver"/> uses non-iterative, closed-form IK solver algorithm to modify a
            bone chain to reach the <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> position. <see cref="P:DigitalRune.Animation.Character.ClosedFormIKSolver.RootBoneIndex"/>
            determines the first bone in the chain. <see cref="P:DigitalRune.Animation.Character.ClosedFormIKSolver.TipBoneIndex"/> determines the last bone
            that is included in the chain. This IK solver rotates all bones in the chain, so that the tip
            of the bone chain reaches the <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> position.
            </para>
            <para>
            This IK solver does not support bone rotation limits.
            </para>
            <para>
            See also <see cref="T:DigitalRune.Animation.Character.IKSolver"/> for more general information. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.ClosedFormIKSolver.RootBoneIndex">
            <summary>
            Gets or sets the index of the root bone.
            </summary>
            <value>The index of the root bone.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.ClosedFormIKSolver.TipBoneIndex">
            <summary>
            Gets or sets the index of the tip bone.
            </summary>
            <value>The index of the tip bone.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.ClosedFormIKSolver.TipOffset">
            <summary>
            Gets or sets the tip offset in tip bone space.
            </summary>
            <value>
            The tip offset in tip bone space. The default is a zero vector.
            </value>
            <remarks>
            If this offset is zero, the IK solver will try to move the origin of the tip bone to the
            <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/>. For example, if the solver is used for an arm and the hand
            bone is the tip bone, then the character will "grab" the target with the wrist where the
            hand bone starts. The <see cref="P:DigitalRune.Animation.Character.ClosedFormIKSolver.TipOffset"/> should be set to the offset from the wrist to
            the hand center. Then the target will be grabbed correctly with the hand center and not the
            wrist.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.ClosedFormIKSolver.OnInvalidate">
            <summary>
            Called when the <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> was exchanged.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.ClosedFormIKSolver.OnSolve(System.Single)">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)"/> is called.
            </summary>
            <param name="deltaTime">The current time step (in seconds).</param>
        </member>
        <member name="T:DigitalRune.Animation.Character.IKSolver">
            <summary>
            Modifies a <see cref="P:DigitalRune.Animation.Character.IKSolver.SkeletonPose"/> using inverse kinematics (IK).
            </summary>
            <remarks>
            <para>
            An inverse kinematics (IK) solver transforms the bones of a skeleton in order to achieve
            a desired pose. For instance, a <see cref="T:DigitalRune.Animation.Character.LookAtIKSolver"/> rotates a bone (e.g. a head)
            to look into a desired direction. A <see cref="T:DigitalRune.Animation.Character.TwoJointIKSolver"/> can be used to 
            bend/stretch a leg so that it touches the ground, or to make an arm reach a certain target.
            </para>
            <para>
            An <see cref="T:DigitalRune.Animation.Character.IKSolver"/> instances modifies a <see cref="P:DigitalRune.Animation.Character.IKSolver.SkeletonPose"/> instance. And the
            goal is to point to or reach the <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> position. The solver works in model 
            space - not in world space. Therefore, <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> and other positions and 
            orientations must be specified in model space.
            </para>
            <para>
            If <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)"/> is called and <see cref="P:DigitalRune.Animation.Character.IKSolver.MaxAngularVelocity"/> is 
            <see cref="F:System.Single.PositiveInfinity"/> (default), the <see cref="P:DigitalRune.Animation.Character.IKSolver.SkeletonPose"/> is changed
            instantly. To avoid this instantaneous change, a <see cref="P:DigitalRune.Animation.Character.IKSolver.MaxAngularVelocity"/> limit can 
            be set, then the bones will rotate slowly to the target pose over several <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)"/> 
            calls. <see cref="P:DigitalRune.Animation.Character.IKSolver.MaxAngularVelocity"/> defines the maximal rotation velocity for each bone.
            (However, limiting <see cref="P:DigitalRune.Animation.Character.IKSolver.MaxAngularVelocity"/> is not ideal if the model is also 
            animated, because the animation might reset the previous IK pose.)
            </para>
            <para>
            The solver also has a <see cref="P:DigitalRune.Animation.Character.IKSolver.Weight"/> parameter. If the weight is 0, the solver is 
            disabled. If the weight is 1, the solver tries its best to make the skeleton reach the target. 
            A weight less than 1 can be used to blend the target skeleton pose with the unmodified 
            skeleton pose.
            </para>
            <para>
            Note that the <see cref="T:DigitalRune.Animation.Character.IKSolver"/> implements <see cref="T:DigitalRune.Animation.IAnimatableObject"/> which means
            that it has properties which can be animated: The only property that can be animated is the 
            <see cref="P:DigitalRune.Animation.Character.IKSolver.Weight"/>, the other properties are not animatable. Animating the weight can be 
            useful to fade an IK pose in or out.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.IKSolver.SkeletonPose">
            <summary>
            Gets or sets the skeleton pose.
            </summary>
            <value>The skeleton pose.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.IKSolver.Target">
            <summary>
            Gets or sets the target position in model space.
            </summary>
            <value>The target position in model space.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.IKSolver.Weight">
            <summary>
            Gets or sets the weight.
            </summary>
            <value>The weight. The default is 1.</value>
            <remarks>
            <para>
            The solver has a <see cref="P:DigitalRune.Animation.Character.IKSolver.Weight"/> parameter. If the weight is 0, the solver is disabled.
            If the weight is 1, the solver tries its best to make the skeleton reach the target. A 
            weight less than 1 can be used to blend the target skeleton pose with the unmodified 
            skeleton pose.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.IKSolver.MaxAngularVelocity">
            <summary>
            Gets or sets the maximal angular velocity per bone.
            </summary>
            <value>
            The maximal angular velocity. The default is <see cref="F:System.Single.PositiveInfinity"/> 
            (= no limit).
            </value>
            <remarks>
            If <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)"/> is called and <see cref="P:DigitalRune.Animation.Character.IKSolver.MaxAngularVelocity"/> is 
            <see cref="F:System.Single.PositiveInfinity"/> (default), the <see cref="P:DigitalRune.Animation.Character.IKSolver.SkeletonPose"/> is changed
            instantly. To avoid this instantaneous change, a <see cref="P:DigitalRune.Animation.Character.IKSolver.MaxAngularVelocity"/> limit can 
            be set, then the bones will rotate slowly to the target pose over several 
            <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)"/> calls. <see cref="P:DigitalRune.Animation.Character.IKSolver.MaxAngularVelocity"/> defines the maximal rotation 
            velocity for each bone.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.IKSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.IKSolver"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)">
            <summary>
            Modifies the <see cref="P:DigitalRune.Animation.Character.IKSolver.SkeletonPose"/> to reach the <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> position.
            </summary>
            <param name="deltaTime">The current time step (in seconds).</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.IKSolver.OnSolve(System.Single)">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)"/> is called.
            </summary>
            <param name="deltaTime">The current time step (in seconds).</param>
            <remarks>
            <strong>Notes to Inheritors: </strong><br/>
            This method must be implemented and perform the IK computations. When this method is called, 
            it is guaranteed that <see cref="P:DigitalRune.Animation.Character.IKSolver.SkeletonPose"/> is not <see langword="null"/>, and
            the <see cref="P:DigitalRune.Animation.Character.IKSolver.Weight"/> is not 0.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.IKSolver.OnInvalidate">
            <summary>
            Called when the <see cref="P:DigitalRune.Animation.Character.IKSolver.SkeletonPose"/> was exchanged.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.IKSolver.RequiresBlending">
            <summary>
            Determines whether the resulting bone transforms need to be interpolated with the original 
            bone transforms.
            </summary>
            <returns>
            <see langword="true"/> if the resulting bone transforms need to be interpolated with the 
            original bone transforms; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.IKSolver.BlendBoneTransform(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@)">
            <summary>
            Applies the weight to a given bone by blending the bone transforms.
            </summary>
            <param name="originalTransform">
            In: The original bone transform.
            </param>
            <param name="targetTransform">
            In: The target bone transform.<br/>
            Out: The blended bone transform.
            </param>
        </member>
        <member name="M:DigitalRune.Animation.Character.IKSolver.RequiresLimiting(System.Single,System.Single@)">
            <summary>
            Determines whether the rotations need to be limited.
            </summary>
            <param name="deltaTime">The elapsed time since the last time step.</param>
            <param name="maxRotationAngle">The max rotation angle.</param>
            <returns>
            <see langword="true"/> if the max velocity defines a finite useful limit and rotations need
            to be limited; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.IKSolver.LimitBoneTransform(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,System.Single)">
            <summary>
            Applies max velocity limit to the given bone transform.
            </summary>
            <param name="originalTransform">
            In: The original bone transform.
            </param>
            <param name="targetTransform">
            In: The target bone transform.<br/>
            Out: The limited bone transform.
            </param>
            <param name="maxRotationAngle">The max rotation angle.</param>
        </member>
        <member name="P:DigitalRune.Animation.Character.IKSolver.DigitalRune#INamedObject#Name">
            <summary>
            Not implemented.
            </summary>
            <value>
            Not implemented. Always returns <see cref="F:System.String.Empty"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Animation.Character.IKSolver.DigitalRune#Animation#IAnimatableObject#GetAnimatedProperties">
            <summary>
            Gets the properties which are currently being animated.
            </summary>
            <returns>
            The properties which are currently being animated.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.IKSolver.DigitalRune#Animation#IAnimatableObject#GetAnimatableProperty``1(System.String)">
            <summary>
            Gets the property with given name and type which can be animated.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="name">The name of the property.</param>
            <returns>
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty"/> that has the given name and type; otherwise, 
            <see langword="null"/> if the object does not have an property with this name or type.
            </returns>
            <remarks>
            The <see cref="P:DigitalRune.Animation.Character.IKSolver.Weight"/> property of an <see cref="T:DigitalRune.Animation.Character.IKSolver"/> can be animated. The 
            property is identified using the string "Weight".
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.Character.JacobianTransposeIKSolver">
            <summary>
            Modifies a skeleton using the Jacobian Transpose method.
            </summary>
            <remarks>
            <para>
            This <see cref="T:DigitalRune.Animation.Character.IKSolver"/> uses the Jacobian Transpose algorithm to modify a bone chain to
            reach the <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> position. <see cref="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.RootBoneIndex"/> determines the
            first bone in the chain. <see cref="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.TipBoneIndex"/> determines the last bone that is included
            in the chain. This IK solver rotates all bones in the chain, so that the tip of the bone chain
            reaches the <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> position.
            </para>
            <para>
            This solver uses an iterative algorithm. <see cref="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.NumberOfIterations"/> limits the maximal
            number allowed iterations. The algorithm ends early if the distance between the
            <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> and the tip of the chain is less than
            <see cref="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.AllowedDeviation"/>. In each iteration, the solver computes "forces" that pull the
            tip of the bone chain to the target. It then makes an Euler integration step to move the bones
            as determined by the computed forces. <see cref="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.StepSize"/> determines the time step of the
            numeric integration. If this value is too large, the solver becomes unstable. If this value
            too small, the solver needs many iterations to reach the target. A good value for a specific
            application must be determined by experimentation.
            </para>
            <para>
            <strong>Bone rotation limits: </strong><br/>
            Per default, the <see cref="T:DigitalRune.Animation.Character.IKSolver"/> assumes that the bones can rotate in any direction
            without rotation limits. If the bone rotations should be limited (e.g. "do not rotate about
            the y axis" or "do not rotate more than 45°"), then a <see cref="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.LimitBoneTransforms"/>
            callback must be set. The 
            <see cref="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.LimitBoneTransforms"/> callback must be a method that checks the current bone
            rotations and removes any invalid rotations. See <see cref="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.LimitBoneTransforms"/> for more
            details.
            </para>
            <para>
            See also <see cref="T:DigitalRune.Animation.Character.IKSolver"/> for more general information. 
            </para>
            <para>
            <strong>Caution:</strong><br/>
            This IK solver allocates heap memory and creates garbage. If garbage collector performance is
            important (e.g. on the Xbox 360 or Windows Phone 7), do not use this IK solver.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.RootBoneIndex">
            <summary>
            Gets or sets the index of the root bone.
            </summary>
            <value>The index of the root bone.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.TipBoneIndex">
            <summary>
            Gets or sets the index of the tip bone.
            </summary>
            <value>The index of the tip bone.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.TipOffset">
            <summary>
            Gets or sets the tip offset in tip bone space.
            </summary>
            <value>
            The tip offset in tip bone space. The default is a zero vector.
            </value>
            <remarks>
            If this offset is zero, the IK solver will try to move the origin of the tip bone to the
            <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/>. For example, if the solver is used for an arm and the hand
            bone is the tip bone, then the character will "grab" the target with the wrist where the
            hand bone starts. The <see cref="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.TipOffset"/> should be set to the offset from the wrist to
            the hand center. Then the target will be grabbed correctly with the hand center and not the
            wrist.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.NumberOfIterations">
            <summary>
            Gets or sets the number of iterations.
            </summary>
            <value>The number of iterations. The default is 100.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.AllowedDeviation">
            <summary>
            Gets or sets the allowed distance error.
            </summary>
            <value>The allowed distance error. The default is 0.01.</value>
            <remarks>
            <para>
            This solver uses an iterative algorithm. The algorithm ends early if the distance between
            the <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> and the tip of the chain is less than 
            <see cref="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.AllowedDeviation"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.StepSize">
            <summary>
            Gets or sets the size of the Euler integration step.
            </summary>
            <value>The size of the Euler integration step. The default is 0.01.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.JacobianTransposeIKSolver.LimitBoneTransforms">
            <summary>
            Gets or sets the a callback that enforces rotation limits.
            </summary>
            <value>
            The callback that enforces rotation limits. The default is <see langword="null"/>.
            </value>
            <remarks>
            <para>
            If this property is <see langword="null"/>, the bone rotations are not limited. If the bone
            rotations should be limited, this property must be set to a method that enforces the bone
            limits: The method should simply check the bones and rotate the bones back to the allowed
            range. 
            </para>
            <para>
            This method is called after each iteration. The method should check and correct the 
            rotation of all bones in the chain.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.JacobianTransposeIKSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.JacobianTransposeIKSolver"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.JacobianTransposeIKSolver.OnInvalidate">
            <summary>
            Called when the <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> was exchanged.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.JacobianTransposeIKSolver.OnSolve(System.Single)">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)"/> is called.
            </summary>
            <param name="deltaTime">The current time step (in seconds).</param>
        </member>
        <member name="T:DigitalRune.Animation.Character.LookAtIKSolver">
            <summary>
            Rotates a bone to look at a target.
            </summary>
            <remarks>
            <para>
            This <see cref="T:DigitalRune.Animation.Character.IKSolver"/> rotates a bone - usually the head bone - to look to the 
            <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/> position. The bone to be rotated is specified by 
            <see cref="P:DigitalRune.Animation.Character.LookAtIKSolver.BoneIndex"/>.
            </para>
            <para>
            <see cref="P:DigitalRune.Animation.Character.LookAtIKSolver.Forward"/> defines the forward look direction relative to the bone space. 
            <see cref="P:DigitalRune.Animation.Character.LookAtIKSolver.Up"/> defines the up direction relative to the bone space. <see cref="P:DigitalRune.Animation.Character.LookAtIKSolver.EyeOffset"/> 
            can be used to offset look origin relative to the bone space. For example, the origin of a 
            "head" bone is often at the neck of a character. <see cref="P:DigitalRune.Animation.Character.LookAtIKSolver.EyeOffset"/> can be used to set
            the offset from the bone origin to the eyes of the character. 
            </para>
            <para>
            <see cref="P:DigitalRune.Animation.Character.LookAtIKSolver.Limit"/> specifies an angular limit like a cone around the forward direction.
            The IK solver will not rotate the beyond this limit. See <see cref="P:DigitalRune.Animation.Character.LookAtIKSolver.Limit">description</see>
            of the property.
            </para>
            <para>
            See also <see cref="T:DigitalRune.Animation.Character.IKSolver"/> for more general information. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.LookAtIKSolver.BoneIndex">
            <summary>
            Gets or sets the index of the bone.
            </summary>
            <value>The index of the bone (usually the head bone).</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.LookAtIKSolver.Forward">
            <summary>
            Gets or sets the forward direction in bone space.
            </summary>
            <value>The forward direction in bone space.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.LookAtIKSolver.Up">
            <summary>
            Gets or sets the up direction in bone space.
            </summary>
            <value>The up direction in bone space.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.LookAtIKSolver.EyeOffset">
            <summary>
            Gets or sets the eye offset in bone space.
            </summary>
            <value>The eye offset in bone space.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.LookAtIKSolver.Limit">
            <summary>
            Gets or sets the rotation limit.
            </summary>
            <value>
            The rotation limit in radians in the range [0, π/2[. If the value is not in this 
            range, the limit is disabled. Per default, the value is ∞ and the limit is disabled.
            </value>
        </member>
        <member name="M:DigitalRune.Animation.Character.LookAtIKSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.LookAtIKSolver"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.LookAtIKSolver.OnSolve(System.Single)">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)"/> is called.
            </summary>
            <param name="deltaTime">The current time step (in seconds).</param>
        </member>
        <member name="T:DigitalRune.Animation.Character.TwoJointIKSolver">
            <summary>
            Modifies a two-bone chain to reach a certain target.
            </summary>
            <remarks>
            <para>
            This <see cref="T:DigitalRune.Animation.Character.IKSolver"/> modifies two bones in a bone chain. It is typically used for arms
            and legs. For the solver, the first bone (see <see cref="P:DigitalRune.Animation.Character.TwoJointIKSolver.RootBoneIndex"/>) can rotate freely.
            The second bone (see <see cref="P:DigitalRune.Animation.Character.TwoJointIKSolver.HingeBoneIndex"/>) is attached with a hinge. The bone chain 
            can contain more than 2 bones (e.g. the upper leg can consist of several bones). But only 2 
            bones are modified. The bones are rotated so that the end of the chain (defined by 
            <see cref="P:DigitalRune.Animation.Character.TwoJointIKSolver.TipBoneIndex"/>) reaches the target.
            </para>
            <para>
            Limitations of this IK solver: The bones must lie in a plane normal to the hinge axis;
            otherwise, the target will not be reached exactly.
            </para>
            <para>
            See also <see cref="T:DigitalRune.Animation.Character.IKSolver"/> for more general information. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.RootBoneIndex">
            <summary>
            Gets or sets the index of the root bone.
            </summary>
            <value>
            The index of the root bone; for example, the upper arm bone (shoulder joint) or the upper
            leg bone (hip joint).
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.TipBoneIndex">
            <summary>
            Gets or sets the index of the tip bone that determines the end of the chain.
            </summary>
            <value>
            The index of the tip bone that determines the end of the chain; for example, the hand bone
            (wrist joint) or the foot bone (ankle joint).
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.TipOffset">
            <summary>
            Gets or sets the tip offset relative to the tip bone.
            </summary>
            <value>
            The tip offset relative to the tip bone; for example, the vector from the wrist to the hand 
            center or the vector from ankle to the bottom of a foot. The default value is a zero vector.
            </value>
            <remarks>
            If this offset is zero, the IK solver will try to move the origin of the tip bone to the
            <see cref="P:DigitalRune.Animation.Character.IKSolver.Target"/>. For example, if the solver is used for an arm and the hand
            bone is the tip bone, then the character will "grab" the target with the wrist where the
            hand bone starts. The <see cref="P:DigitalRune.Animation.Character.TwoJointIKSolver.TipOffset"/> should be set to the offset from the wrist to
            the hand center. Then the target will be grabbed correctly with the hand center and not the
            wrist.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.HingeBoneIndex">
            <summary>
            Gets or sets the index of the hinge bone.
            </summary>
            <value>
            The index of the hinge bone; for example, the lower arm bone (elbow joint) or the lower leg 
            bone (knee joint).
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.HingeAxis">
            <summary>
            Gets or sets the hinge axis relative to the root bone.
            </summary>
            <value>
            The hinge axis relative to the root bone. The vector must not be a zero length
            vector. The default is (0, 1, 0).
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.MinHingeAngle">
            <summary>
            Gets or sets the min hinge angle.
            </summary>
            <value>
            The min hinge angle in radians. The default is 0.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.MaxHingeAngle">
            <summary>
            Gets or sets the max hinge angle.
            </summary>
            <value>
            The max hinge angle in radians. The default is 3π/4 (= 135°).
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.TwoJointIKSolver.TipBoneOrientation">
            <summary>
            Gets or sets the desired absolute tip bone rotation.
            </summary>
            <value>
            The desired absolute tip bone rotation. The default is <see langword="null"/>.
            </value>
            <remarks>
            <para>
            If this value is <see langword="null"/>, the IK solver does not influence the orientation
            of the tip bone. This value can be set to a target rotation relative to model space. The IK
            solver will make sure that the tip bone ends up in this orientation.
            </para>
            <para>
            This is useful if, for example, a character grabs a bar with the hand. The hand bone should 
            be aligned with the direction of the bar. <see cref="P:DigitalRune.Animation.Character.TwoJointIKSolver.TipBoneOrientation"/> must be set 
            according to the orientation of the bar.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.TwoJointIKSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.TwoJointIKSolver"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.TwoJointIKSolver.OnInvalidate">
            <summary>
            Called when the <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> was exchanged.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.TwoJointIKSolver.OnSolve(System.Single)">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.IKSolver.Solve(System.Single)"/> is called.
            </summary>
            <param name="deltaTime">The current time step (in seconds).</param>
        </member>
        <member name="T:DigitalRune.Animation.Character.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Animation.Character"/> namespace provides support for 3D
            character animation.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation">
            <summary>
            Animates a <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> based on predefined key frames.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation"/> is an optimized <see cref="T:DigitalRune.Animation.KeyFrameAnimation`1"/>
            for character animation. A <see cref="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation"/> instance animates the bone 
            transforms of a <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/>. It can animate a single bone (e.g. only the head),
            several bones (e.g. an upper body animation) or all bones of skeleton at once.
            </para>
            <para>
            A <see cref="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation"/> is defined by adding key frames calling the method
            <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.AddKeyFrame(System.Int32,System.TimeSpan,DigitalRune.Animation.Character.SrtTransform)"/> for the animated bones. The animation controls a bone if at least
            one key frame for the bone has been added (see also <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.IsBoneAnimated(System.Int32)"/>). After
            adding all key frames, <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/> must be called. <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/> optimizes the
            animation data for fast access at runtime.
            </para>
            <para>
            When key frames are added after calling <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/>, the animation is automatically
            reset into an editable state. All internal optimizations will be discarded!
            <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/> needs to be called again after all key frames are added.
            </para>
            <para>
            <strong>Bone Channel Weights:</strong><br/>
            A weight can be set for each animated bone (see <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.SetWeight(System.Int32,System.Single)"/>). If the weight is 0,
            the bone is not animated. If the weight is 1, the bone is animated and replaces all preceding 
            animations in the animation composition chain. If the weight is less than 1, the bone 
            animation is blended with preceding animations.
            </para>
            <para>
            Weights can be modified before and after <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/>. For example, weights can be
            modified while the animation is running.
            </para>
            <para>
            <strong>Key Frame Interpolation:</strong><br/>
            A key frame animation contains a list of key frames that define the animation values at
            certain points in time. When the animation is played the class automatically looks up the
            animation value in the list of key frames. The property <see cref="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.EnableInterpolation"/>
            defines whether interpolation between key frames is enabled. When the property is set
            (default), the values between two key frames are interpolated using linear interpolation.
            </para>
            <para>
            <strong>Cyclic Animations:</strong><br/>
            A skeleton key frame animation, by default, runs until the last key frame is reached. The 
            types <see cref="T:DigitalRune.Animation.TimelineClip"/> and <see cref="T:DigitalRune.Animation.AnimationClip`1"/> can be used to repeat the 
            entire key frame animation (or a certain clip) for a number of times using a certain 
            loop-behavior (see <see cref="P:DigitalRune.Animation.TimelineClip.LoopBehavior"/>).
            </para>
            <para>
            The first and the last key frame need to be identical to achieve a smooth cyclic
            interpolation.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.EnableInterpolation">
            <summary>
            Gets or sets a value indicating whether values between key frames are interpolated.
            </summary>
            <value>
            <see langword="true"/> if interpolation of key frames is enabled; otherwise, 
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.FillBehavior">
            <summary>
            Gets or sets a value that specifies how the animation behaves when it reaches the end of its
            duration.
            </summary>
            <value>
            A value that specifies how the animation behaves when it reaches the end of its duration.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.IsAdditive">
            <summary>
            Gets or sets a value indicating whether the output of the animation is added to the current
            value of the property that is being animated.
            </summary>
            <value>
            <see langword="true"/> if this animation is additive; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.IsFrozen">
            <summary>
            Gets a value indicating whether this animation is frozen.
            </summary>
            <value>
            <see langword="true"/> if this animation is frozen; otherwise, <see langword="false"/>.
            </value>
            <seealso cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.TargetObject">
            <summary>
            Gets or sets the property to which the animation is applied by default.
            </summary>
            <value>The property to which the animation is applied by default.</value>
            <inheritdoc cref="P:DigitalRune.Animation.ITimeline.TargetObject"/>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.TargetProperty">
            <summary>
            Gets or sets the property to which the animation is applied by default.
            </summary>
            <value>The property to which the animation is applied by default.</value>
            <inheritdoc cref="P:DigitalRune.Animation.IAnimation.TargetProperty"/>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Traits">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Internals">
            <exclude/>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.AddKeyFrame(System.Int32,System.TimeSpan,DigitalRune.Animation.Character.SrtTransform)">
            <summary>
            Adds a key frame for the specified bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <param name="time">The time of the key frame.</param>
            <param name="boneTransform">The bone transform.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="boneIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Clear">
            <summary>
            Removes all key frames and bone weights.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A copy of this key frame animation.</returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze">
            <summary>
            Prepares this animation for runtime usage. (Must be called after all key frames have been
            added!)
            </summary>
            <remarks>
            <para>
            <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/> must be called after all key frames have been added (see method
            <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.AddKeyFrame(System.Int32,System.TimeSpan,DigitalRune.Animation.Character.SrtTransform)"/>) and before the animation can be used in the animation system.
            <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/> optimizes the internal data for fast access at runtime.
            </para>
            <para>
            When key frames are added or removed after calling <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/>, the animation is
            automatically reset into an editable state. All internal optimizations will be discarded!
            <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/> needs to be called again after all key frames are added/removed.
            </para>
            <para>
            Weights can be modified before and after <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/>. For example, weights can be
            modified while the animation is running.
            </para>
            </remarks>
            <seealso cref="P:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.IsFrozen"/>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.IsBoneAnimated(System.Int32)">
            <summary>
            Determines whether this animation animates the specified bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <returns>
            <see langword="true"/> if the bone is animated; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetChannelIndex(System.Int32)">
            <summary>
            Gets the index in <see cref="F:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation._channels"/> for the given bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <returns>
            The index in <see cref="F:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation._channels"/> or a negative value (see 
            <see cref="M:System.Array.BinarySearch``1(``0[],``0)"/> description).
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetWeight(System.Int32)">
            <summary>
            Gets the weight for a specific bone animation channel.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <returns>
            The weight. A value of 0 means that the channel is disabled. A value of 1 means that the
            channel is fully enabled. If the value is less than 1, then animation of the bone is mixed
            with preceding animations. If the animation does contain a bone animation channel for the
            given bone then 1 (default value) is returned.
            </returns>
            <remarks>
            Call <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.IsBoneAnimated(System.Int32)"/> to check whether this animation contains a bone animation
            channel for the specified bone.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.SetWeight(System.Int32,System.Single)">
            <summary>
            Sets the weight for a specific bone animation channel.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <param name="weight">
            The weight. Use 0 to disable the channel. Use 1 to fully enable the channel. If the weight
            is less than 1, the animation of the bone is mixed with preceding animations. The default
            weight of all bone animation channels is 1.
            </param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.DigitalRune#Animation#ITimeline#CreateInstance">
            <inheritdoc/>
            <exception cref="T:DigitalRune.Animation.AnimationException">
            This animation is not frozen. <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/> must be called before the animation can
            be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.DigitalRune#Animation#IAnimation#CreateBlendAnimation">
            <inheritdoc/>
            <exception cref="T:DigitalRune.Animation.AnimationException">
            This animation is not frozen. <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/> must be called before the animation can
            be used.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetAnimationTime(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetState(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetTotalDuration">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetValue(System.TimeSpan,DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@)">
            <exception cref="T:DigitalRune.Animation.AnimationException">
            This animation is not frozen. <see cref="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Freeze"/> must be called before the animation can
            be used.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="defaultSource"/>, <paramref name="defaultTarget"/> or
            <paramref name="result"/> is <see langword="null"/>.
            </exception>
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetTimeIndex(System.TimeSpan)">
            <summary>
            Gets the index in <see cref="F:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation._times"/> for the given key frame time.
            </summary>
            <param name="time">The time.</param>
            <returns>The index in <see cref="F:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation._times"/>.</returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetBoneTransform(System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Gets the bone transform for a certain time considering key frame interpolation.
            </summary>
            <param name="channelIndex">The index in <see cref="F:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation._channels"/>.</param>
            <param name="timeIndex">The index in <see cref="F:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation._times"/>.</param>
            <param name="time">The animation time.</param>
            <returns>The animation value.</returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetBoneKeyFrame(System.Int32,System.Int32,System.TimeSpan@,DigitalRune.Animation.Character.SrtTransform@)">
            <summary>
            Gets one bone key frame for a given channel and key frame index.
            </summary>
            <param name="channelIndex">The index in <see cref="F:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation._channels"/>.</param>
            <param name="keyFrameIndex">
            The index in <see cref="F:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation._keyFrames"/> for the given channel.
            </param>
            <param name="time">The key frame time.</param>
            <param name="transform">The transform.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.GetBoneKeyFrames(System.Int32,System.Int32,System.TimeSpan@,DigitalRune.Animation.Character.SrtTransform@,System.TimeSpan@,DigitalRune.Animation.Character.SrtTransform@)">
            <summary>
            Gets two bone key frame for a given channel and key frame index.
            </summary>
            <param name="channelIndex">The index in <see cref="F:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation._channels"/>.</param>
            <param name="keyFrameIndex">The index of the first key frame.</param>
            <param name="time0">The time of the first key frame.</param>
            <param name="transform0">The transform of the first key frame.</param>
            <param name="time1">The time of the second key frame.</param>
            <param name="transform1">The transform of the second key frame.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation.Compress(System.Single,System.Single,System.Single)">
            <summary>
            Compresses the animation using a simple lossy compression algorithm.
            </summary>
            <param name="scaleThreshold">The scale threshold.</param>
            <param name="rotationThreshold">The rotation threshold in degrees.</param>
            <param name="translationThreshold">The translation threshold.</param>
            <returns>
            The amount of removed key frames in the range [0, 1]. 0 means that no key frames have been
            removed. 0.5 means that 50% of the key frames have been removed. Etc.
            </returns>
            <remarks>
            <para>
            This method compresses the animation by removing key frames that can be computed by
            interpolation of nearby key frames. The threshold parameters define the allowed errors. If
            the thresholds are 0, this compression is lossless. If the thresholds are greater than 0
            (recommended), the compression is lossy. The best way to determine optimal thresholds is to
            compare the compressed animation with the uncompressed animation visually.
            </para>
            <para>
            This method does nothing if any threshold is negative.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.Character.BoneMappingDirection">
            <summary>
            Defines the mapping direction of a <see cref="T:DigitalRune.Animation.Character.BoneMapper"/>
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.Character.BoneMappingDirection.AToB">
            <summary>
            Skeleton A is mapped to skeleton B. 
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.Character.BoneMappingDirection.BToA">
            <summary>
            Skeleton B is mapped to skeleton A. 
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.Character.BoneMappingDirection.Both">
            <summary>
            The bone mapper maps in both directions.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.Character.BoneMapper">
            <summary>
            Maps a bone transform of a skeleton to a bone transform of another skeleton.
            </summary>
            <remarks>
            <para>
            A bone mapper observes the bone transform of a certain bone on one skeleton and sets the bone
            transform of the corresponding bone in another skeleton. Typically, bone mappers try to set
            bone transform so that posture of the target skeleton is as similar as possible to the posture
            of the source skeleton.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.BoneMapper.SkeletonMapper">
            <summary>
            Gets or sets the skeleton mapper. (This property is set automatically and should be
            treated as read-only.)
            </summary>
            <value>The skeleton mapper.</value>
            <remarks>
            This property is automatically set when the <see cref="T:DigitalRune.Animation.Character.BoneMapper"/> is added to a
            <see cref="P:DigitalRune.Animation.Character.BoneMapper.SkeletonMapper"/>. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.BoneMapper.Direction">
            <summary>
            Gets or sets the desired mapping direction.
            </summary>
            <value>
            The mapping direction direction. The default is <see cref="F:DigitalRune.Animation.Character.BoneMappingDirection.Both"/>.
            </value>
            <remarks>
            This bone mapper only maps in the direction defined by this property. For example, 
            if the <see cref="P:DigitalRune.Animation.Character.BoneMapper.Direction"/> is set to <see cref="F:DigitalRune.Animation.Character.BoneMappingDirection.AToB"/>, then
            the bone mapper does nothing when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapBToA"/> is called.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.BoneMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.BoneMapper"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.BoneMapper.Invalidate">
            <summary>
            Invalidates all cached data of this bone mapper.
            </summary>
            <remarks>
            This method is automatically called by the <see cref="P:DigitalRune.Animation.Character.BoneMapper.SkeletonMapper"/> when the mapped 
            <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/>s are changed and cached data should be invalidated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.BoneMapper.OnInvalidate">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.Invalidate"/> is called.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.BoneMapper.MapAToB">
            <summary>
            Sets the bone transform in the second skeleton to match skeleton pose of the first skeleton.
            </summary>
            <exception cref="T:DigitalRune.Animation.AnimationException"><see cref="P:DigitalRune.Animation.Character.BoneMapper.SkeletonMapper"/> is not set.</exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.BoneMapper.OnMapAToB">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapAToB"/> was called.
            </summary>
            <remarks>
            <strong>Notes to Inheritors:</strong><br/>
            This method must be implemented to perform the mapping operation. When this method is 
            called, it is guaranteed that <see cref="P:DigitalRune.Animation.Character.BoneMapper.Direction"/> is configured to map in
            this direction, and <see cref="P:DigitalRune.Animation.Character.BoneMapper.SkeletonMapper"/> is set.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.BoneMapper.MapBToA">
            <summary>
            Sets the bone transform in the first skeleton to match skeleton pose of the second
            skeleton.
            </summary>
            <exception cref="T:DigitalRune.Animation.AnimationException"><see cref="P:DigitalRune.Animation.Character.BoneMapper.SkeletonMapper"/> is not set.</exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.BoneMapper.OnMapBToA">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapBToA"/> was called.
            </summary>
            <remarks>
            <strong>Notes to Inheritors:</strong><br/>
            This method must be implemented to perform the mapping operation. When this method is 
            called, it is guaranteed that <see cref="P:DigitalRune.Animation.Character.BoneMapper.Direction"/> is configured to map in 
            this direction, and <see cref="P:DigitalRune.Animation.Character.BoneMapper.SkeletonMapper"/> is set.
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.Character.BoneMapperCollection">
            <summary>
            Represents a collection of <see cref="T:DigitalRune.Animation.Character.BoneMapper"/> instances.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.BoneMapperCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.BoneMapperCollection"/> class.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.Character.ChainBoneMapper">
            <summary>
            Maps the orientation of a whole bone chain.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Animation.Character.ChainBoneMapper"/> can be used if the mapped skeletons have a different number of
            bones. A bone chain starts at a bone (<see cref="P:DigitalRune.Animation.Character.ChainBoneMapper.RootBoneIndexA"/> and 
            <see cref="P:DigitalRune.Animation.Character.ChainBoneMapper.RootBoneIndexB"/>). This bone defines the root (or origin) of the chain. And the
            chain has an end bone (<see cref="P:DigitalRune.Animation.Character.ChainBoneMapper.TipBoneIndexA"/> and <see cref="P:DigitalRune.Animation.Character.ChainBoneMapper.TipBoneIndexB"/>). The end
            bone is not included in the chain. It defines the tip of the chain. 
            </para>
            <para>
            The <see cref="T:DigitalRune.Animation.Character.ChainBoneMapper"/> computes a direction vector from chain origin to chain tip
            for each chain. Then it will apply a bone rotation to the root bone, so that both chain
            direction vectors are parallel. - Only the bone rotation of the root bone of the target
            skeleton is modified. Other bones in the chain are not modified.
            </para>
            <para>
            Note: The <see cref="T:DigitalRune.Animation.Character.ChainBoneMapper"/> can also be used if the chain contains only a single
            bone.
            </para>
            <para>
            For the target skeleton, the <see cref="T:DigitalRune.Animation.Character.ChainBoneMapper"/> chooses a reference position which
            is either the bind pose or a direct-mapped pose (<see cref="T:DigitalRune.Animation.Character.DirectBoneMapper"/>).
            <see cref="P:DigitalRune.Animation.Character.ChainBoneMapper.MapFromBindPose"/> determines which reference pose should be used. The chosen
            reference pose influences the twist of the whole bone chain. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.ChainBoneMapper.RootBoneIndexA">
            <summary>
            Gets or sets the bone index of the first bone of the bone chain in the first skeleton.
            </summary>
            <value>The root bone index for the first skeleton.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.ChainBoneMapper.TipBoneIndexA">
            <summary>
            Gets or sets the bone index where the bone chain of the first skeleton ends. This is the
            bone index of the first bone that is NOT included in the chain.
            </summary>
            <value>
            The bone index where the bone chain of the first skeleton ends. (= The first bone AFTER the
            chain.)
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.ChainBoneMapper.RootBoneIndexB">
            <summary>
            Gets or sets the bone index of the first bone of the bone chain in the second skeleton.
            </summary>
            <value>The root bone index for the second skeleton.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.ChainBoneMapper.TipBoneIndexB">
            <summary>
            Gets or sets the bone index where the bone chain of the second skeleton ends. This is the
            bone index of the first bone that is NOT included in the chain.
            </summary>
            <value>
            The bone index where the bone chain of the second skeleton ends. (= The first bone AFTER the
            chain.)
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.ChainBoneMapper.MapFromBindPose">
            <summary>
            Gets or sets a value indicating whether the chain mapping uses the bind pose as the
            reference orientation for the target skeleton.
            </summary>
            <value>
            <see langword="true"/> if the bind pose is used as the reference orientation; otherwise, 
            <see langword="false"/> a direct-mapped bone pose is used as reference orientation. The
            default is <see langword="true"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Animation.Character.ChainBoneMapper.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.ChainBoneMapper"/> class.
            </summary>
            <param name="rootBoneIndexA">
            The bone index in the first skeleton where the bone chain starts.
            </param>
            <param name="tipBoneIndexA">
            The bone index in the first skeleton where the bone chain ends. This is the index 
            of the first bone that is NOT included in the chain (= the first bone after the chain).
            </param>
            <param name="rootBoneIndexB">
            The bone index in the second skeleton where the bone chain starts.
            </param>
            <param name="tipBoneIndexB">
            The bone index in the second skeleton where the bone chain ends. This is the index 
            of the first bone that is NOT included in the chain (= the first bone after the chain).
            </param>
        </member>
        <member name="M:DigitalRune.Animation.Character.ChainBoneMapper.OnInvalidate">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.Invalidate"/> is called.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.ChainBoneMapper.OnMapAToB">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapAToB"/> was called.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.ChainBoneMapper.OnMapBToA">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapBToA"/> was called.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.Character.DirectBoneMapper">
            <summary>
            Copies a bone transform from one skeleton to the other skeleton.
            </summary>
            <remarks>
            <para>
            This is the simplest <see cref="T:DigitalRune.Animation.Character.BoneMapper"/>. It simply reads the bone transform of the bone
            in the first skeleton and sets the same bone transform in the bone in the second skeleton.
            This mapping can be used if the mapped skeletons and bone orientations (in the bind pose) are
            very similar.
            </para>
            <para>
            The <see cref="T:DigitalRune.Animation.Character.DirectBoneMapper"/> works either in local bone space or in model space (see 
            <see cref="P:DigitalRune.Animation.Character.DirectBoneMapper.MapAbsoluteTransforms"/>). Per default, it works in local bone space 
            (<see cref="P:DigitalRune.Animation.Character.DirectBoneMapper.MapAbsoluteTransforms"/> is <see langword="false"/>). When working in local bone 
            space, the bone mapper will transfer all orientation changes relative to the parent bones; for
            example, if the bone in the source skeleton was rotate up by 90°, it will also be rotated up 
            by 90° in the target skeleton. When working in model space 
            (<see cref="P:DigitalRune.Animation.Character.DirectBoneMapper.MapAbsoluteTransforms"/> is <see langword="true"/>) the bone mapper will transfer 
            the absolute bone pose relative to the model space; for example, if the bone in the source 
            skeleton is pointing down (relative to model space), the bone in the target skeleton will also
            be rotated so that it points down.
            </para> 
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.DirectBoneMapper.BoneIndexA">
            <summary>
            Gets or sets the bone index for the first skeleton.
            </summary>
            <value>The bone index for the first skeleton.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.DirectBoneMapper.BoneIndexB">
            <summary>
            Gets or sets the bone index for the second skeleton.
            </summary>
            <value>The bone index for the second skeleton.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.DirectBoneMapper.MapTranslations">
            <summary>
            Gets or sets a value indicating whether translations are mapped or ignored. (If 
            <see cref="P:DigitalRune.Animation.Character.DirectBoneMapper.MapAbsoluteTransforms"/> is set, translations are always ignored and this
            property is not used.)
            </summary>
            <value>
            <see langword="true"/> if translations in the bone transform are mapped; otherwise, 
            <see langword="false"/> if translations are ignored and only rotations are mapped. The 
            default is <see langword="true"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.DirectBoneMapper.MapAbsoluteTransforms">
            <summary>
            Gets or sets a value indicating whether the mapping is performed in model space.
            </summary>
            <value>
            <see langword="true"/> if the bone transform relative to model space is mapped to the other 
            skeleton; otherwise, <see langword="false"/> if the bone transform relative to the local 
            bone space is mapped to the other skeleton. The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.DirectBoneMapper.ScaleAToB">
            <summary>
            Gets or sets the scale of second skeleton relative to the first skeleton. (Only relevant if
            bone translations are mapped.)
            </summary>
            <value>
            The scale of the second skeleton relative to the first skeleton. The default is 1.
            </value>
            <remarks>
            <para>
            Translations that are mapped are multiplied with this scale factor. So if the second
            skeleton is about twice as large as the first skeleton, set this value to 2.
            </para>
            <para>
            <see cref="M:DigitalRune.Animation.Character.DirectBoneMapper.EstimateScale"/> can be used to set this value to an automatically guessed scale
            factor. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.DirectBoneMapper.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.DirectBoneMapper"/> class.
            </summary>
            <param name="boneIndexA">The bone index for the first skeleton.</param>
            <param name="boneIndexB">The bone index for the second skeleton.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.DirectBoneMapper.EstimateScale">
            <summary>
            Analyzes the skeletons and sets <see cref="P:DigitalRune.Animation.Character.DirectBoneMapper.ScaleAToB"/> to a guessed scale factor.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.DirectBoneMapper.OnInvalidate">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.Invalidate"/> is called.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.DirectBoneMapper.OnMapAToB">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapAToB"/> was called.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.DirectBoneMapper.OnMapBToA">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapBToA"/> was called.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.DirectBoneMapper.MapAbsolute(System.Boolean,DigitalRune.Animation.Character.SkeletonPose,System.Int32,DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Single,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Perform mapping in absolute space.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.DirectBoneMapper.MapLocal(System.Boolean,DigitalRune.Animation.Character.SkeletonPose,System.Int32,DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Single,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Perform mapping in local bone space.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.Character.SkeletonMapper">
            <summary>
            Controls the bone transforms of a <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> to resemble the posture of
            another <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/>.
            </summary>
            <remarks>
            <para>
            Skeleton mapping is mainly used for two reasons: 
            <list type="bullet">
            <item>
            <i>Ragdoll Mapping:</i> A high detail skeleton (e.g. 60 bones) is mapped to a low detail
            skeleton (e.g. 15 bones). The high detail skeleton controls a visual character model. The low
            detail skeleton creates a ragdoll.
            </item>
            <item>
            <i>Motion Retargeting: </i> The animations of one character should be applied to another 
            character that uses a different skeleton.
            </item>
            </list>
            </para>
            <para>
            To use a skeleton mapper, set the two skeleton poses (<see cref="P:DigitalRune.Animation.Character.SkeletonMapper.SkeletonPoseA"/> and
            <see cref="P:DigitalRune.Animation.Character.SkeletonMapper.SkeletonPoseB"/>). If the skeletons use different model space (e.g. different
            forward or up directions), <see cref="P:DigitalRune.Animation.Character.SkeletonMapper.RotationOffset"/> must be set. Then 
            <see cref="T:DigitalRune.Animation.Character.BoneMapper"/>s must be added to the <see cref="P:DigitalRune.Animation.Character.SkeletonMapper.BoneMappers"/> collection. A bone is
            only mapped if a <see cref="T:DigitalRune.Animation.Character.BoneMapper"/> for this bone is added to the skeleton mapper.
            </para>
            <para>
            In most cases, the order of the bone mappers in the <see cref="P:DigitalRune.Animation.Character.SkeletonMapper.BoneMappers"/> collection is
            relevant. It is recommended to map parent bones before their child bones.
            </para>
            <para>
            After the bone mappers are defined, <see cref="M:DigitalRune.Animation.Character.SkeletonMapper.MapAToB"/> or <see cref="M:DigitalRune.Animation.Character.SkeletonMapper.MapBToA"/> can be
            called to map the bone transforms of one skeleton to the other skeleton.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonMapper.SkeletonPoseA">
            <summary>
            Gets or sets the first skeleton pose.
            </summary>
            <value>The first skeleton pose. Can be <see langword="null"/>.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonMapper.SkeletonPoseB">
            <summary>
            Gets or sets the second skeleton pose.
            </summary>
            <value>The second skeleton pose. Can be <see langword="null"/>.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonMapper.BoneMappers">
            <summary>
            Gets the bone mappers.
            </summary>
            <value>The bone mappers. The default is an empty collection.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonMapper.RotationOffset">
            <summary>
            Gets or sets the rotation offset between <see cref="P:DigitalRune.Animation.Character.SkeletonMapper.SkeletonPoseA"/> and
            <see cref="P:DigitalRune.Animation.Character.SkeletonMapper.SkeletonPoseB"/>. (This a rotation that transforms rotations from model A space
            to model B space.)
            </summary>
            <value>
            The rotation offset. The default value is <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.Identity"/>.
            </value>
            <remarks>
            The rotation offset rotates the first skeleton into the direction of the second skeleton.
            The rotation offset must be used if the skeletons use different model spaces. For example,
            if one skeleton uses Y as the local "up" axis and the other skeleton uses Z as the local
            "up" axis.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonMapper.#ctor(DigitalRune.Animation.Character.SkeletonPose,DigitalRune.Animation.Character.SkeletonPose)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonMapper"/> class.
            </summary>
            <param name="skeletonPoseA">The first skeleton pose. Can be <see langword="null"/>.</param>
            <param name="skeletonPoseB">The second skeleton pose. Can be <see langword="null"/>.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonMapper.MapAToB">
            <summary>
            Modifies the second skeleton pose to match the first skeleton pose.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonMapper.MapBToA">
            <summary>
            Modifies the first skeleton pose to match the second skeleton pose.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.Character.UpperBackBoneMapper">
            <summary>
            Maps the orientation of a spine bone in the upper back of a character.
            </summary>
            <remarks>
            The <see cref="T:DigitalRune.Animation.Character.UpperBackBoneMapper"/> is a specialized <see cref="T:DigitalRune.Animation.Character.ChainBoneMapper"/>. It can
            be used for a bone in the spine that is connected to neck bone and two shoulder bones. It
            modifies the rotation of the spine bone so that the overall rotation of the upper back is
            conserved. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.SpineBoneIndexA">
            <summary>
            Gets or sets the spine bone index for the first skeleton.
            </summary>
            <value>The spine bone index for the first skeleton.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.NeckBoneIndexA">
            <summary>
            Gets or sets the neck bone index for the first skeleton.
            </summary>
            <value>The neck bone index for the first skeleton.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.LeftShoulderBoneIndexA">
            <summary>
            Gets or sets the left shoulder bone index for the first skeleton.
            </summary>
            <value>The left shoulder bone index for the first skeleton.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.RightShoulderBoneIndexA">
            <summary>
            Gets or sets the right shoulder bone index for the first skeleton.
            </summary>
            <value>The right shoulder bone index for the first skeleton.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.SpineBoneIndexB">
            <summary>
            Gets or sets the spine bone index for the second skeleton.
            </summary>
            <value>The spine bone index for the second skeleton.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.NeckBoneIndexB">
            <summary>
            Gets or sets the neck bone index for the second skeleton.
            </summary>
            <value>The neck bone index for the second skeleton.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.LeftShoulderBoneIndexB">
            <summary>
            Gets or sets the left shoulder bone index for the second skeleton.
            </summary>
            <value>The left shoulder bone index for the second skeleton.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.UpperBackBoneMapper.RightShoulderBoneIndexB">
            <summary>
            Gets or sets the right shoulder bone index for the second skeleton.
            </summary>
            <value>The right shoulder bone index for the second skeleton.</value>
        </member>
        <member name="M:DigitalRune.Animation.Character.UpperBackBoneMapper.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.UpperBackBoneMapper"/> class.
            </summary>
            <param name="spineBoneIndexA">The spine bone index in the first skeleton.</param>
            <param name="neckBoneIndexA">The neck bone index in the first skeleton.</param>
            <param name="leftShoulderBoneIndexA">The left shoulder bone index in the first skeleton.</param>
            <param name="rightShoulderBoneIndexA">The right shoulder bone index in the first skeleton.</param>
            <param name="spineBoneIndexB">The spine bone in the second skeleton.</param>
            <param name="neckBoneIndexB">The neck bone index in the second skeleton.</param>
            <param name="leftShoulderBoneIndexB">The left shoulder bone index in the second skeleton.</param>
            <param name="rightShoulderBoneIndexB">The right shoulder bone index in the second skeleton.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.UpperBackBoneMapper.OnInvalidate">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.Invalidate"/> is called.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.UpperBackBoneMapper.OnMapAToB">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapAToB"/> was called.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.UpperBackBoneMapper.OnMapBToA">
            <summary>
            Called when <see cref="M:DigitalRune.Animation.Character.BoneMapper.MapBToA"/> was called.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.Character.Skeleton">
            <summary>
            Describes a skeleton for 3D character animation in the bind pose.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Animation.Character.Skeleton"/> describes the hierarchy of bones in the "bind pose" (also called
            "rest pose"). Skeletons are immutable: After an instance is created, it is not possible to 
            add/remove bones or change the bind pose.
            </para>
            <para>
            The class <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> can be used to animate a skeleton: It defines a new pose 
            for an existing skeleton. A single <see cref="T:DigitalRune.Animation.Character.Skeleton"/> instance can be shared by multiple 
            <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/>s. I.e. if multiple characters with the same skeleton are animated
            they share the same <see cref="T:DigitalRune.Animation.Character.Skeleton"/> instance, but each character has a different 
            <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.Skeleton.Name">
            <summary>
            Gets or sets the name of the skeleton.
            </summary>
            <value>The name. The default is <see langword="null"/>.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.Skeleton.NumberOfBones">
            <summary>
            Gets the number of bones in this skeleton.
            </summary>
            <value>The number of bones.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.Skeleton.Internals">
            <exclude/>
        </member>
        <member name="M:DigitalRune.Animation.Character.Skeleton.#ctor(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{DigitalRune.Animation.Character.SrtTransform})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.Skeleton"/> class.
            </summary>
            <param name="boneParents">
            The bone parents. This list contains one entry per bone. The list element is the 
            parent bone index for each bone. If a bone has no parent, the array should contain -1.
            </param>
            <param name="boneNames">
            The bone names. This list contains one entry per bone. The list element is the name
            of the bone or <see langword="null"/> if the bone is unnamed.
            </param>
            <param name="bindPosesRelative">
            The bind poses. This list contains one entry per bone. The list element is the bone
            pose transformation relative to the parent bone.
            </param>
            <remarks>
            The bone data must be specified in lists. The index in the list is the bone index. The
            bones must be sorted so that parent bones come before their child bones.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="boneParents"/>, <paramref name="boneNames"/> or 
            <paramref name="bindPosesRelative"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Either the given lists are empty, have different length, or the 
            <paramref name="boneParents"/> are invalid (parent bones must come be before their child 
            bones).
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.Skeleton.Initialize(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{DigitalRune.Animation.Character.SrtTransform})">
            <summary>
            Initializes the skeleton.
            </summary>
            <param name="boneParents">The bone parents.</param>
            <param name="boneNames">The bone names.</param>
            <param name="bindPosesRelative">The bind poses.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="boneParents"/>, <paramref name="boneNames"/> or 
            <paramref name="bindPosesRelative"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Either the given lists are empty, have different length, or the 
            <paramref name="boneParents"/> are invalid (parent bones must come be before their child 
            bones).
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.Skeleton.GetParent(System.Int32)">
            <summary>
            Gets the index of the parent bone of a given bone.
            </summary>
            <param name="boneIndex">The bone index.</param>
            <returns>
            The bone index of the parent bone, or -1 if the bone is a root bone that does not have
            a parent bone.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="boneIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.Skeleton.GetNumberOfChildren(System.Int32)">
            <summary>
            Gets the number of child bones of a given bone.
            </summary>
            <param name="boneIndex">The bone index.</param>
            <returns>
            The number of child bones that are attached to this bone. (Only direct child bones - not 
            children of children.)
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="boneIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.Skeleton.GetChild(System.Int32,System.Int32)">
            <summary>
            Gets the bone index of a child bone of a given bone.
            </summary>
            <param name="boneIndex">The bone index.</param>
            <param name="childIndex">
            The child index. 0 is the first child bone, 1 is the second child bone, and so on.
            </param>
            <returns>
            The bone index of the child bone.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="boneIndex"/> or <paramref name="childIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.Skeleton.GetIndex(System.String)">
            <summary>
            Gets the bone index for a given bone name.
            </summary>
            <param name="boneName">The name of the bone.</param>
            <returns>
            The bone index, or -1 if no bone with this name exists.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.Skeleton.GetName(System.Int32)">
            <summary>
            Gets the name of a given bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <returns>
            The name of the bone, or <see langword="null"/> if the bone is unnamed.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.Skeleton.GetBindPoseRelative(System.Int32)">
            <summary>
            Gets the bind pose transformation of a given bone relative to the parent bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <returns>
            The bind pose transformation relative to the parent bone.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="boneIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.Skeleton.GetBindPoseAbsoluteInverse(System.Int32)">
            <summary>
            Gets the bind pose transformation of a given bone relative to model space.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <returns>
            The bind pose transformation relative to model space.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="boneIndex"/> is out of range.
            </exception>
        </member>
        <member name="T:DigitalRune.Animation.Character.SkeletonBoneAccessor">
            <summary>
            Handles efficient access to derived bone transformations.
            </summary>
            <remarks>
            <para>
            This class computes transformations that are derived from the bind pose information and the
            current (animated) bone transforms: The bone pose transformations relative to parent bone
            space, the bone pose transformation relative to model space and the skinning matrices.
            </para>
            <para>
            Dirty flags are managed for the bones. Whenever a bone transform of the 
            <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> is modified, <see cref="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.Invalidate(System.Int32)"/> must be called to set 
            the dirty flag. When bone pose transformations are accessed, they are recomputed if necessary.
            </para>
            <para>
            Call <see cref="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.Update"/> to compute all derived bone transformation at once.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonBoneAccessor"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.Create(DigitalRune.Animation.Character.SkeletonPose)">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonBoneAccessor"/> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <param name="skeletonPose">The skeleton pose.</param>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonBoneAccessor"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skeletonPose"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.Recycle">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonBoneAccessor"/> class.
            </summary>
            <remarks>
            <para>
            This method resets this instance and returns it to a resource pool if resource pooling is 
            enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.GetBonePoseRelative(System.Int32)">
            <summary>
            Gets the relative bone pose of the specified bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <returns>
            The bone pose transformation of the specified bone relative to the parent bone space.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.GetBonePoseAbsolute(System.Int32)">
            <summary>
            Gets the absolute bone pose of the specified bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <returns>
            The bone pose transformation of the specified bone relative to model space.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.Invalidate">
            <summary>
            Invalidates all cached information.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.Invalidate(System.Int32)">
            <summary>
            Invalidates cached information for the specified bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.InvalidateAbsoluteMatrices(System.Int32)">
            <summary>
            Recursively invalidates the specified bone and its descendants.
            </summary>
            <param name="boneIndex">Index of the bone.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.Update">
            <summary>
            Updates all bone transformations.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.UpdateBonePoseRelative(System.Int32)">
            <summary>
            Updates the relative bone pose for the specified bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonBoneAccessor.UpdateBonePoseAbsolute(System.Int32)">
            <summary>
            Updates the absolute bone pose for the specified bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
        </member>
        <member name="T:DigitalRune.Animation.Character.SkeletonHelper">
            <summary>
            Provides helper methods for working with skeletons.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonHelper.DrawBones(DigitalRune.Animation.Character.SkeletonPose,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.BasicEffect,System.Single,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws the skeleton bones, bone space axes and bone names for debugging. 
            (Only available in the XNA-compatible build.)
            </summary>
            <param name="skeletonPose">The skeleton pose.</param>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="effect">
            A <see cref="T:Microsoft.Xna.Framework.Graphics.BasicEffect"/> instance. The effect parameters <see cref="P:Microsoft.Xna.Framework.Graphics.BasicEffect.World"/>,
            <see cref="P:Microsoft.Xna.Framework.Graphics.BasicEffect.View"/>, and <see cref="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Projection"/> must be
            correctly initialized before this method is called.
            </param>
            <param name="axisLength">The visible length of the bone space axes.</param>
            <param name="spriteBatch">
            A <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>. Can be <see langword="null"/> to skip text rendering.
            </param>
            <param name="spriteFont">
            A <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont"/>. Can be <see langword="null"/> to skip text rendering.
            </param>
            <param name="color">The color for the bones and the bone names.</param>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the DigitalRune.Animation.dll.
            </para>
            <para>
            This method draws the skeleton for debugging. It draws a line for each bone and the bone
            name. At the bone origin it draws 3 lines (red, green, blue) that visualize the bone
            space axes (x, y, z).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skeletonPose"/>, <paramref name="graphicsDevice"/> or 
            <paramref name="effect"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonHelper.RotateBoneAbsolute(DigitalRune.Animation.Character.SkeletonPose,System.Int32,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Rotates a bone where the rotation is given in model space.
            </summary>
            <param name="skeletonPose">The skeleton pose.</param>
            <param name="boneIndex">The index of the bone.</param>
            <param name="rotation">The rotation in model space.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skeletonPose" /> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonHelper.SetBoneRotationAbsolute(DigitalRune.Animation.Character.SkeletonPose,System.Int32,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Sets the bone rotation of a bone so that it matches the given rotation in model space.
            </summary>
            <param name="skeletonPose">The skeleton pose.</param>
            <param name="boneIndex">The index of the bone.</param>
            <param name="rotation">The rotation in model space.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skeletonPose" /> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonHelper.SetBonePoseAbsolute(DigitalRune.Animation.Character.SkeletonPose,System.Int32,DigitalRune.Animation.Character.SrtTransform)">
            <summary>
            Sets the bone transform to create a desired pose in model space.
            </summary>
            <param name="skeletonPose">The skeleton pose.</param>
            <param name="boneIndex">The index of the bone.</param>
            <param name="bonePoseAbsolute">The bone pose in model space.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skeletonPose" /> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonHelper.IsAncestor(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Int32)">
            <summary>
            Determines whether the given bone indices form a valid bone chain.
            </summary>
            <param name="skeletonPose">The skeleton pose.</param>
            <param name="ancestorBoneIndex">Index of the start bone (root of the chain). Can be -1.</param>
            <param name="childBoneIndex">Index of the end bone (tip of the chain). Must not be -1.</param>
            <returns>
            <see langword="true"/> if bone indices describe a valid chain; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            This method checks it the start bone is an ancestor of the end bone.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skeletonPose" /> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonHelper.IsAncestorOrSelf(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Int32)">
            <summary>
            Determines whether the given bone indices form a valid bone chain.
            </summary>
            <param name="skeletonPose">The skeleton pose.</param>
            <param name="ancestorBoneIndex">Index of the start bone (root of the chain). Can be -1.</param>
            <param name="childBoneIndex">Index of the end bone (tip of the chain). Must not be -1.</param>
            <returns>
            <see langword="true"/> if bone indices describe a valid chain; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method checks it the start bone is an ancestor of the end bone.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skeletonPose" /> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonHelper.GetChain(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets the bone indices of a bone chain.
            </summary>
            <param name="skeletonPose">The skeleton pose.</param>
            <param name="startBoneIndex">Index of the start bone (root of the chain). Can be -1.</param>
            <param name="endBoneIndex">Index of the end bone (tip of the chain). Must not be -1.</param>
            <param name="boneIndices">
            A list where the bone indices should be stored. Must not be <see langword="null"/>. 
            The list is cleared before the new bones are added.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skeletonPose"/> or <paramref name="boneIndices"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="startBoneIndex"/> and <paramref name="endBoneIndex"/> do not form a valid
            bone chain.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonHelper.GetNumberOfBones(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Int32)">
            <summary>
            Counts the number of bones in a bone chain.
            </summary>
            <param name="skeletonPose">The skeleton pose.</param>
            <param name="startBoneIndex">Index of the start bone (root of the chain). Can be -1.</param>
            <param name="endBoneIndex">Index of the end bone (tip of the chain). Must not be -1.</param>
            <returns>The number of bones in the chain; or 0 if the chain is invalid.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skeletonPose" /> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonHelper.ResetBoneTransforms(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Int32)">
            <overloads>
            <summary>
            Resets bone transforms.
            </summary>
            </overloads>
            
            <summary>
            Resets the bone transforms of all bones in a bone chain.
            </summary>
            <param name="skeletonPose">The skeleton pose.</param>
            <param name="startBoneIndex">Index of the start bone (root of the chain). Can be -1.</param>
            <param name="endBoneIndex">Index of the end bone (tip of the chain). Must not be -1.</param>
            <returns>The number of bones in the chain; or 0 if the chain is invalid.</returns>
            <remarks>
            If a bone transform is reset, it is set to the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Identity"/>
            transform. If all bone transforms of a skeleton are reset, then the skeleton is in its
            bind pose.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skeletonPose" /> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonHelper.ResetBoneTransforms(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Resets the bone transform components (scale, rotation or translation) of all bones in a 
            bone chain. 
            </summary>
            <param name="skeletonPose">The skeleton pose.</param>
            <param name="startBoneIndex">Index of the start bone (root of the chain). Can be -1.</param>
            <param name="endBoneIndex">Index of the end bone (tip of the chain). Must not be -1.</param>
            <param name="resetScale">If set to <see langword="true"/>, the scale is reset.</param>
            <param name="resetRotation">If set to <see langword="true"/>, the rotation is reset.</param>
            <param name="resetTranslation">If set to <see langword="true"/>, the translation is reset.</param>
            <remarks>
            If a bone transform is reset, it is set to the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Identity"/>
            transform. If all bone transforms of a skeleton are reset, then the skeleton is in its
            bind pose.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="skeletonPose"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonHelper.ResetBoneTransformsInSubtree(DigitalRune.Animation.Character.SkeletonPose,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Resets the bone transform components (scale, rotation or translation) of all bones in a 
            bone subtree.
            </summary>
            <param name="skeletonPose">The skeleton pose.</param>
            <param name="boneIndex">
            Index of the root bone of the subtree. Must not be negative.
            </param>
            <param name="resetScale">If set to <see langword="true"/>, the scale is reset.</param>
            <param name="resetRotation">If set to <see langword="true"/>, the rotation is reset.</param>
            <param name="resetTranslation">If set to <see langword="true"/>, the translation is reset.</param>
            <remarks>
            If a bone transform is reset, it is set to the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Identity"/>
            transform. If all bone transforms of a skeleton are reset, then the skeleton is in its
            bind pose.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skeletonPose"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="boneIndex"/> is negative.</exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonHelper.Copy(DigitalRune.Animation.Character.SkeletonPose,DigitalRune.Animation.Character.SkeletonPose)">
            <summary>
            Copies the bone transforms from skeleton pose to another skeleton pose.
            </summary>
            <param name="source">The <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> from which the bone transforms are copied.</param>
            <param name="target">The <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> to which the bone transforms are copied.</param>
            <remarks>
            Copying a <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> using this method is faster than manually copying all
            bone transforms.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> and <paramref name="target"/> belong to different skeletons and
            <paramref name="target"/> has more bones than <paramref name="source"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Animation.Character.SkeletonPose">
            <summary>
            Defines an animation pose of a <see cref="T:DigitalRune.Animation.Character.Skeleton"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Animation.Character.Skeleton"/> class defines a skeleton in bind pose. The 
            <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> can be used to animate the bones of a skeleton. There are two ways
            to animate a skeleton using the animation system:
            <list type="bullet">
            <item>
            <description>
            The skeleton pose implements the interface <c>IAnimatableProperty&lt;SkeletonPose&gt;</c>.
            This means that the skeleton pose can be treated as one animation value and can be animated as
            a whole. A skeleton pose can, for example, be animated using a 
            <see cref="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation"/>.
            </description>
            </item>
            <item>
            <description>
            The skeleton pose also implements the interface <c>IAnimatableObject</c>. The bones of the
            skeleton pose are animatable properties. This means that the bones can be animated 
            individually. For example, a <see cref="T:DigitalRune.Animation.SrtKeyFrameAnimation"/> can be applied directly to a 
            single bone.
            </description>
            </item>
            </list>
            You can find more details below.
            </para>
            <para>
            <strong>Bone Transforms:</strong><br/>
            A <i>bone transform</i> is a local transformation that is applied to a bone. Bones are 
            animated by changing the bone transforms (see <see cref="M:DigitalRune.Animation.Character.SkeletonPose.GetBoneTransform(System.Int32)"/> and 
            <see cref="M:DigitalRune.Animation.Character.SkeletonPose.SetBoneTransform(System.Int32,DigitalRune.Animation.Character.SrtTransform)"/>). A bone transform is defined using a <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> 
            given in bone space. If a bone transform is the identity transformation (see 
            <see cref="F:DigitalRune.Animation.Character.SrtTransform.Identity"/>), then the bone is not animated and rendered in its bind 
            pose.
            </para>
            <para>
            <strong>Bone Poses:</strong><br/>
            A <i>bone pose transformation matrix</i> (<i>bone pose</i>) defines the resulting pose of bone
            after the bone transforms are applied. A bone pose describes the bone's position, orientation 
            and scale relative to another coordinate space. A <i>relative bone pose</i> describes the pose
            of a bone relative to the parent bone (see <see cref="M:DigitalRune.Animation.Character.SkeletonPose.GetBonePoseRelative(System.Int32)"/>). An 
            <i>absolute bone pose</i> describes the pose of a bone relative to model space 
            (<see cref="M:DigitalRune.Animation.Character.SkeletonPose.GetBonePoseAbsolute(System.Int32)"/>).
            </para>
            <para>
            The bone poses are computed and updated automatically: Whenever a bone transform is changed, 
            the relative bone pose, absolute bone pose and the skinning matrices of the affected bone 
            needs to be updated. Additionally, the absolute bone poses and the skinning matrices of all 
            bones attached to this bone need to be updated as well. The skeleton pose automatically keeps 
            track of which poses and matrices need to be recomputed. The recomputation is performed 
            automatically as soon as one of these values is required.
            </para>
            <para>
            To update all derived transformations at once, <see cref="M:DigitalRune.Animation.Character.SkeletonPose.Update"/> can be called. 
            </para>
            <para>
            <strong>IAnimatableProperty Implementation:</strong><br/>
            The class <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> implements the interface 
            <c>IAnimatableProperty&lt;SkeletonPose&gt;</c> (see <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>).
            This means the <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> itself is an animatable property. It can 
            be animated using any animation of type <c>IAnimation&lt;SkeletonPose&gt;</c>. Typically a 
            <see cref="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation"/> is used to animate the <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/>. 
            This is the most efficient way to animate a skeleton.
            </para>
            <para>
            Note: The <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> as a <see cref="T:DigitalRune.Animation.IAnimatableProperty"/> does not have
            a base value and therefore cannot be used in some from-to-by animations and similar animations
            that require a base value.
            </para>
            <para>
            <strong>IAnimatableObject Implementation (For Advanced Uses Only!):</strong><br/>
            The class <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> additionally implements the interface 
            <see cref="T:DigitalRune.Animation.IAnimatableObject"/>. This means that the bones of the skeleton can also be 
            animated independently. The animatable properties are the bone transforms given as
            <c>IAnimatableProperty&lt;SrtTransform&gt;</c>. The animatable properties can be accessed by
            calling the method <see cref="M:DigitalRune.Animation.IAnimatableObject.GetAnimatableProperty``1(System.String)"/> passing the name 
            of the desired bone as the parameter. (Bones need to be named if they should be animated 
            independently.)
            </para>
            <para>
            For example, a <see cref="T:DigitalRune.Animation.SrtKeyFrameAnimation"/> (or any other animation that implements
            <c>IAnimation&lt;SrtTransform&gt;</c>) can be applied directly to a bone.
            </para>
            <para>
            Or, multiple <see cref="T:DigitalRune.Animation.SrtKeyFrameAnimation"/>s can be grouped together in a 
            <see cref="T:DigitalRune.Animation.TimelineGroup"/>. The animations can be assigned to different bones by setting
            the animation's <see cref="P:DigitalRune.Animation.IAnimation.TargetProperty"/> to the name of the bone. The 
            <see cref="T:DigitalRune.Animation.TimelineGroup"/> can then be played as one animation.
            </para>
            <para>
            Animating the <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> this way is very flexible - but slower than 
            animating it with a single <see cref="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation"/>.
            </para>
            <para>
            Note: The <see cref="T:DigitalRune.Animation.IAnimatableProperty"/>s of the individual bones do not have a base value
            and therefore cannot be used in some from-to-by animations or similar animations that require
            a base value.
            </para>
            <para>
            <strong>Tip:</strong><br/>
            When bone transforms are manipulated regularly, e.g. in an IK solver, numerical errors can 
            accumulate. If this happens and the skeleton seems to "explode", try to normalize the rotation
            quaternions regularly.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonPose.Name">
            <summary>
            Gets or sets the name of the skeleton pose.
            </summary>
            <value>
            The name of this instance. The default value is the name of the <see cref="P:DigitalRune.Animation.Character.SkeletonPose.Skeleton"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonPose.Skeleton">
            <summary>
            Gets the skeleton.
            </summary>
            <value>The skeleton.</value>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonPose.SkinningMatrices">
            <summary>
            Gets the skinning matrices. 
            </summary>
            <value>The skinning matrices.</value>
            <remarks>
            <para>
            This array contains one element per bone. The array element is the skinning matrix which
            is a matrix that transforms a position from bone space in the bind pose to model space in 
            the animated model. This matrices are used for mesh skinning.
            </para>
            <para>
            This property returns an internal array that is allocated when needed. Therefore, it is not
            recommended to modify the elements in this array!
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonPose.SkinningMatricesXna">
            <summary>
            Gets the skinning matrices. (Only available in the XNA-compatible build.)
            </summary>
            <value>The skinning matrices.</value>
            <remarks>
            <para>
            This type is available only in the XNA-compatible build of the DigitalRune.Animation.dll.
            </para>
            <para>
            This array contains one element per bone. The array element is the skinning matrix which
            is a matrix that transforms a position from bone space in the bind pose to model space in 
            the animated model. This matrices are used for mesh skinning.
            </para>
            <para>
            This property returns an internal array that is allocated when needed. Therefore, it is not
            recommended to modify the elements in this array!
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.#ctor(DigitalRune.Animation.Character.Skeleton)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> class.
            This constructor is used by the resource pool.
            </summary>
            <param name="skeleton">The skeleton.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skeleton" /> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.Create(DigitalRune.Animation.Character.Skeleton)">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <param name="skeleton">The skeleton.</param>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Animation.Character.SkeletonPose.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skeleton"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.Recycle">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> class.
            </summary>
            <remarks>
            <para>
            This method resets this instance and returns it to a resource pool if resource pooling is 
            enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> that is a clone (deep copy) of the current 
            instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/> that is a clone (deep copy) of the current instance.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.EnsureAnimatableProperties">
            <summary>
            Makes sure that the <see cref="T:DigitalRune.Animation.Character.AnimatableBoneTransform"/>s are initialized.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.EnsureBoneAccessor">
            <summary>
            Makes sure that the <see cref="T:DigitalRune.Animation.Character.SkeletonBoneAccessor"/> is initialized.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.GetBonePoseRelative(System.Int32)">
            <summary>
            Gets the relative bone pose of the specified bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <returns>
            The bone pose transformation of the specified bone relative to the parent bone space.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.GetBonePoseAbsolute(System.Int32)">
            <summary>
            Gets the absolute bone pose of the specified bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <returns>
            The bone pose transformation of the specified bone relative to model space.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.GetBoneTransform(System.Int32)">
            <summary>
            Gets the bone transform of the specified bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <returns>
            The bone transform.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.SetBoneTransform(System.Int32,DigitalRune.Animation.Character.SrtTransform)">
            <summary>
            Sets the bone transform of the specified bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
            <param name="boneTransform">The bone transform.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.ResetBoneTransforms">
            <overloads>
            <summary>
            Resets bone transforms.
            </summary>
            </overloads>
            
            <summary>
            Resets the bone transforms of all bones in the skeleton.
            </summary>
            <remarks>
            If a bone transform is reset, it is set to the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Identity"/>
            transform. If all bone transforms of a skeleton are reset, then the skeleton is in its
            bind pose.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.ResetBoneTransform(System.Int32)">
            <summary>
            Resets the bone transforms of the specified bone.
            </summary>
            <param name="boneIndex">The bone index.</param>
            <remarks>
            If a bone transform is reset, it is set to the <see cref="F:DigitalRune.Animation.Character.SrtTransform.Identity"/>
            transform. If all bone transforms of a skeleton are reset, then the skeleton is in its
            bind pose.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.Invalidate">
            <summary>
            Invalidates all cached information.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.Invalidate(System.Int32)">
            <summary>
            Invalidates cached information for the specified bone.
            </summary>
            <param name="boneIndex">The index of the bone.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.Update">
            <summary>
            Updates all bone transformations.
            </summary>
            <remarks>
            <para>
            This method recomputes all bone transformations (the relative/absolute bone poses and 
            skinning matrices). It is generally not necessary to call this method explicitly because the 
            transformations are recomputed automatically in <see cref="M:DigitalRune.Animation.Character.SkeletonPose.GetBonePoseRelative(System.Int32)"/> and 
            <see cref="M:DigitalRune.Animation.Character.SkeletonPose.GetBonePoseAbsolute(System.Int32)"/> if they are invalid. 
            </para>
            <para>
            In certain cases in can be helpful to call <see cref="M:DigitalRune.Animation.Character.SkeletonPose.Update"/> explicitly: The method 
            forces the skeleton pose to update the transformations immediately. This is helpful to 
            perform all the computations at once and to avoid any stalls when calling 
            <see cref="M:DigitalRune.Animation.Character.SkeletonPose.GetBonePoseRelative(System.Int32)"/> or <see cref="M:DigitalRune.Animation.Character.SkeletonPose.GetBonePoseAbsolute(System.Int32)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableObject#GetAnimatedProperties">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableObject#GetAnimatableProperty``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableProperty#HasBaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableProperty{DigitalRune#Animation#Character#SkeletonPose}#BaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableProperty{DigitalRune#Animation#Character#SkeletonPose}#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableProperty#BaseValue">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableProperty#IsAnimated">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Animation.Character.SkeletonPose.DigitalRune#Animation#IAnimatableProperty#AnimationValue">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Character.SrtTransform">
            <summary>
            Defines a transformation that scales, rotates and translates (SRT) an object.
            </summary>
            <remarks>
            <para>
            This type represents an affine transformation consisting of a scaling followed by a rotation 
            followed by a translation. Shearing (skewing) is not supported, thus this transformation
            cannot be used to describe general affine transformations. The <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> is 
            very similar to the <see cref="T:DigitalRune.Geometry.Pose"/> type, but it adds a scale factor.
            </para>
            <para>
            Non-uniform scalings require special attention: When multiplying two SRT matrices, the result
            can contain a shearing if a non-uniform scaling and a rotation is used. SRT transformations do
            not support shearing. It is recommended to use this type either only with uniform scalings, or
            with non-uniform scalings without rotations. It is allowed to set non-uniform scaling and a
            rotation, but multiplying this transform with other transforms may not give the expected
            results.
            </para>
            <para>
            <strong>Important:</strong> Newly created <see cref="T:DigitalRune.Animation.Character.SrtTransform"/>s should be initialized
            with <see cref="F:DigitalRune.Animation.Character.SrtTransform.Identity"/>. The default constructor of the struct initializes the scale 
            vector and the rotation quaternion elements with 0 and therefore does not create a valid SRT 
            transformation.
            <code lang="csharp">	
            <![CDATA[
            // Do not use:
            SrtTransform srt = new SrtTransform(); // Not a valid SrtTransform!
            
            // Initialize with identity instead:
            SrtTransform srt = SrtTransform.Identity;
            ]]>
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Animation.Character.SrtTransform.Identity">
            <summary>
            An SRT transform with no scale, rotation and translation.
            </summary>
            <remarks>
            The scale is set to <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.One"/>, the rotation is set to 
            <see cref="F:DigitalRune.Mathematics.Algebra.QuaternionF.Identity"/>, and the translation is set to 
            <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Zero"/>.
            </remarks>
        </member>
        <member name="F:DigitalRune.Animation.Character.SrtTransform.Scale">
            <summary>
            The scale.
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.Character.SrtTransform.Rotation">
            <summary>
            The rotation.
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.Character.SrtTransform.Translation">
            <summary>
            The translation.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.Character.SrtTransform.HasScale">
            <summary>
            Gets a value indicating whether the scale is not (1, 1, 1). 
            (Using a numerical tolerant comparison, see <see cref="T:DigitalRune.Mathematics.Numeric"/>.)
            </summary>
            <value>
            <see langword="true"/> if the scaling factor in any direction is not 1; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.SrtTransform.HasRotation">
            <summary>
            Gets a value indicating whether the rotation is not the default rotation.
            (Using a numerical tolerant comparison, see <see cref="T:DigitalRune.Mathematics.Numeric"/>.)
            </summary>
            <value>
            <see langword="true"/> if the rotation describes a non-zero rotation; otherwise, 
            <see langword="false"/> if the rotation is not used (rotation angle is zero;
            <see cref="F:DigitalRune.Animation.Character.SrtTransform.Rotation"/> is the identity quaternion).
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.SrtTransform.HasTranslation">
            <summary>
            Gets a value indicating whether the translation is not 0.
            (Using a numerical tolerant comparison, see <see cref="T:DigitalRune.Mathematics.Numeric"/>.)
            </summary>
            <value>
            <see langword="true"/> if the translation describes a non-zero translation; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Character.SrtTransform.Inverse">
            <summary>
            Gets the inverse of this SRT transform.
            </summary>
            <value>The inverse of this SRT transform.</value>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.#ctor(DigitalRune.Mathematics.Algebra.QuaternionF)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> struct.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> struct with the given rotation.
            </summary>
            <param name="rotation">The rotation.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.#ctor(DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> struct with the given rotation.
            </summary>
            <param name="rotation">The rotation.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.#ctor(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> struct with the given rotation
            and translation.
            </summary>
            <param name="rotation">The rotation.</param>
            <param name="translation">The translation.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.#ctor(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> struct with the given rotation
            and translation.
            </summary>
            <param name="rotation">The rotation.</param>
            <param name="translation">The translation.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> struct with the given scale,
            rotation and translation.
            </summary>
            <param name="scale">The scale.</param>
            <param name="rotation">The rotation.</param>
            <param name="translation">The translation.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> struct with the given scale,
            rotation and translation.
            </summary>
            <param name="scale">The scale.</param>
            <param name="rotation">The rotation.</param>
            <param name="translation">The translation.</param>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.Equals(DigitalRune.Animation.Character.SrtTransform)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.Invert">
            <summary>
            Inverts the SRT transform.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.ToParentDirection(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Converts a direction vector from local space to parent space.
            </summary>
            <param name="localDirection">The direction in local space.</param>
            <returns>The direction in parent space.</returns>
            <remarks>
            This method can be used to transform direction vectors. It applies only the rotation to the 
            vector. The scale and translation are ignored. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.ToLocalDirection(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Converts a direction vector from parent space to local space.
            </summary>
            <param name="worldDirection">The direction in parent space.</param>
            <returns>The direction in local space.</returns>
            <remarks>
            This method can be used to transform direction vectors. It applies only the rotation to the 
            vector. The scale and translation are ignored. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.ToParentPosition(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Converts a position vector from local space to parent space.
            </summary>
            <param name="localPosition">The position in local space.</param>
            <returns>The position in parent space.</returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.ToLocalPosition(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Converts a position vector from parent space to local space.
            </summary>
            <param name="worldPosition">The position in parent space.</param>
            <returns>The position in local space.</returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.FromMatrix(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Creates an <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> from a matrix that contains a scale, a rotation, and a
            translation.
            </summary>
            <param name="srtMatrix">The SRT matrix.</param>
            <returns>
            An SRT transform that represents the same transformation as the 4x4-matrix.
            </returns>
            <remarks>
            <paramref name="srtMatrix"/> must only contain scaling, rotations and translations - 
            otherwise the result is undefined.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.ToMatrix44F">
            <summary>
            Converts this SRT transform to a 4x4 transformation matrix.
            </summary>
            <returns>
            A 4x4-matrix that represents the same transformation as the SRT transform.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.FromMatrix(Microsoft.Xna.Framework.Matrix)">
            <overloads>
            <summary>
            Creates an <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> from a matrix that contains a scale, a rotation and 
            a translation.
            </summary>
            </overloads>
            
            <summary>
            Creates an <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> from a matrix that contains a scale, a rotation and 
            a translation. (Only available in the XNA-compatible build.)
            </summary>
            <param name="srtMatrix">The SRT matrix.</param>
            <returns>
            An SRT transform that represents the same transformation as the 4x4-matrix.
            </returns>
            <remarks>
            <para>
            <paramref name="srtMatrix"/> must only contain scaling, rotations and translations - 
            otherwise the result is undefined.
            </para>
            <para>
            This method is available only in the XNA-compatible build of the DigitalRune.Animation.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.ToXna">
            <summary>
            Converts an SRT transform to a 4x4 transformation matrix (XNA Framework). 
            (Only available in the XNA-compatible build.)
            </summary>
            <returns>
            An 4x4-matrix that represents the same transformation as the SRT transform.
            </returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the DigitalRune.Animation.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.ToPose">
            <summary>
            Creates a <see cref="T:DigitalRune.Geometry.Pose"/> from an <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> (<see cref="F:DigitalRune.Animation.Character.SrtTransform.Scale"/>
            will be ignored!).
            </summary>
            <returns>
            A pose that represents the same rotation and translation (ignoring all scalings).
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.FromPose(DigitalRune.Geometry.Pose)">
            <summary>
            Creates an <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> from a <see cref="T:DigitalRune.Geometry.Pose"/>.
            </summary>
            <param name="pose">The pose.</param>
            <returns>
            An <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> that represents the same rotation and translation as
            the <paramref name="pose"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.AreNumericallyEqual(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Animation.Character.SrtTransform)">
            <summary>
            Determines whether two SRT transforms are equal (within a numerical tolerance).
            </summary>
            <param name="srtA">The first transform.</param>
            <param name="srtB">The second transform.</param>
            <returns>
            <see langword="true"/> if the given transforms are numerically equal; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.Interpolate(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Animation.Character.SrtTransform,System.Single)">
            <overloads>
            <summary>
            Interpolates two SRT transforms.
            </summary>
            </overloads>
            
            <summary>
            Interpolates two SRT transforms.
            </summary>
            <param name="startTransform">The start transform.</param>
            <param name="endTransform">The end transform.</param>
            <param name="parameter">
            The interpolation parameter. If the value is 0, the <paramref name="startTransform"/> is
            returned. If the value is 1, the <paramref name="endTransform"/> is returned. For values 
            between 0 and 1 an interpolated <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> is returned.
            </param>
            <returns>An interpolated SRT transform.</returns>
            <remarks>
            All SRT components are interpolated using a linear interpolation (LERP). Spherical linear 
            interpolation (SLERP) is <b>not</b> used for quaternions.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.Interpolate(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,System.Single,DigitalRune.Animation.Character.SrtTransform@)">
            <summary>
            Interpolates two SRT transforms.
            </summary>
            <param name="startTransform">The start transform.</param>
            <param name="endTransform">The end transform.</param>
            <param name="parameter">
            The interpolation parameter. If the value is 0, the <paramref name="startTransform"/> is
            returned. If the value is 1, the <paramref name="endTransform"/> is returned. For values 
            between 0 and 1 an interpolated <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> is returned.
            </param>
            <param name="result">The interpolation result.</param>
            <remarks>
            All SRT components are interpolated using a linear interpolation (LERP). Spherical linear 
            interpolation (SLERP) is <b>not</b> used for quaternions.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.IsValid(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Determines whether the specified matrix is a valid SRT matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>
            <see langword="true"/> if the specified matrix is a valid SRT matrix; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.ToString">
            <overloads>
            <summary>
            Returns the string representation of this SRT transform.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this SRT transform.
            </summary>
            <returns>
            The string representation of this SRT transform.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this SRT transform using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this SRT transform.</returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Multiply(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Animation.Character.SrtTransform)">
            <overloads>
            <summary>
            Multiplies an <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> with another value.
            </summary>
            </overloads> 
            
            <summary>
            Multiplies two SRT transforms.
            </summary>
            <param name="srt1">The first transform.</param>
            <param name="srt2">The second transform.</param>
            <returns>The product of srt1 and srt2: srt1 * srt2.</returns>
            <remarks>
            <para>
            When product (<paramref name="srt1"/> * <paramref name="srt2"/>) is applied to a vector 
            <i>v</i> the transformation are applied in the following order: 
            <i>v'</i> = srt1 * srt2 * <i>v</i><br/>
            That means, the vector is first transformed by <paramref name="srt2"/> and then by 
            <paramref name="srt1"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.Multiply(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Animation.Character.SrtTransform)">
            <overloads>
            <summary>
            Multiplies an <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> with another value.
            </summary>
            </overloads> 
            
            <summary>
            Multiplies two SRT transforms.
            </summary>
            <param name="srt1">The first transform.</param>
            <param name="srt2">The second transform.</param>
            <returns>The product of srt1 and srt2: srt1 * srt2.</returns>
            <remarks>
            <para>
            When product (<paramref name="srt1"/> * <paramref name="srt2"/>) is applied to a vector 
            <i>v</i> the transformation are applied in the following order: 
            <i>v'</i> = srt1 * srt2 * <i>v</i><br/>
            That means, the vector is first transformed by <paramref name="srt2"/> and then by 
            <paramref name="srt1"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.Multiply(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@)">
            <summary>
            Multiplies two SRT transforms.
            </summary>
            <param name="srt1">In: The first transform.</param>
            <param name="srt2">In: The second transform.</param>
            <param name="result">Out: The product of srt1 and srt2: srt1 * srt2.</param>
            <remarks>
            <para>
            When product (<paramref name="srt1"/> * <paramref name="srt2"/>) is applied to a vector 
            <i>v</i> the transformation are applied in the following order: 
            <i>v'</i> = srt1 * srt2 * <i>v</i><br/>
            That means, the vector is first transformed by <paramref name="srt2"/> and then by 
            <paramref name="srt1"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.Multiply(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Multiplies two SRT transforms. (Only available in the XNA-compatible build.)
            </summary>
            <param name="srt1">In: The first transform.</param>
            <param name="srt2">In: The second transform.</param>
            <param name="result">Out: The product of srt1 and srt2 as 4 x 4 matrix: srt1 * srt2.</param>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the DigitalRune.Animation.dll.
            </para>
            <para>
            When product (<paramref name="srt1"/> * <paramref name="srt2"/>) is applied to a vector 
            <i>v</i> the transformation are applied in the following order: 
            <i>v'</i> = srt1 * srt2 * <i>v</i><br/>
            That means, the vector is first transformed by <paramref name="srt2"/> and then by 
            <paramref name="srt1"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.Multiply(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Mathematics.Algebra.Matrix44F@)">
            <summary>
            Multiplies two SRT transforms.
            </summary>
            <param name="srt1">In: The first transform.</param>
            <param name="srt2">In: The second transform.</param>
            <param name="result">Out: The product of srt1 and srt2 as 4 x 4 matrix: srt1 * srt2.</param>
            <remarks>
            <para>
            When product (<paramref name="srt1"/> * <paramref name="srt2"/>) is applied to a vector 
            <i>v</i> the transformation are applied in the following order: 
            <i>v'</i> = srt1 * srt2 * <i>v</i><br/>
            That means, the vector is first transformed by <paramref name="srt2"/> and then by 
            <paramref name="srt1"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Multiply(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Multiplies an <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> with a vector.
            </summary>
            <param name="srt">The SRT transform.</param>
            <param name="vector">The vector.</param>
            <returns>The transformed vector.</returns>
            <remarks>
            Multiplying an SRT transform with a vector is equal to transforming a vector from local 
            space to parent space.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.Multiply(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Multiplies an <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> with a vector.
            </summary>
            <param name="srt">The transform.</param>
            <param name="vector">The vector.</param>
            <returns>The transformed vector.</returns>
            <remarks>
            Multiplying a SRT matrix with a vector is equal to transforming a vector from local space
            to parent space.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Equality(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Animation.Character.SrtTransform)">
            <summary>
            Compares two <see cref="T:DigitalRune.Animation.Character.SrtTransform"/>s to determine whether they are the same.
            </summary>
            <param name="srt1">The first transform.</param>
            <param name="srt2">The second transform.</param>
            <returns>
            <see langword="true"/> if the transforms are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Inequality(DigitalRune.Animation.Character.SrtTransform,DigitalRune.Animation.Character.SrtTransform)">
            <summary>
            Compares two <see cref="T:DigitalRune.Animation.Character.SrtTransform"/>s to determine whether they are the different.
            </summary>
            <param name="srt1">The first transform.</param>
            <param name="srt2">The second transform.</param>
            <returns>
            <see langword="true"/> if the transforms are different; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Implicit(DigitalRune.Animation.Character.SrtTransform)~DigitalRune.Mathematics.Algebra.Matrix44F">
            <summary>
            Converts an SRT transform to a 4x4 transformation matrix.
            </summary>
            <param name="srt">The transform.</param>
            <returns>
            A 4x4-matrix that represents the same transformation as the SRT transform.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Explicit(DigitalRune.Animation.Character.SrtTransform)~DigitalRune.Geometry.Pose">
            <summary>
            Converts an SRT transform to a <see cref="T:DigitalRune.Geometry.Pose"/>. (<see cref="F:DigitalRune.Animation.Character.SrtTransform.Scale"/> will be ignored!)
            </summary>
            <param name="srt">The transform.</param>
            <returns>
            A pose that represents the same rotation and translation (ignoring all scalings).
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Implicit(DigitalRune.Geometry.Pose)~DigitalRune.Animation.Character.SrtTransform">
            <summary>
            Converts a <see cref="T:DigitalRune.Geometry.Pose"/> to an SRT transform.
            </summary>
            <param name="pose">The pose.</param>
            <returns>
            An <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> that represents the same rotation and translation as
            the <paramref name="pose"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Animation.Character.SrtTransform.op_Implicit(DigitalRune.Animation.Character.SrtTransform)~Microsoft.Xna.Framework.Matrix">
            <summary>
            Converts a SRT transform to a 4x4 transformation matrix (XNA Framework). 
            (Only available in the XNA-compatible build.)
            </summary>
            <param name="srt">The transform.</param>
            <returns>
            A 4x4-matrix that represents the same transformation as the SRT transform.
            </returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the DigitalRune.Animation.dll.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.Content.BlendGroupReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Animation.BlendGroup"/> from binary format. 
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animation.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Content.BlendGroupReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Animation.BlendGroup)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Animation.Content.KeyFrameCollectionReader`1">
            <summary>
            Reads a <see cref="T:DigitalRune.Animation.KeyFrameCollection`1"/> from binary format. 
            (Only available in the XNA-compatible build.)
            </summary>
            <typeparam name="T">The type of the animation value.</typeparam>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animation.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Content.KeyFrameCollectionReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Animation.KeyFrameCollection{`0})">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Animation.Content.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Animation.Content"/> contains the run-time components of the
            content pipeline. (Only available in XNA/MonoGame compatible builds.)
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.Content.SkeletonKeyFrameAnimationReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Animation.Character.SkeletonKeyFrameAnimation"/> from binary format. 
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animation.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Content.SkeletonKeyFrameAnimationReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Animation.Character.SkeletonKeyFrameAnimation)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Animation.Content.SkeletonReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Animation.Character.Skeleton"/> from binary format. 
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animation.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Content.SkeletonReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Animation.Character.Skeleton)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Animation.Content.SrtTransformReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Animation.Character.SrtTransform"/> from binary format. 
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animation.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Content.SrtTransformReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Animation.Character.SrtTransform)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Animation.Content.TimelineGroupReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Animation.TimelineGroup"/> from binary format. 
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animation.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Content.TimelineGroupReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Animation.TimelineGroup)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Animation.Easing.BackEase">
            <summary>
            Represents an easing function that moves slightly in the opposite direction but then starts
            to accelerate towards the target value.
            </summary>
            <remarks>
            The back easing function is defined as: 
              f(t) = t<sup>3</sup> - t ∙ <c>α</c> ∙ sin(t ∙ π)
            where <c>α</c> is the amplitude.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Easing.BackEase.Amplitude">
            <summary>
            Gets or sets the amplitude of the backwards motion.
            </summary>
            <value>
            The amplitude of the backwards motion. The value should be in the range [0, ∞[. Negative
            values are internally clamped to 0. The default value is 1.
            </value>
        </member>
        <member name="M:DigitalRune.Animation.Easing.BackEase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.BackEase"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Easing.BackEase.EaseIn(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Easing.BounceEase">
            <summary>
            Represents an easing function that creates a bouncing effect.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.Easing.BounceEase.Bounces">
            <summary>
            Gets or sets the number of bounces before the final bounce to the target value.
            </summary>
            <value>
            The number of bounces before the final bounce to the target value. The value must be greater
            than or equal to 0. Negative values are internally clamped to 0. The default value is 3.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Easing.BounceEase.Bounciness">
            <summary>
            Gets or sets the bounciness of the animation.
            </summary>
            <value>
            <para>
            The bounciness of the animation. This value is a factor that defines how the size of the
            bounces increases. For example, a value of 2 means that the subsequent bounce is two times 
            as high as the previous bounce.
            </para>
            <para>
            The value must be greater than 1. The default value is 2.
            </para>
            </value>
        </member>
        <member name="M:DigitalRune.Animation.Easing.BounceEase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.BounceEase"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Easing.BounceEase.EaseIn(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Easing.CircleEase">
            <summary>
            Represents an easing function that accelerates towards the target value using a circular 
            function.
            </summary>
            <remarks>
            <para>
            The circle easing function is defined as: f(t) = 1 - sqrt(1 - t<sup>2</sup>)
            </para>
            <para>
            The valid range of t is [-1, 1]. The normalized time is internally clamped to this range.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Easing.CircleEase.EaseIn(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Easing.CubicEase">
            <summary>
            Represents an easing function that accelerates towards the target value using a cubic 
            function f(t)=t<sup>3</sup>.
            </summary>
            <remarks>
            The cubic easing function is defined as: f(t) = t<sup>3</sup>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Easing.CubicEase.EaseIn(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Easing.EasingFunction">
            <summary>
            Provides the base implementation for all easing functions.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.Easing.EasingFunction.Mode">
            <summary>
            Gets or sets a value that indicates how the easing function interpolates.
            </summary>
            <value>
            The value of the <see cref="T:DigitalRune.Animation.Easing.EasingMode"/> enumeration that indicates how the easing function
            interpolates.
            </value>
        </member>
        <member name="M:DigitalRune.Animation.Easing.EasingFunction.Ease(System.Single)">
            <summary>
            Determines the current progress of a transition.
            </summary>
            <param name="normalizedTime">
            The normalized time of the transition. (0 represents the start and 1 represents the end of
            the transition.)
            </param>
            <returns>
            The current progress of the transition. (0 represents the start and 1
            represents the end of the transition.)
            </returns>
            <exception cref="T:DigitalRune.Animation.InvalidAnimationException">
            Invalid enumeration value set in property <see cref="P:DigitalRune.Animation.Easing.EasingFunction.Mode"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Easing.EasingFunction.EaseIn(System.Single)">
            <summary>
            Evaluates the easing function.
            </summary>
            <param name="normalizedTime">The normalized time.</param>
            <returns>The current progress of the transition.</returns>
        </member>
        <member name="T:DigitalRune.Animation.Easing.EasingMode">
            <summary>
            Defines how the easing functions interpolate.
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.Easing.EasingMode.EaseIn">
            <summary>
             The interpolation follows the formula of the easing function.
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.Easing.EasingMode.EaseOut">
            <summary>
            The interpolation follows the reverse of the formula of the easing function.
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.Easing.EasingMode.EaseInOut">
            <summary>
            The interpolation uses <see cref="F:DigitalRune.Animation.Easing.EasingMode.EaseIn"/> for the first half of the interpolation and
            <see cref="F:DigitalRune.Animation.Easing.EasingMode.EaseOut"/> for the second half.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.Easing.ElasticEase">
            <summary>
            Represents an easing function that models a spring that starts to oscillate until it reaches
            the target value.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.Easing.ElasticEase.Oscillations">
            <summary>
            Gets or sets the number of oscillations periods.
            </summary>
            <value>
            The number of oscillations periods. The value must be greater than or equal to 0. Negative
            values are internally clamped to 0. The default value is 3.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.Easing.ElasticEase.Springiness">
            <summary>
            Gets or sets the stiffness of the spring.
            </summary>
            <value>
            <para>
            The stiffness of the spring. The springiness determines how fast the amplitude of the 
            oscillations grows (in case of the ease-in). A value of 0 means that the amplitude grows 
            linearly.
            </para>
            <para>
            The value must be greater than or equal to 0. Negative values are internally clamped to 0.
            The default value is 3.
            </para>
            </value>
        </member>
        <member name="M:DigitalRune.Animation.Easing.ElasticEase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.ElasticEase"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Easing.ElasticEase.EaseIn(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Easing.ExponentialEase">
            <summary>
            Represents an easing function that accelerates/decelerates towards the target value using an 
            exponential function.
            </summary>
            <remarks>
            <para>
            The exponential easing function is defined as: f(t) = (1 - e<sup>kt</sup>) / (1 - e<sup>k</sup>)
            </para>
            <para>
            The <see cref="T:DigitalRune.Animation.Easing.ExponentialEase"/> is the inverse of the <see cref="T:DigitalRune.Animation.Easing.LogarithmicEase"/>. The
            <see cref="T:DigitalRune.Animation.Easing.ExponentialEase"/> accelerates where the <see cref="T:DigitalRune.Animation.Easing.LogarithmicEase"/> decelerates.
            </para>
            <para>
            Note: The exponential easing function can also be written as 
              f(t) = (b<sup>t</sup> - 1) / (b - 1)
            where b = e<sup>k</sup>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Easing.ExponentialEase.Exponent">
            <summary>
            Gets or sets the exponent of the easing function.
            </summary>
            <value>
            The exponent of the easing function. The default value is 2.
            </value>
        </member>
        <member name="M:DigitalRune.Animation.Easing.ExponentialEase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.ExponentialEase"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Easing.ExponentialEase.EaseIn(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Easing.HermiteEase">
            <summary>
            Represents an easing function based on cubic Hermite interpolation (also known as "smooth 
            step").
            </summary>
            <remarks>
            The Hermite easing function is defined as: f(t) = (3 t<sup>2</sup> - t<sup>3</sup>) / 2
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Easing.HermiteEase.EaseIn(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Easing.IEasingFunction">
            <summary>
            Defines a function that controls the pace of a transition.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Easing.IEasingFunction.Ease(System.Single)">
            <summary>
            Determines the current progress of a transition.
            </summary>
            <param name="normalizedTime">
            The normalized time of the transition. (0 represents the start and 1 represents the end of
            the transition.)
            </param>
            <returns>
            The current progress of the transition. (0 represents the start and 1 represents the end of
            the transition.)
            </returns>
        </member>
        <member name="T:DigitalRune.Animation.Easing.LogarithmicEase">
            <summary>
            Represents an easing function that decelerates/accelerates towards the target value using a
            logarithmic function.
            </summary>
            <remarks>
            <para>
            The logarithmic easing function is defined as: f(t) = log<sub>b</sub>((b - 1)t + 1)
            </para>
            <para>
            The <see cref="T:DigitalRune.Animation.Easing.LogarithmicEase"/> is the inverse of the <see cref="T:DigitalRune.Animation.Easing.ExponentialEase"/>. The
            <see cref="T:DigitalRune.Animation.Easing.LogarithmicEase"/> decelerates where the <see cref="T:DigitalRune.Animation.Easing.ExponentialEase"/> accelerates.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Easing.LogarithmicEase.Base">
            <summary>
            Gets or sets the base of the logarithm.
            </summary>
            <value>
            The base of the logarithm. The default value is 2.
            </value>
        </member>
        <member name="M:DigitalRune.Animation.Easing.LogarithmicEase.EaseIn(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Easing.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Animation.Easing"/> provides a variety of easing functions.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.Easing.PowerEase">
            <summary>
            Represents an easing function that accelerates/decelerates towards the target value using the
            function f(t)=t<sup>p</sup>.
            </summary>
            <remarks>
            The power easing function is defined as: f(t) = t<sup>p</sup>
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.Easing.PowerEase.Power">
            <summary>
            Gets or sets the exponent of the easing function.
            </summary>
            <value>
            The exponent of the easing function. The value must be greater than or equal to 0. Negative 
            values are internally clamped to 0. The default value is 2.
            </value>
        </member>
        <member name="M:DigitalRune.Animation.Easing.PowerEase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Easing.PowerEase"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Easing.PowerEase.EaseIn(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Easing.QuadraticEase">
            <summary>
            Represents an easing function that accelerates towards the target value using the quadratic
            function f(t)=t<sup>2</sup>.
            </summary>
            <remarks>
            The quadratic easing function is defined as: f(t) = t<sup>2</sup>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Easing.QuadraticEase.EaseIn(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Easing.QuarticEase">
            <summary>
            Represents an easing function that accelerates towards the target value using the function 
            f(t)=t<sup>4</sup>.
            </summary>
            <remarks>
            The easing function is defined as: f(t) = t<sup>4</sup>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Easing.QuarticEase.EaseIn(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Easing.QuinticEase">
            <summary>
            Represents an easing function that accelerates towards the target value using the function 
            f(t)=t<sup>5</sup>.
            </summary>
            <remarks>
            The quadratic easing function is defined as: f(t) = t<sup>5</sup>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Easing.QuinticEase.EaseIn(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Easing.SineEase">
            <summary>
            Represents an easing function that accelerates towards the target value using a sine 
            function.
            </summary>
            <remarks>
            The sine easing function is defined as: f(t) = 1 - sin((1 - t) * π/2)
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Easing.SineEase.EaseIn(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.HandoffBehavior">
            <summary>
            Defines how new animations interact with existing ones that are already applied to a 
            property.
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.HandoffBehavior.Replace">
            <summary>
            New animations replace any existing animations on the properties to which they are applied.
            The new animations are initialized with the base values of the properties. The last 
            animation values are ignored.
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.HandoffBehavior.SnapshotAndReplace">
            <summary>
            New animations replace any existing animations on the properties to which they are applied.
            The new animations are initialized with the last animation value of the properties.
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.HandoffBehavior.Compose">
            <summary>
            New animations are combined with existing animations by adding the new animations to the 
            composition chains.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.IAnimationCompositionChain">
            <summary>
            Manages a collection of animations that are combined and applied to a certain property.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.IAnimationCompositionChain.IsEmpty">
            <summary>
            Gets a value indicating whether this composition chain is empty.
            </summary>
            <value>
            <see langword="true"/> if this composition chain is empty; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Animation.IAnimationCompositionChain.Property">
            <summary>
            Gets the target property that is being animated.
            </summary>
            <value>
            The target property that is being animated. (Returns <see langword="null"/> if the owner of 
            the property has been garbage collected.)
            </value>
            <remarks>
            The animated property is stored using a weak reference.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationCompositionChain.Update(DigitalRune.Animation.AnimationManager)">
            <summary>
            Evaluates the animations in the composition chain. (Does not apply the result to the target
            property.)
            </summary>
            <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager"/>.</param>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationCompositionChain.Apply">
            <summary>
            Applies the result of the composition chain to the target property.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationCompositionChain.Recycle">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Animation.IAnimationCompositionChain"/>.
            </summary>
            <remarks>
            <para>
            This method resets this instance and returns it to a resource pool if resource pooling is 
            enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Animation.IAnimationService">
            <summary>
            Exposes the functionality of the animation system.
            </summary>
            <remarks>
            <para>
            The animation service can be used to start/stop animations directly or create animation 
            controllers, which can be used to interactively control animations.
            </para>
            <para>
            <strong>Animatable Objects:</strong> Animations can be applied to objects that implement the
            interface <see cref="T:DigitalRune.Animation.IAnimatableObject"/> or properties that implement 
            <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>. The class <see cref="T:DigitalRune.Animation.AnimatableProperty`1"/> can be 
            used to create a standalone property which can be animated. The 
            <see cref="T:DigitalRune.Animation.DelegateAnimatableProperty`1"/> can be used to wrap an existing property or field
            and make it "animatable".
            </para>
            <para>
            <strong>Important:</strong> When animations are started or stopped the animations do not take 
            effect immediately. That means the new animation values are not immediately applied to the 
            properties that are being animated. The animations are evaluated when the animation system is
            updated (see <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/>) and new animation values are written when 
            <see cref="M:DigitalRune.Animation.AnimationManager.ApplyAnimations"/> is called.
            </para>
            <para>
            The method <see cref="M:DigitalRune.Animation.IAnimationService.UpdateAndApplyAnimation(DigitalRune.Animation.IAnimatableProperty)"/> (or one of its 
            overloads) can be called to immediately evaluate and apply animations. But in most cases it is
            not necessary to call this method explicitly.
            </para>
            <para>
            <strong>Weak References:</strong> The animated objects and properties are stored using weak 
            references in the animation system. This means, animations can be started in a 
            "fire-and-forget" manner. The caller does not have to worrying about "memory leaks". If a 
            target object is garbage collected the animation system will automatically remove all 
            associated animations and resources. This clean-up happens regularly when 
            <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/> is called.
            </para>
            <para>
            Note however, by registering a completion event handler for an animation (see 
            <see cref="E:DigitalRune.Animation.AnimationInstance.Completed"/>) a strong reference is created from the animation to
            the event handler. If the event handler accidentally keeps the animated object or properties 
            alive then the animation is not removed automatically. Therefore, use the completion event 
            handlers with caution. See <see cref="E:DigitalRune.Animation.AnimationInstance.Completed"/> for more details.
            </para>
            <para>
            <strong>Thread-Safety:</strong> The animation service in general is not thread-safe. It is not
            allowed to simultaneously start multiple animations in different threads. Access to the 
            animation service needs to be synchronized!
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.IsAnimated(DigitalRune.Animation.IAnimatableObject)">
            <overloads>
            <summary>
            Determines whether an object or property is controlled by animations.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified object is controlled by one or more animations.
            </summary>
            <param name="animatableObject">The object.</param>
            <returns>
            <see langword="true"/> if <paramref name="animatableObject"/> is animated; otherwise, 
            <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animatableObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.IsAnimated(DigitalRune.Animation.IAnimatableProperty)">
            <summary>
            Determines whether the specified property is controlled by one or more animations.
            </summary>
            <param name="animatableProperty">The property.</param>
            <returns>
            <see langword="true"/> if <paramref name="animatableProperty"/> is animated; otherwise, 
            <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animatableProperty"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.CreateController(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
            <overloads>
            <summary>
            Creates a new animation controller which can be used to apply the given animation to the
            specified objects or properties.
            </summary>
            </overloads>
            
            <summary>
            Creates a new animation controller which can be used to apply the given animation to the
            specified objects.
            </summary>
            <param name="animation">The animation.</param>
            <param name="targetObjects">The target objects that should be animated.</param>
            <returns>The <see cref="T:DigitalRune.Animation.AnimationController"/>.</returns>
            <remarks>
            The returned animation controller can be used to interactively control the animation.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetObjects"/> or <paramref name="animation"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.CreateController(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableObject)">
            <summary>
            Creates a new animation controller which can be used to apply the given animation to the
            specified object.
            </summary>
            <param name="animation">The animation.</param>
            <param name="targetObject">The target object that should be animated.</param>
            <returns>The <see cref="T:DigitalRune.Animation.AnimationController"/>.</returns>
            <inheritdoc cref="M:DigitalRune.Animation.IAnimationService.CreateController(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetObject"/> or <paramref name="animation"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.CreateController(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableProperty)">
            <summary>
            Creates a new animation controller which can be used to apply the given animation to the
            specified property.
            </summary>
            <param name="animation">The animation.</param>
            <param name="targetProperty">The target property that should be animated.</param>
            <returns>The <see cref="T:DigitalRune.Animation.AnimationController"/>.</returns>
            <inheritdoc cref="M:DigitalRune.Animation.IAnimationService.CreateController(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetProperty"/> or <paramref name="animation"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
            <overloads>
            <summary>
            Starts an animation on the specified objects or properties.
            </summary>
            </overloads>
            
            <summary>
            Starts an animation and applies it to the specified objects.
            </summary>
            <param name="animation">The animation.</param>
            <param name="targetObjects">The target objects that should be animated.</param>
            <returns>The <see cref="T:DigitalRune.Animation.AnimationController"/>.</returns>
            <remarks>
            <para>
            The returned animation controller can be used to interactively control the animation.
            </para>
            <para>
            If no <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition"/> is specified explicitly, then 
            <see cref="M:DigitalRune.Animation.AnimationTransitions.SnapshotAndReplace"/> will be used. 
            </para>
            <para>
            <strong>Important:</strong> When animations are started or stopped the animations do not 
            take effect immediately. That means the new animation values are not immediately applied to 
            the properties that are being animated. The animations are evaluated when the animation 
            system is updated (see <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/>) and new animation values are
            written when <see cref="M:DigitalRune.Animation.AnimationManager.ApplyAnimations"/> is called.
            </para>
            <para>
            The method <see cref="M:DigitalRune.Animation.AnimationController.UpdateAndApply"/> can be called to immediately 
            evaluate and apply the animation. But in most cases it is not necessary to call this method 
            explicitly.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetObjects"/> or <paramref name="animation"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject},DigitalRune.Animation.Transitions.AnimationTransition)">
            <summary>
            Starts an animation using a given transition and applies it to the specified objects.
            </summary>
            <param name="animation">The animation.</param>
            <param name="targetObjects">The target objects that should be animated.</param>
            <param name="transition">
            The transition that determines how the new animation is applied. The class 
            <see cref="T:DigitalRune.Animation.AnimationTransitions"/> provides a set of predefined animation transitions.
            </param>
            <returns>The <see cref="T:DigitalRune.Animation.AnimationController"/>.</returns>
            <inheritdoc cref="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetObjects"/> or <paramref name="animation"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableObject)">
            <summary>
            Starts an animation and applies it to the specified object.
            </summary>
            <param name="animation">The animation.</param>
            <param name="targetObject">The target object that should be animated.</param>
            <returns>The <see cref="T:DigitalRune.Animation.AnimationController"/>.</returns>
            <inheritdoc cref="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetObject"/> or <paramref name="animation"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableObject,DigitalRune.Animation.Transitions.AnimationTransition)">
            <summary>
            Starts an animation using a given transition and applies it to the specified object.
            </summary>
            <param name="animation">The animation.</param>
            <param name="targetObject">The target object that should be animated.</param>
            <param name="transition">
            The transition that determines how the new animation is applied. The class 
            <see cref="T:DigitalRune.Animation.AnimationTransitions"/> provides a set of predefined animation transitions.
            </param>
            <returns>The <see cref="T:DigitalRune.Animation.AnimationController"/>.</returns>
            <inheritdoc cref="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetObject"/> or <paramref name="animation"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableProperty)">
            <summary>
            Starts an animation and applies it to the specified property.
            </summary>
            <param name="animation">The animation.</param>
            <param name="targetProperty">The target property that should be animated.</param>
            <returns>The <see cref="T:DigitalRune.Animation.AnimationController"/>.</returns>
            <inheritdoc cref="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetProperty"/> or <paramref name="animation"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,DigitalRune.Animation.IAnimatableProperty,DigitalRune.Animation.Transitions.AnimationTransition)">
            <summary>
            Starts an animation using a given transition and applies it to the specified property.
            </summary>
            <param name="animation">The animation.</param>
            <param name="targetProperty">The target property that should be animated.</param>
            <param name="transition">
            The transition that determines how the new animation is applied. The class 
            <see cref="T:DigitalRune.Animation.AnimationTransitions"/> provides a set of predefined animation transitions.
            </param>
            <returns>The <see cref="T:DigitalRune.Animation.AnimationController"/>.</returns>
            <inheritdoc cref="M:DigitalRune.Animation.IAnimationService.StartAnimation(DigitalRune.Animation.ITimeline,System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetProperty"/> or <paramref name="animation"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.StopAnimation(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
            <overloads>
            <summary>
            Stops animations.
            </summary>
            </overloads>
            
            <summary>
            Stops all animations affecting the specified objects.
            </summary>
            <param name="animatedObjects">The animated objects.</param>
            <remarks>
            <para>
            <strong>Important:</strong> When animations are started or stopped the animations do not 
            take effect immediately. That means the new animation values are not immediately applied to 
            the properties that are being animated. The animations are evaluated when the animation 
            system is updated (see <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/>) and new animation values are
            written when <see cref="M:DigitalRune.Animation.AnimationManager.ApplyAnimations"/> is called.
            </para>
            <para>
            The method <see cref="M:DigitalRune.Animation.AnimationController.UpdateAndApply"/> can be called to immediately 
            evaluate and apply the animation. But in most cases it is not necessary to call this method 
            explicitly.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.StopAnimation(DigitalRune.Animation.IAnimatableObject)">
            <summary>
            Stops all animations affecting the specified object.
            </summary>
            <param name="animatedObject">The animated object.</param>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.StopAnimation(DigitalRune.Animation.IAnimatableProperty)">
            <summary>
            Stops all animations affecting the specified property.
            </summary>
            <param name="animatedProperty">The animated property.</param>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.UpdateAndApplyAnimation(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})">
            <overloads>
            <summary>
            Immediately evaluates the specified animations and applies the new animation values.
            </summary>
            </overloads>
            
            <summary>
            Immediately evaluates the animations of the given objects and applies the new animation 
            values.
            </summary>
            <remarks>
            <para>
            When an animations are started or stopped, the values of the animated properties do not 
            change immediately. The new animation values will be computed and set when the animation 
            system is updated. See <see cref="M:DigitalRune.Animation.AnimationManager.Update(System.TimeSpan)"/> and 
            <see cref="M:DigitalRune.Animation.AnimationManager.ApplyAnimations"/>.
            </para>
            <para>
            But in certain cases when animations are started or stopped the animated properties should 
            be updated immediately. In these case the method 
            <see cref="M:DigitalRune.Animation.IAnimationService.UpdateAndApplyAnimation(DigitalRune.Animation.IAnimatableProperty)"/> (or one of its overloads) needs 
            to be called after the animations are started or stopped. This method immediately evaluates 
            the animations and applies the new animation values to the specified objects or properties.
            </para>
            <para>
            The method can also be called if animations are modified (e.g. key frames are added or 
            removed) and the changes should take effect immediately.
            </para>
            <para>
            In most cases it is not necessary to call this method because the animation system updates 
            and applies animations automatically. 
            </para>
            <para>
            Note that <see cref="M:DigitalRune.Animation.IAnimationService.UpdateAndApplyAnimation(DigitalRune.Animation.IAnimatableProperty)"/> does not advance the 
            time of the animations. The animations are evaluated at their current time.
            </para>
            </remarks>
            <param name="animatedObjects">The animated objects.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="animatedObjects" /> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.UpdateAndApplyAnimation(DigitalRune.Animation.IAnimatableObject)">
            <summary>
            Immediately evaluates the animations the given object and applies the new animation values.
            </summary>
            <param name="animatedObject">The animated object.</param>
            <inheritdoc cref="M:DigitalRune.Animation.IAnimationService.UpdateAndApplyAnimation(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})"/>
        </member>
        <member name="M:DigitalRune.Animation.IAnimationService.UpdateAndApplyAnimation(DigitalRune.Animation.IAnimatableProperty)">
            <summary>
            Immediately evaluates the animation composition chains of the given property and applies
            the new animation values.
            </summary>
            <param name="property">The property that needs to be updated.</param>
            <inheritdoc cref="M:DigitalRune.Animation.IAnimationService.UpdateAndApplyAnimation(System.Collections.Generic.IEnumerable{DigitalRune.Animation.IAnimatableObject})"/>
        </member>
        <member name="T:DigitalRune.Animation.InvalidAnimationException">
            <summary>
            Occurs when an animation encounters an invalid state.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.InvalidAnimationException.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.InvalidAnimationException"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.InvalidAnimationException"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.InvalidAnimationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.InvalidAnimationException"/> class with a
            specified error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DigitalRune.Animation.InvalidAnimationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.InvalidAnimationException"/> class with a
            specified error message and a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null"/> if no
            inner exception is specified.
            </param>
        </member>
        <member name="T:DigitalRune.Animation.ReadOnlyAnimationInstanceCollection">
            <summary>
            Represents an empty read-only version of the <see cref="T:DigitalRune.Animation.AnimationInstanceCollection"/>.
            </summary>
            <remarks>
            This collection acts like a singleton that is used when AnimationInstance will not have any
            children.
            </remarks>
        </member>
        <member name="P:DigitalRune.Animation.ReadOnlyAnimationInstanceCollection.Instance">
            <summary>
            Gets a read-only instance of the <see cref="T:DigitalRune.Animation.AnimationInstanceCollection"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.ReadOnlyAnimationInstanceCollection.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DigitalRune.Animation.ReadOnlyAnimationInstanceCollection"/> class 
            from being created.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.ReadOnlyAnimationInstanceCollection.InsertItem(System.Int32,DigitalRune.Animation.AnimationInstance)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="child"/> should be inserted.
            </param>
            <param name="child">The object to insert.</param>
            <exception cref="T:System.InvalidOperationException">
            Cannot add animation instance. The current animation instance cannot have children.
            </exception>
        </member>
        <member name="T:DigitalRune.Animation.Traits.ColorTraits">
            <summary>
            Describes the properties of a <see cref="T:Microsoft.Xna.Framework.Color"/>. 
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animations.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Traits.ColorTraits.Create(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.ColorTraits.Recycle(Microsoft.Xna.Framework.Color@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.ColorTraits.Copy(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.ColorTraits.Set(Microsoft.Xna.Framework.Color@,DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Color})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.ColorTraits.Reset(DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Color})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.ColorTraits.SetIdentity(Microsoft.Xna.Framework.Color@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.ColorTraits.Invert(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">
            <see cref="T:Microsoft.Xna.Framework.Color"/> does not have an inverse.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Traits.ColorTraits.Add(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.ColorTraits.Multiply(Microsoft.Xna.Framework.Color@,System.Int32,Microsoft.Xna.Framework.Color@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.ColorTraits.Interpolate(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,System.Single,Microsoft.Xna.Framework.Color@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.ColorTraits.BeginBlend(Microsoft.Xna.Framework.Color@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.ColorTraits.BlendNext(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.ColorTraits.EndBlend(Microsoft.Xna.Framework.Color@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Traits.IAnimationValueTraits`1">
            <summary>
            Describes the properties of an animation value and defines operations that can be applied to
            animation values.
            </summary>
            <typeparam name="T">The type of the animation value.</typeparam>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Animation.Traits.IAnimationValueTraits`1"/> describe the operations that can be performed on a 
            certain type of animation value. This abstraction is necessary in order to treat different 
            types of animations with the same code.
            </para>
            <para>
            The interface <see cref="T:DigitalRune.Animation.Traits.IAnimationValueTraits`1"/> and its implementing classes are used 
            only internally in DigitalRune Animation. It is safe to ignore these types. (The following 
            information is only relevant for users who plan to implement new types of animation values and 
            want to reuse the existing animation classes.)
            </para>
            <para>
            <strong>Reference Types vs. Value Types:</strong> Animation values can be reference types as
            well as value types, which makes the task a little complicated. Most method parameters need to
            be passed by reference to efficiently handle both cases.
            </para>
            <para>
            <strong>Create, Recycle and Copy:</strong> The methods <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Create(`0@,`0@)"/> and 
            <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Recycle(`0@)"/> can be used to create and recycle animation values. 
            (<see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Create(`0@,`0@)"/> returns a previously recycled instance, if any is available. It is 
            recommended to recycle and reuse animation values if they allocate memory on the managed 
            heap.) 
            </para>
            <para>
            <strong>Set and Reset:</strong> The method <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Set(`0@,DigitalRune.Animation.IAnimatableProperty{`0})"/> is called when the animation 
            system sets an animation value to an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>; <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Reset(DigitalRune.Animation.IAnimatableProperty{`0})"/>
            is called when all animations are removed from an <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.
            </para>
            <para>
            The method <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Copy(`0@,`0@)"/> copies that data of one animation value to another.
            </para>
            <para>
            <strong>Add, Identity, Invert and Multiply:</strong> In order to handle all types of animation 
            with the same code we need to apply some math: The animation values form an 
            <see href="http://en.wikipedia.org/wiki/Group_(mathematics)">algebraic group</see>. The group 
            has a group operation (see <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Add(`0@,`0@,`0@)"/>) that represents the application of an animation 
            value to a given value, an identity element (see <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.SetIdentity(`0@)"/>) and a function 
            that computes the inverse of an animation value (see <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Invert(`0@,`0@)"/>). For efficiency, 
            there is also a function <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Multiply(`0@,System.Int32,`0@)"/> that computes the repeated application of the 
            same value. For example, if <b>+</b> represents the group operation then 
            <c>Multiply(x,3) = x <b>+</b> x <b>+</b> x</c>.
            </para>
            <para>
            <strong>Group Operation:</strong> The group operation depends on the type of animation value.
            Here are some examples: If the animation value is a real number the group operation is a
            simple addition. The group operation of a n-dimensional vector is a vector addition. If the
            animation value is a unit quaternion that represents a rotation, the group operation is a 
            quaternion product (because two quaternions are combined using the quaternion product). Etc.
            </para>
            <para>
            Note that, in general the group operations are not a commutative, meaning that the order of 
            the operands is important! For example, the quaternion product is not commutative.
            </para>
            <para>
            <strong>Identity Element:</strong> Every group has an identity element regarding the group 
            operation. For example, the identity element of a scalar addition is 0. The identity of the 
            vector addition is the zero vector. The identity of the quaternion product is the identity
            quaternion. Etc.
            </para>
            <para>
            <strong>Inverse:</strong> Every value of the group has an inverse. For example, the inverse
            element of a real number <i>r</i> is -<i>r</i>. The inverse of an n-dimensional vector 
            <i>v</i> is -<i>v</i>. The inverse of a unit quaternion <i>q</i> is <i>q</i><sup>-1</sup>. 
            Etc.
            </para>
            <para>
            <strong>Interpolation:</strong> Another important part of animation is interpolation 
            ("animation blending"). The interpolation of animation values is in most cases a weighted 
            combination of the animation values. Animation values need to support two types of 
            interpolation:
            <list type="bullet">
            <item>
            <term>Interpolation of two values</term>
            <description>
            Animations can be concatenated by adding them to animation composition chains. The output of
            one stage in the composition chain is blended with the output of the previous stage. The 
            interpolation of two animation values is implemented by <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Interpolate(`0@,`0@,System.Single,`0@)"/>.
            </description>
            </item>
            <item>
            <term>Interpolation of <i>n</i> values</term>
            <description>
            Animations can be combined using a <see cref="T:DigitalRune.Animation.BlendGroup"/>. The values of all animations in 
            the blend group are blended together. A group can contain more than two animations. The 
            blending of <i>n</i> animation values is implemented by <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.BeginBlend(`0@)"/>, 
            <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.BlendNext(`0@,`0@,System.Single)"/>, and <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.EndBlend(`0@)"/>. (The blend operation is split into 3
            operations which need to be called successively. <see cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.BlendNext(`0@,`0@,System.Single)"/> needs to be called
            for each animation value.)
            </description>
            </item>
            </list>
            </para>
            <para>
            <strong>Optimizations:</strong> In order to improve performance - in particular on the Xbox
            360 - most parameters are passed by reference. All operation happen in-place, i.e. no new 
            objects are allocated.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Create(`0@,`0@)">
            <summary>
            Creates an animation value. (If the animation value is a heap object, then method reuses any
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <param name="reference">
            In: A reference value. This value serves as a reference for allocating a new value of the 
            same type. For example, if <paramref name="value"/> needs to be initialized with a certain
            settings, the settings can be copied from <paramref name="reference"/>.
            </param>
            <param name="value">Out: A new animation value.</param>
            <seealso cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Recycle(`0@)"/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Recycle(`0@)">
            <summary>
            Recycles an animation value.
            </summary>
            <param name="value">In/Out: The animation value to be recycled.</param>
            <seealso cref="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Create(`0@,`0@)"/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Copy(`0@,`0@)">
            <summary>
            Copies the specified animation value.
            </summary>
            <param name="source">In: The source value.</param>
            <param name="target">Out: The target value.</param>
        </member>
        <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Set(`0@,DigitalRune.Animation.IAnimatableProperty{`0})">
            <summary>
            Sets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.
            </summary>
            <param name="value">In: The value to write to <paramref name="property"/>.</param>
            <param name="property">
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/> that stores the animation value.
            </param>
        </member>
        <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Reset(DigitalRune.Animation.IAnimatableProperty{`0})">
            <summary>
            Resets the animation value of the given <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.
            </summary>
            <param name="property">The <see cref="T:DigitalRune.Animation.IAnimatableProperty`1"/>.</param>
        </member>
        <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.SetIdentity(`0@)">
            <summary>
            Gets the identity.
            </summary>
            <param name="identity">Out: The identity.</param>
        </member>
        <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Invert(`0@,`0@)">
            <summary>
            Gets the inverse of an animation value.
            </summary>
            <param name="value">In: The animation value.</param>
            <param name="inverse">Out: The inverse of <paramref name="value"/>.</param>
        </member>
        <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Add(`0@,`0@,`0@)">
            <summary>
            Adds the given animation values.
            </summary>
            <param name="value0">In: The first value.</param>
            <param name="value1">In: The second value.</param>
            <param name="result">
            Out: The sum <paramref name="value0"/> + <paramref name="value1"/>.
            </param>
            <remarks>
            For some types the add operation is not commutative. This is the case if
            <paramref name="value0"/> and <paramref name="value1"/> represent transformations. In this
            case this method returns a combined transformation where <paramref name="value0"/> 
            is applied before <paramref name="value1"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Multiply(`0@,System.Int32,`0@)">
            <summary>
            Multiplies an animation value by a given factor.
            </summary>
            <param name="value">In: The value.</param>
            <param name="factor">The factor.</param>
            <param name="result">
            Out: The product of <paramref name="value"/> and <paramref name="factor"/>.
            </param>
        </member>
        <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.Interpolate(`0@,`0@,System.Single,`0@)">
            <summary>
            Performs a linear interpolation between two animation values.
            </summary>
            <param name="source">In: The source value.</param>
            <param name="target">In: The target value.</param>
            <param name="parameter">
            The interpolation parameter; also known as <i>interpolation factor</i> or <i>weight of the 
            target value</i>.
            </param>
            <param name="result">Out: The result of the interpolation.</param>
        </member>
        <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.BeginBlend(`0@)">
            <summary>
            Begins the interpolation of <i>n</i> animation values.
            </summary>
            <param name="value">Out: The start value of the blend operation.</param>
        </member>
        <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.BlendNext(`0@,`0@,System.Single)">
            <summary>
            Blends the given animation value to the current value.
            </summary>
            <param name="value">
            In/Out: The current animation value. (The intermediate result of the blend operation).
            </param>
            <param name="nextValue">
            In: The next animation value which should be blended to <paramref name="value"/>.
            </param>
            <param name="normalizedWeight">
            The normalized weight of <paramref name="nextValue"/>. ('Normalized' means that the sum of 
            the animation weights need to be 1.)
            </param>
        </member>
        <member name="M:DigitalRune.Animation.Traits.IAnimationValueTraits`1.EndBlend(`0@)">
            <summary>
            Finalizes the interpolation of <i>n</i> animation values.
            </summary>
            <param name="value">
            In: The current animation value. (The intermediate result of the blend operation.)<br/>
            Out: The result of the blend operation.
            </param>
        </member>
        <member name="T:DigitalRune.Animation.Traits.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Animation.Traits"/> namespace provides <i>animation value
            traits</i> for the most important data types. (Animation value traits define the basic
            operations that can be performed with animation values.)
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.Traits.QuaternionFTraits">
            <summary>
            Describes the properties of a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/>.
            </summary>
            <remarks>
            <para>
            Linear interpolation (LERP) is used for quaternion interpolation. Spherical linear
            interpolation (SLERP) is not used because it is slower and the difference to LERP is minor.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Create(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Recycle(DigitalRune.Mathematics.Algebra.QuaternionF@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Copy(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Set(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.QuaternionF})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Reset(DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.QuaternionF})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.SetIdentity(DigitalRune.Mathematics.Algebra.QuaternionF@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Invert(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Add(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Multiply(DigitalRune.Mathematics.Algebra.QuaternionF@,System.Int32,DigitalRune.Mathematics.Algebra.QuaternionF@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.Interpolate(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@,System.Single,DigitalRune.Mathematics.Algebra.QuaternionF@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.BeginBlend(DigitalRune.Mathematics.Algebra.QuaternionF@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.BlendNext(DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionFTraits.EndBlend(DigitalRune.Mathematics.Algebra.QuaternionF@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Traits.QuaternionTraits">
            <summary>
            Describes the properties of a <see cref="T:Microsoft.Xna.Framework.Quaternion"/>. 
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            <para>
            This type is available only in the XNA-compatible build of the DigitalRune.Animations.dll.
            </para>
            <para>
            Linear interpolation (LERP) is used for quaternion interpolation. Spherical linear
            interpolation (SLERP) is not used because it is slower and the difference to LERP is minor.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Create(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Recycle(Microsoft.Xna.Framework.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Copy(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Set(Microsoft.Xna.Framework.Quaternion@,DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Quaternion})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Reset(DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Quaternion})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.SetIdentity(Microsoft.Xna.Framework.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Invert(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Add(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Multiply(Microsoft.Xna.Framework.Quaternion@,System.Int32,Microsoft.Xna.Framework.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.Interpolate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.BeginBlend(Microsoft.Xna.Framework.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.BlendNext(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.QuaternionTraits.EndBlend(Microsoft.Xna.Framework.Quaternion@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Traits.SingleTraits">
            <summary>
            Describes the properties of a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SingleTraits.Create(System.Single@,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SingleTraits.Recycle(System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SingleTraits.Copy(System.Single@,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SingleTraits.Set(System.Single@,DigitalRune.Animation.IAnimatableProperty{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SingleTraits.Reset(DigitalRune.Animation.IAnimatableProperty{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SingleTraits.SetIdentity(System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SingleTraits.Invert(System.Single@,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SingleTraits.Add(System.Single@,System.Single@,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SingleTraits.Multiply(System.Single@,System.Int32,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SingleTraits.Interpolate(System.Single@,System.Single@,System.Single,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SingleTraits.BeginBlend(System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SingleTraits.BlendNext(System.Single@,System.Single@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SingleTraits.EndBlend(System.Single@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Traits.SkeletonPoseTraits">
            <summary>
            Describes the properties of a <see cref="T:DigitalRune.Animation.Character.SkeletonPose"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Create(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reference"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Recycle(DigitalRune.Animation.Character.SkeletonPose@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Copy(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Set(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.IAnimatableProperty{DigitalRune.Animation.Character.SkeletonPose})">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> or <paramref name="property"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value of <paramref name="property"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Reset(DigitalRune.Animation.IAnimatableProperty{DigitalRune.Animation.Character.SkeletonPose})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.SetIdentity(DigitalRune.Animation.Character.SkeletonPose@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Invert(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException"><see cref="T:DigitalRune.Animation.Character.SkeletonPose"/>s do not have inverse.</exception>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Add(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value0"/>, <paramref name="value1"/> or <paramref name="result"/> is 
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Multiply(DigitalRune.Animation.Character.SkeletonPose@,System.Int32,DigitalRune.Animation.Character.SkeletonPose@)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException"><see cref="T:DigitalRune.Animation.Character.SkeletonPose"/>s cannot be multiplied.</exception>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.Interpolate(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@,System.Single,DigitalRune.Animation.Character.SkeletonPose@)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>, <paramref name="target"/> or <paramref name="result"/> is 
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.BeginBlend(DigitalRune.Animation.Character.SkeletonPose@)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.BlendNext(DigitalRune.Animation.Character.SkeletonPose@,DigitalRune.Animation.Character.SkeletonPose@,System.Single)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> or <paramref name="nextValue"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SkeletonPoseTraits.EndBlend(DigitalRune.Animation.Character.SkeletonPose@)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Animation.Traits.SrtTransformTraits">
            <summary>
            Describes the properties of a <see cref="T:DigitalRune.Animation.Character.SrtTransform"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Create(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Recycle(DigitalRune.Animation.Character.SrtTransform@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Copy(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Set(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.IAnimatableProperty{DigitalRune.Animation.Character.SrtTransform})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Reset(DigitalRune.Animation.IAnimatableProperty{DigitalRune.Animation.Character.SrtTransform})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.SetIdentity(DigitalRune.Animation.Character.SrtTransform@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Invert(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Add(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Multiply(DigitalRune.Animation.Character.SrtTransform@,System.Int32,DigitalRune.Animation.Character.SrtTransform@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.Interpolate(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,System.Single,DigitalRune.Animation.Character.SrtTransform@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.BeginBlend(DigitalRune.Animation.Character.SrtTransform@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.BlendNext(DigitalRune.Animation.Character.SrtTransform@,DigitalRune.Animation.Character.SrtTransform@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.SrtTransformTraits.EndBlend(DigitalRune.Animation.Character.SrtTransform@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Traits.Vector2FTraits">
            <summary>
            Describes the properties of a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Create(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Recycle(DigitalRune.Mathematics.Algebra.Vector2F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Copy(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Set(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.Vector2F})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Reset(DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.Vector2F})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.SetIdentity(DigitalRune.Mathematics.Algebra.Vector2F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Invert(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Add(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Multiply(DigitalRune.Mathematics.Algebra.Vector2F@,System.Int32,DigitalRune.Mathematics.Algebra.Vector2F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.Interpolate(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@,System.Single,DigitalRune.Mathematics.Algebra.Vector2F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.BeginBlend(DigitalRune.Mathematics.Algebra.Vector2F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.BlendNext(DigitalRune.Mathematics.Algebra.Vector2F@,DigitalRune.Mathematics.Algebra.Vector2F@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2FTraits.EndBlend(DigitalRune.Mathematics.Algebra.Vector2F@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Traits.Vector2Traits">
            <summary>
            Describes the properties of a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animations.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Create(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Recycle(Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Copy(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Set(Microsoft.Xna.Framework.Vector2@,DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Vector2})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Reset(DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Vector2})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2Traits.SetIdentity(Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Invert(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Add(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Multiply(Microsoft.Xna.Framework.Vector2@,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2Traits.Interpolate(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2Traits.BeginBlend(Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2Traits.BlendNext(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector2Traits.EndBlend(Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Traits.Vector3FTraits">
            <summary>
            Describes the properties of a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Create(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Recycle(DigitalRune.Mathematics.Algebra.Vector3F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Copy(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Set(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.Vector3F})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Reset(DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.Vector3F})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.SetIdentity(DigitalRune.Mathematics.Algebra.Vector3F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Invert(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Add(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Multiply(DigitalRune.Mathematics.Algebra.Vector3F@,System.Int32,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.Interpolate(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@,System.Single,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.BeginBlend(DigitalRune.Mathematics.Algebra.Vector3F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.BlendNext(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3FTraits.EndBlend(DigitalRune.Mathematics.Algebra.Vector3F@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Traits.Vector3Traits">
            <summary>
            Describes the properties of a <see cref="T:Microsoft.Xna.Framework.Vector3"/>.
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animations.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Create(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Recycle(Microsoft.Xna.Framework.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Copy(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Set(Microsoft.Xna.Framework.Vector3@,DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Vector3})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Reset(DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Vector3})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3Traits.SetIdentity(Microsoft.Xna.Framework.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Invert(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Add(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Multiply(Microsoft.Xna.Framework.Vector3@,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3Traits.Interpolate(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3Traits.BeginBlend(Microsoft.Xna.Framework.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3Traits.BlendNext(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector3Traits.EndBlend(Microsoft.Xna.Framework.Vector3@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Traits.Vector4FTraits">
            <summary>
            Describes the properties of a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Create(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Recycle(DigitalRune.Mathematics.Algebra.Vector4F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Copy(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Set(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.Vector4F})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Reset(DigitalRune.Animation.IAnimatableProperty{DigitalRune.Mathematics.Algebra.Vector4F})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.SetIdentity(DigitalRune.Mathematics.Algebra.Vector4F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Invert(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Add(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Multiply(DigitalRune.Mathematics.Algebra.Vector4F@,System.Int32,DigitalRune.Mathematics.Algebra.Vector4F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.Interpolate(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@,System.Single,DigitalRune.Mathematics.Algebra.Vector4F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.BeginBlend(DigitalRune.Mathematics.Algebra.Vector4F@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.BlendNext(DigitalRune.Mathematics.Algebra.Vector4F@,DigitalRune.Mathematics.Algebra.Vector4F@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4FTraits.EndBlend(DigitalRune.Mathematics.Algebra.Vector4F@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Traits.Vector4Traits">
            <summary>
            Describes the properties of a <see cref="T:Microsoft.Xna.Framework.Vector4"/>.
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Animations.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Create(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Recycle(Microsoft.Xna.Framework.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Copy(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Set(Microsoft.Xna.Framework.Vector4@,DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Vector4})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Reset(DigitalRune.Animation.IAnimatableProperty{Microsoft.Xna.Framework.Vector4})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4Traits.SetIdentity(Microsoft.Xna.Framework.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Invert(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Add(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Multiply(Microsoft.Xna.Framework.Vector4@,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4Traits.Interpolate(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4Traits.BeginBlend(Microsoft.Xna.Framework.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4Traits.BlendNext(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Traits.Vector4Traits.EndBlend(Microsoft.Xna.Framework.Vector4@)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Transitions.AnimationTransition">
            <summary>
            Controls how animations interact with any existing ones as they are added
            to or removed from the animation system.
            </summary>
        </member>
        <member name="F:DigitalRune.Animation.Transitions.AnimationTransition.DefaultEase">
            <summary>
            The default easing function used by fade-in/out transitions.
            </summary>
        </member>
        <member name="P:DigitalRune.Animation.Transitions.AnimationTransition.AnimationInstance">
            <summary>
            Gets or sets the animation instance that is controlled by this animation transition.
            </summary>
            <value>The animation instance that is controlled by this animation transition.</value>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.AnimationTransition.Initialize(DigitalRune.Animation.AnimationManager)">
            <summary>
            Initializes the animation transition.
            </summary>
            <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager"/>.</param>
            <remarks>
            <see cref="M:DigitalRune.Animation.Transitions.AnimationTransition.Initialize(DigitalRune.Animation.AnimationManager)"/> is called when the transition is added to the animation system.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.AnimationTransition.Update(DigitalRune.Animation.AnimationManager)">
            <summary>
            Updates the animation transition.
            </summary>
            <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager"/>.</param>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.AnimationTransition.Uninitialize(DigitalRune.Animation.AnimationManager)">
            <summary>
            Un-initializes the animation transition.
            </summary>
            <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager"/>.</param>
            <remarks>
            <see cref="M:DigitalRune.Animation.Transitions.AnimationTransition.Initialize(DigitalRune.Animation.AnimationManager)"/> is called when the transition is removed from the animation system.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.AnimationTransition.OnInitialize(DigitalRune.Animation.AnimationManager)">
            <summary>
            Called when the animation transition is started.
            </summary>
            <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager"/>.</param>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.AnimationTransition.OnUpdate(DigitalRune.Animation.AnimationManager)">
            <summary>
            Called when the animation transition is updated.
            </summary>
            <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager"/>.</param>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.AnimationTransition.OnUninitialize(DigitalRune.Animation.AnimationManager)">
            <summary>
            Called when the animation transition is removed.
            </summary>
            <param name="animationManager">The <see cref="T:DigitalRune.Animation.AnimationManager"/>.</param>
        </member>
        <member name="T:DigitalRune.Animation.Transitions.ComposeTransition">
            <summary>
            Combines the new animation with existing animations by adding the animation into composition 
            chains.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.ComposeTransition.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Transitions.ComposeTransition"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Transitions.ComposeTransition"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.ComposeTransition.#ctor(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Transitions.ComposeTransition"/> class.
            </summary>
            <param name="previousAnimation">The animation that should be replaced.</param>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.ComposeTransition.OnInitialize(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Transitions.FadeInAndComposeTransition">
            <summary>
            Gradually combines the new animation with existing animations by adding the animation into 
            composition chains.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.FadeInAndComposeTransition.#ctor(System.TimeSpan)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Transitions.FadeInAndComposeTransition"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Transitions.FadeInAndComposeTransition"/> class.
            </summary>
            <param name="fadeInDuration">The duration over which the new animation fades in.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fadeInDuration"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.FadeInAndComposeTransition.#ctor(DigitalRune.Animation.AnimationInstance,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Transitions.FadeInAndComposeTransition"/> class.
            </summary>
            <param name="previousAnimation">The animation that should be replaced.</param>
            <param name="fadeInDuration">The duration over which the new animation fades in.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fadeInDuration"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.FadeInAndComposeTransition.OnInitialize(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Transitions.FadeInAndReplaceAllTransition">
            <summary>
            Gradually replaces all existing animations with the new animation.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.FadeInAndReplaceAllTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Transitions.FadeInAndReplaceAllTransition"/> class.
            </summary>
            <param name="fadeInDuration">The duration over which the new animation fades in.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fadeInDuration"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.FadeInAndReplaceAllTransition.OnInitialize(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.FadeInAndReplaceAllTransition.OnUpdate(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Transitions.FadeInAndReplaceTransition">
            <summary>
            Gradually replaces an existing animation with the new animation.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.FadeInAndReplaceTransition.#ctor(DigitalRune.Animation.AnimationInstance,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Transitions.FadeInAndReplaceTransition"/> class.
            </summary>
            <param name="previousAnimation">The animation that should be replaced.</param>
            <param name="fadeInDuration">The duration over which the new animation fades in.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="previousAnimation"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fadeInDuration"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.FadeInAndReplaceTransition.OnInitialize(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.FadeInAndReplaceTransition.OnUpdate(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Transitions.FadeOutTransition">
            <summary>
            Gradually removes the existing animation.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.FadeOutTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Transitions.FadeOutTransition"/> class.
            </summary>
            <param name="fadeOutDuration">
            The duration over which the existing animation fades out.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fadeOutDuration"/> is 0 or negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.FadeOutTransition.OnInitialize(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.FadeOutTransition.OnUpdate(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Transitions.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Animation.Transitions"/> namespace provides types that control
            how animations transition from one to another.
            </summary>
        </member>
        <member name="T:DigitalRune.Animation.Transitions.ReplaceAllTransition">
            <summary>
            Immediately replaces all existing animations with the new animation.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.ReplaceAllTransition.OnInitialize(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Transitions.ReplaceTransition">
            <summary>
            Replaces an existing animation with the new animation.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.ReplaceTransition.#ctor(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Animation.Transitions.ReplaceTransition"/> class.
            </summary>
            <param name="previousAnimation">The animation that should be replaced.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="previousAnimation"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.ReplaceTransition.OnInitialize(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.Transitions.SnapshotAndReplaceAllTransition">
            <summary>
            Takes a snapshot of the current animation values and then replaces all existing animations 
            with the new animation. The new animation will be initialized with the snapshot value.
            </summary>
        </member>
        <member name="M:DigitalRune.Animation.Transitions.SnapshotAndReplaceAllTransition.OnInitialize(DigitalRune.Animation.AnimationManager)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Animation.AnimationTransitions">
            <summary>
            Provides a set of predefined transitions to start or stop animations. 
            </summary>
            <remarks>
            <strong>Important:</strong> Animation transitions cannot be reused for multiple animations.
            When an animation is started a new animation transition needs to be created using one of the 
            methods of this class.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.AnimationTransitions.SnapshotAndReplace">
            <summary>
            Takes a snapshot of the current animation and then starts the new animation. The new
            animation is initialized with the snapshot and takes effect immediately. The previous 
            animations are stopped and removed from the animation system. 
            </summary>
            <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition"/>.</returns>
            <remarks>
            Usually, the property's base value is passed to the first animation in composition chain. 
            When using <see cref="M:DigitalRune.Animation.AnimationTransitions.SnapshotAndReplace"/> a snapshot of the current animation value is 
            created. The first animation in the composition chain will receive the snapshot instead of 
            the base value as its input. The snapshot will be active until a new snapshot is created (by
            starting a new animation using <see cref="M:DigitalRune.Animation.AnimationTransitions.SnapshotAndReplace"/>), or until all animations on
            the property are stopped.
            </remarks>
        </member>
        <member name="M:DigitalRune.Animation.AnimationTransitions.Replace">
            <overloads>
            <summary>
            Replaces existing animations with a new animation. The previous animations are stopped and 
            removed from the animation system.
            </summary>
            </overloads>
            
            <summary>
            Replaces all existing animations with the new animation. The new animation takes effect
            immediately. The previous animations are stopped and removed from the animation system. 
            </summary>
            <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition"/>.</returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationTransitions.Replace(System.TimeSpan)">
            <summary>
            Gradually replaces all existing animations with the new animation. The new animation fades
            in over the specified duration. After this duration the previous animations are stopped and 
            removed from the animation system. 
            </summary>
            <param name="fadeInDuration">The duration over which the new animation fades in.</param>
            <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition"/>.</returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationTransitions.Replace(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Replaces the specified animation with the new animation. The new animation takes effect
            immediately. The previous animation is stopped and removed from the animation system. 
            </summary>
            <param name="previousAnimation">The animation that should be replaced.</param>
            <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition"/>.</returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationTransitions.Replace(DigitalRune.Animation.AnimationInstance,System.TimeSpan)">
            <summary>
            Gradually replaces the specified animation with the new animation. The new animation fades
            in over the specified duration. After this duration the previous animation is stopped and 
            removed from the animation system. 
            </summary>
            <param name="previousAnimation">The animation that should be replaced.</param>
            <param name="fadeInDuration">The duration over which the new animation fades in.</param>
            <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition"/>.</returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationTransitions.Compose">
            <overloads>
            <summary>
            Combines a new animation with existing animations by adding the new animation to the 
            composition chains immediately.
            </summary>
            </overloads>
            
            <summary>
            Combines the new animation. with existing animations by appending the new animation to the 
            end of the composition chains.
            </summary>
            <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition"/>.</returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationTransitions.Compose(System.TimeSpan)">
            <summary>
            Gradually combines the new animation with existing animations by appending the new animation 
            to the end of the composition chains. The new animation fades in over the specified 
            duration.
            </summary>
            <param name="fadeInDuration">The duration over which the new animation fades in.</param>
            <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition"/>.</returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationTransitions.Compose(DigitalRune.Animation.AnimationInstance)">
            <summary>
            Combines the new animation with existing animations by inserting the new animation after the 
            specified animation into the composition chains. The new animation takes effect immediately.
            </summary>
            <param name="previousAnimation">
            The animation after which the new animation should be added.
            </param>
            <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition"/>.</returns>
        </member>
        <member name="M:DigitalRune.Animation.AnimationTransitions.Compose(DigitalRune.Animation.AnimationInstance,System.TimeSpan)">
            <summary>
            Combines the new animation with existing animations by inserting the new animation after the
            specified animation into the composition chains. The new animation fades in over the
            specified duration.
            </summary>
            <param name="previousAnimation">
            The animation after which the new animation should be added.
            </param>
            <param name="fadeInDuration">The duration over which the new animation fades in.</param>
            <returns>The <see cref="T:DigitalRune.Animation.Transitions.AnimationTransition"/>.</returns>
        </member>
    </members>
</doc>
