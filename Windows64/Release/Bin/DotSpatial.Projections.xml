<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotSpatial.Projections</name>
    </assembly>
    <members>
        <member name="T:DotSpatial.Projections.AuthorityCodes.AuthorityCodeHandler">
            <summary>
            AuthorityCodeHandler
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.AuthorityCodes.AuthorityCodeHandler.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.AuthorityCodes.AuthorityCodeHandler.Add(System.String,System.Int32,System.String)">
            <summary>
            Adds the specified authority.
            </summary>
            <param name="authority">The authority.</param>
            <param name="code">The code.</param>
            <param name="proj4String">The proj4 string.</param>
        </member>
        <member name="M:DotSpatial.Projections.AuthorityCodes.AuthorityCodeHandler.Add(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Adds the specified authority.
            </summary>
            <param name="authority">The authority.</param>
            <param name="code">The code.</param>
            <param name="proj4String">The proj4 string.</param>
            <param name="replace">if set to <c>true</c> [replace].</param>
        </member>
        <member name="M:DotSpatial.Projections.AuthorityCodes.AuthorityCodeHandler.Add(System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the specified authority.
            </summary>
            <param name="authority">The authority.</param>
            <param name="code">The code.</param>
            <param name="name">The name.</param>
            <param name="proj4String">The proj4 string.</param>
        </member>
        <member name="M:DotSpatial.Projections.AuthorityCodes.AuthorityCodeHandler.Add(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Adds a new projection info to the store, replaces the old one
            </summary>
            <param name="authority">The authority, e.g. EPSG</param>
            <param name="code">The code assigned by the authority</param>
            <param name="name">A declarative name</param>
            <param name="proj4String">the proj4 definition string</param>
            <param name="replace">a value indicating if a previously defined projection should be replaced or not.</param>
        </member>
        <member name="P:DotSpatial.Projections.AuthorityCodes.AuthorityCodeHandler.Instance">
            <summary>
            The one and only <see cref="T:DotSpatial.Projections.AuthorityCodes.AuthorityCodeHandler"/>
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.AuthorityCodes.AuthorityCodeHandler.Item(System.String)">
            <summary>
            Gets the
            </summary>
            <param name="authorityCodeOrName"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Projections.AuxiliarySphereType">
            <summary>
            AuxiliarySphereTypes
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.AuxiliarySphereType.SemimajorAxis">
            <summary>
            Use semimajor axis or radius of the geographic coordinate system
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.AuxiliarySphereType.SemiminorAxis">
            <summary>
            Use semiminor axis or radius
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.AuxiliarySphereType.Authalic">
            <summary>
            Calculate and use authalic radius
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.AuxiliarySphereType.AuthalicWithConvertedLatitudes">
            <summary>
            Use authalic radius and convert geodetic latitudes to authalic latitudes
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.AuxiliarySphereType.NotSpecified">
            <summary>
            This indicates that this parameter should not appear in the projection string.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.DatNadTable">
            <summary>
            Handles the specific case of dat files like the ntv1 file format.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.NadTable">
            <summary>
            NadRecord is a single entry from an lla file
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.NadTable.DEG_TO_RAD">
            <summary>
            Converts degree values into radians
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.NadTable.USecToRad">
            <summary>
            I think this converts micro-seconds of arc to radians
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.NadTable._cellSize">
            <summary>
            The delta lambda and delta phi for a single cell
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.NadTable._cvs">
            <summary>
            The set of conversion matrix coefficients for lambda
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.NadTable._lowerLeft">
            <summary>
            The lower left coordinate
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.NadTable._name">
            <summary>
            The character based id for this record
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.NadTable._numLambdas">
            <summary>
            The total count of coordinates in the lambda direction
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.NadTable._numPhis">
            <summary>
            The total count of coordinates in the phi direction
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.NadTable.#ctor">
            <summary>
            Creates a blank nad Table
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.NadTable.#ctor(System.String)">
            <summary>
            This initializes a new table with the assumption that the offset is 0
            </summary>
            <param name="resourceLocation">The resource location</param>
        </member>
        <member name="M:DotSpatial.Projections.NadTable.#ctor(System.String,System.Boolean)">
            <summary>
            This initializes a new table with the assumption that the offset is 0
            </summary>
            <param name="resourceLocation">The resource location</param>
            <param name="embedded">Indicates if grid file is in embedded resource or external file</param>
        </member>
        <member name="M:DotSpatial.Projections.NadTable.#ctor(System.String,System.Int64)">
            <summary>
            This initializes a new table with the assumption that the offset needs to be specified
            because in gsb files, more than one table is listed, and this is a subtable.
            </summary>
            <param name="resourceLocation">The resource location</param>
            <param name="offset">The offset marking the start of the header in the file</param>
        </member>
        <member name="M:DotSpatial.Projections.NadTable.#ctor(System.String,System.Int64,System.Boolean)">
            <summary>
            This initializes a new table with the assumption that the offset needs to be specified
            because in gsb files, more than one table is listed, and this is a subtable. This also allows
            specifying if the grid file is included as an embedded resource.
            </summary>
            <param name="location">The resource (or file) location</param>
            <param name="offset">The offset marking the start of the header in the file</param>
            <param name="embedded">Indicates if embedded resource or external file</param>
        </member>
        <member name="M:DotSpatial.Projections.NadTable.ReadHeader">
            <summary>
            Given the resource setup, this causes the file to read the
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.NadTable.FillData">
             <summary>
            
             </summary>
        </member>
        <member name="M:DotSpatial.Projections.NadTable.FromSourceName(System.String)">
            <summary>
            This method parses the extension of a resource location or
            path and creates the new NadTable type.
            </summary>
            <param name="resourceLocation"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.NadTable.FromSourceName(System.String,System.Boolean)">
            <summary>
            This method parses the extension of a resource location or
            path and creates the new NadTable type.
            </summary>
            <param name="location"></param>
            <param name="embedded"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.NadTable.ReadDouble(System.IO.BinaryReader)">
            <summary>
            Reads a double in BigEndian format (consistent with ntv1 and ntv2 formats.)
            </summary>
            <param name="br">The binary reader</param>
            <returns>The double value parsed from the binary in big endian byte order.</returns>
        </member>
        <member name="M:DotSpatial.Projections.NadTable.GetDouble(System.Byte[],System.Int32)">
            <summary>
            Gets the double value from the specified position in the byte array
            Using BigEndian format.
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.NadTable.GetStream">
            <summary>
            Get the stream to the grid
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Projections.NadTable.Name">
            <summary>
            Gets or sets the string name for this record
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.NadTable.LowerLeft">
            <summary>
            Gets or sets the lower left corner in radians
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.NadTable.CellSize">
            <summary>
            Gets or sets the angular cell size in radians
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.NadTable.NumPhis">
            <summary>
            Gets or sets the integer count of phi coefficients
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.NadTable.NumLambdas">
            <summary>
            Gets or sets the integer count of lambda coefficients
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.NadTable.SubGrids">
            <summary>
            These represent smaller, higher resolution subgrids that should fall within the extents
            of the larger grid.  If this list exists, and there is a fit here, it should be used
            in preference to the low-resolution main grid.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.NadTable.Cvs">
            <summary>
            Gets or sets the array of lambda coefficients organized
            in a spatial Table (phi major)
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.NadTable.Filled">
            <summary>
            Gets or sets a boolean indicating whether or not the values have been filled.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.NadTable.ManifestResourceString">
            <summary>
            Gets or sets the location this table should look for source data.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.NadTable.DataOffset">
            <summary>
            Gets or sets the long integer data offset where the stream should skip to to begin reading data
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.NadTable.Format">
            <summary>
            Gets or sets the format being used.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.NadTable.FileIsEmbedded">
            <summary>
            True if grid file is an embedded resource
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.NadTable.GridFilePath">
            <summary>
            If FileIsEmbedded is false, this contains the full path to the grid file
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.DatNadTable.#ctor(System.String)">
            <summary>
            Creates a new instance of GsbNadTable
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.DatNadTable.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of GsbNadTable
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.DatNadTable.ReadHeader">
            <inheritdoc></inheritdoc>
        </member>
        <member name="M:DotSpatial.Projections.DatNadTable.FillData">
            <inheritdoc></inheritdoc>
        </member>
        <member name="T:DotSpatial.Projections.DatumTransform">
            <summary>
            IDatumTransform
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.IDatumTransform">
            <summary>
            IDatumTransform
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.IDatumTransform.Transform(DotSpatial.Projections.ProjectionInfo,DotSpatial.Projections.ProjectionInfo,System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Transform function
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="xy"></param>
            <param name="z"></param>
            <param name="startIndex"></param>
            <param name="numPoints"></param>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransform.SecToRad">
            <summary>Arc-seconds to radians conversion factor</summary>
        </member>
        <member name="M:DotSpatial.Projections.DatumTransform.#ctor(DotSpatial.Projections.IDatumTransformStage[])">
             <summary>
            
             </summary>
             <param name="aiDatumTransformStage"></param>
        </member>
        <member name="M:DotSpatial.Projections.DatumTransform.Transform(DotSpatial.Projections.ProjectionInfo,DotSpatial.Projections.ProjectionInfo,System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            datum tranform method
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="xy"></param>
            <param name="z"></param>
            <param name="startIndex"></param>
            <param name="numPoints"></param>
        </member>
        <member name="M:DotSpatial.Projections.DatumTransform.GetStage(System.Int32)">
            <summary>
            Returns an interface to the stage at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.DatumTransform.ApplyParameterizedTransform(DotSpatial.Projections.IDatumTransformStage,System.Double[],System.Double[],System.Int32,System.Int32)">
             <summary>
            
             </summary>
             <param name="idts"></param>
             <param name="xy"></param>
             <param name="zArr"></param>
             <param name="startIndex"></param>
             <param name="numPoints"></param>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransform.NumStages">
            <summary>
            Returns the number of datum transform stages for this datum transform
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransform.FromID">
            <summary>
            source datum
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransform.ToID">
            <summary>
            destination datum
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.TransformMethod">
            <summary>
            Datum Transform Type: GridShift, Param3, or Param7
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.TransformMethod.GridShift">
            <summary>Grid shift table</summary>
        </member>
        <member name="F:DotSpatial.Projections.TransformMethod.Param3">
            <summary>3-parameter geocentric transform: delat x, delta y, and delta z</summary>
        </member>
        <member name="F:DotSpatial.Projections.TransformMethod.Param7">
            <summary>7-parameter geocentric tranform: delta x,y,z, plus rotataion of x,y,z axes, and delta scale</summary>
        </member>
        <member name="T:DotSpatial.Projections.DatumTransformStage">
            <summary>
            DatumTransfromStage implementation
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.IDatumTransformStage">
            <summary>
            DatumTransformStage interface
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.FromDatum">
            <summary>
            String identifier of the datum from which the transform proceeds
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.ToDatum">
            <summary>
            String identifier of the datum to which the transform proceeds
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.Method">
            <summary>
            Transform method; one of: GeoCentric, Coordinate_Frame, Position_Vector, NADCON, HARN, NTv2
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.DeltaX">
            <summary>
            Detla X of geocentric origin, in meters
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.DeltaY">
            <summary>
            Delta Y of geocentric origin, in meters
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.DeltaZ">
            <summary>
            Delta Z of geocentric origin, in meters
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.RotateX">
            <summary>
            Rotation about the geocentric X-axis, in arc-seconds
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.RotateY">
            <summary>
            Rotation about the geocentric Y-axis, in arc-seconds
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.RotateZ">
            <summary>
            Rotation about the geocentric Z-axis, in arc-seconds
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.DeltaScale">
            <summary>
            Delta scale in parts-per-million. Actaul scale is 1+DS/1000000.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.GridShiftTable">
            <summary>
            If Method is one of: NADCON, HARN, or NTv2, this field contains the name of the grid shift table
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.ApplyTableInverse">
            <summary>
            True if the table must be used in the direction opposite that specified by the From/To Datum properties
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.FromSpheroid">
            <summary>
            Spheriod on which the From datum is based
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IDatumTransformStage.ToSpheroid">
            <summary>
            Spheriod on which the To datum is based
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.ApplyTableInv">
            <summary>True if the table must be used in the direction opposite that specified by the From/To Datum properties</summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.Ds">
            <summary>Delta scale in parts-per-million. Actaul scale is 1+DS/1000000.</summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.Dx">
            <summary>Detla X of geocentric origin, in meters</summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.Dy">
            <summary>Delta Y of geocentric origin, in meters</summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.Dz">
            <summary>Delta Z of geocentric origin, in meters</summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.From">
            <summary>String identifer of datum from which the transform proceeds</summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.FromSph">
            <summary>Spheriod on which the From datum is based</summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.Rx">
            <summary>Rotation about the geocentric X-axis, in arc-seconds</summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.Ry">
            <summary>Rotation about the geocentric Y-axis, in arc-seconds</summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.Rz">
            <summary>Rotation about the geocentric Z-axis, in arc-seconds</summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.TableName">
            <summary>If Method is one of: NADCON, HARN, or NTv2, this field contains the name of the grid shift table</summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.Tm">
            <summary>Transform method; one of: GridShift, Param3, or Param7</summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.To">
            <summary>String identifier of the datum to which the transform proceeds</summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumTransformStage.ToSph">
            <summary>Spheriod on which the To datum is based</summary>
        </member>
        <member name="M:DotSpatial.Projections.DatumTransformStage.#ctor(System.String,System.String,DotSpatial.Projections.Spheroid,DotSpatial.Projections.Spheroid,System.Double,System.Double,System.Double)">
            <summary>
            DatumTranformStage constructor for a geocentric transform
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.DatumTransformStage.#ctor">
            <summary>
            Parmeterless constructor
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.DatumTransformStage.#ctor(System.String,System.String,DotSpatial.Projections.Spheroid,DotSpatial.Projections.Spheroid,System.String,System.Boolean)">
            <summary>
            DatumTranformStage constructor for a gridshift transform
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.DatumTransformStage.#ctor(System.String,System.String,DotSpatial.Projections.Spheroid,DotSpatial.Projections.Spheroid,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            DatumTranformStage constructor for a 7-parameter transform
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.DatumTransformStage.#ctor(DotSpatial.Projections.DatumTransformStage)">
            <summary>
            DatumTransfromStage copy constructor
            </summary>
            <param name="dts"></param>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.FromDatum">
            <summary>
            Source datum
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.ToDatum">
            <summary>
            Destination datum
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.Method">
            <summary>
            TranformMethod to be used
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.DeltaX">
            <summary>
            geocentric X offset
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.DeltaY">
            <summary>
            geocentric Y offset
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.DeltaZ">
            <summary>
            geocentric Z offset
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.RotateX">
            <summary>
            rotation about X axis in arc-seconds
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.RotateY">
            <summary>
            rotation about Y axis in arc-seconds
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.RotateZ">
            <summary>
            rotation about Z axis in arc-seconds
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.DeltaScale">
            <summary>
            delta scale in ppm
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.GridShiftTable">
            <summary>
            if type is one of: NADCON, HARN, or NTv2, GridShiftTable is the file base name
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.ApplyTableInverse">
            <summary>
            If false, use inverse of table
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.FromSpheroid">
            <summary>
            Spheroid of source datum
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.DatumTransformStage.ToSpheroid">
            <summary>
            Spheroid of destination datum
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GridShiftTableFormat">
            <summary>
            GridShiftTableFormats
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.GridShiftTableFormat.DAT">
            <summary>
            The data format used by ntv1
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.GridShiftTableFormat.GSB">
            <summary>
            The data format used by ntv2 and many others
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.GridShiftTableFormat.LLA">
            <summary>
            The data format use by several other grid types
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.GridShiftTableFormat.LOS">
            <summary>
            The data format used by National Geodetic Survey (NGS). Note
            there is always a matching LAS file.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GsbNadTable">
            <summary>
            This is a special case of a NadTable and has specific reading techniques that need to be handled
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GsbNadTable.#ctor(System.String,System.Int64)">
            <summary>
            Creates a new instance of GsbNadTable
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GsbNadTable.#ctor(System.String,System.Int64,System.Boolean)">
            <summary>
            Creates a new instance of GsbNadTable
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GsbNadTable.ReadHeader">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Projections.GsbNadTable.Initialize">
            <summary>
            This handles the creation of the
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GsbNadTable.FillData">
            <inheritdoc/>
        </member>
        <member name="M:DotSpatial.Projections.GsbNadTable.GetDouble(System.Byte[],System.Int32)">
            <summary>
            Gets the double value from the specified position in the byte array
            Using BigEndian format.
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.ICoordinateSystemCategoryHolder.GetCategory(System.String)">
            <summary>
            Given the string name, this will return the specified coordinate category
            </summary>
            <param name="name">Category name</param>
            <returns>Coordinate system category</returns>
        </member>
        <member name="P:DotSpatial.Projections.ICoordinateSystemCategoryHolder.Names">
            <summary>
            Gets an array of all the names of the coordinate system categories
            in this collection of systems.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.LasLosNadTable">
            <summary>
            Overrides the NadTable methods in the context of an las/los file pair.
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.LasLosNadTable.#ctor(System.String)">
            <summary>
            An LasLosNadTable constructor
            </summary>
            <param name="resourceLocation">The Manifest Assembly resource location</param>
        </member>
        <member name="M:DotSpatial.Projections.LasLosNadTable.#ctor(System.String,System.Boolean)">
            <summary>
            An LasLosNadTable constructor
            </summary>
            <param name="location">The resource location or grid file path</param>
            <param name="embedded">Indicates if grid is an embedded resource</param>
        </member>
        <member name="M:DotSpatial.Projections.LasLosNadTable.ReadHeader">
            <inheritdoc></inheritdoc>
        </member>
        <member name="M:DotSpatial.Projections.LasLosNadTable.FillData">
            <inheritdoc></inheritdoc>
        </member>
        <member name="M:DotSpatial.Projections.LasLosNadTable.GetLasStream">
            <summary>
            LasLosNadTables are constructs from a pair of input files: .los AND .las
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Projections.LlaNadTable">
            <summary>
            Overrides the NadTable methods in the context of an lla resource file.
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.LlaNadTable.#ctor(System.String)">
            <summary>
            An LlaNadTable constructor
            </summary>
            <param name="resourceLocation">The Manifest Assembly resource location</param>
        </member>
        <member name="M:DotSpatial.Projections.LlaNadTable.#ctor(System.String,System.Boolean)">
            <summary>
            An LlaNadTable constructor
            </summary>
            <param name="location">The Manifest Assembly resource location or file path</param>
            <param name="embedded">Indicates if grid file is embedded resource or external file</param>
        </member>
        <member name="M:DotSpatial.Projections.LlaNadTable.ReadHeader">
            <inheritdoc></inheritdoc>
        </member>
        <member name="M:DotSpatial.Projections.LlaNadTable.FillData">
            <inheritdoc></inheritdoc>
        </member>
        <member name="T:DotSpatial.Projections.ProjCloneableEM">
            <summary>
            CloneableEM
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjCloneableEM.Copy``1(``0)">
            <summary>
            The type parameter T is optional, so the intended use would be like:
            ObjectType copy = myObject.Copy();
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="original">The original object</param>
            <returns>A new object of the same type as the type being copied.</returns>
        </member>
        <member name="T:DotSpatial.Projections.IProjDescriptor">
            <summary>
            IDescriptor
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.IProjMatchable">
            <summary>
            Matching is defined as being a different object, but having properties
            that would make it indistinguishable from the comparision property.
            This is an alternative to overriding the equals behavior in cases
            where you might ALSO need to see if the object reference is the same.
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.IProjMatchable.Matches(DotSpatial.Projections.IProjMatchable,System.Collections.Generic.List{System.String}@)">
            <summary>
            Tests this object against the comparison object.  If any of the
            value type members are different, or if any of the properties
            are IMatchable and do not match, then this returns false.
            </summary>
            <param name="other">The other IMatcheable object of the same type</param>
            <param name="mismatchedProperties">The list of property names that do not match</param>
            <returns>Boolean, true if the properties are comparably equal.</returns>
        </member>
        <member name="T:DotSpatial.Projections.IProjRandomizable">
            <summary>
            IRandomizable
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.IProjRandomizable.Randomize(System.Random)">
            <summary>
            This method will set the values for this class with random values that are
            within acceptable parameters for this class.
            </summary>
            <param name="generator">An existing random number generator so that the random seed can be controlled</param>
        </member>
        <member name="M:DotSpatial.Projections.IProjDescriptor.CopyProperties(System.Object)">
            <summary>
            This copies the public descriptor properties from the specified object to
            this object.
            </summary>
            <param name="other">An object that has properties that match the public properties on this object.</param>
        </member>
        <member name="T:DotSpatial.Projections.ProjMatchableEM">
            <summary>
            MatchableEM
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjMatchableEM.Matches(DotSpatial.Projections.IProjMatchable,DotSpatial.Projections.IProjMatchable)">
            <summary>
            This tests the public properties from the two objects.  If any properties implement
            the IMatchable interface, and do not match, this returns false.  If any public
            properties are value types, and they are not equal, then this returns false.
            </summary>
            <param name="self">This matchable item </param>
            <param name="other">The other item to compare to this item</param>
            <returns>Boolean, true if there is a match</returns>
        </member>
        <member name="T:DotSpatial.Projections.AngularUnit">
            <summary>
            Unit
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjDescriptor">
            <summary>
            Descriptors are simple classes that are used for storing symbology or other basic characteristics.
            They are presumed to be made up of value types and other descriptors, and are expected to be serializable.
            This being said, some basic capabilities are supported for randomizing, copying and comparing the
            properties of descriptors.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjCopyBase">
            <summary>
            CopyBase
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjCopyBase.#ctor">
            <summary>
            Creates a new instance of CopyBase
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjCopyBase.System#ICloneable#Clone">
            <summary>
            Creates a duplicate of this descriptor using MemberwiseClone
            </summary>
            <returns>A clone of this object as a duplicate</returns>
        </member>
        <member name="M:DotSpatial.Projections.ProjCopyBase.DistinctNames(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            PropertyInfo returns overridden members as separate entries.  We would rather work with each members
            only one time.
            </summary>
            <param name="allProperties">All the properties, including duplicates created by overridden members</param>
            <returns>An Array of PropertyInfo members</returns>
        </member>
        <member name="M:DotSpatial.Projections.ProjCopyBase.OnCopy(DotSpatial.Projections.ProjDescriptor)">
            <summary>
            This occurs during the Copy method and is overridable by sub-classes
            </summary>
            <param name="copy">The duplicate descriptor</param>
        </member>
        <member name="M:DotSpatial.Projections.ProjDescriptor.#ctor">
            <summary>
            Creates a new instance of MatchableObject
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjDescriptor.CopyProperties(System.Object)">
            <summary>
            For each of the publicly accessible properties found on this object, this attempts
            to copy a public property from the source object of the same name, if it can find it.
            For each matching property name/type, it will attempt to copy the value.
            </summary>
            <param name="source">The</param>
        </member>
        <member name="M:DotSpatial.Projections.ProjDescriptor.Matches(DotSpatial.Projections.IProjMatchable,System.Collections.Generic.List{System.String}@)">
            <summary>
            Compares the properties of this object with the specified IMatchable other.
            This does not test every property of other, but does test every property
            of this item.  As long as the other item has corresponding properties
            for every property on this item, the items are said to match.
            The IMatchable interface allows custom definitions of matching.
            For collections to match, all of their sub-members must match.
            </summary>
            <param name="other"></param>
            <param name="mismatchedProperties"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.ProjDescriptor.Randomize(System.Random)">
            <summary>
            The default behavior is to cycle through all the properties of this
            object, and call Randomize on any that implement the IRandomizable interface.
            </summary>
            <param name="generator">The Random seed generator for controling how the random content is created</param>
        </member>
        <member name="M:DotSpatial.Projections.ProjDescriptor.OnCopyProperties(System.Object)">
            <summary>
            This occurs while copying properties from the specified source, and
            is the default handling for subclasses
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:DotSpatial.Projections.ProjDescriptor.OnMatch(DotSpatial.Projections.IProjMatchable,System.Collections.Generic.List{System.String})">
            <summary>
            This gives sub-classes the chance to directly override, control or otherwise tamper
            with the matching process.  This is also where normal matching is performed,
            so to replace it, simply don't call the base.OnMatch method.  To tweak the results,
            the base method should be performed first, and the results can then be modified.
            </summary>
            <param name="other"></param>
            <param name="mismatchedProperties"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.ProjDescriptor.OnRandomize(System.Random)">
            <summary>
            This allows overrideable behavior that can replace or extend the basic behavior,
            which is to call Randomize on any public properties that are listed as randomizeable.
            This does nothing to normal properties or non public members and needs to be overriden
            to provide the special case functionality for sub-classes.
            </summary>
            <param name="generator">The random number generator to be used during randomization</param>
        </member>
        <member name="T:DotSpatial.Projections.IEsriString">
            <summary>
            EsriString
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.IEsriString.ToEsriString">
            <summary>
            Writes the value in the format that it would appear in within a prj file
            </summary>
            <returns>The a nested portion of the total esri string.</returns>
        </member>
        <member name="M:DotSpatial.Projections.IEsriString.ParseEsriString(System.String)">
            <summary>
            This reads the string and attempts to parse the relavent values.
            </summary>
            <param name="esriString">The string to read</param>
        </member>
        <member name="M:DotSpatial.Projections.AngularUnit.#ctor">
            <summary>
            Creates a new instance of Unit
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.AngularUnit.ToEsriString">
            <summary>
            Generates the Esri string from the values in this class
            </summary>
            <returns>The resulting esri string</returns>
        </member>
        <member name="M:DotSpatial.Projections.AngularUnit.ParseEsriString(System.String)">
            <summary>
            Reads an esri string to determine the angular unit
            </summary>
            <param name="esriString">The esri string to read</param>
        </member>
        <member name="P:DotSpatial.Projections.AngularUnit.Name">
            <summary>
            Gets or sets the name of this
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.AngularUnit.Radians">
            <summary>
            Gets or sets the constant to multiply against this unit to get radians.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.CoordinateSystemCategory">
            <summary>
            CoordinateSystem
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.CoordinateSystemCategory.#ctor">
            <summary>
            Creates a new instance of CoordinateSystem
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.CoordinateSystemCategory.GetProjection(System.String)">
            <summary>
            Retrieves the specified projection given the specified name.
            </summary>
            <param name="name">The string name of the projection to obtain information for</param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.CoordinateSystemCategory.ToArray">
            <summary>
            Obtains all the members of this category, building a single
            array of the projection info classes.  This returns the
            original classes, not a copy.
            </summary>
            <returns>The array of projection info classes</returns>
        </member>
        <member name="M:DotSpatial.Projections.CoordinateSystemCategory.AsEnumerable">
            <summary>
            Obtains all the members of this category. This returns the
            original classes, not a copy.
            </summary>
            <returns>The enumerable of projection info classes with field names</returns>
        </member>
        <member name="P:DotSpatial.Projections.CoordinateSystemCategory.Names">
            <summary>
            Gets the list of names of all the members on this object
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Datum">
            <summary>
            Datum
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Datum.#ctor">
            <summary>
            Creates a new instance of Datum
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Datum.#ctor(System.String)">
            <summary>
            uses a string name of a standard datum to create a new instance of the Datum class
            </summary>
            <param name="standardDatum">The string name of the datum to use</param>
        </member>
        <member name="M:DotSpatial.Projections.Datum.#ctor(DotSpatial.Projections.Proj4Datum)">
            <summary>
            Uses a Proj4Datums enumeration in order to specify a known datum to
            define the spheroid and to WGS calculation method and parameters
            </summary>
            <param name="standardDatum">The Proj4Datums enumeration specifying the known datum</param>
        </member>
        <member name="M:DotSpatial.Projections.Datum.ToProj4String">
            <summary>
            Returns a representaion of this object as a Proj4 string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Datum.Matches(DotSpatial.Projections.Datum)">
            <summary>
            Compares two datums to see if they are actually describing the same thing and
            therefore don't need to be transformed.
            </summary>
            <param name="otherDatum">The other datum to compare against</param>
            <returns>The boolean result of the operation.</returns>
        </member>
        <member name="M:DotSpatial.Projections.Datum.ToEsriString">
            <summary>
            Creates an esri well known text string for the datum part of the string
            </summary>
            <returns>The datum portion of the esri well known text</returns>
        </member>
        <member name="M:DotSpatial.Projections.Datum.ParseEsriString(System.String)">
            <summary>
            parses the datum from the esri string
            </summary>
            <param name="esriString">The string to parse values from</param>
        </member>
        <member name="M:DotSpatial.Projections.Datum.InitializeToWgs84(System.String[])">
            <summary>
            Initializes to WGS84.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="P:DotSpatial.Projections.Datum.Name">
            <summary>
            Gets or sets the name of the datum defining the spherical characteristics of the model of the earth
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Datum.Spheroid">
            <summary>
            The spheroid of the earth, defining the maximal radius and the flattening factor
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Datum.ToWGS84">
            <summary>
            Gets or sets the set of double parameters, (this can either be 3 or 7 parameters)
            used to transform this
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Datum.DatumType">
            <summary>
            Gets or sets the datum type, which clarifies how to perform transforms to WGS84
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Datum.Description">
            <summary>
            Gets or sets an english description for this datum
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Datum.NadGrids">
            <summary>
            Gets or sets the array of string nadGrid
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Datum.Proj4DatumName">
            <summary>
            Lookups the proj4 datum based on the stored name.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.DatumType">
            <summary>
            DatumTypes
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumType.Unknown">
            <summary>
            The datum type is not with a well defined ellips or grid-shift
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumType.Param3">
            <summary>
            The datum transform to WGS84 can be defined using 3 double parameters
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumType.Param7">
            <summary>
            The datum transform to WGS84 can be defined using 7 double parameters
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumType.GridShift">
            <summary>
            The transform requires a special nad gridshift
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.DatumType.WGS84">
            <summary>
            The datum is already the WGS84 datum
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeocentricGeodetic">
            <summary>
            Wenzel, H.-G.(1985): Hochauflösende Kugelfunktionsmodelle für
            das Gravitationspotential der Erde. Wiss. Arb. Univ. Hannover
            Nr. 137, p. 130-131.
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeocentricGeodetic.#ctor(DotSpatial.Projections.Spheroid)">
            <summary>
            Creates a new instance of GeocentricGeodetic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeocentricGeodetic.GeodeticToGeocentric(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Converts lon, lat, height to x, y, z where lon and lat are in radians and everything else is meters
            </summary>
            <param name="xy"></param>
            <param name="z"></param>
            <param name="startIndex"></param>
            <param name="numPoints"></param>
        </member>
        <member name="M:DotSpatial.Projections.GeocentricGeodetic.GeocentricToGeodetic(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Converts x, y, z to lon, lat, height
            </summary>
            <param name="xy"></param>
            <param name="z"></param>
            <param name="startIndex"></param>
            <param name="numPoints"></param>
        </member>
        <member name="M:DotSpatial.Projections.GeocentricGeodetic.GeocentricToGeodetic(System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts geocentric x, y, z coords to geodetic lon, lat, h
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicCategories.Africa">
            <summary>
            Africa
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.GeographicCategories.Africa.Abidjan1987">
             <summary>
            Abidjan 1987
             </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicCategories.Africa.#ctor">
            <summary>
            Creates a new instance of Africa
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicCategories.Antarctica">
            <summary>
            Antarctica
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicCategories.Antarctica.#ctor">
            <summary>
            Creates a new instance of Antarctica
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicCategories.Asia">
            <summary>
            Asia
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicCategories.Asia.#ctor">
            <summary>
            Creates a new instance of Asia
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicCategories.Australia">
            <summary>
            Australia
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicCategories.Australia.#ctor">
            <summary>
            Creates a new instance of Australia
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicCategories.CountySystems">
            <summary>
            CountySystems
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicCategories.CountySystems.#ctor">
            <summary>
            Creates a new instance of CountySystems
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicCategories.Europe">
            <summary>
            Europe
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicCategories.Europe.#ctor">
            <summary>
            Creates a new instance of Europe
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicCategories.NorthAmerica">
            <summary>
            NorthAmerica
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicCategories.NorthAmerica.#ctor">
            <summary>
            Creates a new instance of NorthAmerica
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicCategories.Oceans">
            <summary>
            Oceans
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicCategories.Oceans.#ctor">
            <summary>
            Creates a new instance of Oceans
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicCategories.SolarSystem">
            <summary>
            SolarSystem
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicCategories.SolarSystem.#ctor">
            <summary>
            Creates a new instance of SolarSystem
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicCategories.SouthAmerica">
            <summary>
            SouthAmerica
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicCategories.SouthAmerica.#ctor">
            <summary>
            Creates a new instance of SouthAmerica
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicCategories.SpheroidBased">
            <summary>
            SpheroidBased
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicCategories.SpheroidBased.#ctor">
            <summary>
            Creates a new instance of SpheroidBased
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicCategories.World">
            <summary>
            World
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicCategories.World.#ctor">
            <summary>
            Creates a new instance of World
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicInfo">
            <summary>
            GeographicInfo
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicInfo.#ctor">
            <summary>
            Creates a new instance of GeographicInfo
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicInfo.ToEsriString">
            <summary>
            Generates an esri string from the information in this geographic info class, including the name, datum, meridian, and unit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.GeographicInfo.ParseEsriString(System.String)">
            <summary>
            Reads an esri string in order to parse the datum, meridian and unit as well as the name.
            </summary>
            <param name="esriString">The string to parse</param>
        </member>
        <member name="M:DotSpatial.Projections.GeographicInfo.ToProj4String">
            <summary>
            Returns a representaion of this object as a Proj4 string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Projections.GeographicInfo.Datum">
            <summary>
            Gets or sets the datum
            eg: D_WGS_1984
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.GeographicInfo.Meridian">
            <summary>
            Gets or sets the prime meridian longitude of the 0 mark, relative to Greenwitch
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.GeographicInfo.Name">
            <summary>
            Gets or sets the geographic coordinate system name
            eg: GCS_WGS_1984
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.GeographicInfo.Unit">
            <summary>
            Gets or sets the units
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GeographicSystems">
            <summary>
            GeographicSystems
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GeographicSystems.GetCategory(System.String)">
            <summary>
            Given the string name, this will return the specified coordinate category
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Projections.GeographicSystems.Names">
            <summary>
            Gets an array of all the names of the coordinate system categories
            in this collection of systems.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.GridShift">
            <summary>
            GridShift
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GridShift.Apply(System.String[],System.Boolean,System.Double[],System.Int32,System.Int64)">
            <summary>
            Applies either a forward or backward gridshift based on the specified name
            </summary>
            <param name="names"></param>
            <param name="inverse"></param>
            <param name="xy"></param>
            <param name="startIndex"></param>
            <param name="numPoints"></param>
        </member>
        <member name="M:DotSpatial.Projections.GridShift.NadInterpolate(DotSpatial.Projections.PhiLam,DotSpatial.Projections.NadTable)">
             <summary>
            
             </summary>
             <param name="t"></param>
             <param name="ct"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.GridShift.GetValue(System.Int32,System.Int32,DotSpatial.Projections.NadTable)">
            <summary>
            Checks the edges to make sure that we are not attempting to interpolate
            from cells that don't exist.
            </summary>
            <param name="iPhi">The cell index in the phi direction</param>
            <param name="iLam">The cell index in the lambda direction</param>
            <param name="table">The Table with the values</param>
            <returns>A PhiLam that has the shift coefficeints.</returns>
        </member>
        <member name="M:DotSpatial.Projections.GridShift.InitializeExternalGrids">
            <summary>
            Load grids from the default GeogTransformsGrids subfolder
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.GridShift.InitializeExternalGrids(System.String,System.Boolean)">
            <summary>
            Load grids from the specified folder
            </summary>
            <param name="gridsFolder"></param>
            <param name="recursive"></param>
        </member>
        <member name="T:DotSpatial.Projections.IProjectionCategory">
            <summary>
            IProjectionCategory
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IProjectionCategory.MainCategory">
            <summary>
            Gets or sets the main category for this projection
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IProjectionCategory.Category">
            <summary>
            Gets or sets the category for this projection
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IProjectionCategory.Name">
            <summary>
            Gets or sets the string name
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.IProjectionCategory.Proj4String">
            <summary>
            Gets or sets the proj4 string that defines this projection
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.IReproject">
            <summary>
            This interface defines how reprojection classes should be accessed
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.IReproject.ReprojectPoints(System.Double[][],DotSpatial.Projections.ProjectionInfo,DotSpatial.Projections.ProjectionInfo,System.Int32,System.Int32)">
            <summary>
            Reprojects the specified points.  The first is the projection info to start from, while the destination
            is the projection to end with.
            </summary>
            <param name="points"></param>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="startIndex"></param>
            <param name="numPoints"></param>
        </member>
        <member name="T:DotSpatial.Projections.KnownCoordinateSystems">
            <summary>
            KnownCoordinateSystems
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.KnownCoordinateSystems._geographic">
            <summary>
            Geographic systems operate in angular units, but can use different
            spheroid definitions or angular offsets.
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.KnownCoordinateSystems._projected">
            <summary>
            Projected systems are systems that use linear units like meters or feet
            rather than angular units like degrees or radians
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.KnownCoordinateSystems.Projected">
            <summary>
            Projected systems are systems that use linear units like meters or feet
            rather than angular units like degrees or radians
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.KnownCoordinateSystems.Geographic">
            <summary>
            Geographic systems operate in angular units, but can use different
            spheroid definitions or angular offsets.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.LinearUnit">
            <summary>
            Unit
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.LinearUnit.#ctor">
            <summary>
            Creates a new instance of Unit
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.LinearUnit.ToEsriString">
            <summary>
            Generates the part of the Esri well known text for this linear unit
            </summary>
            <returns>A string that contains the name and conversion factor to meters </returns>
        </member>
        <member name="M:DotSpatial.Projections.LinearUnit.ParseEsriString(System.String)">
            <summary>
            Parses the UNIT member of Esri well known text into a linear unit
            </summary>
            <param name="esriString"></param>
        </member>
        <member name="M:DotSpatial.Projections.LinearUnit.ReadCode(System.Int32)">
            <summary>
            Interprets a UOM code.  For instance 9001 = meters.
            These codes and ratios were from GDAL unit_of_measure.csv, and I'm not
            sure if the numeric code is used outside of GDAL internal references.
            </summary>
            <param name="uomCode"></param>
        </member>
        <member name="P:DotSpatial.Projections.LinearUnit.Name">
            <summary>
            Gets or sets the name of this
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.LinearUnit.Meters">
            <summary>
            Gets or sets the constant to multiply with maps distances to get the distances in meters
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Meridian">
            <summary>
            Meridian
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Meridian.#ctor">
            <summary>
            Creates a new instance of Meridian
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Meridian.#ctor(System.Double,System.String)">
            <summary>
            Generates a custom meridian given a name and a longitude
            </summary>
            <param name="longitude">The longitude to use</param>
            <param name="name">The string name for this meridian</param>
        </member>
        <member name="M:DotSpatial.Projections.Meridian.#ctor(DotSpatial.Projections.Proj4Meridian)">
            <summary>
            Creates a new meridian from one of the known, proj4 meridian locations.
            Presumably the longitudes here correspond to various standard meridians
            rather than some arbitrary longitudes of capital cities.
            </summary>
            <param name="standardMeridian">One of the enumerations listed</param>
        </member>
        <member name="M:DotSpatial.Projections.Meridian.#ctor(System.String)">
            <summary>
            Creates a new meridian from one of the known, proj4 meridian locations.
            </summary>
            <param name="standardMeridianName">The string name of the meridian to use</param>
        </member>
        <member name="M:DotSpatial.Projections.Meridian.ReadCode(System.Int32)">
            <summary>
            Reads the integer code (possibly only an internal GDAL code) for the Meridian.
            The value can be from 8901 (Greenwich) to 8913 (Oslo).  This will also alter
            the name and longitude for this meridian.
            </summary>
            <param name="code">The integer meridian code.</param>
        </member>
        <member name="M:DotSpatial.Projections.Meridian.AssignMeridian(DotSpatial.Projections.Proj4Meridian)">
            <summary>
            Changes the longitude to correspond with the specified standard meridian
            </summary>
            <param name="standardMeridian"></param>
        </member>
        <member name="M:DotSpatial.Projections.Meridian.ToEsriString">
            <summary>
            Writes the longitude and prime meridian content to the esri string
            </summary>
            <returns>A string that is formatted for an esri prj file</returns>
        </member>
        <member name="M:DotSpatial.Projections.Meridian.ParseEsriString(System.String)">
            <summary>
            Reads content from an esri string, learning information about the prime meridian
            </summary>
            <param name="esriString"></param>
        </member>
        <member name="M:DotSpatial.Projections.Meridian.ToProj4String">
            <summary>
            Returns a representaion of this object as a Proj4 string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Projections.Meridian.Code">
            <summary>
            Gets or sets the code.  Setting this will not impact the longitude or name.
            In order to read a standard code (8901-8913) use the ReadCode method.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Meridian.Name">
            <summary>
            Gets or sets the string name
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Meridian.Longitude">
            <summary>
            Gets or sets the longitude where the prime meridian for this geographic coordinate occurs.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Meridian.pm">
            <summary>
            Gets or sets the pm.
            </summary>
            <value>
            Alternate prime meridian (typically a city name).
            </value>
        </member>
        <member name="T:DotSpatial.Projections.MeridionalDistance">
            <summary>
            MeridinalDistance
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.MeridionalDistance.GetEn(System.Double)">
            <summary>
            Formerly pj_enfn from Proj4
            </summary>
            <param name="es"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.MeridionalDistance.MeridionalLength(System.Double,System.Double,System.Double,System.Double[])">
            <summary>
            Formerly pj_mlfn
            Given geodetic angular displacement phi, this calculates the equivalent meridional distance
            </summary>
            <param name="phi">The geodetic angular displacement</param>
            <param name="sphi"></param>
            <param name="cphi"></param>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.MeridionalDistance.AngularDistance(System.Double,System.Double,System.Double[])">
            <summary>
            Formerly pj_inv_mlfn
            Given the linear distance, this calculates the equivalent geodetic angular displacement
            </summary>
            <param name="arg"></param>
            <param name="es"></param>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Projections.NadTables">
            <summary>
            NadTables
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.NadTables.#ctor">
            <summary>
            Creates a new instance of NadTables
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.NadTables.InitializeExternalGrids">
            <summary>
            Load grids from the default GeogTransformsGrids subfolder
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.NadTables.InitializeExternalGrids(System.String,System.Boolean)">
            <summary>
            Load grids from the specified folder
            </summary>
            <param name="strGridsFolder"></param>
            <param name="recursive"></param>
        </member>
        <member name="P:DotSpatial.Projections.NadTables.Tables">
            <summary>
            Gets an array of the lla tables that have been added as a resource
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.PhiLam">
            <summary>
            PhiLam has two double values and is used like a coordinate.
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.PhiLam.Lambda">
            <summary>
            Geodetic Lambda coordinate (longitude)
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.PhiLam.Phi">
            <summary>
            Geodetic Phi coordinate (latitude)
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Proj4Datum">
            <summary>
            Proj4Datums
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Datum.WGS84">
            <summary>
            World Geodetic System 1984
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Datum.GGRS87">
            <summary>
            Greek Geodetic Reference system 1987
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Datum.NAD83">
            <summary>
            North American Datum 1983
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Datum.NAD27">
            <summary>
            North American Datum 1927
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Datum.Potsdam">
            <summary>
            Potsdam Rauenburg 1950 DHDN
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Datum.Carthage">
            <summary>
            Carthage 1934 Tunisia
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Datum.Hermannskogel">
            <summary>
            Hermannskogel
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Datum.Ire65">
            <summary>
            Ireland 1965
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Datum.Nzgd49">
            <summary>
            New Zealand Grid
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Datum.OSGB36">
            <summary>
            Airy 1830
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Proj4Ellipsoid">
            <summary>
            Proj4Ellipsoids
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Custom">
            <summary>
            Custom will use the a parameter for the major axis and the
            rf parameter for the flattening divisor
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Merit_1983">
            <summary>
            MERIT 1983
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.SovietGeodeticSystem_1985">
            <summary>
            Soviet Geodetic System 85
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.GRS_1980">
            <summary>
            Geodetic Reference System 1980(IUGG, 1980)
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.IAU_1976">
            <summary>
            International Astronomical Union 1976
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Airy_1830">
            <summary>
            Sir George Biddell Airy 1830 (Britain)
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.AppPhysics_1965">
            <summary>
            App. Physics. 1965
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.NavalWeaponsLab_1965">
            <summary>
            Naval Weapons Lab., 1965
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.AiryModified">
            <summary>
            Modified Airy
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Andrae_1876">
            <summary>
            Andrae 1876 (Den., Iclnd.)
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Austrailia_SouthAmerica">
            <summary>
            Austrailian National and South American 1969
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.GRS_1967">
            <summary>
            Geodetic Reference System 67 (IUGG 1967)
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Bessel_1841">
            <summary>
            Bessel 1841
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.BesselNamibia">
            <summary>
            Bessel 1841 (Namibia)
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Clarke_1866">
            <summary>
            Clarke 1866
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.ClarkeModified_1880">
            <summary>
            Clarke 1880 Modified
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.CPM_1799">
            <summary>
            Comm. des Poids et Mesures 1799
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Delambre_1810">
            <summary>
            Delambre 1810 (Belgium)
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Engelis_1985">
            <summary>
            Engelis 1985
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Everest_1830">
            <summary>
            Everest 1830
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Everest_1948">
            <summary>
            Everest 1948
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Everest_1956">
            <summary>
            Everest 1956
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Everest_1969">
            <summary>
            Everest 1969
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Everest_SS">
            <summary>
            Everest (Sabah and Sarawak)
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Everest_Pakistan">
            <summary>
            Everest (Pakistan)
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Fischer_1960">
            <summary>
            Fischer (Mercury Datum) 1960
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.FischerModified_1960">
            <summary>
            Modified Fischer 1960
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Fischer_1968">
            <summary>
            Fischer 1968
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Helmert_1906">
            <summary>
            Helmert 1906
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Hough">
            <summary>
            Hough
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Indonesian_1974">
            <summary>
            Indonesian 1974
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.International_1909">
            <summary>
            International 1909
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Krassovsky_1942">
            <summary>
            Krassovsky 1942
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Kaula_1961">
            <summary>
            Kaula 1961
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Lerch_1979">
            <summary>
            Lerch 1979
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Maupertius_1738">
            <summary>
            Maupertius 1738
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.InternationalNew_1967">
            <summary>
            New International 1967
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Plessis_1817">
            <summary>
            Plessis 1817 (France)
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.SoutheastAsia">
            <summary>
            Southeast Asia
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Walbeck">
            <summary>
            Walbekc (Germany)
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.WGS_1960">
            <summary>
            World Geodetic System 1960
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.WGS_1966">
            <summary>
            World Geodetic System 1966
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.WGS_1972">
            <summary>
            World Geodetic System 1972
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.WGS_1984">
            <summary>
            World Geodetic System 1984
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Ellipsoid.Sphere">
            <summary>
            Normal Sphere
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Proj4Meridian">
            <summary>
            Proj4Meridians
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Meridian.Greenwich">
            <summary>
            Greenwich, England
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Meridian.Lisbon">
            <summary>
            Lisbon, Portugal
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Meridian.Paris">
            <summary>
            Paris, France
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Meridian.Bogota">
            <summary>
            Bogota, Colombia
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Meridian.Madrid">
            <summary>
            Madrid, Spain
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Meridian.Rome">
            <summary>
            Rome, Italy
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Meridian.Bern">
            <summary>
            Berne, Switzerland
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Meridian.Jakarta">
            <summary>
            Jakarta, Indonesia
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Meridian.Ferro">
            <summary>
             Brasil
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Meridian.Brussels">
            <summary>
            Brussels, Belgiuum
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Meridian.Stockholm">
            <summary>
            Stockholm, Sweden
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Meridian.Athens">
            <summary>
            Athens, Greece
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Proj4Meridian.Oslo">
            <summary>
            Oslo, Norway
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.Africa">
            <summary>
            Africa
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.Africa.#ctor">
            <summary>
            Creates a new instance of Africa
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.Asia">
            <summary>
            Asia
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.Asia.#ctor">
            <summary>
            Creates a new instance of Asia
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.Europe">
            <summary>
            Europe
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.Europe.#ctor">
            <summary>
            Creates a new instance of Europe
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.GaussKrugerBeijing1954">
            <summary>
            GaussKrugerBeijing1954
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.GaussKrugerBeijing1954.#ctor">
            <summary>
            Creates a new instance of GaussKrugerBeijing1954
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.GaussKrugerOther">
            <summary>
            GaussKrugerOther
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.GaussKrugerOther.#ctor">
            <summary>
            Creates a new instance of GaussKrugerOther
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.GaussKrugerPulkovo1942">
            <summary>
            GaussKrugerPulkovo1942
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.GaussKrugerPulkovo1942.#ctor">
            <summary>
            Creates a new instance of GaussKrugerPulkovo1942
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.GaussKrugerPulkovo1995">
            <summary>
            GaussKrugerPulkovo1995
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.GaussKrugerPulkovo1995.#ctor">
            <summary>
            Creates a new instance of GaussKrugerPulkovo1995
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.KrugerXian1980">
            <summary>
            KrugerZian1980
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.KrugerXian1980.#ctor">
            <summary>
            Creates a new instance of KrugerZian1980
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.Minnesota">
            <summary>
            Not sure why we have all these county based Minnesota and Wisconsin projections
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.Minnesota.#ctor">
            <summary>
            Creates a new instance of Minnesota
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.Nad1983IntlFeet">
            <summary>
            Nad1983IntlFeet
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.Nad1983IntlFeet.#ctor">
            <summary>
            Creates a new instance of Nad1983IntlFeet
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.NationalGrids">
            <summary>
            NationalGrids
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.NationalGrids.#ctor">
            <summary>
            Creates a new instance of NationalGrids
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.NationalGridsAustralia">
            <summary>
            NatGridsAustralia
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.NationalGridsAustralia.#ctor">
            <summary>
            Creates a new instance of NatGridsAustralia
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.NationalGridsCanada">
            <summary>
            NationalGridsCanada
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.NationalGridsCanada.#ctor">
            <summary>
            Creates a new instance of NationalGridsCanada
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.NationalGridsIndia">
            <summary>
            IndianSubcontinent
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.NationalGridsIndia.#ctor">
            <summary>
            Creates a new instance of IndianSubcontinent
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.NationalGridsJapan">
            <summary>
            NationalGridsJapan
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.NationalGridsJapan.#ctor">
            <summary>
            Creates a new instance of NationalGridsJapan
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.NationalGridsNewZealand">
            <summary>
            NationalGridsNewZealand
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.NationalGridsNewZealand.#ctor">
            <summary>
            Creates a new instance of NationalGridsNewZealand
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.NationalGridsNorway">
            <summary>
            NationalGridsNorway
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.NationalGridsNorway.#ctor">
            <summary>
            Creates a new instance of NationalGridsNorway
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.NationalGridsSweden">
            <summary>
            NationalGridsSweden
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.NationalGridsSweden.#ctor">
            <summary>
            Creates a new instance of NationalGridsSweden
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.NorthAmerica">
            <summary>
            NorthAmerica
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.NorthAmerica.#ctor">
            <summary>
            Creates a new instance of NorthAmerica
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.Polar">
            <summary>
            Polar
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.Polar.#ctor">
            <summary>
            Creates a new instance of Polar
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.SouthAmerica">
            <summary>
            SouthAmerica
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.SouthAmerica.#ctor">
            <summary>
            Creates a new instance of SouthAmerica
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.SpheroidBased">
            <summary>
            SpheroidBased
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.ProjectedCategories.SpheroidBased.Lambert2">
            <summary>
            Lambert 2 (Central France)
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.ProjectedCategories.SpheroidBased.Lambert2Wide">
            <summary>
            Lambert 2 (Étendu)
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.SpheroidBased.#ctor">
            <summary>
            Creates a new instance of SpheroidBased
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.StatePlaneNad1927">
            <summary>
            StatePlaneNad1927
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.StatePlaneNad1927.#ctor">
            <summary>
            Creates a new instance of StatePlaneNad1927
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.StatePlaneNad1983">
            <summary>
            StatePlaneNad1983
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.ProjectedCategories.StatePlaneNad1983.MichiganGeoRef2008">
            <summary>
             Michigan Geo Ref 2008
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.ProjectedCategories.StatePlaneNad1983.NAD1983Maine2000CentralZone">
            <summary>
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.StatePlaneNad1983.#ctor">
            <summary>
            Creates a new instance of StatePlaneNad1983
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.StatePlaneNad1983Feet">
            <summary>
            StatePlaneNad1983Feet
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.StatePlaneNad1983Feet.#ctor">
            <summary>
            Creates a new instance of StatePlaneNad1983Feet
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.StatePlaneNad1983Harn">
            <summary>
            StatePlaneNad1983Harn
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.StatePlaneNad1983Harn.#ctor">
            <summary>
            Creates a new instance of StatePlaneNad1983Harn
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.StatePlaneNad1983HarnFeet">
            <summary>
            StatePlaneNad1983HarnFeet
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.StatePlaneNad1983HarnFeet.#ctor">
            <summary>
            Creates a new instance of StatePlaneNad1983HarnFeet
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.StatePlaneOther">
            <summary>
            StatePlaneOther
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.StatePlaneOther.#ctor">
            <summary>
            Creates a new instance of StatePlaneOther
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.StateSystems">
            <summary>
            StateSystems
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.StateSystems.#ctor">
            <summary>
            Creates a new instance of StateSystems
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.TransverseMercatorSystems">
            <summary>
            TransverseMercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.TransverseMercatorSystems.#ctor">
            <summary>
            Creates a new instance of TransverseMercator
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.UtmNad1927">
            <summary>
            UtmNad1927
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.UtmNad1927.#ctor">
            <summary>
            Creates a new instance of UtmNad1927
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.UtmNad1983">
            <summary>
            UtmNad1983
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.UtmNad1983.#ctor">
            <summary>
            Creates a new instance of UtmNad1983
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.UtmOther">
            <summary>
            UtmOther
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.UtmOther.#ctor">
            <summary>
            Creates a new instance of UtmOther
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.UtmWgs1972">
            <summary>
            UtmWgs1972
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.UtmWgs1972.#ctor">
            <summary>
            Creates a new instance of UtmWgs1972
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.UtmWgs1984">
            <summary>
            UtmWgs1984
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.UtmWgs1984.#ctor">
            <summary>
            Creates a new instance of UtmWgs1984
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.Wisconsin">
            <summary>
            Wisconsin
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.Wisconsin.#ctor">
            <summary>
            Creates a new instance of Wisconsin
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.World">
            <summary>
            World
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.World.#ctor">
            <summary>
            Creates a new instance of World
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedCategories.WorldSpheroid">
            <summary>
            WorldSpheroid
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedCategories.WorldSpheroid.#ctor">
            <summary>
            Creates a new instance of WorldSpheroid
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectedSystems">
            <summary>
            Projected
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectedSystems.GetCategory(System.String)">
            <summary>
            Given the string name, this will return the specified coordinate category
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Projections.ProjectedSystems.Names">
            <summary>
            Gets an array of all the names of the coordinate system categories
            in this collection of systems.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectionException">
            <summary>
            ProjectionErrorCodes
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionException.#ctor(System.Int32)">
            <summary>
            Creates a new projection exception with the appropriate message code
            </summary>
            <param name="errorCode"></param>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionException.#ctor(System.String)">
            <summary>
            Creates a new projection exception with the specified message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionException.GetMessage(System.Int32)">
            <summary>
            Returns a string message given the correct numeric code.
            </summary>
            <param name="projectionCode"></param>
            <returns></returns>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionException.ErrorCode">
            <summary>
            Gets the error code that was used when this exception was created
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectionInfo">
            <summary>
            Parameters based on http://trac.osgeo.org/proj/wiki/GenParms. Also, see http://home.comcast.net/~gevenden56/proj/manual.pdf
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:DotSpatial.Projections.ProjectionInfo"/> class.
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.ToEsriString">
            <summary>
            Expresses the entire projection as the Esri well known text format that can be found in .prj files
            </summary>
            <returns>
            The generated string
            </returns>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.FromEpsgCode(System.Int32)">
            <summary>
            Using the specified code, this will attempt to look up the related reference information
              from the appropriate pcs code.
            </summary>
            <param name="epsgCode">
            The epsg Code.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when there is no projection for given epsg code</exception>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.FromAuthorityCode(System.String,System.Int32)">
            <summary>
            Using the specified code, this will attempt to look up the related reference information from the appropriate authority code.
            </summary>
            <param name="authority"> The authority. </param>
            <param name="code">  The code. </param>
            <returns>ProjectionInfo</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when there is no projection for given authority and code</exception>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.FromEsriString(System.String)">
            <summary>
            Parses the entire projection from an Esri string.  In some cases, this will have
              default projection information since only geographic information is obtained.
            </summary>
            <param name="esriString">
            The Esri string to parse
            </param>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.FromProj4String(System.String)">
            <summary>
            Creates a new projection and automatically reads in the proj4 string
            </summary>
            <param name="proj4String">
            The proj4String to read in while defining the projection
            </param>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.Open(System.String)">
            <summary>
            Open a given prj fileName
            </summary>
            <param name="prjFilename">
            </param>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.Equals(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Gets a boolean that is true if the Esri WKT string created by the projections matches.
              There are multiple ways to write the same projection, but the output Esri WKT string
              should be a good indicator of whether or not they are the same.
            </summary>
            <param name="other">
            The other projection to compare with.
            </param>
            <returns>
            Boolean, true if the projections are the same.
            </returns>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.GetUnitText(System.Double)">
            <summary>
            If this is a geographic coordinate system, this will show decimal degrees.  Otherwise,
              this will show the linear unit units.
            </summary>
            <param name="quantity">
            The quantity.
            </param>
            <returns>
            The get unit text.
            </returns>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.SaveAs(System.String)">
            <summary>
            Exports this projection info by saving it to a *.prj file.
            </summary>
            <param name="prjFilename">
            The prj file to save to
            </param>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.ToProj4String">
            <summary>
            Returns a representaion of this object as a Proj4 string.
            </summary>
            <returns>
            The to proj 4 string.
            </returns>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.ToString">
            <summary>
            This overrides ToString to get the Esri name of the projection.
            </summary>
            <returns>
            The to string.
            </returns>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.ParseProj4String(System.String)">
            <summary>
            Attempts to parse known parameters from the set of proj4 parameters
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.TryParseEsriString(System.String)">
            <summary>
            This will try to read the string, but if the validation fails, then it will return false,
              rather than throwing an exception.
            </summary>
            <param name="esriString">
            The string to test and define this projection if possible.
            </param>
            <returns>
            Boolean, true if at least the GEOGCS tag was found.
            </returns>
        </member>
        <member name="M:DotSpatial.Projections.ProjectionInfo.ParseEsriString(System.String)">
            <summary>
            Re-sets the parameters of this projection info by parsing the esri projection string
            </summary>
            <param name="esriString">The projection information string in Esri WKT format</param>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.Authority">
            <summary>
              Gets or sets the athority, for example EPSG
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.AuthorityCode">
            <summary>
              Gets or sets the athority code
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.AuxiliarySphereType">
            <summary>
              Gets or sets the auxiliary sphere type.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.CentralMeridian">
            <summary>
              The horizontal 0 point in geographic terms
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.EpsgCode">
            <summary>
              Gets or sets the Reference Code
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.FalseEasting">
            <summary>
              The false easting for this coordinate system
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.FalseNorthing">
            <summary>
              The false northing for this coordinate system
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.Geoc">
            <summary>
              Gets or sets a boolean indicating a geocentric latitude parameter
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.GeographicInfo">
            <summary>
              The geographic information
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.IsGeocentric">
            <summary>
              Gets or sets a boolean that indicates whether or not this
              projection is geocentric.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.IsLatLon">
            <summary>
              True if this coordinate system is expressed only using geographic coordinates
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.IsSouth">
            <summary>
              Gets or sets a boolean indicating whether this projection applies to the
              southern coordinate system or not.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.IsValid">
            <summary>
              True if the transform is defined.  That doesn't really mean it accurately represents the named
              projection, but rather it won't throw a null exception during transformation for the lack of
              a transform definition.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.LatitudeOfOrigin">
            <summary>
              The zero point in geographic terms
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.LongitudeOfCenter">
            <summary>
            The longitude of center for this coordinate system
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.M">
            <summary>
              Gets or sets the M.
            </summary>
            <value>
              The M.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.Name">
            <summary>
              Gets or sets the name of this projection information
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.NoDefs">
            <summary>
              A boolean that indicates whether to use the /usr/share/proj/proj_def.dat defaults file (proj4 parameter "no_defs").
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.Over">
            <summary>
              Gets or sets a boolean for the over-ranging flag
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.ScaleFactor">
            <summary>
              The scale factor for this coordinate system
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.StandardParallel1">
            <summary>
              The line of latitude where the scale information is preserved.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.StandardParallel2">
            <summary>
            The standard parallel 2.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.Transform">
            <summary>
              Gets or sets the transform that converts between geodetic coordinates and projected coordinates.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.Unit">
            <summary>
              The unit being used for measurements.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.W">
            <summary>
              Gets or sets the w.
            </summary>
            <value>
              The w.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.Zone">
            <summary>
              Gets or sets the integer zone parameter if it is specified.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.alpha">
            <summary>
              Gets or sets the alpha/ azimuth.
            </summary>
            <value>
              ? Used with Oblique Mercator and possibly a few others. For our purposes this is exactly the same as azimuth
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.bns">
            <summary>
              Gets or sets the BNS.
            </summary>
            <value>
              The BNS.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.czech">
            <summary>
              Gets or sets the czech.
            </summary>
            <value>
              The czech.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.guam">
            <summary>
              Gets or sets the guam.
            </summary>
            <value>
              The guam.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.h">
            <summary>
              Gets or sets the h.
            </summary>
            <value>
              The h.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.lat_ts">
            <summary>
              Gets or sets the lat_ts.
            </summary>
            <value>
              Latitude of true scale.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.lon_1">
            <summary>
              Gets or sets the lon_1.
            </summary>
            <value>
              The lon_1.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.lon_2">
            <summary>
              Gets or sets the lon_2.
            </summary>
            <value>
              The lon_2.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.lonc">
            <summary>
              Gets or sets the lonc.
            </summary>
            <value>
              The lonc.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.mGeneral">
            <summary>
              Gets or sets the m. Named mGeneral to prevent CLS conflicts.
            </summary>
            <value>
              The m.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.n">
            <summary>
              Gets or sets the n.
            </summary>
            <value>
              The n.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.no_rot">
            <summary>
              Gets or sets the no_rot.
            </summary>
            <value>
              The no_rot. Seems to be used as a boolean.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.no_uoff">
            <summary>
              Gets or sets the no_uoff.
            </summary>
            <value>
              The no_uoff. Seems to be used as a boolean.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.rot_conv">
            <summary>
              Gets or sets the rot_conv.
            </summary>
            <value>
              The rot_conv. Seems to be used as a boolean.
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.to_meter">
            <summary>
              Gets or sets the to_meter.
            </summary>
            <value>
              Multiplier to convert map units to 1.0m
            </value>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.Lam1">
            <summary>
            Gets the lon_1 parameter in radians
            </summary>
            <returns>
            The get lam 1.
            </returns>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.Lam2">
            <summary>
            Gets the lon_2 parameter in radians
            </summary>
            <returns>
            The get lam 2.
            </returns>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.Phi1">
            <summary>
            Gets the lat_1 parameter multiplied by radians
            </summary>
            <returns>
            The get phi 1.
            </returns>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.Phi2">
            <summary>
            Gets the lat_2 parameter multiplied by radians
            </summary>
            <returns>
            The get phi 2.
            </returns>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.Lam0">
            <summary>
            Sets the lambda 0, or central meridian in radial coordinates
            </summary>
            <param name="value">
            The value of Lambda 0 in radians
            </param>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionInfo.Phi0">
            <summary>
            Sets the phi 0 or latitude of origin in radial coordinates
            </summary>
            <param name="value">
            </param>
        </member>
        <member name="T:DotSpatial.Projections.InvalidEsriFormatException">
            <summary>
            Validation exception for Esri string.
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.InvalidEsriFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of an invlaidEsriFormatException.
            </summary>
            <param name="projectionString">The text string that failed validation.</param>
        </member>
        <member name="P:DotSpatial.Projections.InvalidEsriFormatException.ProjectionString">
            <summary>
            Gets the string that had the invalid format.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.DuplicateTableName">
            <summary>
              Looks up a localized string similar to The name %S was found for more than one lla Table in the Nad folder..
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err1_NoArguments">
            <summary>
              Looks up a localized string similar to No arguments in initialization list.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err10_ZeroRecFlattening">
            <summary>
              Looks up a localized string similar to The reciprocal flattening (1/f) = 0.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err11_LatitudeOutOfBounds">
            <summary>
              Looks up a localized string similar to The Latitude was greater than 90 or less than -90.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err12_ESquareNegative">
            <summary>
              Looks up a localized string similar to The square of eccentricity cannot be a negative value..
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err13_NoMajorRadius">
            <summary>
              Looks up a localized string similar to The given semi-major axis was 0 or not given..
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err14_LatLonOutOfBounds">
            <summary>
              Looks up a localized string similar to The Latitude or Longitude exceeded limits.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err15_InvalidXY">
            <summary>
              Looks up a localized string similar to The cartesian X or Y coordinate was invalid.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err16_ImproperDMS">
            <summary>
              Looks up a localized string similar to The Degree Minute Second value is formed imporperly.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err17_NonConvergentRMeridDist">
            <summary>
              Looks up a localized string similar to The inverse meridinal distance was non-convergent.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err18_NonConvergentRPhi2">
            <summary>
              Looks up a localized string similar to The inverse Phi2 value was non-converngent.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err19_TrigException">
            <summary>
              Looks up a localized string similar to The ArcCosign or ArcSign value was too large..
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err2_NoOptions">
            <summary>
              Looks up a localized string similar to No options found in &apos;init&apos; file.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err20_ToleranceConditionError">
            <summary>
              Looks up a localized string similar to Tolerance Condition Error.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err21_ConicLatitudeError">
            <summary>
              Looks up a localized string similar to The conic lat_1 value cannot be its -lat_2.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err22_Lat1TooLarge">
            <summary>
              Looks up a localized string similar to Latitude 1 cannot be greater than or equal to 90.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err23_Lat1TooSmall">
            <summary>
              Looks up a localized string similar to Latitude 2 cannot be equal to 0.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err24_Lat_tsTooLarge">
            <summary>
              Looks up a localized string similar to The lat_ts parameter cannot be greater than or equal to 90.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err25_NoControlPtSeparation">
            <summary>
              Looks up a localized string similar to There was no distance between the control points.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err26_ProjectionNotRotated">
            <summary>
              Looks up a localized string similar to Projection not selected to be rotated.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err27_WorMTooSmall">
            <summary>
              Looks up a localized string similar to W &lt;= 0 or M &lt;= 0.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err28_LsatOutOfBounds">
            <summary>
              Looks up a localized string similar to lsat not in 1-5 range.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err29_PathNotInRange">
            <summary>
              Looks up a localized string similar to Path not in range.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err3_NoColon">
            <summary>
              Looks up a localized string similar to No colon in init= string.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err30_HTooSmall">
            <summary>
              Looks up a localized string similar to H was negative or 0.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err31_KTooSmall">
            <summary>
              Looks up a localized string similar to K was less than 0.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err32_LatOutOfBounds">
            <summary>
              Looks up a localized string similar to The central latitude was 0 or 90 or alpha = 90.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err33_InvalidLatitudes">
            <summary>
              Looks up a localized string similar to Lat_1 = lat_2 or lat_1 = 0 or lat_2 = 90.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err34_EllipticalRequired">
            <summary>
              Looks up a localized string similar to Elliptical Usage Required.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err35_InvalidUTMZone">
            <summary>
              Looks up a localized string similar to The UTM zone parameter was invalid.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err36_TchebyException">
            <summary>
              Looks up a localized string similar to The arguments were out of range for Tcheby eval.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err37_ProjNotFound">
            <summary>
              Looks up a localized string similar to Projection Not Found.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err38_CorrectionNotFound">
            <summary>
              Looks up a localized string similar to Failed to load NAD27-83 correction file.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err39_NorMnotSpecified">
            <summary>
              Looks up a localized string similar to Both n and m must be specified and &gt; 0.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err4_NotNamed">
            <summary>
              Looks up a localized string similar to Projection not named.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err40_InvalidN">
            <summary>
              Looks up a localized string similar to N&lt;= 0, n &gt; 1 or not specified.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err41_Lat1OrLat2Missing">
            <summary>
              Looks up a localized string similar to lat_1 or lat_2 not specified.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err42_Lat1EqualsLat2">
            <summary>
              Looks up a localized string similar to |lat_1| =|lat_2| .
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err43_MeanLatError">
            <summary>
              Looks up a localized string similar to lat_0 is pi/2 from mean lat.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err44_CoordinateUnreadable">
            <summary>
              Looks up a localized string similar to Failed to parse coordinate system definition.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err45_GeocentricMissingZ">
            <summary>
              Looks up a localized string similar to Geocentric transformation missing z or ellips.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err46_UknownPMID">
            <summary>
              Looks up a localized string similar to Uknown prime meridian conversion ID.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err5_UknownProjection">
            <summary>
              Looks up a localized string similar to UnknownProjectionId.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err6_EffectiveEccentricity1">
            <summary>
              Looks up a localized string similar to Effective eccentricity = 1.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err7_UknownUnitID">
            <summary>
              Looks up a localized string similar to Unkown unit conversion ID.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err8_Invalidboolean">
            <summary>
              Looks up a localized string similar to Invalid boolean parameter argument.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.Err9_UknownEllipse">
            <summary>
              Looks up a localized string similar to The elliptical parameter ellps= was unkown.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.IndexMismatch">
            <summary>
              Looks up a localized string similar to There was an index mismatch problem with the specified file..
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.InverseShiftFailed">
            <summary>
              Looks up a localized string similar to Inverse grid shift iteration faield, presumably at grid edge.  Using first approximation..
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionMessages.InvShiftConvergeFailed">
            <summary>
              Looks up a localized string similar to Inverse grid shift iterator failed to converge..
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjectionNames">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionNames.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionNames.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.ProjectionNames.Michigan">
            <summary>
              Looks up a localized string similar to Michigan GeoRef (2008).
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Reproject">
            <summary>
            Reproject
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Reproject.ReprojectAffine(System.Double[],System.Double,System.Double,DotSpatial.Projections.ProjectionInfo,DotSpatial.Projections.ProjectionInfo)">
            <summary>
            This method reprojects the affine transform coefficients.  This is used for projection on the fly,
            where image transforms can take advantage of an affine projection, but does not have the power of
            a full projective transform and gets less and less accurate as the image covers larger and larger
            areas.  Since most image layers represent small rectangular areas, this should not be a problem in
            most cases.  the affine array should be ordered as follows:
            X' = [0] + [1] * Column + [2] * Row
            Y' = [3] + [4] * Column + [5] * Row
            </summary>
            <param name="affine">The array of double affine coefficients.</param>
            <param name="numRows">The number of rows to use for the lower bounds.  Value of 0 or less will be set to 1.</param>
            <param name="numCols">The number of columns to use to get the right bounds.  Values of 0 or less will be set to 1.</param>
            <param name="source"></param>
            <param name="dest"></param>
            <returns>The transformed coefficients</returns>
        </member>
        <member name="M:DotSpatial.Projections.Reproject.ReprojectPoints(System.Double[],System.Double[],DotSpatial.Projections.ProjectionInfo,DotSpatial.Projections.ProjectionInfo,System.Int32,System.Int32)">
             <summary>
            
             </summary>
             <param name="xy">The xy array should be in interleaved set of xy coordinates like [x1, y1, x2, y2, ... xn, yn]</param>
             <param name="z">The z array is the array of all the z values</param>
             <param name="source"></param>
             <param name="dest"></param>
             <param name="startIndex"></param>
             <param name="numPoints"></param>
        </member>
        <member name="M:DotSpatial.Projections.Reproject.ReprojectPoints(System.Double[],System.Double[],DotSpatial.Projections.ProjectionInfo,System.Double,DotSpatial.Projections.ProjectionInfo,System.Double,DotSpatial.Projections.IDatumTransform,System.Int32,System.Int32)">
             <summary>
            
             </summary>
             <param name="xy">The xy array should be in interleaved set of xy coordinates like [x1, y1, x2, y2, ... xn, yn]</param>
             <param name="z">The z array is the array of all the z values</param>
             <param name="source"></param>
             <param name="srcZtoMeter"></param>
             <param name="dest"></param>
             <param name="dstZtoMeter"></param>
             <param name="idt"></param>
             <param name="startIndex"></param>
             <param name="numPoints"></param>
        </member>
        <member name="T:DotSpatial.Projections.Spheroid">
            <summary>
            Spheroid (Defaults to WGS84)
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.#ctor">
            <summary>
            Creates a new instance of Spheroid
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new spheroid using an the equatorial radius in meters and
            a flattening coefficient that is the inverse flattening factor.
            eg. for WGS84 (6378137.0, 298.257223563)
            </summary>
            <param name="equatorialRadius">The semi-major axis</param>
            <param name="inverseFlattening">The inverse of the flattening factor</param>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.#ctor(System.Double)">
            <summary>
            For perfect spheres, you just need to specify one radius, which will be
            applied to both radii.  You can then directly change the polar or
            equatorial radius if necessary using the properties.
            </summary>
            <param name="radius">The radius of the sphere</param>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.#ctor(DotSpatial.Projections.Proj4Ellipsoid)">
            <summary>
            The ellps parameter in a proj4 string will only work with certain
            pre-defined spheroids, enumerated in the Proj4Ellipsoids enumeration.
            Custom spheroids can be specified but will use the a and b parameters
            when creating a proj4 parameter instead of using the ellps parameter.
            </summary>
            <param name="knownEllipse">Any of several predefined geographic ellipses</param>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.#ctor(System.String)">
            <summary>
            Given the proj4 code, this will set the radii correctly.
            </summary>
            <param name="proj4Ellips"></param>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.ReadSedrisCode(System.String)">
            <summary>
            Assigns a known projection that is defined by a two character SEDRIS code,
            using nothing but that code.
            </summary>
            <param name="code">The two character SEDRIS code defining 22 distinct ellipsoids.</param>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.AssignKnownEllipsoid(DotSpatial.Projections.Proj4Ellipsoid)">
            <summary>
            Given the enumeration of known ellipsoids, this will redefine this spheroid
            so that it matches the A and B coefficients for the known ellipsoids.
            </summary>
            <param name="knownEllipse">The known Ellipse</param>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.FlatteningFactor">
            <summary>
            Calculates the flattening factor, (a - b) / a.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.ToProj4String">
            <summary>
            Uses the current known ellipsoid to return a code name for the proj4 string if possible.
            Otherwise, this returns the radial parameters a and b.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.Eccentricity">
            <summary>
            Calculates the eccentrity according to e = sqrt(2f - f^2) where f is the flattening factor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.EccentricitySquared">
            <summary>
            Calculates the square of eccentricity according to es = (2f - f^2) where f is the flattening factor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.GetInverseFlattening">
            <summary>
            Calculates the inverse of the flattening factor, commonly saved to Esri projections,
            or else provided as the "rf" parameter for Proj4 strings.  This is simply calculated
            as a / (a - b) where a is the semi-major axis and b is the semi-minor axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.IsOblate">
            <summary>
            Gets a boolean that is true if the spheroid has been flattened.
            </summary>
            <returns>Boolean, true if the spheroid is oblate (or flattened)</returns>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.ToEsriString">
            <summary>
            Converts the spheroid parameters into a valid esri expression that uses the semi-major axis
            and the reciprocal flattening factor
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Spheroid.ParseEsriString(System.String)">
            <summary>
            Reads the Esri string to define the spheroid, which controls how flattened the earth's radius is
            </summary>
            <param name="esriString"></param>
        </member>
        <member name="P:DotSpatial.Projections.Spheroid.Code">
            <summary>
            Gets or sets the two character Synthetic Environment Data
            Representation and Interchange Specification (SEDRIS) code
            eg. AA represents Airy 1830.  Setting this will not modify the values,
            To read a SEDRIS Code use the constructor or AssignKnownEllipsoid overload.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Spheroid.Proj4Names">
            <summary>
            Each of the enumerated known ellipsoids is encoded by an ellps parameter specified by
            the corresponding string value.  Ellipsoids that are not found here or are specified
            as "Custom" in the enuemration will be replaced with an 'a' and a 'b' parameter instead.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Spheroid.InverseFlattening">
            <summary>
            Sets the value by using the current semi-major axis (Equatorial Radius) in order to
            calculate the semi-minor axis (Polar Radius).
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Spheroid.Name">
            <summary>
            Gets or sets the string name of the spheroid.
            e.g.: WGS_1984
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Spheroid.EquatorialRadius">
            <summary>
            A spheroid is a pole flattened (oblate) sphere, with the radii of two axes being equal and longer
            than the third.  This is the radial measure of one of these major axes in meters.
            e.g. 6, 378, 137 for WGS 84
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Spheroid.PolarRadius">
            <summary>
            A spheroid is a pole flattened (oblate) sphere, with the radii of two axes being equal and longer
            than the third.  This is the radial measure of the smaller polar axis in meters.  One option is
            to specify this directly, but it can also be calculated using the major axis and the flattening factor.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Spheroid.KnownEllipsoid">
             <summary>
            
             </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Aitoff">
            <summary>
            Aitoff
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Transform">
            <summary>
            TransverseMercator is a class allowing the transverse mercator transform as transcribed
            from the 4.6 version of the Proj4 library (pj_tmerc.c)
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.ITransform">
            <summary>
            ITransform
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ITransform.Init(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the parameters from the projection info
            </summary>
            <param name="proj">The projection information used to control this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ITransform.Forward(System.Double[],System.Int32,System.Int32)">
            <summary>
            Transforms all the coordinates by cycling through them in a loop,
            transforming each one.  Only the 0 and 1 values of each coordinate will be
            transformed, higher dimensional values will be copied.
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ITransform.Inverse(System.Double[],System.Int32,System.Int32)">
            <summary>
            Transforms all the coordinates by cycling through them in a loop,
            transforming each one.  Only the 0 and 1 values of each coordinate will be
            transformed, higher dimensional values will be copied.
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ITransform.Special(System.Double[],DotSpatial.Projections.ProjectionInfo,DotSpatial.Projections.Transforms.Factors)">
            <summary>
            Special factor calculations for a factors calculation
            </summary>
            <param name="lp"></param>
            <param name="p"></param>
            <param name="fac"></param>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.ITransform.Name">
            <summary>
            Gets or sets the string name of this projection.  This should uniquely define the projection,
            and controls what appears in the .prj files.  This name is required.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.ITransform.Proj4Name">
            <summary>
            Gets or sets the string name of this projection as it is known to proj4, or should appear
            in a proj4 string.  This name is required to read and write to proj4 strings.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.ITransform.Proj4Aliases">
            <summary>
            This is the list of alternate names to check besides the Proj4Name.  This will not be used
            for writing Proj4 strings, but may be helpful for reading them.
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.HALF_PI">
            <summary>
            Pi/2
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.FORT_PI">
            <summary>
            Math.Pi / 4
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.TWO_PI">
            <summary>
            2 * Math.Pi
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.EPS10">
            <summary>
            1E-10
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.IS_ANAL_HK">
            <summary>
            Analytic Hk
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.IS_ANAL_CONV">
            <summary>
            Analytic Conv
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.IS_ANAL_XL_YL">
            <summary>
            Analytic Xl Yl
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.IS_ANAL_XP_YP">
            <summary>
            Analytic Xp Yp
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.RAD_TO_DEG">
            <summary>
            Radians to Degrees
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.DEG_TO_RAD">
            <summary>
            Degrees to Radians
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.LAMBDA">
            <summary>
            The integer index representing lambda values in arrays representing geodetic coordinates
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.PHI">
            <summary>
            The integer index representing phi values in arrays representing geodetic coordinates
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.X">
            <summary>
            The integer index representing X values in arrays representing linear coordinates
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.Y">
            <summary>
            The integer index representing Y values in arrays representing linear coordinates
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.R">
            <summary>
            The integer index representing real values in arrays representing complex numbers
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.I">
            <summary>
            The integer index representing immaginary values in arrays representing complex numbers
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Transform.Init(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the parameters from the projection info
            </summary>
            <param name="projectionInfo">The projection information used to control this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Transform.Forward(System.Double[],System.Int32,System.Int32)">
            <summary>
            Transforms all the coordinates by cycling through them in a loop,
            transforming each one.  Only the 0 and 1 values of each coordinate will be
            transformed, higher dimensional values will be copied.
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Transform.Inverse(System.Double[],System.Int32,System.Int32)">
            <summary>
            Transforms all the coordinates by cycling through them in a loop,
            transforming each one.  Only the 0 and 1 values of each coordinate will be
            transformed, higher dimensional values will be copied.
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Transform.Special(System.Double[],DotSpatial.Projections.ProjectionInfo,DotSpatial.Projections.Transforms.Factors)">
            <summary>
            Special factor calculations for a factors calculation
            </summary>
            <param name="lp">lambda-phi</param>
            <param name="p">The projection</param>
            <param name="fac">The Factors</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Transform.FromKnownTransform(DotSpatial.Projections.Transforms.KnownTransform)">
            <summary>
            Uses an enumeration to generate a new instance of a known transform class
            </summary>
            <param name="value">The member of the KnownTransforms to instantiate</param>
            <returns>A new ITransform interface representing the specific transform</returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Transform.OnSpecial(System.Double[],DotSpatial.Projections.ProjectionInfo,DotSpatial.Projections.Transforms.Factors)">
            <summary>
            Allows for some custom code during a process method
            </summary>
            <param name="lp">lambda-phi</param>
            <param name="p">The projection coordinate system information</param>
            <param name="fac">The Factors</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Transform.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Transform.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Transforms cartesian x, y to geodetic lambda, phi
            </summary>
            <param name="lp">in -> the lambda, phi coordinates</param>
            <param name="xy">out -> the cartesian x, y</param>
            <param name="startIndex">The zero based starting point index.  If this is 1, for instance, reading will skip the x and y of the first point and start at the second point.</param>
            <param name="numPoints">The integer count of the pairs of xy values to consider.</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Transform.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
            <param name="startIndex">The zero based starting point index.  If this is 1, for instance, reading will skip the x and y of the first point and start at the second point.</param>
            <param name="numPoints">The integer count of the pairs of xy values to consider</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Transform.Clone">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.A">
            <summary>
            The major axis
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.Ra">
            <summary>
            1/a
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.OneEs">
            <summary>
            1 - e^2;
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.ROneEs">
            <summary>
            1/OneEs
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.E">
            <summary>
            Eccentricity
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.IsElliptical">
            <summary>
            True if the spheroid is flattened
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.Es">
            <summary>
            Eccentricity Squared
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.Phi0">
            <summary>
            Central Latitude
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.Lam0">
            <summary>
            Central Longitude
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.X0">
            <summary>
            False Easting
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.Y0">
            <summary>
            False Northing
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.K0">
            <summary>
            Scaling Factor
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.ToMeter">
            <summary>
            Scaling to meter
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.FromMeter">
            <summary>
            Scaling from meter
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.B">
            <summary>
            The B parameter, which should be consisten with the semi-minor axis
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.Name">
            <summary>
            Gets or sets the string name of this projection as it appears in .prj files and
            Esri wkt.  This can also be several names separated by a semicolon.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.Proj4Name">
            <summary>
            Gets or sets the string name of this projection as it should appear in proj4 strings.
            This can also be several names deliminated by a semicolon.
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Transform.Proj4Aliases">
            <summary>
            Gets or sets a list of optional aliases that can be used in the place of the Proj4Name.
            This will only be used during reading, and will not be used during writing.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Transform.Modes">
            <summary>
            For transforms that distinguish between polar, oblique and equitorial modes
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.Modes.NorthPole">
            <summary>
            North Pole
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.Modes.SouthPole">
            <summary>
            South Pole
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.Modes.Equitorial">
            <summary>
            Equitorial
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Transform.Modes.Oblique">
            <summary>
            Oblique
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Aitoff.#ctor">
            <summary>
            Creates a new instance of Aitoff
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Aitoff.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.AlbersConicEqualArea">
            <summary>
            AlbersConicEqualArea
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.AlbersEqualArea">
            <summary>
            AlbersEqualArea
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.AlbersEqualArea.#ctor">
            <summary>
            Creates a new instance of AlbersEqualArea
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.AlbersEqualArea.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.AlbersEqualArea.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.AlbersEqualArea.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.AlbersEqualArea.Setup">
            <summary>
            Internal code handling the setup operations for the transform
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.AlbersEqualArea.Phi1">
            <summary>
            Gets or sets the Phi1 parameter
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.AlbersEqualArea.Phi2">
            <summary>
            Gets or sets the Phi2 parameter
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.AlbersConicEqualArea.#ctor">
            <summary>
            Creates a new instance of AlbersConicEqualArea
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.AnalyticModes">
            <summary>
            AnalyticCodes
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.AnalyticModes.IsAnalXlYl">
            <summary>
            Derivatives of lon analytic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.AnalyticModes.IsAnalXpYp">
            <summary>
            Derivatives of lat analytic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.AnalyticModes.IsAnalHk">
            <summary>
            h and k are analytic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.AnalyticModes.IsAnalConv">
            <summary>
            convergence analytic
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.AzimuthalEquidistant">
            <summary>
            AzimuthalEquidistant
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.EllipticalTransform">
            <summary>
            Elliptical Transform supports a built in framework for assuming a
            separate function occurs if the spheroid is elliptical
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EllipticalTransform.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EllipticalTransform.EllipticalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Calculates the forward transformation from geodetic lambda and phi coordinates to
            linear xy coordinates for projections that have elliptical earth models.
            </summary>
            <param name="lp">The input interleaved lambda-phi coordinates where lambda is longitude in radians and phi is latitude in radians.</param>
            <param name="xy">The resulting interleaved x-y coordinates</param>
            <param name="startIndex">The zero based integer start index in terms of coordinate pairs</param>
            <param name="numPoints">The integer number of xy pairs to evaluate.</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EllipticalTransform.SphericalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Calculates the forward transformation from geodetic lambda and phi coordinates to
            linear xy coordinates for projections that have spherical earth models.
            </summary>
            <param name="lp">The input interleaved lambda-phi coordinates where lambda is longitude in radians and phi is latitude in radians.</param>
            <param name="xy">The resulting interleaved x-y coordinates</param>
            <param name="startIndex">The zero based integer start index in terms of coordinate pairs</param>
            <param name="numPoints">The integer number of xy pairs to evaluate.</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EllipticalTransform.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EllipticalTransform.EllipticalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Calculates the inverse transformation from linear xy coordinates to geodetic lambda and phi coordinates
            for projections that have elliptical earth models.
            </summary>
            <param name="xy">The input interleaved x-y coordinates</param>
            <param name="lp">The output interleaved lambda-phi coordinates where lambda is longitude in radians and phi is latitude in radians.</param>
            <param name="startIndex">The zero based integer start index in terms of coordinate pairs</param>
            <param name="numPoints">The integer number of xy pairs to evaluate.</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EllipticalTransform.SphericalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Calculates the inverse transformation from linear xy coordinates to geodetic lambda and phi coordinates
            for projections that have spherical earth models.
            </summary>
            <param name="xy">The input interleaved x-y coordinates</param>
            <param name="lp">The output interleaved lambda-phi coordinates where lambda is longitude in radians and phi is latitude in radians.</param>
            <param name="startIndex">The zero based integer start index in terms of coordinate pairs</param>
            <param name="numPoints">The integer number of xy pairs to evaluate.</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.AzimuthalEquidistant.#ctor">
            <summary>
            Creates a new instance of AzimuthalEquidistant
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.AzimuthalEquidistant.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.AzimuthalEquidistant.SphericalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.AzimuthalEquidistant.EllipticalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.AzimuthalEquidistant.SphericalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.AzimuthalEquidistant.EllipticalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.BipolarObliqueConformalConic">
            <summary>
            BipolarObliqueConformalConic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.BipolarObliqueConformalConic.#ctor">
            <summary>
            Creates a new instance of BipolarObliqueConformalConic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.BipolarObliqueConformalConic.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.BipolarObliqueConformalConic.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.BipolarObliqueConformalConic.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Bonne">
            <summary>
            Bonne
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Bonne.#ctor">
            <summary>
            Creates a new instance of Bonne
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Bonne.EllipticalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Bonne.SphericalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Bonne.SphericalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Bonne.EllipticalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Bonne.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Cassini">
            <summary>
            Cassini
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Cassini.#ctor">
            <summary>
            Creates a new instance of Cassini
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Cassini.SphericalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Cassini.EllipticalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Cassini.EllipticalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Cassini.SphericalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Cassini.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.DoubleStereographic">
            <summary>
            DoubleStereographic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.DoubleStereographic.#ctor">
            <summary>
            Creates a new instance of DoubleStereographic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.DoubleStereographic.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.DoubleStereographic.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.DoubleStereographic.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Extensions">
            <summary>
            Extensions can be used after the namespace is included as follows. _w = projInfo.W.ToRadians();
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Extensions.FromDegreesToRadians(System.Nullable{System.Double})">
            <summary>
            Obtains the double valued parameter after converting from degrees to radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The double valued parameter in radians.
            </returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Extensions.FromDegreesToRadians(System.Double)">
            <summary>
            Obtains the double valued parameter after converting from degrees to radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The double valued parameter in radians.
            </returns>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.GaussKruger">
            <summary>
            Gauss Kruger is basically transverse mercator
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.TransverseMercator">
            <summary>
            TransverseMercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.TransverseMercator.#ctor">
            <summary>
            Creates a new instance of TransverseMercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.TransverseMercator.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.TransverseMercator.SphericalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            The forward transform in the special case where there is no flattening of the spherical model of the earth.
            </summary>
            <param name="lp">The input lambda and phi geodetic values organized in an array</param>
            <param name="xy">The output x and y values organized in an array</param>
            <param name="startIndex">The zero based integer start index</param>
            <param name="numPoints">The integer count of the number of xy pairs in the lp and xy arrays</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.TransverseMercator.EllipticalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            The forward transform where the spheroidal model of the earth has a flattening factor,
            matching more closely with the oblique spheroid of the actual earth
            </summary>
            <param name="lp">The double values for geodetic lambda and phi organized into a one dimensional array</param>
            <param name="xy">The double values for linear x and y organized into a one dimensional array</param>
            <param name="startIndex">The zero based integer start index</param>
            <param name="numPoints">The integer count of the number of xy pairs in the lp and xy arrays</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.TransverseMercator.SphericalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Performs the inverse transform from a single coordinate of linear units to the same coordinate in geodetic lambda and
            phi units in the special case where the shape of the earth is being approximated as a perfect sphere.
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
            <param name="startIndex">The zero based integer start index</param>
            <param name="numPoints">The integer count of the number of xy pairs in the lp and xy arrays</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.TransverseMercator.EllipticalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Performs the inverse transfrom from a single coordinate of linear units to the same coordinate in geodetic units
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
            <param name="startIndex">The zero based integer start index</param>
            <param name="numPoints">The integer count of the number of xy pairs in the lp and xy arrays</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GaussKruger.#ctor">
            <summary>
            Creates a new instance of GaussKruger
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.HotineObliqueMercatorAzimuthNaturalOrigin">
            <summary>
            OrthogonalMercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.HotineObliqueMercatorAzimuthNaturalOrigin.#ctor">
            <summary>
            Creates a new instance of OrthogonalMercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.HotineObliqueMercatorAzimuthNaturalOrigin.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.HotineObliqueMercatorAzimuthNaturalOrigin.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.HotineObliqueMercatorAzimuthNaturalOrigin.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.MercatorAuxiliarySphere">
            <summary>
            Mercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.MercatorAuxiliarySphere.#ctor">
            <summary>
            Creates a new instance of Mercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.MercatorAuxiliarySphere.EllipticalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.MercatorAuxiliarySphere.SphericalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.MercatorAuxiliarySphere.EllipticalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.MercatorAuxiliarySphere.SphericalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.MercatorAuxiliarySphere.Np(System.Double)">
            <summary>
            n' is a calculation based on the eccentricity
            </summary>
            <param name="phi"></param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.MercatorAuxiliarySphere.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.CrasterParabolic">
            <summary>
            CrasterParabolic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.CrasterParabolic.#ctor">
            <summary>
            Creates a new instance of CrasterParabolic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.CrasterParabolic.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.CrasterParabolic.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.CylindricalEqualArea">
            <summary>
            CylindricalEqualArea
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.CylindricalEqualArea.#ctor">
            <summary>
            Creates a new instance of CylindricalEqualArea
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.CylindricalEqualArea.EllipticalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.CylindricalEqualArea.SphericalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.CylindricalEqualArea.EllipticalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.CylindricalEqualArea.SphericalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.CylindricalEqualArea.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Eckert1">
            <summary>
            Eckert1
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert1.#ctor">
            <summary>
            Creates a new instance of Eckert1
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert1.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert1.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Eckert2">
            <summary>
            Eckert2
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert2.#ctor">
            <summary>
            Creates a new instance of Eckert2
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert2.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert2.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Eckert3">
            <summary>
            Eckert3
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert3.#ctor">
            <summary>
            Creates a new instance of Eckert3
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert3.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert3.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Eckert4">
            <summary>
            Eckert4
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert4.#ctor">
            <summary>
            Creates a new instance of Eckert4
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert4.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert4.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Eckert5">
            <summary>
            Eckert5
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert5.#ctor">
            <summary>
            Creates a new instance of Eckert5
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert5.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert5.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Eckert6">
            <summary>
            Eckert6
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Sinusoidal">
            <summary>
            Sinusoidal
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Sinusoidal.#ctor">
            <summary>
            Creates a new instance of Sinusoidal
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Sinusoidal.SphericalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Sinusoidal.SphericalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Sinusoidal.EllipticalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Sinusoidal.EllipticalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Sinusoidal.Setup">
            <summary>
            Handles the original configuration of sinusoidal transforms
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Sinusoidal.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Sinusoidal.M">
            <summary>
            Gets or sets the double M value
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Sinusoidal.N">
            <summary>
            Gets or sets the N value
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert6.#ctor">
            <summary>
            Creates a new instance of Eckert6
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Eckert6.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.EquidistantConic">
            <summary>
            EquidistantConic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EquidistantConic.#ctor">
            <summary>
            Creates a new instance of EquidistantConic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EquidistantConic.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EquidistantConic.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EquidistantConic.OnSpecial(System.Double[],DotSpatial.Projections.ProjectionInfo,DotSpatial.Projections.Transforms.Factors)">
            <summary>
            This exists in the case that we ever develop code to perform the special proj4 calculations
            </summary>
            <param name="lp"></param>
            <param name="p"></param>
            <param name="fac"></param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EquidistantConic.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.EquidistantCylindrical">
            <summary>
            EquidistantCylindrical
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EquidistantCylindrical.#ctor">
            <summary>
            Creates a new instance of EquidistantCylindrical
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EquidistantCylindrical.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EquidistantCylindrical.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.EquidistantCylindrical.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Factors">
            <summary>
            Factors
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Factors.A">
            <summary>
            max scale error
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Factors.B">
            <summary>
            min scale error
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Factors.Code">
            <summary>
            Info as to analytics
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Factors.Conv">
            <summary>
            Convergence
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Factors.H">
            <summary>
            Meridinal scale
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Factors.K">
            <summary>
            parallel scale
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Factors.Omega">
            <summary>
            Angular distortion
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Factors.S">
            <summary>
            Areal scale factor
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Factors.Thetap">
            <summary>
            theta prime
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Factors.Xl">
            <summary>
            derivatives of x for lambda
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Factors.Xp">
            <summary>
            derivatives of x for phi
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Factors.Yl">
            <summary>
            derivatives of y for lambda
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Factors.Yp">
            <summary>
            derivatives of y for phi
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Foucaut">
            <summary>
            Foucaut is a tweaked version of QuarticAuthalic that uses tan mode.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.QuarticAuthalic">
            <summary>
            QuarticAuthalic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.QuarticAuthalic.#ctor">
            <summary>
            Creates a new instance of QuarticAuthalic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.QuarticAuthalic.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.QuarticAuthalic.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.QuarticAuthalic.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.QuarticAuthalic.Setup(System.Double,System.Double,System.Boolean)">
            <summary>
            Setup
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="mode"></param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Foucaut.#ctor">
            <summary>
            Creates a new instance of Foucaut
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Foucaut.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.GallStereographic">
            <summary>
            GallStereographic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GallStereographic.#ctor">
            <summary>
            Creates a new instance of GallStereographic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GallStereographic.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GallStereographic.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Gauss">
            <summary>
            Gauss
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Gauss.#ctor(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Creates a new instance of Gauss
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Gauss.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Gauss.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.GeneralSinusoidal">
            <summary>
            GeneralSinusoidal
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GeneralSinusoidal.#ctor">
            <summary>
            Creates a new instance of GeneralSinusoidal
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GeneralSinusoidal.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.GeostationarySatellite">
            <summary>
            GeostationarySatellite
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GeostationarySatellite.#ctor">
            <summary>
            Creates a new instance of GeostationarySatellite
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GeostationarySatellite.SphericalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GeostationarySatellite.EllipticalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GeostationarySatellite.SphericalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GeostationarySatellite.EllipticalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GeostationarySatellite.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Gnomonic">
            <summary>
            Gnomonic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Gnomonic.#ctor">
            <summary>
            Creates a new instance of Gnomonic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Gnomonic.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Gnomonic.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Gnomonic.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.GoodeHomolosine">
            <summary>
            GoodeHomolosine
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GoodeHomolosine.#ctor">
            <summary>
            Creates a new instance of GoodeHomolosine
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GoodeHomolosine.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GoodeHomolosine.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.GoodeHomolosine.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.HammerAitoff">
            <summary>
            HammerAitoff
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.HammerAitoff.#ctor">
            <summary>
            Creates a new instance of HammerAitoff
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.HammerAitoff.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.HammerAitoff.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.HotineObliqueMercatorAzimuthCenter">
            <summary>
            HotineObliqueMercatorAzimuthalCenter - Used to properly direct the Swiss Oblique Mercator
            when it appears as Hotine Oblique Mercator Azimuth Center.  At current, the Azimuth
            parameter is ignored as I don't know how to send it into Proj4.
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.ObliqueMercator">
            <summary>
            OrthogonalMercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ObliqueMercator.#ctor">
            <summary>
            Creates a new instance of OrthogonalMercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ObliqueMercator.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ObliqueMercator.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ObliqueMercator.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.HotineObliqueMercatorAzimuthCenter.#ctor">
            <summary>
            Creates a new instance of HotineObliqueMercatorAzimuthalCenter
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.HotineObliqueMercatorAzimuthCenter.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.HotineObliqueMercatorAzimuthCenter.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.HotineObliqueMercatorAzimuthCenter.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Kavraisky5">
            <summary>
            Kavraisky5 is just a tweaked version of Quartic Authalic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Kavraisky5.#ctor">
            <summary>
            Creates a new instance of Kavraisky5
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Kavraisky5.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Kavraisky7">
            <summary>
            Kavraisky6
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Kavraisky7.#ctor">
            <summary>
            Creates a new instance of Kavraisky6
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Kavraisky7.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Kavraisky7.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.KnownTransform">
            <summary>
            KnownTransforms
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Aitoff">
            <summary>
            Aitoff
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Albers_Equal_Area">
            <summary>
            Albers Equal Area
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Azimuthal_Equidistant">
            <summary>
            Azimuthal Equidistant
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Bipolar_Oblique_Conformal_Conic">
            <summary>
            Bipolar Oblique Conformal Conic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Bonne">
            <summary>
            Bonne
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Cassini">
            <summary>
            Cassini
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Craster_Parabolic">
            <summary>
            Craster Parabolic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Cylindrical_Equal_Area">
            <summary>
            Cylindrical Equal Area
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Eckert_I">
            <summary>
            Eckert 1
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Eckert_II">
            <summary>
            Eckert 2
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Eckert_III">
            <summary>
            Eckert 3
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Eckert_IV">
            <summary>
            Eckert 4
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Eckert_V">
            <summary>
            Eckert 5
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Eckert_VI">
            <summary>
            Eckert 6
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Elliptical_Transform">
            <summary>
            Elliptical Transform
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Equidistant_Conic">
            <summary>
            Equidistant Conic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Equidistant_Cylindrical">
            <summary>
            Equidistant_Cylindrical
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Foucaut">
            <summary>
            Foucaut
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Gall_Stereographic">
            <summary>
            Gall Stereographic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.General_Sinusoidal">
            <summary>
            General Sinusoidal
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Geostationary_Satellite">
            <summary>
            Geostationary Satellite
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Gnomonic">
            <summary>
            Gnomonic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Goode_Homolosine">
            <summary>
            Goode Homolosine
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Hammer_Aitoff">
            <summary>
            Hammer Aitoff
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Kavraisky_V">
            <summary>
            Kavraisky 5
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Kavraisky_VII">
            <summary>
            Kavraisky 7
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Krovak">
            <summary>
            Krovak
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Lambert_Azimuthal_Equal_Area">
            <summary>
            Lambert Azimuthal Equal Area
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Lambert_Conformal_Conic">
            <summary>
            Lambert Conformal Conic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Lambert_Equal_Area_Conic">
            <summary>
            Lambert Equal Area Conic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.LongLat">
            <summary>
            Latitude / Longitude
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Loximuthal">
            <summary>
            Loximuthal
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.McBryde_Thomas_Flat_Polar_Sine">
            <summary>
            McBryde Thomas Flat Polar Sine
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Mercator">
            <summary>
            Mercator
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Miller_Cylindrical">
            <summary>
            Miller Cylindrical
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Mollweide">
            <summary>
            Mollweide
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.New_Zealand_Map_Grid">
            <summary>
            New Zealand Map Grid
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Oblique_Cylindrical_Equal_Area">
            <summary>
            Oblique Cylindrical Equal Area
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Oblique_Mercator">
            <summary>
            Oblique Mercator
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Oblique_Stereographic_Alternative">
            <summary>
            Oblique Stereographic Alternative
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Orthographic">
            <summary>
            Orthographic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Polyconic">
            <summary>
            Polyconic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Putins_P1">
            <summary>
            PutinsP1
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Quartic_Authalic">
            <summary>
            Quartic Authalic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Robinson">
            <summary>
            Robinson
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Sinusoidal">
            <summary>
            Sinusoidal
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Stereographic">
            <summary>
            Stereographic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Swiss_Oblique_Mercator">
            <summary>
            Swiss Oblique Mercator
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Transverse_Mercator">
            <summary>
            Transverse Mercator
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Two_Point_Equidistant">
            <summary>
            Two Point Equidistant
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Universal_Polar_Stereographic">
            <summary>
            Universal Polar Stereographic
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Universal_Transverse_Mercator">
            <summary>
            Universal Transverse Mercator
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Vander_Grinten_I">
            <summary>
            Vander Grinten 1
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Wagner_IV">
            <summary>
            Wagner 4
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Wagner_V">
            <summary>
            Wagner 5
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Wagner6">
            <summary>
            Wagner 6
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Winkel_I">
            <summary>
            Winkel 1
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Winkel_II">
            <summary>
            Winkel 2
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.KnownTransform.Winkel_Tripel">
            <summary>
            Winkel Tripel
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Krovak">
             <summary>
             Krovak
             NOTES: According to EPSG the full Krovak projection method should have
                      the following parameters.  Within PROJ.4 the azimuth, and pseudo
                      standard parallel are hardcoded in the algorithm and can't be
                      altered from outside.  The others all have defaults to match the
                      common usage with Krovak projection.
            
              lat_0 = latitude of centre of the projection
            
              lon_0 = longitude of centre of the projection
            
              ** = azimuth (true) of the centre line passing through the centre of the projection
            
              ** = latitude of pseudo standard parallel
            
              k  = scale factor on the pseudo standard parallel
            
              x_0 = False Easting of the centre of the projection at the apex of the cone
            
              y_0 = False Northing of the centre of the projection at the apex of the cone
            
              _czech = specifies the EAST-NORTH GIS usage where the axis are reversed:
              X [S-JTSK KROVAK EAST NORTH] = -Y [KROVAK]
              Y [S-JTSK KROVAK EAST NORTH] = -X [KROVAK]
             </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Krovak.#ctor">
            <summary>
            Creates a new instance of Krovak
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Krovak.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Krovak.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Krovak.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
            <remarks>The default value of CZECH is true: The X and Y axis are reversed and multiplied by -1 as typically used in GIS applications of Krovak</remarks>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.LambertAzimuthalEqualArea">
            <summary>
            LambertAzimuthalEqualArea
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LambertAzimuthalEqualArea.#ctor">
            <summary>
            Creates a new instance of LambertAzimuthalEqualArea
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LambertAzimuthalEqualArea.EllipticalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LambertAzimuthalEqualArea.SphericalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LambertAzimuthalEqualArea.EllipticalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LambertAzimuthalEqualArea.SphericalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LambertAzimuthalEqualArea.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.LambertConformalConic">
            <summary>
            LambertConformalConic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LambertConformalConic.#ctor">
            <summary>
            Creates a new instance of the Lambert Conformal Conic projection
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LambertConformalConic.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LambertConformalConic.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LambertConformalConic.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LambertConformalConic.OnSpecial(System.Double[],DotSpatial.Projections.ProjectionInfo,DotSpatial.Projections.Transforms.Factors)">
            <summary>
            Special factor calculations for a factors calculation
            </summary>
            <param name="lp">lambda-phi</param>
            <param name="p">The projection</param>
            <param name="fac">The Factors</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.LambertEqualAreaConic">
            <summary>
            LambertEqualAreaConic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LambertEqualAreaConic.#ctor">
            <summary>
            Creates a new instance of LambertEqualAreaConic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LambertEqualAreaConic.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.LongLat">
            <summary>
            LongLat
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LongLat.#ctor">
            <summary>
            Creates a new instance of LongLat
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LongLat.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LongLat.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.LongLat.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Loximuthal">
            <summary>
            Loximuthal
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Loximuthal.#ctor">
            <summary>
            Creates a new instance of Loximuthal
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Loximuthal.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Loximuthal.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Loximuthal.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.McBrydeThomasFlatPolarSine">
            <summary>
            McBrydeThomasFlatPolarSine is a tweaked version of Qaurtic Authalic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.McBrydeThomasFlatPolarSine.#ctor">
            <summary>
            Creates a new instance of McBrydeThomasFlatPolarSine
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.McBrydeThomasFlatPolarSine.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Mercator">
            <summary>
            Mercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Mercator.#ctor">
            <summary>
            Creates a new instance of Mercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Mercator.EllipticalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Mercator.SphericalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Mercator.EllipticalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Mercator.SphericalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Mercator.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.MillerCylindrical">
            <summary>
            MillerCylindrical
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.MillerCylindrical.#ctor">
            <summary>
            Creates a new instance of MillerCylindrical
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.MillerCylindrical.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.MillerCylindrical.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Mollweide">
            <summary>
            Mollweide also acts as the base for Wag4 and Wag5
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Mollweide.#ctor">
            <summary>
            Creates a new instance of Mollweide
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Mollweide.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Mollweide.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Mollweide.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Mollweide.Setup(System.Double)">
            <summary>
            Finalizes the setup based on the provided P paraemter
            </summary>
            <param name="p"></param>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Mollweide.Cx">
            <summary>
            Gets or sets the x coefficient
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Mollweide.Cy">
            <summary>
            Gets or sets the y coefficient value
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.Mollweide.Cp">
            <summary>
            Gets or sets the P coefficient
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.NewZealandMapGrid">
            <summary>
            NewZealandMapGrid
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.NewZealandMapGrid.#ctor">
            <summary>
            Creates a new instance of NewZealandMapGrid
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.NewZealandMapGrid.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.NewZealandMapGrid.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.NewZealandMapGrid.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.ObliqueCylindricalEqualArea">
            <summary>
            ObliqueCylindricalEqualArea
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ObliqueCylindricalEqualArea.#ctor">
            <summary>
            Creates a new instance of ObliqueCylindricalEqualArea
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ObliqueCylindricalEqualArea.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ObliqueCylindricalEqualArea.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ObliqueCylindricalEqualArea.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.ObliqueStereographicAlternative">
            <summary>
            ObliqueStereographicAlternative
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ObliqueStereographicAlternative.#ctor">
            <summary>
            Creates a new instance of ObliqueStereographicAlternative
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ObliqueStereographicAlternative.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ObliqueStereographicAlternative.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.ObliqueStereographicAlternative.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Orthographic">
            <summary>
            Orthographic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Orthographic.#ctor">
            <summary>
            Creates a new instance of Orthographic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Orthographic.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Orthographic.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Orthographic.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Polyconic">
            <summary>
            Polygconic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Polyconic.#ctor">
            <summary>
            Creates a new instance of Polygconic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Polyconic.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Polyconic.EllipticalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Polyconic.SphericalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Polyconic.EllipticalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Polyconic.SphericalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Proj">
            <summary>
            Proj  contains frequently used static helper methods for doing projection calculations
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Proj.ONE_TOL">
            <summary>
            Effectively 1 but with a tolerance of 1E-14
            </summary>
        </member>
        <member name="F:DotSpatial.Projections.Transforms.Proj.ATOL">
            <summary>
            1E-50
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Aasin(System.Double)">
            <summary>
            Tolerant Arcsin
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Aacos(System.Double)">
            <summary>
            Tolerant ArcCosine
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Asqrt(System.Double)">
            <summary>
            Tollerant Sqrt
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Aatan2(System.Double,System.Double)">
            <summary>
            Tollerant Math.Atan method.
            </summary>
            <param name="n"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Hypot(System.Double,System.Double)">
            <summary>
            Calculates the hypotenuse of a triangle: Sqrt(x*x + y*y);
            </summary>
            <param name="x">The length of one orthogonal leg of the triangle</param>
            <param name="y">The length of the other orthogonal leg of the triangle</param>
            <returns>The length of the diagonal.</returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Adjlon(System.Double)">
             <summary>
            
             </summary>
             <param name="lon"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Authset(System.Double)">
            <summary>
            Determines latitude from authalic latitude
            </summary>
            <param name="es">Epsilon squared</param>
            <returns>The array of double values for the apa parameter</returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.AuthLat(System.Double,System.Double[])">
            <summary>
            Obtains the authalic latitude
            </summary>
            <param name="beta"></param>
            <param name="apa"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Enfn(System.Double)">
            <summary>
            Obtains the EN parameters for the Meridional distance
            </summary>
            <param name="es"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Mlfn(System.Double,System.Double,System.Double,System.Double[])">
            <summary>
            Meridonal length function
            </summary>
            <param name="phi"></param>
            <param name="sphi"></param>
            <param name="cphi"></param>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.InvMlfn(System.Double,System.Double,System.Double[])">
             <summary>
            
             </summary>
             <param name="arg"></param>
             <param name="es"></param>
             <param name="en"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Qsfn(System.Double,System.Double,System.Double)">
             <summary>
            
             </summary>
             <param name="sinphi"></param>
             <param name="e"></param>
             <param name="oneEs"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Tsfn(System.Double,System.Double,System.Double)">
             <summary>
            
             </summary>
             <param name="phi"></param>
             <param name="sinphi"></param>
             <param name="e"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Msfn(System.Double,System.Double,System.Double)">
             <summary>
            
             </summary>
             <param name="sinphi"></param>
             <param name="cosphi"></param>
             <param name="es"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Phi2(System.Double,System.Double)">
             <summary>
            
             </summary>
             <param name="ts"></param>
             <param name="e"></param>
             <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Zpoly1(System.Double[],System.Double[][],System.Int32)">
            <summary>
            </summary>
            <param name="z"></param>
            <param name="c"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Proj.Zpolyd1(System.Double[],System.Double[][],System.Int32,System.Double[]@)">
            <summary>
            </summary>
            <param name="z"></param>
            <param name="c"></param>
            <param name="n"></param>
            <param name="der"></param>
            <returns></returns>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.PutinsP1">
            <summary>
            PutinsP1
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.PutinsP1.#ctor">
            <summary>
            Creates a new instance of PutinsP1
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.PutinsP1.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.PutinsP1.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Robinson">
            <summary>
            Robinson
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Robinson.#ctor">
            <summary>
            Creates a new instance of Robinson
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Robinson.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Robinson.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Stereographic">
            <summary>
            Stereographic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Stereographic.#ctor">
            <summary>
            Creates a new instance of Stereographic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Stereographic.EllipticalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Stereographic.SphericalForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Stereographic.EllipticalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Stereographic.SphericalInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Stereographic.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.StereographicNorthPole">
            <summary>
            StereographicNorthPole
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.StereographicNorthPole.#ctor">
            <summary>
            Creates a new instance of StereographicNorthPole
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.SwissObliqueMercator">
            <summary>
            SwissObliqueMercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.SwissObliqueMercator.#ctor">
            <summary>
            Creates a new instance of SwissObliqueMercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.SwissObliqueMercator.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.SwissObliqueMercator.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.SwissObliqueMercator.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.TransformManager">
            <summary>
            TransformManager
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.TransformManager.#ctor">
            <summary>
            Creates a new instance of TransformManager
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.TransformManager.GetProj4(System.String)">
            <summary>
            Given the proj4 string, returns the matching transform eg: tmerc.
            </summary>
            <param name="name">The string name</param>
            <returns>The ITransform that has the matching proj4 name</returns>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.TransformManager.GetProjection(System.String)">
            <summary>
            Given the .prj name (Esri wkt), returns the matching transform
            </summary>
            <param name="name">The string name for the trnasform eg. Transverse_Mercator</param>
            <returns>The ITransform that has the matching Esri wkt name</returns>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.TransformManager.Transforms">
            <summary>
            The entire list of transforms
            </summary>
        </member>
        <member name="P:DotSpatial.Projections.Transforms.TransformManager.DefaultTransformManager">
            <summary>
            Gets the default instance of the transform manager
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.TwoPointEquidistant">
            <summary>
            TwoPointEquidistant
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.TwoPointEquidistant.#ctor">
            <summary>
            Creates a new instance of TwoPointEquidistant
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.TwoPointEquidistant.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.TwoPointEquidistant.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.TwoPointEquidistant.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.UniversalPolarStereographic">
            <summary>
            UniversalPolarStereographic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.UniversalPolarStereographic.#ctor">
            <summary>
            Creates a new instance of UniversalPolarStereographic
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.UniversalPolarStereographic.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.UniversalTransverseMercator">
            <summary>
            UniversalTransverseMercator
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.UniversalTransverseMercator.#ctor">
            <summary>
            Creates a new instance of UniversalTransverseMercator.  The only difference
            for this one is that the proj4 name is a little different and when reading
            from proj4, we have to parse the zone and south parameters in order to
            create the transverse mercator projection.
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.UniversalTransverseMercator.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.VanderGrinten1">
            <summary>
            VanderGrinten1
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.VanderGrinten1.#ctor">
            <summary>
            Creates a new instance of VanderGrinten1
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.VanderGrinten1.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.VanderGrinten1.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Wagner4">
            <summary>
            Wagner4
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Wagner4.#ctor">
            <summary>
            Creates a new instance of Wagner4
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Wagner4.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Wagner5">
            <summary>
            Wagner5
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Wagner5.#ctor">
            <summary>
            Creates a new instance of Wagner5
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Wagner5.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Wagner6">
            <summary>
            Wagner6
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Wagner6.#ctor">
            <summary>
            Creates a new instance of Wagner6
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Wagner6.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Wagner6.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Winkel1">
            <summary>
            Winkel1
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Winkel1.#ctor">
            <summary>
            Creates a new instance of Winkel1
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Winkel1.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Winkel1.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Winkel1.OnInverse(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.Winkel2">
            <summary>
            Winkel2
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Winkel2.#ctor">
            <summary>
            Creates a new instance of Winkel2
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Winkel2.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.Winkel2.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:DotSpatial.Projections.Transforms.WinkelTripel">
            <summary>
            WinkelTripel
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.WinkelTripel.#ctor">
            <summary>
            Creates a new instance of WinkelTripel
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Transforms.WinkelTripel.OnForward(System.Double[],System.Double[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DotSpatial.Projections.Transforms.WinkelTripel.OnInit(DotSpatial.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:DotSpatial.Projections.Reflection.MemberInfoExtensions.GetFirst``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Gets the first member in the enumerable collection of property info with the specified name.
            </summary>
        </member>
        <member name="M:DotSpatial.Projections.Reflection.MemberInfoExtensions.Contains(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.String)">
            <summary>
            Determines whether there is a member with the specified name
            </summary>
        </member>
        <member name="T:DotSpatial.Projections.ProjShallowCopy">
            <summary>
            Normally, cloning an object starts with MemberwiseClone, which
            creates a shallow copy of the object.  For any members that
            derive from the Descriptor, however, any public properties
            or fields that implement ICloneable are copied (deep copy behavior).
            This is not always desirable, even if the member CAN be copied.
            This attribute causes the deep copy behavior to skip over
            properties marked with this attribute.
            </summary>
        </member>
    </members>
</doc>
