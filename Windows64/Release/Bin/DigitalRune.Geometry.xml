<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DigitalRune.Geometry</name>
    </assembly>
    <members>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.BoxBoxAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/> vs. <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes.
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Collisions.Algorithms.BoxBoxAlgorithm.MaxNumberOfContacts">
            <summary>
            The maximal number of contacts to keep for face-face collisions.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.BoxBoxAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.BoxBoxAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.BoxBoxAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain two <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/>es.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <paramref name="type"/> is set to <see cref="F:DigitalRune.Geometry.Collisions.CollisionQueryType.ClosestPoints"/>. This 
            collision algorithm cannot handle closest-point queries. Use <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.Gjk"/> instead.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.BoxBoxAlgorithm.ClipQuadrilateralAgainstRectangle(DigitalRune.Mathematics.Algebra.Vector2F,System.Collections.Generic.List{DigitalRune.Mathematics.Algebra.Vector2F})">
            <summary>
            Clips the given quadrilateral against a rectangle in 2D.
            </summary>
            <param name="rect">The half extent of the rectangle.</param>
            <param name="quad">The points of the quadrilateral.</param>
            <returns>
            A polygon which is the intersection between the rectangle and the quadrilateral.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.BoxBoxAlgorithm.ReduceContacts(System.Collections.Generic.List{DigitalRune.Mathematics.Algebra.Vector2F},System.Int32,System.Int32)">
            <summary>
            Selects the best contacts.
            </summary>
            <param name="points">The 2D points in reference-face space.</param>
            <param name="indexOfBest">The index of the point to keep.</param>
            <param name="maxNumberOfContacts">The max number of contact points to keep.</param>
            <returns>The indices of the contact points that should be kept.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.BoxSphereAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.BoxSphereAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.BoxSphereAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.BoxSphereAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CcdHelper.GetBoundingSphere(DigitalRune.Geometry.IGeometricObject,System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Gets the bounding sphere of a geometric object.
            </summary>
            <param name="geometricObject">The geometric object.</param>
            <param name="radius">The radius of the bounding sphere.</param>
            <param name="center">The center of the bounding sphere in world space.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CcdHelper.GetBoundingRadius(DigitalRune.Geometry.IGeometricObject)">
            <summary>
            Gets the radius for a bounding sphere centered at the position of the geometric object.
            </summary>
            <param name="geometricObject">The geometric object.</param>
            <returns>
            The radius of the bounding sphere if the sphere's center is identical to the origin of the
            geometric object.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CcdHelper.GetTimeOfImpactCA(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single,DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Gets the time of impact using Conservative Advancement.
            </summary>
            <param name="objectA">The object A.</param>
            <param name="targetPoseA">The target pose of A.</param>
            <param name="objectB">The object B.</param>
            <param name="targetPoseB">The target pose of B.</param>
            <param name="allowedPenetrationDepth">The allowed penetration depth.</param>
            <param name="collisionDetection">The collision detection.</param>
            <returns>
            The time of impact in the range [0, 1].
            </returns>
            <remarks>
            This algorithm does not work for concave objects.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/>, <paramref name="objectB"/> or 
            <paramref name="collisionDetection"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CcdHelper.GetTimeOfImpactLinearCA(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single,DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Gets the time of impact using Conservative Advancement (ignoring rotational movement).
            </summary>
            <param name="objectA">The object A.</param>
            <param name="targetPoseA">The target pose of A.</param>
            <param name="objectB">The object B.</param>
            <param name="targetPoseB">The target pose of B.</param>
            <param name="allowedPenetration">The allowed penetration depth.</param>
            <param name="collisionDetection">The collision detection.</param>
            <returns>
            The time of impact in the range [0, 1].
            </returns>
            <remarks>
            This algorithm does not work for concave objects.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/>, <paramref name="objectB"/> or 
            <paramref name="collisionDetection"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CcdHelper.GetTimeOfImpactLinearSweep(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <summary>
            Gets the time of impact of the linear sweeps of both objects (ignoring rotational movement).
            </summary>
            <param name="objectA">The object A.</param>
            <param name="targetPoseA">The target pose of A.</param>
            <param name="objectB">The object B.</param>
            <param name="targetPoseB">The target pose of B.</param>
            <param name="allowedPenetration">The allowed penetration.</param>
            <returns>The time of impact in the range [0, 1].</returns>
            <remarks>
            Both objects are moved from the current positions to their target positions. Angular
            movement is ignored. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> or <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="objectA"/> and <paramref name="objectB"/> are not convex shapes.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm">
            <summary>
            A collision algorithm computes contact information or closest-point information for 
            collision objects with certain shapes.
            </summary>
            <remarks>
            No collision filtering is used. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.CollisionDetection">
            <summary>
            Gets the collision detection service.
            </summary>
            <value>The collision detection service.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collisionDetection"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.GetClosestPoints(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Gets the closest points of two collision objects.
            </summary>
            <param name="objectA">The collision object A.</param>
            <param name="objectB">The collision object B.</param>
            <returns>The contact set with the closest points.</returns>
            <remarks>
            Note that it is possible that two collision objects have "no closest points", for example
            if one collision object has an <see cref="T:DigitalRune.Geometry.Shapes.EmptyShape"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Gets the contact information of two possibly touching collision objects.
            </summary>
            <param name="objectA">The collision object A.</param>
            <param name="objectB">The collision object B.</param>
            <returns>The contact set.</returns>
            <remarks>
            The returned <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> will be empty if the objects are not in contact and 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.<see cref="P:DigitalRune.Geometry.Collisions.ContactSet.HaveContact"/> will be 
            <see langword="false"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <summary>
            Gets the time of impact between two moving objects.
            </summary>
            <param name="objectA">The object A.</param>
            <param name="targetPoseA">The target pose of A.</param>
            <param name="objectB">The object B.</param>
            <param name="targetPoseB">The target pose of B.</param>
            <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
            <returns>The time of impact in the range [0, 1].</returns>
            <remarks>
            <para>
            Both objects are moved from their current pose (time = 0) to the given target pose (time =
            1). If they collide during this movement the first time of impact is returned. A time of
            impact of 1 can mean that the objects do not collide or they collide at their target
            positions.
            </para>
            <para>
            The result is undefined if the objects are already in contact at their start poses.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The base implementation already computes the time of
            impact for convex shapes. For other shapes it returns 1. Optimized versions should be
            implemented in derived classes.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> or <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.HaveContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Determines whether two collision objects are in contact.
            </summary>
            <param name="objectA">The collision object A.</param>
            <param name="objectB">The collision object B.</param>
            <returns>
            <see langword="true"/> if the objects are touching (or penetrating); otherwise 
            <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.UpdateClosestPoints(DigitalRune.Geometry.Collisions.ContactSet,System.Single)">
            <summary>
            Performs a collision query to update the closest-point information in the contact set.
            </summary>
            <param name="contactSet">The contact set.</param>
            <param name="deltaTime">
            The time step size in seconds. (The elapsed simulation time since the contact set was
            updated the last time.)
            </param>
            <remarks>
            This method updates closest-point information stored in the given contact set. This method
            is usually faster than <see cref="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.GetClosestPoints(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)"/> because the information in 
            <paramref name="contactSet"/> is reused and updated.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contactSet"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.UpdateContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single)">
            <summary>
            Performs a collision query to update the contact information in the contact set.
            </summary>
            <param name="contactSet">The contact set.</param>
            <param name="deltaTime">
            The time step size in seconds. (The elapsed simulation time since the contact set was
            updated the last time.)
            </param>
            <remarks>
            <para>
            This method updates contact information stored in the given contact set. This method is 
            usually faster than <see cref="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)"/> because the information in 
            <paramref name="contactSet"/> is reused and updated.
            </para>
            <para>
            The life time counter of persistent contacts is increased.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contactSet"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <summary>
            Computes the collision. - This method should only be used by 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> instances!
            </summary>
            <param name="contactSet">The contact set.</param>
            <param name="type">The type of collision query.</param>
            <remarks>
            <para>
            This method does the real work. It is called from the other public methods of a 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/>. Also, if one <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> uses another
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> internally, this method should be called directly instead
            of <see cref="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.UpdateClosestPoints(DigitalRune.Geometry.Collisions.ContactSet,System.Single)"/> or 
            <see cref="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.UpdateContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single)"/>.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> This is the central method which has to be implemented
            in derived classes. <paramref name="contactSet"/> is never <see langword="null"/>. This
            method has to add new contact/closest-point info with 
            <see cref="M:DigitalRune.Geometry.Collisions.ContactHelper.Merge(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.Contact,DigitalRune.Geometry.Collisions.CollisionQueryType,System.Single)"/>. It is not
            necessary to remove old contacts. At the beginning of the method 
            <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.HaveContact"/> in <paramref name="contactSet"/> indicates the result
            of the last narrow phase algorithm that was run on <paramref name="contactSet"/>. This
            method must set <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.HaveContact"/> to <see langword="false"/> if it 
            doesn't find a contact or to <see langword="true"/> if it finds a contact.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm.CheckResult(DigitalRune.Geometry.Collisions.ContactSet,System.Boolean)">
            <summary>
            Checks whether a contact query result is valid.
            </summary>
            <param name="contactSet">The contact set.</param>
            <param name="isClosestPointResult">
            <see langword="true"/> if the query was a closest-point query; otherwise, 
            <see langword="false"/>.
            </param>
            <exception cref="T:DigitalRune.Geometry.GeometryException">The contact query result is invalid.</exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.CombinedCollisionAlgorithm">
            <summary>
            This collision algorithm combines 2 other algorithms: One is used for penetrating objects, the
            other is used for closest-point queries of separated objects.
            </summary>
            <remarks>
            Some algorithms, like the GJK, do not compute valid closest points for penetrating objects.
            Other algorithms, like the MPR, cannot compute closest points for separated objects. This 
            class can combine different algorithms like GJK+MPR to get an algorithm that can handle all
            cases.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CombinedCollisionAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection,DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm,DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CombinedCollisionAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
            <param name="closestPointsAlgorithm">The closest points algorithm.</param>
            <param name="contactAlgorithm">The contact algorithm.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="closestPointsAlgorithm"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contactAlgorithm"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CombinedCollisionAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CombinedCollisionAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.CompositeShapeAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> vs. any other 
            <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes. This
            algorithm will call other algorithms to compute collision of child shapes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CompositeShapeAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CompositeShapeAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CompositeShapeAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="contactSet"/> contains a <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> with a non-uniform
            scaling. One of its children has a local rotation. Computing collisions for composite shapes
            with non-uniform scaling and rotated children is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.CompositeShapeAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            Neither <paramref name="objectA"/> nor <paramref name="objectB"/> is a 
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> or <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RayCompositeAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes.
            This algorithm will call other algorithms to compute collision of child shapes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayCompositeAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RayCompositeAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayCompositeAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayCompositeAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.Gjk">
            <summary>
            The Gilbert-Johnson-Keerthi (GJK) algorithm for computing closest points of convex objects.
            </summary>
            <remarks>
            The GJK algorithm cannot compute contacts of penetrating objects. Both shapes must implement a 
            support mapping. That means this algorithm can only be called for shapes derived from 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>s. It will throw an exception if it is called for other objects, for 
            example a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.Gjk.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.Gjk"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.Gjk.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain two <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>s.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <paramref name="type"/> is set to <see cref="F:DigitalRune.Geometry.Collisions.CollisionQueryType.Contacts"/>. This collision 
            algorithm cannot handle contact queries. Use <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.MinkowskiPortalRefinement"/> 
            instead.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver">
            <summary>
            Manages a simplex of a CSO (configuration space obstacle, Minkowski difference A-B).
            </summary>
            <remarks>
            This is a tool for GJK-like algorithms. Vertices can be added. The 
            <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver"/> removes unneeded vertices and computes points closest to the 
            origin. See <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.Gjk"/> for a usage example.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.ClosestPointInfo">
            <summary>
            A structure that contains info used in an Update() step.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.ClosestPoint">
            <summary>
            Gets the point in the simplex which is closest to the origin.
            </summary>
            <value>The point closest to the origin.</value>
            <remarks>
            <para>
            <see cref="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.Update"/> must be called before this property is valid. This point is equal to
            the separating axis vector v or the difference of the currently known closest points of A
            and B (see <see cref="P:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.ClosestPointOnA"/> and <see cref="P:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.ClosestPointOnB"/>).
            </para>
            <para>
            If the simplex is full (containing the origin) or if the simplex is degenerated, this 
            property contains the closest point info of the last step and not for the new simplex.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.ClosestPointOnA">
            <summary>
            Gets the point on A which is closest to B (in world space coordinates).
            </summary>
            <value>The closest points on A.</value>
            <remarks>
            <para>
            <see cref="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.Update"/> must be called before this property is valid.
            </para>
            <para>
            If the simplex is full (containing the origin) or if the simplex is degenerated, this 
            property contains the closest point info of the last step and not for the new simplex.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.ClosestPointOnB">
            <summary>
            Gets the point on B which is closest to A (in world space coordinates).
            </summary>
            <value>The closest points on B.</value>
            <remarks>
            <para>
            <see cref="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.Update"/> must be called before this property is valid.
            </para>
            <para>
            If the simplex is full (containing the origin) or if the simplex is degenerated, this 
            property contains the closest point info of the last step and not for the new simplex.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.IsEmpty">
            <summary>
            Gets a value indicating whether this the simplex is empty.
            </summary>
            <value>
            <see langword="true"/> if the simplex is empty; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The simplex is empty if <see cref="P:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.NumberOfVertices"/> is 0.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.IsFull">
            <summary>
            Gets a value indicating whether the simplex is full.
            </summary>
            <value>
            <see langword="true"/> if the simplex is full; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The simplex is full if <see cref="P:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.NumberOfVertices"/> is 4. If the simplex is full and 
            <see cref="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.Update"/> does not reduce the <see cref="P:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.NumberOfVertices"/> then the origin must
            be inside the simplex.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.IsValid">
            <summary>
            Gets or sets a value indicating whether the cached closest-point info is valid for the new
            simplex.
            </summary>
            <value>
            <see langword="true"/> if the closest-point info is valid; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            If this value is <see langword="false"/>, the closest point properties contain the closest
            point info of the last valid simplex.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.MaxVertexDistanceSquared">
            <summary>
            Gets the maximum squared distance to the origin of all simplex vertices.
            </summary>
            <value>The maximum squared vertex distance.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.NumberOfVertices">
            <summary>
            Gets the number of vertices in the simplex.
            </summary>
            <value>The number of vertices in the simplex.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver"/> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.Recycle">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver"/> class.
            </summary>
            <remarks>
            <para>
            This method resets this instance and returns it to a resource pool if resource pooling is 
            enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.Add(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Adds a new simplex point in the Minkowski difference A-B.
            </summary>
            <param name="w">The point in the Minkowski difference A-B.</param>
            <param name="pointA">The point in object A.</param>
            <param name="pointB">The point in object B.</param>
            <remarks>
            <paramref name="w"/> = <paramref name="pointA"/> - <paramref name="pointB"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.Backup">
            <summary>
            Backup closest point info to previous state.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.Clear">
            <summary> 
            Resets this instance. All cached data is deleted. 
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.Contains(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Determines whether the simplex contains the given point.
            </summary>
            <param name="w">The point which is tested.</param>
            <returns>
            <see langword="true"/> if <paramref name="w"/> was already added to the simplex; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            Only the vertices of the simplex are tested and the last added vertex <paramref name="w"/> 
            is checked.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.Reduce(DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.ClosestPointInfo@)">
            <summary>
            Removes unused entries from the arrays.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.RemoveAt(System.Int32)">
            <summary>
            Removes the entry at the given index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.Update">
            <summary>
            Updates the simplex data.
            </summary>
            <remarks>
            This method tries to remove unneeded vertices from the simplex. The closest point data
            is updated. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.GetClosestPointInTriangle(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Collisions.Algorithms.GjkSimplexSolver.ClosestPointInfo@)">
            <summary>
            Computes the point in the triangle which is closest to <paramref name="point"/>
            </summary>
            <param name="point">The point.</param>
            <param name="vertex0">The first vertex of the triangle.</param>
            <param name="vertex1">The second vertex of the triangle.</param>
            <param name="vertex2">The third vertex of the triangle.</param>
            <param name="closestPointInfo">The closest-point information that will be set.</param>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/> vs. any other 
            <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>.
            </summary>
            <remarks>
            <para>
            This algorithm will fail if it is called for collision objects with other shapes. This
            algorithm will call other algorithms to compute collision with parts of the height field.
            </para>
            <para>
            The height field is treated as a collection of triangles. The algorithm gives the triangle a
            "thickness" so that collisions are detected, even if the colliding object is under the height
            field surface. This avoids tunneling problems.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm.WeldingLimit">
            <summary>
            This value determines when contact welding should be performed.
            </summary>
            <remarks>
            <para>
            To avoid bad contact normals, a process called "welding" is performed when the contact
            normal deviates from the triangle normals. When the dot product of a contact normal and the
            related triangle normal is less than <see cref="F:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm.WeldingLimit"/>, the welding process checks
            and improves the contact.
            </para>
            <para>
            The default value is 0.999.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="contactSet"/> contains a <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/> with a negative scaling.
            Computing collisions for height fields with a negative scaling is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm.GuessClosestPair(DigitalRune.Geometry.Collisions.ContactSet,System.Boolean,System.Boolean@)">
            <summary>
            Guesses the closest pair.
            </summary>
            <param name="contactSet">The contact set.</param>
            <param name="swapped">
            Object A in <paramref name="contactSet"/> should be the height field. This parameter 
            indicates whether object A and object B in the contact set are swapped.
            </param>
            <param name="isOverHole">
            <see langword="true"/> if the guessed contact is over a hole and probably shouldn't be used.
            </param>
            <returns>Guess for closest pair.</returns>
            <remarks>
            For general shapes: Inner point of B to height field point "under" inner point of B. 
            For convex shapes: Support point of B in the "down" direction to height field point "under" 
            this support point.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.HeightFieldAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            Neither <paramref name="objectA"/> nor <paramref name="objectB"/> contains a 
            <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> or <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="objectA"/> or <paramref name="objectB"/> contains a 
            <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/> with a negative scaling. Computing collisions for height fields 
            with a negative scaling is not supported.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RayHeightFieldAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayHeightFieldAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RayHeightFieldAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayHeightFieldAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayHeightFieldAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.InfiniteShapeAlgorithm">
            <summary>
            A dummy collision algorithm which always reports a collision but no contact points
            or closest-points. This is the opposite of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.NoCollisionAlgorithm"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.InfiniteShapeAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.InfiniteShapeAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.InfiniteShapeAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.InfiniteShapeAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.LineAlgorithm">
            <summary>
            Computes collision queries between <see cref="T:DigitalRune.Geometry.Shapes.LineShape"/>s and other primitives.
            </summary>
            <remarks>
            This class implements a <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> for lines against other objects - not
            for line segments against other objects. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.LineAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.LineAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.LineAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.Line"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.LineAlgorithm.ComputeLineVsLine(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <summary>
            Computes the collision between line vs. line.
            </summary>
            <param name="contactSet">The contact set.</param>
            <param name="type">The type of collision query.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.LineAlgorithm.ComputeLineVsOther(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType,System.Boolean)">
            <summary>
            Computes the collision between line vs. other shape.
            </summary>
            <param name="contactSet">The contact set.</param>
            <param name="type">The type of collision query.</param>
            <param name="objectAIsLine">
            <see langword="true"/> if object A in the contact set is the line; otherwise 
            <see langword="false"/> if object B is the line.
            </param>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.MinkowskiPortalRefinement">
            <summary>
            The Minkowski Portal Refinement (MPR) algorithm for computing contacts between convex objects.
            </summary>
            <remarks>
            <para>
            This algorithm is designed only for boolean or contact queries. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.MinkowskiPortalRefinement.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.MinkowskiPortalRefinement"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.MinkowskiPortalRefinement.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain two <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>s.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <paramref name="type"/> is set to <see cref="F:DigitalRune.Geometry.Collisions.CollisionQueryType.ClosestPoints"/>. This 
            collision algorithm cannot handle closest-point queries. Use <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.Gjk"/> instead.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Geometry.Collisions.Algorithms"/> namespace provides collision
            detection algorithms.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.NoCollisionAlgorithm">
            <summary>
            A dummy collision algorithm which always reports NO collision and NO closest points.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.NoCollisionAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.NoCollisionAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.NoCollisionAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.NoCollisionAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneBoxAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/>s.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneBoxAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneBoxAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneBoxAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneBoxAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneConvexAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>s.
            </summary>
            <remarks>
            <para>
            On of the shapes must be a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/>, the other shape must be a convex that
            provides support mappings. For example, plane vs. plane, or plane vs. line will not work.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneConvexAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneConvexAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneConvexAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneConvexAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneRayAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneRayAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneRayAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneRayAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneSphereAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneSphereAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.PlaneSphereAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneSphereAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> and 
            <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.PlaneSphereAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RayBoxAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayBoxAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RayBoxAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayBoxAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RayConvexAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayConvexAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RayConvexAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayConvexAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RaySphereAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RaySphereAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RaySphereAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RaySphereAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> and a 
            <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.SphereSphereAlgorithm">
            <summary>
            Computes contact or closest-point information for two <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/>s.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.SphereSphereAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.SphereSphereAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.SphereSphereAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain two <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/> shapes.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.TransformedShapeAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape"/> vs. any other
            <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes. This
            algorithm will call other algorithms to compute collision of the child of the
            <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TransformedShapeAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.TransformedShapeAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TransformedShapeAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="contactSet"/> contains a <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape"/> with a local 
            rotation and a non-uniform scaling. Computing collisions for transformed shapes with local 
            rotations and non-uniform scaling is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TransformedShapeAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            Neither <paramref name="objectA"/> nor <paramref name="objectB"/> is a 
            <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape"/>.
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> or <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleMeshAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> vs. 
            <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleMeshAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleMeshAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleMeshAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.RayTriangleMeshAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.TriangleMeshAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/> vs. any 
            other <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes. This
            algorithm will call other algorithms to compute collision of triangles.
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Collisions.Algorithms.TriangleMeshAlgorithm.WeldingLimit">
            <summary>
            This value determines when contact welding should be performed.
            </summary>
            <remarks>
            <para>
            To avoid bad contact normals, a process called "welding" is performed when the contact
            normal deviates from the triangle normals. When the dot product of a contact normal and the
            related triangle normal is less than <see cref="F:DigitalRune.Geometry.Collisions.Algorithms.TriangleMeshAlgorithm.WeldingLimit"/>, the welding process checks
            and improves the contact.
            </para>
            <para>
            The default value is 0.99.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TriangleMeshAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.TriangleMeshAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TriangleMeshAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain a <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TriangleMeshAlgorithm.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> or <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Neither <paramref name="objectA"/> nor <paramref name="objectB"/> is a 
            <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Algorithms.TriangleTriangleAlgorithm">
            <summary>
            Computes contact or closest-point information for <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape"/> vs.
            <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape"/>.
            </summary>
            <remarks>
            This algorithm will fail if it is called for collision objects with other shapes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TriangleTriangleAlgorithm.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.TriangleTriangleAlgorithm"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Algorithms.TriangleTriangleAlgorithm.ComputeCollision(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">
            <paramref name="contactSet"/> does not contain two <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape"/>s.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <paramref name="type"/> is set to <see cref="F:DigitalRune.Geometry.Collisions.CollisionQueryType.ClosestPoints"/>. This
            collision algorithm cannot handle closest-point queries. Use <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.Gjk"/> instead.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix">
            <summary>
            A matrix which assigns a <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> to each pair of <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> 
            types.
            </summary>
            <remarks>
            <para>
            This matrix is symmetric in the sense that the algorithm for Box vs. Sphere is the same as for
            Box vs. Sphere. If the algorithm Box vs. Sphere is set, then the same algorithm will be used
            for Sphere vs. Box. Algorithms are defined per class type pair not per class instance pair.
            </para>
            <para>
            If a shape type is not registered, the base class of the shape type is checked. Example: If 
            <see cref="T:DigitalRune.Geometry.Shapes.PerspectiveViewVolume"/> is not tested, the base classes <see cref="T:DigitalRune.Geometry.Shapes.ViewVolume"/>
            and <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/> will be checked. If an algorithm is registered for a base class,
            then this algorithm is used.
            </para>
            <para>
            An algorithm can be set to <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.NoCollisionAlgorithm"/> to disable collisions between
            two shape types.
            </para>
            <para>
            The matrix is automatically initialized with the default collision algorithms.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix"/> class.
            </summary>
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix"/> class.
            </summary>
            <param name="collisionDetection">The collision detection service.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.#ctor(DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix" /> class.
            </summary>
            <param name="matrix">The <see cref="T:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix" /> from which the settings are copied.</param>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.Item(DigitalRune.Geometry.Collisions.ContactSet)">
            <overloads>
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> for a pair of objects.
            </summary>
            </overloads>
            
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> for the pair of collision objects.
            </summary>
            <param name="pair">A contact set containing a pair of collision objects.</param>
            <value>The collision algorithm.</value>
            <remarks>
            Collision algorithms can be defined per pair of shape classes (not per pair of shape 
            instances). If an algorithm is set for [A, B], the same algorithm is automatically set for 
            [B, A].
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pair"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> is registered for the given shape pair.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.Item(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> for the specified collision objects.
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <value>The collision algorithm.</value>
            <remarks>
            Collision algorithms can be defined per pair of shape classes (not per pair of shape 
            instances). If an algorithm is set for [A, B], the same algorithm is automatically set for 
            [B, A].
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> is registered for the given shape pair.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.Item(DigitalRune.Geometry.IGeometricObject,DigitalRune.Geometry.IGeometricObject)">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> for the specified geometric objects.
            </summary>
            <param name="geometricObjectA">The first geometric object.</param>
            <param name="geometricObjectB">The second geometric object.</param>
            <value>The collision algorithm.</value>
            <remarks>
            Collision algorithms can be defined per pair of shape classes (not per pair of shape 
            instances). If an algorithm is set for [A, B], the same algorithm is automatically set for 
            [B, A].
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometricObjectA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometricObjectB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> is registered for the given shape pair.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.Item(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Geometry.Shapes.Shape)">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> for the specified shape types.
            </summary>
            <param name="shapeA">The first shape.</param>
            <param name="shapeB">The second shape.</param>
            <value>The collision algorithm.</value>
            <remarks>
            Collision algorithms can be defined per pair of shape classes (not per pair of shape 
            instances). If an algorithm is set for [A, B], the same algorithm is automatically set for 
            [B, A].
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shapeA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shapeB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> is registered for the given shape pair.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.Item(System.Type,System.Type)">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> for the specified
            shape types.
            </summary>
            <param name="typeA">The first shape type.</param>
            <param name="typeB">The second shape type.</param>
            <value>The collision algorithm.</value>
            <remarks>
            Collision algorithms can be defined per pair of shape types (not per pair of shape 
            instances). If an algorithm is set for [A, B], the same algorithm is automatically set for 
            [B, A].
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="typeA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="typeB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/> is registered for the given shape pair.
            </exception>
            <exception cref="T:System.ArgumentException">The specified type does not inherit from Shape.</exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionAlgorithmMatrix.Optimize">
            <summary>
            Optimizes this instance using collected usage information.
            </summary>
            <remarks>
            <para>
            When the algorithm matrix is used, information about its usage is collected. 
            When this method is called, the internal structure is optimized. 
            </para>
            <para>
            This method is not thread-safe.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.CollisionDetection">
            <summary>
            Provides methods and settings for collision detection.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.AlgorithmMatrix">
            <summary>
            Gets the collision algorithm matrix.
            </summary>
            <value>The algorithm matrix.</value>
            <remarks>
            Depending on the <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> of a <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> different algorithms
            have to be used. This matrix determines which algorithms should be used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.ContactPositionTolerance">
            <summary>
            Gets or sets the contact position tolerance.
            </summary>
            <value>The contact position tolerance. The default value is 0.01.</value>
            <remarks>
            This constant is required for contact persistence. When touching or penetrating objects
            move, existing contacts are updated. If the contact position moves less than this value, the
            contact lives on. If the contact position change is larger, the contact is removed.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.ContinuousCollisionDetectionMode">
            <summary>
            Gets or sets the mode of the continuous collision detection.
            </summary>
            <value>
            The mode of the continuous collision detection. The default value is 
            <see cref="F:DigitalRune.Geometry.Collisions.ContinuousCollisionDetectionMode.Linear"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.Epsilon">
            <summary>
            Gets or sets the collision epsilon (numerical tolerance value).
            </summary>
            <value>
            The collision epsilon (numerical tolerance value). The default value is 0.001.
            </value>
            <remarks>
            Some collision algorithms are iterative and end when the error is less than this value.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.CollisionFilter">
            <summary>
            Gets or sets the collision filter for contact queries.
            </summary>
            <value>
            The collision filter (can be <see langword="null"/> to enable all collisions and disable 
            filtering). The default value is <see langword="null"/>.
            </value>
            <remarks>
            <para>
            This filter can be used to disable collision detection between selected collision objects.
            This filter is ignored in closest-point queries (see <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.GetClosestPoints(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)"/> and
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateClosestPoints(DigitalRune.Geometry.Collisions.ContactSet,System.Single)"/>). It is used for <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.HaveAabbContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)"/>,
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.HaveContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)"/>, <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)"/> and <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single)"/>.
            </para>
            <para>
            Per default, this property is <see langword="null"/> and all collisions are enabled. If 
            collision filtering is needed, <see cref="P:DigitalRune.Geometry.Collisions.CollisionDetection.CollisionFilter"/> or a custom implementation of 
            <see cref="T:DigitalRune.Geometry.Partitioning.IPairFilter`1"/> can be used.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.ContactFilter">
            <summary>
            Gets or sets the contact filter.
            </summary>
            <value>
            The contact filter. Can be <see langword="null"/> to disable contact filtering. The default
            filter is a <see cref="T:DigitalRune.Geometry.Collisions.ContactReducer"/>.
            </value>
            <remarks>
            Contact filters are called in the narrow phase (in <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/>s) to
            post-process the found contacts. Example usages of a contact filter:
            <list type="bullet">
            <item>
            <description>
            Remove redundant contacts. Some applications, like rigid body physics, needs only a minimal
            set of contacts, e.g. only 4 contacts per <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </description>
            </item>
            <item>
            <description>
            Remove "bad" contacts, for example contacts where the normal direction points into an
            undesired direction.
            </description>
            </item>
            <item>
            <description>
            Merge contacts. For some applications it is useful to keep only one contact which is the
            average of all other contacts.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDetection.FullContactSetPerFrame">
            <summary>
            Gets or sets a value indicating whether the full contact set should be found per frame.
            </summary>
            <value>
            <see langword="true"/> if the full contact set should be found per frame; otherwise, 
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
            Some <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/>s compute only 1 new <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> when they
            are executed. More contacts are added in upcoming collision tests. If 
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionDetection.FullContactSetPerFrame"/> is set to <see langword="true"/>, some algorithms will
            perform enhanced tests that find more than 1 contacts with each call.
            </para>
            </remarks>
        </member>
        <member name="E:DigitalRune.Geometry.Collisions.CollisionDetection.CollisionFilterChanged">
            <summary>
            Occurs when the <see cref="P:DigitalRune.Geometry.Collisions.CollisionDetection.CollisionFilter"/> changed. (This event is implemented as a
            <i>weak event</i>.)
            </summary>
            <remarks>
            This event is triggered when the <see cref="P:DigitalRune.Geometry.Collisions.CollisionDetection.CollisionFilter"/> property was changed or when
            the current <see cref="P:DigitalRune.Geometry.Collisions.CollisionDetection.CollisionFilter"/> triggered a Changed event.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionDetection"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.HaveAabbContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Returns <see langword="true"/> if the axis-aligned bounding boxes (AABBs) of two
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s are in contact.
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <returns>
            <see langword="true"/> if the objects' AABBs are touching or intersecting; otherwise
            <see langword="false"/>.
            </returns>
            <remarks>
            Only the (automatic computed) axis-aligned bounding boxes are tested - not the exact
            geometry of the objects. For an exact test, call <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.HaveContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.HaveContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Returns <see langword="true"/> if two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s are in contact.
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <returns>
            <see langword="true"/> if the object are touching or intersecting; otherwise 
            <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.GetClosestPoints(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Computes the closest points between two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s.
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <returns>
            The <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> with the closest-point information. The 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> will have exactly 1 <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> (describing the
            closest-point pair).
            </returns>
            <remarks>
            <para>
            Collision filtering (see <see cref="P:DigitalRune.Geometry.Collisions.CollisionDetection.CollisionFilter"/>) is NOT applied.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Computes the contacts between two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s.
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <returns>
            A <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> describing the contact information if <paramref name="objectA"/>
            and <paramref name="objectB"/> are intersecting; otherwise, <see langword="null"/> if the
            objects are separated.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.GetTimeOfImpact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Pose,System.Single)">
            <summary>
            Gets the time of impact between two moving objects.
            </summary>
            <param name="objectA">The object A.</param>
            <param name="targetPoseA">The target pose of A.</param>
            <param name="objectB">The object B.</param>
            <param name="targetPoseB">The target pose of B.</param>
            <param name="allowedPenetration">
            The allowed penetration. A positive allowed penetration value makes sure that the objects 
            have a measurable contact at the time of impact.
            </param>
            <returns>The time of impact in the range [0, 1].</returns>
            <remarks>
            <para>
            Both objects are moved from their current pose (time = 0) to the given target pose (time =
            1). If they collide during this movement the first time of impact is returned. A time of
            impact of 1 can mean that the objects do not collide or they collide at their target
            positions.
            </para>
            <para>
            The result is undefined if the objects are already in contact at their start poses.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> or <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateClosestPoints(DigitalRune.Geometry.Collisions.ContactSet,System.Single)">
            <summary>
            Updates the closest-point information in the given contact set.
            </summary>
            <param name="contactSet">
            The contact set containing the last known closest-point information.
            </param>
            <param name="deltaTime">
            The time step size in seconds. (The elapsed simulation time since 
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateClosestPoints(DigitalRune.Geometry.Collisions.ContactSet,System.Single)"/> or <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single)"/> was last called for this
            contact set.)
            </param>
            <remarks>
            <para>
            If two objects move, the closest-point information will usually change and has to be
            updated. Using the contact set containing the last known closest points, this method can
            compute the new closest points faster than <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.GetClosestPoints(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)"/> if the poses of
            the objects haven't changed drastically.
            </para>
            <para>
            Collision filtering (see <see cref="P:DigitalRune.Geometry.Collisions.CollisionDetection.CollisionFilter"/>) is NOT applied.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contactSet"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single)">
            <summary>
            Updates the contact information in the given contact set.
            </summary>
            <param name="contactSet">The contact set containing the last known contacts.</param>
            <param name="deltaTime">
            The time step size in seconds. (The elapsed simulation time since 
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateClosestPoints(DigitalRune.Geometry.Collisions.ContactSet,System.Single)"/> or <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single)"/> was last called for this
            contact set.)
            </param>
            <remarks>
            If two objects move, the contact information will usually change and has to be updated.
            Using the contact set containing the last known contacts, this method can compute the new
            contacts faster than <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)"/> if the poses of the objects haven't changed
            drastically.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contactSet"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetection.OnCollisionFilterChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Geometry.Collisions.CollisionDetection.CollisionFilterChanged"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.OnCollisionFilterChanged(System.Object,System.EventArgs)"/>
            in a derived class, be sure to call the base class's <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.OnCollisionFilterChanged(System.Object,System.EventArgs)"/> 
            method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase">
            <summary>
            A collision detection broad phase method which computes candidates for narrow phase
            collision detection and filters out objects which cannot collide.
            </summary>
            <remarks>
            <para>
            Collision detection with a <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/> works in two phases: 
            <list type="bullet">
            <item>
            <description>
            In the broad phase object pairs which cannot collide are sorted out. Object pairs which can 
            collide are stored in a list of <see cref="P:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase.CandidatePairs"/>.
            </description>
            </item>
            <item>
            <description>
            In the narrow phase the collision info for the candidate pairs is computed.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase.CandidatePairs">
            <summary>
            Gets the candidate pairs.
            </summary>
            <value>The candidate pairs.</value>
            <remarks>
            This collection contains all pairs which may collide and should be checked in the collision
            detection narrow phase. Do not keep a reference to this object, it may change!
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase.SpatialPartition">
            <summary>
            Gets or sets the spatial partition that does the broad phase work.
            </summary>
            <value>The spatial partition.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase.#ctor(DigitalRune.Geometry.Collisions.CollisionDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase.NewFrame">
            <summary>
            Needs to be called before <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase.Update"/> at the start of a new frame.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase.Update">
            <summary>
            Updates the candidate pairs.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase.Update(DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Updates the candidate pairs for a single collision object.
            </summary>
            <param name="collisionObject">The collision object.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase.Synchronize">
            <summary>
            Synchronizes the contact set collections with self-overlaps in the spatial partition.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase.DigitalRune#Geometry#Partitioning#IBroadPhase{DigitalRune#Geometry#Collisions#CollisionObject}#Clear">
            <summary>
            Called when all self-overlaps of the spatial partition were removed.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase.DigitalRune#Geometry#Partitioning#IBroadPhase{DigitalRune#Geometry#Collisions#CollisionObject}#Add(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject})">
            <summary>
            Called when the spatial partition detected a new overlap.
            </summary>
            <param name="overlap">The overlapping pair of collision objects.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase.DigitalRune#Geometry#Partitioning#IBroadPhase{DigitalRune#Geometry#Collisions#CollisionObject}#Remove(DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Called when the spatial partition detected that a collision object was removed.
            </summary>
            <param name="collisionObject">The collision objects to remove.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDetectionBroadPhase.DigitalRune#Geometry#Partitioning#IBroadPhase{DigitalRune#Geometry#Collisions#CollisionObject}#Remove(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject})">
            <summary>
            Called when the spatial partition detected that an old overlap was removed.
            </summary>
            <param name="overlap">The overlapping pair of collision objects.</param>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.CollisionDomain">
            <summary>
            A collision domain that manages collision objects.
            </summary>
            <remarks>
            <para>
            The <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.CollisionDetection"/> can be used for ad hoc collision queries between any two
            objects. The <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/> is designed to manage multiple collision objects at
            once and allows faster contact queries. 
            </para>
            <para>
            The method <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)"/> must be called in each frame (time step) to update the 
            collision domain. <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)"/> computes all collisions between all objects 
            inside the domain. The resulting contacts are stored in <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.ContactSets"/>. The 
            collision domain reuses collision data from the last frame. Additionally, if the property
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.EnableMultithreading"/> is set, the workload is distributed across multiple CPU 
            cores. Therefore the collision computation is much faster in comparison to ad hoc queries (as 
            in <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.CollisionDetection"/>).
            </para>
            <para>
            A <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/> can only compute real contacts (geometric objects are touching
            or intersecting), but it does not calculate closest-point queries for separated objects. Use 
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.CollisionDetection"/> to calculate the closest-point queries.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDomain.CollisionDetection">
            <summary>
            Gets the collision detection service.
            </summary>
            <value>The collision detection service.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDomain.CollisionObjects">
            <summary>
            Gets a collection of collision objects that are managed in this collision domain.
            </summary>
            <value>The collision objects of the collision domain.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDomain.EnableMultithreading">
            <summary>
            Gets or sets a value indicating whether multithreading is enabled.
            </summary>
            <value>
            <see langword="true"/> if multithreading is enabled; otherwise, <see langword="false"/>. The
            default value is <see langword="true"/> if the current system has more than one CPU cores.
            </value>
            <remarks>
            <para>
            When multithreading is enabled the collision domain will distribute the workload across
            multiple processors (CPU cores) to improve the performance. 
            </para>
            <para>
            Multithreading adds an additional overhead, therefore it should only be enabled if the 
            current system has more than one CPU core and if the other cores are not fully utilized by
            the application. Multithreading should be disabled if the system has only one CPU core or
            if all other CPU cores are busy. In some cases it might be necessary to run a benchmark of
            the application and compare the performance with and without multithreading to decide
            whether multithreading should be enabled or not.
            </para>
            <para>
            The collision domain internally uses the class <see cref="T:DigitalRune.Threading.Parallel"/> for parallelization.
            <see cref="T:DigitalRune.Threading.Parallel"/> is a static class that defines how many worker threads are created, 
            how the workload is distributed among the worker threads and more. (See 
            <see cref="T:DigitalRune.Threading.Parallel"/> to find out more on how to configure parallelization.)
            </para>
            </remarks>
            <seealso cref="T:DigitalRune.Threading.Parallel"/>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDomain.BroadPhase">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/> that is used for the broad phase of
            the collision detection.
            </summary>
            <value>
            The broad phase spatial partitioning method. The default value is an instance of 
            <see cref="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1"/>.
            </value>
            <remarks>
            <para>
            Collision detection with a <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/> works in two phases: 
            <list type="bullet">
            <item>
            <description>
            In the broad phase object pairs which cannot collide are sorted out using a spatial
            partitioning method.
            </description>
            </item>
            <item>
            <description>
            In the narrow phase the collision info (contact positions, normal vectors, etc.) is
            computed.
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDomain.ContactSets">
            <summary>
            Gets a collection with all contacts found in the collision domain.
            </summary>
            <value>The collection of all contacts found in the collision domain.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionDomain.NumberOfBroadPhaseOverlaps">
            <summary>
            Gets the number of AABB overlaps in the broad phase.
            </summary>
            <value>The number of AABB overlaps in the broad phase.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.#ctor(DigitalRune.Geometry.Collisions.CollisionDetection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/> class.
            </summary>
            <param name="collisionDetection">
            The collision detection instance that defines the settings (tolerance values,
            collision algorithm matrix, etc.) that this collision domain should use.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.AreCollisionObjectsModified(DigitalRune.Geometry.Collisions.ContactSet)">
            <summary>
            Determines whether the pose or shape of the involved collision objects were modified.
            </summary>
            <param name="pair">The pair of collision objects.</param>
            <returns>
            <see langword="true"/> if the pose or shape of the involved collision objects were modified; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.OnCollisionFilterChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the collision filter of the collision detection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.OnCollisionObjectsChanged(System.Object,DigitalRune.Collections.CollectionChangedEventArgs{DigitalRune.Geometry.Collisions.CollisionObject})">
            <summary>
            Called when collision objects were added or removed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1"/> instance containing the event data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionObject.GeometricObject"/> of a newly added <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> 
            is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.CanCollide(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Performs collision filtering and determines whether the given collision objects can collide.
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <returns>
            <see langword="true"/> if the collision objects can collide; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.CanCollide(DigitalRune.Geometry.Collisions.ContactSet)">
            <summary>
            Performs collision filtering and determines whether the collision objects in the given
            contact set can collide.
            </summary>
            <param name="contactSet">The contact set.</param>
            <returns>
            <see langword="true"/> if the objects in the contact set can collide; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            Similar to <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.CanCollide(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)"/>, but the filter result 
            is cached in the contact set (see <see cref="F:DigitalRune.Geometry.Collisions.ContactSet.CanCollide"/> and reused.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject)">
            <overloads>
            <summary>
            Gets contact information from the collision domain.
            </summary>
            </overloads>
            
            <summary>
            Gets all contacts of the given <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>.
            </summary>
            <param name="collisionObject">The collision object.</param>
            <returns>
            All <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>s where <paramref name="collisionObject"/> is involved.
            </returns>
            <remarks>
            <para>
            Each returned <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> contains a pair of collision objects  (
            <paramref name="collisionObject"/> and another object) that describes the contact between 
            the objects. The collision objects in the returned <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> can be swapped! 
            See <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> for more information on <i>swapped contact sets</i>.
            </para>
            <para>
            If <paramref name="collisionObject"/> is part of this <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>,
            then this method returns the currently cached contacts sets (which are stored in
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.ContactSets"/>). The contact sets are only updated, when
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.TimeSpan)"/> is called. If the collision object has moved since the
            collision domain was updated last, the contact information will not be up-to-date. In this
            case you need to call <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.TimeSpan)"/> again before calling
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject)"/> to get
            up-to-date results.
            </para>
            <para>
            If <paramref name="collisionObject"/> is not part of this <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>,
            then this method automatically calculates the new contact information.
            </para>
            <para>
            If <paramref name="collisionObject"/> is part of this <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>, then
            the returned contact sets are managed by the domain. You must not modify or recycle the
            contact sets! However, if <paramref name="collisionObject"/> is not part of this
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>, the returned contact sets are not managed by the domain.
            The contact sets can be modified. When they are no longer needed, they should be recycled to
            avoid unnecessary memory allocations. For example:
            </para>
            <code lang="csharp" title="Recycling contact sets">
            <![CDATA[
            foreach (ContactSet contactSet in myCollisionDomain.GetContacts(myCollisionObject))
            {
              // Check contact set.
              ...
              
              Debug.Assert(myCollisionObject.Domain != myCollisionDomain);
              foreach(var contact in contactSet)
                contact.Recycle();
              contactSet.Recycle();
            }
            ]]>
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collisionObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Gets the contacts for the given <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> pair.
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <returns>
            A <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> describing the contact information if <paramref name="objectA"/>
            and <paramref name="objectB"/> are intersecting; otherwise, <see langword="null"/> if the
            objects are separated.
            </returns>
            <remarks>
            <para>
            If both collision objects are part of this <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>,
            then this method returns the currently cached contacts sets (which are stored in
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.ContactSets"/>). The contact sets are only updated, when
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.TimeSpan)"/> is called. If the objects have moved since the
            collision domain was updated last, the contact information will not be up-to-date. In this
            case you need to call <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.TimeSpan)"/> again before calling
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject)"/> to get
            up-to-date results.
            </para>
            <para>
            If one collision object is not part of this <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>,
            then this method automatically calculates the new contact information.
            </para>
            <para>
            If both collision objects are part of this <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>, then
            the returned contact sets are managed by the domain. You must not modify or recycle the
            contact sets! However, if any collision object is not part of this
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>, the returned contact sets are not managed by the domain.
            The contact sets can be modified. When they are no longer needed, they should be recycled to
            avoid unnecessary memory allocations. For example:
            </para>
            <code lang="csharp" title="Recycling contact sets">
            <![CDATA[
            foreach (ContactSet contactSet in myCollisionDomain.GetContacts(objectA, objectB))
            {
              // Check contact set.
              ...
              
              Debug.Assert(objectA.Domain != myCollisionDomain || objectB.Domain != myCollisionDomain);
              foreach(var contact in contactSet)
                contact.Recycle();
              contactSet.Recycle();
            }
            ]]>
            </code>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> or <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.GetContactObjects(DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Gets all <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s that have contact with the given object.
            </summary>
            <param name="collisionObject">The collision object.</param>
            <returns>
            All <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s that have contact with 
            <paramref name="collisionObject"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.HaveAabbContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Tests if the AABBs of two objects which are not in the domain overlap. (Can be used as ad
            hoc broad phase.)
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.HaveRayAabbContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Returns true if the no object is a ray. If an object is a ray, it only returns true if the
            ray hits the AABB of the other object. If both objects are rays, false is returned.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.HasContact(DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Determines whether the specified collision object has contact with any other object in the 
            domain.
            </summary>
            <param name="collisionObject">The collision object.</param>
            <returns>
            <see langword="true"/> if the specified collision object touches or penetrates another 
            object in the collision domain; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            If <paramref name="collisionObject"/> is part of this <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>,
            then this method checks the currently cached contacts sets (which are stored in
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.ContactSets"/>). The contact sets are only updated, when
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.TimeSpan)"/> is called. If the collision object has moved since the
            collision domain was updated last, the contact information will not be up-to-date. In this
            case you need to call <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.TimeSpan)"/> again before calling
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject)"/> to get
            up-to-date results.
            </para>
            <para>
            If <paramref name="collisionObject"/> is not part of this <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>,
            then this method automatically calculates the new contact information.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collisionObject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.HaveContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Determines whether two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s have contact.
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <returns>
            <see langword="true"/> if the objects are touching or penetrating; otherwise 
            <see langword="false"/> if the objects are separated.
            </returns>
            <remarks>
            <para>
            If both collision objects are part of this <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>,
            then this method checks the currently cached contacts sets (which are stored in
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.ContactSets"/>). The contact sets are only updated, when
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.TimeSpan)"/> is called. If the objects have moved since the
            collision domain was updated last, the contact information will not be up-to-date. In this
            case you need to call <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.TimeSpan)"/> again before calling
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject)"/> to get
            up-to-date results.
            </para>
            <para>
            If one collision object is not part of this <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>,
            then this method automatically calculates the new contact information.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> or <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.TimeSpan)">
            <overloads>
            <summary>
            Updates the collision domain and computes new contact information.
            </summary>
            </overloads>
            
            <summary>
            Updates the collision domain and computes the new contact information.
            </summary>
            <param name="deltaTime">
            The simulation time that has elapsed since the last update. (The size of the time step.)
            </param>
            <remarks>
            This method has to be called in each frame. The computed collision data will be updated for 
            the collision objects which were modified since the last <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)"/> call.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)">
            <summary>
            Updates the collision domain and computes the new contact information.
            </summary>
            <param name="deltaTime">
            The simulation time that has elapsed since the last update in seconds. (The size of the time
            step.)
            </param>
            <remarks>
            This method has to be called in each frame. The computed collision data will be updated for 
            the collision objects which were modified since the last <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)"/> call.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single,System.Boolean)">
            <summary>
            Updates the collision domain and computes the new contact information.
            </summary>
            <param name="deltaTime">
            The simulation time that has elapsed since the last update in seconds. (The size of the time
            step.)</param>
            <param name="recycleContactSets">
            If set to <see langword="true" />, obsolete contact sets from the last frames will be 
            recycled - which is the default behavior. If, for some reason, obsolete contact sets might
            still be referenced and used, use <see langword="false" />; the contact sets are kept
            and recycled in future <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.TimeSpan)"/> calls. <see langword="false" /> 
            should only be used in special cases.
            </param>
            <remarks>
            This method has to be called in each frame. The computed collision data will be updated for
            the collision objects which were modified since the last <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)" /> call.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Updates the collision domain and computes the new contact information for a given collision
            object.
            </summary>
            <param name="collisionObject">The collision object.</param>
            <remarks>
            <para>
            This method acts like <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)"/>, except that only the contact info for the
            specified collision object is updated. The update is done with a time step of 0, which means
            that any timestamps or similar properties (e.g. <see cref="P:DigitalRune.Geometry.Collisions.Contact.Lifetime"/>) are not 
            modified.
            </para>
            <para>
            This method should only be used in special cases - whenever possible 
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)"/> should be used instead. The collision detection caches a lot of
            information to improve performance. By updating only a single collision object the collision
            detection might remain in an inconsistent state. That is, the collision objects might have
            contact, but the contact information is missing.
            </para>
            <para>
            Example 1 of an inconsistent state: <paramref name="collisionObject"/> was the first hit of
            a ray that stops at first hits (see <see cref="P:DigitalRune.Geometry.Shapes.RayShape.StopsAtFirstHit"/>). Now 
            <paramref name="collisionObject"/> is moved and does not touch the ray anymore. When 
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(DigitalRune.Geometry.Collisions.CollisionObject)"/> is called in this situation, the collision detection 
            might remain in an inconsistent state. When <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)"/> is called the 
            contact information of <paramref name="collisionObject"/> is updated and the 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> between the <paramref name="collisionObject"/> and the ray will be 
            removed. Since the ray is now no longer blocked by the <paramref name="collisionObject"/> it 
            might hit another object. However, the contact information of the ray is not updated.
            </para>
            <para>
            Example 2 of an inconsistent state: Some collision objects have moved since the last call of 
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)"/>. <paramref name="collisionObject"/> is moved into contact with
            one of the moved objects. Now <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(DigitalRune.Geometry.Collisions.CollisionObject)"/> for 
            <paramref name="collisionObject"/> is called. The broad phase information of 
            <paramref name="collisionObject"/> is updated. But - depending on the type of broad phase 
            algorithm - the broad phase information of the other objects might not be updated. The 
            collision detection uses the cached broad phase information from the previous 
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)"/>. So the collision detection might not find all contacts for
            <paramref name="collisionObject"/>.
            </para>
            <para>
            To sum up: Use this method carefully. Try to use <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)"/> instead. Call
            this method only if <paramref name="collisionObject"/> is the only object that has moved 
            since the last call of <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.Update(System.Single)"/>.
            </para> 
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collisionObject"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="collisionObject"/> is not in this <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.NarrowPhase">
            <summary>
            Performs the collision detection narrow phase for all candidate pairs.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.NarrowPhase(DigitalRune.Geometry.Collisions.ContactSet)">
            <summary>
            Performs the collision detection narrow phase for the candidate pair with the given index.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionDomain.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.CollisionFilter">
            <summary>
            A basic collision filter supporting pairwise filtering and collision groups.
            </summary>
            <remarks>
            <para>
            Per default, all collisions are enabled. Collisions can be disabled for pairs of
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s, for a pair of collision groups, or for a whole collision
            group. Collision groups are identified by an <see cref="T:System.Int32"/> ID, stored in the
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> (see <see cref="P:DigitalRune.Geometry.Collisions.CollisionObject.CollisionGroup"/>).
            Per default, the collision filter supports only collision group IDs in the range 0-31. This
            limit can be changed in the constructor (see <see cref="M:DigitalRune.Geometry.Collisions.CollisionFilter.#ctor(System.Int32)"/>).
            </para>
            <para>
            Two collision objects A and B will NOT collide if one of the following conditions is met:
            <list type="bullet">
            <item>
            <description>
            Collisions for the collision group of A are disabled (see <see cref="M:DigitalRune.Geometry.Collisions.CollisionFilter.Set(System.Int32,System.Boolean)"/>).
            </description>
            </item>
            <item>
            <description>
            Collisions for the collision group of B are disabled (see <see cref="M:DigitalRune.Geometry.Collisions.CollisionFilter.Set(System.Int32,System.Boolean)"/>).
            </description>
            </item>
            <item>
            <description>
            Collisions between the collision group of A and the collision group of B are disabled (see
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionFilter.Set(System.Int32,System.Int32,System.Boolean)"/>).
            </description>
            </item>
            <item>
            <description>
            Collisions between collision object A and B are disabled (see
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionFilter.Set(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject,System.Boolean)"/>).
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionFilter.MaxNumberOfGroups">
            <summary>
            The maximum number of supported collision groups.
            </summary>
            <remarks>
            Collision group numbers must be in the range 0 - (<see cref="P:DigitalRune.Geometry.Collisions.CollisionFilter.MaxNumberOfGroups"/> - 1).
            This limit can be changed in the constructor (see <see cref="M:DigitalRune.Geometry.Collisions.CollisionFilter.#ctor(System.Int32)"/>).
            </remarks>
        </member>
        <member name="E:DigitalRune.Geometry.Collisions.CollisionFilter.Changed">
            <summary>
            Occurs when the filter rules were changed.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionFilter"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionFilter"/> class for max. 32 
            different collision groups.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionFilter"/> class for the given
            max. number of collision groups.
            </summary>
            <param name="maxNumberOfGroups">
            The maximum number of groups (see <see cref="P:DigitalRune.Geometry.Collisions.CollisionFilter.MaxNumberOfGroups"/>).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxNumberOfGroups"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Reset">
            <summary>
            Resets this filter. All collisions will be enabled.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Set(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Set(System.Int32,System.Boolean)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="collisionGroup"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Set(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="groupA"/> is out of range.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="groupB"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Get(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Get(System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="collisionGroup"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Get(System.Int32,System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="groupA"/> or <paramref name="groupB"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.Filter(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject})">
            <summary>
            Determines whether the given <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s can collide.
            </summary>
            <param name="pair">The pair of collision objects.</param>
            <returns>
            <see langword="true"/> if the pair of collision objects can collide; otherwise, 
            <see langword="false"/> if the objects cannot collide.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionFilter.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Geometry.Collisions.CollisionFilter.Changed"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Geometry.Collisions.CollisionFilter.OnChanged(System.EventArgs)"/> in a derived
            class, be sure to call the base class's <see cref="M:DigitalRune.Geometry.Collisions.CollisionFilter.OnChanged(System.EventArgs)"/> method so that registered
            delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.CollisionObject">
            <summary>
            Represents an object which can collide with other objects.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> contains an <see cref="T:DigitalRune.Geometry.IGeometricObject"/> and adds 
            information for the collision detection system.
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Collisions.CollisionDetection"/> provides methods to can make collision queries between 
            two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s. When collisions between multiple 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s need to be computed, it is more efficient to manage 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s in a <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>. A collision domain will 
            cache data to speed up collision detection. A <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> can only belong to
            one <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/> at a time.
            </para>
            <para>
            <strong>Important:</strong> A <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> registers event handlers for 
            <see cref="E:DigitalRune.Geometry.IGeometricObject.PoseChanged"/> and <see cref="E:DigitalRune.Geometry.IGeometricObject.ShapeChanged"/> of
            the contained <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. Therefore, an <see cref="T:DigitalRune.Geometry.IGeometricObject"/>
            will have an indirect reference to its <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>. When the 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> is no longer used the property <see cref="P:DigitalRune.Geometry.Collisions.CollisionObject.GeometricObject"/>
            should be set to <see langword="null"/> which unregisters the event handlers. This is
            necessary in order to avoid potential memory leaks.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionObject.Domain">
            <summary>
            Gets the <see cref="P:DigitalRune.Geometry.Collisions.CollisionObject.Domain"/>.
            </summary>
            <value>The <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>.</value>
            <remarks>
            This property is automatically set when the <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> is added to a
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionObject.GeometricObject">
            <summary>
            Gets or sets the geometric object.
            </summary>
            <value>The geometric object.</value>
            <remarks>
            <para>
            <strong>Important:</strong> The property <see cref="P:DigitalRune.Geometry.Collisions.CollisionObject.GeometricObject"/> should be set to 
            <see langword="null"/> if the <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> is no longer used. The 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> handles the events of the <see cref="T:DigitalRune.Geometry.IGeometricObject"/> 
            (<see cref="E:DigitalRune.Geometry.IGeometricObject.PoseChanged"/> and <see cref="E:DigitalRune.Geometry.IGeometricObject.ShapeChanged"/>).
            Therefore, the <see cref="T:DigitalRune.Geometry.IGeometricObject"/> instance has implicit strong references to the
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>. The <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> cannot be garbage collected
            as long the <see cref="T:DigitalRune.Geometry.IGeometricObject"/> instance is alive. The 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> can be garbage collected if the <see cref="T:DigitalRune.Geometry.IGeometricObject"/> 
            instance can be garbage collected or this property is <see langword="null"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionObject.Changed">
            <summary>
            Gets or sets a value indicating whether the data has changed in a way
            such that the cached contact info is invalid.
            </summary>
            <value>
            <see langword="true"/> if modified; otherwise, <see langword="false"/>. This value is 
            initially set to <see langword="true"/> to indicate that it has not been processed by a 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>.
            </value>
            <remarks>
            This flag is automatically reset by the <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/>. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionObject.Type">
            <summary>
            Gets or sets the collision object type.
            </summary>
            <value>
            The collision object type.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionObject.CollisionGroup">
            <summary>
            Gets or sets the collision group ID.
            </summary>
            <value>The collision group ID.</value>
            <remarks>
            Each collision group is represented by an integer number. Collision groups are used to group
            collision objects of the same type. Some collision filter implementations (see 
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionDetection.CollisionFilter"/> and <see cref="T:DigitalRune.Geometry.Collisions.CollisionFilter"/>) let you
            control the collision filtering for whole groups (additionally to individual collision
            objects).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionObject.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> is enabled.
            </summary>
            <value><see langword="true"/> if enabled; otherwise, <see langword="false"/>.</value>
            <remarks>
            Disabled <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s will not collide with anything. Use this flag if the
            collision object should be temporarily disabled. If the collision object should be disabled
            for a longer period, it is more efficient to remove the object from the
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.CollisionObjects"/> of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/> and
            re-add the object to the collision domain when it is needed again.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionObject.IsRayThatStopsAtFirstHit">
            <summary>
            Gets a value indicating whether this instance is ray that stops at first hit.
            </summary>
            <value>
            <see langword="true"/> if this instance is ray that stops at first hit; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionObject.IsRay">
            <summary>
            Gets a value indicating whether this instance is ray.
            </summary>
            <value>
            <see langword="true"/> if this instance is ray; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionObject.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionObject.#ctor(DigitalRune.Geometry.IGeometricObject)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> class with the given
            geometric object.
            </summary>
            <param name="geometricObject">
            The geometric object (see property <see cref="P:DigitalRune.Geometry.Collisions.CollisionObject.GeometricObject"/>).
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionObject.SetInternal(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.IGeometricObject)">
            <summary>
            Copies the data from the specified <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> and sets the specified
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. (For internal use only.)
            </summary>
            <param name="collisionObject">The collision object.</param>
            <param name="geometricObject">The geometric object.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionObject.ResetInternal">
            <summary>
            Resets the collision object. (For internal use only.)
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionObject.OnPoseChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the pose was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionObject.OnShapeChanged(System.Object,DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <summary>
            Called when the shape was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionObject.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.CollisionObjectCollection">
            <summary>
            Represents a collection of <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Collisions.CollisionObjectCollection._lookupTable">
            <summary>
            A lookup table that maps <see cref="T:DigitalRune.Geometry.IGeometricObject"/> objects to their 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.CollisionObjectCollection.EnableLookupTable">
            <summary>
            Gets or sets a value indicating whether the internal lookup table is enabled.
            </summary>
            <value>
            <see langword="true"/> if the internal lookup table is enabled; otherwise, 
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
            The <see cref="M:DigitalRune.Geometry.Collisions.CollisionObjectCollection.Get(DigitalRune.Geometry.IGeometricObject)"/> method can be used to look up a <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> by
            specifying its <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. By default the lookup is done by performing a
            linear search through all <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s, which is O(n). By setting 
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionObjectCollection.EnableLookupTable"/> to <see langword="true"/> an internal lookup table is 
            created to speedup the lookup at the cost of additional memory. The lookup using the 
            internal lookup table is close to O(1).
            </para>
            <para>
            The lookup table can be enabled or disabled at any time. (However, enabling the lookup table
            costs some time because all <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s need to be copied into the 
            lookup table.)
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.CollisionObjectCollection"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionObjectCollection.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionObjectCollection.InsertItem(System.Int32,DigitalRune.Geometry.Collisions.CollisionObject)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionObjectCollection.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionObjectCollection.SetItem(System.Int32,DigitalRune.Geometry.Collisions.CollisionObject)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.CollisionObjectCollection.Get(DigitalRune.Geometry.IGeometricObject)">
            <summary>
            Gets the collision object for the specified geometric object.
            </summary>
            <param name="geometricObject">The <see cref="T:DigitalRune.Geometry.IGeometricObject"/>.</param>
            <returns>
            The <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> of <paramref name="geometricObject"/>, or 
            <see langword="null"/> if the collision domain does not contain a 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> for <paramref name="geometricObject"/>.
            </returns>
            <remarks>
            This method can be used to lookup a <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> by specifying its 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. By default, this method performs a linear search over all 
            items to find the <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> which is O(n). The lookup can be speed up by
            setting <see cref="P:DigitalRune.Geometry.Collisions.CollisionObjectCollection.EnableLookupTable"/> to <see langword="true"/>. In this case a internal
            lookup table is created that maps the <see cref="T:DigitalRune.Geometry.IGeometricObject"/> object to their 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s. The lookup when using the internal lookup table is close to
            O(1).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="geometricObject"/> is <see langword="true"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.CollisionObjectType">
            <summary>
            Defines the type of collision object.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Collisions.CollisionObjectType.Default">
            <summary>
            A normal collision object. When this type of collision object collides with another 
            collision object of type <see cref="F:DigitalRune.Geometry.Collisions.CollisionObjectType.Default"/>, the full contact details (contact points, 
            normal vectors, penetration depths, etc.) are computed and stored in the 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>s.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Collisions.CollisionObjectType.Trigger">
            <summary>
            A collision object that is used as a trigger and does not need contact details. When this 
            type of collision object collides with another collision object, contact details (contact 
            points, normal vectors, penetration depths, etc.) will be omitted. The flag 
            <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.HaveContact"/> will be set in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>s for this 
            object. But the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>s will not contain any <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s. Use
            trigger collision objects instead of default collision objects to improve performance if
            contact details are not required.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.CollisionQueryType">
            <summary>
            The type of collision query.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Collisions.CollisionQueryType.Boolean">
            <summary>
            A boolean ("have contact") query. The result of a boolean query is either 
            <see langword="true"/> to indicate contact or <see langword="false"/> to indicate 
            separation.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Collisions.CollisionQueryType.Contacts">
            <summary>
            A collision query that computes detailed contact information. Contact information is only 
            computed for objects in contact, not for separated objects.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Collisions.CollisionQueryType.ClosestPoints">
            <summary>
            Searching for 1 pair of closest points. The closest-points information is computed for 
            separated objects and for objects in contact.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.Contact">
            <summary>
            Describes a contact (or the closest points) of two objects.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> is the result of a collision query. <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s are usually
            stored in a <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>. A <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> describes a single contact point
            (or closest-point pair), whereas a <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> contains all contacts between two 
            objects. (The involved objects are called "object A" and "object B".)
            </para>
            <para>
            A <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> includes 2 points: a point on object A (see 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionALocal"/> or <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionAWorld"/>) and a point on object B (see 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionBLocal"/> or <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionBWorld"/>). The property 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.Position"/> is a point that lies halfway between those two points.
            </para>
            <para>
            There are 4 types of contacts:
            <list type="bullet">
            <item>
            <description>
            <strong>Touching Contact:</strong> Object A and object B are touching at the surface. The 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> is 0. The points on object A and object B are identical. 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.Position"/>, <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionAWorld"/>, and <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionBWorld"/> are 
            identical.
            </description>
            </item>
            <item>
            <description>
            <strong>Penetrating Contact:</strong> Object A and object B are penetrating each other. The 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> is greater than 0. <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionAWorld"/>, and 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionBWorld"/> are different and describe the points on object A and B that 
            have maximum penetration. <see cref="P:DigitalRune.Geometry.Collisions.Contact.Position"/> lies halfway between these two points.
            </description>
            </item>
            <item>
            <description>
            <para>
            <strong>Closest points (separated objects):</strong> Object A and object B are separated. They
            are not in contact. This can be the result of a closest-point query (see 
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.GetClosestPoints(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)"/>). Normal contact queries such as 
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)"/> or the contact queries performed inside a 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/> ignore separated objects!
            </para>
            <para>
            The <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> is negative. The absolute value of 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> indicates the distance between the object A and object B. (The
            "penetration depth" is the inverse of "separation distance".) <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionAWorld"/>
            and <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionBWorld"/> are the closest points between the two objects. 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.Position"/> lies halfway between the closest points.
            </para>
            <para>
            Closest-point query is a special type of collision query. At first this might look confusing:
            Why does a closest-point query return a <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>? The reason that contacts and
            closest points are represented by the same class is that the collision detection internally
            treats contacts and closest points the same way.
            </para>
            </description>
            </item>
            <item>
            <description>
            <para>
            <strong>Ray Hit:</strong> Either object A or object B is a ray that hits the other object. The
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> stores the distance from the ray origin to the contact position
            on the second object. The <see cref="P:DigitalRune.Geometry.Collisions.Contact.Normal"/> describes the surface normal at the contact
            position.
            </para>
            <para>
            (Ray hits can easily be found by checking whether the property <see cref="P:DigitalRune.Geometry.Collisions.Contact.IsRayHit"/> is set
            in a <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>.)
            </para>
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Contact.FeatureA">
            <summary>
            Gets or sets the index of the shape feature of object A that was hit.
            </summary>
            <value>
            The index of the feature of object A that was hit. The default value is -1.
            </value>
            <remarks>
            This property indicates which feature of the <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> of object A created this 
            contact. This value is an index that depends on the type of <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>. For most 
            shapes, this value is not used (in this cases it is -1). See the shape documentation of 
            individual shapes (for example, <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> or 
            <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/>) to find out how it is used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Contact.FeatureB">
            <summary>
            Gets or sets the index of the shape feature of object B that was hit.
            </summary>
            <value>
            The index of the feature of object B that was hit. The default value is -1.
            </value>
            <remarks>
            This property indicates which feature of the <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> of object B created this 
            contact. This value is an index that depends on the type of <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>. For most 
            shapes, this value is not used (in this cases it is -1). See the shape documentation of 
            individual shapes (for example, <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> or 
            <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/>) to find out how it is used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Contact.Position">
            <summary>
            Gets or sets the contact position (in world space).
            </summary>
            <value>The contact position (in world space).</value>
            <remarks>
            <para>
            This position is halfway between <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionAWorld"/> and 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionBWorld"/>.
            </para>
            <para>
            For a touching contact this point is the exact position where the two objects touch. For
            penetrating contacts this position is a midpoint halfway along the penetration depth. For
            separated contacts this position is halfway between the two objects. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Contact.PositionALocal">
            <summary>
            Gets or sets the contact position on object A in the local space of object A.
            </summary>
            <value>The contact position on A in the local space of object A.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Contact.PositionBLocal">
            <summary>
            Gets or sets the contact position on object B in the local space of object B.
            </summary>
            <value>The contact position on B in the local space of object B.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Contact.PositionAWorld">
            <summary>
            Gets the contact position on object A (in world space).
            </summary>
            <value>The contact position on A (in world space).</value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Contact.PositionBWorld">
            <summary>
            Gets the contact position on object B (in world space).
            </summary>
            <value>The contact position on B (in world space).</value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Contact.Normal">
            <summary>
            Gets or sets the normalized contact normal (pointing from object A to object B; in world space).
            </summary>
            <value>
            The normalized contact normal (pointing from object A to object B; in world space).
            This vector must be normalized (the length must be <c>1</c>).
            </value>
            <remarks>
            This vector shows the direction into which object B has to move to move away from object A.
            This value is stored as a normalized vector.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth">
            <summary>
            Gets or sets the penetration depth.
            </summary>
            <value>The penetration depth.</value>
            <remarks>
            <para>
            This is the distance which the two object have to move along the contact normal (see 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.Normal"/>) to be in a touching state (no penetration and no separation). For 
            penetrating contacts this value is positive. For separated objects this value is negative.
            (The "penetration depth" is the inverse of the "separation distance".)
            </para>
            <para>
            <strong>For ray-casting:</strong> If this value is positive, the ray hits the object and the 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> is the distance from the origin of the ray origin to the 
            contact point. If the value is negative the ray misses the object and the absolute value of 
            the <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> indicates the separation distance between the ray and the 
            other object (closest points).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Contact.Lifetime">
            <summary>
            Gets or sets the lifetime of this contact (in seconds).
            </summary>
            <value>The lifetime of this contact (in seconds).</value>
            <remarks>
            A touching or penetrating contact can exist for a longer time. This time span is 
            automatically increased for persistent contacts.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Contact.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>The user data.</value>
            <remarks>
            <para>
            This property can store end-user data. This property is not used by the collision detection 
            library itself.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Contact.IsRayHit">
            <summary>
            Gets a value indicating whether this contact is a hit by a ray.
            </summary>
            <value>
            <see langword="true"/> if this contact is a hit by a ray; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
            Normally, the contact points can lie within an object for a penetrating contacts. But ray
            casts (ray vs. any other shape) will always create a contact point on the surface of the 
            shape which is hit. If <see cref="P:DigitalRune.Geometry.Collisions.Contact.IsRayHit"/> is <see langword="true"/> then 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.Position"/>, <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionAWorld"/> and <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionBWorld"/> are
            always identical. The <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> is the distance from origin of the ray
            to the contact point.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.Contact.Swapped">
            <summary>
            Gets a copy of the contact where the collision objects are swapped.
            </summary>
            <remarks>
            The local contact position and the shape features on A and B are swapped; the normal vector
            is inverted.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Contact.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> class from being created.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Contact.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Geometry.Collisions.Contact.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Contact.Recycle">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> class.
            </summary>
            <remarks>
            <para>
            This method resets this instance and returns it to a resource pool if resource pooling is 
            enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Contact.Reset">
            <summary>
            Resets this contact to default values. 
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.Contact.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.ContactHelper">
            <summary>
            Helper methods for managing collision contacts.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactHelper.CreateContact(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single,System.Boolean)">
            <overloads>
            <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>.
            </summary>
            </overloads>
            
            <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> for the given pair of collision objects.
            </summary>
            <param name="objectA">The first collision object. (Must not be <see langword="null"/>.)</param>
            <param name="objectB">The second collision object. (Must not be <see langword="null"/>.)</param>
            <param name="position">The contact position.</param>
            <param name="normal">The normal vector. Needs to be normalized.</param>
            <param name="penetrationDepth">The penetration depth.</param>
            <param name="isRayHit">
            If set to <see langword="true"/> the contact is a hit by a ray (see 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.IsRayHit"/>).
            </param>
            <returns>A new <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>.</returns>
            <remarks>
            This method copies the given information into a new contact and initializes the local 
            contact positions (<see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionALocal"/> and 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionBLocal"/>). <paramref name="objectA"/> and 
            <paramref name="objectB"/> are only used to compute the local contact positions.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactHelper.CreateContact(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single,System.Boolean)">
            <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> for the given contact set.
            </summary>
            <param name="contactSet">
            The contact set for the colliding objects. (Must not be <see langword="null"/>.)
            </param>
            <param name="position">The contact position.</param>
            <param name="normal">The normal vector. Needs to be normalized.</param>
            <param name="penetrationDepth">The penetration depth.</param>
            <param name="isRayHit">
            If set to <see langword="true"/> the contact is a hit by a ray (see 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.IsRayHit"/>).
            </param>
            <returns>A new <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>.</returns>
            <remarks>
            This method copies the given information into a new contact and initializes the local 
            contact positions (<see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionALocal"/> and 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PositionBLocal"/>). The <paramref name="contactSet"/> is only required 
            to compute the local contact positions.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactHelper.Merge(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.Contact,DigitalRune.Geometry.Collisions.CollisionQueryType,System.Single)">
            <overloads>
            <summary>
            Merges new contacts into a contact set.
            </summary>
            </overloads>
            
            <summary>
            Merges a new contact into the given contact set.
            </summary>
            <param name="contactSet">The contact set. (Must not be <see langword="null"/>.)</param>
            <param name="newContact">The contact. (Must not be <see langword="null"/>.)</param>
            <param name="type">The type of collision query.</param>
            <param name="contactPositionTolerance">The contact position tolerance.</param>
            <remarks>
            <para>
            This method adds the given contact by merging it with an existing contact or by simply
            adding it to <paramref name="contactSet"/>. A contact is merged with an existing one if the
            difference of the contact positions is less than the 
            <paramref name="contactPositionTolerance"/> and the contact features are identical. Contacts
            of ray casts are always merged with existing contacts of the same features 
            (<paramref name="contactPositionTolerance"/> is not checked in this case).
            </para>
            <para>
            This method must not be called for Boolean ("HaveContact") queries since boolean queries do 
            not normally change contact information.
            </para>
            <para>
            For shapes where contacts are computed for child shapes, the feature 
            (<see cref="P:DigitalRune.Geometry.Collisions.Contact.FeatureA"/> or <see cref="P:DigitalRune.Geometry.Collisions.Contact.FeatureB"/>) must be set correctly in 
            <paramref name="newContact"/>. For example, this is necessary for 
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>, 
            <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/>, <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/> and similar shapes.
            </para>
            <para>
            <strong>Important:</strong> The <paramref name="newContact"/> will be recycled and cannot
            be accessed after this method call.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contactSet"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactHelper.Merge(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.CollisionQueryType,System.Single)">
            <summary>
            Merges a new set of contacts into the given contact set.
            </summary>
            <param name="target">The target contact. (Must not be <see langword="null"/>.)</param>
            <param name="newContacts">
            The contact set to merge. (Must not be <see langword="null"/>.)
            </param>
            <param name="type">The type of collision query.</param>
            <param name="contactPositionTolerance">The contact position tolerance.</param>
            <remarks>
            <para>
            This method calls <see cref="M:DigitalRune.Geometry.Collisions.ContactHelper.Merge(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.Contact,DigitalRune.Geometry.Collisions.CollisionQueryType,System.Single)"/> for 
            all contacts in <paramref name="newContacts"/>.
            </para>
            <para>
            <strong>Important:</strong> The <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s in <paramref name="newContacts"/> 
            will be recycled and cannot be used after this method call.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="target"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactHelper.TryMergeWithNearestContact(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.Contact,System.Single,System.Boolean)">
            <summary>
            Tries to the merge the contact with the nearest contact in the given 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </summary>
            <param name="contactSet">The contact set. (Must not be <see langword="null"/>.)</param>
            <param name="contact">The contact. (Must not be <see langword="null"/>.)</param>
            <param name="contactPositionTolerance">The contact position tolerance.</param>
            <param name="updateMerged">
            If set to <see langword="true"/> the merged contact is updated with the data of 
            <paramref name="contact"/>. If set to <see langword="false"/> the merged contact keeps the
            data of the old contact.
            </param>
            <returns>
            <see langword="true"/> if the contact was merged successfully; otherwise
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactHelper.ReduceClosestPoints(DigitalRune.Geometry.Collisions.ContactSet)">
            <summary>
            Reduces the number of contacts in the contact set to 1 contact.
            </summary>
            <param name="contactSet">The contact set.</param>
            <remarks>
            The contact with the biggest penetration depth is kept.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactHelper.ReduceRayHits(DigitalRune.Geometry.Collisions.ContactSet)">
            <summary>
            Reduces the number of contacts in the contact set to 1 contact.
            </summary>
            <param name="contactSet">
            The contact set. One shape in the contact set must be a <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/>!
            </param>
            <remarks>
            The best ray hit is kept. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactHelper.RemoveBadContacts(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Removes contacts where the contact normal points into an invalid direction.
            </summary>
            <param name="contactSet">The contact set.</param>
            <param name="normal">The desired normal vector.</param>
            <param name="minDotProduct">
            The minimal allowed dot product of the contact normal and <paramref name="normal"/>.
            </param>
            <remarks>
            For each contact this method computes the dot product of the contact normal and the given 
            normal. If the dot product is less than <paramref name="minDotProduct"/> the contact is 
            removed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactHelper.RemoveSeparatedContacts(DigitalRune.Geometry.Collisions.ContactSet)">
            <summary>
            Removes separated contacts.
            </summary>
            <param name="contactSet">The contact set.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactHelper.UpdateContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single,System.Single)">
            <summary>
            Updates the contact geometry of a contact set.
            </summary>
            <param name="contactSet">The contact set.</param>
            <param name="deltaTime">
            The time step in seconds. (The simulation time that has elapsed since the last time that an 
            Update-method was called.)
            </param>
            <param name="contactPositionTolerance">The contact position tolerance.</param>
            <remarks>
            <para>
            The objects can still move relative to each other. This method updates the contact 
            information if the objects have moved. The <see cref="P:DigitalRune.Geometry.Collisions.Contact.Lifetime"/> of persistent 
            contacts is increased. Invalid contacts are removed. Closest point pairs will be removed if 
            they start touching. Penetrating or touching contacts are removed if the objects have moved 
            more than <paramref name="contactPositionTolerance"/> or the contacts have separated.
            </para>
            <para>
            Note: Only the info of the cached contacts is updated. New contacts are not discovered in
            this method.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactHelper.UpdateContact(DigitalRune.Geometry.Collisions.ContactSet,DigitalRune.Geometry.Collisions.Contact,System.Single)">
            <summary>
            Updates the contact geometry for a single contact.
            </summary>
            <param name="contactSet">The contact set.</param>
            <param name="contact">The contact to be updated.</param>
            <param name="contactPositionTolerance">The contact position tolerance.</param>
            <returns>
            <see langword="true"/> if the contact is invalid and should be removed.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactHelper.ToContactSetCollection(System.Collections.Generic.IEnumerable{DigitalRune.Geometry.Collisions.ContactSet})">
            <summary>
            Creates a <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="contactSets">The contact sets.</param>
            <returns>
            A <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection"/> that contains the elements from the input sequence.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactHelper.TestWithPerturbations(DigitalRune.Geometry.Collisions.CollisionDetection,DigitalRune.Geometry.Collisions.ContactSet,System.Boolean,System.Action{DigitalRune.Geometry.Collisions.ContactSet})">
            <summary>
            Performs more collision tests while slightly rotating one collision object.
            </summary>
            <param name="collisionDetection">The collision detection.</param>
            <param name="contactSet">
            The contact set; must contain at least 1 <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>.
            </param>
            <param name="perturbB">
            if set to <see langword="true"/> collision object B will be rotated; otherwise collision 
            object A will be rotated.
            </param>
            <param name="testMethod">The test method that is called to compute contacts.</param>
            <remarks>
            This method rotates one object 3 times and calls contact computation for the new
            orientations. It is recommended to call this method only when the contact set has 1 new
            contact.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.ContactReducer">
            <summary>
            Removes contacts if a <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> contains more than 4 <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s.
            </summary>
            <remarks>
            If the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> contains 4 or less <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s this filter does
            nothing. If the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> contains more than 4 <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s, the 
            <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> with the deepest penetration depth is kept and 3 more 
            <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s that enclose a large area. The order of the <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s in
            the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> is modified. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactReducer.Filter(DigitalRune.Geometry.Collisions.ContactSet)">
            <summary>
            Filters the specified contact set.
            </summary>
            <param name="contactSet">The contact set.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactReducer.Reduce(DigitalRune.Geometry.Collisions.ContactSet)">
            <summary>
            Removes 1 contact.
            </summary>
            <param name="contactSet">The contact set.</param>
            <remarks>
            <c>contactSet[0]</c> is not changed. <c>contactSet[1]</c> to <c>contactSet[4]</c> are
            tested. The contacts with the largest area are kept. The other one is removed.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.ContactSet">
            <summary>
            A collection of <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s that describe the contact points or closest points
            between to collision objects.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> collects <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s between two
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s. A <see cref="T:DigitalRune.Geometry.Collisions.CollisionDomain"/> creates one
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> for each pair of touching objects.
            </para>
            <para>
            <strong>Swapped Contact Sets:</strong> The order of <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectA"/> and
            <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectB"/> is determined in the collision detection when the contact set is
            created. When the collision detection returns a contact set with a method like
            <c>GetContacts(objectA, objectB)</c>, the objects in the contact set could be swapped such
            that <c>contactSet.ObjectA == objectB</c> and <c>contactSet.ObjectB == objectA</c>. If your
            algorithms rely on the order of <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectA"/> and <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectB"/>, for example
            when the contact normal vectors are used, you need to manually check whether the objects are
            in the expected order. By calling the property <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.Swapped"/> you can get a copy of the
            contact set where <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectA"/> and <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectB"/> are swapped and all contacts
            are updated accordingly.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSet.Count">
            <summary>
            Gets the number of <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s contained in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </summary>
            <value>
            The number of <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s contained in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSet.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> at the specified index.
            </summary>
            <value>The contact at the specified index.</value>
            <param name="index">The zero-based index of the contact to get or set.</param>
            <remarks>
            <para>
            This indexer is an O(1) operation.
            </para>
            </remarks>
            <exception cref="T:System.NullReferenceException">
            This <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.Count"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSet.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSet.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized 
            (thread safe).
            </summary>
            <value>
            <see langword="true"/> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread 
            safe); otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSet.System#Collections#Generic#ICollection{DigitalRune#Geometry#Collisions#Contact}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSet.HaveContact">
            <summary>
            Gets or sets a value indicating whether <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectA"/> and <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectB"/> are
            in contact.
            </summary>
            <value>
            <see langword="true"/> if <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectA"/> and <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectB"/> are touching or 
            intersecting; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
            Normally, if this value is <see langword="true"/>, the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> contains one
            or more <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s that indicate that the objects are touching or intersecting.
            Two objects are touching or intersecting when the 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> of <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> is equal to or greater than 
            0. 
            </para>
            <para>
            When <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.HaveContact"/> is <see langword="false"/> the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>
            contains no <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> - except when the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> is created by a
            closest point query. A closest-point query (see 
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.GetClosestPoints(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)"/> or
            <see cref="M:DigitalRune.Geometry.Collisions.CollisionDetection.UpdateClosestPoints(DigitalRune.Geometry.Collisions.ContactSet,System.Single)"/>) returns a 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> that has a single <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> where the 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> indicates the closest-point distance. (When the 
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> is negative then the two objects are separated and
            the absolute value of the <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> is the distance between the
            closest points. When <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> is 0 the objects are touching
            and when the <see cref="P:DigitalRune.Geometry.Collisions.Contact.PenetrationDepth"/> is positive the objects are 
            intersecting.)
            </para>
            <para>
            In certain cases <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.HaveContact"/> is <see langword="true"/>, but the 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> is empty and does not contain any <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s. This is 
            the case if either <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectA"/> or <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectB"/> is a trigger 
            (<see cref="T:DigitalRune.Geometry.Collisions.CollisionObjectType"/>) or if no useful contact information could be computed
            because of numerical errors or other exceptions.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectA">
            <summary>
            Gets collision object A.
            </summary>
            <value>Collision object A.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectB">
            <summary>
            Gets collision object B.
            </summary>
            <value>Collision object B.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSet.Swapped">
            <summary>
            Gets a copy of the contact set where <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectA"/> and <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectB"/> are
            swapped.
            </summary>
            <remarks>
            This method copies the contact set, exchanges <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectA"/> and 
            <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.ObjectB"/> and updates the contact information accordingly.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSet.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
            <value>
            <see langword="true"/> if this instance is valid; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            This flag can be set to <see langword="false"/> to tell the collision domain, that it has to 
            recompute this contact set. The flag will be set to <see langword="true"/> automatically 
            when the contact set is updated.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSet.PreferredNormal">
            <summary>
            Gets or sets the preferred normal direction.
            </summary>
            <value>
            The preferred normal direction. The default value is <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Zero"/>. If the 
            value is a vector other than <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Zero"/> it needs to be normalized.
            </value>
            <remarks>
            If this value is a vector other than <see cref="F:DigitalRune.Mathematics.Algebra.Vector3F.Zero"/>, the vector is used as the
            preferred normal direction. The preferred normal direction is a hint that can be used by 
            collision algorithms to return better contact points. Collision algorithms which support 
            this feature will try to return a contact point with a normal that is close to 
            <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.PreferredNormal"/>. Currently, only the MPR collision algorithm supports this 
            feature (see <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.MinkowskiPortalRefinement"/> for details).
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not normalized. The vector needs to be either (0, 0, 0) or a 
            normalized vector.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSet.IsPreferredNormalAvailable">
            <summary>
            Gets a value indicating whether <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.PreferredNormal"/> is set.
            </summary>
            <value>
            <see langword="true"/> if <see cref="P:DigitalRune.Geometry.Collisions.ContactSet.PreferredNormal"/> is available; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> class from being created.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Create(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <param name="objectA">The object A.</param>
            <param name="objectB">The object B.</param>
            <returns>A new or reusable instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> class.</returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Geometry.Collisions.ContactSet.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="objectA"/> and <paramref name="objectB"/> are the same.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Recycle">
             <overloads>
             <summary>
             Recycles this instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> class.
             </summary>
             </overloads>
            
             <summary>
             Recycles this instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> class.
             </summary>
             <remarks>
             <para>
             This method resets this instance and returns it to a resource pool if resource pooling is 
             enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
             </para>
             <para>
             This method does not recycle the contained <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s.
             </para>
             </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Recycle(System.Boolean)">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet" /> class.
            </summary>
            <param name="recycleContacts">
            If set to <see langword="true" />, the contained <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s are also recycled; 
            If set to <see langword="false"/>, the contacts are not recycled.</param>
            <remarks>
            This method resets this instance and returns it to a resource pool if resource pooling is
            enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Reset(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Resets this contact set to default values. 
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <remarks>
            This method allows to re-use an existing contact set instead of allocating a new instance on 
            the heap. This avoids garbage on the heap. In general, this method must only be used by the
            creator of this instance. If the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> was created by the collision
            detection, this method should not be used.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Add(DigitalRune.Geometry.Collisions.Contact)">
            <summary>
            Adds a <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> to the end of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </summary>
            <param name="item">
            The contact to add to the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.AsReadOnly">
            <summary>
            Returns a read-only <see cref="T:System.Collections.Generic.IList`1"/> wrapper for the current <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> that acts as a read-only wrapper around the current
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>. 
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Clear">
            <summary>
            Removes and recycles all <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s from the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Contains(DigitalRune.Geometry.Collisions.Contact)">
            <summary>
            Determines whether the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> contains a specific <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>.
            </summary>
            <param name="item">The contact to locate in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.CopyTo(DigitalRune.Geometry.Collisions.Contact[],System.Int32)">
            <summary>
            Copies the <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> to an <see cref="T:System.Array"/>,
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the 
            <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s copied from this <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>. The <see cref="T:System.Array"/>
            must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of contacts in the 
            source <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>. Or 
            type <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> cannot be cast automatically to the type of the destination 
            <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> to an <see cref="T:System.Array"/>,
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the 
            <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>s copied from this <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>. The <see cref="T:System.Array"/>
            must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="index"/> is equal to or
            greater than the length of <paramref name="array"/>. Or the number of contacts in the 
            source <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> is greater than the available space from 
            <paramref name="index"/> to the end of the destination <paramref name="array"/>. Or type 
            <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> cannot be cast automatically to the type of the destination 
            <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.System#Collections#Generic#IEnumerable{DigitalRune#Geometry#Collisions#Contact}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.IndexOf(DigitalRune.Geometry.Collisions.Contact)">
            <summary>
            Determines the index of a specific <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </summary>
            <param name="item">The contact to locate in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the contact set; otherwise, -1.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Insert(System.Int32,DigitalRune.Geometry.Collisions.Contact)">
            <summary>
            Inserts an <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">The contact to insert into the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.Remove(DigitalRune.Geometry.Collisions.Contact)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> from the 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </summary>
            <param name="item">The contact to remove from the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> was successfully removed from the 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>; otherwise, <see langword="false"/>. This method also returns 
            <see langword="false"/> if <paramref name="item"/> is not found in the original 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the contact to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSet.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.ContactSetCollection">
            <summary>
            A collection of contact sets.
            </summary>
            <remarks>
            The contact sets in the collection are not necessarily stored in the same order as they were
            added. Duplicate contact sets and <see langword="null"/> values must not be added to the
            collection.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.ContactSetCollection.Enumerator">
            <summary>
            Enumerates the contact sets in a <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection"/>. 
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSetCollection.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSetCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last 
            element.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Enumerator.#ctor(DigitalRune.Geometry.Collisions.ContactSetCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection.Enumerator"/> struct.
            </summary>
            <param name="collection">The <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection"/> to be enumerated.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; 
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection"/> was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSetCollection.Count">
            <summary>
            Gets the number of contact sets in the collection. 
            </summary>
            <value>The number of contact sets in the collection.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSetCollection.System#Collections#Generic#ICollection{DigitalRune#Geometry#Collisions#ContactSet}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSetCollection.InternalCount">
            <summary>
            Gets the number of entries in the internal array.
            </summary>
            <value>
            The number of used entries in the internal array. <see cref="P:DigitalRune.Geometry.Collisions.ContactSetCollection.InternalCount"/> is equal to
            or greater than <see cref="P:DigitalRune.Geometry.Collisions.ContactSetCollection.Count"/> because the internal array may contain empty slots!
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Collisions.ContactSetCollection.Item(System.Int32)">
            <summary>
            Gets the contact set at the specified index in the internal array.
            </summary>
            <param name="index">The index into the internal array.</param>
            <value>
            The contact set. Returns <see langword="null"/> if the slot at the specified index is
            empty!
            </value>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.#ctor(DigitalRune.Geometry.Collisions.CollisionDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection"/> class that manages the
            contact sets of the specified collision domain.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.#ctor(System.Collections.Generic.IEnumerable{DigitalRune.Geometry.Collisions.ContactSet})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Collisions.ContactSetCollection"/> class with the given
            contact sets.
            </summary>
            <param name="contactSets">
            The contact sets which are initially added to the collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contactSets"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Add(DigitalRune.Geometry.Collisions.ContactSet)">
            <summary>
            Adds the specified contact set to the collection.
            </summary>
            <param name="item">The contact set to add to the collection.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="item"/> is already contained in the collection.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Clear">
            <summary>
            Removes all contact sets from the collection.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Contains(DigitalRune.Geometry.Collisions.ContactSet)">
            <overloads>
            <summary>
            Determines whether the collection contains a contact set.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the collection contains the specified contact set.
            </summary>
            <param name="item">The contact set to locate in the collection.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Contains(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Determines whether the collection contains a contact set for the given pair of collision 
            objects.
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <returns>
            <see langword="true"/> if the collection contains a contact set with contacts between 
            <paramref name="objectA"/> and <paramref name="objectB"/>; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Contains(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject})">
            <summary>
            Determines whether the collection contains a contact set for the given pair of
            collision objects.
            </summary>
            <param name="collisionObjectPair">The collision object pair.</param>
            <returns>
            <see langword="true"/> if the collection contains a contact set with contacts between
            the given pair of objects; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Contains(DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Determines whether the collection contains a contact set for the given 
            collision object.
            </summary>
            <param name="collisionObject">The collision object.</param>
            <returns>
            <see langword="true"/> if the collection contains a contact set with 
            <paramref name="collisionObject"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.CopyTo(DigitalRune.Geometry.Collisions.ContactSet[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting 
            at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of elements in the 
            source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <overloads>
            <summary>
            Gets the contact set with the contacts between two collision objects.
            </summary>
            </overloads>
            
            <summary>
            Gets the contact set with the contacts between the specified collision objects.
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <returns>
            <para>
            A <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> with contacts between <paramref name="objectA"/> and 
            <paramref name="objectB"/>. The collision objects in the returned <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>
            can be swapped! See <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> for more information on <i>swapped contact 
            sets</i>.
            </para>
            <para>
            If the collection does not contain a suitable <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>, 
            <see langword="null"/> is returned. 
            </para>
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.GetContacts(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject})">
            <summary>
            Gets the contact set with the contacts between the specified pair of collision objects.
            </summary>
            <param name="collisionObjectPair">The collision object pair.</param>
            <returns>
            <para>
            A <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> with contacts between the given pair of objects. 
            The collision objects in the returned <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>
            can be swapped! See <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> for more information on <i>swapped contact
            sets</i>.
            </para>
            <para>
            If the collection does not contain a suitable <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>,
            <see langword="null"/> is returned.
            </para>
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.GetContacts(DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Gets the contact sets for the specified collision object.
            </summary>
            <param name="collisionObject">The collision object.</param>
            <returns>
            All <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>s that include <paramref name="collisionObject"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Remove(DigitalRune.Geometry.Collisions.ContactSet)">
            <overloads>
            <summary>
            Removes one or more contact sets from the collection.
            </summary>
            </overloads>
            
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            <see langword="true"/> if item was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>. This method also returns 
            <see langword="false"/> if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Remove(DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Removes the contact sets for the given collision object.
            </summary>
            <param name="collisionObject">The collision object.</param>
            <returns>
            <see langword="true"/> if an item was successfully removed; otherwise, 
            <see langword="false"/>. This method also returns <see langword="false"/> if item is not 
            found.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Remove(DigitalRune.Geometry.Collisions.CollisionObject,System.Collections.Generic.List{DigitalRune.Geometry.Collisions.ContactSet})">
            <summary>
            Removes the contact sets for the given collision object and stores them in a list.
            </summary>
            <param name="collisionObject">The collision object.</param>
            <param name="removedContactSets">
            A list to which the removed contact sets are added. Can be <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if an item was successfully removed; otherwise, 
            <see langword="false"/>. This method also returns <see langword="false"/> if item is not 
            found.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Remove(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <summary>
            Removes the contact set for the given pair of collision objects.
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <returns>
            The <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> that was removed; <see langword="null"/> if no matching 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> was found.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Remove(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject})">
            <summary>
            Removes the contact set for the given pair of <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s.
            </summary>
            <param name="collisionObjectPair">The collision object pair.</param>
            <returns>
            The <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> that was removed; <see langword="null"/> if no matching 
            <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/> was found.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.ToArray">
            <summary>
            Copies the contact sets of the collection to a new array.
            </summary>
            <returns>
            An array containing the contact sets.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.TryGet(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.ContactSet@)">
            <overloads>
            <summary>
            Gets the contact sets for the given pair of collision objects.
            </summary>
            </overloads>
            
            <summary>
            Gets the contact sets for the given pair of collision objects.
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <param name="contactSet">
            The contact set with contacts between <paramref name="objectA"/> and 
            <paramref name="objectB"/>, if such a contact set exists in the collection - otherwise, 
            <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the collections contains a contact set for the specified pair of 
            collision objects; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.TryGet(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject},DigitalRune.Geometry.Collisions.ContactSet@)">
            <summary>
            Gets the contact set for the given pair of collision objects.
            </summary>
            <param name="collisionObjectPair">The collision object pair.</param>
            <param name="contactSet">
            The contact set with contacts between the given collision object pair, if such a contact set
            exists in the collection - otherwise, <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the collections contains a contact set for the specified pair of 
            collision objects; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.System#Collections#Generic#IEnumerable{DigitalRune#Geometry#Collisions#ContactSet}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.Add(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject})">
            <summary>
            Adds a new contact set for the specified pair, bypassing any checks.
            </summary>
            <param name="pair">The pair of collision objects.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.AddOrMarkAsUsed(DigitalRune.Collections.Pair{DigitalRune.Geometry.Collisions.CollisionObject})">
            <summary>
            Adds a new contact set to the collection, or marks the contact set as used if it already
            exists.
            </summary>
            <param name="overlap">The overlap.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ContactSetCollection.RemoveUnused(System.Collections.Generic.List{DigitalRune.Geometry.Collisions.ContactSet})">
            <summary>
            Removes all contact sets which are not marked as used..
            </summary>
            <param name="removedContactSets">The removed contact sets.</param>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.ContinuousCollisionDetectionMode">
            <summary>
            Defines the mode of the continuous collision detection.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Collisions.ContinuousCollisionDetectionMode.Full">
            <summary>
            The continuous collision detection considers the linear and the rotational movement of the 
            objects involved. (Slower, but more accurate.)
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Collisions.ContinuousCollisionDetectionMode.Linear">
            <summary>
            The continuous collision detection considers only the linear movement of the objects 
            involved. The rotational movement is ignored. (Faster, but less accurate.)
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.ICollisionFilter">
            <summary>
            Represents a configurable collision filter supporting pairwise filtering and collision groups.
            </summary>
            <remarks>
            <para>
            Per default, all collisions are enabled. Collisions can be disabled for pairs of
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s, for a pair of collision groups, or for a whole collision
            group. Collision groups are identified by an <see cref="T:System.Int32"/> ID, stored in the
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> (see <see cref="P:DigitalRune.Geometry.Collisions.CollisionObject.CollisionGroup"/>).
            </para>
            <para>
            Two collision objects A and B will NOT collide if one of the following conditions is met:
            <list type="bullet">
            <item>
            <description>
            Collisions for the collision group of A are disabled (see <see cref="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Set(System.Int32,System.Boolean)"/>).
            </description>
            </item>
            <item>
            <description>
            Collisions for the collision group of B are disabled (see <see cref="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Set(System.Int32,System.Boolean)"/>).
            </description>
            </item>
            <item>
            <description>
            Collisions between the collision group of A and the collision group of B are disabled (see
            <see cref="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Set(System.Int32,System.Int32,System.Boolean)"/>).
            </description>
            </item>
            <item>
            <description>
            Collisions between collision object A and B are disabled (see
            <see cref="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Set(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject,System.Boolean)"/>).
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Set(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject,System.Boolean)">
            <overloads>
            <summary>
            Enables or disables collisions.
            </summary>
            </overloads>
            
            <summary>
            Enables or disables collisions between the given <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s.
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <param name="collisionsEnabled">
            If set to <see langword="true"/> collisions between <paramref name="objectA"/> and 
            <paramref name="objectB"/> are enabled. Use <see langword="false"/> to disable collisions.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Set(System.Int32,System.Boolean)">
            <summary>
            Enables or disables collisions with the given collision group.
            </summary>
            <param name="collisionGroup">The collision group.</param>
            <param name="collisionsEnabled">
            If set to <see langword="true"/> collisions for object in the given group are enabled. Use 
            <see langword="false"/> to disable collisions.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Set(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Enables or disables collisions between a pair of collision groups.
            </summary>
            <param name="groupA">The first collision group.</param>
            <param name="groupB">The second collision group.</param>
            <param name="collisionsEnabled">
            If set to <see langword="true"/> collisions between objects in <paramref name="groupA"/> and 
            objects in <paramref name="groupB"/> are enabled. Use <see langword="false"/> to disable 
            collisions.
            </param>
            <remarks>
            To disable collisions for objects within one group, this method can be called with 
            <paramref name="groupA"/> == <paramref name="groupB"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Get(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject)">
            <overloads>
            <summary>
            Determines whether collisions are enabled or disabled.
            </summary>
            </overloads>
            
            <summary>
            Returns <see langword="true"/> if collisions between two <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s are
            enabled (without testing collision groups).
            </summary>
            <param name="objectA">The first collision object.</param>
            <param name="objectB">The second collision object.</param>
            <returns>
            <see langword="true"/> if collisions between the given <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> pair 
            are enabled; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            This method checks only the flag that was set with 
            <see cref="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Set(DigitalRune.Geometry.Collisions.CollisionObject,DigitalRune.Geometry.Collisions.CollisionObject,System.Boolean)"/>. It is not tested whether 
            collisions are disabled between the collision groups.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Get(System.Int32)">
            <summary>
            Returns <see langword="true"/> if collisions with the given collision group are enabled.
            </summary>
            <param name="collisionGroup">The collision group.</param>
            <returns>
            <see langword="true"/> if collisions with the given collision group are enabled; otherwise 
            <see langword="false"/>.
            </returns>
            <remarks>
            This method checks only the flag that was set with <see cref="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Set(System.Int32,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Get(System.Int32,System.Int32)">
            <summary>
            Returns <see langword="true"/> if collisions between two collision groups are enabled.
            </summary>
            <param name="groupA">The first collision group.</param>
            <param name="groupB">The second collision group.</param>
            <returns>
            <see langword="true"/> if collisions with the between <paramref name="groupA"/> and 
            <paramref name="groupB"/> are enabled; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            This method checks only the flag that was set with <see cref="M:DigitalRune.Geometry.Collisions.ICollisionFilter.Set(System.Int32,System.Int32,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.IContactFilter">
            <summary>
            A filter which processes contacts in a contact set.
            </summary>
            <remarks>
            Contact filters are called in the narrow phase (in <see cref="T:DigitalRune.Geometry.Collisions.Algorithms.CollisionAlgorithm"/>s) to
            post-process the found contacts. Example usages of a contact filter:
            <list type="bullet">
            <item>
            <description>
            Remove redundant contacts. Some applications, like rigid body physics, needs only a minimal
            set of contacts, e.g. only 4 contacts per <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>.
            </description>
            </item>
            <item>
            <description>
            Remove "bad" contacts, for example contacts where the normal direction points into an 
            undesired direction.
            </description>
            </item>
            <item>
            <description>
            Merge contacts. For some applications it is useful to keep only one contact which is the
            average of all other contacts.
            </description>
            </item>
            </list> 
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Collisions.IContactFilter.Filter(DigitalRune.Geometry.Collisions.ContactSet)">
            <summary>
            Filters the specified contact set.
            </summary>
            <param name="contactSet">The contact set.</param>
        </member>
        <member name="T:DigitalRune.Geometry.Collisions.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Geometry.Collisions"/> namespace provides support for collision
            detection.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Content.AabbReader">
            <summary>
            Reads an <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.AabbReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.AabbTreeReader`1">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Partitioning.AabbTree`1"/> from binary format.
            </summary>
            <typeparam name="T">The type of item in the spatial partition.</typeparam>
        </member>
        <member name="M:DigitalRune.Geometry.Content.AabbTreeReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Partitioning.AabbTree{`0})">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.AdaptiveAabbTreeReader`1">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1"/> from binary format.
            </summary>
            <typeparam name="T">The type of item in the spatial partition.</typeparam>
        </member>
        <member name="M:DigitalRune.Geometry.Content.AdaptiveAabbTreeReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0})">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.BoxShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.BoxShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.BoxShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.CapsuleShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.CapsuleShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.CapsuleShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.CapsuleShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.CircleShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.CircleShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.CircleShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.CircleShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.CompositeShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.CompositeShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.CompositeShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.CompressedAabbTreeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.CompressedAabbTreeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Partitioning.CompressedAabbTree)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.ConeShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.ConeShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.ConeShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.ConeShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.ConvexHullOfPointsReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.ConvexHullOfPointsReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.ConvexHullOfPoints)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.ConvexHullOfShapesReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfShapes"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.ConvexHullOfShapesReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.ConvexHullOfShapes)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.ConvexPolyhedronReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.ConvexPolyhedron"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.ConvexPolyhedronReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.ConvexPolyhedron)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.CylinderShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.CylinderShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.CylinderShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.CylinderShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.DirectionalLookupTableFReader`1">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.DirectionalLookupTableF`1"/> from binary format.
            </summary>
            <typeparam name="T">The type of data stored in the lookup table.</typeparam>
        </member>
        <member name="M:DigitalRune.Geometry.Content.DirectionalLookupTableFReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.DirectionalLookupTableF{`0})">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.DirectionalLookupTableUInt16FReader">
            <exclude/>
        </member>
        <member name="M:DigitalRune.Geometry.Content.DirectionalLookupTableUInt16FReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.DirectionalLookupTableUInt16F)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.DualPartitionReader`1">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Partitioning.DualPartition`1"/> from binary format.
            </summary>
            <typeparam name="T">The type of item in the spatial partition.</typeparam>
        </member>
        <member name="M:DigitalRune.Geometry.Content.DualPartitionReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Partitioning.DualPartition{`0})">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.DynamicAabbTreeReader`1">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> from binary format.
            </summary>
            <typeparam name="T">The type of item in the spatial partition.</typeparam>
        </member>
        <member name="M:DigitalRune.Geometry.Content.DynamicAabbTreeReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Partitioning.DynamicAabbTree{`0})">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.EmptyShapeReader">
            <summary>
            Reads an <see cref="T:DigitalRune.Geometry.Shapes.EmptyShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.EmptyShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.EmptyShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.GeometricObjectReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.GeometricObject"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.GeometricObjectReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.GeometricObject)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.HeightFieldReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.HeightFieldReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.HeightField)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.InfiniteShapeReader">
            <summary>
            Reads an <see cref="T:DigitalRune.Geometry.Shapes.InfiniteShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.InfiniteShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.InfiniteShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.LineSegmentShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.LineSegmentShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.LineSegmentShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.LineSegmentShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.LineShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.LineShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.LineShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.LineShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.MinkowskiDifferenceShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.MinkowskiDifferenceShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.MinkowskiSumShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiSumShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.MinkowskiSumShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.MinkowskiSumShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Geometry.Content"/> namespace contains the run-time components of
            the content pipeline. (Only available in XNA/MonoGame compatible builds.)
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Content.OrthographicViewVolumeReader">
            <summary>
            Reads an <see cref="T:DigitalRune.Geometry.Shapes.OrthographicViewVolume"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.OrthographicViewVolumeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.OrthographicViewVolume)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.PerspectiveViewVolumeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.PerspectiveViewVolume"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.PerspectiveViewVolumeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.PerspectiveViewVolume)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.PlaneShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.PlaneShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.PlaneShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.PointShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.PointShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.PointShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.PointShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.PoseDReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.PoseD"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.PoseDReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.PoseD)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.PoseReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Pose"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.PoseReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Pose)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.RayShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.RayShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.RayShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.RectangleShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.RectangleShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.RectangleShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.RectangleShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.ScaledConvexShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.ScaledConvexShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.ScaledConvexShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.ScaledConvexShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.SphereShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.SphereShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.SphereShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.SweepAndPruneSpaceReader`1">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1"/> from binary format.
            </summary>
            <typeparam name="T">The type of item in the spatial partition.</typeparam>
        </member>
        <member name="M:DigitalRune.Geometry.Content.SweepAndPruneSpaceReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Partitioning.SweepAndPruneSpace{`0})">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.TransformedShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.TransformedShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.TransformedShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.TriangleMeshReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.TriangleMeshReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Meshes.TriangleMesh)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.TriangleMeshShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.TriangleMeshShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.TriangleMeshShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.TriangleShapeReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.TriangleShapeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Shapes.TriangleShape)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Content.Pipeline.VertexAdjacencyReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Geometry.Meshes.VertexAdjacency"/> from binary format.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Content.Pipeline.VertexAdjacencyReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Geometry.Meshes.VertexAdjacency)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.DirectionalLookupTableUInt16F">
            <exclude/>
        </member>
        <member name="M:DigitalRune.Geometry.DirectionalLookupTableUInt16F.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="T:DigitalRune.Geometry.DirectionalLookupTableF`1">
            <summary>
            Stores data that is accessed using a direction vector instead of indices. (Single-precision)
            </summary>
            <typeparam name="T">The type of data stored in the lookup table.</typeparam>
            <remarks>
            The directional lookup table internally uses a cube map to store the data.
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.DirectionalLookupTableF`1.CubeMap">
            <summary>
            The cube map indexed as [face, y, x].
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.DirectionalLookupTableF`1.Item(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets or sets the data associated with the specified direction.
            </summary>
            <value>The direction vector.</value>
        </member>
        <member name="P:DigitalRune.Geometry.DirectionalLookupTableF`1.Width">
            <summary>
            Gets the width of the cube map faces.
            </summary>
            <value>The width of the cube map faces.</value>
        </member>
        <member name="P:DigitalRune.Geometry.DirectionalLookupTableF`1.Internals">
            <exclude/>
        </member>
        <member name="M:DigitalRune.Geometry.DirectionalLookupTableF`1.#ctor(`0[0:,0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.DirectionalLookupTableF`1"/> class. (For 
            internal use only.)
            </summary>
            <param name="cubeMap">The cube map.</param>
        </member>
        <member name="M:DigitalRune.Geometry.DirectionalLookupTableF`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.DirectionalLookupTableF`1"/> class.
            </summary>
            <param name="width">The width of the cube map faces.</param>
        </member>
        <member name="M:DigitalRune.Geometry.DirectionalLookupTableF`1.GetIndices(DigitalRune.Mathematics.Algebra.Vector3F@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the cube map indices from a direction vector.
            </summary>
            <param name="direction">The direction vector.</param>
            <param name="x">The x index.</param>
            <param name="y">The y index.</param>
            <param name="face">The face index.</param>
        </member>
        <member name="M:DigitalRune.Geometry.DirectionalLookupTableF`1.GetSampleDirections">
            <summary>
            Gets the sample directions.
            </summary>
            <returns>The sample directions.</returns>
            <remarks>
            A directional lookup table stores a limited amount of samples. The method 
            <see cref="M:DigitalRune.Geometry.DirectionalLookupTableF`1.GetSampleDirections"/> returns all direction vectors that point to the exact
            centers of the samples. The method can be used to iterate over all samples and fill the
            lookup table with data or read all entries.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.GeometricObject">
            <summary>
            Defines an object that has a <see cref="P:DigitalRune.Geometry.GeometricObject.Shape"/> and a <see cref="P:DigitalRune.Geometry.GeometricObject.Pose"/> (position and 
            orientation). (Default implementation of <see cref="T:DigitalRune.Geometry.IGeometricObject"/>.)
            </summary>
            <inheritdoc cref="T:DigitalRune.Geometry.IGeometricObject"/>
        </member>
        <member name="P:DigitalRune.Geometry.GeometricObject.Aabb">
            <summary>
            Gets the axis-aligned bounding box (AABB).
            </summary>
            <value>The axis-aligned bounding box (AABB).</value>
        </member>
        <member name="P:DigitalRune.Geometry.GeometricObject.Pose">
            <summary>
            Gets or sets the pose (position and orientation).
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Geometry.GeometricObject.Shape">
            <summary>
            Gets or sets the shape.
            </summary>
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.GeometricObject.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale factors for the dimensions x, y and z. The default value is (1, 1, 1), which means
            "no scaling".
            </value>
            <remarks>
            <para>
            This value is a scale factor that scales the <see cref="P:DigitalRune.Geometry.GeometricObject.Shape"/> of this geometric object.
            The scale can even be negative to mirror an object.
            </para>
            <para>
            Changing this value does not actually change any values in the <see cref="P:DigitalRune.Geometry.GeometricObject.Shape"/> instance.
            Collision algorithms and anyone who uses this geometric object must use the shape and apply
            the scale factor as appropriate. The scale is automatically applied in the property
            <see cref="P:DigitalRune.Geometry.GeometricObject.Aabb"/>.
            </para>
            <para>
            Changing this property raises the <see cref="E:DigitalRune.Geometry.GeometricObject.ShapeChanged"/> event.
            </para>
            </remarks>
        </member>
        <member name="E:DigitalRune.Geometry.GeometricObject.PoseChanged">
            <inheritdoc/>
        </member>
        <member name="E:DigitalRune.Geometry.GeometricObject.ShapeChanged">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.GeometricObject.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometricObject"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometricObject"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.GeometricObject.#ctor(DigitalRune.Geometry.Shapes.Shape)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometricObject"/> class with a shape.
            </summary>
            <param name="shape">
            The shape (must not be <see langword="null"/>). See property <see cref="P:DigitalRune.Geometry.GeometricObject.Shape"/> for more 
            details.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shape"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometricObject.#ctor(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometricObject"/> class with shape and scale.
            </summary>
            <param name="shape">
            The shape (must not be <see langword="null"/>). See property <see cref="P:DigitalRune.Geometry.GeometricObject.Shape"/> for more
            details.
            </param>
            <param name="scale">The scale.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shape"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometricObject.#ctor(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Geometry.Pose)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometricObject"/> class with shape and pose
            (position and orientation).
            </summary>
            <param name="shape">
            The shape (must not be <see langword="null"/>). See property <see cref="P:DigitalRune.Geometry.GeometricObject.Shape"/> for more 
            details.
            </param>
            <param name="pose">The pose (position and orientation).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shape"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometricObject.#ctor(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometricObject"/> class with shape, scale and 
            pose (position and orientation).
            </summary>
            <param name="shape">
            The shape (must not be <see langword="null"/>). See property <see cref="P:DigitalRune.Geometry.GeometricObject.Shape"/> for more
            details.
            </param>
            <param name="scale">The scale.</param>
            <param name="pose">The pose (position and orientation).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shape"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometricObject.DigitalRune#Geometry#IGeometricObject#Clone">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.GeometricObject.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.GeometricObject"/> that is a clone (deep copy) of the current 
            instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Geometry.GeometricObject"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Geometry.GeometricObject.Clone"/> calls 
            <see cref="M:DigitalRune.Geometry.GeometricObject.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Geometry.GeometricObject"/> derived class and <see cref="M:DigitalRune.Geometry.GeometricObject.CloneCore(DigitalRune.Geometry.GeometricObject)"/> to create a copy of 
            the current instance. Classes that derive from <see cref="T:DigitalRune.Geometry.GeometricObject"/> need to 
            implement <see cref="M:DigitalRune.Geometry.GeometricObject.CreateInstanceCore"/> and <see cref="M:DigitalRune.Geometry.GeometricObject.CloneCore(DigitalRune.Geometry.GeometricObject)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometricObject.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometricObject"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a protected method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Geometry.GeometricObject.CreateInstanceCore"/> method, 
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone shape. A class derived from <see cref="T:DigitalRune.Geometry.GeometricObject"/> does not implement 
            <see cref="M:DigitalRune.Geometry.GeometricObject.CreateInstanceCore"/>."
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometricObject.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Geometry.GeometricObject"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Geometry.GeometricObject.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Geometry.GeometricObject"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Geometry.GeometricObject"/> derived class must
            implement this method. A typical implementation is to simply call the default constructor
            and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometricObject.CloneCore(DigitalRune.Geometry.GeometricObject)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.GeometricObject"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Geometry.GeometricObject"/> derived class must
            implement this method. A typical implementation is to call <c>base.CloneCore(this)</c> to
            copy all properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometricObject.OnShapeChanged(System.Object,DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <summary>
            Called when the <see cref="P:DigitalRune.Geometry.GeometricObject.Shape"/> property has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.GeometricObject.OnPoseChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Geometry.GeometricObject.PoseChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Geometry.GeometricObject.OnPoseChanged(System.EventArgs)"/> 
            in a derived class, be sure to call the base class's <see cref="M:DigitalRune.Geometry.GeometricObject.OnPoseChanged(System.EventArgs)"/> 
            method so that registered delegates receive the event.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometricObject.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Geometry.GeometricObject.ShapeChanged"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding 
            <see cref="M:DigitalRune.Geometry.GeometricObject.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)"/> in a derived class, be sure to call the
            base class's <see cref="M:DigitalRune.Geometry.GeometricObject.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)"/> method so that registered
            delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.GeometryException">
            <summary>
            The exception that is thrown when an error in the geometry library occurs.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.GeometryException.Context">
            <summary>
            Gets an object that provides additional information.
            </summary>
            <value>An object that provides additional information.</value>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometryException"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometryException"/> class.
            </summary>
            <param name="context">An object that provides additional information.</param>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometryException"/> class with a specified 
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryException.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometryException"/> class with a specified 
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="context">An object that provides additional information.</param>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometryException"/> class with a specified 
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null"/> if no 
            inner exception is specified.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryException.#ctor(System.String,System.Exception,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.GeometryException"/> class with a specified 
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null"/> if no 
            inner exception is specified.
            </param>
            <param name="context">An object that provides additional information.</param>
        </member>
        <member name="T:DigitalRune.Geometry.GeometryHelper">
            <summary>
            Provides helper methods for various geometry tasks.
            </summary>
            <remarks>
            This class is a collection of several helper methods to compute bounding volumes (see 
            <see cref="M:DigitalRune.Geometry.GeometryHelper.CreateBoundingShape(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F})"/>, 
            <see cref="M:DigitalRune.Geometry.GeometryHelper.ComputeBoundingBox(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Geometry.Pose@)"/> and
            <see cref="M:DigitalRune.Geometry.GeometryHelper.ComputeBoundingSphere(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F},System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@)"/>) and convex hulls (see 
            <see cref="M:DigitalRune.Geometry.GeometryHelper.CreateConvexHull(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F})"/>). The other methods will not be needed
            in most situations. For general collision detection tasks use the types in the namespace 
            <see cref="N:DigitalRune.Geometry.Collisions"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.CreateBoundingShape(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F})">
            <summary>
            Computes a minimum bounding shape that contains all given points.
            </summary>
            <param name="points">The points.</param>
            <returns>A minimum bounding shape that contains all given points.</returns>
            <remarks>
            The returned shape will be a <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/>, a <see cref="T:DigitalRune.Geometry.Shapes.CapsuleShape"/>,
            a <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/>, or a <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape"/> (containing a sphere, capsule,
            or a box). The bounding shape is not guaranteed to be optimal, it is only guaranteed that
            the bounding shape includes all given points.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="points"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.CreateConvexHull(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F})">
            <summary>
            Creates a convex hull mesh for a set of points.
            </summary>
            <param name="points">The points.</param>
            <returns>
            The mesh of the convex hull or <see langword="null"/> if the point list
            is <see langword="null"/> or empty.
            </returns>
            <remarks>
            <para>
            The returned mesh describes the convex hull. All faces are convex polygons.
            </para>
            <para>
            This method calls <see cref="M:DigitalRune.Geometry.GeometryHelper.CreateConvexHull(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Single)"/> with
            no vertex limit and 0 skin width.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.CreateConvexHull(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Single)">
            <summary>
            Creates a convex hull mesh for a set of points.
            </summary>
            <param name="points">The points.</param>
            <param name="vertexLimit">
            The vertex limit. Must be greater than 0. Common values are 32 or 64.
            </param>
            <param name="skinWidth">
            The skin width. Common values are 0.01 or 0.001.
            </param>
            <returns>
            The mesh of the convex hull or <see langword="null"/> if the point list is 
            <see langword="null"/> or empty.
            </returns>
            <remarks>
            <para>
            The returned mesh describes the convex hull. All faces are convex polygons.
            </para>
            <para>
            If the created convex hull has more vertices than <paramref name="vertexLimit"/>, the hull
            will be simplified. The simplified hull is conservative, which means it contains all given
            <paramref name="points"/> and is less "tight" than the exact hull. It is possible that the 
            simplified hull contains slightly more vertices than <paramref name="vertexLimit"/> (e.g. it 
            is possible that for a vertex limit of 32 a hull with 34 vertices is returned).
            </para>
            <para>
            All planes of the convex hull are extruded by the <paramref name="skinWidth"/>. This can be 
            used to increase or decrease the size of the convex hull. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.ToSphericalCoordinates(DigitalRune.Mathematics.Algebra.Vector3F,System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts the given Cartesian coordinates spherical coordinates.
            </summary>
            <param name="v">The Cartesian coordinates.</param>
            <param name="radius">The radius.</param>
            <param name="inclination">
            The inclination angle [0, π] from the z-direction. (Also known as polar angle.)
            </param>
            <param name="azimuth">
            The azimuth angle [-π, π] measured from the Cartesian x-axis.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.ToCartesianCoordinates(System.Single,System.Single,System.Single)">
            <summary>
            Converts the given spherical coordinates to Cartesian coordinates.
            </summary>
            <param name="radius">The radius.</param>
            <param name="inclination">
            The inclination angle [0, π] from the z-direction. (Also known as polar angle.)
            </param>
            <param name="azimuth">
            The azimuth angle [-π, π] measured from the Cartesian x-axis.
            </param>
            <returns>The Cartesian coordinates.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.ExtractPlanes(DigitalRune.Mathematics.Algebra.Matrix44F,System.Collections.Generic.IList{DigitalRune.Geometry.Shapes.Plane},System.Boolean)">
            <overloads>
            <summary>
            Extracts the viewing frustum planes of a world-view-projection matrix.
            </summary>
            </overloads>
            
            <summary>
            Extracts the viewing frustum planes of a world-view-projection matrix.
            </summary>
            <param name="projection">The world-view-projection matrix (DirectX standard).</param>
            <param name="planes">
            IN: An empty list of planes.
            OUT: The planes that define the frustum in the order: near, far, left, right, bottom, top. 
            The plane normals are pointing outwards.
            </param>
            <param name="normalize">
            <see langword="true"/> if the planes should be normalized; otherwise 
            <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="planes"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.ExtractPlanes(Microsoft.Xna.Framework.Matrix,System.Collections.Generic.IList{DigitalRune.Geometry.Shapes.Plane},System.Boolean)">
            <summary>
            Extracts the viewing frustum planes of a world-view-projection matrix. (Only available in
            the XNA-compatible build.)
            </summary>
            <param name="projection">The projection matrix (DirectX standard).</param>
            <param name="planes">
            IN: An empty list of planes. OUT: The planes that define the shape. The plane normals are
            pointing outwards.
            </param>
            <param name="normalize">
            <see langword="true"/> if the planes should be normalized; otherwise 
            <see langword="false"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="planes"/> is <see langword="null"/>.
            </exception>
            <remarks>
            This method is available only in the XNA-compatible build of the DigitalRune.Geometry.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.ComputeBoundingBox(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Geometry.Pose@)">
            <summary>
            Computes the minimum box that contains the given points.
            </summary>
            <param name="points">The points.</param>
            <param name="extent">The box extent (the size in x, y and z).</param>
            <param name="pose">The pose of the box.</param>
            <remarks>
            If a box with the dimensions given in <paramref name="extent"/> is positioned with 
            <paramref name="pose"/> all given points will be inside the box. The box is an 
            approximation and not necessarily optimal.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="points"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoint(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Gets the point on or in an axis-aligned bounding box (AABB) that is closest to a given 
            point.
            </summary>
            <param name="aabb">The AABB.</param>
            <param name="point">The point.</param>
            <param name="pointOnAabb">
            The point on or in <paramref name="aabb"/> that is closest to <paramref name="point"/>.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="aabb"/> and <paramref name="point"/> have 
            contact (<paramref name="pointOnAabb"/> is identical to <paramref name="point"/>); 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetDistance(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
            <overloads>
            <summary>
            Computes the distance between the two objects.
            </summary>
            </overloads>
            
            <summary>
            Computes the distance between the two axis-aligned bounding boxes (AABBs).
            </summary>
            <param name="aabbA">The first AABB.</param>
            <param name="aabbB">The second AABB.</param>
            <returns>
            The distance between the two AABBs. 0 if the AABB are touching or intersecting.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetDistanceSquared(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Computes the squared distance between the two AABBs.
            </summary>
            <param name="aabbA">The first AABB.</param>
            <param name="aabbB">The second AABB.</param>
            <returns>
            The squared distance between the two AABBs.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetDistanceLowerBoundSquared(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <summary>
            Computes a squared lower bound for the distance between the two oriented boxes.
            </summary>
            <param name="boxExtentA">The extent (the widths in x, y and z) of the first box.</param>
            <param name="poseA">The pose of the first box.</param>
            <param name="boxExtentB">The extent (the widths in x, y and z) of the second box.</param>
            <param name="poseB">The pose of second box.</param>
            <returns>The squared lower bound for the distance between the two oriented boxes.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point of a box for a given direction.
            </summary>
            <param name="boxExtent">The box extent (the widths in x, y and z).</param>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetOutcode(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets the box outcode of a point.
            </summary>
            <param name="boxExtent">The box extent.</param>
            <param name="point">The point position in the local box space.</param>
            <returns>The outcode.</returns>
            <remarks>
            The outcode is a code that contains information of the point position relative to the box.
            <list type="bullet">
            <item>
            <description>
            Bit 0 is set if the point is outside of the plane defined by the -x face of the box.
            </description>
            </item>
            <item>
            <description>
            Bit 1 is set if the point is outside the +x plane.
            </description>
            </item>
            <item>
            <description>
            Bit 2 is set if the point is outside the -y plane.
            </description>
            </item>
            <item>
            <description>
            Bit 3 is set if the point is outside the +y plane.
            </description>
            </item>
            <item>
            <description>
            Bit 4 is set if the point is outside the -z plane.
            </description>
            </item>
            <item>
            <description>
            Bit 5 is set if the point is outside the +z plane.
            </description>
            </item>
            </list>
            If the outcode is 0, then the point is inside the box.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Determines whether two axis-aligned bounding boxes (AABBs) overlap.
            </summary>
            <param name="aabbA">The first axis-aligned bounding box (AABB).</param>
            <param name="aabbB">The second axis-aligned bounding box (AABB).</param>
            <returns>
            <see langword="true"/> if the AABBs overlap; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Determines whether the axis-aligned bounding box (AABB) contains or touches the given point.
            </summary>
            <param name="aabb">The axis-aligned bounding box (AABB).</param>
            <param name="point">The point.</param>
            <returns>
            <see langword="true"/> if AABB and the point have contact; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Boolean)">
            <overloads>
            <summary>
            Determines whether two primitives have contact.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the axis-aligned bounding box (AABB) and a box have contact.
            </summary>
            <param name="aabb">The axis-aligned bounding box (AABB).</param>
            <param name="boxExtent">The box extent (the widths in x, y, and z).</param>
            <param name="boxPose">The pose of the box in the space of the AABB.</param>
            <param name="makeEdgeTests">
            If set to <see langword="true"/> the 9 edge-edge tests of the separating-axis-test (SAT) are 
            performed; otherwise, the edge-edge tests are left out and the returned value is 
            conservative, which means that a contact can be reported even if there is no contact.
            </param>
            <returns>
            <see langword="true"/> if the AABB and the box are touching or penetrating; otherwise, 
            <see langword="false"/> if the object are separated.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Determines whether the specified point is inside the box.
            </summary>
            <param name="boxExtent">The box extent (the widths in x, y, and z).</param>
            <param name="point">The point (in the local space of the box).</param>
            <returns>
            <see langword="true"/> if the specified point is inside; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.ComputeBoundingCapsule(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Single@,System.Single@,DigitalRune.Geometry.Pose@)">
            <summary>
            Computes a tight-fitting capsule that contains the given points.
            </summary>
            <param name="points">The points.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The height of the capsule.</param>
            <param name="pose">The pose of the capsule.</param>
            <remarks>
            The computed capsule is an approximation. Capsules work best for long objects.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="points"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Ray)">
            <summary>
            Determines whether the given axis-aligned bounding box (AABB) and ray overlap.
            </summary>
            <param name="aabb">The axis-aligned bounding box (AABB).</param>
            <param name="ray">The ray.</param>
            <returns>
            <see langword="true"/> if the AABB and the ray have a contact; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Ray,System.Single)">
            <summary>
            Determines whether the given axis-aligned bounding box (AABB) and ray overlap.
            </summary>
            <param name="aabb">The axis-aligned bounding box (AABB).</param>
            <param name="ray">The ray.</param>
            <param name="epsilon">
            A small epsilon value by which the AABB is extended to avoid missing contacts because of
            numerical problems. (Especially in ray vs. triangle mesh tests, we do not want to miss
            collisions between triangle.)
            </param>
            <returns>
            <see langword="true"/> if the AABB and the ray have a contact; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContactFast(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Ray)">
            <summary>
            Determines whether the given axis-aligned bounding box (AABB) and ray overlap. This method
            allows false positives!
            </summary>
            <param name="aabb">The axis-aligned bounding box (AABB).</param>
            <param name="ray">The ray.</param>
            <returns>
            <see langword="true"/> if the AABB and the ray have a contact; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContactFast(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Determines whether an axis-aligned bounding box (AABB) and a ray have contact. This method
            allows false positives!
            </summary>
            <param name="aabb">The axis-aligned bounding box (AABB).</param>
            <param name="rayOrigin">The ray origin.</param>
            <param name="rayDirectionInverse">
            The inverse of the ray direction (<c>1 / ray.Direction</c>).
            </param>
            <param name="rayLength">The length of the ray.</param>
            <returns>
            <see langword="true"/> if the AABB and the ray have a contact; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            This method will return <see langword="true"/> if a ray is in the plane that goes through
            an AABB side (false positive).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single,System.Single)">
            <summary>
            Determines whether an axis-aligned bounding box (AABB) and a ray have contact.
            </summary>
            <param name="aabb">The axis-aligned bounding box (AABB).</param>
            <param name="rayOrigin">The ray origin.</param>
            <param name="rayDirectionInverse">
            The inverse of the ray direction (<c>1 / ray.Direction</c>).
            </param>
            <param name="rayLength">The length of the ray.</param>
            <param name="epsilon">
            A small epsilon value by which the AABB is extended to avoid missing contacts because of
            numerical problems. (Especially in ray vs. triangle mesh tests, we do not want to miss
            collisions between triangle.)
            </param>
            <returns>
            <see langword="true"/> if the AABB and the ray have a contact; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Unlike <see cref="M:DigitalRune.Geometry.GeometryHelper.HaveContactFast(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)"/>, this method is exact.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Determines whether a given AABB is hit by a moving AABB.
            </summary>
            <param name="aabbA">The axis-aligned bounding box.</param>
            <param name="aabbB">The moving axis-aligned bounding box.</param>
            <param name="movementB">
            The movement vector of <paramref name="aabbB"/>. <paramref name="aabbB"/> is given at its
            start position. The movement vector is added to the start position of 
            <paramref name="aabbB"/> to define its end position. 
            </param>
            <returns>
            <see langword="true"/> if the moving AABB (<paramref name="aabbB"/>) overlaps the static
            AABB (<paramref name="aabbA"/>) at any time during its movement.
            </returns>
            <remarks>
            <para>
            This method does not take rotations into account, only linear movement. If the AABBs
            represent two rotating objects, make sure that the AABBs are large enough to contain the
            rotating objects for all rotation angles. 
            </para>
            <para>
            Remember: A situation where both AABBs are moving can always be re-framed as one static AABB
            and the other AABB moving relative to the static AABB.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoint(DigitalRune.Geometry.Shapes.Line,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Gets the closest point of a line to a point.
            </summary>
            <param name="point">The point.</param>
            <param name="line">The line.</param>
            <param name="closestPointOnLine">
            The point on the line that is closest to <paramref name="point"/>.
            </param>
            <returns><see langword="true"/> if the <paramref name="point"/> is on the line.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoints(DigitalRune.Geometry.Shapes.Line,DigitalRune.Geometry.Shapes.Line,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <overloads>
            <summary>
            Gets the closest points between two primitives.
            </summary>
            </overloads>
            
            <summary>
            Gets the closest points of two lines.
            </summary>
            <param name="line0">The first line.</param>
            <param name="line1">The second line.</param>
            <param name="point0">
            The point on <paramref name="line0"/> that is closest to <paramref name="line1"/>.
            </param>
            <param name="point1">
            The point on <paramref name="line1"/> that is closest to <paramref name="line0"/>.
            </param>
            <returns>
            <see langword="true"/> if the lines are touching (<paramref name="point0"/> and 
            <paramref name="point1"/> are identical); otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoints(DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Gets the closest point of a line segment to a point.
            </summary>
            <param name="point">The point.</param>
            <param name="lineSegment">The line segment.</param>
            <param name="closestPointOnLineSegment">
            The point on the line segment that is closest to <paramref name="point"/>.</param>
            <returns>
            <see langword="true"/> if the <paramref name="point"/> is on the line segment; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoints(DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Gets the closest points of two line segments.
            </summary>
            <param name="segment0">The first line segment.</param>
            <param name="segment1">The second line segment.</param>
            <param name="point0">
            The point on <paramref name="segment0"/> that is closest to <paramref name="segment1"/>.
            </param>
            <param name="point1">
            The point on <paramref name="segment1"/> that is closest to <paramref name="segment0"/>.
            </param>
            <returns>
            <see langword="true"/> if the line segments are touching (<paramref name="point0"/> and 
            <paramref name="point1"/> are identical); otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoints(DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Geometry.Shapes.Line,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Gets the closest points of a line and a line segment.
            </summary>
            <param name="line">The line.</param>
            <param name="segment">The line segment.</param>
            <param name="pointOnLine">
            The point on <paramref name="line"/> that is closest to <paramref name="segment"/>.
            </param>
            <param name="pointOnSegment">
            The point on <paramref name="segment"/> that is closest to <paramref name="line"/>.
            </param>
            <returns>
            <see langword="true"/> if the line and the line segment are touching 
            (<paramref name="pointOnLine"/> and <paramref name="pointOnSegment"/> are identical); 
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetLineParameters(DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Geometry.Shapes.LineSegment,System.Single@,System.Single@)">
            <summary>
            Gets the line parameters for the closest points.
            </summary>
            <param name="segmentA">The first segment.</param>
            <param name="segmentB">The second segment.</param>
            <param name="s">The line parameter for <paramref name="segmentA"/>.</param>
            <param name="t">The line parameter for <paramref name="segmentB"/>.</param>
            <remarks>
            Line parameter 0 is the start point of the line segment. Line parameter 1 is the end of the
            line segment. A line parameter between 0 and 1 defines a point on the line segment. The line
            parameters are not clamped, thus they can be outside [0, 1].
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetContact(DigitalRune.Geometry.Meshes.ITriangleMesh,DigitalRune.Geometry.Shapes.Ray,System.Single@)">
            <summary>
            Gets the contact of ray with a triangle mesh.
            </summary>
            <param name="triangleMesh">The triangle mesh.</param>
            <param name="ray">The ray.</param>
            <param name="hitDistance">
            The hit distance. This is the distance on the ray from the ray origin to the contact.
            </param>
            <returns>
            <see langword="true"/> if the ray hits the front face of a triangle mesh triangle; 
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method returns any contact, not necessarily the first contact of the ray with the
            triangle mesh! The mesh triangles are treated as one-sided.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetVolume(DigitalRune.Geometry.Meshes.ITriangleMesh)">
            <summary>
            Gets the enclosed volume of a triangle mesh.
            </summary>
            <param name="triangleMesh">The triangle mesh.</param>
            <returns>
            The enclosed volume of the given triangle mesh.
            </returns>
            <remarks>
            <para>
            This method assumes that the given triangle mesh is a closed mesh without holes.
            </para>
            <para>
            Remember: To compute the volume of a scaled mesh, you can compute the volume of the
            unscaled mesh and multiply the result with the scaling factors: 
            </para>
            <para>
            <i>volume<sub>scaled</sub> = volume<sub>unscaled</sub> * scale<sub>X</sub> * scale<sub>Y</sub> * scale<sub>Z</sub></i>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="triangleMesh"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.CreateIcosphere(System.Int32,System.Boolean)">
            <summary>
            Creates a sphere (or hemisphere) by successively subdividing an icosahedron.
            </summary>
            <param name="subdivisions">The number of subdivisions. See remarks.</param>
            <param name="hemisphere">
            If set to <see langword="true"/> only the upper half (positive y) of the sphere is created;
            otherwise, the full sphere is created.
            </param>
            <returns>The triangle mesh of the sphere (or hemisphere).</returns>
            <remarks>
            <para>
            The resulting triangles use counter-clockwise vertex order. The triangles face outward, i.e.
            when looking at a triangle from the outside its vertices are ordered counter-clockwise.
            </para>
            <para>
            A minimum of 1 subdivision is required to create hemisphere. If you plan to render the mesh
            using a 16-bit index buffer then the max number of subdivisions is 5!
            <list type="bullet">
            <item><description>0 subdivisions: 20 triangles</description></item>
            <item><description>1 subdivisions: 240 triangles</description></item>
            <item><description>2 subdivisions: 320 triangles</description></item>
            <item><description>3 subdivisions: 1280 triangles</description></item>
            <item><description>4 subdivisions: 5120 triangles</description></item>
            <item><description>5 subdivisions: 20480 triangles</description></item>
            <item><description>6 subdivisions: 81920 triangles</description></item>
            <item><description>7 subdivisions: ...</description></item>
            </list>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="subdivisions"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="hemisphere"/> is <see langword="true"/>, but <paramref name="subdivisions"/>
            is less than 1. At least 1 subdivision is required to create a hemisphere.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.MergeDuplicatePositions(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Single)">
            <overloads>
            <summary>
            Merges duplicate positions.
            </summary>
            </overloads>
            
            <summary>
            Merges duplicate positions.
            </summary>
            <param name="positions">
            In: The positions.<br/>
            Out: The positions without duplicates.
            </param>
            <param name="positionTolerance">
            The position tolerance. If the distance between two positions is less than this value,
            the positions are merged.
            </param>
            <returns>The number of removed positions.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="positions"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="positionTolerance"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.MergeDuplicatePositions(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Single,System.Int32[]@)">
            <summary>
            Merges duplicate positions.
            </summary>
            <param name="positions">
            In: The positions.<br/>
            Out: The positions without duplicates.
            </param>
            <param name="positionTolerance">
            The position tolerance. If the distance between two positions is less than this value,
            the positions are merged.
            </param>
            <param name="positionRemap">
            An array with one entry per position that describes how to reorder the original positions.
            This maps the original position index to the new position index. The array is
            <see langword="null"/> if no positions were removed.
            </param>
            <returns>The number of removed positions.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="positions"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="positionTolerance"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.ArePointsOnOppositeSides(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Determines whether two points P and Q are on opposite sides of a plane. The plane is
            determined by three points (A, B, C).
            </summary>
            <param name="pointP">The point P.</param>
            <param name="pointQ">The point Q.</param>
            <param name="planePointA">The plane point A.</param>
            <param name="planePointB">The plane point B.</param>
            <param name="planePointC">The plane point C.</param>
            <returns>
            <see langword="true"/> if P and Q are on opposite sides; <see langword="false"/> if they are
            on the same side; and <see langword="null"/> if the point is on the plane (within a 
            numerical tolerance) or if the case is degenerate (A, B, C does not form a valid triangle).
            </returns>
            <remarks>
            This method creates a plane from the three points A, B, and C. The points must be in ordered
            counter-clockwise. The front-face (which points to the outside of the shape - the empty 
            half-space) is defined through the counter-clockwise order of the points.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoint(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <overloads>
            <summary>
            Gets the point on a primitive that is closest to a given point.
            </summary>
            </overloads>
            
            <summary>
            Gets the point on a plane surface that is closest to a given point.
            </summary>
            <param name="point">The point position.</param>
            <param name="plane">The plane.</param>
            <param name="pointOnPlane">
            The point on the surface of the plane that is closest to <paramref name="point"/>.
            </param>
            <returns>
            <see langword="true"/> if the point lies in the plane (<paramref name="pointOnPlane"/> and 
            <paramref name="point"/> are numerically identical); otherwise <see langword="false"/> if 
            the point is either above or below the plane.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoint(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets the point on a plane surface that is closest to a given point.
            </summary>
            <param name="point">The point position.</param>
            <param name="plane">The plane.</param>
            <returns>
            The point on the surface of the plane that is closest to <paramref name="point"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoints(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Geometry.Shapes.Line,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Gets the closest points of a line and a plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="line">The line.</param>
            <param name="pointOnPlane">
            The point on <paramref name="plane"/> that is closest to <paramref name="line"/>.
            </param>
            <param name="pointOnLine">
            The point on <paramref name="line"/> that is closest to <paramref name="plane"/>.
            </param>
            <returns>
            <see langword="true"/> if the line and the plane are touching 
            (<paramref name="pointOnLine"/> and <paramref name="pointOnPlane"/> are identical); 
            otherwise <see langword="false"/>
            </returns>
            <remarks>
            The plane is treated as a real 2D plane - not as a 3D half-space.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoints(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Gets the closest points of a line and a plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="lineSegment">The line segment.</param>
            <param name="pointOnPlane">
            The point on <paramref name="plane"/> that is closest to <paramref name="lineSegment"/>.
            </param>
            <param name="pointOnLineSegment">
            The point on <paramref name="lineSegment"/> that is closest to <paramref name="plane"/>.
            </param>
            <returns>
            <see langword="true"/> if the line segment and the plane are touching 
            (<paramref name="pointOnLineSegment"/> and <paramref name="pointOnPlane"/> are identical);
            otherwise <see langword="false"/>
            </returns>
            <remarks>
            The plane is treated as a real 2D plane - not as a 3D half-space.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetDistance(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets the signed distance of a point to a plane surface.
            </summary>
            <param name="point">The point.</param>
            <param name="plane">The plane.</param>
            <returns>
            The signed distance. This value is positive if the point is in the positive half-space
            (separation); otherwise, negative (penetration).
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetIntersection(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Geometry.Shapes.Plane,DigitalRune.Geometry.Shapes.Plane)">
            <summary>
            Gets the intersection point of three planes.
            </summary>
            <param name="planeA">The first plane.</param>
            <param name="planeB">The second plane.</param>
            <param name="planeC">The third plane.</param>
            <returns>
            The point that touches all three planes. (<see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NaN"/>, 
            <see cref="F:System.Single.NaN"/>) is returned if there is no unique intersection point, for example,
            when two planes are parallel or the planes intersect in a line.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Plane)">
            <summary>
            Determines whether the given axis-aligned bounding box (AABB) and plane overlap.
            </summary>
            <param name="aabb">The axis-aligned bounding box (AABB).</param>
            <param name="plane">The plane.</param>
            <returns>
            <see langword="true"/> if the AABB and the plane have a contact; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            The <paramref name="plane"/> defines a "half-space". This method returns 
            <see langword="true"/> if the AABB is intersecting the plane or if the
            AABB is completely behind the plane in the negative half-space.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.ComputeBoundingSphere(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F},System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Computes the minimum sphere that contains the given points.
            </summary>
            <param name="points">The points.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="center">The center of the sphere.</param>
            <remarks>
            The computed sphere is minimal and not an approximation. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="points"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.ComputeWelzlSphere(System.Collections.Generic.List{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Int32,System.Int32,System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Computes the minimum sphere using the Welzl algorithm.
            </summary>
            <param name="points">The list of points.</param>
            <param name="firstPoint">The index of the first point to consider.</param>
            <param name="lastPoint">The index of the last point to consider.</param>
            <param name="numberOfSupportPoints">The number of support points.</param>
            <param name="radius">The sphere radius.</param>
            <param name="center">The sphere center.</param>
            <remarks>
            <paramref name="points"/> is organized like this: At the index <paramref name="firstPoint"/> 
            is the first new point that should be handled. All support points are stored directly before
            <paramref name="firstPoint"/>. All points up to the index <paramref name="lastPoint"/> 
            (inclusive) should be handled in this call.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.ComputeCircumscribedSphere(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <overloads>
            <summary>
            Computes a sphere where all given points touch the surface.
            </summary>
            </overloads>
            
            <summary>
            Computes a sphere where all given points touch the surface.
            </summary>
            <param name="point0">The first point.</param>
            <param name="point1">The second point.</param>
            <param name="radius">The sphere radius.</param>
            <param name="center">The sphere center.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.ComputeCircumscribedSphere(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Computes a sphere where all given points touch the surface.
            </summary>
            <param name="point0">The first point.</param>
            <param name="point1">The second point.</param>
            <param name="point2">The third point.</param>
            <param name="radius">The sphere radius.</param>
            <param name="center">The sphere center.</param>
            <remarks>
            <para>
            A circumscribed sphere is not necessarily the minimal sphere that contains the given points.
            There might be a smaller sphere where the surface touches only 2 points and the third points
            is inside the sphere. To get a minimal sphere call <see cref="M:DigitalRune.Geometry.GeometryHelper.ComputeBoundingSphere(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F},System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@)"/>.
            </para>
            <para>
            The given points must form a valid triangle with an area greater than 0; otherwise, the
            result is not defined (radius is <see cref="F:System.Single.NaN"/>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.ComputeCircumscribedSphere(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Computes a sphere where all given points touch the surface.
            </summary>
            <param name="point0">The first point.</param>
            <param name="point1">The second point.</param>
            <param name="point2">The third point.</param>
            <param name="point3">The fourth point.</param>
            <param name="radius">The sphere radius.</param>
            <param name="center">The sphere center.</param>
            <remarks>
            <para>
            A circumscribed ball is not necessarily the minimal sphere that contains the given points.
            There might be a smaller sphere where the surface touches only 2 points and the other points
            are inside the sphere. To get a minimal sphere call <see cref="M:DigitalRune.Geometry.GeometryHelper.ComputeBoundingSphere(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F},System.Single@,DigitalRune.Mathematics.Algebra.Vector3F@)"/>.
            </para>
            <para>
            The given points must form a tetrahedron with a volume greater than 0; otherwise, the
            result is not defined (radius is <see cref="F:System.Single.NaN"/>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(System.Single,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Determines whether the specified point is inside the sphere.
            </summary>
            <param name="sphereRadius">The sphere radius.</param>
            <param name="point">The point (in the local space of the sphere).</param>
            <returns>
            <see langword="true"/> if the specified point is inside; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.GeometryHelper.Sensor">
            <summary>
            A sensor consists of sampling direction and the index of the point that was sampled.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.GeometryHelper.SensorTriangle">
            <summary>
            A sensor triangle consists of three sensors.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.GeometryHelper.PointCollector">
            <summary>
            A list of points.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.SampleConvexShape(DigitalRune.Geometry.Shapes.ConvexShape,System.Single,System.Int32)">
            <summary>
            Creates a list of vertices of the convex hull by sampling the support mapping of a 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>.
            </summary>
            <param name="shape">The shape.</param>
            <param name="distanceThreshold">
            The distance threshold; must be greater than or equal to 0.
            </param>
            <param name="iterationLimit">
            The iteration limit; must be greater than or equal to 1.
            </param>
            <returns>The points of the convex hull.</returns>
            <remarks>
            <para>
            This method refines the convex hull in several iterations. The convex hull will be refined 
            as long as the new vertices are significantly away from the previously computed hull (using 
            <paramref name="distanceThreshold"/> as the limit). The method will also terminate if more 
            than <paramref name="iterationLimit"/> iterations have been performed.
            </para>
            <para>
            Use this method only for 3-dimensional and finite shapes (e.g. not for 
            <see cref="T:DigitalRune.Geometry.Shapes.PointShape"/>, <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/>, etc.).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shape"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="distanceThreshold"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="iterationLimit"/> is less than 1.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Geometry.Shapes.Triangle)">
            <summary>
            Determines whether two triangles overlap.
            </summary>
            <param name="triangle0">The first triangle.</param>
            <param name="triangle1">The second triangle.</param>
            <returns>
            <see langword="true" /> if the specified triangles intersect;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.HaveContact(DigitalRune.Geometry.Shapes.Triangle@,DigitalRune.Geometry.Shapes.Triangle@)">
            <summary>
            Determines whether two triangles overlap.
            </summary>
            <param name="triangle0">The first triangle. (The triangle will not be modified.)</param>
            <param name="triangle1">The second triangle. (The triangle will not be modified.)</param>
            <returns>
            <see langword="true" /> if the specified triangles intersect;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetBarycentricFromPoint(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Mathematics.Algebra.Vector3F,System.Single@,System.Single@,System.Single@)">
            <overloads>
            <summary>
            Gets the barycentric coordinates of a point and a triangle.
            </summary>
            </overloads>
            
            <summary>
            Gets the barycentric coordinates of a point and a triangle.
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="point">The point.</param>
            <param name="u">The barycentric coordinate u.</param>
            <param name="v">The barycentric coordinate v.</param>
            <param name="w">The barycentric coordinate w.</param>
            <remarks>
            The <paramref name="point"/> is projected into the plane of the <paramref name="triangle"/>
            and the barycentric coordinates are computed for the project point.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetBarycentricFromPoint(DigitalRune.Geometry.Shapes.Triangle@,DigitalRune.Mathematics.Algebra.Vector3F@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Determines whether the projection of a point (into the triangle plane) is inside the given
            triangle. (This overload uses per-reference parameters for performance.)
            </summary>
            <inheritdoc cref="M:DigitalRune.Geometry.GeometryHelper.GetBarycentricFromPoint(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Mathematics.Algebra.Vector3F,System.Single@,System.Single@,System.Single@)"/>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetContact(DigitalRune.Geometry.Shapes.Ray,DigitalRune.Geometry.Shapes.Triangle,System.Boolean,System.Single@)">
            <summary>
            Computes the ray vs. triangle contact.
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="isTwoSided">
            if set to <see langword="true"/> the triangle is treated as a two-sided triangle. Ray
            contacts with the back-side of a one-sided triangle are not reported.
            </param>
            <param name="ray">The ray.</param>
            <param name="hitDistance">
            The hit distance. This is the distance on the ray from the ray origin to the contact point.
            </param>
            <returns>
            <see langword="true"/> if the ray hits the triangle; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetPointFromBarycentric(DigitalRune.Geometry.Shapes.Triangle,System.Single,System.Single,System.Single)">
            <summary>
            Gets the point on the triangle defined by the given barycentric coordinates.
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="u">The barycentric coordinate u.</param>
            <param name="v">The barycentric coordinate v.</param>
            <param name="w">The barycentric coordinate w.</param>
            <returns>
            The point computes as 
              <paramref name="u"/> * <see cref="F:DigitalRune.Geometry.Shapes.Triangle.Vertex0"/> 
              + <paramref name="v"/> * <see cref="F:DigitalRune.Geometry.Shapes.Triangle.Vertex1"/> 
              + <paramref name="w"/> * <see cref="F:DigitalRune.Geometry.Shapes.Triangle.Vertex2"/>.
            </returns>
            <remarks>
            The barycentric coordinates are not clamped. The resulting point can lie outside of the
            triangle.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.IsInFront(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Determines whether the point is in front of the triangle.
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="point">The point.</param>
            <returns>
            A value greater than 0 if the point is in front. A value less than 0 if the point is on the
            back-side.
            </returns>
            <remarks>
            A point is in front of the triangle if the vertex order of the triangle viewed from the
            point position is counter-clockwise (CCW). The absolute of the returned value is linearly
            proportional to the distance from the triangle plane.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.IsOver(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Mathematics.Algebra.Vector3F)">
            <overloads>
            <summary>
            Determines whether the projection of a point (into the triangle plane) is inside the given
            triangle.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the projection of a point (into the triangle plane) is inside the given
            triangle.
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="point">The point.</param>
            <returns>
            <see langword="true"/> if the orthogonal projection of <paramref name="point"/> is inside 
            the triangle; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.IsOver(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Determines whether the projection of a point (into the triangle plane) is inside the given
            triangle.
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="point">The point.</param>
            <param name="epsilon">
            The allowed numerical tolerance. This value "increases" the size of the triangle and makes
            the check tolerant to numerical errors. Use a very small value, like 0.0001.
            </param>
            <returns>
            <see langword="true"/> if the orthogonal projection of <paramref name="point"/> is inside 
            the triangle; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.IsOver(DigitalRune.Geometry.Shapes.Triangle@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Determines whether the projection of a point (into the triangle plane) is inside the given
            triangle. (This overload uses per-reference parameters for performance.)
            </summary>
            <inheritdoc cref="M:DigitalRune.Geometry.GeometryHelper.IsOver(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Mathematics.Algebra.Vector3F)"/>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.GetClosestPoint(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Mathematics.Algebra.Vector3F,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the barycentric coordinates (<paramref name="u"/>, <paramref name="v"/>,
            <paramref name="w"/> of the point in a triangle which is closest to
            the given <paramref name="point"/>).
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="point">The point.</param>
            <param name="u">The barycentric coordinate u.</param>
            <param name="v">The barycentric coordinate v.</param>
            <param name="w">The barycentric coordinate w.</param>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.Triangulate(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.IList{System.Int32})">
            <inheritdoc cref="M:DigitalRune.Geometry.Meshes.Triangulator.Triangulate(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.IList{System.Int32})"/>
        </member>
        <member name="M:DigitalRune.Geometry.GeometryHelper.Triangulate(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Int32,System.Collections.Generic.IList{System.Int32})">
            <inheritdoc cref="M:DigitalRune.Geometry.Meshes.Triangulator.Triangulate(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Int32,System.Collections.Generic.IList{System.Int32})"/>
        </member>
        <member name="T:DigitalRune.Geometry.IGeometricObject">
            <summary>
            Defines an object that has a <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape"/> and a <see cref="P:DigitalRune.Geometry.IGeometricObject.Pose"/> (position and 
            orientation).
            </summary>
            <remarks>
            <para>
            Classes that need to implement <see cref="T:DigitalRune.Geometry.IGeometricObject"/> can derive from 
            <see cref="T:DigitalRune.Geometry.GeometricObject"/>.
            </para>
            <para>
            <strong>Important:</strong> An <see cref="T:DigitalRune.Geometry.IGeometricObject"/> instance registers event 
            handlers for the <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed"/> event of the contained 
            <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape"/>. Therefore, a <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> will have an indirect reference
            to the <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. This is no problem if the geometric object exclusively
            owns the shape. However, this could lead to problems ("life extension bugs" a.k.a. "memory
            leaks") when multiple geometric objects share the same shape: One geometric object is no
            longer used but it cannot be collected by the garbage collector because the shape still holds
            a reference to the object.
            </para>
            <para>
            Therefore, when <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>s are shared between multiple 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/>s: Always set the property <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape"/> to 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/> when the <see cref="T:DigitalRune.Geometry.IGeometricObject"/> 
            is no longer used. <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/> is a special 
            immutable shape that never raises any <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed"/> events. Setting 
            <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape"/> to <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/> ensures that the internal event 
            handlers are unregistered and the object can be garbage-collected properly.
            </para>
            <para>
            <strong>Cloning:</strong> Geometric objects are cloneable. The method <see cref="M:DigitalRune.Geometry.IGeometricObject.Clone"/> 
            creates a deep copy of the geometric object - except when documented otherwise (see 
            description of implementing classes).
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The support for cloning of geometric objects is built-in
            in DigitalRune Geometry because several applications built upon the library rely on the 
            cloning mechanism. The DigitalRune Geometry library internally does not use the cloning 
            mechanism. So, if you need to write your own type that implements 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/> and your own application does not require to clone geometric 
            objects, you can simply omit the implementation of <see cref="M:DigitalRune.Geometry.IGeometricObject.Clone"/> - just throw a 
            <see cref="T:System.NotImplementedException"/>.
            </para>
            </remarks>
            <example>
            The following is basically the implementation of <see cref="T:DigitalRune.Geometry.GeometricObject"/>. The source 
            code is shown here to illustrate how the interface <see cref="T:DigitalRune.Geometry.IGeometricObject"/> should be 
            implemented.
            <code lang="csharp">
            <![CDATA[
            using System;
            using DigitalRune.Geometry.Shapes;
            using DigitalRune.Mathematics.Algebra;
            
            
            namespace DigitalRune.Geometry
            {
              [Serializable]
              public class GeometricObject : IGeometricObject
              {
                //--------------------------------------------------------------
                #region Properties & Events
                //--------------------------------------------------------------
            
                public Aabb Aabb
                {
                  get
                  {
                    if (_aabbIsValid == false)
                    {
                      _aabb = Shape.GetAabb(Scale, Pose);
                      _aabbIsValid = true;
                    }
            
                    return _aabb;
                  }
                }
                private Aabb _aabb;
                private bool _aabbIsValid;
            
            
                public Pose Pose
                {
                  get 
                  { 
                    return _pose; 
                  }
                  set
                  {
                    if (_pose != value)
                    {
                      _pose = value;
                      OnPoseChanged(EventArgs.Empty);
                    }
                  }
                }
                private Pose _pose;
            
            
                public Shape Shape
                {
                  get 
                  {   
                    return _shape; 
                  }
                  set
                  {
                    if (value == null)
                      throw new ArgumentNullException("value");
            
                    if (_shape != null)
                      _shape.Changed -= OnShapeChanged;
            
                    _shape = value;
                    _shape.Changed += OnShapeChanged;
                    OnShapeChanged(ShapeChangedEventArgs.Empty);
                  }
                }
                private Shape _shape;
            
            
                public Vector3F Scale
                {
                  get 
                  {
                    return _scale; 
                  }
                  set
                  {
                    if (_scale != value)
                    {
                      _scale = value;
                      OnShapeChanged(ShapeChangedEventArgs.Empty);
                    }
                  }
                }
                private Vector3F _scale;
            
            
                public event EventHandler<EventArgs> PoseChanged;
            
            
                public event EventHandler<ShapeChangedEventArgs> ShapeChanged;
                #endregion
            
            
                //--------------------------------------------------------------
                #region Creation & Cleanup
                //--------------------------------------------------------------
            
                public GeometricObject()
                {
                  _shape = Shape.Empty;
                  _scale = Vector3F.One;
                  _pose = Pose.Identity;
                }
                #endregion
            
            
                //--------------------------------------------------------------
                #region Methods
                //--------------------------------------------------------------
            
                IGeometricObject IGeometricObject.Clone()
                {
                  return Clone();
                } 
            
            
                public GeometricObject Clone()
                {
                  GeometricObject clone = CreateInstance();
                  clone.CloneCore(this);
                  return clone;
                }
            
            
                private GeometricObject CreateInstance()
                {
                  GeometricObject newInstance = CreateInstanceCore();
                  if (GetType() != newInstance.GetType())
                  {
                    string message = String.Format(
                      "Cannot clone shape. The derived class {0} does not implement CreateInstanceCore().",
                      GetType());
                    throw new InvalidOperationException(message);
                  }
            
                  return newInstance;
                }
            
            
                protected virtual GeometricObject CreateInstanceCore()
                {
                  return new GeometricObject();
                }
            
            
                protected virtual void CloneCore(GeometricObject sourceShape)
                {
                  Pose = sourceShape.Pose;
                  Shape = sourceShape.Shape.Clone();
                  Scale = sourceShape.Scale;
                }
            
            
                private void OnShapeChanged(object sender, ShapeChangedEventArgs eventArgs)
                {
                  OnShapeChanged(eventArgs);
                }
            
            
                protected virtual void OnPoseChanged(EventArgs eventArgs)
                {
                  _aabbIsValid = false;
            
                  var handler = PoseChanged;
            
                  if (handler != null)
                    handler(this, eventArgs);
                }
            
            
                protected virtual void OnShapeChanged(ShapeChangedEventArgs eventArgs)
                {
                  _aabbIsValid = false;
            
                  var handler = ShapeChanged;
            
                  if (handler != null)
                    handler(this, eventArgs);
                }
                #endregion
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:DigitalRune.Geometry.IGeometricObject.Aabb">
            <summary>
            Gets the axis-aligned bounding box (AABB).
            </summary>
            <value>The axis-aligned bounding box (AABB).</value>
        </member>
        <member name="P:DigitalRune.Geometry.IGeometricObject.Pose">
            <summary>
            Gets the pose (position and orientation).
            </summary>
            <value>The pose (position and orientation).</value>
            <remarks>
            <para>
            Changing this property raises the <see cref="E:DigitalRune.Geometry.IGeometricObject.PoseChanged"/> event.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.IGeometricObject.Shape">
            <summary>
            Gets the shape.
            </summary>
            <value>
            The shape. The shape must not be <see langword="null"/>, but it can be of type 
            <see cref="T:DigitalRune.Geometry.Shapes.EmptyShape"/> (see <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/>).
            </value>
            <remarks>
            <para>
            Changing this property raises the <see cref="E:DigitalRune.Geometry.IGeometricObject.ShapeChanged"/> event.
            </para>
            <para>
            <strong>Important:</strong> An <see cref="T:DigitalRune.Geometry.IGeometricObject"/> instance registers event 
            handlers for the <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed"/> event of the contained 
            <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape"/>. Therefore, a <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> will have an indirect
            reference to the <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. This is no problem if the geometric object
            exclusively owns the shape. However, this could lead to problems ("life extension bugs"
            a.k.a. "memory leaks") when multiple geometric objects share the same shape: One geometric
            object is no longer used but it cannot be collected by the garbage collector because the
            shape still holds a reference to the object.
            </para>
            <para>
            Therefore, when <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>s are shared between multiple 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/>s: Always set the property <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape"/> to 
            <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/> when the <see cref="T:DigitalRune.Geometry.IGeometricObject"/> 
            is no longer used. <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/> is a special 
            immutable shape that never raises any <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed"/> events. Setting 
            <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape"/> to <see cref="F:DigitalRune.Geometry.Shapes.Shape.Empty"/> ensures that the internal event 
            handlers are unregistered and the object can be garbage-collected properly.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.IGeometricObject.Scale">
            <summary>
            Gets the scale.
            </summary>
            <value>
            The scale factors for the dimensions x, y and z. The default value is (1, 1, 1), which means
            "no scaling".
            </value>
            <remarks>
            <para>
            This value is a scale factor that scales the <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape"/> of this geometric object.
            The scale can even be negative to mirror an object.
            </para>
            <para>
            Changing this value does not actually change any values in the <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape"/> instance.
            Collision algorithms and anyone who uses this geometric object must use the shape and apply 
            the scale factor as appropriate. The scale is automatically applied in the property
            <see cref="P:DigitalRune.Geometry.IGeometricObject.Aabb"/>.
            </para>
            <para>
            Changing this property raises the <see cref="E:DigitalRune.Geometry.IGeometricObject.ShapeChanged"/> event.
            </para>
            </remarks>
        </member>
        <member name="E:DigitalRune.Geometry.IGeometricObject.PoseChanged">
            <summary>
            Occurs when the <see cref="P:DigitalRune.Geometry.IGeometricObject.Pose"/> was changed.
            </summary>
        </member>
        <member name="E:DigitalRune.Geometry.IGeometricObject.ShapeChanged">
            <summary>
            Occurs when the <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape"/> or <see cref="P:DigitalRune.Geometry.IGeometricObject.Scale"/> was changed.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.IGeometricObject.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.IGeometricObject"/> that is a clone (deep copy) of the current
            instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Geometry.IGeometricObject"/> that is a clone (deep copy) of the current instance.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.CDIsland">
            <summary>
            Describes a group of triangles that create one convex part.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.CDIslandLink">
            <summary>
            Describes a link between two <see cref="T:DigitalRune.Geometry.Meshes.CDIsland"/>s.
            </summary>
            <remarks>
            Linked islands are candidates for merging. 
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.CDTriangle">
            <summary>
            Describes a triangle during the convex decomposition process.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.ConvexDecomposition">
            <summary>
            Performs an approximate convex decomposition of an input mesh. (Not available on these
            platforms: Silverlight, Windows Phone 7, Xbox 360)
            </summary>
            <remarks>
            <para>
            An approximate convex decomposition takes a mesh and computes a composite shape of convex
            polyhedra (see <see cref="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.Decomposition"/>) that resembles the original mesh.
            </para>
            <para>
            To use this process: Create an instance of this class. Set decomposition parameters (like 
            <see cref="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.AllowedConcavity"/>, <see cref="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.VertexLimit"/>, etc.). Then start the process with 
            <see cref="M:DigitalRune.Geometry.Meshes.ConvexDecomposition.Decompose(DigitalRune.Geometry.Meshes.ITriangleMesh)"/> or <see cref="M:DigitalRune.Geometry.Meshes.ConvexDecomposition.DecomposeAsync(DigitalRune.Geometry.Meshes.ITriangleMesh)"/>. After the decomposition has finished
            the result is available in the property <see cref="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.Decomposition"/>.
            </para>
            <para>
            This class is not available in the Silverlight and the Xbox 360 compatible build of
            DigitalRune.Geometry.dll.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.AllowedConcavity">
            <summary>
            Gets or sets the allowed concavity.
            </summary>
            <value>The allowed concavity; must be greater than 0.</value>
            <remarks>
            The default value is 0.1 which means the normal surface distance from a concave part to the 
            convex hull should not be larger than 0.1 units.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.SmallIslandBoost">
            <summary>
            Gets or sets the small island boost factor.
            </summary>
            <value>The small island boost factor. The default value is 0.01.</value>
            <remarks>
            If this value is larger the merging of small island pairs is preferred. Making this value
            lower reduces the speed of the convex decomposition. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.VertexLimit">
            <summary>
            Gets or sets the maximal number of vertices per convex part in the final result.
            </summary>
            <value>
            The maximal number of vertices per convex part in the final result. The default value is 32.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.VertexLimit"/> defines the max number of vertices per convex part of the final
            decomposition. <see cref="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.IntermediateVertexLimit"/> defines the max number of vertices
            during the decomposition process. 
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is less than 4.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.IntermediateVertexLimit">
            <summary>
            Gets or sets the maximal of number vertices per convex part during the decomposition 
            process.
            </summary>
            <value>
            The maximal number of vertices per convex part during the decomposition process. The default 
            value is 32.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.VertexLimit"/> defines the max number of vertices per convex part of the final
            decomposition. <see cref="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.IntermediateVertexLimit"/> defines the max number of vertices
            during the decomposition process. 
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is less than 4.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.SkinWidth">
            <summary>
            Gets or sets the width of the skin of each convex part.
            </summary>
            <value>The width of the skin of each convex part. The default value is 0.</value>
            <remarks>
            If this value is positive, the convex parts are extruded by this value. If this value is 
            negative, the convex parts are shrunk by this value.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.Decomposition">
            <summary>
            Gets the convex decomposition of the mesh.
            </summary>
            <value>
            A composite shape where each child is a <see cref="T:DigitalRune.Geometry.Shapes.ConvexPolyhedron"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.IsBusy">
            <summary>
            Gets or sets a value indicating whether an asynchronous decomposition is in progress.
            </summary>
            <value>
            <see langword="true"/> if an asynchronous decomposition is in progress; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.SampleTriangleVertices">
            <summary>
            Gets or sets a value indicating whether triangle vertices are used for concavity
            computation.
            </summary>
            <value>
            <see langword="true"/> if triangle vertices are used for concavity computation; otherwise, 
            <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.SampleTriangleCenters">
            <summary>
            Gets or sets a value indicating whether triangle centers are used for concavity computation.
            </summary>
            <value>
            <see langword="true"/> if triangle centers are used for concavity computation; otherwise, 
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.EnableMultithreading">
            <summary>
            Gets or sets a value indicating whether multithreading is enabled. (Experimental!)
            </summary>
            <value>
            <see langword="true"/> if multithreading is enabled; otherwise, <see langword="false"/>. The
            default value is <see langword="false"/>.
            </value>
            <remarks>
            Multithreading support is currently experimental. If multithreading is enabled,
            the result might be non-deterministic. (The result can vary between two calls with the 
            same settings!)
            </remarks>
        </member>
        <member name="E:DigitalRune.Geometry.Meshes.ConvexDecomposition.ProgressChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:DigitalRune.Geometry.Meshes.ConvexDecomposition.Completed">
            <summary>
            Occurs when an asynchronous decomposition (see <see cref="M:DigitalRune.Geometry.Meshes.ConvexDecomposition.DecomposeAsync(DigitalRune.Geometry.Meshes.ITriangleMesh)"/>) has completed.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexDecomposition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.ConvexDecomposition"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexDecomposition.Decompose(DigitalRune.Geometry.Meshes.ITriangleMesh)">
            <summary>
            Decomposes the specified mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <remarks>
            This method blocks until the decomposition has finished. The result is available
            in the property <see cref="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.Decomposition"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexDecomposition.DecomposeAsync(DigitalRune.Geometry.Meshes.ITriangleMesh)">
            <summary>
            Decomposes the specified mesh (asynchronously).
            </summary>
            <param name="mesh">The mesh.</param>
            <remarks>
            <para>
            This method does not block. The flag <see cref="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.IsBusy"/> is set until the decomposition has
            finished. The event <see cref="E:DigitalRune.Geometry.Meshes.ConvexDecomposition.ProgressChanged"/> informs you on the current progress. The
            event <see cref="E:DigitalRune.Geometry.Meshes.ConvexDecomposition.Completed"/> is raised when the decomposition is finished. The current
            intermediate decomposition result is available in <see cref="P:DigitalRune.Geometry.Meshes.ConvexDecomposition.Decomposition"/>. Retrieving
            the result while the decomposition is running is possible but will temporarily block the
            decomposition process.
            </para>
            <para>
            <strong>Thread-Safety:</strong><br/>
            The <paramref name="mesh"/> must not be modified while the decomposition is in progress.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Convex decomposition is already in progress.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexDecomposition.CancelAsync">
            <summary>
            Cancels the current asynchronous decomposition process.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexDecomposition.CreateCompositeShape">
            <summary>
            Creates the composite shape and saves it in <see cref="F:DigitalRune.Geometry.Meshes.ConvexDecomposition._decomposition"/>.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.ConvexHullType">
            <summary>
            The type of the convex hull.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.ConvexHullType.Empty">
            <summary>
            The convex hull is empty.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.ConvexHullType.Point">
            <summary>
            The convex hull is a single point.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.ConvexHullType.Linear">
            <summary>
            The convex hull is a line segment.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.ConvexHullType.Planar">
            <summary>
            The convex hull is a polygon. The convex hull consists of two faces (front and back).
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.ConvexHullType.Spatial">
            <summary>
            The convex hull is a polyhedron.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.ConvexHullBuilder">
            <summary>
            Creates a convex hull for a given point list.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexHullBuilder.Grow(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Single)">
            <summary>
            Creates a convex hull from the given points.
            </summary>
            <param name="points">The points.</param>
            <param name="vertexLimit">The vertex limit.</param>
            <param name="skinWidth">Width of the skin.</param>
            <remarks>
            This method assumes that all duplicate vertices have been removed from 
            <paramref name="points"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexHullBuilder.GrowConvex(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Meshes.DcelFace)">
            <summary>
            Grows the mesh so that it includes the given point.
            </summary>
            <param name="point">The point.</param>
            <param name="face">
            A face which is visible from the given point. Can be <see langword="null"/>.
            </param>
            <remarks>
            <para>
            This method assumes that this DCEL mesh represents a convex, closed mesh. The convex mesh
            is grown so that it includes the given <paramref name="point"/>. The final mesh will
            contain the original mesh.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexHullBuilder.GrowEmptyConvex(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Merges a point to an empty convex hull.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexHullBuilder.GrowPointConvex(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Merges a point to a convex hull that is also a point.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexHullBuilder.GrowLinearConvex(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Merges a point to a convex hull that is a line segment.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexHullBuilder.GrowPlanarConvex(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Merges a point to a convex hull that is a polygon.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexHullBuilder.GrowPlanarConvexToSpatial(DigitalRune.Geometry.Meshes.DcelFace,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Removes the given face and connects the face edges to the given point.
            </summary>
            <param name="face">The face.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexHullBuilder.GrowSpatialConvex(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Meshes.DcelFace)">
            <summary>
            Merges a point to a 3D convex hull.
            </summary>
            <param name="point">The point.</param>
            <param name="startFace">
            A face which is visible from the given point. Can be <see langword="null"/>.
            </param>
            <returns><see langword="true"/> if the convex hull was grown.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ConvexHullBuilder.GetDistanceFromLineSquared(DigitalRune.Geometry.Shapes.Line@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Gets the squared distance from a line to a point.
            </summary>
            <param name="line">The line.</param>
            <param name="point">The point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.DcelEdge">
            <summary>
            Edge data structure for a Doubly-Connected Edge List (DCEL).
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.Origin">
            <summary>
            Gets or sets the vertex where the edge starts.
            </summary>
            <value>The vertex where the edge starts.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.Twin">
            <summary>
            Gets or sets the twin edge.
            </summary>
            <value>The twin edge.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.Face">
            <summary>
            Gets or sets the face for which this edge is part of the boundary.
            </summary>
            <value>The face for which this edge is part of the boundary.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.Next">
            <summary>
            Gets or sets the next edge (for the same face).
            </summary>
            <value>The next edge (for the same face).</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.Previous">
            <summary>
            Gets or sets the previous edge (for the same face).
            </summary>
            <value>The previous edge (for the same face).</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.Tag">
            <summary>
            Gets or sets an integer flag that can be used by algorithms that operate on the 
            <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>.
            </summary>
            <value>
            An integer flag that can be used by algorithms that operate on a <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>.
            </value>
            <remarks>
            This property can be used by algorithms that operate on the <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.InternalTag">
            <summary>
            Gets or sets the internal tag (same as <see cref="P:DigitalRune.Geometry.Meshes.DcelEdge.Tag"/> but only for internal use).
            </summary>
            <value>The internal tag.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.UserData">
            <summary>
            Gets or sets user-defined data.
            </summary>
            <value>
            User-defined data.
            </value>
            <remarks>
            This property can be used by algorithms that operate on the <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/> or
            to store data related to this mesh element.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelEdge.Length">
            <summary>
            Gets the length of this edge.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.DcelFace">
            <summary>
            Face data structure for a Doubly-Connected Edge List (DCEL).
            </summary>
            <remarks>
            A face is defined by 3 or more edges (see <see cref="P:DigitalRune.Geometry.Meshes.DcelFace.Boundary"/>). It can also contain holes 
            which are not connected via edges to the boundary (see <see cref="P:DigitalRune.Geometry.Meshes.DcelFace.Holes"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelFace.Boundary">
            <summary>
            Gets or sets an edge of the outer boundary.
            </summary>
            <value>An edge of the outer boundary.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelFace.Holes">
            <summary>
            Gets or sets a list with one edge of the boundary for each hole; <see langword="null"/> if
            there are no holes.
            </summary>
            <value>
            A list with one edge of the boundary for each hole; <see langword="null"/> if there are no
            holes.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelFace.Normal">
            <summary>
            Gets the normal of a convex face. (Not normalized. For internal use only.)
            </summary>
            <value>The normal of a convex face. (Not normalized. For internal use only.)</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelFace.Tag">
            <summary>
            Gets or sets an integer flag that can be used by algorithms that operate on the 
            <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>.
            </summary>
            <value>
            An integer flag that can be used by algorithms that operate on a <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>.
            </value>
            <remarks>
            This property can be used by algorithms that operate on the <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelFace.InternalTag">
            <summary>
            Gets or sets the internal tag (same as <see cref="P:DigitalRune.Geometry.Meshes.DcelFace.Tag"/> but only for internal use).
            </summary>
            <value>The internal tag.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelFace.UserData">
            <summary>
            Gets or sets user-defined data.
            </summary>
            <value>
            User-defined data.
            </value>
            <remarks>
            This property can be used by algorithms that operate on the <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/> or
            to store data related to this mesh element.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelFace.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelFace"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelFace"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelFace.#ctor(DigitalRune.Geometry.Meshes.DcelEdge)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelFace"/> class from a given edge.
            </summary>
            <param name="boundary">An edge of the outer boundary.</param>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.DcelMesh">
            <summary>
            A mesh represented by a Doubly-Connected Edge List (DCEL).
            </summary>
            <remarks>
            <para>
            This implementation follows the description of Doubly-Connected Edge Lists in the book
            "Computational Geometry", de Berg et al.
            </para>
            <para>
            This class exposes one vertex of the mesh. Other mesh components can be found by 
            navigating the DCEL data structures beginning at <see cref="P:DigitalRune.Geometry.Meshes.DcelMesh.Vertex"/>.
            </para>
            <para>
            For convenience, component lists (<see cref="P:DigitalRune.Geometry.Meshes.DcelMesh.Vertices"/>, <see cref="P:DigitalRune.Geometry.Meshes.DcelMesh.Edges"/> and 
            <see cref="P:DigitalRune.Geometry.Meshes.DcelMesh.Faces"/>) are automatically generated when required. Whenever the mesh is modified 
            (components are added or removed), the flag <see cref="P:DigitalRune.Geometry.Meshes.DcelMesh.Dirty"/> must be set. Then the 
            component list are automatically recreated the next time they are accessed.
            </para>
            <para>
            <strong>Handling Tags:</strong> The DCEL data structures (<see cref="T:DigitalRune.Geometry.Meshes.DcelVertex"/>, 
            <see cref="T:DigitalRune.Geometry.Meshes.DcelEdge"/> and <see cref="T:DigitalRune.Geometry.Meshes.DcelFace"/>) have "tags" (integer properties) which can 
            be used to mark components when navigating or modifying the mesh. This tags can be used by 
            different operations that act on the mesh.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelMesh.Dirty">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/> is dirty.
            </summary>
            <value><see langword="true"/> if dirty; otherwise, <see langword="false"/>.</value>
            <remarks>
            This property must be set when the mesh is modified. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelMesh.Edges">
            <summary>
            Gets the edges (as a read-only list).
            </summary>
            <value>The edges.</value>
            <remarks>
            This list is automatically re-generated when the mesh is new or <see cref="P:DigitalRune.Geometry.Meshes.DcelMesh.Dirty"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelMesh.Faces">
            <summary>
            Gets the faces (as a read-only list).
            </summary>
            <value>The faces.</value>
            <remarks>
            This list is automatically re-generated when the mesh is new or <see cref="P:DigitalRune.Geometry.Meshes.DcelMesh.Dirty"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelMesh.Vertex">
            <summary>
            Gets or sets the vertex.
            </summary>
            <value>The vertex.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelMesh.Vertices">
            <summary>
            Gets the vertices (as a read-only list).
            </summary>
            <value>The vertices.</value>
            <remarks>
            This list is automatically re-generated when the mesh is new or <see cref="P:DigitalRune.Geometry.Meshes.DcelMesh.Dirty"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new empty instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.#ctor(DigitalRune.Geometry.Meshes.DcelMesh)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh" /> class that is a copy of the given 
            mesh.
            </summary>
            <param name="mesh">
            The source mesh to copy. Can be <see langword="null"/> to create an empty 
            <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>.
            </param>
            <remarks>
            This constructor creates a new <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/> which is a copy of the given 
            <paramref name="mesh"/>. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.EnsureEmptyList``1(System.Collections.Generic.List{``0}@)">
            <summary>
            Ensures that the given parameter is an empty list.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="list">The list.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.UpdateCache">
            <summary>
            Updates the read-only component lists.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.BuildLists(DigitalRune.Geometry.Meshes.DcelEdge)">
            <summary>
            Builds the component lists.
            </summary>
            <param name="edge">The current edge.</param>
            <remarks>
            This method calls itself recursively.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.ResetTags">
            <summary>
            Resets the tags in the DCEL data. (Tags are set to 0.)
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.ResetInternalTags">
            <summary>
            Resets the internal tags in the DCEL data. (Internal tags are set to 0.)
            </summary>
            <remarks>
            The component lists must be up-to-date when this method is called! Therefore, internal tags 
            must always be reset <strong>before</strong> the mesh is modified!
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.GetCollinearity(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Meshes.DcelEdge)">
            <summary>
            Determines the collinearity between a point and an edge.
            </summary>
            <param name="point">The point.</param>
            <param name="edge">The edge.</param>
            <returns>
            The type of collinearity.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.GetCollinearity(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Meshes.DcelFace)">
            <summary>
            Determines the collinearity between a point and a face.
            </summary>
            <param name="point">The point.</param>
            <param name="face">The face.</param>
            <returns>The collinearity type.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.GetCollinearity(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Meshes.DcelFace,System.Single@)">
            <summary>
            Determines the collinearity between a point and a face.
            </summary>
            <param name="point">The point.</param>
            <param name="face">The face.</param>
            <param name="inFront">
            A value that is positive if the point is in front. And the value is proportional to the
            distance of the point from the edge.
            </param>
            <returns>The collinearity type.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.GetCollinearity(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Meshes.DcelEdge,DigitalRune.Mathematics.Algebra.Vector3F,System.Single@)">
            <summary>
            Determines the collinearity between a point and an edge of a face.
            </summary>
            <param name="point">The point.</param>
            <param name="edge">The edge.</param>
            <param name="faceNormal">The face normal (of the face of the edge).</param>
            <param name="inFront">
            A value that is positive if the point is in front (outside of the face). 
            And the value is proportional to the distance of the point from the edge.
            </param>
            <returns>The collinearity type.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.IsConvex">
            <overloads>
            <summary>
            Determines whether this mesh is a convex mesh.
            </summary>
            </overloads>
            
            <summary>
            Determines whether this mesh is a convex mesh.
            </summary>
            <returns>
            <see langword="true"/> if this mesh is a convex mesh; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method also checks if the mesh is closed (see <see cref="M:DigitalRune.Geometry.Meshes.DcelMesh.IsClosed"/>). Internally,
            <see cref="M:DigitalRune.Geometry.Meshes.DcelMesh.IsConvex(System.Single)"/> with an epsilon tolerance of 0.001f is called.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.IsConvex(System.Single)">
            <summary>
            Determines whether this mesh is a convex mesh using a specific tolerance.
            </summary>
            <param name="epsilon">
            The epsilon tolerance value. Numerical errors within this tolerance are accepted. This value 
            is automatically scaled with the mesh size. Recommended values are 0.001 or 0.0001. 
            </param>
            <returns>
            <see langword="true"/> if this mesh is a convex mesh; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method also checks if the mesh is closed (see <see cref="M:DigitalRune.Geometry.Meshes.DcelMesh.IsClosed"/>).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.CutConvex(DigitalRune.Geometry.Shapes.Plane)">
            <summary>
            Cuts mesh with a plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>
            <see langword="true"/> if the mesh was cut; otherwise, <see langword="false"/> if the mesh
            was not modified.
            </returns>
            <remarks>
            <para>
            The mesh is cut with the given plane. If any parts are in front of the plane, they are
            removed. Edges and faces that go through the plane are cut. The resulting mesh is closed
            with a new face in the cut plane.
            </para>
            <para>
            If the whole mesh is in front of the plane, the whole mesh is removed (<see cref="P:DigitalRune.Geometry.Meshes.DcelMesh.Vertex"/>
            is set to <see langword="null"/>). If the whole mesh is behind the plane, this method does
            nothing.
            </para>
            <para>
            <strong>Prerequisites:</strong> This operation uses <see cref="P:DigitalRune.Geometry.Meshes.DcelVertex.UserData"/> of the 
            vertices and it assumes that the mesh is valid, convex and closed. All faces must be 
            triangles or convex polygons.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.ModifyConvex(System.Int32,DigitalRune.Mathematics.Algebra.Vector3F)">
            <overloads>
            <summary>
            Modifies a convex mesh by reducing the vertices and applying a skin width.
            </summary>
            </overloads>
            
            <summary>
            Modifies a convex mesh by reducing the vertices and applying a skin width.
            </summary>
            <param name="vertexLimit">The vertex limit.</param>
            <param name="skinWidth">
            The width of the skin along the x, y and z directions. 
            </param>
            <remarks>
            <para>
            <strong>Prerequisites:</strong> This operation uses <see cref="P:DigitalRune.Geometry.Meshes.DcelVertex.UserData"/> of the
            vertices and it assumes that the mesh is valid, convex and closed. All faces must be 
            triangles or convex polygons.
            </para>
            <para>
            The number of vertices in the convex mesh is reduced to the given 
            <paramref name="vertexLimit"/>. If this operation has to remove vertices, the mesh grows to
            a bigger convex mesh. The method tries to remove only the vertices with the least influence.
            </para>
            <para>
            All faces are extruded along the normal by the given skin width. The skin width causes the 
            convex mesh to grow (positive skin width) or shrink (negative skin width). The result is
            again convex.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.ModifyConvex(System.Int32,System.Single)">
            <summary>
            Modifies a convex mesh by reducing the vertices and applying a skin width.
            </summary>
            <param name="vertexLimit">The vertex limit.</param>
            <param name="skinWidth">The width of the skin.</param>
            <inheritdoc cref="M:DigitalRune.Geometry.Meshes.DcelMesh.ModifyConvex(System.Int32,DigitalRune.Mathematics.Algebra.Vector3F)"/>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.AreTagsEqualTo(System.Int32)">
            <summary>
            Gets a value indicating whether the tags of all components in the mesh are equal to the
            given tag value.
            </summary>
            <param name="tag">The reference tag value.</param>
            <returns>
            <see langword="true"/> if the tags of all components are equal to <paramref name="tag"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.Contains(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Determines whether the specified point is contained in the mesh. (This method assumes that
            the mesh is a convex polyhedron.)
            </summary>
            <param name="point">The point.</param>
            <param name="epsilon">
            The epsilon tolerance. A point counts as "contained" if the distance to the mesh surface is
            less than this value. Use a small positive value, e.g. 0.001f, for numerical robustness.
            </param>
            <returns>
            <see langword="true"/> if the specified point is contained; otherwise, 
            <see langword="false"/>. (The result is undefined if the mesh is not a convex polyhedron.)
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.IsClosed">
            <summary>
            Determines whether this mesh is a closed mesh.
            </summary>
            <returns>
            <see langword="true"/> if this instance is a closed mesh; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            In a closed mesh all edges are connected to 2 faces. For example: The mesh of a sphere is a 
            closed mesh. An object with holes, like a pullover, is not closed. A flat object, like a 
            curtain, is closed if both sides are modeled with faces. It is not closed if only a one side 
            is modeled with faces. (A single vertex is considered as closed. A single edge-pair is also
            considered as closed.)
            </para>
            <para>
            This method does not check whether the mesh <see cref="M:DigitalRune.Geometry.Meshes.DcelMesh.IsValid"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.IsTriangleMesh">
            <summary>
            Determines whether the mesh is a valid triangle mesh.
            </summary>
            <returns>
            <see langword="true"/> if the mesh is a valid triangle mesh; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method checks if the mesh consists only of triangle faces without edges or vertices 
            that are not connected to a face.
            </para>
            <para>
            This method does not check whether the mesh <see cref="M:DigitalRune.Geometry.Meshes.DcelMesh.IsValid"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.IsTwoSidedPolygon">
            <summary>
            Determines whether the mesh is a planar, two-sided polygon.
            </summary>
            <returns>
            <see langword="true"/> if the mesh is a planar, two-sided polygon; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            This method does not check whether the mesh <see cref="M:DigitalRune.Geometry.Meshes.DcelMesh.IsValid"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.IsValid">
            <overloads>
            <summary>
            Determines whether this instance is a valid mesh.
            </summary>
            </overloads>
            
            <summary>
            Determines whether this instance is a valid mesh.
            </summary>
            <returns>
            <see langword="true"/> if this instance is valid; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method checks if all components are linked properly. Problems can be: 
            <list type="bullet">
            <item>Missing components, e.g. a face is not entirely bound by edges.</item>
            <item>Wrong links, e.g. edge A has a twin B and the twin of B is not set to A.</item>
            <item>...</item>
            </list>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.IsValid(System.String@)">
            <summary>
            Determines whether this instance is a valid mesh and returns an error description.
            </summary>
            <param name="errorDescription">
            The error description or <see langword="null"/> if the mesh is valid.
            </param>
            <returns>
            <see langword="true"/> if this instance is valid; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method checks if all components are linked properly. Problems can be:
            <list type="bullet">
            <item>Missing components, e.g. a face is not entirely bound by edges.</item>
            <item>Wrong links, e.g. edge A has a twin B and the twin of B is not set to A.</item>
            <item>...</item>
            </list>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.CreateCube">
            <summary>
            Creates a mesh for unit cube.
            </summary>
            <returns>The DCEL mesh that represent a unit cube.</returns>
            <remarks>
            The cube is centered at the origin and has 6 faces. The edge length is 2.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.GetAabb">
            <summary>
            Gets the axis-aligned bounding box of this mesh.
            </summary>
            <returns>
            The AABB of this mesh.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.TagLinkedComponents(DigitalRune.Geometry.Meshes.DcelVertex,System.Int32)">
            <summary>
            Sets the tags of the DCEL mesh component and linked components to the given tag value.
            </summary>
            <param name="vertex">The vertex. (Can be <see langword="null"/>.)</param>
            <param name="tag">The tag.</param>
            <remarks>
            This method does nothing if <paramref name="vertex"/> is already tagged with the given
            value.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.TagLinkedComponents(DigitalRune.Geometry.Meshes.DcelEdge,System.Int32)">
            <summary>
            Sets the tags of the DCEL mesh component and linked components to the given tag value.
            </summary>
            <param name="edge">The edge. (Can be <see langword="null"/>.)</param>
            <param name="tag">The tag.</param>
            <remarks>
            This method does nothing if <paramref name="edge"/> is already tagged with the given value.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.AddUntaggedEdgeToStack(DigitalRune.Geometry.Meshes.DcelEdge,System.Collections.Generic.Stack{DigitalRune.Geometry.Meshes.DcelEdge},System.Int32)">
            <summary>
            Adds the given edge to the stack if its <see cref="P:DigitalRune.Geometry.Meshes.DcelEdge.Tag"/> is not equal to the given
            tag.
            </summary>
            <param name="edge">The edge. (Can be <see langword="null"/>.)</param>
            <param name="stack">The stack.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.FromTriangleMesh(DigitalRune.Geometry.Meshes.ITriangleMesh)">
            <overloads>
            <summary>
            Converts the given <see cref="T:DigitalRune.Geometry.Meshes.ITriangleMesh"/> to a <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>.
            </summary>
            </overloads>
            
            <summary>
            Converts the given <see cref="T:DigitalRune.Geometry.Meshes.ITriangleMesh"/> to a <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>.
            </summary>
            <param name="mesh">The triangle mesh.</param>
            <returns>
            The <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>.
            </returns>
            <remarks>
            Currently, creating <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>es is not supported if the triangle mesh consists
            of unconnected sub-meshes or unconnected triangles. All parts of the triangle mesh must be
            connected via an edge. (But it is not required that the mesh is closed.)
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mesh"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="mesh"/> has no vertices or vertex indices.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="mesh"/> consists of several unconnected components or sub-meshes.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.FromTriangleMesh(DigitalRune.Geometry.Meshes.TriangleMesh)">
            <summary>
            Converts the given <see cref="T:DigitalRune.Geometry.Meshes.ITriangleMesh"/> to a <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>.
            </summary>
            <param name="mesh">The triangle mesh.</param>
            <returns>
            The <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>.
            </returns>
            <remarks>
            Currently, creating <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>es is not supported if the triangle mesh consists
            of unconnected sub-meshes or unconnected triangles. All parts of the triangle mesh must be
            connected via an edge. (But it is not required that the mesh is closed.)
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mesh"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="mesh"/> has no vertices or vertex indices.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="mesh"/> consists of several unconnected components or sub-meshes.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelMesh.ToTriangleMesh">
            <summary>
            Converts this mesh to a <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh"/>.
            </summary>
            <returns>A triangle mesh that represents the same mesh.</returns>
            <remarks>
            This mesh must consist only of faces that are convex polygons (triangles, quads, etc.).
            Concave faces will not be triangulated correctly.
            </remarks>
            <exception cref="T:DigitalRune.Geometry.GeometryException">The DCEL mesh is invalid.</exception>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.Collinearity">
            <summary>
            Possible results of a collinearity test.
            </summary>
            <remarks>
            This enumeration is no flags enumeration (see <see cref="T:System.FlagsAttribute"/>).
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.Collinearity.NotCollinear">
            <summary>
            The object is not collinear. It is not known if it is in front or behind.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.Collinearity.NotCollinearInFront">
            <summary>
            The object is in front.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.Collinearity.NotCollinearBehind">
            <summary>
            The object is behind.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.Collinearity.CollinearBefore">
            <summary>
            The object is collinear and before. For line segments this means, the tested object is on
            the line before the start of the line segment.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.Collinearity.CollinearAfter">
            <summary>
            The object is collinear and after. For line segments this means, the tested object is on the
            line after the end of the line segment.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.Collinearity.CollinearContained">
            <summary>
            The object is collinear and contained.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.Collinearity.Collinear">
            <summary>
            The object is collinear and the it is not known if the object is before, contained or after.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.DcelVertex">
            <summary>
            Vertex data structure for a Doubly-Connected Edge List (DCEL).
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelVertex.Position">
            <summary>
            Gets or sets the coordinates of the vertex.
            </summary>
            <value>The coordinates of the vertex.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelVertex.Edge">
            <summary>
            Gets or sets an outgoing edge.
            </summary>
            <value>An outgoing edge.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelVertex.Tag">
            <summary>
            Gets or sets an integer flag that can be used by algorithms that operate on the 
            <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>.
            </summary>
            <value>
            An integer flag that can be used by algorithms that operate on a <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>.
            </value>
            <remarks>
            This property can be used by algorithms that operate on the <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/>. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelVertex.InternalTag">
            <summary>
            Gets or sets the internal tag (same as <see cref="P:DigitalRune.Geometry.Meshes.DcelVertex.Tag"/> but only for internal use).
            </summary>
            <value>The internal tag.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.DcelVertex.UserData">
            <summary>
            Gets or sets user-defined data.
            </summary>
            <value>
            User-defined data.
            </value>
            <remarks>
            This property can be used by algorithms that operate on the <see cref="T:DigitalRune.Geometry.Meshes.DcelMesh"/> or to
            store data related to this mesh element.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelVertex.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelVertex"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelVertex"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.DcelVertex.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Meshes.DcelEdge)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.DcelVertex"/> class with a given position and
            edge.
            </summary>
            <param name="position">The position.</param>
            <param name="edge">The edge.</param>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.ITriangleMesh">
            <summary>
            Represents a triangle mesh.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.ITriangleMesh.NumberOfTriangles">
            <summary>
            Gets the number of triangles.
            </summary>
            <value>The number of triangles.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.ITriangleMesh.GetTriangle(System.Int32)">
            <summary>
            Gets the triangle with the given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The triangle with the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Geometry.Meshes"/> namespace provides support for handling
            triangle meshes.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.TriangleMesh">
            <summary>
            Provides a simple <see cref="T:DigitalRune.Geometry.Meshes.ITriangleMesh"/> implementation using vertex and index lists.
            </summary>
            <remarks>
            <para>
            The triangles are defined using a vertex list (see <see cref="P:DigitalRune.Geometry.Meshes.TriangleMesh.Vertices"/>) and an index list
            (see <see cref="P:DigitalRune.Geometry.Meshes.TriangleMesh.Indices"/>). (<see cref="P:DigitalRune.Geometry.Meshes.TriangleMesh.NumberOfTriangles"/> is <c>Indices.Count / 3</c>. It
            is allowed to manipulate the vertex and index lists directly, e.g. a triangle can be added by
            adding 3 indices to <see cref="P:DigitalRune.Geometry.Meshes.TriangleMesh.Indices"/>. 
            </para>
            <para>
            <strong>Vertex welding:</strong> The <see cref="M:DigitalRune.Geometry.Meshes.TriangleMesh.Add(DigitalRune.Geometry.Shapes.Triangle,System.Boolean)"/> method and its
            overloads can be used to add a new triangles to the mesh. These methods can perform 
            brute-force vertex welding to remove duplicate vertices. The brute-force approach is fast if
            the mesh has only a small number of vertices.
            <code lang="csharp">
            <![CDATA[
            // Building a simple triangle mesh using brute-force vertex welding.
            TriangleMesh mesh = new TriangleMesh();
            
            // Add triangles:
            mesh.AddTriangle(new Triangle(v0, v1, v2), true);
            mesh.AddTriangle(new Triangle(v4, v1, v0), true);
            ...
            ]]>
            </code>
            </para>
            <para>
            But vertex welding using brute-force is slow if there is a large number of vertices. 
            Therefore, when constructing complex meshes the method <see cref="M:DigitalRune.Geometry.Meshes.TriangleMesh.WeldVertices(System.Single)"/> 
            should be used. <see cref="M:DigitalRune.Geometry.Meshes.TriangleMesh.WeldVertices(System.Single)"/> implements a fast vertex welding algorithm 
            that handles large meshes efficiently. (However, this algorithm is more resource intensive
            than the brute-force approach.)
            <code lang="csharp">
            <![CDATA[
            // Building a complex triangle mesh using intelligent vertex welding.
            TriangleMesh mesh = new TriangleMesh();
            
            // Add triangles:
            mesh.AddTriangle(new Triangle(v0, v1, v2), false);
            mesh.AddTriangle(new Triangle(v4, v1, v0), false);
            ...
            
            // After all vertices are added, remove duplicates.
            mesh.WeldVertices(0.001f);
            ]]>
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.TriangleMesh.NumberOfTriangles">
            <summary>
            Gets the number of triangles.
            </summary>
            <value>The number of triangles.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.TriangleMesh.Vertices">
            <summary>
            Gets or sets the vertices.
            </summary>
            <value>The vertices. The default value is an empty list.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.TriangleMesh.Indices">
            <summary>
            Gets or sets the indices.
            </summary>
            <value>The indices. The default value is an empty list.</value>
            <remarks>
            Always 3 indices define 1 triangle. Each index is the index of a vertex in 
            <see cref="P:DigitalRune.Geometry.Meshes.TriangleMesh.Vertices"/>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Meshes.TriangleMesh.Tag">
            <summary>
            Gets or sets custom information.
            </summary>
            <value>Custom data defined by the user.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh"/> class with the specified 
            initial capacity.
            </summary>
            <param name="verticesCapacity">
            The number of vertices that the new triangle mesh can initially store.
            </param>
            <param name="indicesCapacity">
            The number of indices that the new triangle mesh can initially store.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="verticesCapacity"/> or <paramref name="indicesCapacity"/> is less than 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh"/> that is a copy of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh"/> that is a copy of the current instance.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Add(DigitalRune.Geometry.Meshes.ITriangleMesh)">
            <overloads>
            <summary>
            Adds triangles to the triangle mesh.
            </summary>
            </overloads>
            
            <summary>
            Adds the triangles of the specified mesh (without vertex welding).
            </summary>
            <param name="mesh">The mesh.</param>
            <remarks>
            This method does not perform vertex welding and does not remove degenerate triangles. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Add(DigitalRune.Geometry.Meshes.ITriangleMesh,System.Boolean)">
            <summary>
            Adds the triangles of the specified mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="weldVerticesBruteForce">
            If set to <see langword="true"/>, vertex welding is performed. A brute-force method is used
            for welding which can be very slow for large triangle meshes. For large meshes it is 
            recommended to call <see cref="M:DigitalRune.Geometry.Meshes.TriangleMesh.WeldVertices"/> after all triangles have been added.
            </param>
            <remarks>
            This method does not remove degenerate triangles. Use 
            <see cref="M:DigitalRune.Geometry.Meshes.TriangleMesh.Add(DigitalRune.Geometry.Shapes.Triangle,System.Boolean,System.Single,System.Boolean)"/> if more control over vertex welding and if 
            removal of degenerate triangles is desired.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Add(DigitalRune.Geometry.Shapes.Triangle)">
            <summary>
            Adds the triangle (without vertex welding).
            </summary>
            <param name="triangle">The triangle.</param>
            <remarks>
            This method does not perform vertex welding and does not remove degenerate triangles. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Add(DigitalRune.Geometry.Shapes.Triangle,System.Boolean)">
            <summary>
            Adds the triangle.
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="weldVerticesBruteForce">
            If set to <see langword="true"/>, vertex welding is performed. A brute-force method is used
            for welding which can be very slow for large triangle meshes. For large meshes it is 
            recommended to call <see cref="M:DigitalRune.Geometry.Meshes.TriangleMesh.WeldVertices"/> after all triangles have been added.
            </param>
            <remarks>
            This method does not remove degenerate triangles. Use 
            <see cref="M:DigitalRune.Geometry.Meshes.TriangleMesh.Add(DigitalRune.Geometry.Shapes.Triangle,System.Boolean,System.Single,System.Boolean)"/> if more control over vertex welding and if 
            removal of degenerate triangles is desired.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Add(DigitalRune.Geometry.Shapes.Triangle,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Adds the triangle.
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="weldVerticesBruteForce">
            If set to <see langword="true"/>, vertex welding is performed. A brute-force method is used
            for welding which can be very slow for large triangle meshes. For large meshes it is 
            recommended to call <see cref="M:DigitalRune.Geometry.Meshes.TriangleMesh.WeldVertices"/> after all triangles have been added.
            </param>
            <param name="vertexPositionTolerance">
            The vertex position tolerance. If the vertex positions are within this range, they are 
            treated as identical vertices. This value is used for vertex welding and to decide if a
            triangle is degenerate. 
            </param>
            <param name="removeDegenerateTriangles">
            If set to <see langword="true"/> degenerate triangles will not be added to the mesh.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="vertexPositionTolerance"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.WeldVertices">
            <overloads>
            <summary>
            Removes duplicate vertices.
            </summary>
            </overloads>
            
            <summary>
            Removes duplicate vertices.
            </summary>
            <returns>The number of removed vertices.</returns>
            <remarks>
            <para>
            This method calls <see cref="M:DigitalRune.Geometry.Meshes.TriangleMesh.WeldVertices(System.Single)"/> with a vertex position tolerance of
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>.
            </para>
            <para>
            Vertex welding is also called vertex shifting or vertex merging. Vertices near each other
            are merged to a single vertex to remove duplicate, redundant vertices.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.WeldVertices(System.Single)">
            <summary>
            Removes duplicate vertices.
            </summary>
            <param name="vertexPositionTolerance">
            The vertex position tolerance. If the distance between two vertices is less than this value,
            the vertices are merged.
            </param>
            <returns>The number of removed vertices.</returns>
            <remarks>
            <para>
            Vertex welding is also called vertex shifting or vertex merging. Vertices near each other
            are merged to a single vertex to remove duplicate, redundant vertices.
            </para>
            </remarks>
            <example>
            The following examples shows how to apply vertex welding when building a complex mesh.
            <code lang="csharp">
            <![CDATA[
            // Building a complex triangle mesh using vertex welding.
            TriangleMesh mesh = new TriangleMesh();
            
            // Add triangles:
            mesh.AddTriangle(new Triangle(v0, v1, v2), false);
            mesh.AddTriangle(new Triangle(v4, v1, v0), false);
            ...
            
            // After all vertices are added, remove duplicates.
            mesh.WeldVertices(0.001f);
            ]]>
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="vertexPositionTolerance"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.GetTriangle(System.Int32)">
            <summary>
            Gets the triangle with the given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The triangle with the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            Either <see cref="P:DigitalRune.Geometry.Meshes.TriangleMesh.Vertices"/> or <see cref="P:DigitalRune.Geometry.Meshes.TriangleMesh.Indices"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.Transform(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Transforms all vertices by the given matrix.
            </summary>
            <param name="matrix">The transformation matrix.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.ReverseWindingOrder">
            <summary>
            Changes the winding order of all triangles.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.ComputeNormals(System.Boolean,System.Single)">
            <summary>
            Computes the mesh normals.
            </summary>
            <param name="useWeightedAverage">
            If set to <see langword="true"/> the influence of each triangle normal is weighted by the 
            triangle area; otherwise, all triangle normals have the same weight.
            </param>
            <param name="angleLimit">
            The angle limit in radians. Normals are only merged if the angle between the triangle
            normals is equal to or less than the angle limit. Set this value to -1 to disable the angle
            limit (all normals of one vertex are merged). 
            </param>
            <returns>
            If no angle limit is used (angle limit is -1), an array with one normal per vertex is 
            returned. If an angle limit is used, an array with one normal per index is used.
            </returns>
            <remarks>
            This method computes vertex normals by averaging the triangle normals. 
            <para>
            <strong>Angle limit:</strong> The <paramref name="angleLimit"/> can be used to keep sharp
            edges between triangles. If the angle limit is used, the returned array contains one entry
            per index (= 3 entries per triangle) because the normal of a vertex can have different
            direction for each neighbor triangle. If the angle limit is not used, the returned array
            contains one entry per vertex because the vertex normal of a single vertex is the same for
            all neighboring triangles.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.TriangleMesh.FromModel(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Creates a triangle mesh from an XNA <see cref="T:Microsoft.Xna.Framework.Graphics.Model"/>. (Only available in the
            XNA-compatible build, except Silverlight.)
            </summary>
            <param name="model">The XNA model.</param>
            <returns>
            A triangle mesh containing all triangles of the specified model.
            </returns>
            <remarks>
            This method is only available in XNA-compatible builds of DigitalRune.Geometry.dll. It is
            not available in "Any CPU" builds or Silverlight.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.Triangulator">
            <summary>
            Triangulates polygons.
            </summary>
            <remarks>
            The <see cref="T:DigitalRune.Geometry.Meshes.Triangulator"/> implements the <i>ear clipping algorithm</i>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.Triangulator.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DigitalRune.Geometry.Meshes.Triangulator"/> class from being created.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.Triangulator.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Geometry.Meshes.Triangulator"/> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Geometry.Meshes.Triangulator"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Geometry.Meshes.Triangulator.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.Triangulator.Recycle">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Geometry.Meshes.Triangulator"/> class.
            </summary>
            <remarks>
            <para>
            This method resets this instance and returns it to a resource pool if resource pooling is 
            enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.Triangulator.Triangulate(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.IList{System.Int32})">
            <overloads>
            <summary>
            Triangulates a polygon specified by a list of vertices.
            </summary>
            </overloads>
            
            <summary>
            Triangulates a polygon specified by a list of vertices.
            </summary>
            <param name="polygonVertices">The vertices.</param>
            <param name="triangleIndices">
            The list that stores the resulting triangles: Each value in the list is an index into
            <paramref name="polygonVertices"/>; three indices define a triangle.
            </param>
            <returns>The number of triangles added to <paramref name="triangleIndices"/>.</returns>
            <remarks>
            <para>
            The method supports triangulation of convex and concave polygons. The polygon needs to be 
            planar. Either the x, y, or z component of the vertices should be constant.
            </para>
            <para>
            Polygons with duplicate points, holes, or self-intersections are not supported. (The result
            can be a partially or incorrectly triangulated polygon.)
            </para>
            <para>
            The resulting triangles have the same winding order as the polygon vertices.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="polygonVertices"/> or <paramref name="triangleIndices"/> is 
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.Triangulator.Triangulate(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Triangulates a polygon specified by a list of vertices.
            </summary>
            <param name="polygonVertices">The vertices.</param>
            <param name="startIndex">
            The index of the start vertex in <paramref name="polygonVertices"/>.
            </param>
            <param name="vertexCount">The number of vertices in the polygon.</param>
            <param name="triangleIndices">
            The list that stores the resulting triangles: Each value in the list is an index into
            <paramref name="polygonVertices"/>; three indices define a triangle.
            </param>
            <returns>The number of triangles added to <paramref name="triangleIndices"/>.</returns>
            <remarks>
            <para>
            The method supports triangulation of convex and concave polygons. The polygon needs to be 
            planar. Either the x, y, or z component of the vertices should be constant.
            </para>
            <para>
            Polygons with holes or self-intersections are not supported. (The result can be a partially
            or incorrectly triangulated polygon.)
            </para>
            <para>
            The resulting triangles have the same winding order as the polygon vertices.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="polygonVertices"/> or <paramref name="triangleIndices"/> is 
            <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Meshes.VertexAdjacency">
            <summary>
            Stores the adjacency lists for the vertices of a mesh. (For internal use only.)
            </summary>
            <remarks>
            <para>
            An adjacency list is a list of indices. Each entry is the index of an adjacent vertex.
            </para>
            <para>
            The adjacency list of vertex i starts at <c>Lists[ListIndices[i]]</c> and ends at 
            <c>Lists[ListIndices[i + 1] - 1]</c>.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.VertexAdjacency.ListIndices">
            <summary>
            The start indices of the adjacency list of a given vertex.
            </summary>
            <remarks>
            This array contains n + 1 entries where n is the number of vertices. The last entry is a
            dummy entry that is only used to determine the end of the last adjacency list. This way, the
            start and end indices of a adjacency list can be determined using <c>ListIndices[i]</c> and 
            <c>ListIndices[i + 1] - 1</c>. No need to check the indices.
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Meshes.VertexAdjacency.Lists">
            <summary>
            The adjacency lists of all vertices stored in a single array.
            </summary>
            <remarks>
            <para>
            An adjacency list is a list of indices. Each entry is the index of an adjacent vertex.
            </para>
            <para>
            The adjacency list of vertex i starts at <c>Lists[ListIndices[i]]</c> and ends at 
            <c>Lists[ListIndices[i + 1] - 1]</c>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.VertexAdjacency.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.VertexAdjacency"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Meshes.VertexAdjacency.#ctor(DigitalRune.Geometry.Meshes.DcelMesh)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Meshes.VertexAdjacency"/> class.
            </summary>
            <param name="mesh">The mesh for which the adjacency information is built.</param>
            <exception cref="T:System.NotSupportedException">
            Too many vertices in convex hull. Max. 65534 vertices in convex hull are supported.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Geometry"/> namespace provides types that define geometric
            objects.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.AabbTreeBuilder">
            <summary>
            Provides methods to build AABB trees.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeBuilder.Build``1(System.Collections.Generic.List{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}},System.Func{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}})">
            <summary>
            Builds the AABB tree for the specified leaf nodes.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="leaves">The leaves of the tree.</param>
            <param name="createNode">A function that creates a new, empty node.</param>
            <returns>The root node of the subtree.</returns>
            <remarks>
            The order of the nodes in <paramref name="leaves"/> is changed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeBuilder.Build``1(System.Collections.Generic.List{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}},System.Func{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}},System.Int32)">
            <summary>
            Builds the AABB tree for the specified leaf nodes.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="leaves">The leaves of the tree.</param>
            <param name="createNode">A function that creates a new, empty node.</param>
            <param name="bottomUpThreshold">
            The threshold in number of nodes (for example 128). If the number of nodes in a subtree is
            less than or equal to this value, the subtree will be built bottom-up.
            </param>
            <returns>The root node of the subtree.</returns>
            <remarks>
            The order of the nodes in <paramref name="leaves"/> is changed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeBuilder.BuildBottomUp``1(System.Collections.Generic.List{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}},System.Int32,System.Int32,System.Func{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}})">
            <summary>
            Builds the subtree top-down.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="leaves">The leaves of the tree.</param>
            <param name="firstLeaf">The first leaf.</param>
            <param name="lastLeaf">The last leaf.</param>
            <param name="createNode">A function that creates a new, empty node.</param>
            <returns>The root node of the subtree.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeBuilder.BuildTopDownCenterSplit``1(System.Collections.Generic.List{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}},System.Int32,System.Int32,System.Func{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}})">
            <summary>
            Builds the subtree top-down.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="leaves">The leaves of the tree.</param>
            <param name="firstLeaf">The first leaf.</param>
            <param name="lastLeaf">The last leaf.</param>
            <param name="createNode">A function that creates a new, empty node.</param>
            <returns>The root node of the subtree.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeBuilder.BuildTopDownVarianceBasedSplit``1(System.Collections.Generic.List{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}},System.Int32,System.Int32,System.Func{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}})">
            <summary>
            Builds the subtree top-down.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="leaves">The leaves of the tree.</param>
            <param name="firstLeaf">The first leaf.</param>
            <param name="lastLeaf">The last leaf.</param>
            <param name="createNode">A function that creates a new, empty node.</param>
            <returns>The root node of the subtree.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeBuilder.BuildMixed``1(System.Collections.Generic.List{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}},System.Int32,System.Int32,System.Func{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}})">
            <summary>
            Builds the subtree using a mixed bottom-up/top-down approach.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="leaves">The leaves of the tree.</param>
            <param name="firstLeaf">The first leaf.</param>
            <param name="lastLeaf">The last leaf.</param>
            <param name="createNode">A function that creates a new, empty node.</param>
            <returns>The root node of the subtree.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeBuilder.BuildMixed``1(System.Collections.Generic.List{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}},System.Int32,System.Int32,System.Func{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}},System.Int32)">
            <summary>
            Builds the subtree using a mixed bottom-up/top-down approach.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="leaves">The leaves of the tree.</param>
            <param name="firstLeaf">The first leaf.</param>
            <param name="lastLeaf">The last leaf.</param>
            <param name="createNode">A function that creates a new, empty node.</param>
            <param name="bottomUpThreshold">
            The threshold in number of nodes (for example 128). If the number of nodes in a subtree is
            less than or equal to this value, the subtree will be built bottom-up.
            </param>
            <returns>The root node of the subtree.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeBuilder.MergeLeaveAabbs``1(System.Collections.Generic.List{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}},System.Int32,System.Int32)">
            <summary>
            Computes the combined AABB of the leaves.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="leaves">The leaves of the tree.</param>
            <param name="firstLeaf">The first leaf index (included).</param>
            <param name="lastLeaf">The last leaf index (included).</param>
            <returns>The AABB of the leaves.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeBuilder.SortLeaves``1(System.Collections.Generic.List{DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0}},System.Int32,System.Int32,System.Int32,System.Single,System.Int32@)">
            <summary>
            Sorts the leaves such that objects of the left subtree come first.
            </summary>
            <typeparam name="T">The type of item stored in the AABB tree.</typeparam>
            <param name="leaves">The leaves.</param>
            <param name="firstLeaf">The index of the first leaf.</param>
            <param name="lastLeaf">The index of the last leaf.</param>
            <param name="splitAxis">The index of the split axis.</param>
            <param name="splitValue">The split value.</param>
            <param name="rightLeaf">The index of the first leaf of the right subtree.</param>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.AabbTreeHelper">
            <summary>
            Provides extension methods for working with AABB trees.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeHelper.GetAncestors``1(DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0})">
            <summary>
            Gets the ancestors of the given node.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="node">The node.</param>
            <returns>
            The ancestors of <paramref name="node"/> starting with the direct parent of 
            <paramref name="node"/> going upwards to the root of the tree.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeHelper.GetChildren``1(DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0})">
            <summary>
            Gets the direct children of the given node.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="node">The node.</param>
            <returns>The direct children of <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeHelper.GetDescendants``1(DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0})">
            <overloads>
            <summary>
            Gets the descendants of a given node.
            </summary>
            </overloads>
            
            <summary>
            Gets the descendants of the given node using a depth-first search.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="node">The node.</param>
            <returns>The descendants of <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <remarks>
            This method can be used to traverse a tree in depth-first order (pre-order).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeHelper.GetDescendants``1(DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0},System.Boolean)">
            <summary>
            Gets the descendants of the given node using a depth-first search or a breadth-first search.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="node">The node.</param>
            <param name="depthFirst">
            If set to <see langword="true"/> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
            <returns>The descendants of <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <remarks>
            This method can be used to traverse a tree in either depth-first order (pre-order) or in 
            breadth-first order (level-order).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeHelper.GetSubtree``1(DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0})">
            <overloads>
            <summary>
            Gets the subtree (the given node and all of its descendants).
            </summary>
            </overloads>
            
            <summary>
            Gets the subtree (the given node and all of its descendants) using a depth-first search.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="node">
            The reference node where to start the search. (The reference node will be the first 
            element in the enumeration.)
            </param>
            <returns>The subtree of <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <remarks>
            This method can be used to traverse a tree in depth-first order (pre-order).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeHelper.GetSubtree``1(DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0},System.Boolean)">
            <summary>
            Gets the subtree (the given node and all of its descendants) using a depth-first search or a 
            breadth-first search.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="node">
            The reference node where to start the search. (The reference node will be the first 
            element in the enumeration.)
            </param>
            <param name="depthFirst">
            If set to <see langword="true"/> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
            <returns>The descendants of <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
            <remarks>
            This method can be used to traverse a tree in either depth-first order (pre-order) or in 
            breadth-first order (also known as level-order).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeHelper.GetLeaves``1(DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0})">
            <summary>
            Gets the leaves of a given tree.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="node">The reference node where to start the search.</param>
            <returns>The leaves of <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeHelper.GetDepth``1(DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0})">
            <summary>
            Gets the depth of the given node.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="node">The node.</param>
            <returns>The depth of the node.</returns>
            <remarks>
            The depth of a node is the length of the longest upward path to the root. Therefore, a root 
            node has a depth of 0.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeHelper.GetHeight``1(DigitalRune.Geometry.Partitioning.IAabbTreeNode{``0})">
            <summary>
            Gets the height of the given tree or subtree.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
            <param name="node">The tree.</param>
            <returns>The height of the tree.</returns>
            <remarks>
            The height of the tree is the length of the longest downward path to a leaf. Therefore, a 
            leaf node has a height of 0.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeHelper.GetProximity(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Gets a value that indicates the proximity between to AABBs.
            </summary>
            <param name="first">The first AABB.</param>
            <param name="second">The second AABB.</param>
            <returns>
            A value that indicates the proximity between <paramref name="first"/> and 
            <paramref name="second"/>. (A smaller value means a closer proximity.)
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTreeHelper.SelectClosest(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Selects the AABB that is closest to a given AABB.
            </summary>
            <param name="reference">The reference AABB.</param>
            <param name="first">The first AABB.</param>
            <param name="second">The second AABB.</param>
            <returns>
            0 if <paramref name="first"/> is closest; otherwise 1 if <paramref name="second"/> is 
            closest.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1">
            <summary>
            Builds a bounding volume tree using axis-aligned bounding boxes (AABBs), which adapts
            automatically when items are added, moved, or removed.
            </summary>
            <typeparam name="T">The type of item in the spatial partition.</typeparam>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1"/> is based on 
            <list type="bullet">
            <item>
            <description>
            Thomas Larsson: <i>"Adaptive Bounding Volume Hierarchies for Efficient Collision Queries"</i>, 
            Ph D Thesis, Mälardalen University Press, January, 2009
            </description>
            </item>
            <item>
            <description>
            Thomas Larsson, Tomas Akenine-Möller: <i>"A dynamic bounding volume hierarchy for generalized 
            collision detection"</i>, Computers &amp; Graphics, Volume 30, Issue 3, p.451-460, June, 2006
            </description>
            </item>
            </list>
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1"/> was designed to manage deformable objects efficiently.
            It should be used for <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>s or <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/>s when
            the contained shapes or triangles are updated at runtime.
            </para>
            <para>
            <strong><see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1"/> vs. <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/>:</strong>
            The <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1"/> and the <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> are similar
            data structures. As a general rule, the <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1"/> should be used if
            <list type="bullet">
            <item>
            <description>
            The entire spatial partition is invalidated regularly by calling 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Invalidate"/>.
            </description>
            </item>
            <item>
            <description>
            The spatial partition is used to compute inter-object overlaps and intra-object overlaps (see 
            <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.EnableSelfOverlaps"/>) are disabled.
            </description>
            </item>
            </list>
            Whereas the <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> should be used if
            <list type="bullet">
            <item>
            <description>
            Individual items are invalidated frequently by calling 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Invalidate(`0)"/>.
            </description>
            </item>
            <item>
            <description>
            Inter-objects and/or intra-object overlaps (see 
            <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.EnableSelfOverlaps"/>) are computed.
            </description>
            </item>
            </list>
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1"/> should not be used as the collision detection 
            broad-phase (see <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.BroadPhase"/>). Whereas, a 
            <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> can be used as the collision detection broad-phase.
            </para>
            <para>
            However, please note these are just general guidelines. You should always try different 
            <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/> types and measure which one yields the best performance in
            your application.
            </para>
            <para>
            <strong>Special handling of self-overlaps in <see cref="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})"/>:</strong> 
            If <see cref="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})"/> is used to test an AABB tree against itself
            then overlaps of an item with itself are not returned; that means, each item A overlaps with
            itself but (A, A) is not returned. And if two different items overlap, only one overlap is 
            returned, for example: If item A and item B overlap (A, B) or (B, A) is returned but not both.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1._root">
            <summary>
            The root node of a built tree.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1._leaves">
            <summary>
            The leaves of the tree.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.OnUpdate(System.Boolean,System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.UpdateAabb">
            <summary>
            Updates the AABB of the spatial partition.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.UpdateSelfOverlaps">
            <summary>
            Updates the self-overlaps.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.BottomUpBuildThreshold">
            <summary>
            Gets or sets the threshold that determines when a bottom-up tree build method is used.
            </summary>
            <value>
            The threshold that determines when the tree is built using a bottom-up method. The default
            value is 128.
            </value>
            <remarks>
            <para>
            AABB trees can be built using top-down or bottom-up methods. Top-down methods are faster but
            less optimal. Bottom-up methods are slower but produce more balanced trees. 
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1"/> uses a mixed approach: It starts with a top-down
            approach. When the number of nodes for an internal subtree is less than or equal to
            <see cref="P:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.BottomUpBuildThreshold"/> it uses a bottom-up method for the subtree.
            </para>
            <para>
            Increasing <see cref="P:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.BottomUpBuildThreshold"/> produces a better tree but (re)building the
            tree takes more time. Decreasing <see cref="P:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.BottomUpBuildThreshold"/> decreases the build
            time but produces less optimal trees.
            </para>
            <para>
            Changing <see cref="P:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.BottomUpBuildThreshold"/> does not change the tree structure 
            immediately. It takes effect the next time the tree is rebuilt.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Build">
            <summary>
            Builds the complete AABB tree.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.FullRefit(DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node)">
            <summary>
            Performs a full refit of the specified subtree.
            </summary>
            <param name="node">The root node of the subtree.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.PartialRefit(DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node,System.Collections.Generic.HashSet{`0})">
            <summary>
            Performs a partial refit of the current subtree.
            </summary>
            <param name="node">The root node of the subtree.</param>
            <param name="invalidItems">The set of invalid items.</param>
            <returns>
            <see langword="true"/> if the AABB of <paramref name="node"/> was updated; otherwise,
            <see langword="false"/> if the AABB has not changed.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.InvalidateSubtree(DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node)">
            <summary>
            Invalidates the specified subtree.
            </summary>
            <param name="node">The root node of the subtree to be invalidated.</param>
            <remarks>
            This methods removes the left and right subtrees of the current node and stores all leaf 
            nodes locally.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.RemoveSubtree(DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node,System.Collections.Generic.List{DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node})">
            <summary>
            Removes the current subtree and fetches the leaf nodes.
            </summary>
            <param name="node">The root node of the subtree.</param>
            <param name="leaves">A list where the leaf nodes will be added.</param>
            <remarks>
            The removed leaves are stored in an internal node. They are not completely
            removed from the spatial partition.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.IsDegenerate(DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node)">
            <summary>
            Checks whether the parent/children relationship of the specified node should be considered 
            as degenerate and the node should be re-split in the next collision detection query.
            </summary>
            <param name="node">The node to check.</param>
            <returns>
            <see langword="true"/> if the parent/children relationship of <paramref name="node"/> is 
            degenerate; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.AddLeaf(`0)">
            <summary>
            Adds the specified item to the AABB tree.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.AddLeaf(DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node,DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node)">
            <summary>
            Adds the leaf node to the specified subtree.
            </summary>
            <param name="node">The root of the subtree.</param>
            <param name="leaf">The leaf node.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.RemoveLeaf(`0)">
            <summary>
            Removes the specified item from the AABB tree.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.RemoveLeaf(DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node,`0)">
            <summary>
            Recursively removes the specified item from the subtree.
            </summary>
            <param name="node">The root of the tree or subtree.</param>
            <param name="item">The item to be removed.</param>
            <returns>
            <see langword="true"/> if the item was found and removed from the subtree; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.RemoveLeaf(System.Collections.Generic.List{DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node},`0)">
            <summary>
            Removes specified item from the collection of leaf nodes.
            </summary>
            <param name="leaves">The collection of leaf nodes.</param>
            <param name="item">The item to be removed.</param>
            <returns>
            <see langword="true"/> if the item was found and removed from the subtree; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.RecomputeAabb(DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node)">
            <summary>
            Recomputes the AABB of the specified node. (All leaf nodes need to be up-to-date.)
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.SplitIfNecessary(DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node)">
            <summary>
            Splits the specified node if necessary.
            </summary>
            <param name="node">The node to be split.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.SortLeaves(System.Collections.Generic.List{DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node},System.Int32,System.Single,System.Int32@)">
            <summary>
            Sorts the leaf nodes in the given list.
            </summary>
            <param name="leaves">The leaves.</param>
            <param name="splitAxis">The index of the split axis.</param>
            <param name="splitValue">The split value.</param>
            <param name="rightLeaf">The index of the first leaf in the right sub-volume.</param>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node">
            <summary>
            Represents a node of an <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1"/>.
            </summary>
            <remarks>
            A node is also the root of a subtree. Each node can be either a leaf or an inner node.
            <list type="bullet">
            <item>
            <description>
            If the node is a leaf <see cref="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.LeftChild"/> and <see cref="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.RightChild"/> are 
            <see langword="null"/> and the node contains an <see cref="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.Item"/>.
            </description>
            </item>
            <item>
            <description>
            If the node is an inner node then <see cref="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.LeftChild"/> and <see cref="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.RightChild"/> are 
            not <see langword="null"/> and the node does not contain an <see cref="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.Item"/>.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.Aabb">
            <summary>
            The AABB of this node which contains the current subtree.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.LeftChild">
            <summary>
            The left child or <see langword="null"/> if the node is a leaf node.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.RightChild">
            <summary>
            The right child or <see langword="null"/> if the node is a leaf node.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.Item">
            <summary>
            The data object.
            </summary>
            <remarks>
            Often this data is an integer index in a collection with the real data objects.
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.Leaves">
            <summary>
            The leaves of the current subtree. (Set if the subtree has been invalidated.)
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.IsActive">
            <summary>
            <see langword="true"/> if the current node was visited in the collision detection queries
            since the last update; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.IsDegenerate">
            <summary>
            <see langword="true"/> if the parent/child relationship of the current node is degenerate 
            and the node should be re-split; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.IsLeaf">
            <summary>
            Gets a value indicating whether this instance is a leaf node.
            </summary>
            <value>
            <see langword="true"/> if this instance is a leaf node; otherwise, <see langword="false"/>
            if it is an internal node.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.IsValid">
            <summary>
            Gets a value indicating whether this <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node"/> is valid.
            </summary>
            <value>
            <see langword="true"/> if valid; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            A node of an adaptive AABB tree is invalid if it is an non-leaf node that has items
            associated with it, but has no appropriate subtree yet.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#Aabb">
            <summary>
            Gets or sets the AABB of this node which contains the current subtree.
            </summary>
            <value>The AABB of this node which contains the current subtree.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#LeftChild">
            <summary>
            Gets or sets the left child node.
            </summary>
            <value>
            The left child node. (Or <see langword="null"/> if the node is a leaf node.)
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#RightChild">
            <summary>
            Gets or sets the right child node.
            </summary>
            <value>
            The right child node. (Or <see langword="null"/> if the node is a leaf node.)
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#Parent">
            <summary>
            Gets the parent node.
            </summary>
            <value>
            The parent node. (Or <see langword="null"/> if the node is a leaf node.)
            </value>
            <exception cref="T:System.NotSupportedException">
            <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node"/> does not store a reference to its parent node.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#Item">
            <summary>
            Gets (or sets) the data held in this node.
            </summary>
            <value>The data of this node.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetLeafNodes(DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Gets the leaf nodes that touch the given AABB. (Same as <see cref="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)"/>
            except we directly return the AABB tree node.)
            </summary>
            <param name="aabb">The axis-aligned bounding box.</param>
            <returns>All leaf nodes that touch the given AABB.</returns>
            <remarks>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Filter"/>) is not applied.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetClosestPointCandidates(DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Func{`0,System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.IsABiggerThanB(DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Compares the sizes of two transformed AABB nodes.
            </summary>
            <param name="nodeA">The first AABB node.</param>
            <param name="scaleA">The scale of the first AABB node.</param>
            <param name="nodeB">The second AABB node.</param>
            <param name="scaleB">The scale of the second AABB node.</param>
            <returns>
            <see langword="true"/> if is <paramref name="nodeA"/> bigger than <paramref name="nodeB"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.HaveAabbContact(DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <summary>
            Makes an AABB check for the two node AABBs where the second has a pose and scale.
            </summary>
            <param name="nodeA">The first AABB node.</param>
            <param name="scaleA">The scale of the first AABB node.</param>
            <param name="nodeB">The second AABB node.</param>
            <param name="scaleB">The scale of the second AABB node.</param>
            <param name="poseB">The pose of the second AABB node relative to the first.</param>
            <returns>
            <see langword="true"/> if the AABBs have contact; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetClosestPointCandidates(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{`0,`0,System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1.GetClosestPointCandidatesImpl(DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Partitioning.AdaptiveAabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{`0,`0,System.Single},System.Single@)">
            <summary>
            Gets all items that are candidates for the smallest closest-point distance to items in a
            given partition. (Internal, recursive.)
            </summary>
            <param name="nodeA">The first AABB node.</param>
            <param name="scaleA">The scale of the first AABB node.</param>
            <param name="nodeB">The second AABB node.</param>
            <param name="scaleB">The scale of the second AABB node.</param>
            <param name="poseB">The pose of the second AABB node relative to the first.</param>
            <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
            <param name="closestPointDistanceSquared">
            The squared of the current closest-point distance.
            </param>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree">
            <summary>
            Represents a compressed and optimized bounding volume tree using axis-aligned bounding boxes 
            (AABBs).
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> is a specialized version of an <see cref="T:DigitalRune.Geometry.Partitioning.AabbTree`1"/>
            for items of type <see cref="T:System.Int32"/>. It requires significantly less memory than an 
            <see cref="T:DigitalRune.Geometry.Partitioning.AabbTree`1"/>, but building or updating ("refitting") a
            <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> is more expensive. It should be used for partitioning static
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>s or <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/>s that consist of many shapes
            or triangles.
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> can store up to 2<sup>32-1</sup> data values of type
            <see cref="T:System.Int32"/> (range 0 - 2,147,483,647).
            </para>
            <para>
            <strong>Limitations:</strong> Objects organized by the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> need 
            to have finite size. The <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> cannot be used for extremely large, 
            or infinitely large objects. For example: A <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> using a 
            <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> must not contain an <see cref="T:DigitalRune.Geometry.Shapes.InfiniteShape"/>, a 
            <see cref="T:DigitalRune.Geometry.Shapes.LineShape"/>, or a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/>.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.CompressedAabbTree.AabbMargin">
            <summary>
            A margin which is added to the tree's AABB to avoid divisions by zero.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Aabb">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Count">
            <summary>
            Gets the number of items contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value>The number of items contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.EnableSelfOverlaps">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Filter">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetAabbForItem">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.System#Collections#Generic#ICollection{System#Int32}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Internals">
            <exclude/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.DigitalRune#Geometry#Partitioning#ISpatialPartition{System#Int32}#Clone">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> that is a clone (deep copy) of the current
            instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> that is a clone (deep copy) of the current instance.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Add(System.Int32)">
            <summary>
            Adds an item to the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/>.</param>
            <remarks>
            Duplicate items or <see langword="null"/> are not allowed in the 
            <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Clear">
            <summary>
            Removes all items from the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Contains(System.Int32)">
            <summary>
            Determines whether the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> contains a specific item.
            </summary>
            <param name="item">The object to locate in the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies the elements of the tree to an <see cref="T:System.Array"/>, starting at a particular 
            <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional. Or <paramref name="arrayIndex"/> is equal to 
            or greater than the length of <paramref name="array"/>. Or the number of elements in the 
            source <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> is not modified. The order of the elements in the new 
            array is the same as the order of the elements in the tree in depth-first order.
            </para>
            <para>
            This method is an O(n) operation, where n is the number of nodes in the tree!
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.FilterSelfOverlap(DigitalRune.Collections.Pair{System.Int32})">
            <summary>
            Checks if the pair of items is a valid self-overlap.
            </summary>
            <param name="pair">The pair of items.</param>
            <returns>
            <see langword="true"/> if the pair should be accepted; otherwise, <see langword="false"/> if
            the pair should be rejected.
            </returns>
            <remarks>
            This method returns <see langword="false"/> if the given items are identical or if the 
            <see cref="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Filter"/> returns <see langword="false"/>. This method does NOT check AABB
            overlaps.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Remove(System.Int32)">
            <summary>
            Removes the first occurrence of a specific item from the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/>.
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> was successfully removed from the 
            <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/>; otherwise, <see langword="false"/>. This method also 
            returns <see langword="false"/> if <paramref name="item"/> is not found in the original 
            <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Invalidate">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Invalidate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.InvalidateTree">
            <summary>
            Invalidates the tree. (Converts the internal tree to a plain list.)
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Update(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.SetQuantizationValues(DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Sets the reference AABB and prepares the factors for quantization.
            </summary>
            <param name="aabb">The AABB of the spatial partition.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetAabb(DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node)">
            <summary>
            Gets the AABB using dequantization.
            </summary>
            <param name="node">The compressed AABB node.</param>
            <returns>The dequantized AABB.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.SetAabb(DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node@,DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Sets the AABB using quantization.
            </summary>
            <param name="node">The compressed AABB node.</param>
            <param name="aabb">The AABB to be quantized.</param>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.BottomUpBuildThreshold">
            <summary>
            Gets or sets the threshold that determines when a bottom-up tree build method is used.
            </summary>
            <value>
            The threshold that determines when the tree is built using a bottom-up method. The default
            value is 128.
            </value>
            <remarks>
            <para>
            AABB trees can be built using top-down or bottom-up methods. Top-down methods are faster but
            less optimal. Bottom-up methods are slower but produce more balanced trees. 
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> uses a mixed approach: It starts with a top-down
            approach. When the number of nodes for an internal subtree is less than or equal to 
            <see cref="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.BottomUpBuildThreshold"/> it uses a bottom-up method for the subtree.
            </para>
            <para>
            Increasing <see cref="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.BottomUpBuildThreshold"/> produces a better tree but (re)building the
            tree takes more time. Decreasing <see cref="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.BottomUpBuildThreshold"/> decreases the build
            time but produces less optimal trees.
            </para>
            <para>
            Changing <see cref="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.BottomUpBuildThreshold"/> does not change the tree structure 
            immediately. It takes effect the next time the tree is rebuilt.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Build">
            <summary>
            Builds the AABB tree.
            </summary>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            Cannot build AABB tree. The property <see cref="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetAabbForItem"/> of the spatial partition
            is not set.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.CompressTree(System.Collections.Generic.List{DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node},DigitalRune.Geometry.Partitioning.AabbTree{System.Int32}.Node)">
            <summary>
            Compresses an AABB tree.
            </summary>
            <param name="compressedNodes">The list of compressed AABB nodes.</param>
            <param name="uncompressedNode">The root of the uncompressed AABB tree.</param>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node">
            <summary>
            Represents a node of an <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/>.
            </summary>
            <remarks>
            <para>
            The minimum and maximum of the AABB are stored as quantized 16-bit integer values.
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> supports a stackless, non-recursive traversal of the 
            tree. The tree is traversed in pre-order traversal order. The nodes are stored in the order 
            as they are visited in the traversal: The left child follows the parent node. The right 
            child follows after the left subtree. If a node is a leaf then the right sibling directly 
            follows. The leaf nodes store the actual items of the AABB tree. Each non-leaf stores an 
            'escape offset'. This offset points to the node that follows in the traversal if we stop
            traversing a left subtree and continue with its right subtree. By using an escape offset we 
            do not need to store the root of the right subtree on a stack (implicitly or explicitly).
            </para>
            <para>
            The field <see cref="F:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node.EscapeOffsetOrItem"/> is negative if the node is an internal node and 
            the field contains an escape offset (<c>escapeOffset = -node.EscapeOffsetOrItem</c>). The 
            value is positive if the node is a leaf and contains an item index.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node.MinimumX">
            <summary>
            The quantized minimum of the AABB (x component).
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node.MinimumY">
            <summary>
            The quantized minimum of the AABB (y component).
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node.MinimumZ">
            <summary>
            The quantized minimum of the AABB (z component).
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node.MaximumX">
            <summary>
            The quantized maximum of the AABB (x component).
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node.MaximumY">
            <summary>
            The quantized maximum of the AABB (y component).
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node.MaximumZ">
            <summary>
            The quantized maximum of the AABB (z component).
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node.EscapeOffsetOrItem">
            <summary>
            The escape offset (if negative) or the item index.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node.IsLeaf">
            <summary>
            Gets a value indicating whether this instance is leaf node.
            </summary>
            <value>
            <see langword="true"/> if this instance is leaf; otherwise, <see langword="false"/> if it
            is an internal node.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node.Item">
            <summary>
            Gets or sets the data held in this node.
            </summary>
            <value>The data of this node.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Node.EscapeOffset">
            <summary>
            Gets or sets the escape offset of this node.
            </summary>
            <value>The escape offset of this node.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetLeafNodes(DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Gets the leaf nodes that touch the given AABB. (Same as 
            <see cref="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)"/> except we directly return the AABB tree node.
            </summary>
            <param name="aabb">The axis-aligned bounding box.</param>
            <returns>All items that touch the given AABB.</returns>
            <remarks>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Filter"/>) is not applied.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetOverlaps(System.Int32)">
            <summary>
            Gets the items that touch the given item.
            </summary>
            <param name="item">
            The item. (The given item must be part of the spatial partition. External items are not 
            supported.)
            </param>
            <returns>All items that touch the given item.</returns>
            <remarks>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.CompressedAabbTree.Filter"/>) is applied to filter overlaps.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetOverlaps">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetClosestPointCandidates(DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Func{System.Int32,System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{System.Int32},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.CompressedAabbTree.GetClosestPointCandidates(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{System.Int32},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{System.Int32,System.Int32,System.Single})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1">
            <summary>
            Represents a dynamic bounding volume tree using axis-aligned bounding boxes (AABBs).
            </summary>
            <typeparam name="T">The type of item in the spatial partition.</typeparam>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> was inspired by the dynamic bounding volume tree 
            (<c>btDbvt</c>) as implemented in the <see href="http://bulletphysics.org/">Bullet Continuous 
            Collision Detection and Physics Library</see>. (Original <c>btDbvt</c> implementation by 
            Nathanael Presson.)
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> was designed to manage deformable objects efficiently. It
            should be uses for <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>s or <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/>s when the
            the contained shapes or triangles are updated at runtime.
            </para>
            <para>
            It can also be used as a collision detection broad-phase (see 
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.BroadPhase"/>).
            </para>
            <para>
            <strong>Incremental Optimization:</strong> When items in the AABB tree are added, removed or
            moved the AABB tree might become unbalanced and less optimal for collision detection. 
            Therefore, the <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> tries to optimize its tree structure over 
            time. In each frame (time step) it performs a number of optimization passes. The amount of 
            optimization per frame can be controlled by setting <see cref="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.OptimizationPerFrame"/>.
            </para>
            <para>
            <strong>Motion Prediction:</strong> The dynamic AABB tree is further optimized for 
            models/space where items are constantly moving. The <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> 
            automatically detects when items are moving. It adds a small margin (see 
            <see cref="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.RelativeMargin"/>) to the AABB of these items to account for small random movements
            ("jittering") and it extends the AABB in the direction the items are moving (see 
            <see cref="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.MotionPrediction"/>). This reduces the number of required tree updates per frame. 
            However, the downside is that the AABB tree is more conservative (safe, but less accurate). It
            might return more overlaps ("false positives") than other types of spatial partitions.
            </para>
            <para>
            Motion predication can be enabled by setting <see cref="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.EnableMotionPrediction"/>. The feature
            is disabled by default.
            </para>
            <para>
            <strong><see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1"/> vs. <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/>:</strong> The 
            <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1"/> and the <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> are similar data
            structures. As a general rule, the <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1"/> should be used if
            <list type="bullet">
            <item>
            <description>
            The entire spatial partition is invalidated regularly by calling 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Invalidate"/>.
            </description>
            </item>
            <item>
            <description>
            The spatial partition is used to compute inter-object overlaps and intra-object overlaps (see 
            <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.EnableSelfOverlaps"/>) are disabled.
            </description>
            </item>
            </list>
            Whereas the <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> should be used if
            <list type="bullet">
            <item>
            <description>
            Individual items are invalidated frequently by calling 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Invalidate(`0)"/>.
            </description>
            </item>
            <item>
            <description>
            Items are added or removed frequently. (Inserting or removing individual items into/from a 
            <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> is fast.)
            </description>
            </item>
            </list>
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.AdaptiveAabbTree`1"/> should not be used as the collision detection 
            broad-phase (see <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.BroadPhase"/>). Whereas, a 
            <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> can be used as the collision detection broad-phase.
            </para>
            <para>
            However, please note these are just general rules. You should always try different 
            <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/> types and measure which one yields the best performance in
            your application.
            </para>
            <para>
            <strong>Special handling of self-overlaps in 
            <see cref="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})"/>:</strong> If 
            <see cref="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})"/> is used to test an AABB tree against itself
            then overlaps of an item with itself are not returned. That means, each item A overlaps with
            itself, but (A, A) is not returned. And if two different items overlap, only one overlap is 
            returned, for example: If item A and item B overlap (A, B) or (B, A) is returned, but not 
            both.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1._root">
            <summary>
            The root node of a built tree.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1._leaves">
            <summary>
            The leaves of the tree.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1._optimizationPath">
            <summary>
            Identifies the path to the node which is next in the incremental optimization procedure.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1._numberOfNodesToOptimize">
            <summary>
            The number of nodes that should be optimized.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.OptimizationPerFrame">
            <summary>
            Gets or set the amount of incremental optimization per frame (time step).
            </summary>
            <value>
            The amount of incremental optimization per frame. A value between 0 (no updates per frame) 
            and 1 (100% of the tree is updated per frame). The default value is 0.01.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is out of range. Allowed range is [0, 1].
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.EnableMotionPrediction">
            <summary>
            Gets a value indicating whether motion prediction is enabled.
            </summary>
            <value>
            <see langword="true"/> if motion prediction is enabled; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.
            </value>
            <remarks>
            Motion prediction analyzes the movement of items to estimate their velocity. The AABB of
            moving items is increased to avoid reduce tree updates because of movement. Motion
            prediction should be enabled if the spatial partition contains many moving objects.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.RelativeMargin">
            <summary>
            Gets or sets a relative margin that is added to the AABB of moving objects. (Only applied if
            motion prediction is enabled.)
            </summary>
            <value>
            <para>
            The relative margin that is added to the AABB of moving objects. (Only applied if motion 
            prediction is enabled.)
            </para>
            <para>
            The default value is 0.05. (The size of the AABB is increased by 5%.)
            </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is out of range. Allowed range is [0, 1].
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.MotionPrediction">
            <summary>
            Gets or sets the number of frames a linear motion is predicted into the future. (Only 
            applied if motion prediction is enabled.)
            </summary>
            <value>
            The number of frames a linear motion is predicted into the future. The default value is 1.
            (Only applied if motion prediction is enabled.)
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1" /> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Invalidate(`0)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.OnUpdate(System.Boolean,System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.OnUpdate">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.UpdateAabb">
            <summary>
            Updates the AABB of the spatial partition.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.BottomUpBuildThreshold">
            <summary>
            Gets or sets the threshold that determines when a bottom-up tree build method is used.
            </summary>
            <value>
            The threshold that determines when the tree is built using a bottom-up method. The default
            value is 128.
            </value>
            <remarks>
            <para>
            AABB trees can be built using top-down or bottom-up methods. Top-down methods are faster but
            less optimal. Bottom-up methods are slower but produce more balanced trees. 
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> uses a mixed approach: It starts with a top-down
            approach. When the number of nodes for an internal subtree is less than or equal to
            <see cref="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.BottomUpBuildThreshold"/> it uses a bottom-up method for the subtree.
            </para>
            <para>
            Increasing <see cref="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.BottomUpBuildThreshold"/> produces a better tree but (re)building the
            tree takes more time. Decreasing <see cref="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.BottomUpBuildThreshold"/> decreases the build
            time but produces less optimal trees.
            </para>
            <para>
            Changing <see cref="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.BottomUpBuildThreshold"/> does not change the tree structure 
            immediately. It takes effect the next time the tree is rebuilt.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Build">
            <summary>
            Builds the AABB tree.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Refit(DigitalRune.Geometry.Partitioning.DynamicAabbTree{`0}.Node,System.Collections.Generic.HashSet{`0})">
            <summary>
            Refits the subtree.
            </summary>
            <param name="node">The subtree root.</param>
            <param name="invalidItems">The items that need to be updated.</param>
            <returns>
            <see langword="true"/> if the AABB of <paramref name="node"/> was updated; otherwise,
            <see langword="false"/> if the AABB has not changed.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.AddLeaf(DigitalRune.Geometry.Partitioning.DynamicAabbTree{`0}.Node,DigitalRune.Geometry.Partitioning.DynamicAabbTree{`0}.Node)">
            <summary>
            Adds a leaf node to the given tree.
            </summary>
            <param name="root">The root of the tree (or subtree).</param>
            <param name="leaf">The leaf node to be added.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.RemoveLeaf(DigitalRune.Geometry.Partitioning.DynamicAabbTree{`0}.Node)">
            <summary>
            Removes the specified leaf node from the tree.
            </summary>
            <param name="leaf">The leaf node .</param>
            <returns>
            The closest ancestor of <paramref name="leaf"/> that was not resized during remove.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.OptimizeIncrementally(System.Int32)">
            <summary>
            Optimizes the incrementally.
            </summary>
            <param name="numberOfPasses">
            The number of passes. In each pass one leaf node is updated.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.UpdateLeaf(DigitalRune.Geometry.Partitioning.DynamicAabbTree{`0}.Node)">
            <summary>
            Updates the specified node.
            </summary>
            <param name="node">The node to be updated.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.UpdateLeaf(DigitalRune.Geometry.Partitioning.DynamicAabbTree{`0}.Node,DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Updates the node and sets the specified AABB.
            </summary>
            <param name="node">The node to be updated.</param>
            <param name="newAabb">The new AABB of <paramref name="node"/>.</param>
            <remarks>
            <para>
            Motion prediction is used to reduce the number of tree updates: If motion prediction is 
            enabled, the AABB of the node is increased artificially to hopefully include future 
            positions of the item. If a future AABB is contained in the current AABB the tree is left 
            unchanged. See check in <see cref="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Invalidate(`0)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Expand(DigitalRune.Geometry.Shapes.Aabb@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Expands the specified AABB in the given direction.
            </summary>
            <param name="aabb">The AABB to be expanded.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Expand(DigitalRune.Geometry.Shapes.Aabb@,System.Single)">
            <summary>
            Expands the specified AABB by a margin.
            </summary>
            <param name="aabb">The AABB to be expanded.</param>
            <param name="margin">The relative margin.</param>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node">
            <summary>
            Represents a node of an <see cref="T:DigitalRune.Geometry.Partitioning.AabbTree`1"/>.
            </summary>
            <remarks>
            A node is also the root of a subtree. Each node can be either a leaf or an inner node.
            <list type="bullet">
            <item>
            <description>
            If the node is a leaf <see cref="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.LeftChild"/> and <see cref="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.RightChild"/> are 
            <see langword="null"/> and the node contains an <see cref="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.Item"/>.
            </description>
            </item>
            <item>
            <description>
            If the node is an inner node then <see cref="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.LeftChild"/> and <see cref="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.RightChild"/> are 
            not <see langword="null"/> and the node does not contain an <see cref="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.Item"/>.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.Aabb">
            <summary>
            The AABB of this node which contains the current subtree.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.Parent">
            <summary>
            The parent of the node or <see langword="null"/> if the current node is the root of the 
            tree.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.LeftChild">
            <summary>
            The left child or <see langword="null"/> if the node is a leaf node.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.RightChild">
            <summary>
            The right child or <see langword="null"/> if the node is a leaf node.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.Item">
            <summary>
            The data object.
            </summary>
            <remarks>
            Often this data is an integer index in a collection with the real data objects.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.IsLeaf">
            <summary>
            Gets a value indicating whether this instance is leaf node.
            </summary>
            <value>
            <see langword="true"/> if this instance is leaf; otherwise, <see langword="false"/> if it
            is an internal node.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#Aabb">
            <summary>
            Gets or sets the AABB of this node which contains the current subtree.
            </summary>
            <value>The AABB of this node which contains the current subtree.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#LeftChild">
            <summary>
            Gets or sets the left child node.
            </summary>
            <value>
            The left child node. (Or <see langword="null"/> if the node is a leaf node.)
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#RightChild">
            <summary>
            Gets or sets the right child node.
            </summary>
            <value>
            The right child node. (Or <see langword="null"/> if the node is a leaf node.)
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#Parent">
            <summary>
            Gets the parent node.
            </summary>
            <value>
            The parent node. (Or <see langword="null"/> if the node is a leaf node.)
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#Item">
            <summary>
            Gets (or sets) the data held in this node.
            </summary>
            <value>The data of this node.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetLeafNodes(DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Gets the leaf nodes that touch the given AABB. (Same as <see cref="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)"/>
            except we directly return the AABB tree node.
            </summary>
            <param name="aabb">The axis-aligned bounding box.</param>
            <returns>All leaf nodes that touch the given AABB.</returns>
            <remarks>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Filter"/>) is not applied.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetOverlaps(System.Collections.Generic.IList{DigitalRune.Geometry.Shapes.Plane})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetClosestPointCandidates(DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Func{`0,System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.IsABiggerThanB(DigitalRune.Geometry.Partitioning.DynamicAabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Partitioning.DynamicAabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Compares the sizes of two transformed AABB nodes.
            </summary>
            <param name="nodeA">The first AABB node.</param>
            <param name="scaleA">The scale of the first AABB node.</param>
            <param name="nodeB">The second AABB node.</param>
            <param name="scaleB">The scale of the second AABB node.</param>
            <returns>
            <see langword="true"/> if is <paramref name="nodeA"/> bigger than <paramref name="nodeB"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.HaveAabbContact(DigitalRune.Geometry.Partitioning.DynamicAabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Partitioning.DynamicAabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <summary>
            Makes an AABB check for the two node AABBs where the second has a pose and scale.
            </summary>
            <param name="nodeA">The first AABB node.</param>
            <param name="scaleA">The scale of the first AABB node.</param>
            <param name="nodeB">The second AABB node.</param>
            <param name="scaleB">The scale of the second AABB node.</param>
            <param name="poseB">The pose of the second AABB node relative to the first.</param>
            <returns>
            <see langword="true"/> if the AABBs have contact; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetClosestPointCandidates(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{`0,`0,System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1.GetClosestPointCandidatesImpl(DigitalRune.Geometry.Partitioning.DynamicAabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Partitioning.DynamicAabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{`0,`0,System.Single},System.Single@)">
            <summary>
            Gets all items that are candidates for the smallest closest-point distance to items in a
            given partition. (Internal, recursive.)
            </summary>
            <param name="nodeA">The first AABB node.</param>
            <param name="scaleA">The scale of the first AABB node.</param>
            <param name="nodeB">The second AABB node.</param>
            <param name="scaleB">The scale of the second AABB node.</param>
            <param name="poseB">The pose of the second AABB node relative to the first.</param>
            <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
            <param name="closestPointDistanceSquared">
            The squared of the current closest-point distance.
            </param>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.IAabbTreeNode`1">
            <summary>
            Represents a binary node of an AABB tree.
            </summary>
            <typeparam name="T">The type of item stored in the tree.</typeparam>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.IAabbTreeNode`1.Aabb">
            <summary>
            Gets or sets the AABB of this node which contains the current subtree.
            </summary>
            <value>The AABB of this node which contains the current subtree.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.IAabbTreeNode`1.LeftChild">
            <summary>
            Gets or sets the left child node.
            </summary>
            <value>The left child node. (Or <see langword="null"/> if the node is a leaf node.)</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.IAabbTreeNode`1.RightChild">
            <summary>
            Gets or sets the right child node.
            </summary>
            <value>The right child node. (Or <see langword="null"/> if the node is a leaf node.)</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.IAabbTreeNode`1.Parent">
            <summary>
            Gets the parent node.
            </summary>
            <value>The parent node. (Or <see langword="null"/> if the node is a leaf node.)</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.IAabbTreeNode`1.IsLeaf">
            <summary>
            Gets a value indicating whether this instance is a leaf node.
            </summary>
            <value>
            <see langword="true"/> if this instance is a leaf; otherwise, <see langword="false"/> if it
            is an internal node.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.IAabbTreeNode`1.Item">
            <summary>
            Gets the data held in this node.
            </summary>
            <value>The data of this node.</value>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.AabbTree`1">
            <summary>
            Represents a bounding volume tree using axis-aligned bounding boxes (AABBs).
            </summary>
            <typeparam name="T">The type of item in the spatial partition.</typeparam>
            <remarks>
            <para>
            <see cref="T:DigitalRune.Geometry.Partitioning.AabbTree`1"/> partitions are good for partitioning static models or spaces where
            items are not changed at runtime or when the changes are small or local. For example, an 
            <see cref="T:DigitalRune.Geometry.Partitioning.AabbTree`1"/> is appropriate for managing large static triangle meshes
            efficiently. But they are not suitable for dynamic models or spaces where items are
            added/removed at runtime or when the large changes are applied to items.
            </para>
            <para>
            Consider using the <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/> instead of the <see cref="T:DigitalRune.Geometry.Partitioning.AabbTree`1"/>
            if items of type <see cref="T:System.Int32"/> need to be stored. The <see cref="T:DigitalRune.Geometry.Partitioning.CompressedAabbTree"/>
            reduced the memory requirements considerably.
            </para>
            <para>
            <strong>Special handling of self-overlaps in 
            <see cref="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})"/>:</strong> If 
            <see cref="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})"/> is used to test an AABB tree against itself
            then overlaps of an item with itself are not returned; that means, each item A overlaps with
            itself but (A, A) is not returned. And if two different items overlap, only one overlap is 
            returned, for example: If item A and item B overlap (A, B) or (B, A) is returned but not both.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AabbTree`1._root">
            <summary>
            The root node of a built tree.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AabbTree`1._leaves">
            <summary>
            The leaves of the tree.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.OnUpdate(System.Boolean,System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0})">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AabbTree`1.BottomUpBuildThreshold">
            <summary>
            Gets or sets the threshold that determines when a bottom-up tree build method is used.
            </summary>
            <value>
            The threshold that determines when the tree is built using a bottom-up method. The default
            value is 128.
            </value>
            <remarks>
            <para>
            AABB trees can be built using top-down or bottom-up methods. Top-down methods are faster but
            less optimal. Bottom-up methods are slower but produce more balanced trees. 
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.AabbTree`1"/> uses a mixed approach: It starts with a top-down approach.
            When the number of nodes for an internal subtree is less than or equal to
            <see cref="P:DigitalRune.Geometry.Partitioning.AabbTree`1.BottomUpBuildThreshold"/> it uses a bottom-up method for the subtree.
            </para>
            <para>
            Increasing <see cref="P:DigitalRune.Geometry.Partitioning.AabbTree`1.BottomUpBuildThreshold"/> produces a better tree but (re)building the
            tree takes more time. Decreasing <see cref="P:DigitalRune.Geometry.Partitioning.AabbTree`1.BottomUpBuildThreshold"/> decreases the build
            time but produces less optimal trees.
            </para>
            <para>
            Changing <see cref="P:DigitalRune.Geometry.Partitioning.AabbTree`1.BottomUpBuildThreshold"/> does not change the tree structure 
            immediately. It takes effect the next time the tree is rebuilt.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.Build">
            <summary>
            Builds the AABB tree.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.Refit(DigitalRune.Geometry.Partitioning.AabbTree{`0}.Node,System.Collections.Generic.HashSet{`0})">
            <summary>
            Refits the subtree.
            </summary>
            <param name="node">The subtree root.</param>
            <param name="invalidItems">The items that need to be updated.</param>
            <returns>
            <see langword="true"/> if the AABB of <paramref name="node"/> was updated; otherwise,
            <see langword="false"/> if the AABB has not changed.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.AabbTree`1.Node">
            <summary>
            Represents a node of an <see cref="T:DigitalRune.Geometry.Partitioning.AabbTree`1"/>.
            </summary>
            <remarks>
            A node is also the root of a subtree. Each node can be either a leaf or an inner node.
            <list type="bullet">
            <item>
            <description>
            If the node is a leaf <see cref="F:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.LeftChild"/> and <see cref="F:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.RightChild"/> are 
            <see langword="null"/> and the node contains an <see cref="F:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.Item"/>.
            </description>
            </item>
            <item>
            <description>
            If the node is an inner node then <see cref="F:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.LeftChild"/> and <see cref="F:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.RightChild"/> are 
            not <see langword="null"/> and the node does not contain an <see cref="F:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.Item"/>.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.Aabb">
            <summary>
            The AABB of this node which contains the current subtree.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.Parent">
            <summary>
            The parent of the node or <see langword="null"/> if the current node is the root of the 
            tree.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.LeftChild">
            <summary>
            The left child or <see langword="null"/> if the node is a leaf node.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.RightChild">
            <summary>
            The right child or <see langword="null"/> if the node is a leaf node.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.Item">
            <summary>
            The data object.
            </summary>
            <remarks>
            Often this data is an integer index in a collection with the real data objects.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.IsLeaf">
            <summary>
            Gets a value indicating whether this instance is leaf node.
            </summary>
            <value>
            <see langword="true"/> if this instance is leaf; otherwise, <see langword="false"/> if it
            is an internal node.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#Aabb">
            <summary>
            Gets or sets the AABB of this node which contains the current subtree.
            </summary>
            <value>The AABB of this node which contains the current subtree.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#LeftChild">
            <summary>
            Gets or sets the left child node.
            </summary>
            <value>
            The left child node. (Or <see langword="null"/> if the node is a leaf node.)
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#RightChild">
            <summary>
            Gets or sets the right child node.
            </summary>
            <value>
            The right child node. (Or <see langword="null"/> if the node is a leaf node.)
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#Parent">
            <summary>
            Gets the parent node.
            </summary>
            <value>
            The parent node. (Or <see langword="null"/> if the node is a leaf node.)
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.AabbTree`1.Node.DigitalRune#Geometry#Partitioning#IAabbTreeNode{T}#Item">
            <summary>
            Gets (or sets) the data held in this node.
            </summary>
            <value>The data of this node.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetLeafNodes(DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Gets the leaf nodes that touch the given AABB. (Same as <see cref="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)"/>
            except we directly return the AABB tree node.
            </summary>
            <param name="aabb">The axis-aligned bounding box.</param>
            <returns>All leaf nodes that touch the given AABB.</returns>
            <remarks>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Filter"/>) is not applied.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetClosestPointCandidates(DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Func{`0,System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.IsABiggerThanB(DigitalRune.Geometry.Partitioning.AabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Partitioning.AabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Compares the sizes of two transformed AABB nodes.
            </summary>
            <param name="nodeA">The first AABB node.</param>
            <param name="scaleA">The scale of the first AABB node.</param>
            <param name="nodeB">The second AABB node.</param>
            <param name="scaleB">The scale of the second AABB node.</param>
            <returns>
            <see langword="true"/> if is <paramref name="nodeA"/> bigger than <paramref name="nodeB"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.HaveAabbContact(DigitalRune.Geometry.Partitioning.AabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Partitioning.AabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <summary>
            Makes an AABB check for the two node AABBs where the second has a pose and scale.
            </summary>
            <param name="nodeA">The first AABB node.</param>
            <param name="scaleA">The scale of the first AABB node.</param>
            <param name="nodeB">The second AABB node.</param>
            <param name="scaleB">The scale of the second AABB node.</param>
            <param name="poseB">The pose of the second AABB node relative to the first.</param>
            <returns>
            <see langword="true"/> if the AABBs have contact; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetClosestPointCandidates(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{`0,`0,System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetClosestPointCandidatesImpl(DigitalRune.Geometry.Partitioning.AabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Partitioning.AabbTree{`0}.Node,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{`0,`0,System.Single},System.Single@)">
            <summary>
            Gets all items that are candidates for the smallest closest-point distance to items in a
            given partition. (Internal, recursive.)
            </summary>
            <param name="nodeA">The first AABB node.</param>
            <param name="scaleA">The scale of the first AABB node.</param>
            <param name="nodeB">The second AABB node.</param>
            <param name="scaleB">The scale of the second AABB node.</param>
            <param name="poseB">The pose of the second AABB node relative to the first.</param>
            <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
            <param name="closestPointDistanceSquared">
            The squared of the current closest-point distance.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.AabbTree`1.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.AabbTree{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Collections.Generic.List{DigitalRune.Collections.Pair{`0}})">
            <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial 
            partition.
            </summary>
            <param name="scale">The scale of this spatial partition.</param>
            <param name="pose">The pose of this spatial partition.</param>
            <param name="otherTree">The other spatial partition to test against.</param>
            <param name="otherScale">The scale of the <paramref name="otherTree"/>.</param>
            <param name="otherPose">The pose of the <paramref name="otherTree"/>.</param>
            <param name="overlaps">
            A list where all pairwise overlaps between items of this spatial partition and 
            <paramref name="otherTree"/> are added. In each <see cref="T:DigitalRune.Collections.Pair`1"/> the first item
            (see <see cref="P:DigitalRune.Collections.Pair`1.First"/>) is from this partition and the second item (see 
            <see cref="P:DigitalRune.Collections.Pair`1.Second"/>) is from <paramref name="otherTree"/>.
            </param>
            <remarks>
            <para>
            Both spatial partitions are unscaled and defined in local space. The scales and the poses
            transform the spatial partitions from their local space to world space. The scale is applied 
            before the pose.
            </para>
            <para>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Filter"/>) is applied to filter overlaps.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="otherTree"/> is <see langword="null"/>.
            </exception>
            /// <exception cref="T:System.ArgumentNullException">
            <paramref name="overlaps"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.BasePartition`1">
            <summary>
            Provides basic functionality of an <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/>. (For internal use 
            only.)
            </summary>
            <typeparam name="T">The type of items in the spatial partition.</typeparam>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.BasePartition`1.Comparer">
            <summary>
            The comparer that is used to compare items.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Aabb">
            <summary>
            Gets the axis-aligned bounding box (AABB) that contains all items.
            </summary>
            <value>The axis-aligned bounding box (AABB) that contains all items.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Count">
            <summary>
            Gets the number of items contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value>The number of items contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.EnableSelfOverlaps">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Filter">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.GetAabbForItem">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Items">
            <summary>
            Gets or sets the items in the spatial partition.
            </summary>
            <value>The items in the spatial partition.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.BasePartition`1.SelfOverlaps">
            <summary>
            Gets the self-overlaps.
            </summary>
            <value>
            The self-overlaps. The default value is <see langword="null"/>. When 
            <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.EnableSelfOverlaps"/> is set to <see langword="true"/> then this property will be 
            initialized with an empty <see cref="T:System.Collections.Generic.HashSet`1"/>. (When <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.EnableSelfOverlaps"/>
            is set to <see langword="false"/> this property will be reset to <see langword="null"/>.)
            </value>
            <remarks>
            This set must be managed in <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.OnUpdate(System.Boolean,System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0})"/> of
            derived classes (if <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.EnableSelfOverlaps"/> is <see langword="true"/>). This base 
            class does not add overlaps to this set - but it automatically removes overlaps of items 
            that are removed using <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Remove(`0)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.DigitalRune#Geometry#Partitioning#ISpatialPartition{T}#Clone">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/> that is a clone (deep copy) of the current
            instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Clone"/> calls 
            <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/> derived class and <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})"/> to create a copy
            of the current instance. Classes that derive from <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/> need to
            implement <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.CreateInstanceCore"/> and <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a protected method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.CreateInstanceCore"/> method,
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone shape. A class derived from <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/> does not
            implement <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.CreateInstanceCore"/>."
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/> derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/> derived class 
            must implement this method. A typical implementation is to simply call the default
            constructor and return the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/>.
            </summary>
            <param name="source">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/> derived class 
            must implement this method. A typical implementation is to call <c>base.CloneCore(this)</c> 
            to copy all properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Clear">
            <summary>
            Removes all items from the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting 
            at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            One of the following conditions:
            <list type="bullet">
            <item>
            <description>
            <paramref name="array"/> is multidimensional.
            </description>
            </item>
            <item>
            <description>
            <paramref name="arrayIndex"/> is equal to or greater than the length of 
            <paramref name="array"/>.
            </description>
            </item>
            <item>
            <description>
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the 
            available space from <paramref name="arrayIndex"/> to the end of the destination 
            <paramref name="array"/>.
            </description>
            </item>
            <item>
            <description>
            Type <typeparamref name="T"/> cannot be cast automatically to the type of the destination 
            <paramref name="array"/>.
            </description>
            </item>
            </list>
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/>.
            </summary>
            <param name="item">
            The object to remove from the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/>.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="item"/> was successfully removed from the
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/>; otherwise, <see langword="false"/>. This method also
            returns <see langword="false"/> if <paramref name="item"/> is not found in the original
            <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.FilterSelfOverlap(DigitalRune.Collections.Pair{`0})">
            <summary>
            Checks if the pair of items is a valid self-overlap.
            </summary>
            <param name="pair">The pair of items.</param>
            <returns>
            <see langword="true"/> if the pair should be accepted; otherwise, <see langword="false"/> if
            the pair should be rejected.
            </returns>
            <remarks>
            This method returns <see langword="false"/> if the given items are identical or if the 
            <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Filter"/> returns <see langword="false"/>. This method does NOT check AABB
            overlaps.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Invalidate">
            <overloads>
            <summary>
            Invalidates the cached spatial information.
            </summary>
            </overloads>
            
            <summary>
            Invalidates the cached spatial information of all items in the spatial partition.
            </summary>
            <remarks>
            This method informs the spatial partition that many or all items have moved or changed
            shape.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Invalidate(`0)">
            <summary>
            Invalidates the cached spatial information of the specified item.
            </summary>
            <param name="item">The item that has moved or changed its shape.</param>
            <remarks>
            This method informs the spatial partition that a specific item has moved or changed its
            shape.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Update(System.Boolean)">
            <summary>
            Updates the internal structure of this <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/>.
            </summary>
            <param name="forceRebuild">
            If set to <see langword="true"/> the internal structure will be rebuilt from scratch. If set 
            to <see langword="false"/> the spatial partition can decide to rebuild everything or refit 
            only the invalidated parts.
            </param>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            Cannot update spatial partition. The property <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.GetAabbForItem"/> is not set.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.UpdateInternal">
            <summary>
            Updates the internal structure of this <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/>. Should be called
            by derived classes instead of <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Update(System.Boolean)"/>!
            </summary>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            Cannot update spatial partition. The property <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.GetAabbForItem"/> is not set.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Update(System.Boolean,System.Boolean)">
            <summary>
            Updates the internal structure of this <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/>.
            </summary>
            <param name="forceRebuild">
            If set to <see langword="true"/> the internal structure will be rebuilt from scratch. If set
            to <see langword="false"/> the spatial partition can decide to rebuild everything or refit
            only the invalidated parts.
            </param>
            <param name="isInternalUpdate">
            <see langword="true"/> if the update is caused by an internal method. Internal updates can 
            occur frequently. <see langword="false"/> if the update is caused by an external class such 
            as the collision detection broad phase. External updates occur less frequently, e.g. once 
            per frame.
            </param>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            Cannot update spatial partition. The property <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.GetAabbForItem"/> is not set.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.OnFilterChanged">
            <summary>
            Called when the property <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Filter"/> has changed. (Note: This method is not called
            when a filter raises the <see cref="E:DigitalRune.Geometry.Partitioning.IPairFilter`1.Changed"/> event!)
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.OnEnableSelfOverlapsChanged">
            <summary>
            Called when the property <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.EnableSelfOverlaps"/> has changed.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.OnGetAabbForItemChanged">
            <summary>
            Called when the property <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.GetAabbForItem"/> has changed.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.OnUpdate(System.Boolean,System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0})">
            <summary>
            Called when the items in the spatial partition have changed and spatial partition should be 
            updated.
            </summary>
            <param name="forceRebuild">
            If set to <see langword="true"/> the spatial partitioning should be rebuilt from scratch.
            </param>
            <param name="addedItems">
            The added items. (Guaranteed to be not <see langword="null"/>.)
            </param>
            <param name="removedItems">
            The removed items. (Guaranteed to be not <see langword="null"/>.)
            </param>
            <param name="invalidItems">
            The invalid items. This set is either.
            <list type="bullet">
            <item>
            <description>
            an empty set to indicate that all items are valid,
            </description>
            </item>
            <item>
            <description>
            a set containing exactly the invalid items that need to be updated,
            </description>
            </item>
            <item>
            <description>
            or <see langword="null"/> to indicate that some items have changed, but it is unclear which.
            </description>
            </item>
            </list>
            </param>
            <remarks>
            <para>
            <strong>Preconditions:</strong>
            When this method is called following conditions are <see langword="true"/>.
            <list type="bullet">
            <item>
            <description>
            The <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Items"/> collection is up-to-date, which means for 
            example that the items in <paramref name="removedItems"/> are not in the
            <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Items"/> collection anymore.
            </description>
            </item>
            <item>
            <description>The <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Aabb"/> is invalid!</description>
            </item>
            <item>
            <description>
            The sets <paramref name="addedItems"/>, <paramref name="removedItems"/> and 
            <paramref name="invalidItems"/> are disjoint and not <see langword="null"/>.
            </description>
            </item>
            </list>
            </para>
            <para>
            <strong>Required Actions:</strong>
            When <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.OnUpdate(System.Boolean,System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0})"/> is called the derived 
            class must do following:
            <list type="bullet">
            <item>
            <description>
            The new <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Aabb"/> for the whole partition must be computed. (If this is not done 
            the <see cref="T:DigitalRune.Geometry.Partitioning.BasePartition`1"/> will compute the new <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Aabb"/> 
            automatically, but this is slower.)
            </description>
            </item>
            <item>
            <description>
            If <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.EnableSelfOverlaps"/> is <see langword="true"/>, the 
            <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.SelfOverlaps"/> must be updated.
            </description>
            </item>
            </list>
            </para>
            <para>
            Important: This method must not directly or indirectly call <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Update(System.Boolean)"/>! This
            would lead to recursive calls.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.OnUpdate">
            <summary>
            Called when the spatial partition should be updated, but items have not changed.
            </summary>
            <remarks>
            This <strong>OnUpdate</strong>-overload is called when the spatial partition is updated
            (<see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Update(System.Boolean)"/> was called), but items haven't changed since the last update. 
            Derived classes can override this method to perform code which should be executed regularly, 
            independent of whether the items in the spatial partition have changed.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetOverlaps(`0)">
            <summary>
            Gets the items that touch the given item.
            </summary>
            <param name="item">
            The item. (Whether the given item must be a part of the spatial partition or whether it can
            be an external object depends on the <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.GetAabbForItem"/> callback. The 
            <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.GetAabbForItem"/> must be able to compute the AABB for the given item.)
            </param>
            <returns>All items that touch the given item.</returns>
            <remarks>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.BasePartition`1.Filter"/>) is applied to filter overlaps.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetOverlaps">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.BasePartition`1.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.ClosestPointCallbackWrapper`1">
            <summary>
            Wraps a closest-point callback to reduce calls of 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISupportClosestPointQueries`1.GetClosestPointCandidates(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{`0,`0,System.Single})"/>
            to calls of <see cref="M:DigitalRune.Geometry.Partitioning.ISupportClosestPointQueries`1.GetClosestPointCandidates(DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Func{`0,System.Single})"/>.
            </summary>
            <typeparam name="T">The type of items in the spatial partition.</typeparam>
            <remarks>
            Note: We could simply use lambda expressions (closures) instead of 
            <see cref="T:DigitalRune.Geometry.Partitioning.ClosestPointCallbackWrapper`1"/>, but we want to avoid unnecessary garbage.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.ClosestPointCallbackWrapper`1.OriginalCallback">
            <summary>
            Gets or sets the original callback.
            </summary>
            <value>
            The original callback used in 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISupportClosestPointQueries`1.GetClosestPointCandidates(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{`0,`0,System.Single})"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.ClosestPointCallbackWrapper`1.Item">
            <summary>
            Gets or sets the current item.
            </summary>
            <value>The current item.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ClosestPointCallbackWrapper`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DigitalRune.Geometry.Partitioning.ClosestPointCallbackWrapper`1"/> class from 
            being created.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ClosestPointCallbackWrapper`1.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Geometry.Partitioning.ClosestPointCallbackWrapper`1"/> class. (This method 
            reuses a previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Geometry.Partitioning.ClosestPointCallbackWrapper`1"/> class.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ClosestPointCallbackWrapper`1.Recycle">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Geometry.Partitioning.ClosestPointCallbackWrapper`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ClosestPointCallbackWrapper`1.Callback(`0)">
            <summary>
            The callback which can be used in <see cref="M:DigitalRune.Geometry.Partitioning.ISupportClosestPointQueries`1.GetClosestPointCandidates(DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Func{`0,System.Single})"/>.
            </summary>
            <param name="otherItem">The candidate item.</param>
            <returns>The closest point distance.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.DebugSpatialPartition`1">
            <summary>
            A simple brute-force partitioning method used for debugging.
            </summary>
            <typeparam name="T">The type of the items in the spatial partition.</typeparam>
            <remarks>
            This spatial partition is only for debugging. It performs a simple exhaustive test of all 
            items against all items without acceleration structures.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DebugSpatialPartition`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DebugSpatialPartition`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DebugSpatialPartition`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DebugSpatialPartition`1.OnUpdate(System.Boolean,System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0})">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1">
            <summary>
            Filters item pairs with the help of a user-defined callback method.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <remarks>
            <para>
            Per default, <see cref="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Filter(DigitalRune.Collections.Pair{`0})"/> returns <see langword="true"/> for all item pairs. If a 
            <see cref="P:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.FilterCallback"/> is set, <see cref="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Filter(DigitalRune.Collections.Pair{`0})"/> calls the 
            <see cref="P:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.FilterCallback"/> and return its result.
            </para>
            <para>
            If the <see cref="P:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.FilterCallback"/> is changed, the <see cref="E:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Changed"/> event is raised
            automatically. If the <see cref="P:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.FilterCallback"/> does not change but the filter rules
            change, <see cref="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.RaiseChanged"/> must be called to raise the <see cref="E:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Changed"/> event
            manually.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.FilterCallback">
            <summary>
            Gets or sets the filter callback.
            </summary>
            <value>The filter callback. Per default, no callback method is set.</value>
            <remarks>
            <para>
            This method is called in <see cref="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Filter(DigitalRune.Collections.Pair{`0})"/> to compute the filter result.
            </para>
            <para>
            The <see cref="E:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Changed"/> event is automatically raised if the filter callback is changed.
            </para>
            </remarks>
        </member>
        <member name="E:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Changed">
            <summary>
            Occurs when the filter rules were changed.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.#ctor(System.Func{DigitalRune.Collections.Pair{`0},System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1"/> class.
            </summary>
            <param name="filterCallback">The filter callback (can be <see langword="null"/>).</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Filter(DigitalRune.Collections.Pair{`0})">
            <summary>
            Filters the specified item pair.
            </summary>
            <param name="pair">The pair.</param>
            <returns>
            <see langword="true"/> if the pair should be processed (pair is accepted); otherwise,
            <see langword="false"/> if the pair should not be processed (pair is rejected).
            </returns>
            <remarks>
            This method returns <see langword="true"/> if no <see cref="P:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.FilterCallback"/> is set;
            otherwise the filter callback is called and its result is returned.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.RaiseChanged">
            <summary>
            Raises the <see cref="E:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Changed"/> event.
            </summary>
            <remarks>
            This method must be called if the filter rules are changed. If the 
            <see cref="P:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.FilterCallback"/> is changed, this method is called automatically.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.Changed"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:System.EventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.OnChanged(System.EventArgs)"/> in a derived
            class, be sure to call the base class's <see cref="M:DigitalRune.Geometry.Partitioning.DelegatePairFilter`1.OnChanged(System.EventArgs)"/> method so that registered
            delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.DualPartition`1">
            <summary>
            Represents a spatial partition that internally uses two spatial partitions to manage items: 
            one for static/sleeping items and one for dynamic items.
            </summary>
            <typeparam name="T">The type of item in the spatial partition.</typeparam>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Geometry.Partitioning.DualPartition`1"/> can be used as a broad-phase algorithm (see 
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.BroadPhase"/>). It can in certain cases outperform the default
            <see cref="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1"/>.
            </para>
            <para>
            By default, two spatial partitions of type <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> are used (with
            settings optimized for the static and dynamic case).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DualPartition`1.StaticPartition">
            <summary>
            Gets or sets the spatial partition that manages all static/sleeping objects.
            </summary>
            <value>The spatial partition that manages all static/sleeping objects.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DualPartition`1.DynamicPartition">
            <summary>
            Gets or sets the spatial partition that manages all dynamic objects.
            </summary>
            <value>The spatial partition that manages all dynamic objects.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DualPartition`1.DigitalRune#Geometry#Partitioning#ISupportBroadPhase{T}#BroadPhase">
            <inheritdoc/>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.DualPartition`1.Internals">
            <exclude/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.DualPartition`1"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.DualPartition`1"/> class which uses two
            <see cref="T:DigitalRune.Geometry.Partitioning.DynamicAabbTree`1"/> partitions.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.#ctor(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.DualPartition`1"/> class using the given
            pair of spatial partitions.
            </summary>
            <param name="staticPartition">
            The spatial partition used for static/sleeping objects.
            </param>
            <param name="dynamicPartition">
            The spatial partition used for dynamic partition.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="staticPartition"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dynamicPartition"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.OnFilterChanged">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.OnEnableSelfOverlapsChanged">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.OnGetAabbForItemChanged">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.OnUpdate(System.Boolean,System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.OnUpdate">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.UpdateAabb">
            <summary>
            Updates the AABB of the spatial partition.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.UpdateSelfOverlaps">
            <summary>
            Recomputes the self-overlaps.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.GetOverlaps(System.Collections.Generic.IList{DigitalRune.Geometry.Shapes.Plane})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.DualPartition`1.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.IPairFilter`1">
            <summary>
            Filters a pair of items.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Geometry.Partitioning.IPairFilter`1"/> is usually used to remove item pairs, so that they are not
            processed. <see cref="M:DigitalRune.Geometry.Partitioning.IPairFilter`1.Filter(DigitalRune.Collections.Pair{`0})"/> returns <see langword="true"/> if an item pair should be
            processed (item pair is accepted). <see cref="M:DigitalRune.Geometry.Partitioning.IPairFilter`1.Filter(DigitalRune.Collections.Pair{`0})"/> returns <see langword="false"/> if an
            item pair should not be processed (item pair is rejected).
            </para>
            <para>
            <strong>Notes to Implementors:</strong> The filter rules must be consistent. In most
            applications the order of the items in the pair should not matter. And <see cref="M:DigitalRune.Geometry.Partitioning.IPairFilter`1.Filter(DigitalRune.Collections.Pair{`0})"/>
            should always return the same result for the same pair. If the filter rules are changed, the 
            <see cref="E:DigitalRune.Geometry.Partitioning.IPairFilter`1.Changed"/> event must be raised.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.IPairFilter`1.Filter(DigitalRune.Collections.Pair{`0})">
            <summary>
            Filters the specified item pair.
            </summary>
            <param name="pair">The pair.</param>
            <returns>
            <see langword="true"/> if the pair should be processed (pair is accepted); otherwise,
            <see langword="false"/> if the pair should not be processed (pair is rejected).
            </returns>
        </member>
        <member name="E:DigitalRune.Geometry.Partitioning.IPairFilter`1.Changed">
            <summary>
            Occurs when the filter rules were changed.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1">
            <summary>
            Efficiently manages items in a space or of a model using their spatial properties.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <remarks>
            <para>
            A spatial partition is a <see cref="T:System.Collections.Generic.ICollection`1"/> of items of a model or in a space. 
            Spatial partitioning structures items according to their position and extents in space. This
            is usually used to manage the objects of a 3D model (using bounding box trees or other 
            methods) or objects in a 3D space (using grids, octrees, etc.). Spatial partitions allow fast
            queries on the items. For example: "Give me all items that touch a given axis aligned bounding
            box." Or: "Give me all pairs of touching items."
            </para>
            <para>
            The items in the spatial partitions (see type parameter <typeparamref name="T"/>) can be of 
            any kind: integer values that define triangle indices of a triangle mesh, or 
            <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/> in a space, ...
            </para>
            <para>
            <strong>Creating Spatial Partitions:</strong> A <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/> is a 
            <see cref="T:System.Collections.Generic.ICollection`1"/>, so items can be added and removed. The internal structure will
            be built when <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Update(System.Boolean)"/> is called. When items move or change their shape, the
            spatial partition must be informed using <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Invalidate(`0)"/> (for a single item) or 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Invalidate"/> (if more or all items have changed). Then <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Update(System.Boolean)"/> must
            be called to rebuild the internal structure.
            </para>
            <para>
            Calling Add/Remove/Invalidate methods are fast operations. The internal work is done when 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Update(System.Boolean)"/> is called. If <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Update(System.Boolean)"/> is not called by the owner of the
            spatial partition, then it will be automatically called when <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps"/> (or 
            one of its overloads) is called.
            </para>
            <para>
            <strong>Querying Spatial Partitions:</strong> A <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/> has several
            <strong>GetOverlaps</strong> methods that allow to get all the items that touch a specific
            item or region. These queries are more efficient than enumerating and testing all contained
            items manually. Some queries return <see cref="T:DigitalRune.Collections.Pair`1"/>s which describe pairs of touching
            objects.
            </para>
            <para>
            Spatial partitions use approximate representations of the managed items - usually bounding 
            volumes instead of the actual geometry. For example, when using a <see cref="T:DigitalRune.Geometry.Partitioning.AabbTree`1"/> 
            items are represented using their axis-aligned bounding box (AABB). The 
            <strong>GetOverlaps</strong> methods only test the bounding volumes against each other to 
            check for potential intersections. When a <strong>GetOverlaps</strong> method returns an item 
            or an item pair, it is not guaranteed that the items are actually touching - for returned 
            items the spatial partition computed that it is very likely that they are touching. For 
            example: When managing triangles with the help of an <see cref="T:DigitalRune.Geometry.Partitioning.AabbTree`1"/> the method 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps"/> returns all triangles where the bounding boxes overlap. 
            Overlapping bounding volumes do not guarantee that the contained items are actually 
            intersecting - the triangles could still be separated.
            <para>
            A spatial partition does not replace a detailed collision detection. It only helps to 
            efficiently sort out items that do not intersect.
            </para>
            </para>
            <para>
            <strong>AABB Computation of Items:</strong> When creating an instance of an 
            <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/> a callback that computes the <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/> for 
            a given item must be specified. The spatial partition does not know how to compute the 
            positions and extents of the items. The <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetAabbForItem"/>
            delegate is used to compute an <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/>s for each item. The computed 
            <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/> is used to define the spatial properties of an item. For a single
            item the method must always return the same <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Aabb"/>. If the AABB of an item has
            changed (e.g. the item has moved or changed shape), 
            <see cref="M:DigitalRune.Geometry.Partitioning.BasePartition`1.Invalidate"/> must be called.
            </para>
            <para>
            <strong>Self Overlaps:</strong> A self-overlap is an overlap of two items where both items are
            contained in the spatial partition. Self-overlaps are only computed if 
            <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.EnableSelfOverlaps"/> is set. Self-overlaps can be queried using 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps"/>. Overlaps of a single item with itself are never returned.
            </para>
            <para>
            <strong>Filtering:</strong> Per default, no filter is set and <strong>GetOverlaps</strong>
            methods return all found overlaps. A <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Filter"/> can be set. Then, whenever a pair of
            items is tested the overlap will only be accepted if <see cref="M:DigitalRune.Geometry.Partitioning.IPairFilter`1.Filter(DigitalRune.Collections.Pair{`0})"/>
            returns <see langword="true"/>. The filter is not used if an item is tested against an 
            <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/> or a <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>.
            </para>
            <para>
            <strong>Rebuild versus Refit:</strong> The spatial partitioning is performed when 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Update(System.Boolean)"/> is called. The spatial partition will build a new internal structure if
            many or all items are new or were invalidated (see <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Invalidate(`0)"/>). If only a few
            items were changed, the spatial partition will perform a faster "refit" operation that changes
            only the relevant parts of the internal structure. Depending on the type of spatial
            partitioning, refit operations can lead to less optimal internal structures. The 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Update(System.Boolean)"/> method has a <i>forceRebuild</i> parameter with which a complete rebuild 
            can be demanded. 
            </para>
            <para>
            <strong>Cloning:</strong> Spatial partitions are cloneable. Cloning creates a deep copy of the
            spatial partition. All properties and internal data structures are duplicated. However, the
            items contained in the spatial partitions are not copied. The clone will be an empty spatial 
            partition that can be used independently from the original spatial partitions.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Aabb">
            <summary>
            Gets the axis-aligned bounding box (AABB) that contains all items.
            </summary>
            <value>The axis-aligned bounding box (AABB) that contains all items.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetAabbForItem">
            <summary>
            Gets or sets the method that computes the <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/> of an item.
            </summary>
            <value>
            The method that computes the axis-aligned bounding box of an item.
            </value>
            <remarks>
            <para>
            When creating a <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/> a callback that computes the 
            <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/> for a given item, must be specified. The spatial partition does 
            not know how to compute the positions and extents of the items. Only the 
            <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetAabbForItem"/> delegate is used to compute an <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/>s for
            each item. The computed <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/> is used to define the spatial properties 
            of a property. For a single item the method must always return the same <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Aabb"/>. 
            If the AABB of an item has changed (e.g. the item has moved or changed shape), 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Invalidate(`0)"/> must be called.
            </para>
            <para>
            <strong>Important:</strong> Changing this property does not automatically invalidate the
            spatial partition. The spatial partition assumes the previous AABBs are still valid. If, 
            however, the spatial partition should to be recomputed, the method 
            <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Invalidate"/> needs to be called manually.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Filter">
            <summary>
            Gets or sets the filter that is used to filter overlaps of two items.
            </summary>
            <value>The filter that is used to filter item overlap pairs.</value>
            <remarks>
            The <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps"/> methods check whether the items overlap. Then - when a 
            <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Filter"/> is set - the <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps"/> methods apply the filter to
            all pairs of overlapping items. A <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Filter"/> can be set to check the item pairs
            for additional criteria and reject item pairs that do not meet these criteria.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.EnableSelfOverlaps">
            <summary>
            Gets or sets a value indicating whether self-overlaps are computed.
            </summary>
            <value>
            <see langword="true"/> if self-overlaps are computed; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            Self-overlaps can be queried with <see cref="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps"/> if this flag is set.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Clone">
            <summary>
            Creates a new spatial partition that is a clone (deep copy) of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            Cloning creates a deep copy of the spatial partition. All properties and internal data 
            structures are duplicated. However, the items contained in the spatial partitions are not 
            copied. The clone will be an empty spatial  partition that can be used independently from 
            the original spatial partitions.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
            <overloads>
            <summary>
            Gets the overlaps between items of this spatial partition and another object.
            </summary>
            </overloads>
            
            <summary>
            Gets the items that touch the given axis-aligned bounding box (AABB).
            </summary>
            <param name="aabb">The axis-aligned bounding box (AABB).</param>
            <returns>All items that touch the given AABB.</returns>
            <remarks>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Filter"/>) is not applied.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps(`0)">
            <summary>
            Gets the items that touch the given item.
            </summary>
            <param name="item">
            The item. (The given item must be part of the spatial partition. In some cases external 
            objects are also supported. See documentation of derived types.)
            </param>
            <returns>All items that touch the given item.</returns>
            <remarks>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Filter"/>) is applied to filter overlaps.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps(DigitalRune.Geometry.Shapes.Ray)">
            <summary>
            Gets the items that touch the given ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>All items that are hit by the ray.</returns>
            <remarks>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Filter"/>) is not applied.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps">
            <summary>
            Gets overlaps of all items contained in this spatial partition.
            </summary>
            <returns>
            All pairs of overlapping items of this spatial partition. Overlaps of an item with itself
            are not returned.
            </returns>
            <remarks>
            <para>
            This method can only be called if <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.EnableSelfOverlaps"/> is 
            <see langword="true"/>.
            </para>
            <para>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Filter"/>) is applied to filter overlaps.
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.EnableSelfOverlaps"/> is <see langword="false"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps(DigitalRune.Geometry.Partitioning.ISpatialPartition{`0})">
            <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial 
            partition.
            </summary>
            <param name="otherPartition">The spatial partition to test against.</param>
            <returns>
            All pairwise overlaps between items of this spatial partition and 
            <paramref name="otherPartition"/>. In each returned <see cref="T:DigitalRune.Collections.Pair`1"/> the first item
            (see <see cref="P:DigitalRune.Collections.Pair`1.First"/>) is from this partition and the second item (see 
            <see cref="P:DigitalRune.Collections.Pair`1.Second"/>) is from <paramref name="otherPartition"/>.
            </returns>
            <remarks>
            <para>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Filter"/>) is applied to filter overlaps.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="otherPartition"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.GetOverlaps(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <summary>
            Gets overlaps between all items of this spatial partition and the items of another spatial 
            partition.
            </summary>
            <param name="scale">The scale of this spatial partition.</param>
            <param name="pose">The pose of this spatial partition.</param>
            <param name="otherPartition">The other spatial partition to test against.</param>
            <param name="otherScale">The scale of the <paramref name="otherPartition"/>.</param>
            <param name="otherPose">The pose of the <paramref name="otherPartition"/>.</param>
            <returns>
            All pairwise overlaps between items of this spatial partition and 
            <paramref name="otherPartition"/>. In each returned <see cref="T:DigitalRune.Collections.Pair`1"/> the first item
            (see <see cref="P:DigitalRune.Collections.Pair`1.First"/>) is from this partition and the second item (see 
            <see cref="P:DigitalRune.Collections.Pair`1.Second"/>) is from <paramref name="otherPartition"/>.
            </returns>
            <remarks>
            <para>
            Both spatial partitions are unscaled and defined in local space. The scales and the poses
            transform the spatial partitions from their local space to world space. The scale is applied 
            before the pose.
            </para>
            <para>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Filter"/>) is applied to filter overlaps.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="otherPartition"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Invalidate">
            <overloads>
            <summary>
            Invalidates the cached spatial information.
            </summary>
            </overloads>
            
            <summary>
            Invalidates the cached spatial information of all items in the spatial partition.
            </summary>
            <remarks>
            This method informs the spatial partition that many or all items have moved or changed 
            shape.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Invalidate(`0)">
            <summary>
            Invalidates the cached spatial information of the specified item.
            </summary>
            <param name="item">The item that has moved or changed its shape.</param>
            <remarks>
            This method informs the spatial partition that a specific item has moved or changed its 
            shape.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Update(System.Boolean)">
            <summary>
            Updates the internal structure of this <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/>.
            </summary>
            <param name="forceRebuild">
            If set to <see langword="true"/> the internal structure will be rebuilt from scratch. If set
            to <see langword="false"/> the spatial partition can decide to rebuild everything or refit 
            only the invalidated parts.
            </param>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.ISupportBroadPhase`1">
            <summary>
            Indicates that the <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/> has special support for a collision 
            detection broad phase.
            </summary>
            <typeparam name="T">The type of objects managed in the spatial partition.</typeparam>
            <remarks>
            If a spatial partition that implements this interface is used for the broad phase of a 
            collision domain, the collision domain update will perform faster.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.ISupportBroadPhase`1.BroadPhase">
            <summary>
            Gets or sets the collision detection broad phase.
            </summary>
            <value>The collision detection broad phase.
            </value>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.IBroadPhase`1">
            <summary>
            Represents the collision detection broad phase which stores candidate pairs.
            </summary>
            <typeparam name="T">The type of the collision object.</typeparam>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.IBroadPhase`1.Clear">
            <summary>
            Removes all candidate pairs.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.IBroadPhase`1.Add(DigitalRune.Collections.Pair{`0})">
            <summary>
            Adds the specified candidate pair.
            </summary>
            <param name="overlap">The overlapping pair of collision objects.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.IBroadPhase`1.Remove(`0)">
            <summary>
            Removes all candidate pair that include the specified collision object.
            </summary>
            <param name="collisionObject">The collision objects to remove.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.IBroadPhase`1.Remove(DigitalRune.Collections.Pair{`0})">
            <summary>
            Removes the specified candidate pair.
            </summary>
            <param name="overlap">The overlapping pair of collision objects.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.IBroadPhase`1.AddOrMarkAsUsed(DigitalRune.Collections.Pair{`0})">
            <summary>
            Adds a new candidate pair, or marks an existing pair as "used".
            </summary>
            <param name="overlap">The overlapping pair of collision objects.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.IBroadPhase`1.RemoveUnused">
            <summary>
            Removes all candidate pairs which are not marked as "used".
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.ISupportClosestPointQueries`1">
            <summary>
            Indicates that an object (normally a <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/>) has special support
            for closest-point queries.
            </summary>
            <typeparam name="T">The type of the queried items.</typeparam>
            <remarks>
            <para>
            Given a collection of items, the goal is to find the item that is closest to a given item or
            volume. Without further information the closest-point on each item in the collection has to be
            computed, and the item with the smallest closest-point distance is the winner. Some 
            <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/>s have an internal structure that can speed up the search.
            </para>
            <para>
            The methods in this interface find the items that are good candidates to be closest to the
            given volume (axis-aligned bounding box or another partition). A callback method is called
            with each candidate item. The callback must compute the closest-point on the item and return
            the squared closest-point distance. The returned value helps the spatial partition to filter
            out bad candidates.
            </para>
            <para>
            The callback method must return 0 if the candidate item is touching/penetrating the other 
            item. -1 can be returned if the search for more candidates should be aborted. The callback can
            return positive infinity if it cannot compute a squared closest point distance.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ISupportClosestPointQueries`1.GetClosestPointCandidates(DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Func{`0,System.Single})">
            <summary>
            Gets all items that are candidates for the smallest closest-point distance to a given
            axis-aligned bounding box (AABB).
            </summary>
            <param name="aabb">The axis-aligned bounding box (AABB).</param>
            <param name="maxDistanceSquared">
            The allowed squared distance between two points. (This an optional parameter that is used 
            internally to improve performance. The <paramref name="callback"/> might still be called 
            with an item that has a distance greater than <c>Math.Sqrt(maxDistanceSquared)</c>! So use 
            this parameter with care. To check all items, set the parameter to 
            <see cref="F:System.Single.PositiveInfinity"/>.)
            </param>
            <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
            <returns>
            The squared closest-point distance found during the search. -1 if the search was aborted or 
            the search space is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ISupportClosestPointQueries`1.GetClosestPointCandidates(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Geometry.Partitioning.ISpatialPartition{`0},DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,System.Func{`0,`0,System.Single})">
            <summary>
            Gets all items that are candidates for the smallest closest-point distance to items in a
            given partition.
            </summary>
            <param name="scale">The scale of this spatial partition.</param>
            <param name="pose">The pose of this spatial partition.</param>
            <param name="otherPartition">The other spatial partition to test against.</param>
            <param name="otherScale">The scale of the <paramref name="otherPartition"/>.</param>
            <param name="otherPose">
            The pose of the <paramref name="otherPartition"/> relative to this spatial partition.
            </param>
            <param name="callback">
            The callback that is called with each found candidate item. The method must compute the
            closest-point on the candidate item and return the squared closest-point distance.
            </param>
            <remarks>
            This method can be used to quickly find the closest-points between two models which are both
            managed using a <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/>. The given spatial partition can be
            rotated and scaled. The scale and the pose transform the other
            <paramref name="otherPartition"/> into the space of this spatial partition. The scale is
            applied before the pose.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="otherPartition"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="callback"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.ISupportFrustumCulling`1">
            <summary>
            Indicates that an object (normally a <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/>) has special support 
            for frustum culling.
            </summary>
            <typeparam name="T">The type of the queried items.</typeparam>
            <remarks>
            <para>
            It is recommended to use a type of <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/> that implements this 
            interface in the <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.BroadPhase"/> of a collision domain, if the 
            collision domain is used for frustum culling.
            </para>
            <para>
            In general frustum culling can be done by adding a collision object for the viewing frustum 
            (usually a <see cref="T:DigitalRune.Geometry.Shapes.ViewVolume"/> shape) to a collision domain. The objects inside the 
            viewing frustum can then be queried by calling <see cref="M:DigitalRune.Geometry.Collisions.CollisionDomain.GetContactObjects(DigitalRune.Geometry.Collisions.CollisionObject)"/>.
            This approach is acceptable for small scenes, but it does not perform well in large, complex 
            scenes.
            </para>
            <para>
            A viewing frustum of a camera has certain characteristics that reduce performance of a 
            collision domain: The viewing frustum is usually extremely large and can cover entire scenes.
            The camera usually moves every frame. Therefore, when the object is added to a collision 
            domain a large number of contact sets is created and updated every frame.
            </para>
            <para>
            Luckily frustum culling does not need to be exact: In most cases it is sufficient to only 
            check the axis-aligned bounding boxes (AABBs) of the scene objects against the viewing 
            frustum. This can be done manually by calling <see cref="M:DigitalRune.Geometry.Partitioning.ISupportFrustumCulling`1.GetOverlaps(System.Collections.Generic.IList{DigitalRune.Geometry.Shapes.Plane})"/> against the 
            <see cref="P:DigitalRune.Geometry.Collisions.CollisionDomain.BroadPhase"/> of a collision domain and skip the narrow phase of 
            the collision detection. In this case the viewing frustum does not need to be added to the 
            collision domain!
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.ISupportFrustumCulling`1.GetOverlaps(System.Collections.Generic.IList{DigitalRune.Geometry.Shapes.Plane})">
            <summary>
            Gets the items that touch the bounding volume ("k-DOP") defined by a set of planes.
            </summary>
            <param name="planes">
            The planes that define the bounding volume (k-DOP). Max 31 planes. The plane normals are
            pointing outwards. The plane does not need to be normalized, i.e. the plane normal does not
            need to be a unit vector.
            </param>
            <returns>
            All items that touch the bounding volume. (The result is conservative: It is guaranteed that
            the list contains all items that touch the bounding volume. But I it may also contain a few
            items that do not touch the bounding volume!)
            </returns>
            <remarks>
            Hint: The method <see cref="M:DigitalRune.Geometry.GeometryHelper.ExtractPlanes(DigitalRune.Mathematics.Algebra.Matrix44F,System.Collections.Generic.IList{DigitalRune.Geometry.Shapes.Plane},System.Boolean)"/> can
            be called to extract the viewing frustum planes of a world-view-projection matrix.
            </remarks>
            <remarks>
            Filtering (see <see cref="P:DigitalRune.Geometry.Partitioning.ISpatialPartition`1.Filter"/>) is not applied.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Geometry.Partitioning"/> namespace provides spatial partitioning
            methods, such as bounding volume hierarchies.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1">
            <summary>
            Sorts items using the <i>Sweep and Prune</i> method.
            </summary>
            <typeparam name="T">The type of items in this spatial partition.</typeparam>
            <remarks>
            <para>
            This method is also known as "Sort and Sweep", "coordinate sorting", etc. The method is good
            for detecting overlaps of all objects in the spatial partition - it is a typical collision
            broad phase algorithm.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.DigitalRune#Geometry#Partitioning#ISupportBroadPhase{T}#BroadPhase">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.CloneCore(DigitalRune.Geometry.Partitioning.BasePartition{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.OnUpdate(System.Boolean,System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0},System.Collections.Generic.HashSet{`0})">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.UpdateAabb">
            <summary>
            Updates the AABB of the whole spatial partition.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.Edge">
            <summary>
            Represents a minimum or maximum AABB edge of an item for one axis (X, Y or Z).
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.Edge.Info">
            <summary>
            The item information.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.Edge.Position">
            <summary>
            The position of this AABB edge in world space.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.Edge.IsMax">
            <summary>
            A value indicating whether this edge is a maximum edge of the AABB.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.ItemInfo">
            <summary>
            Provides additional information for each item.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.ItemInfo.Item">
            <summary>
            The item.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.ItemInfo.Aabb">
            <summary>
            The cached AABB. (Note: This is redundant because this info is also stored in the edges).
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.ItemInfo.MinEdgeIndices">
            <summary>
            The indices of the minimum AABB edges in the 3 edge lists.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.ItemInfo.MaxEdgeIndices">
            <summary>
            The indices of the maximum AABB edges in the 3 edge lists.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.ItemInfoCollection">
            <summary>
            Stores <see cref="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.ItemInfo"/>s for all items. Allows O(1) access of the 
            <see cref="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.ItemInfo"/> for a given item.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.ItemInfoCollection.GetKeyForItem(DigitalRune.Geometry.Partitioning.SweepAndPruneSpace{`0}.ItemInfo)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="info">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.ItemInfoCollection.Get(`0)">
            <summary>
            Gets the <see cref="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.ItemInfo"/> for the given item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The <see cref="T:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.ItemInfo"/> for <paramref name="item"/> or <see langword="null"/> if the 
            collection does not contain info for <paramref name="item"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Partitioning.SweepAndPruneSpace`1.GetOverlaps(DigitalRune.Geometry.Shapes.Aabb)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Geometry.Pose">
            <summary>
            A pose defines the position and orientation of a shape in world space (or the parent 
            coordinate space).
            </summary>
            <remarks>
            <para>
            This type represents an affine transformation consisting only of a rotation followed by a 
            translation - no scaling. This transformation transforms coordinates from local space to world 
            space (or a parent space). Every <see cref="T:DigitalRune.Geometry.IGeometricObject"/> has a <see cref="T:DigitalRune.Geometry.Pose"/> which 
            defines position and orientation of the figure in the parent's space which is usually the 
            world space. 
            </para>
            <para>
            For hierarchical objects, like <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>s, a pose defines the relationship 
            of a local coordinates system to a parent coordinate system. For example: The children of a 
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> are of type <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. So each child of a 
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> has a <see cref="T:DigitalRune.Geometry.Pose"/> which defines the position and 
            orientation of the child in the local space of the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>. The local 
            space of the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> is the parent space of the child. 
            </para>
            <para>
            <strong>Important:</strong> When creating a new <see cref="T:DigitalRune.Geometry.Pose"/> do not use <c>Pose p = new 
            Pose();</c> instead use <c>Pose p = Pose.Identity</c>. The constructor <c>new Pose()</c> 
            initializes the orientation quaternion elements with 0 and thus is not a valid transformation. 
            </para>
            <para>
            <strong>Notes:</strong> The name "pose" comes from the definition: <i>"to pose = to put or set 
            in place".</i>
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Pose.Identity">
            <summary>
            A pose with no translation and no rotation.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Pose.Position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Pose.Orientation">
            <summary>
            The orientation.
            </summary>
            <remarks>
            The orientation is stored as a 3x3 matrix. The matrix must represent a rotation.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Pose.Inverse">
            <summary>
            Gets the inverse of this pose.
            </summary>
            <value>An inverse of this pose.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Pose.HasTranslation">
            <summary>
            Gets a value indicating whether the position is not 0.
            </summary>
            <value>
            <see langword="true"/> if the position describes a non-zero translation; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Pose.HasRotation">
            <summary>
            Gets a value indicating whether the orientation is not the default rotation.
            </summary>
            <value>
            <see langword="true"/> if the orientation describes a non-zero rotation; otherwise, 
            <see langword="false"/> if the orientation is not used (rotation angle is zero;
            <see cref="F:DigitalRune.Geometry.Pose.Orientation"/> is an identity matrix).
            </value>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix33F)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Pose"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Pose"/> class from position and orientation.
            </summary>
            <param name="position">The position.</param>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.#ctor(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Pose"/> class from position.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.#ctor(DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Pose"/> class from orientation.
            </summary>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Pose"/> class from position and orientation.
            </summary>
            <param name="position">The position.</param>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.#ctor(DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Pose"/> class from orientation.
            </summary>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.Equals(DigitalRune.Geometry.Pose)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.Invert">
            <summary>
            Inverts the pose.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.ToWorldDirection(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Converts a direction vector from local space to world space (or the parent space for nested 
            coordinate spaces).
            </summary>
            <param name="localDirection">The local direction.</param>
            <returns>
            The direction in world space (or the parent space for nested coordinate spaces).
            </returns>
            <remarks>
            This method can be used to transform direction vectors. It applies only the rotation to the 
            vector. The translation is ignored. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.ToLocalDirection(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Converts a direction vector from world space (or the parent space for nested coordinate 
            spaces) to local space.
            </summary>
            <param name="worldDirection">
            The direction vector in world space (or the parent space for nested coordinate spaces).
            </param>
            <returns>The direction in local space.</returns>
            <remarks>
            This method can be used to transform direction vectors. It applies only the rotation to the 
            vector. The translation is ignored. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.ToWorldPosition(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Converts a position vector from local space to world space (or the parent space for nested 
            coordinate spaces).
            </summary>
            <param name="localPosition">The local position.</param>
            <returns>
            The position in world space (or the parent space for nested coordinate spaces).
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.ToLocalPosition(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Converts a direction vector from world space (or the parent space for nested coordinate 
            spaces) to local space.
            </summary>
            <param name="worldPosition">
            The position vector in world space (or the parent space for nested coordinate spaces).
            </param>
            <returns>The position in local space.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.FromMatrix(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Creates a <see cref="T:DigitalRune.Geometry.Pose"/> from a matrix that contains a translation and a rotation.
            </summary>
            <param name="poseMatrix">The pose matrix.</param>
            <returns>A pose that represents the same transformation as the 4x4-matrix.</returns>
            <remarks>
            <paramref name="poseMatrix"/> must only contain rotations and translations, otherwise the
            result is undefined.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.ToPoseD">
            <summary>
            Converts this single-precision pose to a double-precision pose.
            </summary>
            <returns>The pose (double-precision).</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.ToMatrix44F">
            <summary>
            Converts this pose to a 4x4 transformation matrix.
            </summary>
            <returns>
            A 4x4-matrix that represents the same transformation as the pose.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.FromMatrix(Microsoft.Xna.Framework.Matrix)">
            <overloads>
            <summary>
            Creates a <see cref="T:DigitalRune.Geometry.Pose"/> from a matrix that contains a translation and a rotation.
            </summary>
            </overloads>
            
            <summary>
            Creates a <see cref="T:DigitalRune.Geometry.Pose"/> from a <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework) that contains a 
            translation and a rotation. (Only available in the XNA-compatible build.)
            </summary>
            <param name="poseMatrix">The pose matrix.</param>
            <returns>A pose that represents the same transformation as the 4x4-matrix.</returns>
            <remarks>
            <para>
            <paramref name="poseMatrix"/> must only contain rotations and translations, otherwise the
            result is undefined.
            </para>
            <para>
            This method is available only in the XNA-compatible build of the DigitalRune.Geometry.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.ToXna">
            <summary>
            Converts a pose to a 4x4 transformation matrix (XNA Framework). (Only available in the 
            XNA-compatible build.)
            </summary>
            <returns>A 4x4-matrix that represents the same transformation as the pose.</returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the DigitalRune.Geometry.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.AreNumericallyEqual(DigitalRune.Geometry.Pose,DigitalRune.Geometry.Pose)">
            <overloads>
            <summary>
            Determines whether two poses are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two poses are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="pose1">The first pose.</param>
            <param name="pose2">The second pose.</param>
            <returns>
            <see langword="true"/> if the poses are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.AreNumericallyEqual(DigitalRune.Geometry.Pose,DigitalRune.Geometry.Pose,System.Single)">
            <summary>
            Determines whether two poses are equal (regarding a specific tolerance).
            </summary>
            <param name="pose1">The first pose.</param>
            <param name="pose2">The second pose.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the poses are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the poses are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.Interpolate(DigitalRune.Geometry.Pose,DigitalRune.Geometry.Pose,System.Single)">
            <summary>
            Interpolates two poses.
            </summary>
            <param name="startPose">The start pose.</param>
            <param name="endPose">The end pose.</param>
            <param name="parameter">
            The interpolation parameter. If the value is 0, the <paramref name="startPose"/> is
            returned. If the value is 1, the <paramref name="endPose"/> is returned. For values between
            0 and 1 an interpolated pose is returned.
            </param>
            <returns>An interpolated pose.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.IsValid(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Determines whether the specified matrix is a valid pose matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>
            <see langword="true"/> if the specified matrix is a valid pose matrix; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            This method makes a simple, low-performance test.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.ToString">
            <overloads>
            <summary>
            Returns the string representation of this pose.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this pose.
            </summary>
            <returns>The string representation of this pose.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this pose using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this pose.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.op_Multiply(DigitalRune.Geometry.Pose,DigitalRune.Geometry.Pose)">
            <overloads>
            <summary>
            Multiplies a <see cref="T:DigitalRune.Geometry.Pose"/> with another value.
            </summary>
            </overloads> 
            
            <summary>
            Multiplies two poses.
            </summary>
            <param name="p1">The first pose p1.</param>
            <param name="p2">The second pose p2.</param>
            <returns>The product of p1 and p2: p1 * p2.</returns>
            <remarks>
            <para>
            When product (<paramref name="p1"/> * <paramref name="p2"/>) is applied to a vector <i>v</i> 
            the transformation are applied in the following order: <i>v'</i> = p1 * p2 * <i>v</i><br/>
            That means, the vector is first transformed by <paramref name="p2"/> and then by 
            <paramref name="p1"/>.
            </para>
            <para>
            Example: If <paramref name="p1"/> is the <see cref="T:DigitalRune.Geometry.Pose"/> of a 
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> and <paramref name="p2"/> is the <see cref="T:DigitalRune.Geometry.Pose"/> of a child 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/> in the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>, the pose 
            <paramref name="p2"/> transforms from child's space to the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>'s
            space and <paramref name="p1"/> transforms from the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>'s space to
            world space. The result of the multiplication p1 * p2 is a pose that transforms directly
            from the child's space to world space.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.Multiply(DigitalRune.Geometry.Pose,DigitalRune.Geometry.Pose)">
            <overloads>
            <summary>
            Multiplies a <see cref="T:DigitalRune.Geometry.Pose"/> with another value.
            </summary>
            </overloads> 
            
            <summary>
            Multiplies two poses.
            </summary>
            <param name="p1">The first pose p1.</param>
            <param name="p2">The second pose p2.</param>
            <returns>The multiplication of p1 and p2: p1 * p2.</returns>
            <remarks>
            <para>
            When product (<paramref name="p1"/> * <paramref name="p2"/>) is applied to a vector <i>v</i> 
            the transformation are applied in the following order: <i>v'</i> = p1 * p2 * <i>v</i><br/>
            That means, the vector is first transformed by <paramref name="p2"/> and then by 
            <paramref name="p1"/>.
            </para>
            <para>
            Example: If <paramref name="p1"/> is the <see cref="T:DigitalRune.Geometry.Pose"/> of a
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> and <paramref name="p2"/> is the <see cref="T:DigitalRune.Geometry.Pose"/> of a child 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/> in the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>, the pose 
            <paramref name="p2"/> transforms from child's space to the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>'s
            space and <paramref name="p1"/> transforms from the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>'s space to
            world space. The result of the multiplication p1 * p2 is a pose that transforms directly
            from the child's space to world space.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.op_Multiply(DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Multiplies the pose with a vector.
            </summary>
            <param name="pose">The pose.</param>
            <param name="vector">The vector.</param>
            <returns>The transformed vector.</returns>
            <remarks>
            Multiplying a pose matrix with a vector is equal to transforming a vector from local space
            to world space (or parent space for nested coordinate spaces).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.Multiply(DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Multiplies the pose with a vector.
            </summary>
            <param name="pose">The pose.</param>
            <param name="vector">The vector.</param>
            <returns>The transformed vector.</returns>
            <remarks>
            Multiplying a pose matrix with a vector is equal to transforming a vector from local space
            to world space (or parent space for nested coordinate spaces).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.op_Equality(DigitalRune.Geometry.Pose,DigitalRune.Geometry.Pose)">
            <summary>
            Compares two <see cref="T:DigitalRune.Geometry.Pose"/>s to determine whether they are the same.
            </summary>
            <param name="pose1">The first pose.</param>
            <param name="pose2">The second pose.</param>
            <returns>
            <see langword="true"/> if the poses are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>Two poses are equal if their positions and orientations are equal.</remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.op_Inequality(DigitalRune.Geometry.Pose,DigitalRune.Geometry.Pose)">
            <summary>
            Compares two <see cref="T:DigitalRune.Geometry.Pose"/>s to determine whether they are different.
            </summary>
            <param name="pose1">The first pose.</param>
            <param name="pose2">The second pose.</param>
            <returns>
            <see langword="true"/> if the poses are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>Two poses are equal if their positions and orientations are equal.</remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.op_Implicit(DigitalRune.Geometry.Pose)~DigitalRune.Geometry.PoseD">
            <summary>
            Converts a single-precision pose to a double-precision pose.
            </summary>
            <param name="pose">The pose (single-precision).</param>
            <returns>The pose (double-precision).</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.op_Implicit(DigitalRune.Geometry.Pose)~DigitalRune.Mathematics.Algebra.Matrix44F">
            <summary>
            Converts a pose to a 4x4 transformation matrix.
            </summary>
            <param name="pose">The pose.</param>
            <returns>A 4x4-matrix that represents the same transformation as the pose.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Pose.op_Implicit(DigitalRune.Geometry.Pose)~Microsoft.Xna.Framework.Matrix">
            <summary>
            Converts a pose to a 4x4 transformation matrix (XNA Framework). (Only available in the 
            XNA-compatible build.)
            </summary>
            <param name="pose">The pose.</param>
            <returns>A 4x4-matrix that represents the same transformation as the pose.</returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the DigitalRune.Geometry.dll.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.PoseD">
            <summary>
            A pose defines the position and orientation of a shape in world space (or the parent 
            coordinate space). (Double-precision)
            </summary>
            <remarks>
            <para>
            <see cref="T:DigitalRune.Geometry.PoseD"/> is a variant of <see cref="T:DigitalRune.Geometry.Pose"/> with higher precision.
            </para>
            <para>
            For more information: See <see cref="T:DigitalRune.Geometry.Pose"/>.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.PoseD.Identity">
            <summary>
            A pose with no translation and no rotation.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.PoseD.Position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.PoseD.Orientation">
            <summary>
            The orientation.
            </summary>
            <remarks>
            The orientation is stored as a 3x3 matrix. The matrix must represent a rotation.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.PoseD.Inverse">
            <summary>
            Gets the inverse of this pose.
            </summary>
            <value>An inverse of this pose.</value>
        </member>
        <member name="P:DigitalRune.Geometry.PoseD.HasTranslation">
            <summary>
            Gets a value indicating whether the position is not 0.
            </summary>
            <value>
            <see langword="true"/> if the position describes a non-zero translation; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.PoseD.HasRotation">
            <summary>
            Gets a value indicating whether the orientation is not the default rotation.
            </summary>
            <value>
            <see langword="true"/> if the orientation describes a non-zero rotation; otherwise, 
            <see langword="false"/> if the orientation is not used (rotation angle is zero;
            <see cref="F:DigitalRune.Geometry.PoseD.Orientation"/> is an identity matrix).
            </value>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.#ctor(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Matrix33D)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.PoseD"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.PoseD"/> class from position and orientation.
            </summary>
            <param name="position">The position.</param>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.#ctor(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.PoseD"/> class from position.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.#ctor(DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.PoseD"/> class from orientation.
            </summary>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.#ctor(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.PoseD"/> class from position and orientation.
            </summary>
            <param name="position">The position.</param>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.#ctor(DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.PoseD"/> class from orientation.
            </summary>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.Equals(DigitalRune.Geometry.PoseD)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.Invert">
            <summary>
            Inverts the pose.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.ToWorldDirection(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Converts a direction vector from local space to world space (or the parent space for nested 
            coordinate spaces).
            </summary>
            <param name="localDirection">The local direction.</param>
            <returns>
            The direction in world space (or the parent space for nested coordinate spaces).
            </returns>
            <remarks>
            This method can be used to transform direction vectors. It applies only the rotation to the 
            vector. The translation is ignored. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.ToLocalDirection(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Converts a direction vector from world space (or the parent space for nested coordinate 
            spaces) to local space.
            </summary>
            <param name="worldDirection">
            The direction vector in world space (or the parent space for nested coordinate spaces).
            </param>
            <returns>The direction in local space.</returns>
            <remarks>
            This method can be used to transform direction vectors. It applies only the rotation to the 
            vector. The translation is ignored. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.ToWorldPosition(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Converts a position vector from local space to world space (or the parent space for nested 
            coordinate spaces).
            </summary>
            <param name="localPosition">The local position.</param>
            <returns>
            The position in world space (or the parent space for nested coordinate spaces).
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.ToLocalPosition(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Converts a direction vector from world space (or the parent space for nested coordinate 
            spaces) to local space.
            </summary>
            <param name="worldPosition">
            The position vector in world space (or the parent space for nested coordinate spaces).
            </param>
            <returns>The position in local space.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.FromMatrix(DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Creates a <see cref="T:DigitalRune.Geometry.PoseD"/> from a matrix that contains a translation and a rotation.
            </summary>
            <param name="poseMatrix">The pose matrix.</param>
            <returns>A pose that represents the same transformation as the 4x4-matrix.</returns>
            <remarks>
            <paramref name="poseMatrix"/> must only contain rotations and translations, otherwise the
            result is undefined.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.ToPose">
            <summary>
            Converts this double-precision pose to a single-precision pose.
            </summary>
            <returns>The pose (single-precision).</returns>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.ToMatrix44D">
            <summary>
            Converts this pose to a 4x4 transformation matrix.
            </summary>
            <returns>
            A 4x4-matrix that represents the same transformation as the pose.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.FromMatrix(Microsoft.Xna.Framework.Matrix)">
            <overloads>
            <summary>
            Creates a <see cref="T:DigitalRune.Geometry.PoseD"/> from a matrix that contains a translation and a rotation.
            </summary>
            </overloads>
            
            <summary>
            Creates a <see cref="T:DigitalRune.Geometry.PoseD"/> from a <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework) that contains a 
            translation and a rotation. (Only available in the XNA-compatible build.)
            </summary>
            <param name="poseMatrix">The pose matrix.</param>
            <returns>A pose that represents the same transformation as the 4x4-matrix.</returns>
            <remarks>
            <para>
            <paramref name="poseMatrix"/> must only contain rotations and translations, otherwise the
            result is undefined.
            </para>
            <para>
            This method is available only in the XNA-compatible build of the DigitalRune.Geometry.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.ToXna">
            <summary>
            Converts a pose to a 4x4 transformation matrix (XNA Framework). (Only available in the 
            XNA-compatible build.)
            </summary>
            <returns>A 4x4-matrix that represents the same transformation as the pose.</returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the DigitalRune.Geometry.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.AreNumericallyEqual(DigitalRune.Geometry.PoseD,DigitalRune.Geometry.PoseD)">
            <overloads>
            <summary>
            Determines whether two poses are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two poses are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="pose1">The first pose.</param>
            <param name="pose2">The second pose.</param>
            <returns>
            <see langword="true"/> if the poses are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.AreNumericallyEqual(DigitalRune.Geometry.PoseD,DigitalRune.Geometry.PoseD,System.Double)">
            <summary>
            Determines whether two poses are equal (regarding a specific tolerance).
            </summary>
            <param name="pose1">The first pose.</param>
            <param name="pose2">The second pose.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the poses are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the poses are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.Interpolate(DigitalRune.Geometry.PoseD,DigitalRune.Geometry.PoseD,System.Double)">
            <summary>
            Interpolates two poses.
            </summary>
            <param name="startPose">The start pose.</param>
            <param name="endPose">The end pose.</param>
            <param name="parameter">
            The interpolation parameter. If the value is 0, the <paramref name="startPose"/> is
            returned. If the value is 1, the <paramref name="endPose"/> is returned. For values between
            0 and 1 an interpolated pose is returned.
            </param>
            <returns>An interpolated pose.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.IsValid(DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Determines whether the specified matrix is a valid pose matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>
            <see langword="true"/> if the specified matrix is a valid pose matrix; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            This method makes a simple, low-performance test.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.ToString">
            <overloads>
            <summary>
            Returns the string representation of this pose.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this pose.
            </summary>
            <returns>The string representation of this pose.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this pose using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this pose.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.op_Multiply(DigitalRune.Geometry.PoseD,DigitalRune.Geometry.PoseD)">
            <overloads>
            <summary>
            Multiplies a <see cref="T:DigitalRune.Geometry.PoseD"/> with another value.
            </summary>
            </overloads> 
            
            <summary>
            Multiplies two poses.
            </summary>
            <param name="p1">The first pose p1.</param>
            <param name="p2">The second pose p2.</param>
            <returns>The product of p1 and p2: p1 * p2.</returns>
            <remarks>
            <para>
            When product (<paramref name="p1"/> * <paramref name="p2"/>) is applied to a vector <i>v</i> 
            the transformation are applied in the following order: <i>v'</i> = p1 * p2 * <i>v</i><br/>
            That means, the vector is first transformed by <paramref name="p2"/> and then by 
            <paramref name="p1"/>.
            </para>
            <para>
            Example: If <paramref name="p1"/> is the <see cref="T:DigitalRune.Geometry.PoseD"/> of a 
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> and <paramref name="p2"/> is the <see cref="T:DigitalRune.Geometry.PoseD"/> of a child 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/> in the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>, the pose 
            <paramref name="p2"/> transforms from child's space to the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>'s
            space and <paramref name="p1"/> transforms from the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>'s space to
            world space. The result of the multiplication p1 * p2 is a pose that transforms directly
            from the child's space to world space.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.Multiply(DigitalRune.Geometry.PoseD,DigitalRune.Geometry.PoseD)">
            <overloads>
            <summary>
            Multiplies a <see cref="T:DigitalRune.Geometry.PoseD"/> with another value.
            </summary>
            </overloads> 
            
            <summary>
            Multiplies two poses.
            </summary>
            <param name="p1">The first pose p1.</param>
            <param name="p2">The second pose p2.</param>
            <returns>The multiplication of p1 and p2: p1 * p2.</returns>
            <remarks>
            <para>
            When product (<paramref name="p1"/> * <paramref name="p2"/>) is applied to a vector <i>v</i> 
            the transformation are applied in the following order: <i>v'</i> = p1 * p2 * <i>v</i><br/>
            That means, the vector is first transformed by <paramref name="p2"/> and then by 
            <paramref name="p1"/>.
            </para>
            <para>
            Example: If <paramref name="p1"/> is the <see cref="T:DigitalRune.Geometry.PoseD"/> of a
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> and <paramref name="p2"/> is the <see cref="T:DigitalRune.Geometry.PoseD"/> of a child 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/> in the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>, the pose 
            <paramref name="p2"/> transforms from child's space to the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>'s
            space and <paramref name="p1"/> transforms from the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>'s space to
            world space. The result of the multiplication p1 * p2 is a pose that transforms directly
            from the child's space to world space.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.op_Multiply(DigitalRune.Geometry.PoseD,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Multiplies the pose with a vector.
            </summary>
            <param name="pose">The pose.</param>
            <param name="vector">The vector.</param>
            <returns>The transformed vector.</returns>
            <remarks>
            Multiplying a pose matrix with a vector is equal to transforming a vector from local space
            to world space (or parent space for nested coordinate spaces).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.Multiply(DigitalRune.Geometry.PoseD,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Multiplies the pose with a vector.
            </summary>
            <param name="pose">The pose.</param>
            <param name="vector">The vector.</param>
            <returns>The transformed vector.</returns>
            <remarks>
            Multiplying a pose matrix with a vector is equal to transforming a vector from local space
            to world space (or parent space for nested coordinate spaces).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.op_Equality(DigitalRune.Geometry.PoseD,DigitalRune.Geometry.PoseD)">
            <summary>
            Compares two <see cref="T:DigitalRune.Geometry.PoseD"/>s to determine whether they are the same.
            </summary>
            <param name="pose1">The first pose.</param>
            <param name="pose2">The second pose.</param>
            <returns>
            <see langword="true"/> if the poses are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>Two poses are equal if their positions and orientations are equal.</remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.op_Inequality(DigitalRune.Geometry.PoseD,DigitalRune.Geometry.PoseD)">
            <summary>
            Compares two <see cref="T:DigitalRune.Geometry.PoseD"/>s to determine whether they are different.
            </summary>
            <param name="pose1">The first pose.</param>
            <param name="pose2">The second pose.</param>
            <returns>
            <see langword="true"/> if the poses are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>Two poses are equal if their positions and orientations are equal.</remarks>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.op_Explicit(DigitalRune.Geometry.PoseD)~DigitalRune.Geometry.Pose">
            <summary>
            Converts a double-precision pose to a single-precision pose.
            </summary>
            <param name="pose">The pose (double-precision).</param>
            <returns>The pose (single-precision).</returns>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.op_Implicit(DigitalRune.Geometry.PoseD)~DigitalRune.Mathematics.Algebra.Matrix44D">
            <summary>
            Converts a pose to a 4x4 transformation matrix.
            </summary>
            <param name="pose">The pose.</param>
            <returns>A 4x4-matrix that represents the same transformation as the pose.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.PoseD.op_Explicit(DigitalRune.Geometry.PoseD)~Microsoft.Xna.Framework.Matrix">
            <summary>
            Converts a pose to a 4x4 transformation matrix (XNA Framework). (Only available in the 
            XNA-compatible build.)
            </summary>
            <param name="pose">The pose.</param>
            <returns>A 4x4-matrix that represents the same transformation as the pose.</returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the DigitalRune.Geometry.dll.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.ResourcePools">
            <summary>
            Provides resource pools for reusable items. (For internal use only.)
            </summary>
            <remarks>
            Some objects such as <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>, <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>, etc. are always pooled.
            Therefore they have an internal resource pool and use the Create-Recycle pattern. But some
            types should not use a resource pool by default - only in special cases. The resource pools
            for such types are gather in this class.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.ResourcePools`1">
            <summary>
            Provides resource pools for reusable generic collections or items. (For internal use only.)
            </summary>
            <typeparam name="T">The type used in the items.</typeparam>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.Aabb">
            <summary>
            Defines an axis-aligned bounding box (AABB).
            </summary>
            <remarks>
            <para>
            This type is used to represent a bounding volume. It is like a box where the faces are aligned
            to the axes of the coordinate space.
            </para>
            <para>
            An AABB is defined by the positions of the <see cref="F:DigitalRune.Geometry.Shapes.Aabb.Minimum"/> and the <see cref="F:DigitalRune.Geometry.Shapes.Aabb.Maximum"/> 
            box corner. <see cref="F:DigitalRune.Geometry.Shapes.Aabb.Minimum"/> must be less than <see cref="F:DigitalRune.Geometry.Shapes.Aabb.Maximum"/>. But this rule is 
            not enforced; no exceptions are thrown in the setter of the properties.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Aabb.Minimum">
            <summary>
            The minimum position.
            </summary>
            <remarks>
            This is the vertex of the AABB with smallest position.
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Aabb.Maximum">
            <summary>
            The maximum position.
            </summary>
            <remarks>
            This is the vertex of the AABB with the largest position.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.Aabb.Center">
            <summary>
            Gets the center.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.Aabb.Extent">
            <summary>
            Gets the extent vector (<see cref="F:DigitalRune.Geometry.Shapes.Aabb.Maximum"/> - <see cref="F:DigitalRune.Geometry.Shapes.Aabb.Minimum"/>).
            </summary>
            <value>The extent (the widths in x, y, and z) of the AABB.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.Aabb.Volume">
            <summary>
            Gets the volume of this axis-aligned bounding box.
            </summary>
            <value>The volume of the axis-aligned bounding box.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/>.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.Equals(System.Object)">
            <overloads>
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.Equals(DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Determines whether the specified <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/> is equal to the current 
            <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.AreNumericallyEqual(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
            <overloads>
            <summary>
            Determines whether two <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/> are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two AABBs are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="first">The first AABB.</param>
            <param name="second">The second AABB.</param>
            <returns>
            <see langword="true"/> if the AABBs are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            If the components of <see cref="F:DigitalRune.Geometry.Shapes.Aabb.Minimum"/> and <see cref="F:DigitalRune.Geometry.Shapes.Aabb.Maximum"/> differ less then 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/> the AABBs are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.AreNumericallyEqual(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb,System.Single)">
            <summary>
            Determines whether two AABBs are equal (regarding the given tolerance).
            </summary>
            <param name="first">The first AABB.</param>
            <param name="second">The second AABB.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the AABBs are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            If the components of <see cref="F:DigitalRune.Geometry.Shapes.Aabb.Minimum"/> and <see cref="F:DigitalRune.Geometry.Shapes.Aabb.Maximum"/> differ less then 
            <paramref name="epsilon"/> the AABBs are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.op_Equality(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/>s are equal.
            </summary>
            <param name="aabbA">The first <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/>.</param>
            <param name="aabbB">The second <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/>s are equal; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.op_Inequality(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/>s are different.
            </summary>
            <param name="aabbA">The first <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/>.</param>
            <param name="aabbB">The second <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/>s are different; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.Contains(DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Determines whether the current AABB contains a given AABB.
            </summary>
            <param name="other">The other AABB.</param>
            <returns>
            <see langword="true"/> if <paramref name="other"/> is fully contained in this AABB; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <summary>
            Computes the world space AABB for a scaled, rotated and translated AABB.
            </summary>
            <param name="scale">The scale of the AABB.</param>
            <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose"/> that defines the rotation and translation. This pose defines how this
            <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/> should be positioned in world space.
            </param>
            <returns>
            The world space AABB that encloses this scaled, rotated and translated local space AABB.
            </returns>
            <remarks>
            Use this method if this AABB represents a bounding box in local space of an
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. This method computes the world space AABB that encloses this
            AABB.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.GetAabb(DigitalRune.Geometry.Pose)">
            <summary>
            Computes the world space AABB for a rotated and translated AABB.
            </summary>
            <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose"/> that defines the rotation and translation. This pose defines how 
            this <see cref="T:DigitalRune.Geometry.Shapes.Aabb"/> should be positioned in world space.
            </param>
            <returns>
            The world space AABB that encloses this rotated and translated local space AABB.
            </returns>
            <remarks>
            <para>
            Use this method if this AABB represents a bounding box in local space of an
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. This method computes the world space AABB that encloses this
            AABB.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.Grow(DigitalRune.Mathematics.Algebra.Vector3F)">
            <overloads>
            <summary>
            Increases the size of the AABB.
            </summary>
            </overloads>
            
            <summary>
            Grows the AABB so that it includes the given point.
            </summary>
            <param name="point">The point to include.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.Grow(DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Grows the AABB so that it includes the given AABB.
            </summary>
            <param name="aabb">The AABB to include.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.Grow(DigitalRune.Geometry.IGeometricObject)">
            <summary>
            Grows the AABB so that it includes the AABB of the given geometric object.
            </summary>
            <param name="geometricObject">The geometric object to include.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.Merge(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Shapes.Aabb)">
            <summary>
            Merges the specified AABBs.
            </summary>
            <param name="first">The first AABB.</param>
            <param name="second">The second AABB.</param>
            <returns>The AABB that includes both child AABBs.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.Scale(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Scales the AABB.
            </summary>
            <param name="scale">
            The scale factors for the dimensions x, y and z.
            The scale factors can be negative to mirror the AABB.
            </param>
            <remarks>
            The AABB limits are multiplied with the scale factors.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.Translate(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Translates the AABB.
            </summary>
            <param name="translation">The displacement vector.</param>
            <remarks>
            The <paramref name="translation"/> is added to the AABB limits.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Aabb.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.BoxShape">
            <summary>
            Represents a box centered at the origin.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.BoxShape.Extent">
            <summary>
            Gets or sets the extent vector.
            </summary>
            <value>
            The extent of the box (<see cref="P:DigitalRune.Geometry.Shapes.BoxShape.WidthX"/>, <see cref="P:DigitalRune.Geometry.Shapes.BoxShape.WidthY"/>, <see cref="P:DigitalRune.Geometry.Shapes.BoxShape.WidthZ"/>).
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A component of <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.BoxShape.InnerPoint">
            <summary>
            Gets an inner point (center of box).
            </summary>
            <value>The center of the box (0, 0, 0).</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.BoxShape.WidthX">
            <summary>
            Gets or sets the width along the x-axis.
            </summary>
            <value>The width along the x-axis.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.BoxShape.WidthY">
            <summary>
            Gets or sets the width along the y-axis.
            </summary>
            <value>The width along the y-axis.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.BoxShape.WidthZ">
            <summary>
            Gets or sets the width along the z-axis.
            </summary>
            <value>The width along the z-axis.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.BoxShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/> class.
            </summary>
            <remarks>
            Creates an empty box.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.BoxShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/> class from the given extent vector.
            </summary>
            <param name="extent">The extent of the box.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.BoxShape.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/> class with the given size.
            </summary>
            <param name="widthX">The width along the x-axis.</param>
            <param name="widthY">The width along the y-axis.</param>
            <param name="widthZ">The width along the z-axis.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthX"/>, <paramref name="widthY"/>, or <paramref name="widthZ"/> is 
            negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.BoxShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.BoxShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.BoxShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.BoxShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.BoxShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>
            A support point regarding the given direction.
            </returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.BoxShape.GetVolume">
            <overloads>
            <summary>
            Gets the volume of this shape.
            </summary>
            </overloads>
            
            <summary>
            Gets the volume of this box.
            </summary>
            <returns>The volume of this box.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.BoxShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this box.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used.</param>
            <returns>The volume of this box.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.BoxShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.BoxShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.CapsuleShape">
            <summary>
            Represents a capsule centered at the local origin and upright along the y-axis.
            </summary>
            <remarks>
            A capsule is like a <see cref="T:DigitalRune.Geometry.Shapes.CylinderShape"/> with spherical caps.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.CapsuleShape.InnerPoint">
            <summary>
            Gets an inner point (center of capsule).
            </summary>
            <value>The center of the capsule (0, 0, 0).</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.CapsuleShape.Height">
            <summary>
            Gets or sets the total height (including the spherical caps).
            </summary>
            <value>The height (including the spherical caps).</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is less than 2 * <see cref="P:DigitalRune.Geometry.Shapes.CapsuleShape.Radius"/>. (The height must be greater 
            than or equal to 2 * radius.)
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.CapsuleShape.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is either negative or greater than <see cref="P:DigitalRune.Geometry.Shapes.CapsuleShape.Height"/> / 2. (The 
            radius must be less than or equal to height / 2.)
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CapsuleShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CapsuleShape"/> class.
            </summary>
            <remarks>
            Creates an empty capsule.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CapsuleShape"/> class with the given radius and 
            height.
            </summary>
            <param name="radius">The radius.</param>
            <param name="height">The height (including the spherical caps).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="height"/> is less than 2 * <see cref="P:DigitalRune.Geometry.Shapes.CapsuleShape.Radius"/>. (The height must be greater 
            than or equal to 2 * radius.)
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="radius"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.GetVolume">
            <overloads>
            <summary>
            Gets the volume of this shape.
            </summary>
            </overloads>
            
            <summary>
            Gets the volume of this shape.
            </summary>
            <returns>The volume of this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this capsule.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used.</param>
            <returns>The volume of this capsule.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CapsuleShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.CircleShape">
            <summary>
            Represents a circle in the xy plane centered at the origin.
            </summary>
            <remarks>
            The front face is visible from the positive z half-space.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.CircleShape.InnerPoint">
            <summary>
            Gets an inner point (center of the circle).
            </summary>
            <value>The center of the circle (0, 0, 0).</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space). 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.CircleShape.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CircleShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CircleShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CircleShape"/> class.
            </summary>
            <remarks>
            Creates a circle with radius = 0.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CircleShape.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CircleShape"/> class with the given radius.
            </summary>
            <param name="radius">The radius.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="radius"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CircleShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CircleShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CircleShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CircleShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CircleShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CircleShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this shape.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used</param>
            <returns>0</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CircleShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CircleShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.CompositeShape">
            <summary>
            Represents a shape consisting of several other geometric objects.
            </summary>
            <remarks> 
            <para>
            This shape is a collection of geometric objects (see <see cref="P:DigitalRune.Geometry.Shapes.CompositeShape.Children"/>). Each child has a
            <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape"/>, <see cref="P:DigitalRune.Geometry.IGeometricObject.Scale"/> and a 
            <see cref="P:DigitalRune.Geometry.IGeometricObject.Pose"/> (= position and orientation). All children are defined in
            the local space of the composite shape. That means that the 
            <see cref="P:DigitalRune.Geometry.IGeometricObject.Pose"/> defines the position and orientation of each child
            relative to the parent composite shape. The resulting composite shape can be concave.
            </para>
            <para>
            Other names for this type of shape: Complex, Compound, Group, ...
            </para>
            <para>
            <strong>Spatial Partitioning:</strong> A spatial partitioning method (see 
            <see cref="P:DigitalRune.Geometry.Shapes.CompositeShape.Partition"/> can be used to improve runtime performance if this composite shape
            consists of a lot of children. A spatial partition improves the collision detection speed at
            the cost of additional memory. If <see cref="P:DigitalRune.Geometry.Shapes.CompositeShape.Partition"/> is <see langword="null"/>, no
            spatial partitioning method is used (which is the default). If a spatial partitioning scheme
            should be used, the property <see cref="P:DigitalRune.Geometry.Shapes.CompositeShape.Partition"/> must be set to an instance of
            <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/>. The items in the spatial partition will be the indices of
            the <see cref="P:DigitalRune.Geometry.Shapes.CompositeShape.Children"/> of this composite shape. The composite shape will automatically
            fill and update the spatial partition. Following example shows how a complex composite shape
            can be improved by using an AABB tree:
            <code lang="csharp">
            <![CDATA[
            myCompositeShape.Partition = new AabbTree<int>();
            ]]>
            </code>
            </para>
            <para>
            <strong>Shape Features:</strong> If a <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> is involved in a 
            <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>, the shape feature property (<see cref="P:DigitalRune.Geometry.Collisions.Contact.FeatureA"/> and
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.FeatureB"/>) contains the index of the child that caused the 
            <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>.
            </para>
            <para>
            <strong>Cloning:</strong> 
            If a <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> is cloned, all <see cref="P:DigitalRune.Geometry.Shapes.CompositeShape.Children"/> and the spatial
            partition (if any is in use) will be cloned (deep copy).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.CompositeShape.Children">
            <summary>
            Gets the child geometric objects.
            </summary>
            <value>The collection of child shapes with scale and pose.</value>
            <remarks>
            The poses (positions and orientations) of the children is relative to the parent. That means 
            the poses define the transformations in the local space of the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.CompositeShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>
            An inner point. (If the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> is empty, (0, 0, 0) is returned.
            </value>
            <remarks>
            This point is a random "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.CompositeShape.Partition">
            <summary>
            Gets or set the spatial partition used to improve the performance of geometric queries.
            </summary>
            <value>
            The spatial partition. Per default no spatial partition is used and this property is 
            <see langword="null"/>.
            </value>
            <remarks>
            The spatial partition stores only the indices into the <see cref="P:DigitalRune.Geometry.Shapes.CompositeShape.Children"/> collection. 
            This property can be set to <see langword="null"/> to remove a spatial partition. If a 
            spatial partition is set, the composite shape will automatically fill and update the
            spatial partition.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.SetPartition(DigitalRune.Geometry.Partitioning.ISpatialPartition{System.Int32})">
            <summary>
            Sets the spatial partition. (For use by the content pipeline only.)
            </summary>
            <param name="partition">The spatial partition.</param>
            <remarks>
            This method is used internally to directly set the spatial partition. The spatial partition
            might already be initialized and should not be invalidated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.GetVolume(System.Single,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.OnChildrenChanged(System.Object,DigitalRune.Collections.CollectionChangedEventArgs{DigitalRune.Geometry.IGeometricObject})">
            <summary>
            Called when the <see cref="P:DigitalRune.Geometry.Shapes.CompositeShape.Children"/> collection was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1"/> instance containing the event
            data.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.OnChildShapeChanged(System.Object,System.EventArgs)">
            <summary>
            Called when a child object was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CompositeShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.ConeShape">
            <summary>
            Represents a cone standing on the xz plane, pointing up in the +y direction.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ConeShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point: (0, <see cref="P:DigitalRune.Geometry.Shapes.ConeShape.Height"/> / 2, 0).</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ConeShape.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ConeShape.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConeShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConeShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConeShape"/> class.
            </summary>
            <remarks>
            Creates an empty cone.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConeShape.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConeShape"/> class with the given radius and 
            height.
            </summary>
            <param name="radius">The radius.</param>
            <param name="height">The height.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="radius"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="height"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConeShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConeShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConeShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConeShape.GetVolume">
            <overloads>
            <summary>
            Gets the volume of this shape.
            </summary>
            </overloads>
            
            <summary>
            Gets the volume of this shape.
            </summary>
            <returns>The volume of this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConeShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this cone.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used.</param>
            <returns>The volume of this cone.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConeShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConeShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints">
            <summary>
            Represents a convex hull of a set of points.
            </summary>
            <remarks>
            <para>
            This shape is a collection of points from which the convex hull is computed.
            </para>
            <para>
            A <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints"/> is similar to a <see cref="T:DigitalRune.Geometry.Shapes.ConvexPolyhedron"/> except that
            the shape can be changed dynamically. Points in the <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints"/> can be 
            added or removed at runtime.
            </para>
            <para>
            Use a <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints"/> if the points in the shape need to be modified at 
            runtime. Use a <see cref="T:DigitalRune.Geometry.Shapes.ConvexPolyhedron"/> if the set of points is fixed and a high
            performance is required.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>
            An inner point which is the average of all points; or (0, 0, 0) if <see cref="P:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.Points"/> is
            empty.
            </value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.Points">
            <summary>
            Gets or sets the list with the points contained in the convex hull.
            </summary>
            <value>
            A list of all points contained in the convex hull. Must not be <see langword="null"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints"/> class.
            </summary>
            <remarks>
            This constructor creates a new empty <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.#ctor(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints"/> class from a sequence
            of points.
            </summary>
            <param name="points">
            A collection of points which are copied into the <see cref="P:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.Points"/> list.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.#ctor(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints"/> class from a list of 
            points.
            </summary>
            <param name="points">
            The point list. A reference to this list is stored in <see cref="P:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.Points"/>. The list is not
            copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point. 
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away 
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.Invalidate">
            <summary>
            Invalidates this instance.
            </summary>
            <remarks>
            This method must be called if the content of <see cref="P:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.Points"/> was changed. 
            This method calls <see cref="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.OnChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.OnChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfPoints.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.ConvexHullOfShapes">
            <summary>
            Represents a convex hull of several shapes.
            </summary>
            <remarks>
            <para>
            This shape is similar to a <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> - only that the resulting shape is the 
            convex hull of all child shapes. This shape is per definition convex.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.Children">
            <summary>
            Gets the child objects.
            </summary>
            <value>The collection of child shapes and poses.</value>
            <remarks>
            The child objects must have a <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>s.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>
            An inner point. If <see cref="P:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.Children"/> is empty, then (0, 0, 0) is returned.
            </value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space). 
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.OnChildrenChanged(System.Object,DigitalRune.Collections.CollectionChangedEventArgs{DigitalRune.Geometry.IGeometricObject})">
            <summary>
            Called when the <see cref="P:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.Children"/> collection was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Collections.CollectionChangedEventArgs`1"/> instance containing the event
            data.
            </param>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            The child geometric object in the <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfShapes"/> is not a 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.OnChildPoseChanged(System.Object,System.EventArgs)">
            <summary>
            Called when a child pose was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.OnChildShapeChanged(System.Object,DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <summary>
            Called when a child shape was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> instance containing the event data.
            </param>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            The child geometric object in the <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfShapes"/> is not a 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexHullOfShapes.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.ConvexPolyhedron">
            <summary>
            Represents a convex polyhedron.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Geometry.Shapes.ConvexPolyhedron"/> is similar to a <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints"/> except that
            the shape is fixed and the points that represent the shape cannot be changed. The 
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexPolyhedron"/> is optimized and provides a faster support mapping (see 
            <see cref="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)"/>) than the <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints"/>.
            </para>
            <para>
            Use a <see cref="T:DigitalRune.Geometry.Shapes.ConvexHullOfPoints"/> if the points in the shape need to be modified at 
            runtime.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.ConvexPolyhedron.VertexThreshold">
            <summary>
            The vertex threshold. If the number of vertices exceeds the vertex threshold a directional
            lookup table and vertex adjacency lists are used internally.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.ConvexPolyhedron.RadiusFactor">
            <summary>
            The radius factor used for building the directional lookup table.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.ConvexPolyhedron.LookupTableWidth">
            <summary>
            The width of the directional lookup table (= the length of a cube map side).
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ConvexPolyhedron.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>
            An inner point which is the average of all vertices; or (0, 0, 0) if the convex polyhedron
            is empty.
            </value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ConvexPolyhedron.Vertices">
            <summary>
            Gets a read-only list with the vertices of the convex polyhedron.
            </summary>
            <value>
            A read-only list with the vertices of the convex polyhedron.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ConvexPolyhedron.DirectionalLookupTable">
            <summary>
            Gets the directional lookup table. (For internal use only.)
            </summary>
            <value>The directional lookup table.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ConvexPolyhedron.VertexAdjacency">
            <summary>
            Gets the vertex adjacency lists. (For internal use only.)
            </summary>
            <value>The vertex adjacency.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ConvexPolyhedron.Internals">
            <exclude/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConvexPolyhedron"/> class. (For internal use 
            only.)
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.#ctor(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ConvexPolyhedron"/> class.
            </summary>
            <param name="points">
            A collection of points which from which a convex polyhedron is built.
            </param>
            <remarks>
            The convex polyhedron is the convex hull of <paramref name="points"/>. Points within the
            convex hull are automatically removed.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            Too many vertices in convex hull. Max. 65534 vertices in a convex polyhedron are supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point. 
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away 
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexPolyhedron.BuildConvexPolyhedron(System.Collections.Generic.IEnumerable{DigitalRune.Mathematics.Algebra.Vector3F})">
            <summary>
            Initializes the convex polyhedron.
            </summary>
            <param name="points">The points.</param>
            <exception cref="T:System.NotSupportedException">
            Too many vertices in convex hull. Max. 65534 vertices in a convex polyhedron are supported.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.ConvexShape">
            <summary>
            Represents a convex shape. 
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose"/>.
            </summary>
            <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the shape's
            local space before the pose is applied.
            </param>
            <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose"/> of the shape. This pose defines how the shape should be positioned in
            world space.
            </param>
            <returns>The AABB of the shape positioned in world space.</returns>
            <remarks>
            <para>
            The AABB is axis-aligned to the axes of the world space (or the parent coordinate space). 
            </para>
            <para>
            The default implementation in <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/> uses the support mapping to compute 
            the AABB. Often the AABB can be computed more efficiently; in such cases this method should 
            be overridden in derived classes.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <overloads>
            <summary>
            Gets a support point for a given direction.
            </summary>
            </overloads>
            
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away 
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            <para>
            <strong>Notes to Inheritors:</strong>
            The default implementation of this method normalizes the direction and calls
            <see cref="M:DigitalRune.Geometry.Shapes.ConvexShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)"/>. If this method is overridden,
            don't forget to check whether direction is a zero vector and to normalize 
            <paramref name="direction"/> if required.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction and a given non-uniform scaling.
            </summary>
            <param name="direction">
            The direction for which to get the support point on the scaled shape. The vector does not 
            need to be normalized. The result is undefined if the vector is a zero vector.
            </param>
            <param name="scale">
            The scale that is applied to the shape. This can be a non-uniform 3D scaling.
            </param>
            <returns>
            A support point regarding the given direction on the scaled shape.
            </returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            <para>
            If only a uniform scale should be applied, it is faster to call 
            <see cref="M:DigitalRune.Geometry.Shapes.ConvexShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)"/> or <see cref="M:DigitalRune.Geometry.Shapes.ConvexShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)"/> and
            scale the resulting support point position. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point. 
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away 
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ConvexShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
            <remarks>
            <para>
            <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/> provides a base implementation for <see cref="M:DigitalRune.Geometry.Shapes.ConvexShape.OnGetMesh(System.Single,System.Int32)"/> that
            samples the support mapping and automatically generates a mesh. But derived classes should
            override <see cref="M:DigitalRune.Geometry.Shapes.ConvexShape.OnGetMesh(System.Single,System.Int32)"/> if they can provide a more efficient implementation.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.CylinderShape">
            <summary>
            Represents a cylinder centered at the local origin and upright along the y-axis.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.CylinderShape.InnerPoint">
            <summary>
            Gets an inner point (center of cylinder).
            </summary>
            <value>The center of the cylinder (0, 0, 0).</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.CylinderShape.Height">
            <summary>
            Gets or sets the height (which is along the y-axis).
            </summary>
            <value>The height.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.CylinderShape.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CylinderShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CylinderShape"/> class.
            </summary>
            <remarks>
            Creates an empty cylinder.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.CylinderShape"/> class with the given radius
            and height.
            </summary>
            <param name="radius">The radius.</param>
            <param name="height">The height (which is along the y-axis).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="radius"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="height"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.GetVolume">
            <overloads>
            <summary>
            Gets the volume of this shape.
            </summary>
            </overloads>
            
            <summary>
            Gets the volume of this shape.
            </summary>
            <returns>
            The volume of this shape.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this cylinder.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used.</param>
            <returns>The volume of this cylinder.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.CylinderShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.EmptyShape">
            <summary>
            Defines a shape that represents an empty volume. This shape will not collide with any other 
            shape.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.EmptyShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point. Always (0, 0, 0).</value>
        </member>
        <member name="E:DigitalRune.Geometry.Shapes.EmptyShape.Changed">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.EmptyShape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.EmptyShape"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.EmptyShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.EmptyShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.EmptyShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.EmptyShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this shape.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used</param>
            <returns>0</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.EmptyShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
            <remarks>
            An <see cref="T:DigitalRune.Geometry.Shapes.EmptyShape"/> has no valid mesh. This method will return an empty
            triangle mesh.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.HeightField">
            <summary>
            Represents a height field which can be used for simple terrains.
            </summary>
            <remarks>
            <para>
            A height field is defined by a 1-dimensional array (<see cref="P:DigitalRune.Geometry.Shapes.HeightField.Samples"/>) which contains
            <see cref="P:DigitalRune.Geometry.Shapes.HeightField.NumberOfSamplesX"/> x <see cref="P:DigitalRune.Geometry.Shapes.HeightField.NumberOfSamplesZ"/> height values.
            This array is triangulated. Each array element defines a triangle vertex.
            The height samples are addressed like this: 
            </para>
            <para>
            <c>height(indexX, indexZ) = Samples[indexZ * NumberOfSamplesX + indexX]</c>
            </para>
            <para>
            The height field is placed in the local x/z plane where the up direction is the positive
            y-axis. The top-left height field corner (<c>Samples[0]</c>) is positioned at
            x = <see cref="P:DigitalRune.Geometry.Shapes.HeightField.OriginX"/> and z = <see cref="P:DigitalRune.Geometry.Shapes.HeightField.OriginZ"/>.
            </para>
            <para>
            The height field is stretched to fill a rectangle <see cref="P:DigitalRune.Geometry.Shapes.HeightField.WidthX"/> x <see cref="P:DigitalRune.Geometry.Shapes.HeightField.WidthZ"/>.
            </para>
            <para>
            Holes in the height field can be created by setting a height value in the <see cref="P:DigitalRune.Geometry.Shapes.HeightField.Samples"/>
            to <see cref="F:System.Single.NaN"/>. All triangles touching the "hole" vertex will be removed. This
            also means that the shape of the hole depends on the current tessellation pattern.
            If all elements in the <see cref="P:DigitalRune.Geometry.Shapes.HeightField.Samples"/> are <see cref="F:System.Single.NaN"/>, then the behavior
            of the height field is undefined.
            </para>
            <para>
            Limitations of holes and collision detection:
            Please note that computation of <see cref="F:DigitalRune.Geometry.Collisions.CollisionQueryType.ClosestPoints"/>, might not work
            as expected if an object moves through a hole and under the height field. Also computation
            of contacts might not work as expected on the border triangles near the hole. For good
            collision detection results it is recommended to avoid closest points queries for objects
            under the height field and to always surround a hole with other collision objects.
            For instance if there is a cave in a game terrain, make the hole larger than the cave entrance
            and surround it with additional rock meshes.
            </para>
            <para>
            <strong>Shape Features:</strong> If a <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/> is involved in a
            <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> the shape feature property (<see cref="P:DigitalRune.Geometry.Collisions.Contact.FeatureA"/> or
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.FeatureB"/>) contains the index of the triangle that creates the
            <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>: Each cell consists of two triangles. The first cell contains the
            triangles 0 and 1. The next cell in positive x direction contains the triangles 2 and 3. And
            so on. To compute an index all cells of a row in positive x direction are enumerated then the
            next x-row is enumerated and so on.
            </para>
            </remarks>
            <example>
            <para>
            Here is an example (pseudo-code):
            </para>
            <para>
            <c>HeightField { Samples=float[200], OriginX=3000, OriginY =4000, WidthX=100, WidthZ=200 }</c>
            </para>
            <para>
            This creates a height field in the x/z plane. The field is 100 units wide in the x-axis and
            200 units wide in the z-axis. The array element [0] defines the height field height at
            x = 3000, z = 4000. The array element [199] defines the height field height at
            x = 3100, z = 4200
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/> must contain at least 2 x 2 elements.
            </para>
            <para>
            For best performance, <see cref="T:DigitalRune.Geometry.IGeometricObject"/>s that have a <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/>
            shape should use only 90 degree rotations in their <see cref="T:DigitalRune.Geometry.Pose"/>. The local x/z plane of
            the height field should be normal to a world space axis plane.
            </para>
            <para>
            For a height field the collision behavior is only defined in the x/z range of the height
            field. Beyond the height field limits the collision behavior is undefined. For example, if a
            box is left of the height field and moves sideways into the height field, the closest-point
            and contact information might not be intuitive and such cases should be avoided.
            </para>
            </example>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.HeightField.Samples">
            <summary>
            Gets the height field.
            </summary>
            <value>
            The height field. The default height field is 2 x 2 height field where the heights are 0.
            </value>
            <remarks>
            <para>
            This 1-dimensional array contains the height samples of the rectangular height field.
            The array must contain at least <c>NumberOfSamplesX * NumberSamplesZ</c> elements.
            The elements are addressed like this: <c>height(indexX, indexZ) = Samples[indexZ * NumberOfSamplesX + indexX]</c>.
            </para>
            <para>
            Use <see cref="M:DigitalRune.Geometry.Shapes.HeightField.SetSamples(System.Single[],System.Int32,System.Int32)"/> to change this property.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.HeightField.NumberOfSamplesX">
            <summary>
            Gets the number of samples per row (= along the x-axis).
            </summary>
            <value>The number of samples per row (= along the x-axis).</value>
            <remarks>
            Use <see cref="M:DigitalRune.Geometry.Shapes.HeightField.SetSamples(System.Single[],System.Int32,System.Int32)"/> to change this property.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.HeightField.NumberOfSamplesZ">
            <summary>
            Gets the number of samples per column (= along the z-axis).
            </summary>
            <value>The number of samples per column (= along the z-axis).</value>
            <remarks>
            Use <see cref="M:DigitalRune.Geometry.Shapes.HeightField.SetSamples(System.Single[],System.Int32,System.Int32)"/> to change this property.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.HeightField.Array">
            <summary>
            Gets or sets the height field.
            </summary>
            <value>
            The height field. The default height field is 2 x 2 height field where the heights are 0.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> contains less than 2 x 2 elements.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.HeightField.Depth">
            <summary>
            Gets or sets the depth of the height field.
            </summary>
            <value>The depth. The default value is 100.</value>
            <remarks>
            <para>
            This value defines the depth of each height field cell. This value is relevant for detecting
            collisions which happen below the height field surface. Penetrations with the height field
            deeper than this value are ignored.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.HeightField.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point.</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.HeightField.UseFastCollisionApproximation">
            <summary>
            Gets or sets a value indicating whether the collision detection should use a fast, less
            accurate method.
            </summary>
            <value>
            <see langword="true"/> if the collision detection should use a fast, less accurate method; 
            otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
            If this flag is set, the collision detection uses a new, very fast algorithm for computing
            collisions between the height field and other objects. This algorithm should only be used
            if the height field is smooth.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.HeightField.OriginX">
            <summary>
            Gets or sets height field origin along the x-axis.
            </summary>
            <value>The height field origin along the x-axis. The default value is 0.</value>
            <remarks>
            The height field origin determines the position of the top-left height field corner
            (<c>Samples[0]</c>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.HeightField.OriginZ">
            <summary>
            Gets or sets height field origin along the z-axis.
            </summary>
            <value>The height field origin along the z-axis. The default value is 0.</value>
            <inheritdoc cref="P:DigitalRune.Geometry.Shapes.HeightField.OriginX"/>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.HeightField.WidthX">
            <summary>
            Gets or sets the width along the local x-axis.
            </summary>
            <value>The first width. The default value is 1000.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.HeightField.WidthZ">
            <summary>
            Gets or sets the width along the local z-axis.
            </summary>
            <value>The second width. The default value is 1000.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.#ctor(System.Single,System.Single,System.Single[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.HeightField"/> class from the given array.
            </summary>
            <param name="widthX">The width along the x-axis.</param>
            <param name="widthZ">The width along the z-axis.</param>
            <param name="array">The array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> contains less than 2 x 2 elements.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthX"/> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthZ"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.HeightField" /> class from the given array.
            </summary>
            <param name="originX">The origin along the x-axis.</param>
            <param name="originZ">The origin along the z-axis.</param>
            <param name="widthX">The width along the x-axis.</param>
            <param name="widthZ">The width along the z-axis.</param>
            <param name="samples">The height samples (see <see cref="P:DigitalRune.Geometry.Shapes.HeightField.Samples" />).</param>
            <param name="numberOfSamplesX">
            The number of samples along the x-axis. (Must be at least 2.)
            </param>
            <param name="numberOfSamplesZ">
            The number of samples along the z-axis. (Must be at least 2.)
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthX" /> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthZ" /> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="samples" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSamplesX" /> or <paramref name="numberOfSamplesZ"/> is less than 2.
            </exception>
            <exception cref="T:System.ArgumentException">
            The height samples array must contain at least 
            <paramref name="numberOfSamplesX"/> x <paramref name="numberOfSamplesZ"/> elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.SetSamples(System.Single[],System.Int32,System.Int32)">
            <summary>
            Sets the array of height samples.
            </summary>
            <param name="samples">The height samples (see <see cref="P:DigitalRune.Geometry.Shapes.HeightField.Samples"/>).</param>
            <param name="numberOfSamplesX">
            The number of samples along the x-axis. (Must be at least 2.)
            </param>
            <param name="numberOfSamplesZ">
            The number of samples along the z-axis. (Must be at least 2.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="samples" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfSamplesX" /> or <paramref name="numberOfSamplesZ"/> is less than 2.
            </exception>
            <exception cref="T:System.ArgumentException">
            The height samples array must contain at least
            <paramref name="numberOfSamplesX"/> x <paramref name="numberOfSamplesZ"/> elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.GetHeight(System.Single,System.Single)">
            <summary>
            Gets the height for a height field coordinate.
            </summary>
            <param name="x">
            The x coordinate that lies in the interval [0, <see cref="P:DigitalRune.Geometry.Shapes.HeightField.WidthX"/>].
            </param>
            <param name="z">
            The z coordinate that lies in the interval [0, <see cref="P:DigitalRune.Geometry.Shapes.HeightField.WidthZ"/>].
            </param>
            <returns>The interpolated height for the given coordinates.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.GetTriangle(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets a triangle representing a part of a height field cell.
            </summary>
            <param name="indexX">The cell index along <see cref="P:DigitalRune.Geometry.Shapes.HeightField.WidthX"/>.</param>
            <param name="indexZ">The cell index along <see cref="P:DigitalRune.Geometry.Shapes.HeightField.WidthZ"/>.</param>
            <param name="second">
            If set to <see langword="true"/> the triangle for the second cell half is returned; 
            otherwise the triangle for the first cell half is returned.
            </param>
            <returns>A triangle.</returns>
            <remarks>
            <para>
            Each cell of the height field array is approximated with 2 triangles. 
            <paramref name="second"/> decides which triangle is returned. 
            </para>
            <para>
            The cell indices start at (0, 0) for the first cell. The last cell has the indices 
            (m-2, n-2) when the height field array is a float[m, n] array.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="indexX"/> is out of range.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="indexZ"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this shape.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used</param>
            <returns>Positive infinity (<see cref="F:System.Single.PositiveInfinity"/>)</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.Invalidate">
            <summary>
            Invalidates this height field.
            </summary>
            <remarks>
            This method must be called if the content of <see cref="P:DigitalRune.Geometry.Shapes.HeightField.Samples"/> was changed. 
            This method calls <see cref="M:DigitalRune.Geometry.Shapes.HeightField.OnChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.OnChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.HeightField.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.InfiniteShape">
            <summary>
            Defines a shape that represents an infinitely large volume. This shape will collide with 
            every other shape (except an <see cref="T:DigitalRune.Geometry.Shapes.EmptyShape"/>).
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.InfiniteShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point. Always (0, 0, 0).</value>
        </member>
        <member name="E:DigitalRune.Geometry.Shapes.InfiniteShape.Changed">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.InfiniteShape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.InfiniteShape"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.InfiniteShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.InfiniteShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.InfiniteShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.InfiniteShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this shape.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used</param>
            <returns>Positive infinity (<see cref="F:System.Single.PositiveInfinity"/>)</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.InfiniteShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
            <remarks>
            An <see cref="T:DigitalRune.Geometry.Shapes.InfiniteShape"/> has no valid mesh. This method will return an empty triangle
            mesh.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.Line">
            <summary>
            Defines a line.
            </summary>
            <remarks>
            <para>
            This is a lightweight structure. To define a line shape for <see cref="T:DigitalRune.Geometry.IGeometricObject"/>
            use <see cref="T:DigitalRune.Geometry.Shapes.LineShape"/>.
            </para>
            <para>
            Two <see cref="T:DigitalRune.Geometry.Shapes.Line"/>s are considered as equal if the fields <see cref="F:DigitalRune.Geometry.Shapes.Line.PointOnLine"/> and 
            <see cref="F:DigitalRune.Geometry.Shapes.Line.Direction"/> are equal.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Line.PointOnLine">
            <summary>
            A point on the line.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Line.Direction">
            <summary>
            The normalized direction vector.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Line.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <overloads>
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Line"/>.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Line"/> from a point and a direction.
            </summary>
            <param name="pointOnLine">A point on the line.</param>
            <param name="direction">The direction. (Must be normalized.)</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Line.#ctor(DigitalRune.Geometry.Shapes.LineShape)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Line"/> from a <see cref="T:DigitalRune.Geometry.Shapes.LineShape"/>.
            </summary>
            <param name="lineShape">
            The <see cref="T:DigitalRune.Geometry.Shapes.LineShape"/> from which properties are copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lineShape"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Line.Equals(System.Object)">
            <overloads>
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Line.Equals(DigitalRune.Geometry.Shapes.Line)">
            <summary>
            Determines whether the specified <see cref="T:DigitalRune.Geometry.Shapes.Line"/> is equal to the current 
            <see cref="T:DigitalRune.Geometry.Shapes.Line"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Line.op_Equality(DigitalRune.Geometry.Shapes.Line,DigitalRune.Geometry.Shapes.Line)">
            <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Line"/>s are equal.
            </summary>
            <param name="line1">The first <see cref="T:DigitalRune.Geometry.Shapes.Line"/>.</param>
            <param name="line2">The second <see cref="T:DigitalRune.Geometry.Shapes.Line"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Geometry.Shapes.Line"/>s are equal; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Line.op_Inequality(DigitalRune.Geometry.Shapes.Line,DigitalRune.Geometry.Shapes.Line)">
            <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Line"/>s are different.
            </summary>
            <param name="line1">The first <see cref="T:DigitalRune.Geometry.Shapes.Line"/>.</param>
            <param name="line2">The second <see cref="T:DigitalRune.Geometry.Shapes.Line"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Geometry.Shapes.Line"/>s are different; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Line.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Line.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Line.Scale(DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Applies a scaling to the <see cref="T:DigitalRune.Geometry.Shapes.Line"/>.
            </summary>
            <param name="scale">The scale.</param>
            <exception cref="T:System.NotSupportedException">
            <paramref name="scale"/> is a non-uniform scaling. Non-uniform scaling of lines is not 
            supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Line.ToWorld(DigitalRune.Geometry.Pose@)">
            <summary>
            Transforms the <see cref="T:DigitalRune.Geometry.Shapes.Line"/> from local space to world space by applying a 
            <see cref="T:DigitalRune.Geometry.Pose"/>.
            </summary>
            <param name="pose">The pose (position and orientation).</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Line.ToLocal(DigitalRune.Geometry.Pose@)">
            <summary>
            Transforms the <see cref="T:DigitalRune.Geometry.Shapes.Line"/> from world space to local space by applying the inverse of 
            a <see cref="T:DigitalRune.Geometry.Pose"/>.
            </summary>
            <param name="pose">The pose (rotation and translation).</param>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.LineSegment">
            <summary>
            Defines a line segment.
            </summary>
            <remarks>
            <para>
            This is a lightweight structure. To define a line segment shape for 
            <see cref="T:DigitalRune.Geometry.IGeometricObject"/> use <see cref="T:DigitalRune.Geometry.Shapes.LineSegmentShape"/>.
            </para>
            <para>
            Two <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/>s are considered as equal if there end points are equal and in
            the same order. (Line segments are not equal if <see cref="F:DigitalRune.Geometry.Shapes.LineSegment.Start"/> and <see cref="F:DigitalRune.Geometry.Shapes.LineSegment.End"/> are
            swapped.)
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.LineSegment.Start">
            <summary>
            The start point.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.LineSegment.End">
            <summary>
            The end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.LineSegment.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.LineSegment.LengthSquared">
            <summary>
            Gets the squared length.
            </summary>
            <value>The squared length.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegment.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <overloads>
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/>.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/> from two points.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegment.#ctor(DigitalRune.Geometry.Shapes.LineSegmentShape)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/> from a 
            <see cref="T:DigitalRune.Geometry.Shapes.LineSegmentShape"/>.
            </summary>
            <param name="lineSegmentShape">
            The line segment from which properties are copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lineSegmentShape"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegment.Equals(System.Object)">
            <overloads>
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegment.Equals(DigitalRune.Geometry.Shapes.LineSegment)">
            <summary>
            Determines whether the specified <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/> is equal to the current 
            <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegment.op_Equality(DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Geometry.Shapes.LineSegment)">
            <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/>s are equal.
            </summary>
            <param name="lineSegment1">The first <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/>.</param>
            <param name="lineSegment2">The second <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/>s are equal; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegment.op_Inequality(DigitalRune.Geometry.Shapes.LineSegment,DigitalRune.Geometry.Shapes.LineSegment)">
            <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/>s are different.
            </summary>
            <param name="lineSegment1">The first <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/>.</param>
            <param name="lineSegment2">The second <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/>s are different; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegment.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegment.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.LineSegmentShape">
            <summary>
            Represents a line segment.
            </summary>
            <remarks>
            <para>
            This class can be used if an <see cref="T:DigitalRune.Geometry.IGeometricObject"/> with a line segment shape is
            needed. Use the <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/> structure instead if you need a lightweight
            representation of a line segment (avoids allocating memory on the heap).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.LineSegmentShape.InnerPoint">
            <summary>
            Gets an inner point (center of line segment).
            </summary>
            <value>The center of the line segment.</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space). 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.LineSegmentShape.Start">
            <summary>
            Gets or sets the start point.
            </summary>
            <value>The start point.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.LineSegmentShape.End">
            <summary>
            Gets or sets the end point.
            </summary>
            <value>The end point.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.LineSegmentShape.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.LineSegmentShape.LengthSquared">
            <summary>
            Gets the squared length.
            </summary>
            <value>The squared length.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineSegmentShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineSegmentShape"/> class.
            </summary>
            <remarks>
            Creates a line segment where <see cref="P:DigitalRune.Geometry.Shapes.LineSegmentShape.Start"/> and <see cref="P:DigitalRune.Geometry.Shapes.LineSegmentShape.End"/> are (0, 0, 0).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineSegmentShape"/> class from two points.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.#ctor(DigitalRune.Geometry.Shapes.LineSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineSegmentShape"/> class from a 
            <see cref="T:DigitalRune.Geometry.Shapes.LineSegment"/>.
            </summary>
            <param name="lineSegment">
            The line segment from which properties are copied.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>
            A support point regarding the given direction.
            </returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this shape.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used</param>
            <returns>0</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
            <remarks>
            This creates a mesh with a single degenerate triangle that represents the line segment.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineSegmentShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.LineShape">
            <summary>
            Represents an infinite line.
            </summary>
            <remarks>
            <para>
            This class can be used if an <see cref="T:DigitalRune.Geometry.IGeometricObject"/> with a line shape is needed. Use
            the <see cref="T:DigitalRune.Geometry.Shapes.Line"/> structure instead if you need a lightweight representation of a line
            (avoids allocating memory on the heap).
            </para>
            <para>
            The line is defined using a point on the line and the direction. The <see cref="P:DigitalRune.Geometry.Shapes.LineShape.Direction"/> 
            is always stored as a normalized vector.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.LineShape.PointOnLine">
            <summary>
            Gets or sets a point on the line.
            </summary>
            <value>A point on the line.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.LineShape.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>The direction of the line. Must be normalized.</value>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not normalized.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.LineShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point - same as <see cref="P:DigitalRune.Geometry.Shapes.LineShape.PointOnLine"/>.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.LineShape.MeshSize">
            <summary>
            Gets or sets the length of the mesh that represents a <see cref="T:DigitalRune.Geometry.Shapes.LineShape"/>.
            </summary>
            <value>The length of the mesh.</value>
            <remarks>
            See <see cref="M:DigitalRune.Geometry.Shapes.LineShape.OnGetMesh(System.Single,System.Int32)"/> for more information.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineShape.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Geometry.Shapes.LineShape"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineShape"/> class.
            </summary>
            <remarks>
            Creates a line through the origin in x-axis direction.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineShape"/> class from a point and direction.
            </summary>
            <param name="pointOnLine">A point on the line.</param>
            <param name="direction">The direction.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="direction"/> is not normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineShape.#ctor(DigitalRune.Geometry.Shapes.Line)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.LineShape"/> class from a <see cref="T:DigitalRune.Geometry.Shapes.Line"/>.
            </summary>
            <param name="line">The line structure from which properties are copied.</param>
            <exception cref="T:System.ArgumentException">
            The line direction is not normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this shape.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used</param>
            <returns>0</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
            <remarks>
            This method returns a mesh with a single degenerate triangle. The triangle represents a
            line with the length <see cref="P:DigitalRune.Geometry.Shapes.LineShape.MeshSize"/>. The triangle is centered on 
            <see cref="P:DigitalRune.Geometry.Shapes.LineShape.PointOnLine"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.LineShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape">
            <summary>
            Represents the <i>Minkowski Difference</i> of two geometric objects.
            </summary>
            <remarks>
            <para>
            This shape is defined as the <i>Minkowski Difference</i> of two geometric objects A and B: 
            A - B. The shapes of A and B must be of type <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point.</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space). 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.ObjectA">
            <summary>
            Gets or sets the first <see cref="T:DigitalRune.Geometry.IGeometricObject"/>.
            </summary>
            <value>The first <see cref="T:DigitalRune.Geometry.IGeometricObject"/>.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <paramref name="value"/> is not convex.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.ObjectB">
            <summary>
            Gets or sets the second <see cref="T:DigitalRune.Geometry.IGeometricObject"/>.
            </summary>
            <value>The second <see cref="T:DigitalRune.Geometry.IGeometricObject"/>.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <paramref name="value"/> is not convex.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.#ctor(DigitalRune.Geometry.IGeometricObject,DigitalRune.Geometry.IGeometricObject)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape"/> class from two
            geometric objects.
            </summary>
            <param name="objectA">The geometric object A.</param>
            <param name="objectB">The geometric object B.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <paramref name="objectA"/> is not convex.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <paramref name="objectB"/> is not convex.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.CheckShapes">
            <summary>
            Checks if the child shapes are convex.
            </summary>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <see cref="P:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.ObjectA"/> is not convex.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <see cref="P:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.ObjectB"/> is not convex.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.OnChildPoseChanged(System.Object,System.EventArgs)">
            <summary>
            Called when child pose was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiDifferenceShape.OnChildShapeChanged(System.Object,DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <summary>
            Called when child shape was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.MinkowskiSumShape">
            <summary>
            Represents the <i>Minkowski Sum</i> of two geometric objects.
            </summary>
            <remarks>
            <para>
            This shape is defined as the <i>Minkowski Sum</i> of two geometric objects A and B: A + B.
            The shapes of A and B must be of type <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.MinkowskiSumShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point.</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space). 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.MinkowskiSumShape.ObjectA">
            <summary>
            Gets or sets the first <see cref="T:DigitalRune.Geometry.IGeometricObject"/>.
            </summary>
            <value>The first <see cref="T:DigitalRune.Geometry.IGeometricObject"/>.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <paramref name="value"/> is not convex.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.MinkowskiSumShape.ObjectB">
            <summary>
            Gets or sets the second <see cref="T:DigitalRune.Geometry.GeometricObject"/>.
            </summary>
            <value>The second <see cref="T:DigitalRune.Geometry.GeometricObject"/>.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException"><paramref name="value"/> is not convex.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiSumShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiSumShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiSumShape"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiSumShape.#ctor(DigitalRune.Geometry.IGeometricObject,DigitalRune.Geometry.IGeometricObject)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiSumShape"/> class from two geometric
            objects.
            </summary>
            <param name="objectA">The first geometric object.</param>
            <param name="objectB">The second geometric object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="objectB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <paramref name="objectA"/> is not convex.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <paramref name="objectB"/> is not convex.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiSumShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiSumShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiSumShape.CheckShapes">
            <summary>
            Checks if the child shapes are convex.
            </summary>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <see cref="P:DigitalRune.Geometry.Shapes.MinkowskiSumShape.ObjectA"/> is not convex.
            </exception>
            <exception cref="T:DigitalRune.Geometry.GeometryException">
            <see cref="P:DigitalRune.Geometry.Shapes.MinkowskiSumShape.ObjectB"/> is not convex.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiSumShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiSumShape.OnChildPoseChanged(System.Object,System.EventArgs)">
            <summary>
            Called when child pose was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.MinkowskiSumShape.OnChildShapeChanged(System.Object,DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <summary>
            Called when child shape was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Geometry.Shapes"/> namespace provides geometric primitives.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.OrthographicViewVolume">
            <summary>
            Represents an orthographic view volume.
            </summary>
            <remarks>
            The <see cref="T:DigitalRune.Geometry.Shapes.OrthographicViewVolume"/> class is designed to model the view volume of a 
            orthographic camera: The observer is looking from the origin along the negative z-axis. The 
            x-axis points to the right and the y-axis points upwards. <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Near"/> and 
            <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Far"/> specify the distance from the origin (observer) to the near and 
            far clip planes (<see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Near"/> &lt; <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Far"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.OrthographicViewVolume.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point.</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.OrthographicViewVolume.FieldOfViewX">
            <summary>
            Gets the horizontal field of view (always <see cref="F:System.Single.NaN"/>).
            </summary>
            <value>The horizontal field of view (always <see cref="F:System.Single.NaN"/>).</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.OrthographicViewVolume.FieldOfViewY">
            <summary>
            Gets the vertical field of view (always <see cref="F:System.Single.NaN"/>).
            </summary>
            <value>The vertical field of view (always <see cref="F:System.Single.NaN"/>).</value>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.OrthographicViewVolume"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.OrthographicViewVolume"/> class using default 
            settings.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.OrthographicViewVolume"/> class as a symmetric
            view volume.
            </summary>
            <param name="width">The width of the view volume at the near clip plane.</param>
            <param name="height">The height of the view volume at the near clip plane.</param>
            <param name="near">The distance to the near clip plane.</param>
            <param name="far">The distance to the far clip plane.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="height"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="near"/> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="near"/> is greater than or equal to <paramref name="far"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.OrthographicViewVolume"/> class as an 
            asymmetric, off-center view volume.
            </summary>
            <param name="left">The minimum x-value of the view volume at the near clip plane.</param>
            <param name="right">The maximum x-value of the view volume at the near clip plane.</param>
            <param name="bottom">The minimum y-value of the view volume at the near clip plane.</param>
            <param name="top">The maximum y-value of the view volume at the near clip plane.</param>
            <param name="near">The distance to the near clip plane.</param>
            <param name="far">The distance to the far clip plane.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="bottom"/> is greater than or equal to <paramref name="top"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="near"/> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="near"/> is greater than or equal to <paramref name="far"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>
            A support point regarding the given direction.
            </returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>
            A support point regarding the given direction.
            </returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.GetVolume">
            <overloads>
            <summary>
            Gets the volume of this shape.
            </summary>
            </overloads>
            
            <summary>
            Gets the volume of this shape.
            </summary>
            <returns>The volume of this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this shape.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used.</param>
            <returns>The volume of this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.OrthographicViewVolume.Update">
            <summary>
            Updates the shape.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.PerspectiveViewVolume">
            <summary>
            Represents a perspective view volume (frustum).
            </summary>
            <remarks>
            <para>
            A perspective view volume is a frustum. A frustum is a portion of a pyramid that lies between 
            two cutting planes.
            </para>
            <para>
            The <see cref="T:DigitalRune.Geometry.Shapes.PerspectiveViewVolume"/> class is designed to model the view volume of a 
            perspective camera: The observer is looking from the origin along the negative z-axis. The 
            x-axis points to the right and the y-axis points upwards. <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Near"/> and 
            <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Far"/> are positive values that specify the distance from the origin 
            (observer) to the near and far clip planes 
            (<see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Near"/> ≤ <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Far"/>).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point.</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.FieldOfViewX">
            <summary>
            Gets the horizontal field of view.
            </summary>
            <value>The horizontal field of view.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.FieldOfViewY">
            <summary>
            Gets the vertical field of view.
            </summary>
            <value>The vertical field of view.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PerspectiveViewVolume"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PerspectiveViewVolume"/> class using default 
            settings.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PerspectiveViewVolume"/> class with the given
            field of view and depth.
            </summary>
            <param name="fieldOfViewY">The vertical field of view.</param>
            <param name="aspectRatio">The aspect ratio (width / height).</param>
            <param name="near">The distance to the near clip plane.</param>
            <param name="far">The distance to the far clip plane.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fieldOfViewY"/> is not between 0 and π radians (0° and 180°),
            <paramref name="aspectRatio"/> is negative or 0, <paramref name="near"/> is negative or 0,
            or <paramref name="far"/> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="near"/> is greater than or equal to <paramref name="far"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>
            A support point regarding the given direction.
            </returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetVolume">
            <overloads>
            <summary>
            Gets the volume of this shape.
            </summary>
            </overloads>
            
            <summary>
            Gets the volume of this shape.
            </summary>
            <returns>The volume of this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this shape.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used.</param>
            <returns>The volume of this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.Update">
            <summary>
            Updates the shape.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.SetFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Sets the dimensions of the frustum to the specified field of view.
            </summary>
            </overloads>
            
            <summary>
            Sets the dimensions of the frustum to the specified field of view and near/far values.
            </summary>
            <param name="fieldOfViewY">The vertical field of view.</param>
            <param name="aspectRatio">The aspect ratio (width / height).</param>
            <param name="near">The distance to the near clip plane.</param>
            <param name="far">The distance to the far clip plane.</param>
            <remarks>
            This method creates a symmetric frustum.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fieldOfViewY"/> is not between 0 and π radians (0° and 180°),
            <paramref name="aspectRatio"/> is negative or 0, <paramref name="near"/> is negative or 0,
            or <paramref name="far"/> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="near"/> is greater than or equal to <paramref name="far"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.SetFieldOfView(System.Single,System.Single)">
            <summary>
            Sets the dimensions of the frustum to the specified field of view.
            </summary>
            <param name="fieldOfViewY">The vertical field of view.</param>
            <param name="aspectRatio">The aspect ratio (width / height).</param>
            <remarks>
            This method creates a symmetric frustum.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fieldOfViewY"/> is not between 0 and π radians (0° and 180°), or
            <paramref name="aspectRatio"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetFieldOfViewX(System.Single,System.Single)">
            <summary>
            Converts the vertical field of view of a symmetric frustum to a horizontal field of view.
            </summary>
            <param name="fieldOfViewY">The vertical field of view in radians.</param>
            <param name="aspectRatio">The aspect ratio (width / height).</param>
            <returns>The horizontal field of view in radians.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fieldOfViewY"/> is not between 0 and π radians (0° and 180°), or 
            <paramref name="aspectRatio"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetFieldOfViewY(System.Single,System.Single)">
            <summary>
            Converts a horizontal field of view of a symmetric frustum to a vertical field of view.
            </summary>
            <param name="fieldOfViewX">The horizontal field of view in radians.</param>
            <param name="aspectRatio">The aspect ratio.</param>
            <returns>The vertical field of view in radians.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fieldOfViewX"/> is not between 0 and π radians (0° and 180°), or
            <paramref name="aspectRatio"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetExtent(System.Single,System.Single)">
            <summary>
            Gets the extent of the frustum at the given distance.
            </summary>
            <param name="fieldOfView">The field of view in radians.</param>
            <param name="distance">The distance at which the extent is calculated.</param>
            <returns>The extent of the view volume at the given distance.</returns>
            <remarks>
            <para>
            To calculate the width of the frustum the horizontal field of view must be specified.
            To calculate the height of the frustum the vertical field of view needs to be specified.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fieldOfView"/> is not between 0 and π radians (0° and 180°), or
            <paramref name="distance"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetWidthAndHeight(System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Converts a field of view of a symmetric frustum to width and height.
            </summary>
            <param name="fieldOfViewY">The vertical field of view in radians.</param>
            <param name="aspectRatio">The aspect ratio (width / height).</param>
            <param name="distance">
            The distance at which <paramref name="width"/> and <paramref name="height"/> are calculated.
            </param>
            <param name="width">
            The width of the view volume at the specified <paramref name="distance"/>.
            </param>
            <param name="height">
            The height of the view volume at the specified <paramref name="distance"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fieldOfViewY"/> is not between 0 and π radians (0° and 180°), 
            <paramref name="aspectRatio"/> is negative or 0, or <paramref name="distance"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PerspectiveViewVolume.GetFieldOfView(System.Single,System.Single)">
            <summary>
            Gets the field of view from a frustum with the given extent.
            </summary>
            <param name="extent">
            The extent of the frustum at the specified <paramref name="distance"/>.
            </param>
            <param name="distance">The distance.</param>
            <returns>The field of view for the given extent.</returns>
            <remarks>
            To get the horizontal field of view the horizontal extent (x direction) needs to be 
            specified. To get the vertical field of view the vertical extent (y direction) needs to be
            specified.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="extent"/> is negative, or <paramref name="distance"/> is negative or 0.
            </exception>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.Plane">
            <summary>
            Defines a plane.
            </summary> 
            <remarks>
            <para>
            This is a lightweight structure. To define a plane shape for <see cref="T:DigitalRune.Geometry.IGeometricObject"/>
            use <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/>.
            </para>
            <para>
            A plane can be described by a plane equation: <i>a * x + b * y + c * z = d</i>, where 
            <i>(x, y, z)</i> is a point on the plane and <i>(a, b, c)</i> is the <see cref="F:DigitalRune.Geometry.Shapes.Plane.Normal"/>
            vector. <i>d</i> is the "plane constant", which is equal to the distance from the origin if
            the normal is normalized.
            </para>
            <para>
            Two <see cref="T:DigitalRune.Geometry.Shapes.Plane"/>s are considered as equal if <see cref="F:DigitalRune.Geometry.Shapes.Plane.Normal"/> and 
            <see cref="F:DigitalRune.Geometry.Shapes.Plane.DistanceFromOrigin"/> are equal.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Plane.Normal">
            <summary>
            The normalized, outward pointing normal vector.
            </summary>
            <remarks>
            This vector points away from solid half-space into the empty half-space.
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Plane.DistanceFromOrigin">
            <summary>
            The distance of the plane from the origin (also known as the "plane constant").
            </summary>
            <remarks>
            <para>
            This value is the plane constant d from the plane equation <i>a * x + b * y + c * z = d</i>.
            If the <see cref="F:DigitalRune.Geometry.Shapes.Plane.Normal"/> is normalized, then this value is the distance from the plane
            point nearest to the origin projected onto the normal vector. This distance can be negative
            to signify a negative plane offset.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <overloads>
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Plane"/>.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Plane"/> from normal vector and distance to the 
            origin.
            </summary>
            <param name="normal">
            The normalized, outward pointing normal vector of the plane. 
            </param>
            <param name="distanceFromOrigin">
            The distance from the origin.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Plane"/> from three points.
            </summary>
            <param name="point0">A point on the plane.</param>
            <param name="point1">A point on the plane.</param>
            <param name="point2">A point on the plane.</param>
            <remarks>
            <para>
            This constructor creates a <see cref="T:DigitalRune.Geometry.Shapes.Plane"/> from three points in the plane. The points 
            must be ordered counter-clockwise. The front-face (which points into the empty half-space) 
            is defined through the counter-clockwise order of the points.
            </para>
            <para>
            The result is undefined if the points lie on a line.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Plane"/> from normal vector and a point on the 
            plane.
            </summary>    
            <param name="normal">
            The normalized, outward pointing normal vector of the plane.
            </param>
            <param name="pointOnPlane">A point on the plane.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.#ctor(DigitalRune.Geometry.Shapes.PlaneShape)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Plane"/> from a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/>.
            </summary>
            <param name="planeShape">
            The <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> from which normal vector and distance from origin are copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="planeShape"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.Normalize">
            <summary>
            Normalizes the plane.
            </summary>
            <remarks>
            <para>
            Most operations require a plane to be normalized, i.e. the normal must be a unit vector. But
            certain operations may return a general plane which is not normalized. In these cases this
            method can be called to re-normalize the plane.
            </para>
            <para>
            Normalizing a plane means that the <see cref="F:DigitalRune.Geometry.Shapes.Plane.Normal"/> and <see cref="F:DigitalRune.Geometry.Shapes.Plane.DistanceFromOrigin"/>
            are multiplied by the same scale factor to get a normalized plane normal.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.TryNormalize">
            <summary>
            Tries to normalizes the plane.
            </summary>
            <returns>
            <see langword="true"/> if the plane was normalized; otherwise, <see langword="false"/> if
            the plane could not be normalized. (The length of the normal is numerically zero.)
            </returns>
            <inheritdoc cref="M:DigitalRune.Geometry.Shapes.Plane.Normalize"/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.Equals(System.Object)">
            <overloads>
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.Equals(DigitalRune.Geometry.Shapes.Plane)">
            <summary>
            Determines whether the specified <see cref="T:DigitalRune.Geometry.Shapes.Plane"/> is equal to the current 
            <see cref="T:DigitalRune.Geometry.Shapes.Plane"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.op_Equality(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Geometry.Shapes.Plane)">
            <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Plane"/>s are equal.
            </summary>
            <param name="plane1">The first <see cref="T:DigitalRune.Geometry.Shapes.Plane"/>.</param>
            <param name="plane2">The second <see cref="T:DigitalRune.Geometry.Shapes.Plane"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Geometry.Shapes.Plane"/>s are equal; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.op_Inequality(DigitalRune.Geometry.Shapes.Plane,DigitalRune.Geometry.Shapes.Plane)">
            <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Plane"/>s are different.
            </summary>
            <param name="plane1">The first <see cref="T:DigitalRune.Geometry.Shapes.Plane"/>.</param>
            <param name="plane2">The second <see cref="T:DigitalRune.Geometry.Shapes.Plane"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Geometry.Shapes.Plane"/>s are different; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.Scale(DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Applies a scaling to the <see cref="T:DigitalRune.Geometry.Shapes.Plane"/>.
            </summary>
            <param name="scale">The scale.</param>
            <exception cref="T:System.NotSupportedException">
            <paramref name="scale"/> is a non-uniform scaling. Non-uniform scaling of planes is not 
            supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.ToWorld(DigitalRune.Geometry.Pose@)">
            <summary>
            Transforms the <see cref="T:DigitalRune.Geometry.Shapes.Plane"/> from local space to world space by applying a 
            <see cref="T:DigitalRune.Geometry.Pose"/>.
            </summary>
            <param name="pose">The pose (position and orientation).</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Plane.ToLocal(DigitalRune.Geometry.Pose@)">
            <summary>
            Transforms the <see cref="T:DigitalRune.Geometry.Shapes.Plane"/> from world space to a local space by applying the inverse
            of a <see cref="T:DigitalRune.Geometry.Pose"/>.
            </summary>
            <param name="pose">The pose (position and orientation).</param>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.PlaneShape">
            <summary>
            Represents a plane.
            </summary>
            <remarks>
            <para>
            This class can be used if an <see cref="T:DigitalRune.Geometry.IGeometricObject"/> with a plane shape is needed. Use
            the <see cref="T:DigitalRune.Geometry.Shapes.Plane"/> structure instead if you need a lightweight representation of a plane
            (avoids allocating memory on the heap).
            </para>
            <para>
            A plane shape divides the world into two half-spaces. The negative half-space is the solid
            volume of this shape. The plane <see cref="P:DigitalRune.Geometry.Shapes.PlaneShape.Normal"/> is stored normalized and points into the
            positive half-space (which is not part of the shape).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.PlaneShape.Normal">
            <summary>
            Gets or sets the outward pointing normal vector.
            </summary>
            <value>The outward pointing normal vector. Must be normalized.</value>
            <remarks>
            This vector points away from the volume of this shape.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is not normalized.</exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.PlaneShape.DistanceFromOrigin">
            <summary>
            Gets or sets the distance of the plane from the origin (also known as the "plane constant").
            </summary>
            <value>The distance from the origin.</value>
            <remarks>
            This value is the distance from the plane point nearest to the origin projected onto the 
            normal vector. This distance can be negative to signify a negative plane offset.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.PlaneShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.PlaneShape.MeshSize">
            <summary>
            Gets or sets the size of the mesh that represents a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/>.
            </summary>
            <value>The size of the mesh.</value>
            <remarks>
            See <see cref="M:DigitalRune.Geometry.Shapes.PlaneShape.OnGetMesh(System.Single,System.Int32)"/> for more information.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> class.
            </summary>
            <remarks>
            Creates a plane which lies in the xz-plane and <see cref="P:DigitalRune.Geometry.Shapes.PlaneShape.Normal"/> points in y-axis 
            direction.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> class from a normal vector and
            the distance from the origin.
            </summary>
            <param name="normal">
            The outward pointing normal vector of the plane. Must be normalized.
            </param>
            <param name="distanceFromOrigin">The distance from the origin.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="normal"/> is not normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> class from three points.
            </summary>
            <param name="point0">A point on the plane.</param>
            <param name="point1">A point on the plane.</param>
            <param name="point2">A point on the plane.</param>
            <remarks>
            This constructor creates a <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> from three points in the plane. The
            points must be ordered counter-clockwise. The front-face (which points into the empty
            half-space) is defined through the counter-clockwise order of the points.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="point0"/>, <paramref name="point1"/>, and <paramref name="point2"/> do not 
            form a valid triangle.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> class.
            </summary>
            <param name="normal">
            The outward pointing normal vector of the plane. Must be normalized.</param>
            <param name="pointOnPlane">A point on the plane.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="normal"/> is not normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.#ctor(DigitalRune.Geometry.Shapes.Plane)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PlaneShape"/> class.
            </summary>
            <param name="plane">
            The plane from which normal vector and distance from origin are copied.
            </param>
            <exception cref="T:System.ArgumentException">The plane normal is not normalized.</exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this plane.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used</param>
            <returns>Positive infinity (<see cref="F:System.Single.PositiveInfinity"/>)</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PlaneShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
            <remarks>
            This method creates a triangle mesh that represents a square lying in the plane. The square
            has an edge length of <see cref="P:DigitalRune.Geometry.Shapes.PlaneShape.MeshSize"/>.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.PointShape">
            <summary>
            Represents a point.
            </summary>
            <remarks>
            <para>
            A point is like a sphere where the radius is zero.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.PointShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point - same as <see cref="P:DigitalRune.Geometry.Shapes.PointShape.Position"/>.</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space). 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.PointShape.Position">
            <summary>
            Gets or sets the position (in the local coordinate system).
            </summary>
            <value>The position.</value>
            <remarks>
            This position vector is the offset of the point from the origin in the local coordinate 
            system.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PointShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PointShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PointShape"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PointShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PointShape"/> class with the given position.
            </summary>
            <param name="position">The position (in the local coordinate system).</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PointShape.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.PointShape"/> class with the given coordinates.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="z">The z position.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PointShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PointShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PointShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PointShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PointShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PointShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this shape.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used</param>
            <returns>0</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PointShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
            <remarks>
            This method returns a new mesh with a single degenerate triangle that represents the point.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.PointShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.Ray">
            <summary>
            Defines a ray.
            </summary> 
            <remarks>
            <para>
            This is a lightweight structure. To define a ray shape for an <see cref="T:DigitalRune.Geometry.IGeometricObject"/>
            use <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/>.
            </para>
            <para>
            Two <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>s are considered as equal if <see cref="F:DigitalRune.Geometry.Shapes.Ray.Origin"/>, 
            <see cref="F:DigitalRune.Geometry.Shapes.Ray.Direction"/> and <see cref="F:DigitalRune.Geometry.Shapes.Ray.Length"/> are equal.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Ray.Origin">
            <summary>
            The origin of the ray.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Ray.Direction">
            <summary>
            The normalized direction of the ray.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Ray.Length">
            <summary>
            The finite length of the ray.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Ray.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <overloads>
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Line"/> with the given origin and direction.
            </summary>
            <param name="origin">The origin.</param>
            <param name="direction">The direction.</param>
            <param name="length">The finite length.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Ray.#ctor(DigitalRune.Geometry.Shapes.RayShape)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Ray"/> from a <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/>.
            </summary>
            <param name="rayShape">
            The <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> from which origin and direction are copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rayShape"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Ray.Equals(System.Object)">
            <overloads>
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Ray.Equals(DigitalRune.Geometry.Shapes.Ray)">
            <summary>
            Determines whether the specified <see cref="T:DigitalRune.Geometry.Shapes.Ray"/> is equal to the current 
            <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Ray.op_Equality(DigitalRune.Geometry.Shapes.Ray,DigitalRune.Geometry.Shapes.Ray)">
            <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>s are equal.
            </summary>
            <param name="ray1">The first <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>.</param>
            <param name="ray2">The second <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>s are equal; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Ray.op_Inequality(DigitalRune.Geometry.Shapes.Ray,DigitalRune.Geometry.Shapes.Ray)">
            <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>s are different.
            </summary>
            <param name="ray1">The first <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>.</param>
            <param name="ray2">The second <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>s are different; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Ray.Scale(DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Applies a scaling to the <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>.
            </summary>
            <param name="scale">The scale.</param>
            <exception cref="T:System.NotSupportedException">
            <paramref name="scale"/> is a non-uniform scaling. Non-uniform scaling of rays is not 
            supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Ray.ToWorld(DigitalRune.Geometry.Pose@)">
            <summary>
            Transforms the <see cref="T:DigitalRune.Geometry.Shapes.Ray"/> from local space to world space by applying a 
            <see cref="T:DigitalRune.Geometry.Pose"/>.
            </summary>
            <param name="pose">The pose (position and orientation).</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Ray.ToLocal(DigitalRune.Geometry.Pose@)">
            <summary>
            Transforms the <see cref="T:DigitalRune.Geometry.Shapes.Ray"/> from world space to local space by applying the inverse of 
            a <see cref="T:DigitalRune.Geometry.Pose"/>.
            </summary>
            <param name="pose">The pose (rotation and translation).</param>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.RayShape">
            <summary>
            Represents a ray, which can be used for ray casting.
            </summary>
            <remarks>
            <para>
            This class can be used if an <see cref="T:DigitalRune.Geometry.IGeometricObject"/> with a ray shape is needed. Use
            the <see cref="T:DigitalRune.Geometry.Shapes.Ray"/> structure instead if you need a lightweight representation of a ray
            (avoids allocating memory on the heap).
            </para>
            <para>
            In contrast to a real ray, a <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> object has a finite length! Infinite rays 
            should not be used because finite rays are faster and produce less numerical problems.
            </para>
            <para>
            <strong>Important:</strong> Do not put rays into composite shapes (for example 
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>). If a composite shape collides with another object, all contacts
            of this object pair are merged into a single <see cref="T:DigitalRune.Geometry.Collisions.ContactSet"/>. Thus, ray hits of child
            rays of the composite shape are "merged" with normal contacts of other child shapes; the 
            result is undefined.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.RayShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point.</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space). 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.RayShape.Origin">
            <summary>
            Gets or sets the origin of the ray.
            </summary>
            <value>The origin of the ray.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.RayShape.Direction">
            <summary>
            Gets or sets the direction of the ray.
            </summary>
            <value>The direction of the ray. Must be normalized.</value>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is not a normalized.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.RayShape.Length">
            <summary>
            Gets or sets the finite length.
            </summary>
            <value>The finite length.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is ≤ 0 or infinite.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.RayShape.StopsAtFirstHit">
            <summary>
            Gets or sets a value indicating whether the ray stops at the first (closest) object that was
            hit.
            </summary>
            <value>
            <see langword="true"/> if the ray stops at the closest hit object; otherwise, 
            <see langword="false"/> if the ray shoots through objects and hits all objects along the 
            ray.
            </value>
            <remarks>
            Note: This property is currently not applied if a ray is contained in a 
            <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RayShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> class.
            </summary>
            <remarks>
            Creates a ray starting at the origin shooting into the positive x-axis direction and with a
            length of 100.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RayShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Line"/> class with the given origin, 
            direction and length.
            </summary>
            <param name="origin">The origin.</param>
            <param name="direction">The direction.</param>
            <param name="length">The finite length.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="direction"/> is not normalized.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="length"/> is ≤ 0 or infinite.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RayShape.#ctor(DigitalRune.Geometry.Shapes.Ray)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/> class from a <see cref="T:DigitalRune.Geometry.Shapes.Ray"/>.
            </summary>
            <param name="ray">The ray.</param>
            <exception cref="T:System.ArgumentException">
            The direction of <paramref name="ray"/> is not normalized.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="ray"/> is ≤ 0 or infinite.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RayShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RayShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RayShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RayShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RayShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RayShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this shape.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used</param>
            <returns>0</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RayShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
            <remarks>
            This creates a mesh with a single degenerate triangle that represents the ray.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RayShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.RectangleShape">
            <summary>
            Represents a rectangle in the xy-plane centered at the origin.
            </summary>
            <remarks>
            The front face is visible from the positive z half-space.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.RectangleShape.Extent">
            <summary>
            Gets or sets the extent vector.
            </summary>
            <value>The extent of the rectangle (<see cref="P:DigitalRune.Geometry.Shapes.RectangleShape.WidthX"/>, <see cref="P:DigitalRune.Geometry.Shapes.RectangleShape.WidthY"/>).</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A component of <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.RectangleShape.InnerPoint">
            <summary>
            Gets an inner point (center of rectangle).
            </summary>
            <value>The center of the rectangle (0, 0, 0).</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.RectangleShape.WidthX">
            <summary>
            Gets or sets the width along the x-axis.
            </summary>
            <value>The width along the x-axis.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.RectangleShape.WidthY">
            <summary>
            Gets or sets the width along the y-axis.
            </summary>
            <value>The width along the y-axis.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.RectangleShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.RectangleShape"/> class.
            </summary>
            <remarks>
            Creates an empty rectangle with a size of 0.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.#ctor(DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.RectangleShape"/> class with the given extent.
            </summary>
            <param name="extent">The extent vector.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.RectangleShape"/> class with the given width
            and height.
            </summary>
            <param name="widthX">The width along the x-axis.</param>
            <param name="widthY">The width along the y-axis.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthX"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="widthY"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>
            A support point regarding the given direction.
            </returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this shape.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used</param>
            <returns>0</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.RectangleShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.ScaledConvexShape">
            <summary>
            Represents a scaled convex shape.
            </summary>
            <remarks>
            <para>
            This shape can be used to scale any <see cref="T:DigitalRune.Geometry.Shapes.ConvexShape"/> stored in the property
            <see cref="P:DigitalRune.Geometry.Shapes.ScaledConvexShape.Shape"/>. For performance reasons this shape should not be used if the child shape
            can be scaled directly. For example, if a box should be scaled, it is more efficient to change
            the box extent (e.g. <see cref="P:DigitalRune.Geometry.Shapes.BoxShape.WidthX"/>) directly.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ScaledConvexShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point.</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space). 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ScaledConvexShape.Scale">
            <summary>
            Gets or sets the scale factor.
            </summary>
            <value>
            The scale factors for scaling in x, y and z. The default value is (1, 1, 1)
            which means "no scaling".
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ScaledConvexShape.Shape">
            <summary>
            Gets or sets the convex shape that is scaled.
            </summary>
            <value>
            The convex shape that is scaled. The default shape is a simple <see cref="T:DigitalRune.Geometry.Shapes.PointShape"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ScaledConvexShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ScaledConvexShape"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.#ctor(DigitalRune.Geometry.Shapes.ConvexShape)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ScaledConvexShape"/> class from two geometric
            objects.
            </summary>
            <param name="shape">The convex shape that should be scaled.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shape"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.#ctor(DigitalRune.Geometry.Shapes.ConvexShape,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.ScaledConvexShape"/> class from two geometric
            objects.
            </summary>
            <param name="shape">The convex shape that should be scaled.</param>
            <param name="scale">The scale of the convex shape.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="shape"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.GetVolume(System.Single,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ScaledConvexShape.OnChildShapeChanged(System.Object,DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <summary>
            Called when child shape was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.Shape">
            <summary>
            Defines the volume of an <see cref="T:DigitalRune.Geometry.IGeometricObject"/>.
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> defines the space that is occupied by an object. <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> is
            the common base class of all types of shapes in DigitalRune Geometry.
            </para>
            <para>
            Shapes are defined in the local coordinate system of the owning object (also known as local 
            space, object space or body space). Shapes are abstracted from other properties such as color,
            material, or even position and orientation. Most shapes contain only properties that define 
            their dimensions ("width", "height", "radius", etc.). For example, a <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/> 
            consists only of a radius that defines the size of the sphere. The sphere is centered in the 
            local coordinate system.
            </para>
            <para>
            However, some shapes like the <see cref="T:DigitalRune.Geometry.Shapes.PointShape"/>, the <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape"/> or the
            <see cref="T:DigitalRune.Geometry.Shapes.RayShape"/>, are defined using position and orientation vectors ("Vertex0", 
            "Origin", "Direction", etc.). Thus, they can be also positioned in local coordinate space. 
            </para>
            <para>
            An <see cref="T:DigitalRune.Geometry.IGeometricObject"/> is used to position an object in the world coordinate space.
            An <see cref="T:DigitalRune.Geometry.IGeometricObject"/> consists of a <see cref="P:DigitalRune.Geometry.IGeometricObject.Shape"/>, a
            <see cref="P:DigitalRune.Geometry.IGeometricObject.Scale"/> and a <see cref="P:DigitalRune.Geometry.IGeometricObject.Pose"/> (= position and
            orientation).
            </para>
            <para>
            <strong>Cloning:</strong> Shapes are cloneable. The method <see cref="M:DigitalRune.Geometry.Shapes.Shape.Clone"/> creates a deep 
            copy of the shape - except when documented otherwise (see description of derived classes).
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Shape.Empty">
            <summary>
            An immutable shape that is infinitely small and does not collide with other shapes.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Shape.Infinite">
            <summary>
            An immutable shape that is infinitely large and collides with every other shape
            (except <see cref="T:DigitalRune.Geometry.Shapes.EmptyShape"/>s).
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.Shape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point.</value>
            <remarks>
            This property returns a random point of the shape. If possible, a point in the center of the 
            shape is returned. If not possible, a surface point is returned.
            </remarks>
        </member>
        <member name="E:DigitalRune.Geometry.Shapes.Shape.Changed">
            <summary>
            Occurs when the shape was changed.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Shape.Clone">
            <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> that is a clone (deep copy) of the current instance.
            </summary>
            <returns>
            A new <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> that is a clone (deep copy) of the current instance.
            </returns>
            <remarks>
            <strong>Notes to Inheritors:</strong> The method <see cref="M:DigitalRune.Geometry.Shapes.Shape.Clone"/> calls 
            <see cref="M:DigitalRune.Geometry.Shapes.Shape.CreateInstanceCore"/> which is responsible for creating a new instance of the 
            <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> derived class and <see cref="M:DigitalRune.Geometry.Shapes.Shape.CloneCore(DigitalRune.Geometry.Shapes.Shape)"/> to create a copy of the 
            current instance. Classes that derive from <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> need to implement 
            <see cref="M:DigitalRune.Geometry.Shapes.Shape.CreateInstanceCore"/> and <see cref="M:DigitalRune.Geometry.Shapes.Shape.CloneCore(DigitalRune.Geometry.Shapes.Shape)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Shape.CreateInstance">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            This is a protected method, and the actual object-specific implementations for the behavior 
            are dependent on the override implementation of the <see cref="M:DigitalRune.Geometry.Shapes.Shape.CreateInstanceCore"/> method, 
            which this method calls internally. 
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot clone shape. A derived class does not implement <see cref="M:DigitalRune.Geometry.Shapes.Shape.CreateInstanceCore"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Shape.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> 
            derived class. 
            </summary>
            <returns>The new instance.</returns>
            <remarks>
            <para>
            Do not call this method directly (except when calling base in an implementation). This 
            method is called internally by the <see cref="M:DigitalRune.Geometry.Shapes.Shape.Clone"/> method whenever a new instance of the
            <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> is created. 
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> derived class must implement 
            this method. A typical implementation is to simply call the default constructor and return 
            the result. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Shape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>.
            </summary>
            <param name="sourceShape">The object to clone.</param>
            <remarks>
            <strong>Notes to Inheritors:</strong> Every <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> derived class must implement 
            this method. A typical implementation is to call <c>base.CloneCore(this)</c> to copy all 
            properties of the base class and then copy all properties of the derived class.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Shape.GetAabb">
            <overloads>
            <summary>
            Computes the axis-aligned bounding box (AABB) for this shape.
            </summary>
            </overloads>
            
            <summary>
            Computes the axis-aligned bounding box (AABB) for this shape in local space.
            </summary>
            <returns>The AABB of the shape positioned in local space.</returns>
            <remarks>
            <para>
            The AABB is axis-aligned to the axes of the local space.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Shape.GetAabb(DigitalRune.Geometry.Pose)">
            <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given <see cref="T:DigitalRune.Geometry.Pose"/>.
            </summary>
            <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose"/> of the shape. This pose defines how the shape should be positioned
            in world space.
            </param>
            <returns>The AABB of the shape positioned in world space.</returns>
            <remarks>
            <para>
            The AABB is axis-aligned to the axes of the world space (or the parent coordinate space).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Shape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <summary>
            Computes the axis-aligned bounding box (AABB) for this shape positioned in world space using
            the given scale and <see cref="T:DigitalRune.Geometry.Pose"/>.
            </summary>
            <param name="scale">
            The scale factor by which the shape should be scaled. The scaling is applied in the shape's
            local space before the pose is applied.
            </param>
            <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose"/> of the shape. This pose defines how the shape should be positioned in
            world space.
            </param>
            <returns>The AABB of the shape positioned in world space.</returns>
            <remarks>
            The AABB is axis-aligned to the axes of the world space (or the parent coordinate space).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Shape.GetMesh(System.Single,System.Int32)">
            <summary>
            Gets a mesh that represents this shape.
            </summary>
            <param name="relativeDistanceThreshold">The relative distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
            <remarks>
            <para>
            If a mesh can exactly represent the shape, an exact mesh is returned (for example
            for a <see cref="T:DigitalRune.Geometry.Shapes.BoxShape"/>). Otherwise a mesh with a relative error will be returned
            (for example for a <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/>). The relative error is less than
            <paramref name="relativeDistanceThreshold"/> % of the largest AABB extent. If the
            mesh is generated by an iterative algorithm, no more than <paramref name="iterationLimit"/>
            iterations are performed. If the <paramref name="iterationLimit"/> is reached first, the
            returned mesh will have a higher relative error.
            </para>
            <para>
            This method calls <see cref="M:DigitalRune.Geometry.Shapes.Shape.OnGetMesh(System.Single,System.Int32)"/> which must be implemented in derived classes.
            See <see cref="M:DigitalRune.Geometry.Shapes.Shape.OnGetMesh(System.Single,System.Int32)"/> for more information about the generated mesh.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="relativeDistanceThreshold"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="iterationLimit"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Shape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
            <remarks>
            <para>
            <strong>Notes to Inheritors:</strong> The parameters are guaranteed to be in a valid range -
            no parameter validation necessary.
            </para>
            <para>
            If an exact mesh can be returned, this mesh should be generated. If the shape can only be
            approximated, the absolute distance error should be less than 
            <paramref name="absoluteDistanceThreshold"/> or at max <paramref name="iterationLimit"/> 
            iterations should be performed for iterative mesh generation algorithms.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Shape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this shape.
            </summary>
            <param name="relativeError">
            The desired relative error for approximations (in the range [0, 1]). For example, use the 
            value 0.01 to get a maximal error of about 1%.
            </param>
            <param name="iterationLimit">
            The iteration limit. Must be greater than or equal to 0. For most cases a small value like 4 
            is appropriate. 
            </param>
            <returns>The volume of this shape.</returns>
            <remarks>
            <para>
            If the volume can be computed with an exact formula, then the exact volume is returned. But 
            for some shapes an approximate volume is computed. For approximated volumes 
            <paramref name="relativeError"/> defines the desired relative error and if the volume is 
            computed by an iterative algorithm, no more than <paramref name="iterationLimit"/>
            iterations are performed. If the <paramref name="iterationLimit"/> is reached first, the
            returned mesh will have a higher relative error. 
            </para>
            <para>
            Currently, <paramref name="relativeError"/> is proportional to the error of the approximated
            volume. But it is not guaranteed that the relative error between the approximated volume
            and the exact volume is less than <paramref name="relativeError"/>. It is only guaranteed 
            that a smaller <paramref name="relativeError"/> value leads to a more accurate 
            approximation.
            </para>
            <para>
            Remember: To compute the volume of a scaled shape, you can compute the volume of the 
            unscaled shape and multiply the result with the scaling factors: 
            </para>
            <para>
            <i>volume<sub>scaled</sub> = volume<sub>unscaled</sub> * scale<sub>X</sub> * scale<sub>Y</sub> * scale<sub>Z</sub></i>
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> The base implementation of this method computes the
            volume from the mesh of the shape (see <see cref="M:DigitalRune.Geometry.Shapes.Shape.GetMesh(System.Single,System.Int32)"/>). And if 
            <paramref name="iterationLimit"/> is 0, the volume of the axis-aligned bounding box (see 
            <see cref="M:DigitalRune.Geometry.Shapes.Shape.GetAabb(DigitalRune.Geometry.Pose)"/>) is used. Derived classes should override this method to 
            compute a more accurate volume or to provide a faster implementation.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="relativeError"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="iterationLimit"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Shape.OnChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <summary>
            Raises the <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed"/> event.
            </summary>
            <param name="eventArgs">
            <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> object that provides the arguments for the event.
            </param>
            <remarks>
            <strong>Notes to Inheritors:</strong> When overriding <see cref="M:DigitalRune.Geometry.Shapes.Shape.OnChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)"/> in a derived
            class, be sure to call the base class's <see cref="M:DigitalRune.Geometry.Shapes.Shape.OnChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)"/> method so that registered
            delegates receive the event.
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs">
            <summary>
            Provides arguments for an <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed"/> event of a <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs.Feature">
            <summary>
            Gets the index of the shape feature that has changed.
            </summary>
            <value>The index of the shape feature that has changed. The default value is -1.</value>
            <remarks>
            This property indicates which feature of the <see cref="T:DigitalRune.Geometry.Shapes.Shape"/> has changed. This value is
            an index that depends on the type of <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>. For most shapes, this value is not
            used (in this cases it is -1). See the shape documentation of individual shapes (for 
            example, <see cref="T:DigitalRune.Geometry.Shapes.CompositeShape"/> or <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/>) to find out how it
            is used.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> class from being 
            created.
            </summary>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs.Create">
            <overloads>
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> class. (This method reuses a 
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            </overloads>
            
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> class. (This method reuses a 
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> class.
            </returns>
            <inheritdoc cref="M:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs.Create(System.Int32)"/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs.Create(System.Int32)">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> class with a given feature. 
            (This method reuses a previously recycled instance or allocates a new instance if 
            necessary.)
            </summary>
            <param name="feature">The index of the shape feature that has changed.</param>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs.Recycle">
            <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> class.
            </summary>
            <remarks>
            <para>
            This method resets this instance and returns it to a resource pool if resource pooling is 
            enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>).
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.SphereShape">
            <summary>
            Represents a sphere.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.SphereShape.InnerPoint">
            <summary>
            Gets an inner point (center of sphere).
            </summary>
            <value>The center of the sphere (0, 0, 0).</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.SphereShape.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.SphereShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/> class.
            </summary>
            <remarks>
            Creates an empty sphere (radius = 0).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.SphereShape.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.SphereShape"/> class with the given radius.
            </summary>
            <param name="radius">The radius.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="radius"/> is negative.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.SphereShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.SphereShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.SphereShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.SphereShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>A support point regarding the given direction.</returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.SphereShape.GetVolume">
            <overloads>
            <summary>
            Gets the volume of this shape.
            </summary>
            </overloads>
            
            <summary>
            Gets the volume of this sphere.
            </summary>
            <returns>The volume of this sphere.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.SphereShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this sphere.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used.</param>
            <returns>The volume of this sphere.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.SphereShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.SphereShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.TestMinkowskiSumShape">
            <summary>
            Represents a lightweight <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiSumShape"/> implementation without events.
            (Internal use only.)
            </summary>
            <remarks>
            This <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiSumShape"/> implementation is used by collision algorithms to get a
            temporary <see cref="T:DigitalRune.Geometry.Shapes.MinkowskiSumShape"/> instance for tests. This shape cannot be used for
            normal <see cref="T:DigitalRune.Geometry.IGeometricObject"/> shapes!
            </remarks>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.TransformedShape">
            <summary>
            Represents a transformed shape.
            </summary>
            <remarks> 
            <para>
            This shape can be used to add a local transformation (scaling, rotation and translation) to a 
            <see cref="T:DigitalRune.Geometry.Shapes.Shape"/>. The actual shape and the transformation is stored in 
            <see cref="P:DigitalRune.Geometry.Shapes.TransformedShape.Child"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TransformedShape.Child">
            <summary>
            Gets or sets the child <see cref="T:DigitalRune.Geometry.IGeometricObject"/>.
            </summary>
            <value>
            The child <see cref="T:DigitalRune.Geometry.IGeometricObject"/>. Must not be <see langword="null"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TransformedShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point.</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape"/> class.
            </summary>
            <remarks>
            <see cref="P:DigitalRune.Geometry.Shapes.TransformedShape.Child"/> is initialized with a <see cref="P:DigitalRune.Geometry.Shapes.TransformedShape.Child"/>
            with an <see cref="T:DigitalRune.Geometry.Shapes.EmptyShape"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.#ctor(DigitalRune.Geometry.IGeometricObject)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TransformedShape"/> class from the given 
            geometric object.
            </summary>
            <param name="child">The geometric object (pose + shape).</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="child"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.GetVolume(System.Single,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.OnChildPoseChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the shape of a child geometric object was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.OnChildShapeChanged(System.Object,DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
            <summary>
            Called when the shape of a child geometric object was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">
            The <see cref="T:DigitalRune.Geometry.Shapes.ShapeChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TransformedShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.Triangle">
            <summary>
            Defines a triangle.
            </summary>
            <remarks>
            <para>
            This is a lightweight structure. To define a triangle shape for <see cref="T:DigitalRune.Geometry.IGeometricObject"/>
            use <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape"/>.
            </para>
            <para>
            Two <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/>s are considered as equal if they contain the same vertices in the
            same order.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Triangle.Vertex0">
            <summary>
            The first vertex.
            </summary>
            <value>The first vertex.</value>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Triangle.Vertex1">
            <summary>
            The second vertex.
            </summary>
        </member>
        <member name="F:DigitalRune.Geometry.Shapes.Triangle.Vertex2">
            <summary>
            The third vertex.
            </summary>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.Triangle.Aabb">
            <summary>
            Gets the axis-aligned bounding box (AABB) for this triangle.
            </summary>
            <value>
            The AABB of the triangle.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.Triangle.Normal">
            <summary>
            Gets the normal.
            </summary>
            <value>The normal.</value>
            <remarks>
            If the triangle is degenerate, an arbitrary normalized vector is returned.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.Triangle.Item(System.Int32)">
            <summary>
            Gets or sets the vertex at the specified index.
            </summary>
            <param name="index">The index of the triangle point.</param>
            <value>The vertex with the given index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Triangle.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <overloads>
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/>.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/> from three points.
            </summary>
            <param name="vertex0">The first vertex.</param>
            <param name="vertex1">The second vertex.</param>
            <param name="vertex2">The third vertex.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Triangle.#ctor(DigitalRune.Geometry.Shapes.TriangleShape)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/> from a <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape"/>.
            </summary>
            <param name="triangleShape">
            The <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape"/> from which vertices are copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="triangleShape"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Triangle.Equals(System.Object)">
            <overloads>
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            </overloads>
            
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Triangle.Equals(DigitalRune.Geometry.Shapes.Triangle)">
            <summary>
            Determines whether the specified <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/> is equal to the current 
            <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Triangle.op_Equality(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Geometry.Shapes.Triangle)">
            <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/>s are equal.
            </summary>
            <param name="triangle1">The first <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/>.</param>
            <param name="triangle2">The second <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/>s are equal; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Triangle.op_Inequality(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Geometry.Shapes.Triangle)">
            <summary>
            Tests if two <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/>s are different.
            </summary>
            <param name="triangle1">The first <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/>.</param>
            <param name="triangle2">The second <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/>.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/>s are different; otherwise 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Triangle.GetAabb(DigitalRune.Geometry.Pose)">
            <summary>
            Computes the axis-aligned bounding box (AABB) for this triangle positioned in world space
            using the given <see cref="T:DigitalRune.Geometry.Pose"/>.
            </summary>
            <param name="pose">
            The <see cref="T:DigitalRune.Geometry.Pose"/> of the shape. This pose defines how the shape should be positioned in
            world space.
            </param>
            <returns>The AABB of the shape positioned in world space.</returns>
            <remarks>
            <para>
            The AABB is axis-aligned to the axes of the world space (or the parent coordinate space).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Triangle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.Triangle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.TriangleMeshShape">
            <summary>
            Represents a shape defined by an <see cref="T:DigitalRune.Geometry.Meshes.ITriangleMesh"/>.
            </summary>
            <remarks>
            <para>
            <strong>One-sided and two-sided meshes:</strong> Per default, the collision detection treats
            the triangle mesh as one-sided (<see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.IsTwoSided"/> is <see langword="false"/>); that
            means, only the front side of a triangle is solid. If the collision detection is used in a
            physics simulation, then objects can pass through the back side of a triangle. 
            <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.IsTwoSided"/> can be set to <see langword="true"/> to treat the mesh as two-sided
            (double-sided). 
            </para>
            <para>
            <strong>Meshes are hollow:</strong> Further, meshes are not treated as solid volumes. For
            example if a triangle mesh represents a sphere and another object is inside the sphere but 
            does not touch any triangles, then no collision is reported. 
            </para>
            <para>
            <strong>Spatial Partitioning:</strong> A spatial partitioning method (see 
            <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Partition"/> can be used to improve runtime performance if the <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Mesh"/>
            consists of a lot of triangles. A spatial partition improves the collision detection speed at
            the cost of additional memory. If <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Partition"/> is <see langword="null"/>, no
            spatial partitioning method is used (which is the default). If a spatial partitioning scheme
            should be used, the property <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Partition"/> must be set to a 
            <see cref="T:DigitalRune.Geometry.Partitioning.ISpatialPartition`1"/> instance. The items in the spatial partition will be the
            indices of the mesh triangles. The triangle mesh shape will automatically fill and update the
            spatial partition. Following example shows how a complex triangle mesh shape can be improved
            by using an AABB tree:
            <code lang="csharp">
            <![CDATA[
            myTriangleMeshShape.Partition = new AabbTree<int>();
            ]]>
            </code>
            </para>
            <para>
            <strong>Shape Features:</strong> If a <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/> is involved in a 
            <see cref="T:DigitalRune.Geometry.Collisions.Contact"/> the shape feature property (<see cref="P:DigitalRune.Geometry.Collisions.Contact.FeatureA"/> and
            <see cref="P:DigitalRune.Geometry.Collisions.Contact.FeatureB"/>) contains the index of the triangle that causes the 
            <see cref="T:DigitalRune.Geometry.Collisions.Contact"/>.
            </para>
            <para>
            <strong>Cloning:</strong> A <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/> can be cloned. The clone will 
            reference the same <see cref="T:DigitalRune.Geometry.Meshes.ITriangleMesh"/> (shallow copy)!
            If a <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Partition"/> is in use, the spatial partition will be cloned. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point.</value>
            <remarks>
            This method returns a random vertex of the triangle mesh.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Mesh">
            <summary>
            Gets or sets the triangle mesh.
            </summary>
            <value>The triangle mesh.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Partition">
            <summary>
            Gets or set the spatial partition used to improve the performance of geometric queries.
            </summary>
            <value>
            The spatial partition. Per default no spatial partition is used and this property is 
            <see langword="null"/>.
            </value>
            <remarks>
            The spatial partition stores only the indices of the <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Mesh"/>'s triangles. This
            property can be set to <see langword="null"/> to remove a spatial partition. If a spatial
            partition is set, the triangle mesh shape will automatically fill and update the spatial
            partition.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.EnableContactWelding">
            <summary>
            Gets or sets a value indicating whether contact welding is enabled.
            </summary>
            <value>
            <see langword="true"/> if contact welding is enabled; otherwise, <see langword="false"/>.
            The default is <see langword="false"/>.
            </value>
            <remarks>
            Contact welding is a process that improves collision detection contacts at the edges of
            triangles. Additional information is stored with the shape to support welding. If the mesh
            is only used for <see cref="F:DigitalRune.Geometry.Collisions.CollisionQueryType.Boolean"/> queries or for ray casting,
            contact welding is not needed and <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.EnableContactWelding"/> can be set to 
            <see langword="false"/>. Further, contact welding is not supported for two-sided meshes
            (see <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.IsTwoSided"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.TriangleNeighbors">
            <summary>
            Gets or sets the list of triangle neighbors.
            </summary>
            <value>The triangle neighbors.</value>
            <remarks>
            This list contains 3 entries for each triangle - one entry per edge. Each entry is the index
            of the neighbor triangle. For example the entry TriangleNeighbors[i * 3 + 1] is the index of
            the triangle that is the neighbor of Mesh.GetTriangle(i). And these two triangles touch at
            the edge opposite vertex 1.
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.IsTwoSided">
            <summary>
            Gets or sets a value indicating whether the mesh is two-sided.
            </summary>
            <value>
            <see langword="true"/> if this mesh is two-sided; otherwise, <see langword="false"/>.
            The default is <see langword="false"/>.
            </value>
            <remarks>
            Per default, the collision detection treats the triangle mesh as one-sided 
            (<see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.IsTwoSided"/> is <see langword="false"/>); that means, only the front side of a
            triangle is solid. If the collision detection is used in a physics simulation, then objects
            can pass through the back side of a triangle. <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.IsTwoSided"/> can be set to 
            <see langword="true"/> to treat the mesh as two-sided (double-sided). 
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Internals">
            <exclude/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/> class.
            </summary>
            <remarks>
            The shape is initialized with a new empty <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.#ctor(DigitalRune.Geometry.Meshes.ITriangleMesh)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/> class from the given 
            triangle mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mesh"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.#ctor(DigitalRune.Geometry.Meshes.ITriangleMesh,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/> class from the given
            triangle mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="enableContactWelding"> 
            If set to <see langword="true"/> contact welding is enabled; otherwise, the shape will not
            use contact welding. See <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.EnableContactWelding"/> for more information.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mesh"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.#ctor(DigitalRune.Geometry.Meshes.ITriangleMesh,System.Boolean,DigitalRune.Geometry.Partitioning.ISpatialPartition{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleMeshShape"/> class from the given
            triangle mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="enableContactWelding"> 
            If set to <see langword="true"/> contact welding is enabled; otherwise, the shape will not
            use contact welding. See <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.EnableContactWelding"/> for more information.
            </param>
            <param name="partition">
            The spatial partition (see <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Partition"/>). Can be <see langword="null"/> if no 
            partition should be used.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mesh"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.SetMesh(DigitalRune.Geometry.Meshes.ITriangleMesh)">
            <summary>
            Sets the triangle mesh. (For use by the content pipeline only.)
            </summary>
            <param name="mesh">The triangle mesh.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.SetPartition(DigitalRune.Geometry.Partitioning.ISpatialPartition{System.Int32})">
            <summary>
            Sets the spatial partition. (For use by the content pipeline only.)
            </summary>
            <param name="partition">The spatial partition.</param>
            <remarks>
            This method is used internally to directly set the spatial partition. The spatial partition
            might already be initialized and should not be invalidated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.Invalidate">
            <overloads>
            <summary>
            Invalidates the triangle mesh or a part of it.
            </summary>
            </overloads>
            
            <summary>
            Invalidates the triangle mesh.
            </summary>
            <remarks>
            This method must be called if the data stored in <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Mesh"/> is changed. This method
            updates the <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Partition"/> and raises the <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed"/> event by
            calling <see cref="M:DigitalRune.Geometry.Shapes.Shape.OnChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)"/>. This method also invalidates the mesh topology -
            which means that contact welding information is recomputed if contact welding is enabled
            (see <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.EnableContactWelding"/>).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.Invalidate(System.Boolean)">
            <summary>
            Invalidates the triangle mesh.
            </summary>
            <param name="invalidateTopology">
            if set to <see langword="true"/> the mesh topology is invalidated.
            </param>
            <remarks>
            <para>
            This method must be called if the position of a triangle stored in <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Mesh"/> is
            changed. This method updates the <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Partition"/> and raises the
            <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed"/> event by calling <see cref="M:DigitalRune.Geometry.Shapes.Shape.OnChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)"/>.
            </para>
            <para>
            If the mesh topology has changed, <paramref name="invalidateTopology"/> must be set to
            <see langword="true"/>. The topology has changed if triangle neighbor relationships have
            changed. If each triangle has the same neighbor triangles as before and only the vertices
            were moved, <paramref name="invalidateTopology"/> can be <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.Invalidate(System.Int32,System.Boolean)">
            <summary>
            Invalidates the whole triangle mesh or a single triangle.
            </summary>
            <param name="triangleIndex">
            Index of the triangle. Can be -1 to invalidate the whole mesh.
            </param>
            <param name="invalidateTopology">
            If set to <see langword="true"/> the mesh topology is invalidated.
            </param>
            <remarks>
            <para>
            This method must be called if the position of a triangle stored in <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Mesh"/> is
            changed. This method updates the <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Partition"/> and raises the
            <see cref="E:DigitalRune.Geometry.Shapes.Shape.Changed"/> event by calling <see cref="M:DigitalRune.Geometry.Shapes.Shape.OnChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)"/>.
            </para>
            <para>
            If the mesh topology has changed, <paramref name="invalidateTopology"/> must be set to
            <see langword="true"/>. The topology has changed if triangle neighbor relationships have
            changed. If each triangle has the same neighbor triangles as before and only the vertices
            were moved, <paramref name="invalidateTopology"/> can be <see langword="false"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="triangleIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.GetVolume">
            <overloads>
            <summary>
            Gets the volume of this shape.
            </summary>
            </overloads>
            
            <summary>
            Computes the enclosed volume of the mesh.
            </summary>
            <returns>The enclosed volume of the mesh.</returns>
            <remarks>
            This method assumes that the mesh is a closed mesh without holes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Computes the enclosed volume of the mesh.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used.</param>
            <returns>The enclosed volume of the mesh.</returns>
            <remarks>
            This method assumes that the mesh is a closed mesh without holes.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
            <remarks>
            A deep copy of the <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.Mesh"/> is returned.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleMeshShape.ComputeTriangleNeighbors">
            <summary>
            Computes the <see cref="P:DigitalRune.Geometry.Shapes.TriangleMeshShape.TriangleNeighbors"/>.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.TriangleShape">
            <summary>
            Represents a triangle.
            </summary>
            <remarks>
            <para>
            This class can be used if an <see cref="T:DigitalRune.Geometry.IGeometricObject"/> with a triangle shape is needed.
            Use the <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/> structure instead if you need a lightweight representation of a
            triangle (avoids allocating memory on the heap).
            </para>
            <para>
            The triangle front face is where the vertices are ordered counter-clockwise.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TriangleShape.InnerPoint">
            <summary>
            Gets an inner point.
            </summary>
            <value>An inner point.</value>
            <remarks>
            This point is a "deep" inner point of the shape (in local space).
            </remarks>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TriangleShape.Normal">
            <summary>
            Gets the normal.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TriangleShape.Item(System.Int32)">
            <summary>
            Gets or sets the vertex at the specified index.
            </summary>
            <param name="index">The index of the triangle point.</param>
            <value>The vertex with the given index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TriangleShape.Vertex0">
            <summary>
            Gets or sets the first vertex.
            </summary>
            <value>The first vertex.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TriangleShape.Vertex1">
            <summary>
            Gets or sets the second vertex.
            </summary>
            <value>The second vertex.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.TriangleShape.Vertex2">
            <summary>
            Gets or sets the third vertex.
            </summary>
            <value>The third vertex.</value>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape"/> class.
            </summary>
            <remarks>
            Creates a triangle where all vertices are at the origin (0, 0, 0).
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape"/> class from the given vertices.
            </summary>
            <param name="vertex0">The first vertex.</param>
            <param name="vertex1">The second vertex.</param>
            <param name="vertex2">The third vertex.</param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.#ctor(DigitalRune.Geometry.Shapes.Triangle)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Geometry.Shapes.TriangleShape"/> class from a 
            <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/>.
            </summary>
            <param name="triangle">
            The <see cref="T:DigitalRune.Geometry.Shapes.Triangle"/> structure from which vertices are copied.
            </param>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.CreateInstanceCore">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.CloneCore(DigitalRune.Geometry.Shapes.Shape)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.GetAabb(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.GetSupportPoint(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given direction.
            </summary>
            <param name="direction">
            The direction for which to get the support point. The vector does not need to be normalized.
            The result is undefined if the vector is a zero vector.
            </param>
            <returns>
            A support point regarding the given direction.
            </returns>
            <remarks>
            <para>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.GetSupportPointNormalized(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Gets a support point for a given normalized direction vector.
            </summary>
            <param name="directionNormalized">
            The normalized direction vector for which to get the support point.
            </param>
            <returns>
            A support point regarding the given direction.
            </returns>
            <remarks>
            A support point regarding a direction is an extreme point of the shape that is furthest away
            from the center regarding the given direction. This point is not necessarily unique.
            </remarks>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.GetVolume(System.Single,System.Int32)">
            <summary>
            Gets the volume of this shape.
            </summary>
            <param name="relativeError">Not used.</param>
            <param name="iterationLimit">Not used</param>
            <returns>0</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.OnGetMesh(System.Single,System.Int32)">
            <summary>
            Called when a mesh should be generated for the shape.
            </summary>
            <param name="absoluteDistanceThreshold">The absolute distance threshold.</param>
            <param name="iterationLimit">The iteration limit.</param>
            <returns>The triangle mesh for this shape.</returns>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.TriangleShape.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Geometry.Shapes.ViewVolume">
            <summary>
            Represents a view volume (base implementation).
            </summary>
            <para>
            The <see cref="T:DigitalRune.Geometry.Shapes.ViewVolume"/> class is designed to model the view volume of a camera: The 
            observer is looking from the origin along the negative z-axis. The x-axis points to the right 
            and the y-axis points upwards. <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Near"/> and <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Far"/> 
            specify the distance from the origin (observer) to the near and far clip planes 
            (<see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Near"/> &lt; <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Far"/>).
            </para>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Left">
            <summary>
            Gets or sets the minimum x-value of the view volume at the near clip plane.
            </summary>
            <value>The minimum x-value of the view volume at the near clip plane.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Right">
            <summary>
            Gets or sets the maximum x-value of the view volume at the near clip plane.
            </summary>
            <value>The maximum x-value of the view volume at the near clip plane.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Bottom">
            <summary>
            Gets or sets the minimum y-value of the view volume at the near clip plane.
            </summary>
            <value>The minimum y-value of the view volume at the near clip plane.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Top">
            <summary>
            Gets or sets the maximum y-value of the view volume at the near clip plane.
            </summary>
            <value>The maximum y-value of the view volume at the near clip plane.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Near">
            <summary>
            Gets or sets the distance to the near clip plane. 
            </summary>
            <value>The distance to the near clip plane.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Far">
            <summary>
            Gets or sets the distance to the far clip plane. 
            </summary>
            <value>The distance to the far clip plane.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Width">
            <summary>
            Gets the width of the view volume at the near clip plane.
            </summary>
            <value>The width of the view volume at the near clip plane.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Height">
            <summary>
            Gets the height of the view volume at the near clip plane.
            </summary>
            <value>The height of the view volume at the near clip plane.</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.Depth">
            <summary>
            Gets the depth of the view volume (= <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Far"/> - <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Near"/>).
            </summary>
            <value>The depth of the view volume (= <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Far"/> - <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Near"/>).</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.AspectRatio">
            <summary>
            Gets the aspect ratio (width / height).
            </summary>
            <value>The aspect ratio (<see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Width"/> / <see cref="P:DigitalRune.Geometry.Shapes.ViewVolume.Height"/>).</value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.FieldOfViewX">
            <summary>
            Gets the horizontal field of view.
            </summary>
            <value>
            The horizontal field of view, or <see cref="F:System.Single.NaN"/> if this is a orthographic view 
            volume.
            </value>
        </member>
        <member name="P:DigitalRune.Geometry.Shapes.ViewVolume.FieldOfViewY">
            <summary>
            Gets the vertical field of view.
            </summary>
            <value>
            The vertical field of view, or <see cref="F:System.Single.NaN"/> if this is a orthographic view 
            volume.
            </value>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ViewVolume.SetWidthAndHeight(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Sets the width and height of the view volume to the specified values.
            </summary>
            </overloads>
            
            <summary>
            Sets the width and height of the view volume to the specified size and depth.
            </summary>
            <param name="width">The width of the view volume at the near clip plane.</param>
            <param name="height">The height of the view volume at the near clip plane.</param>
            <param name="near">The distance to the near clip plane.</param>
            <param name="far">The distance to the far clip plane.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="near"/> is greater than or equal to <paramref name="far"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ViewVolume.SetWidthAndHeight(System.Single,System.Single)">
            <summary>
            Sets the width and height of the view volume to the specified size.
            </summary>
            <param name="width">The width of the view volume at the near clip plane.</param>
            <param name="height">The height of the view volume at the near clip plane.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ViewVolume.Set(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Sets the dimensions of the view volume.
            </summary>
            </overloads>
            
            <summary>
            Sets the dimensions of the view volume (including depths).
            </summary>
            <param name="left">The minimum x-value of the view volume at the near clip plane.</param>
            <param name="right">The maximum x-value of the view volume at the near clip plane.</param>
            <param name="bottom">The minimum y-value of the view volume at the near clip plane.</param>
            <param name="top">The maximum y-value of the view volume at the near clip plane.</param>
            <param name="near">The distance to the near clip plane.</param>
            <param name="far">The distance to the far clip plane.</param>
            <remarks>
            This method can be used to define an asymmetric, off-center view volume.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> is greater than or equal to <paramref name="right"/>, 
            <paramref name="bottom"/> is greater than or equal to <paramref name="top"/>, or
            <paramref name="near"/> is greater than or equal to <paramref name="far"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ViewVolume.Set(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the dimensions of the view volume.
            </summary>
            <param name="left">The minimum x-value of the view volume at the near clip plane.</param>
            <param name="right">The maximum x-value of the view volume at the near clip plane.</param>
            <param name="bottom">The minimum y-value of the view volume at the near clip plane.</param>
            <param name="top">The maximum y-value of the view volume at the near clip plane.</param>
            <remarks>
            This method can be used to define an asymmetric, off-center view volume.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> is greater than or equal to <paramref name="right"/>, or
            <paramref name="bottom"/> is greater than or equal to <paramref name="top"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Geometry.Shapes.ViewVolume.Update">
            <summary>
            Updates the shape.
            </summary>
        </member>
        <member name="T:DigitalRune.Geometry.TestGeometricObject">
            <summary>
            A lightweight <see cref="T:DigitalRune.Geometry.IGeometricObject"/> implementation without events. (For internal use 
            only.)
            </summary>
            <remarks>
            This <see cref="T:DigitalRune.Geometry.IGeometricObject"/> implementation is used by collision algorithms to get a 
            temporary <see cref="T:DigitalRune.Geometry.IGeometricObject"/> instance for tests. Since, the events are disabled, 
            this class cannot be used for normal <see cref="T:DigitalRune.Geometry.Collisions.CollisionObject"/>s. Not using events improves 
            performance drastically when geometric objects are exchanged.
            </remarks>
        </member>
    </members>
</doc>
