<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DigitalRune.Graphics</name>
  </assembly>
  <members>
    <member name="T:DigitalRune.Graphics.AmbientLight">
      <summary>
            Represents an ambient light (indirect light).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.AmbientLight.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.AmbientLight" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.AmbientLight.CloneCore(DigitalRune.Graphics.Light)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.AmbientLight.Color">
      <summary>
            Gets or sets the RGB color of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.AmbientLight.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.AmbientLight.GetIntensity(System.Single)">
      <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
      <param name="distance">The distance from the light.</param>
      <returns>
            A value representing the (red, green and blue) light intensity at the specified distance. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.AmbientLight.HdrScale">
      <summary>
            Gets or sets the HDR scale of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.AmbientLight.HemisphericAttenuation">
      <summary>
            Gets or sets the hemispheric attenuation factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.AmbientLight.Intensity">
      <summary>
            Gets or sets the intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.AmbientLight.Shape">
      <summary>
            Gets or sets the shape of the light volume.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.BasicCloudMap">
      <summary>
            Provides a user-defined cloud texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.BasicCloudMap.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.BasicCloudMap</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Billboard">
      <summary>
            Represents an oriented, textured quad used for drawing impostors, particles, text, and other 
            effects.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Billboard.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Billboard" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Billboard.Alpha">
      <summary>
            Gets or sets the opacity of the billboard.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Billboard.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Billboard" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Billboard" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Billboard.CloneCore(DigitalRune.Graphics.Billboard)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Billboard" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Billboard.Color">
      <summary>
            Gets or sets the tint color of the billboard.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Billboard.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Billboard" />
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Billboard.Name">
      <summary>
            Gets or sets the name of this billboard.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Billboard.Orientation">
      <summary>
            Gets or sets the orientation of the billboard.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.BillboardNormal">
      <summary>
            Defines the normal vector of a billboard.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.BillboardNormal.ViewPlaneAligned">
      <summary>
            The billboard normal is parallel to the view vector of the camera, but points in the 
            opposite direction (= towards the camera). The billboard is always parallel to the view
            plane (screen) and rotates when the orientation of the camera changes.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.BillboardNormal.ViewpointOriented">
      <summary>
            The billboard normal vector points from the center of the billboard towards the camera 
            (viewpoint). The billboard always faces the camera and rotates when the position of the
            camera changes.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.BillboardNormal.Custom">
      <summary>
        <para>
            The billboard normal is specified explicitly.
            </para>
        <para>
            The billboard normal is specified differently depending on the type of billboard:
            </para>
        <list type="bullet">
          <item>
            <term>Billboards</term>
            <description>
            The normal vector of a regular billboard is given by the <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode" />. The
            normal vector is the local z-axis (0, 0, 1) of the scene node.
            </description>
          </item>
          <item>
            <term>Particles</term>
            <description>
            The normal vector of particles is defined by a particle parameter. The 
            <see cref="T:DigitalRune.Particles.ParticleSystem" /> needs to have a uniform or varying particle parameter called 
            "Normal".
            </description>
          </item>
        </list>
      </summary>
    </member>
    <member name="T:DigitalRune.Graphics.BillboardOrientation">
      <summary>
            Defines the orientation of a billboard.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.BillboardOrientation.#ctor(DigitalRune.Graphics.BillboardNormal,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.BillboardOrientation" /> struct.
            </summary>
      <param name="normal">The normal vector that is used for rendering the billboard.</param>
      <param name="isAxisInViewSpace">
        <see langword="true" /> if the axis vector is given in view space; otherwise, 
            <see langword="false" /> if the axis vector is given in world space.
            </param>
      <param name="isAxisFixed">
        <see langword="true" /> if the billboard axis vector is the fixed axis and the normal vector 
            is adjusted; otherwise, <see langword="false" /> if the normal vector is fixed and the axis
            vector is adjusted.
            </param>
    </member>
    <member name="F:DigitalRune.Graphics.BillboardOrientation.AxialViewPlaneAligned">
      <summary>
            Settings for axial billboards parallel to the view plane.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.BillboardOrientation.AxialViewpointOriented">
      <summary>
            Settings for axial billboards oriented towards the viewer.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.BillboardOrientation.Equals(DigitalRune.Graphics.BillboardOrientation)">
      <summary>
            Determines whether the specified <see cref="T:DigitalRune.Graphics.BillboardOrientation" /> is equal to this 
            instance.
            </summary>
      <param name="other">
            The <see cref="T:DigitalRune.Graphics.BillboardOrientation" /> to compare with this instance.
            </param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:DigitalRune.Graphics.BillboardOrientation" /> is equal to this 
            instance; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.BillboardOrientation.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to this instance; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.BillboardOrientation.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures 
            like a hash table. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.BillboardOrientation.IsAxisFixed">
      <summary>
            Gets a value indicating whether the billboard normal or the billboard axis is the fixed 
            axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.BillboardOrientation.IsAxisInViewSpace">
      <summary>
            Gets a value indicating whether the billboard axis is given in view space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.BillboardOrientation.Normal">
      <summary>
            Gets a value indicating which normal vector is used for rendering the billboard.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.BillboardOrientation.op_Equality(DigitalRune.Graphics.BillboardOrientation,DigitalRune.Graphics.BillboardOrientation)">
      <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>
        <see langword="true" /> if the objects are the same; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.BillboardOrientation.op_Inequality(DigitalRune.Graphics.BillboardOrientation,DigitalRune.Graphics.BillboardOrientation)">
      <summary>
            Compares two objects to determine whether they are different. 
            </summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>
        <see langword="true" /> if the objects are different; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.BillboardOrientation.ScreenAligned">
      <summary>
            Settings for screen-aligned billboards.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.BillboardOrientation.ViewPlaneAligned">
      <summary>
            Settings for view plane-aligned billboards.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.BillboardOrientation.ViewpointOriented">
      <summary>
            Settings for viewpoint-oriented billboards.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.BillboardOrientation.WorldOriented">
      <summary>
            Settings for billboards with a free orientation in world space.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Camera">
      <summary>
            Represents a camera that defines a view into the 3D scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Camera.#ctor(DigitalRune.Graphics.Projection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Camera" /> class with a given projection.
            </summary>
      <param name="projection">The projection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Camera.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Camera" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Camera" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Camera.CloneCore(DigitalRune.Graphics.Camera)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Camera" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Camera.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Camera" />
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Camera.LastProjection">
      <summary>
            Gets or sets the projection transformation of the last frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Camera.Name">
      <summary>
            Gets or sets the name of this camera.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Camera.Projection">
      <summary>
            Gets the projection.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.CascadedShadow">
      <summary>
            Defines a cascaded shadow that can be used for <see cref="T:DigitalRune.Graphics.DirectionalLight" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.CascadedShadow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CascadedShadow" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.CascadeSelection">
      <summary>
            Gets or sets the cascade selection mode.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.CascadedShadow.CloneCore(DigitalRune.Graphics.Shadow)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Shadow" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.CascadedShadow.ComputeSplitDistances(System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Computes the <see cref="P:DigitalRune.Graphics.CascadedShadow.Distances" /> for a <see cref="T:DigitalRune.Graphics.CascadedShadow" />.
            </summary>
      <param name="near">The camera near plane distance.</param>
      <param name="maxDistance">The maximum shadow distance.</param>
      <param name="numberOfCascades">The number of cascades (2, 3 or 4).</param>
      <param name="splitDistribution">
            The split distribution parameter in the range [0, 1]. If this value is 0, the camera frustum
            is split using a uniform splitting scheme (the camera frustum is split at regular
            intervals). If this value is 1, the camera frustum is split using a logarithmic splitting
            scheme. A value between 0 and 1 can be used to interpolate between uniform and logarithmic
            splitting.
            </param>
      <returns>The split distances, which can be assigned to <see cref="P:DigitalRune.Graphics.CascadedShadow.Distances" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfCascades" /> is greater than 4. Or,
            <paramref name="splitDistribution" /> is not in the range [0, 1].
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.CascadedShadow.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Shadow" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.DepthBias">
      <summary>
            Gets or sets the depth bias used to remove "surface acne".
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.DepthBiasOffset">
      <summary>
            Gets or sets the depth bias offset of each cascade used to remove surface acne.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.DepthBiasScale">
      <summary>
            Gets or sets the depth bias scale of each cascade used to remove surface acne.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.Distances">
      <summary>
            Gets or sets the cascade split distances.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.FadeOutDistance">
      <summary>
            Gets or sets the distance from the camera where the shadow starts to fade out.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.FadeOutRange">
      <summary>
            Gets or sets the relative distance over which shadows are faded out.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.FilterRadius">
      <summary>
            Gets or sets the filter radius.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.IsCascadeLocked">
      <summary>
            Gets or sets the flags which determine if a cascade is locked.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.JitterResolution">
      <summary>
            Gets or sets the jitter resolution (for jitter sampling).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.MaxDistance">
      <summary>
            Gets or sets the maximum distance from the camera up to which shadows are rendered. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.MinLightDistance">
      <summary>
            Gets or sets the minimal distance of the light projection to the camera frustum of a
            cascade.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.NormalOffset">
      <summary>
            Gets or sets the normal offset used to remove "surface acne".
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.NumberOfCascades">
      <summary>
            Gets or sets the number of cascades.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than 1 or greater than 4.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.NumberOfSamples">
      <summary>
            Gets or sets the number of filter samples.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.ShadowFog">
      <summary>
            Gets or sets the shadow factor that is used beyond the max shadow distance.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.ShadowMap">
      <summary>
            Gets or sets the shadow map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.SplitDistribution">
      <summary>
            Gets or sets the split distribution parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CascadedShadow.VisualizeCascades">
      <summary>
            Gets or sets a value indicating whether cascades are visualized for debugging.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.CieSkyParameters">
      <summary>
            Defines the parameters of the CIE sky luminance distribution.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.CieSkyParameters.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CieSkyParameters" /> struct.
            </summary>
      <param name="a">The parameter a.</param>
      <param name="b">The parameter b.</param>
      <param name="c">The parameter c.</param>
      <param name="d">The parameter d.</param>
      <param name="e">The parameter e.</param>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.A">
      <summary>The parameter a of the CIE Sky Model.</summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.B">
      <summary>The parameter b of the CIE Sky Model.</summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.C">
      <summary>The parameter c of the CIE Sky Model.</summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.D">
      <summary>The parameter d of the CIE Sky Model.</summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.E">
      <summary>The parameter e of the CIE Sky Model.</summary>
    </member>
    <member name="M:DigitalRune.Graphics.CieSkyParameters.Equals(DigitalRune.Graphics.CieSkyParameters)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> 
            parameter; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.CieSkyParameters.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to this instance; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.CieSkyParameters.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures 
            like a hash table. 
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.CieSkyParameters.op_Equality(DigitalRune.Graphics.CieSkyParameters,DigitalRune.Graphics.CieSkyParameters)">
      <summary>
            Compares two sets of <see cref="T:DigitalRune.Graphics.CieSkyParameters" />s to determine whether they are the same.
            </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>
        <see langword="true" /> if the instances are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.CieSkyParameters.op_Inequality(DigitalRune.Graphics.CieSkyParameters,DigitalRune.Graphics.CieSkyParameters)">
      <summary>
            Compares two sets of <see cref="T:DigitalRune.Graphics.CieSkyParameters" />s to determine whether they are 
            different.
            </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>
        <see langword="true" /> if the instances are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type1">
      <summary>
            CIE Standard Overcast Sky, steep luminance gradation towards zenith, azimuthal uniformity.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type10">
      <summary>
            Partly cloudy, with brighter circumsolar region.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type11">
      <summary>
            White-blue sky with distinct solar corona.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type12">
      <summary>
            CIE Standard Clear Sky, low illuminance turbidity.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type13">
      <summary>
            CIE Standard Clear Sky, polluted atmosphere.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type14">
      <summary>
            Cloudless turbid sky with broad solar corona.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type15">
      <summary>
            White-blue turbid sky with broad solar corona.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type2">
      <summary>
            Overcast, with steep luminance gradation and slight brightening towards the sun.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type3">
      <summary>
            Overcast, moderately graded with azimuthal uniformity.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type4">
      <summary>
            Overcast, moderately graded and slight brightening towards the sun.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type5">
      <summary>
            Sky of uniform luminance.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type6">
      <summary>
            Partly cloudy sky, no gradation towards zenith, slight brightening towards the sun.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type7">
      <summary>
            Partly cloudy sky, no gradation towards zenith, brighter circumsolar region.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type8">
      <summary>
            Partly cloudy sky, no gradation towards zenith, distinct solar corona.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.CieSkyParameters.Type9">
      <summary>
            Partly cloudy, with the obscured sun.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.CloudMap">
      <summary>
            Provides a cloud texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.CloudMap.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.CloudMap</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.CloudMap.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.CloudMap" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.CloudMap.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.CloudMap" /> class 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.CloudMap.Texture">
      <summary>
            Gets the cloud texture.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.CloudMapLayer">
      <summary>
            Defines a layer of a <see cref="T:DigitalRune.Graphics.CloudMap" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.CloudMapLayer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CloudMapLayer" /> class with default settings.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.CloudMapLayer.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Mathematics.Algebra.Matrix33F,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CloudMapLayer" /> struct.
            </summary>
      <param name="texture">The <see cref="P:DigitalRune.Graphics.CloudMapLayer.Texture" />.</param>
      <param name="textureMatrix">The <see cref="P:DigitalRune.Graphics.CloudMapLayer.TextureMatrix" />.</param>
      <param name="densityOffset">The <see cref="P:DigitalRune.Graphics.CloudMapLayer.DensityOffset" />.</param>
      <param name="densityScale">The <see cref="P:DigitalRune.Graphics.CloudMapLayer.DensityScale" />.</param>
      <param name="animationSpeed">The <see cref="P:DigitalRune.Graphics.CloudMapLayer.AnimationSpeed" />.</param>
    </member>
    <member name="P:DigitalRune.Graphics.CloudMapLayer.AnimationSpeed">
      <summary>
            Gets or sets the animation speed. (Only used if <see cref="P:DigitalRune.Graphics.CloudMapLayer.Texture" /> is 
            <see langword="null" /> - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CloudMapLayer.DensityOffset">
      <summary>
            Gets or sets the density offset that is added to the density of this 
            <see cref="T:DigitalRune.Graphics.CloudMapLayer" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CloudMapLayer.DensityScale">
      <summary>
            Gets or sets the density scale factor that is used to scale the density of this 
            <see cref="T:DigitalRune.Graphics.CloudMapLayer" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CloudMapLayer.Texture">
      <summary>
            Gets or sets the cloud texture that defines the cloud density. (Optional)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CloudMapLayer.TextureMatrix">
      <summary>
            Gets or sets the matrix used to transform the texture coordinates.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.ColorEncoding">
      <summary>
            Defines how a color value is encoded in a texel of a texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ColorEncoding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.ColorEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:DigitalRune.Graphics.ColorEncoding.LogLuv">
      <summary>
            LogLuv encoding of color values.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.ColorEncoding.Rgb">
      <summary>
            Linear (not encoded) RGB values.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.ColorEncoding.Rgbe">
      <summary>
            RGBE encoding of color values.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.ColorEncoding.Rgbm">
      <summary>
            RGBM encoding of color values with a maximum value of 50.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.ColorEncoding.SRgb">
      <summary>
            sRGB encoding of color values.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.CompositeFigure">
      <summary>
            Represents a figure that is composed of several figures.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.CompositeFigure.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CompositeFigure" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CompositeFigure.Children">
      <summary>
            Gets the children.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.CompositeShadow">
      <summary>
            Defines a shadow which combines several other <see cref="T:DigitalRune.Graphics.Shadow" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.CompositeShadow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CompositeShadow" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.CompositeShadow.CloneCore(DigitalRune.Graphics.Shadow)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Shadow" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.CompositeShadow.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Shadow" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.CompositeShadow.Shadows">
      <summary>
            Gets the list of shadows.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.CubeMapShadow">
      <summary>
            Defines an omnidirectional cube map shadow that can be used for <see cref="T:DigitalRune.Graphics.PointLight" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.CubeMapShadow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CubeMapShadow" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.CubeMapShadow.CloneCore(DigitalRune.Graphics.Shadow)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Shadow" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.CubeMapShadow.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Shadow" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.CubeMapShadow.DepthBias">
      <summary>
            Gets or sets the depth bias used to remove "surface acne".
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CubeMapShadow.DepthBiasOffset">
      <summary>
            Gets or sets the depth bias offset used to remove surface acne.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CubeMapShadow.DepthBiasScale">
      <summary>
            Gets or sets the depth bias scale used to remove surface acne.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CubeMapShadow.FilterRadius">
      <summary>
            Gets or sets the filter radius.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CubeMapShadow.JitterResolution">
      <summary>
            Gets or sets the jitter resolution (for jitter sampling).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CubeMapShadow.Near">
      <summary>
            Gets or sets the near plane distance for the shadow projection.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CubeMapShadow.NormalOffset">
      <summary>
            Gets or sets the normal offset used to remove "surface acne".
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CubeMapShadow.NumberOfSamples">
      <summary>
            Gets or sets the number of filter samples.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.CubeMapShadow.ShadowMap">
      <summary>
            Gets or sets the shadow map.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.DecalOptions">
      <summary>
            Defines options for rendering decals.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.DecalOptions.ProjectOnAll">
      <summary>
            The decal is applied to all types of geometry.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.DecalOptions.ProjectOnStatic">
      <summary>
            The decal is applied only to static geometry. (Only scene nodes where 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsStatic" /> is set will receive the decal.)
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.DelegateGraphicsScreen">
      <summary>
            A <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> that calls user-defined methods to update and render the 
            screen.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DelegateGraphicsScreen.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.DelegateGraphicsScreen" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="M:DigitalRune.Graphics.DelegateGraphicsScreen.#ctor(DigitalRune.Graphics.IGraphicsService,System.Action{DigitalRune.Graphics.GraphicsScreen,System.TimeSpan},System.Action{DigitalRune.Graphics.RenderContext})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.DelegateGraphicsScreen" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="updateCallback">
            The update callback method. (Can be <see langword="null" />.)
            </param>
      <param name="renderCallback">
            The render callback method. (Can be <see langword="null" />.)
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.DelegateGraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when <see cref="M:DigitalRune.Graphics.GraphicsScreen.Render(DigitalRune.Graphics.RenderContext)" /> is called.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.DelegateGraphicsScreen.OnUpdate(System.TimeSpan)">
      <summary>
            Called when <see cref="M:DigitalRune.Graphics.GraphicsScreen.Update(System.TimeSpan)" /> is called.
            </summary>
      <param name="deltaTime">The time that has elapsed since the last update.</param>
    </member>
    <member name="P:DigitalRune.Graphics.DelegateGraphicsScreen.RenderCallback">
      <summary>
            Gets or sets the render callback method.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DelegateGraphicsScreen.UpdateCallback">
      <summary>
            Gets or sets the update callback method.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.DirectionalLight">
      <summary>
            Represents a directional light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DirectionalLight.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.DirectionalLight" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DirectionalLight.CloneCore(DigitalRune.Graphics.Light)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.Color">
      <summary>
            Gets or sets the RGB color of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DirectionalLight.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.DiffuseIntensity">
      <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.DirectionalLight.GetIntensity(System.Single)">
      <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
      <param name="distance">The distance from the light.</param>
      <returns>
            A value representing the (red, green and blue) light intensity at the specified distance. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.HdrScale">
      <summary>
            Gets or sets the HDR scale of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.Shape">
      <summary>
            Gets or sets the shape of the light volume.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.SpecularIntensity">
      <summary>
            Gets or sets the specular intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.Texture">
      <summary>
            Gets or sets the texture which is projected by this directional light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.TextureOffset">
      <summary>
            Gets or sets the texture offset.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.DirectionalLight.TextureScale">
      <summary>
            Gets or sets the texture scale.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.EllipseFigure">
      <summary>
            Represents an ellipse in the xy plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.EllipseFigure.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.EllipseFigure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.EllipseFigure.IsFilled">
      <summary>
            Gets or sets a value indicating whether the ellipse is filled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.EllipseFigure.RadiusX">
      <summary>
            Gets or sets the radius of the ellipse in the x direction.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.EllipseFigure.RadiusY">
      <summary>
            Gets or sets the radius of the ellipse in the y direction.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Ephemeris">
      <summary>
            Computes the physically-based properties of sky objects like the sun and the moon.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Ephemeris.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Ephemeris" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Ephemeris.Altitude">
      <summary>
            Gets or sets the altitude (elevation) in meters above the mean sea level.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Ephemeris.EclipticToEquatorial">
      <summary>
            Gets the rotation matrix which converts directions from the ecliptic coordinate system to
            the equatorial coordinate system.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Ephemeris.EquatorialToGeographic">
      <summary>
            Gets the rotation matrix which converts directions from the equatorial coordinate system to
            the geographic coordinate system.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Ephemeris.EquatorialToWorld">
      <summary>
            Gets the transformation matrix which converts directions from the equatorial coordinate
            system to the world space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Ephemeris.ExtraterrestrialSunlight">
      <summary>
            Gets the extraterrestrial sunlight intensity based on NASA data.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Ephemeris.GetMoonlight(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3D,System.Single,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Computes the moonlight intensity.
            </summary>
      <param name="altitude">
            The altitude (elevation) of the observer's position in meters above the mean sea level.
            </param>
      <param name="turbidity">
            The turbidity, which measures how polluted the air is. The values should be in the range 
            [1.8, 20]. A turbidity of 2 describes a clear day whereas a turbidity of 20 represents thick
            haze. A commonly used value is 2.2.
            </param>
      <param name="moonPosition">The moon position in world space.</param>
      <param name="phaseAngle">
            The moon phase angle in radians in the range [0, 2π]. A new moon has a phase angle of 0. A 
            full moon has a phase angle of π. 
            </param>
      <param name="directMoonlight">The direct moonlight illuminance in [lux].</param>
      <param name="scatteredMoonlight">
            The scattered moonlight illuminance (= ambient light, indirect light or "skylight"
            contribution of the moon) in [lux].
            </param>
      <param name="sunDirection">The direction from the observer's position to the sun.</param>
      <param name="directSunlight">The direct sunlight illuminance in [lux].</param>
      <param name="scatteredSunlight">
            The scattered sunlight illuminance (= ambient light, indirect light or "skylight"
            contribution of the sun) in [lux].
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Ephemeris.GetSunlight(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Computes the sunlight intensity.
            </summary>
      <param name="altitude">
            The altitude (elevation) of the observer's position in meters above the mean sea level.
            </param>
      <param name="turbidity">
            The turbidity, which measures how polluted the air is. The values should be in the range 
            [1.8, 20]. A turbidity of 2 describes a clear day whereas a turbidity of 20 represents thick
            haze. A commonly used value is 2.2.
            </param>
      <param name="sunDirection">The direction from the observer's position to the sun.</param>
      <param name="directSunlight">The direct sunlight illuminance in [lux].</param>
      <param name="scatteredSunlight">
            The scattered sunlight illuminance (= ambient light, indirect light or "skylight"
            contribution of the sun) in [lux].
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.Ephemeris.Latitude">
      <summary>
            Gets or sets the latitude of the world space origin (using the Geographic coordinate space).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Ephemeris.Longitude">
      <summary>
            Gets or sets the longitude of the world space origin (using the Geographic coordinate space).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Ephemeris.MoonPhaseAngle">
      <summary>
            Gets the moon phase angle.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Ephemeris.MoonPhaseRelative">
      <summary>
            Gets the moon phase as a relative value.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Ephemeris.MoonPosition">
      <summary>
            Gets the moon position in world space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Ephemeris.SunDirectionRefracted">
      <summary>
            Gets the direction to the sun as seen from within the atmosphere considering optical 
            refraction.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Ephemeris.SunPosition">
      <summary>
            Gets the sun position in world space in meters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Ephemeris.Time">
      <summary>
            Gets or sets the date and time relative to Coordinated Universal Time (UTC).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Ephemeris.Update">
      <summary>
            Computes the derived values, like sun/moon positions, transformation matrices and light
            intensities. This method must be called when the location or time has changed.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Figure">
      <summary>
            Represents a drawing composed of lines and 2D shapes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Figure.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Figure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Figure.BoundingShape">
      <summary>
            Gets the collision shape for bounding volume tests and culling.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Figure.HitShape">
      <summary>
            Gets the collision shape for hit tests.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Figure.Invalidate">
      <summary>
            Invalidates cached render data. (Must be called when properties of a figure are changed.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Figure.MaxNumberOfIterations">
      <summary>
            Gets or sets the maximum number of iterations which are taken when flattening smooth curves.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Figure.Tolerance">
      <summary>
            Gets or sets the tolerance which is allowed when flattening smooth curves.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is zero or less than zero.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.FigureCollection">
      <summary>
            Manages a collection of child figures.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.FigureDataCollection`1">
      <summary>
            Manages a collection of items owned by a <see cref="T:DigitalRune.Graphics.Figure" />.
            </summary>
      <typeparam name="T">The type of items.</typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.FigureDataCollection`1.ClearItems">
      <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.FigureDataCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.FigureDataCollection`1" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> for <see cref="T:DigitalRune.Graphics.FigureDataCollection`1" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.FigureDataCollection`1.InsertItem(System.Int32,`0)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. 
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.FigureDataCollection`1.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:DigitalRune.Graphics.FigureDataCollection`1.SetItem(System.Int32,`0)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. 
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Fog">
      <summary>
            Represents fog.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Fog.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Fog" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Fog.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Fog" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Fog" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Fog.CloneCore(DigitalRune.Graphics.Fog)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Fog" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Fog.Color0">
      <summary>
            Gets or sets the color of the fog at <see cref="P:DigitalRune.Graphics.Fog.Height0" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Fog.Color1">
      <summary>
            Gets or sets the color of the fog at <see cref="P:DigitalRune.Graphics.Fog.Height1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Fog.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Fog" />
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Fog.Density">
      <summary>
            Gets or sets the density of the fog at a height of 0.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Fog.Density0">
      <summary>
            Gets or sets the density of the fog at <see cref="P:DigitalRune.Graphics.Fog.Height0" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Fog.Density1">
      <summary>
            Gets or sets the density of the fog at <see cref="P:DigitalRune.Graphics.Fog.Height1" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Fog.End">
      <summary>
            Gets or sets the distance from the camera where the fog reaches its full intensity.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Fog.GetIntensity(DigitalRune.Graphics.SceneGraph.FogNode,DigitalRune.Graphics.SceneGraph.CameraNode,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets the fog intensity at the specified target position.
            </summary>
      <param name="fogNode">The fog node.</param>
      <param name="cameraNode">The camera node.</param>
      <param name="targetPosition">The target position.</param>
      <returns>The fog intensity (0 = no fog; 1 = full fog, nothing else visible).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fogNode" /> or <paramref name="cameraNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Fog.Height0">
      <summary>
            Gets or sets the reference height for <see cref="P:DigitalRune.Graphics.Fog.Color0" /> and <see cref="P:DigitalRune.Graphics.Fog.Density0" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Fog.Height1">
      <summary>
            Gets or sets the reference height for <see cref="P:DigitalRune.Graphics.Fog.Color1" /> and <see cref="P:DigitalRune.Graphics.Fog.Density1" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Fog.HeightFalloff">
      <summary>
            Gets or sets the height falloff.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Fog.Name">
      <summary>
            Gets or sets the name of the fog.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Fog.ScatteringSymmetry">
      <summary>
            Gets or sets the scattering symmetry constant.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Fog.Start">
      <summary>
            Gets or sets the distance from the camera where the fog starts.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.GraphicsException">
      <summary>
            The exception that is raised when an error occurs in DigitalRune Graphics.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsException" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsException" /> class with serialized
            data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the
            exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or
            destination.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is <see langword="null" />.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsException" /> class with a specified
            error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsException" /> class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null" /> if no
            inner exception is specified.
            </param>
    </member>
    <member name="T:DigitalRune.Graphics.GraphicsHelper">
      <summary>
            Provides helper methods for graphics-related tasks.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateAdd">
      <summary>
            A default state object for additive blending (colors and alpha values are accumulated).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateMultiply">
      <summary>
            A default state object for multiplicative blending (colors and alpha values are multiplied).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateNoColorWrite">
      <summary>
            A default state object for disabled color writes.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteAlpha">
      <summary>
            A default state object for color writes in the alpha channel.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteBlue">
      <summary>
            A default state object for color writes in the blue channel.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteGreen">
      <summary>
            A default state object for color writes in the green channel.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.BlendStateWriteRed">
      <summary>
            A default state object for color writes in the red channel.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateAlways">
      <summary>
            A default state object for enabled depth buffer writes and a disabled depth buffer test.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateNoWriteEqual">
      <summary>
            A default state object for disabled depth buffer writes and a depth buffer function of 
            "Equal".
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateNoWriteGreater">
      <summary>
            A default state object for disabled depth buffer writes and a depth buffer function of 
            "Greater".
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateNoWriteGreaterEqual">
      <summary>
            A default state object for disabled depth buffer writes and a depth buffer function of 
            "GreaterEqual".
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.DepthStencilStateNoWriteLessEqual">
      <summary>
            A default state object for disabled depth buffer writes and a depth buffer function of 
            "LessEqual".
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.DrawFullScreenQuad(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
            Draws a full-screen quad.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.DrawQuad(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexPositionTexture,Microsoft.Xna.Framework.Graphics.VertexPositionTexture)">
      <summary>
            Draws a screen-aligned quad.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="topLeft">The top left vertex.</param>
      <param name="bottomRight">The bottom right vertex.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.DrawQuad(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle)">
      <summary>
            Draws a screen-aligned quad.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="rectangle">
            The rectangle describing vertex positions of the quad. (This can be in pixels or in another
            unit depending on the current vertex shader.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.DrawQuad(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Rectangle,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Draws a screen-aligned quad.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="rectangle">
            The rectangle describing vertex positions of the quad. (This can be in pixels or in another
            unit depending on the current vertex shader.)
            </param>
      <param name="texCoordTopLeft">
            The texture coordinates of the top left vertex of the quad.
            </param>
      <param name="texCoordBottomRight">
            The texture coordinates of the bottom right vertex of the quad.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetAngularAttenuation(System.Single,System.Single,System.Single)">
      <summary>
            Computes the angular attenuation (spotlight falloff) for a given angle.
            </summary>
      <param name="angle">The angle relative to the main light direction in radians.</param>
      <param name="falloffAngle">The falloff angle.</param>
      <param name="cutoffAngle">The cutoff angle.</param>
      <returns>
            The angular attenuation of the light intensity. (1 when <paramref name="angle" /> is less 
            than or equal to <paramref name="falloffAngle" />. 0 when <paramref name="angle" /> is 
            greater than or equal to <paramref name="cutoffAngle" />.)
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetCubeMapForwardDirection(Microsoft.Xna.Framework.Graphics.CubeMapFace)">
      <summary>
            Gets the camera forward direction for rendering into a cube map face.
            </summary>
      <param name="cubeMapFace">The cube map face.</param>
      <returns>
            The camera forward direction required to render the content of the
            given cube map face.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetCubeMapUpDirection(Microsoft.Xna.Framework.Graphics.CubeMapFace)">
      <summary>
            Gets the camera up direction for rendering into a cube map face.
            </summary>
      <param name="cubeMapFace">The cube map face.</param>
      <returns>
            The camera up direction required to render the content of the
            given cube map face.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetDistanceAttenuation(System.Single,System.Single,System.Single)">
      <summary>
            Computes the light attenuation factor for a given distance.
            </summary>
      <param name="distance">The distance to the light's origin.</param>
      <param name="range">The range of the light.</param>
      <param name="exponent">The falloff exponent.</param>
      <returns>The light attenuation factor.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetFrustumFarCorners(DigitalRune.Graphics.Projection,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Vector3[])">
      <summary>
            Gets the view space positions of the 4 far corners of a quad at the far plane of the viewing
            frustum.
            </summary>
      <param name="projection">The projection.</param>
      <param name="topLeftTexCoord">The top left texture coordinate.</param>
      <param name="bottomRightTexCoord">The bottom right texture coordinate.</param>
      <param name="frustumFarCorners">
            A 4 element array that will be initialized with the frustum far corners.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> or <paramref name="frustumFarCorners" /> is 
            <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="frustumFarCorners" /> has wrong length. Expected length: 4.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetFrustumFarCorners(DigitalRune.Graphics.Projection,Microsoft.Xna.Framework.Vector3[])">
      <summary>
            Gets the view space positions of the 4 far corners of the viewing frustum.
            </summary>
      <param name="projection">The projection.</param>
      <param name="frustumFarCorners">
            A 4 element array that will be initialized with the frustum far corners.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> or <paramref name="frustumFarCorners" /> is 
            <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="frustumFarCorners" /> has wrong length. Expected length: 4.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetLightContribution(DigitalRune.Graphics.SceneGraph.LightNode,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Gets a factor that is an approximation of the perceived light contribution of the given 
            light falling on an object at the given world space position.
            </summary>
      <param name="lightNode">The light node.</param>
      <param name="position">The position in world space.</param>
      <param name="chromacityWeight">
            The weight that determines how important chromacity is compared to the uncolored light 
            intensity, ranging from 0 (not important) to 1 very important. Chromacity is the color bias 
            of a light. For example, 0.7 is a good value for this parameter.
            </param>
      <returns>
            A value that is proportional to the perceived contribution of the light. If the value is
            high, then the light node is important for the scene.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lightNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetScissorRectangle(DigitalRune.Graphics.SceneGraph.CameraNode,Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Geometry.IGeometricObject)">
      <summary>
            Gets a scissor rectangle that encloses the specified geometric object.
            </summary>
      <param name="cameraNode">The camera node.</param>
      <param name="viewport">The viewport.</param>
      <param name="geometricObject">The geometric object.</param>
      <returns>The scissor rectangle.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cameraNode" /> or <paramref name="geometricObject" /> is 
            <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetScissorRectangle(DigitalRune.Graphics.SceneGraph.CameraNode,Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
      <summary>
            Gets a scissor rectangle that encloses the specified sphere.
            </summary>
      <param name="cameraNode">The camera node.</param>
      <param name="viewport">The viewport.</param>
      <param name="positionWorld">The sphere center in world space.</param>
      <param name="radius">The sphere radius.</param>
      <returns>The scissor rectangle.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cameraNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetSpriteBatch(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a shared <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" /> instance.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The shared <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetUniqueColor(System.Object)">
      <summary>
            Gets a unique color for an object.
            </summary>
      <param name="obj">The object.</param>
      <returns>A unique color.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetViewNormalizedDistance(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.CameraNode)">
      <summary>
            Calculates the view-normalized distance ("LOD distance") of the specified scene node.
            </summary>
      <param name="sceneNode">The scene node.</param>
      <param name="cameraNode">The camera node.</param>
      <returns>The view-normalized distance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.GetViewNormalizedDistance(System.Single,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Converts the specified distance to a view-normalized distance ("LOD distance").
            </summary>
      <param name="distance">The 3D Euclidean distance between the object and the camera.</param>
      <param name="projection">The projection transformation.</param>
      <param name="sceneNode">The scene node.</param>
      <param name="cameraNode">The camera node.</param>
      <returns>The view-normalized distance.</returns>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.LuminanceWeights">
      <summary>
            The weights for red, green and blue to convert a color to a luminance.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.Project(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Projects a position from world space into screen space.
            </summary>
      <param name="viewport">The viewport.</param>
      <param name="position">The position in view space.</param>
      <param name="projection">The projection matrix.</param>
      <returns>
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space mapped to the range
            [<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth" />, <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth" />] (usually [0, 1]).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.Project(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Projects a position from world space into screen space.
            </summary>
      <param name="viewport">The viewport.</param>
      <param name="position">The position in world space.</param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <returns>
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth" /> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth" /> - usually [0, 1].)
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.Project(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Projects a position from object space into screen space.
            </summary>
      <param name="viewport">The viewport.</param>
      <param name="position">The position in object space.</param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <param name="world">The world matrix.</param>
      <returns>
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth" /> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth" /> - usually [0, 1].)
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.ProjectorBiasMatrix">
      <summary>
            A bias matrix that converts a vector from clip space to texture space.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.RasterizerStateCullClockwise">
      <summary>
            A rasterizer state object with settings for culling primitives with clockwise winding order.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.RasterizerStateCullCounterClockwise">
      <summary>
            A rasterizer state object with settings for culling primitives with counter-clockwise
            winding order.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.RasterizerStateCullNone">
      <summary>
            A rasterizer state object with settings for not culling primitives.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.RasterizerStateWireFrame">
      <summary>
            A default state object for wire-frame rendering.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.ResetTextures(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
            Sets the textures of all samplers to <see langword="null" />.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.RGBToXYZ">
      <summary>
            A matrix which converts colors from the sRGB color space to the CIE XYZ color space.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.TakeScreenshot(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
            Creates a texture containing the content of the current back buffer.
            (Only available in the HiDef profile.)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <returns>A texture with content of the back buffer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The current graphics profile is "Reach".
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.Unproject(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Projects a position from screen space into view space.
            </summary>
      <param name="viewport">The <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport" />.</param>
      <param name="position">
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth" /> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth" /> - usually [0, 1].)
            </param>
      <param name="projection">The projection matrix.</param>
      <returns>The position in view space.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.Unproject(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Projects a position from screen space into world space.
            </summary>
      <param name="viewport">The <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport" />.</param>
      <param name="position">
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth" /> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth" /> - usually [0, 1].)
            </param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <returns>The position in world space.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsHelper.Unproject(Microsoft.Xna.Framework.Graphics.Viewport,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Projects a position from screen space into object space.
            </summary>
      <param name="viewport">The <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport" />.</param>
      <param name="position">
            The position in screen space: The x- and y-components define the pixel position. The 
            z-component defines the depth in clip space. (The depth of the clipping volume ranges from 
            <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth" /> to <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth" /> - usually [0, 1].)
            </param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <param name="world">The world matrix.</param>
      <returns>The position in object space.</returns>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsHelper.XYZToRGB">
      <summary>
            A matrix which converts colors from the CIE XYZ color space to the sRGB color space.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.GraphicsManager">
      <summary>
            Manages graphics-related objects, like graphics screens and presentation targets, and graphics
            resources.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> class.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="content">
            The content manager that can be used to load predefined DigitalRune Graphics content
            (e.g. post-processing effects, lookup textures, etc.).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.GameWindow,Microsoft.Xna.Framework.Content.ContentManager)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> class.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="gameWindow">
            The game window in Windows. <see langword="null" /> on non-Windows platforms (Xbox 360, 
            Windows Phone 7, etc.).
            </param>
      <param name="content">
            The content manager that can be used to load predefined DigitalRune Graphics content (e.g. 
            post-processing effects, lookup textures, etc.).
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> or <paramref name="content" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.Content">
      <summary>
            Gets the content manager that can be used to load predefined DigitalRune Graphics content
            (e.g. predefined shaders, post-processing effects, lookup textures, etc.).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.CreateRenderContext">
      <summary>
            Creates a new render context.
            </summary>
      <returns>The render context.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.Data">
      <summary>
            Gets custom data associated with this graphics service or the graphics device.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.DeltaTime">
      <summary>
            Gets the elapsed time since the last frame.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.EffectBinders">
      <summary>
            Gets or sets the effect binders.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.EffectInterpreters">
      <summary>
            Gets or sets the effect interpreters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.Frame">
      <summary>
            Gets the number of the current frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.GameForm">
      <summary>
            Gets the main form (main window) of the 
            <see cref="T:Microsoft.Xna.Framework.Game" />. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.GraphicsDevice">
      <summary>
            Gets the graphics device.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.IsDisposed">
      <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.Present(DigitalRune.Graphics.Interop.IPresentationTarget)">
      <summary>
            Presents the current back buffer target into the specified presentation target. (Windows
            Forms only!)
            </summary>
      <param name="presentationTarget">The presentation target.</param>
      <returns>
        <see langword="true" /> if the back buffer was presented successfully; 
            <see langword="false" /> if the operation was skipped because the presentation target is 
            currently not visible or invalid.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="presentationTarget" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.PresentationTargets">
      <summary>
            A collection of all presentation targets.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.Render(DigitalRune.Graphics.Interop.IPresentationTarget)">
      <summary>
            Renders the registered graphics screens into the given presentation target.
            </summary>
      <param name="presentationTarget">The presentation target.</param>
      <returns>
        <see langword="true" /> if the graphics screens where rendered; <see langword="false" /> if
            rendering was skipped because the presentation target is currently not visible or invalid.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="presentationTarget" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.Render(DigitalRune.Graphics.Interop.IPresentationTarget,System.Collections.Generic.IList{DigitalRune.Graphics.GraphicsScreen})">
      <summary>
            Renders the specified graphics screens into the given presentation target.
            </summary>
      <param name="presentationTarget">The presentation target.</param>
      <param name="screens">The graphics screens to be rendered.</param>
      <returns>
        <see langword="true" /> if the graphics screens where rendered; <see langword="false" /> if
            rendering was skipped because the presentation target is currently not visible or invalid.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="presentationTarget" /> or <paramref name="screens" /> is
            <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.Render(System.Boolean)">
      <summary>
            Renders the graphics screens to the back buffer.
            </summary>
      <param name="forceRendering">
            If set to <see langword="true" /> the screens are rendered even if the game window is
            currently hidden. If set to <see langword="false" />, the rendering is skipped if the game
            window is currently not visible.
            </param>
      <returns>
        <see langword="true" /> if the graphics screens were rendered; <see langword="false" /> if 
            rendering was skipped because the game window is currently not visible.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.RenderTargetPool">
      <summary>
            Gets or sets the render target pool.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.Screens">
      <summary>
            Gets or sets the graphics screens.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsManager.Time">
      <summary>
            Gets or sets the total elapsed time.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsManager.Update(System.TimeSpan)">
      <summary>
            Updates the graphics service and the registered graphics screens.
            </summary>
      <param name="deltaTime">The elapsed time since the last update.</param>
    </member>
    <member name="T:DigitalRune.Graphics.GraphicsScreen">
      <summary>
            Provides the base class for graphics screens, which implement the rendering pipeline and draw 
            game content.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsScreen.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreen.Coverage">
      <summary>
            Gets or sets a value indicating whether the screen covers the entire view or only a part of 
            it.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreen.GraphicsService">
      <summary>
            Gets the graphics service.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreen.IsVisible">
      <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreen.Name">
      <summary>
            Gets or sets the name of this graphics screen.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsScreen.OnRender(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when <see cref="M:DigitalRune.Graphics.GraphicsScreen.Render(DigitalRune.Graphics.RenderContext)" /> is called.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsScreen.OnUpdate(System.TimeSpan)">
      <summary>
            Called when <see cref="M:DigitalRune.Graphics.GraphicsScreen.Update(System.TimeSpan)" /> is called.
            </summary>
      <param name="deltaTime">The time that has elapsed since the last update.</param>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsScreen.Render(DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders the graphics screen.
            </summary>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreen.RenderPreviousScreensToTexture">
      <summary>
            Gets or sets a value indicating whether the previous graphics screens should render into an
            off-screen render target.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreen.SourceTextureFormat">
      <summary>
            Gets or sets the source texture format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsScreen.Update(System.TimeSpan)">
      <summary>
            Updates the state of the graphics screen.
            </summary>
      <param name="deltaTime">The time that has elapsed since the last update.</param>
    </member>
    <member name="T:DigitalRune.Graphics.GraphicsScreenCollection">
      <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.GraphicsScreen" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.GraphicsScreenCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.GraphicsScreenCollection" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.GraphicsScreenCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> with the specified name.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.GraphicsScreenCoverage">
      <summary>
            Defines whether a <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> covers the screens behind it.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsScreenCoverage.Partial">
      <summary>
            The <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> does not cover the entire view. (The screen draws only to 
            a certain regions or some pixels are transparent). Screens in the background are partially 
            visible.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.GraphicsScreenCoverage.Full">
      <summary>
            The <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> is fully opaque and covers the entire view. Screens in the 
            background are completely hidden.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.IGraphicsService">
      <summary>
            Manages graphics-related objects, like graphics screens and presentation targets, and graphics
            resources.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.Content">
      <summary>
            Gets the content manager that can be used to load predefined DigitalRune Graphics content
            (e.g. predefined shaders, post-processing effects, lookup textures, etc.).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.Data">
      <summary>
            Gets custom data associated with this graphics service or the graphics device.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.DeltaTime">
      <summary>
            Gets the elapsed time since the last frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.EffectBinders">
      <summary>
            Gets or sets the effect binders.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.EffectInterpreters">
      <summary>
            Gets or sets the effect interpreters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.Frame">
      <summary>
            Gets the number of the current frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.GameForm">
      <summary>
            Gets the main form (main window) of the 
            <see cref="T:Microsoft.Xna.Framework.Game" />. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.GraphicsDevice">
      <summary>
            Gets the graphics device.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.PresentationTargets">
      <summary>
            A collection of all presentation targets.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.RenderTargetPool">
      <summary>
            Gets or sets the render target pool.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.Screens">
      <summary>
            Gets or sets the graphics screens.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.IGraphicsService.Time">
      <summary>
            Gets or sets the total elapsed time.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.ImageBasedLight">
      <summary>
            Represents a light which uses an environment cube map to add diffuse lighting and specular
            lighting (reflections).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ImageBasedLight.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageBasedLight" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ImageBasedLight.#ctor(Microsoft.Xna.Framework.Graphics.TextureCube)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageBasedLight" /> class.
            </summary>
      <param name="texture">The cube map texture.</param>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBasedLight.BlendMode">
      <summary>
            Gets or sets the blend mode for the diffuse light contribution.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or greater than 1.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.ImageBasedLight.CloneCore(DigitalRune.Graphics.Light)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBasedLight.Color">
      <summary>
            Gets or sets the RGB color of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ImageBasedLight.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBasedLight.DiffuseIntensity">
      <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBasedLight.EnableLocalizedReflection">
      <summary>
            Gets or sets a value indicating whether the cube map reflection is localized.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBasedLight.Encoding">
      <summary>
            Gets or sets the color encoding used by the cube map texture.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBasedLight.FalloffRange">
      <summary>
            Gets or sets the relative distance over which light effect falls off.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ImageBasedLight.GetIntensity(System.Single)">
      <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
      <param name="distance">The distance from the light.</param>
      <returns>
            A value representing the (red, green and blue) light intensity at the specified distance. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBasedLight.HdrScale">
      <summary>
            Gets or sets the HDR scale of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBasedLight.LocalizedReflectionBox">
      <summary>
            Gets or sets the axis-aligned bounding box used to localize the cube map reflection when 
            <see cref="P:DigitalRune.Graphics.ImageBasedLight.EnableLocalizedReflection" /> is set.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBasedLight.Shape">
      <summary>
            Gets or sets the bounding shape of the light volume.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:DigitalRune.Graphics.ImageBasedLight.Shape" /> must not be <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:DigitalRune.Graphics.ImageBasedLight.Shape" /> type must be <see cref="T:DigitalRune.Geometry.Shapes.InfiniteShape" /> or <see cref="T:DigitalRune.Geometry.Shapes.BoxShape" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBasedLight.SpecularIntensity">
      <summary>
            Gets or sets the specular intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBasedLight.Texture">
      <summary>
            Gets or sets the cube map texture.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.ImageBillboard">
      <summary>
            Represents an oriented, textured quad used for drawing impostors, particles, and other 
            effects.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ImageBillboard.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageBillboard" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ImageBillboard.#ctor(DigitalRune.Graphics.PackedTexture)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageBillboard" /> class.
            </summary>
      <param name="texture">The texture.</param>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBillboard.AlphaTest">
      <summary>
            Gets or sets a reference value for alpha testing.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or greater than 1.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBillboard.AnimationTime">
      <summary>
            Gets or sets the normalized animation time.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or greater than 1.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBillboard.BlendMode">
      <summary>
            Gets or sets the blend mode.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or greater than 1.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.ImageBillboard.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Billboard" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Billboard" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.ImageBillboard.CloneCore(DigitalRune.Graphics.Billboard)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Billboard" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.ImageBillboard.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Billboard" />
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBillboard.Size">
      <summary>
            Gets or sets the size of the billboard in world space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBillboard.Softness">
      <summary>
            Gets or sets the softness - see remarks.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.ImageBillboard.Texture">
      <summary>
            Gets or sets the billboard texture (with premultiplied alpha).
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.ImageSprite">
      <summary>
            Represents a 2D bitmap rendered in screen space.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ImageSprite.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageSprite" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ImageSprite.#ctor(DigitalRune.Graphics.PackedTexture)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ImageSprite" /> class with the specified 
            texture.
            </summary>
      <param name="texture">The texture. (Can be <see langword="null" />.)</param>
    </member>
    <member name="M:DigitalRune.Graphics.ImageSprite.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Sprite" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Sprite" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.ImageSprite.CloneCore(DigitalRune.Graphics.Sprite)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Sprite" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.ImageSprite.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Sprite" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.ImageSprite.Texture">
      <summary>
            Gets or sets the texture.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.InstanceData">
      <summary>
            Describes a custom vertex format that contains instance data for hardware instancing.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.InstanceData.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.InstanceData" /> struct.
            </summary>
      <param name="scale">The instance scale.</param>
      <param name="pose">The instance pose.</param>
      <param name="color">The instance color (RGBA).</param>
    </member>
    <member name="M:DigitalRune.Graphics.InstanceData.#ctor(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector4)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.InstanceData" /> struct.
            </summary>
      <param name="world">The world matrix.</param>
      <param name="color">The instance color (RGBA).</param>
    </member>
    <member name="M:DigitalRune.Graphics.InstanceData.#ctor(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.InstanceData" /> struct.
            </summary>
      <param name="register0">The first instance data register.</param>
      <param name="register1">The second instance data register.</param>
      <param name="register2">The third instance data register.</param>
      <param name="register3">The fourth instance data register.</param>
    </member>
    <member name="M:DigitalRune.Graphics.InstanceData.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.InstanceData.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.InstanceData.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
      <summary>
            Gets the vertex declaration.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.InstanceData.op_Equality(DigitalRune.Graphics.InstanceData,DigitalRune.Graphics.InstanceData)">
      <summary>
            Compares two objects to determine whether they are the same.
            </summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>
        <see langword="true" /> if the objects are the same; <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.InstanceData.op_Inequality(DigitalRune.Graphics.InstanceData,DigitalRune.Graphics.InstanceData)">
      <summary>
            Compares two objects to determine whether they are different. 
            </summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>
        <see langword="true" /> if the objects are different; <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.InstanceData.Register0">
      <summary>
            The first instance data register.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.InstanceData.Register1">
      <summary>
            The second instance data register.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.InstanceData.Register2">
      <summary>
            The third instance data register.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.InstanceData.Register3">
      <summary>
            The fourth instance data register.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.InstanceData.SizeInBytes">
      <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.InstanceData" /> structure in bytes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.InstanceData.ToString">
      <summary>
            Retrieves a string representation of this object.
            </summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="F:DigitalRune.Graphics.InstanceData.VertexDeclaration">
      <summary>
            The vertex declaration.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.LayeredCloudMap">
      <summary>
            Provides a cloud texture which is generated at runtime.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.LayeredCloudMap.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.CloudMap" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.LayeredCloudMap.Coverage">
      <summary>
            Gets or sets the cloud coverage.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.LayeredCloudMap.Density">
      <summary>
            Gets or sets the cloud density.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.LayeredCloudMap.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.CloudMap" /> class 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.LayeredCloudMap.Layers">
      <summary>
            Gets the (up to) 8 layers that define cloud density.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.LayeredCloudMap.Seed">
      <summary>
            Gets or sets the random number generator seed.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.LayeredCloudMap.Size">
      <summary>
            Gets or sets the size of the cloud map in texels.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.LensFlare">
      <summary>
            Defines a lens flare effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.LensFlare.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.LensFlare" /> class.
            </summary>
      <param name="isDirectionalLight">
            If set to <see langword="true" />, the lens flare is caused by a a directional light.
            (See <see cref="P:DigitalRune.Graphics.LensFlare.IsDirectional" /> for more info.)
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.LensFlare.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.LensFlare" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.LensFlare" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.LensFlare.CloneCore(DigitalRune.Graphics.LensFlare)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.LensFlare" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.LensFlare.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.LensFlare" />
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.LensFlare.Elements">
      <summary>
            Gets the elements of the lens flare.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.LensFlare.Intensity">
      <summary>
            Gets or sets the intensity of the lens flare.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.LensFlare.IsDirectional">
      <summary>
            Gets a value indicating whether the lens flare is caused by a directional light, such as the
            sun. (Directional lights are treated as if placed at an infinite distance. See remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.LensFlare.Name">
      <summary>
            Gets or sets the name of the lens flare effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.LensFlare.OnGetSizeAndIntensity(DigitalRune.Graphics.SceneGraph.LensFlareNode,DigitalRune.Graphics.RenderContext,System.Int32,System.Int32,System.Single@,System.Single@)">
      <summary>
            Called when the size and intensity of a lens flare is determined.
            </summary>
      <param name="node">The lens flare node.</param>
      <param name="context">The render context.</param>
      <param name="visiblePixels">
            The number of visible pixels as determined by the last hardware occlusion query. 
            (Not available in Reach profile.)
            </param>
      <param name="totalPixels">
            The total number of pixels tested in the hardware occlusion query. 
            (Not available in Reach profile.)
            </param>
      <param name="size">
            Out: The actual size of the lens flare in relative to the viewport.
            </param>
      <param name="intensity">Out: The actual intensity of the lens flare.</param>
    </member>
    <member name="P:DigitalRune.Graphics.LensFlare.QuerySize">
      <summary>
            Gets or sets the size of the lens flare used in the occlusion query. See remarks.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.LensFlare.Size">
      <summary>
            Gets or sets the height of the lens flare relative to the viewport.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.LensFlareElement">
      <summary>
            Defines an element of a lens flare.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.LensFlareElement.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.LensFlareElement" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.LensFlareElement.#ctor(System.Single,DigitalRune.Mathematics.Algebra.Vector2F,System.Single,Microsoft.Xna.Framework.Color,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Graphics.PackedTexture)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.LensFlareElement" /> class.
            </summary>
      <param name="distance">
            The distance of the element: 0 = light source, 1 = center of screen.
            Distance can be negative or greater than 1. The default value is 0.
            </param>
      <param name="scale">
            The scale of the element relative to <see cref="P:DigitalRune.Graphics.LensFlare.Size" />.
            </param>
      <param name="rotation">
            The angle (in radians) to rotate the element around its center. <see cref="F:System.Single.NaN" /> 
            can be set to automatically rotate the element depending on the position of the light 
            source.
            </param>
      <param name="color">The color of the element.</param>
      <param name="origin">
            The origin relative to the image, where (0, 0) is the upper-left corner of the image and
            (1, 1) is the lower-right corner of the image.
            </param>
      <param name="texture">The texture containing the image.</param>
    </member>
    <member name="M:DigitalRune.Graphics.LensFlareElement.#ctor(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Graphics.PackedTexture)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.LensFlareElement" /> class.
            </summary>
      <param name="distance">
            The distance of the element: 0 = light source, 1 = center of screen.
            Distance can be negative or greater than 1. The default value is 0.
            </param>
      <param name="scale">
            The scale of the element relative to <see cref="P:DigitalRune.Graphics.LensFlare.Size" />.
            </param>
      <param name="rotation">
            The angle (in radians) to rotate the element around its center. <see cref="F:System.Single.NaN" /> 
            can be set to automatically rotate the element depending on the position of the light 
            source.
            </param>
      <param name="color">The color of the element.</param>
      <param name="origin">
            The origin relative to the image, where (0, 0) is the upper-left corner of the image and
            (1, 1) is the lower-right corner of the image.
            </param>
      <param name="texture">The texture containing the image.</param>
    </member>
    <member name="M:DigitalRune.Graphics.LensFlareElement.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.LensFlareElement" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.LensFlareElement" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.LensFlareElement.CloneCore(DigitalRune.Graphics.LensFlareElement)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.LensFlareElement" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.LensFlareElement.Color">
      <summary>
            Gets or sets the color of the element.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.LensFlareElement.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.LensFlareElement" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.LensFlareElement.Distance">
      <summary>
            The distance of the element.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.LensFlareElement.Origin">
      <summary>
            Gets or sets the origin relative to the image.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.LensFlareElement.Rotation">
      <summary>
            Gets or sets the angle (in radians) to rotate the element.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.LensFlareElement.Scale">
      <summary>
            Gets or sets the scale of the element relative to <see cref="P:DigitalRune.Graphics.LensFlare.Size" />. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.LensFlareElement.Texture">
      <summary>
            Gets or sets the texture.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.LensFlareElementCollection">
      <summary>
            Manages a collection of lens flare elements.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.LensFlareElementCollection.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.LensFlareElementCollection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.LensFlareElementCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.LensFlareElementCollection" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> for <see cref="T:DigitalRune.Graphics.LensFlareElementCollection" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Light">
      <summary>
            Defines the properties of a light source.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Light.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Light" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Light.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Light" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Light" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Light.CloneCore(DigitalRune.Graphics.Light)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Light.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Light.GetIntensity(System.Single)">
      <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
      <param name="distance">The distance from the light.</param>
      <returns>
            A value representing the (red, green and blue) light intensity at the specified distance. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Light.Name">
      <summary>
            Gets or sets the name of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Light.Shape">
      <summary>
            Gets (or sets) the shape of the light volume.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.LogLuvEncoding">
      <summary>
            Represents LogLuv encoding of color values.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.LogLuvEncoding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.LogLuvEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Material">
      <summary>
            Defines the material (visual properties) of a mesh.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.#ctor">
      <summary>
            Initializes a new binding of the <see cref="T:DigitalRune.Graphics.Material" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.Add(System.String,DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>
            Adds an effect binding for the specified render pass to the material.
            </summary>
      <param name="pass">The render pass.</param>
      <param name="effectBinding">The effect binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effectBinding" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            There is already an effect binding registered for the same render pass.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Material.Clear">
      <summary>
            Removes all render passes and effect bindings from the material.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Material" /> that is a clone of the current instance.
            </summary>
      <returns>A new <see cref="T:DigitalRune.Graphics.Material" /> that is a clone of the current instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Material.CloneCore(DigitalRune.Graphics.Material)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Material" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Material.Contains(System.String)">
      <summary>
            Determines whether the material contains an effect binding for the specified render pass.
            </summary>
      <param name="pass">The render pass.</param>
      <returns>
        <see langword="true" /> if the material contains an effect binding for the specified render
            pass; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Material.Count">
      <summary>
            Gets the number of render passes supported by this material.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Material" /> 
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Material.EffectBindings">
      <summary>
            Gets a collection of effect bindings used by this material.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Material.Item(System.String)">
      <summary>
            Gets or sets the effect binding for the specified render pass.
            </summary>
      <param name="pass">The render pass.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="pass" /> is not found in the material.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Material.Name">
      <summary>
            Gets the name of the material.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Material.Passes">
      <summary>
            Gets a collection of all the render passes supported by this material.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Material.Remove(System.String)">
      <summary>
            Removes the effect binding for the specified render pass from the material.
            </summary>
      <param name="pass">The render pass.</param>
      <returns>
        <see langword="true" /> if effect binding was successfully removed from the material; 
            otherwise, <see langword="false" />. This method also returns <see langword="false" /> if 
            <paramref name="pass" /> is not found in the original material.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Add(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Contains(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding}[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Remove(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#ContainsKey(System.String)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:DigitalRune.Graphics.Material.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#TryGetValue(System.String,DigitalRune.Graphics.Effects.EffectBinding@)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:DigitalRune.Graphics.Material.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#Values">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Material.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Material.TryGet(System.String,DigitalRune.Graphics.Effects.EffectBinding@)">
      <summary>
            Gets the effect binding for the specified render pass
            </summary>
      <param name="pass">The render pass.</param>
      <param name="effectBinding">
            When this method returns, the effect binding for the specified render pass; otherwise, the 
            <see langword="null" /> if the render pass is not supported by the material. This parameter is 
            passed uninitialized.
            </param>
      <returns>
        <see langword="true" /> if the material supports the specified render pass; otherwise, 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.MaterialCollection">
      <summary>
            Manages a collection of materials.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MaterialCollection.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.MaterialCollection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MaterialCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.MaterialCollection" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> for <see cref="T:DigitalRune.Graphics.MaterialCollection" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MaterialCollection.InsertItem(System.Int32,DigitalRune.Graphics.Material)">
      <summary>
            Inserts a material into the collection at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The material to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MaterialCollection.SetItem(System.Int32,DigitalRune.Graphics.Material)">
      <summary>
            Replaces the material at the specified index.
            </summary>
      <param name="index">The zero-based index of the material to replace.</param>
      <param name="item">The new value for the material at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Mesh">
      <summary>
            Represents a mesh of a 3D model.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Mesh.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Mesh" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.Animations">
      <summary>
            Gets or sets the animations.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.BoundingShape">
      <summary>
            Gets or sets the bounding shape of this mesh.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Mesh.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Mesh" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Mesh.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Mesh" /> class and
            optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.Materials">
      <summary>
            Gets a collection of materials associated with this mesh.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.Name">
      <summary>
            Gets or sets the name of this mesh.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.Occluder">
      <summary>
            Gets or sets the occluder that is rendered into the occlusion buffer.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.Skeleton">
      <summary>
            Gets or sets the skeleton for mesh skinning.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.Submeshes">
      <summary>
            Gets the collection of <see cref="T:DigitalRune.Graphics.Submesh" />es that make up this mesh. Each submesh is 
            composed of a set of primitives that share the same material. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Mesh.UserData">
      <summary>
            Gets or sets a user-defined object.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.MeshHelper">
      <summary>
            Provides helper methods for <see cref="T:DigitalRune.Graphics.Mesh" />es, <see cref="T:DigitalRune.Graphics.Submesh" />es and 
            <see cref="T:DigitalRune.Graphics.Material" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateBox(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
            Creates a new submesh that represents a box using triangles.
            (The box is centered at the origin. The side length is 1.)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a box.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateBoxLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
            Creates a new submesh that represents a box using lines.
            (The box is centered at the origin. The side length is 1.)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a box line list.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateCircleLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a circle using lines.
            (The circle lies in the xy plane and is centered at the origin. Radius = 1.)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a circle line list.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSegments" /> is less than or equal to 2.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateCone(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a cone using triangles.
            (The cone is standing on the xz plane pointing along the y axis. Radius = 1. Height = 1.) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a cone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSegments" /> is less than or equal to 2.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateConeLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a cone using lines.
            (The cone is standing on the xz plane pointing along the y axis. Radius = 1. Height = 1.) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a cone line list.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSegments" /> is less than or equal to 2.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateCylinder(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a cylinder using triangles.
            (The cylinder is centered at the origin. Radius = 1. Height = 2 (along the y axis).) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.
            </param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a cylinder.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSegments" /> is less than or equal to 2.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateCylinderLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a cylinder using lines.
            (The cylinder is centered at the origin. Radius = 1. Height = 2 (along the y axis).) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a cylinder line list.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSegments" /> is less than or equal to 2.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateHemisphere(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a spherical cap using triangles.
            (The sphere is centered at the origin. Radius = 1. The submesh contains only the 
            top half (+y) of the sphere.) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a hemisphere.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSegments" /> is less than or equal to 2.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateHemisphereLines(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a spherical cap using lines.
            (The sphere is centered at the origin. Radius = 1. The submesh contains only the 
            top half (+y) of the sphere.) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a hemisphere line list.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSegments" /> is less than or equal to 2.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateIcosphere(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a sphere using triangles.
            (The sphere is centered at the origin. Radius = 1. The sphere is generated by subdividing 
            an icosahedron.)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSubdivisions">
            The number of subdivisions [0, 5]. (See remarks of 
            <see cref="M:DigitalRune.Geometry.GeometryHelper.CreateIcosphere(System.Int32,System.Boolean)" />.) 
            This parameter controls the detail of the mesh.</param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents an icosphere.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSubdivisions" /> is less than 1.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateSubmesh(Microsoft.Xna.Framework.Graphics.GraphicsDevice,DigitalRune.Geometry.Meshes.ITriangleMesh,System.Single)">
      <summary>
            Creates a submesh to draw a triangle mesh.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="mesh">The mesh.</param>
      <param name="angleLimit">
            The angle limit for normal vectors in radians. Normals are only merged if the angle between
            the triangle normals is equal to or less than the angle limit. Set this value to -1 to
            disable the angle limit (all normals of one vertex are merged). 
            </param>
      <returns>The submesh, or <see langword="null" /> if the mesh is empty.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> or <paramref name="mesh" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateSubmesh(Microsoft.Xna.Framework.Graphics.GraphicsDevice,DigitalRune.Geometry.Meshes.TriangleMesh,System.Single)">
      <summary>
             Creates a submesh to draw a triangle mesh.
             </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="mesh">The mesh.</param>
      <param name="angleLimit">
             The angle limit for normal vectors in radians. Normals are only merged if the angle between
             the triangle normals is equal to or less than the angle limit. Set this value to -1 to
             disable the angle limit (all normals of one vertex are merged). 
             </param>
      <returns>The submesh, or <see langword="null" /> if the mesh is empty.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> or <paramref name="mesh" /> is <see langword="null" />.
             </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateTeapot(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Int32)">
      <summary>
            Creates a new submesh that represents a teapot using triangles.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="size">The size of the teapot.</param>
      <param name="tessellation">The tessellation of the teapot in the range [1, 18].</param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a teapot.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tessellation" /> is less than 1.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateTorus(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32)">
      <summary>
            Creates a new submesh that represents a torus using triangles.
            (The torus is centered at the origin.)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="radius">The radius of the torus.</param>
      <param name="thickness">The thickness of the torus.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.
            </param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a torus.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSegments" /> is less than or equal to 2.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateUncappedCylinder(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents an uncapped (open) cylinder using triangles. 
            (The cylinder centered at the origin. Radius = 1. Height = 2 (along the y axis).)
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents an uncapped cylinder (a cylinder without
            flat circle caps).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.CreateUVSphere(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates a new submesh that represents a sphere using triangles.
            (The sphere is centered at the origin. Radius = 1.) 
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfSegments">
            The number of segments. This parameter controls the detail of the mesh.</param>
      <returns>A new <see cref="T:DigitalRune.Graphics.Submesh" /> that represents a sphere.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSegments" /> is less than or equal to 2.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.Draw(DigitalRune.Graphics.Submesh)">
      <summary>
            Draws the <see cref="T:DigitalRune.Graphics.Submesh" /> using the currently active shader.
            </summary>
      <param name="submesh">The submesh.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="submesh" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetBox(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a box using triangles.
            (The box is centered at the origin. The side length is 1.)
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of a box. This submesh is shared and must not be modified!
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetBoxLines(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a box using lines.
            (The box is centered at the origin. The side length is 1.)
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of box line list. This submesh is shared and must not be modified!
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetCircleLines(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a circle using lines.
            (The circle lies in the xy plane and is centered at the origin. Radius = 1.)
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of circle line list. 
            This submesh is shared and must not be modified!
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetCone(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a cone using triangles.
            (The cone is standing on the xz plane pointing along the y axis. Radius = 1. Height = 1.) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of cone. 
            This submesh is shared and must not be modified!
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetConeLines(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a cone using lines.
            (The cone is standing on the xz plane pointing along the y axis. Radius = 1. Height = 1.) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of cone line list. 
            This submesh is shared and must not be modified!
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetCylinder(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a cylinder using triangles.
            (The cylinder is centered at the origin. Radius = 1. Height = 2 (along the y axis).) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of cylinder. 
            This submesh is shared and must not be modified!
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetCylinderLines(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a cylinder using lines.
            (The cylinder is centered at the origin. Radius = 1. Height = 2 (along the y axis).) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of cylinder line list. 
            This submesh is shared and must not be modified!
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetHemisphere(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a spherical cap using triangles.
            (The sphere is centered at the origin. Radius = 1. The submesh contains only the 
            top half (+y) of the sphere.) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of a hemisphere. 
            This submesh is shared and must not be modified!
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetHemisphereLines(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a spherical cap using lines.
            (The sphere is centered at the origin. Radius = 1. The submesh contains only the 
            top half (+y) of the sphere.) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of a hemisphere line list. 
            This submesh is shared and must not be modified!
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetIcosphere(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a sphere using triangles.
            (The sphere is centered at the origin. Radius = 1. The sphere is generated by subdividing 
            an icosahedron.)
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of an icosphere. 
            This submesh is shared and must not be modified!
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetMaterial(DigitalRune.Graphics.Submesh)">
      <summary>
            Gets the material of a submesh.
            </summary>
      <param name="submesh">The submesh.</param>
      <returns>
            The material of this submesh, or <see langword="null" /> if the submesh is not assigned to a 
            mesh or if the <see cref="P:DigitalRune.Graphics.Submesh.MaterialIndex" /> is invalid.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="submesh" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetMorphTargetNames(DigitalRune.Graphics.Mesh)">
      <summary>
            Gets the names of all morph targets.
            </summary>
      <param name="mesh">The mesh.</param>
      <returns>The names of all morph targets.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetTeapot(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a teapot using triangles.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of a teapot. This submesh is shared and must not be modified!
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetUncappedCylinder(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents an uncapped (open) cylinder using triangles. 
            (The cylinder centered at the origin. Radius = 1. Height = 2 (along the y axis).)
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of an uncapped cylinder. 
            This submesh is shared and must not be modified!
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.GetUVSphere(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the default submesh that represents a sphere using triangles.
            (The sphere is centered at the origin. Radius = 1.) 
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            The default submesh of sphere. 
            This submesh is shared and must not be modified!
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.Merge(DigitalRune.Graphics.Mesh,System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.IList{DigitalRune.Geometry.Pose})">
      <summary>
            Merges the specified mesh instances into a single mesh.
            </summary>
      <param name="mesh">The mesh.</param>
      <param name="scales">
            The scale factors. Can be <see langword="null" /> to use no scale, i.e. all scale factors are
            (1, 1, 1).
            </param>
      <param name="poses">The poses (positions and orientations).</param>
      <returns>The merged mesh.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> or <paramref name="poses" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of elements in <paramref name="poses" /> and <paramref name="scales" /> does not
            match.
            </exception>
      <exception cref="T:System.NotSupportedException">
            Cannot merge skinned meshes.
            </exception>
      <exception cref="T:System.NotSupportedException">
            Too many different vertex declarations. Merged mesh must not have more than 256 different
            vertex declarations.
            </exception>
      <exception cref="T:System.NotSupportedException">
            Too many different materials. Merged mesh would have more than 256 materials.
            </exception>
      <exception cref="T:System.NotSupportedException">
            A submesh uses a vertex declaration which is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.Merge(System.Collections.Generic.IEnumerable{DigitalRune.Graphics.SceneGraph.SceneNode})">
      <summary>
            Merges the specified scene nodes (including descendants) into a single mesh.
            </summary>
      <param name="sceneNodes">The scene nodes.</param>
      <returns>The merged mesh.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sceneNodes" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            Too many different materials. Merged mesh must have less than 256 materials.
            </exception>
      <exception cref="T:System.NotSupportedException">
            A submesh uses a vertex declaration which is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.SetMaterial(DigitalRune.Graphics.Submesh,DigitalRune.Graphics.Material)">
      <summary>
            Sets the material for a submesh.
            </summary>
      <param name="submesh">The submesh.</param>
      <param name="material">The new material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="submesh" /> or <paramref name="material" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Graphics.Submesh" /> is not yet part of a <see cref="T:DigitalRune.Graphics.Mesh" />. Add the 
            <see cref="T:DigitalRune.Graphics.Submesh" /> to the <see cref="P:DigitalRune.Graphics.Mesh.Submeshes" /> collection of a <see cref="T:DigitalRune.Graphics.Mesh" />
            before setting the material.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.ToTriangleMesh(DigitalRune.Graphics.Mesh)">
      <summary>
             Creates a <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh" /> from a <see cref="T:DigitalRune.Graphics.Mesh" />. 
             </summary>
      <param name="mesh">The mesh.</param>
      <returns>A triangle mesh containing all triangles of the specified mesh.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> is <see langword="null" />.
             </exception>
      <exception cref="T:System.NotSupportedException">
             A submeshes uses a primitive type other than triangle lists. Other primitive types are not 
             supported.
             </exception>
      <exception cref="T:System.NotSupportedException">
             The vertex position format of a submesh is not <see cref="T:Microsoft.Xna.Framework.Vector3" />. Only 
             <see cref="T:Microsoft.Xna.Framework.Vector3" /> is supported
             </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.ToTriangleMesh(DigitalRune.Graphics.Submesh)">
      <summary>
            Creates a <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh" /> from a <see cref="T:DigitalRune.Graphics.Submesh" />. 
            </summary>
      <param name="submesh">The mesh.</param>
      <returns>
            A triangle mesh containing all triangles of the specified submesh.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="submesh" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            A submeshes uses a primitive type other than triangle lists. Other primitive types are not 
            supported.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The vertex position format of a submesh is not <see cref="T:Microsoft.Xna.Framework.Vector3" />. Only 
            <see cref="T:Microsoft.Xna.Framework.Vector3" /> is supported
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MeshHelper.ToTriangleMesh(DigitalRune.Graphics.Submesh,DigitalRune.Geometry.Meshes.TriangleMesh)">
      <summary>
            Adds the triangles from the specified <see cref="T:DigitalRune.Graphics.Submesh" /> to a 
            <see cref="T:DigitalRune.Geometry.Meshes.TriangleMesh" />.
            </summary>
      <param name="submesh">The submesh.</param>
      <param name="triangleMesh">
            The triangle mesh to which the triangles of the <paramref name="submesh" /> are added.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="submesh" /> or <paramref name="triangleMesh" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            A submeshes uses a primitive type other than triangle lists. Other primitive types are not 
            supported.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The vertex position format of a submesh is not <see cref="T:Microsoft.Xna.Framework.Vector3" />. Only 
            <see cref="T:Microsoft.Xna.Framework.Vector3" /> is supported
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.MorphTarget">
      <summary>
            Defines a morph target (blend shape) of a submesh.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MorphTarget.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.MorphTarget" /> class.
            </summary>
      <param name="name">The name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MorphTarget.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Submesh" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MorphTarget.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Submesh" /> class 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.MorphTarget.Name">
      <summary>
            Gets the name of the morph target.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.MorphTarget.StartVertex">
      <summary>
            Gets or sets the index of the first vertex in the vertex buffer that belongs to this morph
            target (a.k.a base vertex or vertex offset).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.MorphTarget.VertexBuffer">
      <summary>
            Gets or sets the vertex buffer.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.MorphTargetCollection">
      <summary>
            Manages a collection of morph targets.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MorphTargetCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.MorphTargetCollection" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MorphTargetCollection.ClearItems">
      <summary>
            Removes all morph targets from the collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MorphTargetCollection.InsertItem(System.Int32,DigitalRune.Graphics.MorphTarget)">
      <summary>
            Inserts a morph target into the collection at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The morph target to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MorphTargetCollection.RemoveItem(System.Int32)">
      <summary>
            Removes the morph target at the specified index of the collection.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:DigitalRune.Graphics.MorphTargetCollection.SetItem(System.Int32,DigitalRune.Graphics.MorphTarget)">
      <summary>
            Replaces the morph target at the specified index.
            </summary>
      <param name="index">The zero-based index of the material to replace.</param>
      <param name="item">The new value for the morph target at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.MorphWeightCollection">
      <summary>
            Defines the weights for a set of morph targets.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.#ctor(DigitalRune.Graphics.Mesh)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.MorphWeightCollection" /> class for the specified mesh.
            </summary>
      <param name="mesh">The mesh.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mesh" /> does not include any morph targets.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.MorphWeightCollection" /> class for the specified morph
            targets.
            </summary>
      <param name="morphTargetNames">The names of the morph targets.</param>
      <exception cref="T:System.ArgumentException">
            No parameters specified. Or the name of a morph target is null or empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.MorphWeightCollection" /> that is a clone (deep copy) of the current 
            instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.MorphWeightCollection" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.Contains(System.String)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Graphics.MorphWeightCollection" /> contains a morph target with the specified
            name.
            </summary>
      <param name="name">The name of the morph target.</param>
      <returns>
        <see langword="true" /> if this instance contains a morph target with the given
            <paramref name="name" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.MorphWeightCollection.Count">
      <summary>
            Gets the number of morph targets.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.DigitalRune#Animation#IAnimatableObject#GetAnimatableProperty``1(System.String)">
      <summary>
            Gets the property with given name and type which can be animated.
            </summary>
      <param name="name">The name of the property.</param>
      <typeparam name="T">The type of the property.</typeparam>
      <returns>
            The <see cref="T:DigitalRune.Animation.IAnimatableProperty" /> that has the given name and type; otherwise, 
            <see langword="null" /> if the object does not have an animatable property with this name or 
            type.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.DigitalRune#Animation#IAnimatableObject#GetAnimatedProperties">
      <summary>
            Gets either the properties which are currently animated, or all properties which can be 
            animated. (See remarks.)
            </summary>
      <returns>
            The properties which are currently animated, or the all properties which can be animated.
            (See remarks.)
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the morph target weights.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the morph target weights.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.MorphWeightCollection.Item(System.String)">
      <summary>
            Gets or sets the weight of the specified morph target.
            </summary>
      <param name="name">The name of the morph target.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No morph target with the given <paramref name="name" /> was found.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.MorphWeightCollection.Name">
      <summary>
            Gets or sets the name of the <see cref="T:DigitalRune.Graphics.MorphWeightCollection" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.Reset">
      <summary>
            Clears the weights of all morph targets.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Single}}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.TryGetValue(System.String,System.Single@)">
      <summary>
            Gets the weight for the specified morph target.
            </summary>
      <param name="name">The name of the morph target.</param>
      <param name="weight">The weight of the morph target.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Graphics.MorphWeightCollection" /> contains the specified morph target;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.MorphWeightCollection.Enumerator">
      <summary>
            Enumerates the weights of a <see cref="T:DigitalRune.Graphics.MorphWeightCollection" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.MorphWeightCollection.Enumerator.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.Enumerator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; 
            <see langword="false" /> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.MorphWeightCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            collection.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.MorphWeightCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last 
            element.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.NoiseHelper">
      <summary>
            Contains helper method for the Noise shaders.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.NoiseHelper.GetDitherTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a 16x16 dither map.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>A 16x16 dither map.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.NoiseHelper.GetGradient3DTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the optimized gradient lookup texture for 3D Perlin noise.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The gradient lookup texture.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.NoiseHelper.GetGradient4DTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the gradient lookup texture for 4D Perlin noise.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The gradient lookup texture.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.NoiseHelper.GetGrainTexture(DigitalRune.Graphics.IGraphicsService,System.Int32)">
      <summary>
            Gets a grain texture.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="size">The width of the texture in pixels.</param>
      <returns>A grain texture.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> is less than 1.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.NoiseHelper.GetNoiseTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a tileable noise texture.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>A texture containing Perlin noise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.NoiseHelper.GetNoiseTexture(DigitalRune.Graphics.IGraphicsService,System.Int32,System.Int32)">
      <summary>
             Gets a tileable noise texture.
             </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="size">The width of the quadratic texture in pixels.</param>
      <param name="numberOfOscillations">
             Defines the scale/detail of the noise. The noise changes smoothly from dark to light and
             back, like a sine function. This value defines the max. number of such oscillations. For
             example, if this value is 10, then the noise texture will contain 5 to 10 oscillations.
             </param>
      <returns>A texture containing Perlin noise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
             </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> or <paramref name="numberOfOscillations" /> is less than 1.
             </exception>
    </member>
    <member name="M:DigitalRune.Graphics.NoiseHelper.GetPermutation3DTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the optimized permutation lookup texture for 3D Perlin noise.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The permutation lookup texture.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.NoiseHelper.GetPermutationTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the permutation lookup texture (used in 4D noise, but not in the optimized 3D noise).
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The permutation lookup texture.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Occluder">
      <summary>
            Defines an occluder represented as an indexed triangle mesh.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Occluder.#ctor(DigitalRune.Mathematics.Algebra.Vector3F[],System.Int16[])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Occluder" /> class. (CLS-compliant constructor.
            If possible use <see cref="M:DigitalRune.Graphics.Occluder.#ctor(DigitalRune.Mathematics.Algebra.Vector3F[],System.UInt16[])" />)
            </summary>
      <param name="vertices">The vertex array.</param>
      <param name="indices">The index array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vertices" /> or <paramref name="indices" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="vertices" /> or <paramref name="indices" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Occluder.#ctor(DigitalRune.Mathematics.Algebra.Vector3F[],System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Occluder" /> class. (CLS-compliant constructor.
            If possible use <see cref="M:DigitalRune.Graphics.Occluder.#ctor(DigitalRune.Mathematics.Algebra.Vector3F[],System.UInt16[])" />)
            </summary>
      <param name="vertices">The vertex array.</param>
      <param name="indices">The index array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vertices" /> or <paramref name="indices" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="vertices" /> or <paramref name="indices" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Occluder.#ctor(DigitalRune.Mathematics.Algebra.Vector3F[],System.UInt16[])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Occluder" /> class. (Recommended constructor.)
            </summary>
      <param name="vertices">The vertex array.</param>
      <param name="indices">The index array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vertices" /> or <paramref name="indices" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="vertices" /> or <paramref name="indices" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Occluder.DigitalRune#Geometry#Meshes#ITriangleMesh#GetTriangle(System.Int32)">
      <summary>
            Gets the triangle with the given index.
            </summary>
      <param name="index">The index.</param>
      <returns>The triangle with the given index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Occluder.DigitalRune#Geometry#Meshes#ITriangleMesh#NumberOfTriangles">
      <summary>
            Gets the number of triangles.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.OceanWaves">
      <summary>
            Represents ocean waves computed using Fast Fourier Transformation and a statistical wave
            spectrum.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.OceanWaves.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.OceanWaves" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.OceanWaves.Choppiness">
      <summary>
            Gets or sets the choppiness factor which scales the horizontal displacement.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.OceanWaves.CpuSize">
      <summary>
            Gets or sets the simulation size for CPU queries using <see cref="M:DigitalRune.Graphics.OceanWaves.GetDisplacement(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than 2.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a power of two.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.OceanWaves.Directionality">
      <summary>
            Gets or sets the directionality of the waves.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> must be greater than 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.OceanWaves.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.OceanWaves" /> class 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.OceanWaves.EnableCpuQueries">
      <summary>
            Gets or sets a value indicating whether CPU queries using <see cref="M:DigitalRune.Graphics.OceanWaves.GetDisplacement(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)" /> are
            enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.OceanWaves.GetDisplacement(System.Single,System.Single,DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
      <summary>
            Gets the surface displacement caused by the water waves.
            </summary>
      <param name="x">The x position in world space.</param>
      <param name="z">The z position in world space.</param>
      <param name="displacement">The displacement vector in world space.</param>
      <param name="normal">The normal vector in world space.</param>
      <returns>
        <see langword="true" /> if successful; otherwise, <see langword="false" /> if the results are
            invalid because the CPU simulation has not been performed.
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:DigitalRune.Graphics.OceanWaves.EnableCpuQueries" /> is <see langword="false" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.OceanWaves.Gravity">
      <summary>
            Gets or sets the gravity.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.OceanWaves.HeightScale">
      <summary>
            Gets or sets the height scale factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.OceanWaves.Seed">
      <summary>
            Gets or sets the seed of the random number generator.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.OceanWaves.SmallWaveSuppression">
      <summary>
            Gets or sets the small wave suppression.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.OceanWaves.TextureSize">
      <summary>
            Gets or sets the size of the displacement/normal map in texels.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than 2.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a power of two.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.OceanWaves.TileSize">
      <summary>
            Gets or sets the size of a single tile (one texture repetition) in world space.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The tile size must be positive and finite.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.OceanWaves.Wind">
      <summary>
            Gets or sets the wind velocity.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.OrthographicProjection">
      <summary>
            Defines an orthographic projection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.OrthographicProjection" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.CloneCore(DigitalRune.Graphics.Projection)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Projection" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.ComputeProjection">
      <summary>
            Computes the projection matrix.
            </summary>
      <returns>The projection matrix.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Projection" />
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.FromMatrix(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Creates an orthographic projection from a 4x4 transformation matrix.
            </summary>
      <param name="matrix">The projection matrix.</param>
      <returns>The orthographic projection.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44F)~DigitalRune.Graphics.OrthographicProjection">
      <summary>
            Converts a 4x4 projection matrix to an orthographic projection.
            </summary>
      <param name="matrix">The projection matrix.</param>
      <returns>The orthographic projection.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Sets the orthographic projection from the given projection matrix.
            </summary>
      <param name="projection">The orthographic projection matrix.</param>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.Set(System.Single,System.Single)">
      <summary>
            Sets a right-handed, orthographic projection with the specified size.
            </summary>
      <param name="width">The width of the view volume.</param>
      <param name="height">The height of the view volume.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> or <paramref name="height" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.Set(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets a right-handed, orthographic projection with the specified size and depth.
            </summary>
      <param name="width">The width of the view volume.</param>
      <param name="height">The height of the view volume.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> or <paramref name="height" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets a customized (off-center), right-handed, orthographic projection.
            </summary>
      <param name="left">The minimum x-value of the view volume.</param>
      <param name="right">The maximum x-value of the view volume.</param>
      <param name="bottom">The minimum y-value of the view volume.</param>
      <param name="top">The maximum y-value of the view volume.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />, or
            <paramref name="bottom" /> is greater than or equal to <paramref name="top" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.OrthographicProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets a customized (off-center), right-handed, orthographic projection (including depth).
            </summary>
      <param name="left">The minimum x-value of the view volume.</param>
      <param name="right">The maximum x-value of the view volume.</param>
      <param name="bottom">The minimum y-value of the view volume.</param>
      <param name="top">The maximum y-value of the view volume.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />, 
            <paramref name="bottom" /> is greater than or equal to <paramref name="top" />, or
            <paramref name="near" /> is greater than or equal to <paramref name="far" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.PackedTexture">
      <summary>
            Defines a texture which has been packed into a texture atlas.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PackedTexture.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PackedTexture" /> class for a single texture.
            </summary>
      <param name="texture">The texture atlas that contains the packed texture.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PackedTexture.#ctor(System.String,Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PackedTexture" /> class.
            </summary>
      <param name="name">
            The original asset name of the packed texture. Can be <see langword="null" /> or empty.
            </param>
      <param name="texture">The texture atlas that contains the packed texture.</param>
      <param name="offset">The UV offset of the packed texture in the texture atlas.</param>
      <param name="scale">The scale of the packed texture relative to the texture atlas.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="texture" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PackedTexture.#ctor(System.String,Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PackedTexture" /> class.
            </summary>
      <param name="name">
            The original asset name of the packed texture. Can be <see langword="null" /> or empty.
            </param>
      <param name="texture">The texture atlas that contains the packed texture.</param>
      <param name="offset">The UV offset of the packed texture in the texture atlas.</param>
      <param name="scale">The scale of the packed texture relative to the texture atlas.</param>
      <param name="numberOfColumns">The number of columns in the tile set.</param>
      <param name="numberOfRows">The number of rows in the tile set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="texture" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfColumns" /> or <paramref name="numberOfRows" /> is out of range.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PackedTexture.GetBounds(System.Single)">
      <summary>
            Gets the bounds of the packed texture in pixel.
            </summary>
      <param name="animationTime">
            For tile sets: The normalized animation time. (0 = start of the animation, 1 = end of 
            animation)
            </param>
      <returns>The bounds of the packed texture in pixel.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.PackedTexture.GetTextureCoordinates(DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
      <summary>
            Converts texture coordinates.
            </summary>
      <param name="texCoord">The texture coordinates of the unpacked texture.</param>
      <param name="animationTime">
            For tile sets: The normalized animation time. (0 = start of the animation, 1 = end of 
            animation)
            </param>
      <returns>The texture coordinate in the texture atlas.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.PackedTexture.Name">
      <summary>
            Gets or sets the name of the texture.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PackedTexture.NumberOfColumns">
      <summary>
            Gets or sets the number of columns in the tile set.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PackedTexture.NumberOfRows">
      <summary>
            Gets or sets the number of rows in the tile set.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PackedTexture.Offset">
      <summary>
            Gets or sets the offset of the packed texture in the texture atlas in UV coordinates.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PackedTexture.Scale">
      <summary>
            Gets or sets the scale of the packed texture relative to the texture atlas.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PackedTexture.TextureAtlas">
      <summary>
            Gets or sets the texture atlas containing the packed texture.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.ParticleType">
      <summary>
            Defines the type of particles in a particle system.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.ParticleType.Billboard">
      <summary>
            All particles in the particle system are rendered as individual billboards (quads).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.ParticleType.Ribbon">
      <summary>
            Subsequent living particles in the particle system are rendered as connected ribbons 
            (quad strips). At least two living particles are required to create a ribbon. Dead particles 
            ("NormalizedAge" ≥ 1) can be used as delimiters to terminate one ribbon and start the next 
            ribbon.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PathFigure2F">
      <summary>
            Represents a 2D figure composed of lines and curves.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PathFigure2F.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PathFigure2F" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PathFigure2F.IsFilled">
      <summary>
            Gets or sets a value indicating whether the interior of the figure is filled or empty.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PathFigure2F.Segments">
      <summary>
            Gets the curve segments.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PathFigure3F">
      <summary>
            Represents a 3D figure composed of lines and curves.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PathFigure3F.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PathFigure3F" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PathFigure3F.Segments">
      <summary>
            Gets the curve segments.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PathSegment2FCollection">
      <summary>
            Manages a collection of 2D path segments.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PathSegment3FCollection">
      <summary>
            Manages a collection of 3D path segments.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PerspectiveProjection">
      <summary>
            Defines a perspective projection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PerspectiveProjection" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.CloneCore(DigitalRune.Graphics.Projection)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Projection" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.ComputeProjection">
      <summary>
            Computes the projection matrix.
            </summary>
      <returns>The projection matrix.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Projection" />
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.FromMatrix(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Creates an perspective projection from a 4x4 transformation matrix.
            </summary>
      <param name="matrix">The projection matrix.</param>
      <returns>The perspective projection.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.PerspectiveProjection.NearClipPlane">
      <summary>
            Gets or sets the near clip plane in view space.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44F)~DigitalRune.Graphics.PerspectiveProjection">
      <summary>
            Converts a 4x4 projection matrix to a perspective projection.
            </summary>
      <param name="matrix">The projection.</param>
      <returns>The perspective projection.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Sets the perspective projection from the given projection matrix.
            </summary>
      <param name="projection">The perspective projection.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.Set(System.Single,System.Single)">
      <summary>
            Sets a symmetric, perspective projection based on size.
            </summary>
      <param name="width">The width of the frustum at the near clip plane.</param>
      <param name="height">The height of the frustum at the near clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> or <paramref name="height" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.Set(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets a symmetric, perspective projection based on size and depth.
            </summary>
      <param name="width">The width of the frustum at the near clip plane.</param>
      <param name="height">The height of the frustum at the near clip plane.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> or <paramref name="height" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.SetFieldOfView(System.Single,System.Single)">
      <summary>
            Sets a symmetric, perspective projection based on field of view.
            </summary>
      <param name="fieldOfViewY">The vertical field of view.</param>
      <param name="aspectRatio">The aspect ratio (width / height).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfViewY" /> is not between 0 and π radians (0° and 180°), or
            <paramref name="aspectRatio" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.SetFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets a symmetric, perspective projection based on field of view and depth.
            </summary>
      <param name="fieldOfViewY">The vertical field of view.</param>
      <param name="aspectRatio">The aspect ratio (width / height).</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfViewY" /> is not between 0 and π radians (0° and 180°),
            <paramref name="aspectRatio" /> is negative or 0, <paramref name="near" /> is negative or 0,
            or <paramref name="far" /> is negative or 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="near" /> is greater than or equal to <paramref name="far" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets an asymmetric (off-center), perspective projection based on the given values.
            </summary>
      <param name="left">The minimum x-value of the frustum at the near clip plane.</param>
      <param name="right">The maximum x-value of the frustum at the near clip plane.</param>
      <param name="bottom">The minimum y-value of the frustum at the near clip plane.</param>
      <param name="top">The maximum y-value of the frustum at the near clip plane.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />, or
            <paramref name="bottom" /> is greater than or equal to <paramref name="top" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PerspectiveProjection.SetOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets an asymmetric (off-center), perspective projection based on the given values (including
            depth).
            </summary>
      <param name="left">The minimum x-value of the frustum at the near clip plane.</param>
      <param name="right">The maximum x-value of the frustum at the near clip plane.</param>
      <param name="bottom">The minimum y-value of the frustum at the near clip plane.</param>
      <param name="top">The maximum y-value of the frustum at the near clip plane.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> is greater than or equal to <paramref name="right" />, 
            <paramref name="bottom" /> is greater than or equal to <paramref name="top" />, or
            <paramref name="near" /> is greater than or equal to <paramref name="far" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.PointLight">
      <summary>
            Represents a point light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PointLight.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PointLight" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.Attenuation">
      <summary>
            Gets or sets the exponent for the distance attenuation.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PointLight.CloneCore(DigitalRune.Graphics.Light)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.Color">
      <summary>
            Gets or sets the RGB color of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PointLight.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.DiffuseIntensity">
      <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PointLight.GetIntensity(System.Single)">
      <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
      <param name="distance">The distance from the light.</param>
      <returns>
            A value representing the (red, green and blue) light intensity at the specified distance. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.HdrScale">
      <summary>
            Gets or sets the HDR scale of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.Range">
      <summary>
            Gets or sets the range of the light.
            </summary>
      <exception cref="T:System.ArgumentException">
            The range of point light cannot be negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.SpecularIntensity">
      <summary>
            Gets or sets the specular intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PointLight.Texture">
      <summary>
            Gets or sets the cube map texture which is projected by this point light.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Projection">
      <summary>
            Defines a projection transformation (including its bounding shape).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Projection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.AspectRatio">
      <summary>
            Gets the aspect ratio (width / height) of the view.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Bottom">
      <summary>
            Gets or sets the minimum y-value of the view volume at the near view-plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Projection" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Projection" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.CloneCore(DigitalRune.Graphics.Projection)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Projection" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.ComputeProjection">
      <summary>
            Computes the projection matrix.
            </summary>
      <returns>The projection matrix.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Projection" />
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Depth">
      <summary>
            Gets the depth of the view volume (<see cref="P:DigitalRune.Graphics.Projection.Far" /> - <see cref="P:DigitalRune.Graphics.Projection.Near" />).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Far">
      <summary>
            Gets or sets the distance to the far view plane. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.FieldOfViewX">
      <summary>
            Gets the horizontal field of view in radians.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.FieldOfViewY">
      <summary>
            Gets the vertical field of view in radians.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Height">
      <summary>
            Gets the height of the view volume at the near view plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.Invalidate">
      <summary>
            Invalidates the projection matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Inverse">
      <summary>
            Gets the inverse of the projection matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Left">
      <summary>
            Gets or sets the minimum x-value of the view volume at the near view-plane.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Near">
      <summary>
            Gets or sets the distance to the near view plane. 
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.op_Implicit(DigitalRune.Graphics.Projection)~DigitalRune.Mathematics.Algebra.Matrix44F">
      <summary>
            Converts the projection to a 4x4 transformation matrix.
            </summary>
      <param name="projection">The projection.</param>
      <returns>A 4x4-matrix that represents the same transformation as the projection.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.op_Implicit(DigitalRune.Graphics.Projection)~Microsoft.Xna.Framework.Matrix">
      <summary>
            Converts the projection to a 4x4 transformation matrix (XNA Framework). (Only available in 
            the XNA-compatible build.)
            </summary>
      <param name="projection">The projection.</param>
      <returns>A 4x4-matrix that represents the same transformation as the projection.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Right">
      <summary>
            Gets or sets the maximum x-value of the view volume at the near view-plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.Set(DigitalRune.Mathematics.Algebra.Matrix44F)">
      <summary>
            Sets the projection from the given projection matrix.
            </summary>
      <param name="projection">The projection matrix.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.ToMatrix44F">
      <summary>
            Converts a projection to a 4x4 transformation matrix.
            </summary>
      <returns>A 4x4-matrix that represents the same transformation as the projection.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Top">
      <summary>
            Gets or sets the maximum y-value of the view volume at the near view-plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Projection.ToXna">
      <summary>
            Converts a projection to a 4x4 transformation matrix (XNA Framework). (Only available in the 
            XNA-compatible build.)
            </summary>
      <returns>A 4x4-matrix that represents the same transformation as the projection.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.ViewVolume">
      <summary>
            Gets (or sets) the shape of the view volume (viewing frustum).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Projection.Width">
      <summary>
            Gets the width of the view volume at the near view plane.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.ProjectorLight">
      <summary>
            Represents a light that projects a texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ProjectorLight.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ProjectorLight" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ProjectorLight.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,DigitalRune.Graphics.Projection)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.ProjectorLight" /> class.
            </summary>
      <param name="texture">The texture that is projected.</param>
      <param name="projection">The projection.</param>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.Attenuation">
      <summary>
            Gets or sets the attenuation exponent for the distance attenuation.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ProjectorLight.CloneCore(DigitalRune.Graphics.Light)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.Color">
      <summary>
            Gets or sets the RGB color of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ProjectorLight.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.DiffuseIntensity">
      <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ProjectorLight.GetIntensity(System.Single)">
      <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
      <param name="distance">The distance from the light.</param>
      <returns>
            A value representing the (red, green and blue) light intensity at the specified distance. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.HdrScale">
      <summary>
            Gets or sets the HDR scale of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.Projection">
      <summary>
            Gets or sets the projection.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.SpecularIntensity">
      <summary>
            Gets or sets the specular intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.ProjectorLight.Texture">
      <summary>
            Gets or sets the texture.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.RectangleFigure">
      <summary>
            Represents a rectangle in the xy plane.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RectangleFigure.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RectangleFigure" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RectangleFigure.IsFilled">
      <summary>
            Gets or sets a value indicating whether the rectangle is filled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RectangleFigure.WidthX">
      <summary>
            Gets or sets the width of the rectangle in the x direction.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RectangleFigure.WidthY">
      <summary>
            Gets or sets the width of the rectangle in the y direction.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.RenderContext">
      <summary>
            Provides information about the current render states.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderContext.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderContext" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.CameraNode">
      <summary>
            Gets or sets the active camera.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderContext.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.RenderContext" /> that is a clone of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.RenderContext" /> that is a clone of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderContext.CloneCore(DigitalRune.Graphics.RenderContext)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.RenderContext" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.RenderContext.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.RenderContext" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.Data">
      <summary>
            Gets a generic collection of name/value pairs which can be used to store custom data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.DeltaTime">
      <summary>
            Gets the elapsed time since the last frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.Frame">
      <summary>
            Gets or sets the number of the current frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.GBuffer0">
      <summary>
            Gets or sets the first texture containing G-buffer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.GBuffer1">
      <summary>
            Gets or sets the second texture containing G-buffer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.GBuffer2">
      <summary>
            Gets or sets the third texture containing G-buffer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.GBuffer3">
      <summary>
            Gets or sets the fourth texture containing G-buffer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.GraphicsService">
      <summary>
            Gets or sets the graphics service.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.LightBuffer0">
      <summary>
            Gets or sets the first texture containing light buffer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.LightBuffer1">
      <summary>
            Gets or sets the first texture containing light buffer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.LodBias">
      <summary>
            Gets or sets the global LOD bias.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.LodBlendingEnabled">
      <summary>
            Gets or sets a value indicating whether smooth LOD transitions are enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.LodCameraNode">
      <summary>
            Gets or sets the camera that is used as reference for LOD calculations.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.LodHysteresis">
      <summary>
            Gets or sets the LOD hysteresis, which is the distance over which an object transitions from
            on level of detail to the next level. (Needs to be normalized - see remarks.)
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative, infinite or NaN.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.MaterialBinding">
      <summary>
            Gets or sets the effect binding of the current material.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.MaterialInstanceBinding">
      <summary>
            Gets or sets the effect binding of the current material instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.Object">
      <summary>
            Gets or sets the current data object.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.PassIndex">
      <summary>
            Gets or sets the index of the current <see cref="T:Microsoft.Xna.Framework.Graphics.EffectPass" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.PresentationTarget">
      <summary>
            Gets or sets the <see cref="P:DigitalRune.Graphics.RenderContext.PresentationTarget" /> that is currently being rendered. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.ReferenceNode">
      <summary>
            Gets or sets a scene node that provides additional context for the current render operation.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.RenderPass">
      <summary>
            Gets or sets a string that identifies the current render pass.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.RenderTarget">
      <summary>
            Gets or sets the target of the current rendering operations.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderContext.Reset">
      <summary>
            Resets the render context to default values.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.Scene">
      <summary>
            Gets or sets the scene.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.SceneNode">
      <summary>
            Gets or sets the currently rendered scene node.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.SceneTexture">
      <summary>
            Gets or sets the texture that contains the rendered scene.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.Screen">
      <summary>
            Gets or sets the <see cref="T:DigitalRune.Graphics.GraphicsScreen" /> that is currently being rendered.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderContext.Set(DigitalRune.Graphics.RenderContext)">
      <summary>
            Copies the properties of the specified render context.
            </summary>
      <param name="source">The render context from properties are copied.</param>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.SourceTexture">
      <summary>
            Gets or sets the source texture that contains the source image for the current render
            operation. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.Technique">
      <summary>
            Gets or sets a string that identifies the current technique.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.Time">
      <summary>
            Gets the total elapsed time.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.UserData">
      <summary>
            Gets or sets a user-defined object.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderContext.Viewport">
      <summary>
            Gets the viewport (= the portion of the back buffer that should be used for rendering).
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.RenderContextKeys">
      <summary>
            Provides common names for render context data (see property <see cref="P:DigitalRune.Graphics.RenderContext.Data" />
            of <see cref="T:DigitalRune.Graphics.RenderContext" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.RenderContextKeys.DepthBufferHalf">
      <summary>
            A 2D texture (or render target) containing a downsampled depth buffer (half width and half 
            height).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.RenderContextKeys.LastVelocityBuffer">
      <summary>
            A 2D texture (or render target) containing screen space velocities of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.RenderContextKeys.RebuildZBufferRenderer">
      <summary>
            A <see cref="F:DigitalRune.Graphics.RenderContextKeys.RebuildZBufferRenderer" /> which should be used when the depth buffer has to be
            restored.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.RenderContextKeys.Shadow">
      <summary>
            The <see cref="T:DigitalRune.Graphics.Shadow" />. (Only set if a shadow map is currently being rendered.)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.RenderContextKeys.ShadowTileIndex">
      <summary>
            The index of the shadow tile (e.g. cube map side or cascade).
            (Only set if a shadow map with tiles is currently being rendered.)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.RenderContextKeys.VelocityBuffer">
      <summary>
            A 2D texture (or render target) containing screen space velocities.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.RenderTargetFormat">
      <summary>
            Describes the size and format of a texture or a render target.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetFormat.#ctor(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetFormat" /> struct.
            </summary>
      <param name="renderTarget2D">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D" /> from which the settings are copied. Can be 
            <see langword="null" /> to set all properties to undefined.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetFormat.#ctor(Microsoft.Xna.Framework.Graphics.RenderTargetCube)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetFormat" /> struct.
            </summary>
      <param name="renderTargetCube">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube" /> from which the settings are copied. Can be 
            <see langword="null" /> to set all properties to undefined.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetFormat.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetFormat" /> struct.
            </summary>
      <param name="texture2D">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" /> from which the settings are copied. Can be 
            <see langword="null" /> to set all properties to undefined.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetFormat.#ctor(Microsoft.Xna.Framework.Graphics.TextureCube)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetFormat" /> struct.
            </summary>
      <param name="textureCube">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube" /> from which the settings are copied. Can be 
            <see langword="null" /> to set all properties to undefined.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetFormat.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{Microsoft.Xna.Framework.Graphics.SurfaceFormat},System.Nullable{Microsoft.Xna.Framework.Graphics.DepthFormat})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetFormat" /> struct.
            </summary>
      <param name="width">
            The width or <see langword="null" /> if the width is undefined.
            </param>
      <param name="height">
            The height or <see langword="null" /> if the height is undefined.
            </param>
      <param name="mipmap">
        <see langword="true" /> to enable a full mipmap chain. <see langword="false" /> to disable 
            mipmapping. <see langword="null" /> if the mipmapping behavior is undefined.
            </param>
      <param name="surfaceFormat">
            The surface format or <see langword="null" /> if the surface format is undefined.
            </param>
      <param name="depthStencilFormat">
            The depth/stencil format or <see langword="null" /> if the depth/stencil format is undefined.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="width" /> or <paramref name="height" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetFormat.DepthStencilFormat">
      <summary>
            Gets or sets the depth/stencil buffer format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetFormat.Equals(DigitalRune.Graphics.RenderTargetFormat)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetFormat.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetFormat.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetFormat.Height">
      <summary>
            Gets or sets the height (in pixels).
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetFormat.IsCompatibleWith(Microsoft.Xna.Framework.Graphics.Texture)">
      <summary>
            Determines whether this instance is compatible with the specified render target format.
            </summary>
      <param name="texture">The format to compare with this instance.</param>
      <returns>
        <see langword="true" /> if this instance is compatible with the given format; otherwise, 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="texture" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetFormat.Mipmap">
      <summary>
            Gets or sets a value indicating whether the texture uses mipmapping.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetFormat.op_Equality(DigitalRune.Graphics.RenderTargetFormat,DigitalRune.Graphics.RenderTargetFormat)">
      <summary>
            Compares <see cref="T:DigitalRune.Graphics.RenderTargetFormat" /> to determine whether they are the same.
            </summary>
      <param name="left">The first <see cref="T:DigitalRune.Graphics.RenderTargetFormat" />.</param>
      <param name="right">The second <see cref="T:DigitalRune.Graphics.RenderTargetFormat" />.</param>
      <returns>
        <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> are the 
            same; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetFormat.op_Inequality(DigitalRune.Graphics.RenderTargetFormat,DigitalRune.Graphics.RenderTargetFormat)">
      <summary>
            Compares <see cref="T:DigitalRune.Graphics.RenderTargetFormat" /> to determine whether they are different.
            </summary>
      <param name="left">The first <see cref="T:DigitalRune.Graphics.RenderTargetFormat" />.</param>
      <param name="right">The second <see cref="T:DigitalRune.Graphics.RenderTargetFormat" />.</param>
      <returns>
        <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> are 
            different; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetFormat.SurfaceFormat">
      <summary>
            Gets or sets the surface format.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetFormat.Width">
      <summary>
            Gets or sets the width (in pixels).
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.RenderTargetPool">
      <summary>
            Manages a pool of reusable render targets.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderTargetPool" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Clear">
      <summary>
            Removes all cached render targets.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.RenderTargetPool" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.RenderTargetPool" />
            class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetPool.Enabled">
      <summary>
            Gets or sets a value indicating whether render target pooling is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetPool.FrameLimit">
      <summary>
            Gets or sets the number of frames a recycled render target will be cached before it is 
            released.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderTargetPool.GraphicsService">
      <summary>
            Gets the graphics service.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Obtain2D(DigitalRune.Graphics.RenderTargetFormat)">
      <summary>
            Obtains a 2D render target that matches the given specification.
            </summary>
      <param name="format">
            The render target format. If a property in the format is <see langword="null" />, then the 
            value of the back buffer is used. 
            </param>
      <returns>A render target with the given specified format.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.ObtainCube(DigitalRune.Graphics.RenderTargetFormat)">
      <summary>
            Obtains a cube map render target that matches the given specification.
            </summary>
      <param name="format">
            The render target format. If a property in the format is <see langword="null" />, then the
            value of the back buffer is used. The <see cref="P:DigitalRune.Graphics.RenderTargetFormat.Width" /> is used to
            define the size of the cube map. <see cref="P:DigitalRune.Graphics.RenderTargetFormat.Height" /> is ignored.
            </param>
      <returns>A cube map render target with the specified format.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Recycle(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
      <summary>
            Releases a render target and puts it back into the pool for future reuse.
            </summary>
      <param name="renderTarget">The render target.</param>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Recycle(Microsoft.Xna.Framework.Graphics.RenderTargetCube)">
      <summary>
            Releases a render target and puts it back into the pool for future reuse.
            </summary>
      <param name="renderTarget">The render target.</param>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Recycle(Microsoft.Xna.Framework.Graphics.Texture)">
      <summary>
            Releases a render target and puts it back into the pool for future reuse.
            </summary>
      <param name="renderTarget">The render target.</param>
      <exception cref="T:System.ArgumentException">
            The type of <paramref name="renderTarget" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.RenderTargetPool.Update">
      <summary>
            Manages the cached render targets.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.RenderToTexture">
      <summary>
            Represents a 2D texture or cube map that was created using render-to-texture functionality.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RenderToTexture.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RenderToTexture" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderToTexture.LastFrame">
      <summary>
            Gets the number of the last frame in which the texture was rendered.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderToTexture.Texture">
      <summary>
            Gets or sets the render target.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.RenderToTexture.TextureMatrix">
      <summary>
            Gets the texture matrix.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.RgbeEncoding">
      <summary>
            Represents RGBE encoding of color values.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RgbeEncoding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.RgbeEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:DigitalRune.Graphics.RgbEncoding">
      <summary>
            Represents the default encoding of color values.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RgbEncoding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.RgbEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:DigitalRune.Graphics.RgbmEncoding">
      <summary>
            Represents RGBM encoding of color values.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.RgbmEncoding.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.RgbmEncoding" /> class.
            </summary>
      <param name="max">The maximum value for R, G and B in linear color space.</param>
    </member>
    <member name="P:DigitalRune.Graphics.RgbmEncoding.Max">
      <summary>
            Gets the maximum value for R, G, and B in linear color space.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Shadow">
      <summary>
            Defines the shadow of a specific <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Shadow" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Shadow.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Shadow" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Shadow" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Shadow.CloneCore(DigitalRune.Graphics.Shadow)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Shadow" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Shadow.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Shadow" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Shadow.Prefer16Bit">
      <summary>
            Gets or sets a value indicating whether the shadow map should use a 16-bit format to store
            depth.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadow.PreferredSize">
      <summary>
            Gets or sets the size of the desired size of the shadow map in texels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadow.ShadowMap">
      <summary>
            Gets or sets the shadow map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadow.ShadowMask">
      <summary>
            Gets or sets the shadow mask.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Shadow.ShadowMaskChannel">
      <summary>
            Gets or sets the shadow mask channel.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than 0 or greater than 3.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.ShadowCascadeSelection">
      <summary>
            Defines how the cascade of a cascaded shadow map is selected.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.ShadowCascadeSelection.Fast">
      <summary>
            The shadow cascade is selected using the fastest available method.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.ShadowCascadeSelection.Best">
      <summary>
            The optimal shadow cascade is selected. (Best visual result, but with seams between
            cascades.)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.ShadowCascadeSelection.BestDithered">
      <summary>
            The optimal shadow cascade is selected using dithering to hide transitions between cascades.
            (Best visual result, but slower.)
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.ShadowCollection">
      <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Shadow" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ShadowCollection.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.ShadowCollection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.ShadowCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.ShadowCollection" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Graphics.ShadowCollection" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.ShadowCollection.InsertItem(System.Int32,DigitalRune.Graphics.Shadow)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is a <see cref="T:DigitalRune.Graphics.CompositeShadow" />. <see cref="T:DigitalRune.Graphics.CompositeShadow" />s
            cannot be added to a shadow collection.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.ShadowCollection.SetItem(System.Int32,DigitalRune.Graphics.Shadow)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. The collection does not allow 
            <see langword="null" /> values.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is a <see cref="T:DigitalRune.Graphics.CompositeShadow" />. <see cref="T:DigitalRune.Graphics.CompositeShadow" />s
            cannot be added to a shadow collection.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. The collection does not 
            allow duplicate items.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Spotlight">
      <summary>
            Represents a spotlight.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Spotlight.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Spotlight" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.Attenuation">
      <summary>
            Gets or sets the attenuation exponent for the distance attenuation.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Spotlight.CloneCore(DigitalRune.Graphics.Light)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Light" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.Color">
      <summary>
            Gets or sets the RGB color of the light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Spotlight.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Light" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.CutoffAngle">
      <summary>
            Gets or sets the cutoff (penumbra) angle.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.DiffuseIntensity">
      <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.FalloffAngle">
      <summary>
            Gets or sets the falloff (umbra) angle.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Spotlight.GetIntensity(System.Single)">
      <summary>
            Gets the (approximated) light intensity at the given distance.
            </summary>
      <param name="distance">The distance from the light.</param>
      <returns>
            A value representing the (red, green and blue) light intensity at the specified distance. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.HdrScale">
      <summary>
            Gets or sets the HDR scale of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.Range">
      <summary>
            Gets or sets the range of the light.
            </summary>
      <exception cref="T:System.ArgumentException">
            The range of point light cannot be negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.SpecularIntensity">
      <summary>
            Gets or sets the specular intensity of the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Spotlight.Texture">
      <summary>
            Gets or sets the texture which is projected by this spotlight.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Sprite">
      <summary>
            Represents a 2D image rendered in screen space.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Sprite.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Sprite</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Sprite.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Sprite" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Sprite" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Sprite.CloneCore(DigitalRune.Graphics.Sprite)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Sprite" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Sprite.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Sprite" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Sprite.Name">
      <summary>
            Gets or sets the name of the sprite.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SRgbEncoding">
      <summary>
            Represents sRGB encoding of color values.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SRgbEncoding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.SRgbEncoding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:DigitalRune.Graphics.StandardShadow">
      <summary>
            Defines a standard shadow that can be used for <see cref="T:DigitalRune.Graphics.Spotlight" />s or 
            <see cref="T:DigitalRune.Graphics.ProjectorLight" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.StandardShadow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StandardShadow" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.StandardShadow.CloneCore(DigitalRune.Graphics.Shadow)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Shadow" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.StandardShadow.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Shadow" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.StandardShadow.DefaultNear">
      <summary>
            Gets or sets the default near plane distance for the shadow projection.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.StandardShadow.DepthBias">
      <summary>
            Gets or sets the depth bias used to remove "surface acne".
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.StandardShadow.DepthBiasOffset">
      <summary>
            Gets or sets the depth bias offset used to remove surface acne.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.StandardShadow.DepthBiasScale">
      <summary>
            Gets or sets the depth bias scale used to remove surface acne.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.StandardShadow.FilterRadius">
      <summary>
            Gets or sets the filter radius.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.StandardShadow.JitterResolution">
      <summary>
            Gets or sets the jitter resolution (for jitter sampling).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.StandardShadow.NormalOffset">
      <summary>
            Gets or sets the normal offset used to remove "surface acne".
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.StandardShadow.NumberOfSamples">
      <summary>
            Gets or sets the number of filter samples.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.StandardShadow.ShadowMap">
      <summary>
            Gets or sets the shadow map.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Star">
      <summary>
            Represents a star of a <see cref="T:DigitalRune.Graphics.SceneGraph.StarfieldNode" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Star.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,System.Single,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Star" /> struct.
            </summary>
      <param name="position">
            The star position given as a direction vector. (Does not need to be normalized.)
            </param>
      <param name="size">
            The star size in pixels. To avoid flickering, the star size needs to be at least 2.8 pixels.
            </param>
      <param name="color">The star color.</param>
    </member>
    <member name="F:DigitalRune.Graphics.Star.Color">
      <summary>
            The star color.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Star.Equals(DigitalRune.Graphics.Star)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> 
            parameter; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Star.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to this instance; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Star.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Star.op_Equality(DigitalRune.Graphics.Star,DigitalRune.Graphics.Star)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.Star" />s to determine whether they are the same.
            </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>
        <see langword="true" /> if the instances are equal; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Star.op_Inequality(DigitalRune.Graphics.Star,DigitalRune.Graphics.Star)">
      <summary>
            Compares two <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF" />s to determine whether they are different.
            </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>
        <see langword="true" /> if the instances are different; otherwise <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.Star.Position">
      <summary>
            The star position given as a direction vector. (Does not need to be normalized.)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Star.Size">
      <summary>
            The star size in pixels. To avoid flickering, the star size needs to be at least 2.8 pixels.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.StrokedSegment`2">
      <summary>
            Wraps a curve segment and determines whether it is stroked or not.
            </summary>
      <typeparam name="TParam">
            The type of the curve parameter (usually <see cref="T:System.Single" /> or <see cref="T:System.Double" />).
            </typeparam>
      <typeparam name="TPoint">
            The type of the curve points (such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, etc.).
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.StrokedSegment`2.#ctor(DigitalRune.Mathematics.Interpolation.ICurve{`0,`1})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment`2" /> class with the
            specified stroked curve.
            </summary>
      <param name="curve">The curve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="curve" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.StrokedSegment`2.#ctor(DigitalRune.Mathematics.Interpolation.ICurve{`0,`1},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment`2" /> class.
            </summary>
      <param name="curve">The curve.</param>
      <param name="isStroked">
        <see langword="true" /> if this curve segment is stroked; otherwise, <see langword="false" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="curve" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.StrokedSegment`2.Curve">
      <summary>
            Gets or sets the curve.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.StrokedSegment`2.Flatten(System.Collections.Generic.ICollection{`1},System.Int32,`0)">
      <summary>
            Computes the points of a sequence of line segments which approximate the curve.
            </summary>
      <param name="points">
            A collection to which all points of the line segments are added. See remarks.
            </param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the approximation.
            </param>
      <param name="tolerance">
            The tolerance value. The absolute error of the approximated polygon will be less than this 
            tolerance. 
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tolerance" /> is 0 or less than 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.StrokedSegment`2.GetLength(`0,`0,System.Int32,`0)">
      <summary>
            Computes the approximated length of the curve for the parameter interval 
            [<paramref name="start" />, <paramref name="end" />].
            </summary>
      <param name="start">The parameter value of the start position.</param>
      <param name="end">The parameter value of the end position.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
      <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length. 
            The absolute error will be less than this tolerance. 
            </param>
      <returns>
            The approximated length of the curve for the given parameter interval. 
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.StrokedSegment`2.GetPoint(`0)">
      <summary>
            Computes a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>
            The curve point. (If the curve does not contain any points a vector with NaN values is
            returned.)
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.StrokedSegment`2.GetTangent(`0)">
      <summary>
            Computes the tangent for a point on the curve.
            </summary>
      <param name="parameter">The curve parameter.</param>
      <returns>The curve tangent.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.StrokedSegment`2.IsStroked">
      <summary>
            Gets or sets a value indicating whether this curve segment is stroked.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.StrokedSegment2F">
      <summary>
            Wraps a 2D curve segment (single-precision) and determines whether it is stroked or not.
            </summary>
      <typeparam name="TParam">
            The type of the curve parameter (usually <see cref="T:System.Single" /> or <see cref="T:System.Double" />).
            </typeparam>
      <typeparam name="TPoint">
            The type of the curve points (such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, etc.).
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.StrokedSegment2F.#ctor(DigitalRune.Mathematics.Interpolation.ICurve{System.Single,DigitalRune.Mathematics.Algebra.Vector2F})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment2F" /> class with the specified 
            stroked curve.
            </summary>
      <param name="curve">The curve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="curve" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.StrokedSegment2F.#ctor(DigitalRune.Mathematics.Interpolation.ICurve{System.Single,DigitalRune.Mathematics.Algebra.Vector2F},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment2F" /> class.
            </summary>
      <param name="curve">The curve.</param>
      <param name="isStroked">
        <see langword="true" /> if this curve segment is stroked; otherwise, <see langword="false" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="curve" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.StrokedSegment3F">
      <summary>
            Wraps a 3D curve segment (single-precision) and determines whether it is stroked or not.
            </summary>
      <typeparam name="TParam">
            The type of the curve parameter (usually <see cref="T:System.Single" /> or <see cref="T:System.Double" />).
            </typeparam>
      <typeparam name="TPoint">
            The type of the curve points (such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, etc.).
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.StrokedSegment3F.#ctor(DigitalRune.Mathematics.Interpolation.ICurve{System.Single,DigitalRune.Mathematics.Algebra.Vector3F})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment3F" /> class with the specified 
            stroked curve.
            </summary>
      <param name="curve">The curve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="curve" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.StrokedSegment3F.#ctor(DigitalRune.Mathematics.Interpolation.ICurve{System.Single,DigitalRune.Mathematics.Algebra.Vector3F},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.StrokedSegment3F" /> class.
            </summary>
      <param name="curve">The curve.</param>
      <param name="isStroked">
        <see langword="true" /> if this curve segment is stroked; otherwise, <see langword="false" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="curve" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Submesh">
      <summary>
            Represents a batch of geometry information to submit to the graphics device during rendering.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Submesh.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Submesh" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Submesh.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Submesh" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Submesh.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Submesh" /> class 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.IndexBuffer">
      <summary>
            Gets or sets the index buffer.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.MaterialIndex">
      <summary>
            Gets or sets or sets the index of the material.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.Mesh">
      <summary>
            Gets the mesh that own this submesh.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.MorphTargets">
      <summary>
            Gets or sets the morph targets of the submesh.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The specified <see cref="T:DigitalRune.Graphics.MorphTargetCollection" /> cannot be assigned to the 
            <see cref="T:DigitalRune.Graphics.Submesh" /> because it already belongs to another <see cref="T:DigitalRune.Graphics.Submesh" /> instance.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.PrimitiveCount">
      <summary>
            Gets or sets the number of primitives (usually the number of triangles).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.PrimitiveType">
      <summary>
            Gets or sets the type of the primitive.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.StartIndex">
      <summary>
            Gets or sets the location in the index array at which to start reading vertices.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.StartVertex">
      <summary>
            Gets or sets the index of the first vertex in the vertex buffer that belongs to this submesh
            (a.k.a base vertex or vertex offset).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.UserData">
      <summary>
            Gets or sets user-defined data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.VertexBuffer">
      <summary>
            Gets or sets the vertex buffer.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Submesh.VertexCount">
      <summary>
            Gets or sets the number of vertices.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SubmeshCollection">
      <summary>
            Represents a collection of <see cref="T:DigitalRune.Graphics.Submesh" />es. 
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SubmeshCollection.#ctor(DigitalRune.Graphics.Mesh)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SubmeshCollection" /> class.
            </summary>
      <param name="owner">The <see cref="T:DigitalRune.Graphics.Mesh" /> that owns this collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SubmeshCollection.GetParent(DigitalRune.Graphics.Submesh)">
      <summary>
            Gets the parent of an object.
            </summary>
      <param name="child">The child object.</param>
      <returns>The parent of <paramref name="child" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SubmeshCollection.SetParent(DigitalRune.Graphics.Submesh,DigitalRune.Graphics.Mesh)">
      <summary>
            Sets the parent of the given object.
            </summary>
      <param name="child">The child object.</param>
      <param name="parent">The parent to set.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Terrain">
      <summary>
            Represents a height field based terrain.
            (Not available on these platforms: Xbox 360, mobile platforms)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Terrain.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Terrain" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Terrain.Aabb">
      <summary>
            Gets the axis-aligned bounding box of the terrain tile.
            (Vertical min and max values are not set!)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Terrain.BaseClearValues">
      <summary>
            Gets or sets the values written into the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap" /> textures when
            it is cleared.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Terrain.DetailClearValues">
      <summary>
            Gets or sets the values written into the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap" /> textures
            when it is cleared.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Terrain.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Terrain" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Terrain.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Terrain" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Terrain.Invalidate">
      <summary>
            Invalidates all data cached by the renderer.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Geometry.Shapes.Aabb)">
      <summary>
            Invalidates the specified region in the data cached by the renderer.
            </summary>
      <param name="aabb">The axis-aligned bounding box of the invalid region.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Graphics.TerrainLayer)">
      <summary>
            Invalidates the specified terrain layer in the data cached by the renderer.
            </summary>
      <param name="layer">The terrain layer which should be invalidated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="layer" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.GraphicsException">
        <paramref name="layer" /> does not have a valid AABB. This method cannot be used. Use one of
            the other method overloads instead.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Graphics.TerrainTile)">
      <summary>
            Invalidates the specified terrain tile in the data cached by the renderer.
            </summary>
      <param name="tile">The terrain tile which should be invalidated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tile" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Terrain.Invalidate(DigitalRune.Graphics.TerrainTile,DigitalRune.Graphics.TerrainLayer)">
      <summary>
            Invalidates the specified terrain layer in the data cached by the renderer.
            </summary>
      <param name="tile">The terrain tile owning the terrain layer.</param>
      <param name="layer">The terrain layer which should be invalidated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tile" /> or <paramref name="layer" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Terrain.IsDisposed">
      <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Terrain.Tiles">
      <summary>
            Gets the terrain tiles which define the terrain geometry and materials.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.TerrainClipmap">
      <summary>
            Represents a clipmap which stores terrain data.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainClipmap.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainClipmap" /> class.
            </summary>
      <param name="numberOfTextures">The number of textures in the range [1, 4].</param>
      <param name="format">The texture surface format.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Invalid <paramref name="numberOfTextures" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainClipmap.CellSizes">
      <summary>
            Gets the cell sizes of all clipmap levels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainClipmap.CellsPerLevel">
      <summary>
            Gets or sets the number of cells (texels) per clipmap level.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainClipmap.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.TerrainClipmap" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainClipmap.EnableAnisotropicFiltering">
      <summary>
            Gets or sets a value indicating whether the clipmap is sampled using anisotropic
            filtering.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainClipmap.EnableMipMap">
      <summary>
            Gets or sets a value indicating whether the clipmap textures use mipmaps.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainClipmap.Invalidate">
      <summary>
            Invalidates the cached clipmap.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainClipmap.LevelBias">
      <summary>
            Gets or sets the level bias.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.TerrainClipmap.MaxNumberOfLevels">
      <summary>
            The maximum number of clipmap levels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainClipmap.MinLevel">
      <summary>
            Gets or sets the index of the first level which is actively used.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainClipmap.NumberOfLevels">
      <summary>
            Gets or sets the number of clipmap levels.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is outside the range [1, <see cref="F:DigitalRune.Graphics.TerrainClipmap.MaxNumberOfLevels" />].
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainClipmap.Origins">
      <summary>
            Gets the world space origin of each clipmap level.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainClipmap.Textures">
      <summary>
            Gets the clipmap textures.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.TerrainDecalLayer">
      <summary>
            Represents a decal which is rendered onto the terrain.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainDecalLayer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainDecalLayer" /> class with the default
            material.
            </summary>
      <param name="graphicService">The graphic service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainDecalLayer.#ctor(DigitalRune.Graphics.Material)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainDecalLayer" /> class with a custom
            material.
            </summary>
      <param name="material">The material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="material" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainDecalLayer.Alpha">
      <summary>
            Gets or sets the opacity (alpha). (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainDecalLayer.DiffuseColor">
      <summary>
            Gets or sets the diffuse color.(This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainDecalLayer.DiffuseTexture">
      <summary>
            Gets or sets the diffuse texture. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainDecalLayer.Height">
      <summary>
            Gets or sets the height of the decal in world space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTexture">
      <summary>
            Gets or sets the height texture. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTextureBias">
      <summary>
            Gets or sets the bias that is added to samples of the height texture.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainDecalLayer.HeightTextureScale">
      <summary>
            Gets or sets the scale that is multiplied with samples of the height texture.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainDecalLayer.NormalTexture">
      <summary>
            Gets or sets the normal texture. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainDecalLayer.Pose">
      <summary>
            Gets or sets the pose of the decal.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainDecalLayer.SpecularColor">
      <summary>
            Gets or sets the specular color. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainDecalLayer.SpecularPower">
      <summary>
            Gets or sets the specular color exponent. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainDecalLayer.SpecularTexture">
      <summary>
            Gets or sets the specular texture. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainDecalLayer.Width">
      <summary>
            Gets or sets the width of the decal in world space.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.TerrainHelper">
      <summary>
            Provides helper methods for terrain rendering.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainHelper.CreateHeightTexture(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single[],System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.Texture2D@)">
      <summary>
            Creates a height map which can be used for terrain rendering.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="heights">The heights (= texture content of the first mipmap level).</param>
      <param name="textureWidth">The width of the texture.</param>
      <param name="textureHeight">The height of the texture.</param>
      <param name="useNearestNeighborFilter">
        <see langword="true" /> to use nearest-neighbor filtering (= every second pixel is dropped)
            for creating mipmaps. <see langword="false" /> to use a 3x3 filter (default).
            </param>
      <param name="heightTexture">
            The created height texture. If this parameter is set to a matching texture, then the content
            of this texture is updated and no new texture is created. (If this method is called with a
            texture with wrong size or format, an exception is thrown.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> or <paramref name="heights" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="heightTexture" /> does not match the specified parameters.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainHelper.CreateHoleTexture(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single[],System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.Texture2D@)">
      <summary>
            Creates a hole map which can be used for terrain rendering.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="data">An array with hole information (1 = no hole, 0 = hole).</param>
      <param name="textureWidth">The width of the texture.</param>
      <param name="textureHeight">The height of the texture.</param>
      <param name="useNearestNeighborFilter">
        <see langword="true" /> to use nearest-neighbor filtering (= every second pixel is dropped)
            for creating mipmaps. <see langword="false" /> to use a 3x3 filter (default).
            </param>
      <param name="holeTexture">
            The created height texture. If this parameter is set to a matching texture, then the content
            of this texture is updated and no new texture is created. (If this method is called with a
            texture with wrong size or format, an exception is thrown.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> or <paramref name="data" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="holeTexture" /> does not match the specified parameters.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainHelper.CreateNormalTexture(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single[],System.Int32,System.Int32,System.Single,System.Boolean,Microsoft.Xna.Framework.Graphics.Texture2D@)">
      <summary>
            Creates a normal map which can be used for terrain rendering.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="heights">The terrain heights.</param>
      <param name="textureWidth">The width of the texture.</param>
      <param name="textureHeight">The height of the texture.</param>
      <param name="cellSize">The cell size of the height map.</param>
      <param name="useNearestNeighborFilter">
        <see langword="true" /> to use nearest-neighbor filtering (= every second pixel is dropped)
            for creating mipmaps. <see langword="false" /> to use a 3x3 filter (default).
            </param>
      <param name="normalTexture">
            The created height texture. If this parameter is set to a matching texture, then the content
            of this texture is updated and no new texture is created. (If this method is called with a
            texture with wrong size or format, an exception is thrown.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> or <paramref name="heights" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="normalTexture" /> does not match the specified parameters.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainHelper.GetTextureLevelSingle(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
      <summary>
            Gets the texture data of the specified mipmap level as a <see cref="T:System.Single" /> array.
            </summary>
      <param name="texture">The texture.</param>
      <param name="level">The mipmap level to read. Currently only 0 is supported!</param>
      <returns>
            The array containing the data of the specified mipmap level. 
            (One <see cref="T:System.Single" /> element per pixel. If the texture contains multiple channels,
            only the first channel (red) is copied.)
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="texture" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotImplementedException">
            Invalid mipmap level. Extracting mipmap levels other than 0 is not yet implemented.
            </exception>
      <exception cref="T:System.NotSupportedException">
            Texture format is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainHelper.GetTextureLevelVector4(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
      <summary>
            Gets the texture data of the specified mipmap level as a <see cref="T:Microsoft.Xna.Framework.Vector4" /> array.
            </summary>
      <param name="texture">The texture.</param>
      <param name="level">The mipmap level to read. Currently only 0 is supported!</param>
      <returns>
            The array containing the data of the specified mipmap level.
            (One <see cref="T:Microsoft.Xna.Framework.Vector4" /> element per pixel.)
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="texture" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotImplementedException">
            Invalid mipmap level. Extracting mipmap levels other than 0 is not yet implemented.
            </exception>
      <exception cref="T:System.NotSupportedException">
            Texture format is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainHelper.SetTextureLevel(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,Microsoft.Xna.Framework.Vector4[])">
      <summary>
            Sets the texture data of the specified mipmap level.
            </summary>
      <param name="texture">The texture.</param>
      <param name="level">The mipmap level.</param>
      <param name="data">The data to be copied into the texture.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="texture" /> or <paramref name="data" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            Texture format is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainHelper.SetTextureLevel(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Single[])">
      <summary>
            Sets the texture data of the specified mipmap level.
            </summary>
      <param name="texture">The texture.</param>
      <param name="level">The mipmap level.</param>
      <param name="data">The data to be copied into the texture.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="texture" /> or <paramref name="data" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            Texture format is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainHelper.SmoothTexture(Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32,System.Single)">
      <summary>
            Smooths the texture.
            </summary>
      <param name="data">The texture data of mipmap level 0.</param>
      <param name="textureWidth">The width of the texture.</param>
      <param name="textureHeight">The height of the texture.</param>
      <param name="smoothness">
            The smoothness in the range [0, ∞). (0 means no smoothing. Values greater than 0 means more
            smoothing.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainHelper.SmoothTexture(System.Single[],System.Int32,System.Int32,System.Single)">
      <summary>
            Smooths the texture.
            </summary>
      <param name="data">The texture data of mipmap level 0.</param>
      <param name="textureWidth">The width of the texture.</param>
      <param name="textureHeight">The height of the texture.</param>
      <param name="smoothness">
            The smoothness: 0 means no smoothing. Values greater than 0 means more smoothing.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainHelper.TransformTexture(System.Single[],System.Single,System.Single)">
      <summary>
            Modifies the data of a texture.
            </summary>
      <param name="data">The texture data.</param>
      <param name="scale">The scale factor.</param>
      <param name="bias">The bias which is added to the scaled data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.TerrainLayer">
      <summary>
            Defines a material layer (detail textures, decals, roads, etc.) of the terrain.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainLayer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainLayer" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainLayer.Aabb">
      <summary>
            Gets (or sets) the axis-aligned bounding box of the area that is influenced by this terrain
            layer.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainLayer.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.TerrainLayer" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainLayer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.TerrainLayer" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainLayer.FadeInEnd">
      <summary>
            Gets or sets the clipmap level where the fade-in ends and this terrain layer is fully
            visible. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainLayer.FadeInStart">
      <summary>
            Gets or sets the clipmap level where this terrain layer starts to fade in.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainLayer.FadeOutEnd">
      <summary>
            Gets or sets the clipmap level where the fade-out ends and this terrain layer is not
            rendered anymore. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainLayer.FadeOutStart">
      <summary>
            Gets or sets the clipmap level where this terrain layer starts to fade out.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainLayer.IsDisposed">
      <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainLayer.Material">
      <summary>
            Gets (or sets) the material that is used to render this terrain layer.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <param name="value"> is <see langword="null" />.
            </param>
      </exception>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainLayer.MaterialInstance">
      <summary>
            Gets the material instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.TerrainLayerCollection">
      <summary>
            Manages the layers of a terrain tile.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainLayerCollection.#ctor(DigitalRune.Graphics.TerrainTile)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainLayerCollection" /> class.
            </summary>
      <param name="parent">The terrain tile that owns this collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parent" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainLayerCollection.ClearItems">
      <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainLayerCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.TerrainLayerCollection" />.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> for <see cref="T:DigitalRune.Graphics.TerrainLayerCollection" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainLayerCollection.InsertItem(System.Int32,DigitalRune.Graphics.TerrainLayer)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainLayerCollection.Parent">
      <summary>
            Gets the terrain tile that owns this collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainLayerCollection.RemoveItem(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainLayerCollection.SetItem(System.Int32,DigitalRune.Graphics.TerrainLayer)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.TerrainMaterialLayer">
      <summary>
            Represents a material with tiling textures that are rendered onto the terrain.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainMaterialLayer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer" /> class with the default
            material.
            </summary>
      <param name="graphicService">The graphic service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainMaterialLayer.#ctor(DigitalRune.Graphics.Material)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainMaterialLayer" /> class with a custom
            material.
            </summary>
      <param name="material">The material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="material" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.Alpha">
      <summary>
            Gets or sets the opacity (alpha). (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendHeightInfluence">
      <summary>
            Gets or sets the influence of the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTexture" /> on the blend weight.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendNoiseInfluence">
      <summary>
            Gets or sets the influence of the noise on the blend weight.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendRange">
      <summary>
            Gets or sets the blend range. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTexture">
      <summary>
            Gets or sets the texture which contains the blend weights.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTextureChannel">
      <summary>
            Gets or sets the texture channel of the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendTexture" /> which contains the blend
            weight for this material. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.BlendThreshold">
      <summary>
            Gets or sets the threshold for the blend weights.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.DiffuseColor">
      <summary>
            Gets or sets the diffuse color. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.DiffuseTexture">
      <summary>
            Gets or sets the diffuse texture. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTexture">
      <summary>
            Gets or sets the height texture, which stores relative height values.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTextureBias">
      <summary>
            Gets or sets the bias that is added to samples of the height texture.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.HeightTextureScale">
      <summary>
            Gets or sets the scale that is multiplied with samples of the height texture.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.NoiseTileSize">
      <summary>
            Gets or sets the size of the tiling noise map in world space units.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.NormalTexture">
      <summary>
            Gets or sets the normal texture. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.SpecularColor">
      <summary>
            Gets or sets the specular color. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.SpecularPower">
      <summary>
            Gets or sets the specular color exponent. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.SpecularTexture">
      <summary>
            Gets or sets the specular texture. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainHeightBlendRange">
      <summary>
            Gets or sets the range for terrain height-based blending in world space units.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainHeightMax">
      <summary>
            Gets or sets the max terrain height in world space. The material is not rendered above this
            height. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainHeightMin">
      <summary>
            Gets or sets the min terrain height in world space. The material is not rendered below this
            height. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainSlopeBlendRange">
      <summary>
            Gets or sets the range for terrain slope-based blending in radians.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainSlopeMax">
      <summary>
            Gets or sets the max terrain slope in radians. The material is not rendered if the terrain
            is steeper than this slope. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TerrainSlopeMin">
      <summary>
            Gets or sets the min terrain slope in radians. The material is not rendered if the terrain
            is flatter than this slope. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TileSize">
      <summary>
            Gets or sets the tile size of the textures in world space.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TintStrength">
      <summary>
            Gets or sets the influence of the <see cref="P:DigitalRune.Graphics.TerrainMaterialLayer.TintTexture" />.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TintTexture">
      <summary>
            Gets or sets the tint texture. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainMaterialLayer.TriplanarTightening">
      <summary>
            Gets or sets the tightening factor for triplanar texture mapping. (Use -1 to disable
            triplanar texture mapping. This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.TerrainRoadLayer">
      <summary>
            Represents a road which is rendered onto the terrain.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainRoadLayer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainRoadLayer" /> class with the default
            material.
            </summary>
      <param name="graphicService">The graphic service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.Alpha">
      <summary>
            Gets or sets the opacity (alpha). (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.BorderBlendRange">
      <summary>
            Gets or sets a value which determines how the sides of the road mesh fade out.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainRoadLayer.ClampRoadToTerrain(DigitalRune.Mathematics.Interpolation.Path3F,DigitalRune.Geometry.Shapes.HeightField)">
      <summary>
            Clamps a road path to the terrain height.
            </summary>
      <param name="road">The path that represents the road.</param>
      <param name="terrain">The terrain represented by a <see cref="T:DigitalRune.Geometry.Shapes.HeightField" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="terrain" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainRoadLayer.ClampTerrainToRoad(DigitalRune.Geometry.Shapes.HeightField,DigitalRune.Mathematics.Interpolation.Path3F,System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Clamps the terrain height to the road ("carves the road into the terrain").
            </summary>
      <param name="terrain">The terrain represented by a <see cref="T:DigitalRune.Geometry.Shapes.HeightField" />.</param>
      <param name="road">The path that represents the road.</param>
      <param name="defaultWidth">The default road width.</param>
      <param name="defaultSideFalloff">The default side falloff.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations (used when tessellating the path).
            </param>
      <param name="tolerance">
            The tolerance in world space units (used when tessellating the path).
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="terrain" /> or <paramref name="road" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainRoadLayer.CreateMesh(Microsoft.Xna.Framework.Graphics.GraphicsDevice,DigitalRune.Mathematics.Interpolation.Path3F,System.Single,System.Int32,System.Single,DigitalRune.Graphics.Submesh@,DigitalRune.Geometry.Shapes.Aabb@,System.Single@)">
      <summary>
            Creates a road mesh for use with a <see cref="T:DigitalRune.Graphics.TerrainRoadLayer" />.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="path">The path that represents the road.</param>
      <param name="defaultWidth">The default road width.</param>
      <param name="maxNumberOfIterations">
            The maximum number of iterations (used when tessellating the path).
            </param>
      <param name="tolerance">
            The tolerance in world space units (used when tessellating the path).
            </param>
      <param name="submesh">
            The resulting road mesh - or <see langword="null" /> if <paramref name="path" /> is empty.
            </param>
      <param name="aabb">The axis-aligned bounding box of the road mesh.</param>
      <param name="roadLength">The length of the road.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> or <paramref name="path" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.DiffuseColor">
      <summary>
            Gets or sets the diffuse color. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.DiffuseTexture">
      <summary>
            Gets or sets the diffuse texture. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainRoadLayer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.TerrainLayer" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTexture">
      <summary>
            Gets or sets the height texture. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTextureBias">
      <summary>
            Gets or sets the bias that is added to samples of the height texture.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.HeightTextureScale">
      <summary>
            Gets or sets the scale that is multiplied with samples of the height texture.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.NormalTexture">
      <summary>
            Gets or sets the normal texture. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.RoadLength">
      <summary>
            Gets the length of the road in world space units.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainRoadLayer.SetMesh(DigitalRune.Graphics.Submesh,DigitalRune.Geometry.Shapes.Aabb,System.Single,System.Boolean)">
      <summary>
            Sets the road mesh and related properties.
            </summary>
      <param name="submesh">The submesh that represents the road.</param>
      <param name="aabb">The axis-aligned bounding box of the mesh.</param>
      <param name="roadLength">The length of the road in world space units.</param>
      <param name="disposeWithRoadLayer">
        <see langword="true" /> to automatically dispose of the mesh when the
            <see cref="T:DigitalRune.Graphics.TerrainRoadLayer" /> is disposed of; otherwise, <see langword="false" />.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.SpecularColor">
      <summary>
            Gets or sets the specular color. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.SpecularPower">
      <summary>
            Gets or sets the specular color exponent. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.SpecularTexture">
      <summary>
            Gets or sets the specular texture. (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.Submesh">
      <summary>
            Gets the mesh that represents the road.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadLayer.TileSize">
      <summary>
            Gets or sets the tile size of the road textures in world space.
            (This is a material parameter - see remarks.)
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.TerrainRoadPathKey">
      <summary>
            Defines a <see cref="T:DigitalRune.Mathematics.Interpolation.PathKey3F" /> for a <see cref="T:DigitalRune.Mathematics.Interpolation.Path3F" /> which defines a road.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainRoadPathKey.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainRoadPathKey" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadPathKey.SideFalloff">
      <summary>
            Gets or sets the side falloff.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainRoadPathKey.Width">
      <summary>
            Gets or sets the width of the road.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.TerrainTile">
      <summary>
            Defines the geometry (height, normals, holes) and material of a rectangular terrain region.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainTile.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainTile" /> class with a default
            material.
            </summary>
      <param name="graphicsService">The graphic service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainTile.#ctor(DigitalRune.Graphics.IGraphicsService,DigitalRune.Graphics.Material)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainTile" /> class with the specified
            material.
            </summary>
      <param name="graphicsService">The graphic service.</param>
      <param name="material">The material. Can be <see langword="null" /> - see remarks.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.Aabb">
      <summary>
            Gets the axis-aligned bounding box of the terrain tile. 
            (Vertical min and max values are not set!)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.CellSize">
      <summary>
            Gets or sets the world space size of one cell in the height texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainTile.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.TerrainTile" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainTile.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.TerrainTile" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.HeightTexture">
      <summary>
            Gets or sets the height texture which stores absolute height values in the Red channel.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.HoleTexture">
      <summary>
            Gets or sets the hole texture which stores hole information in the Alpha channel.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainTile.Invalidate">
      <summary>
            Invalidates the terrain tile in the data cached by the renderer.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainTile.Invalidate(DigitalRune.Graphics.TerrainLayer)">
      <summary>
            Invalidates the specified terrain layer in the data cached by the renderer.
            </summary>
      <param name="layer">The terrain layer which should be invalidated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="layer" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.IsDisposed">
      <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.Layers">
      <summary>
            Gets the terrain layers.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.Material">
      <summary>
            Gets or sets the material that is used to render the geometry of this terrain tile.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.MaterialInstance">
      <summary>
            Gets the material instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.NormalTexture">
      <summary>
            Gets or sets the normal texture which stores normal vectors.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainTile.OnCreateMaterial(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Called when a new <see cref="T:DigitalRune.Graphics.TerrainTile" /> is created without explicitly specifying a
            <see cref="P:DigitalRune.Graphics.TerrainTile.Material" />.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The default material.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.OriginX">
      <summary>
            Gets or sets the world space origin of this terrain tile on the x-axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.OriginZ">
      <summary>
            Gets or sets the world space origin of this terrain tile on the z-axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.Terrain">
      <summary>
            Gets the terrain that owns this terrain tile.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.WidthX">
      <summary>
            Gets the world space size of this terrain tile along the x-axis.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TerrainTile.WidthZ">
      <summary>
            Gets the world space size of this terrain tile along the z-axis.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.TerrainTileCollection">
      <summary>
            Manages the tiles of a terrain.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainTileCollection.#ctor(DigitalRune.Graphics.Terrain)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TerrainTileCollection" /> class.
            </summary>
      <param name="owner">The <see cref="T:DigitalRune.Graphics.Terrain" /> that owns this collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainTileCollection.GetParent(DigitalRune.Graphics.TerrainTile)">
      <summary>
            Gets the parent of an object.
            </summary>
      <param name="child">The child object.</param>
      <returns>The parent of <paramref name="child" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.TerrainTileCollection.SetParent(DigitalRune.Graphics.TerrainTile,DigitalRune.Graphics.Terrain)">
      <summary>
            Sets the parent of the given object.
            </summary>
      <param name="child">The child object.</param>
      <param name="parent">The parent to set.</param>
    </member>
    <member name="T:DigitalRune.Graphics.TextBillboard">
      <summary>
            Represents a text, which is rendered as billboard.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TextBillboard.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TextBillboard" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TextBillboard.#ctor(System.Object,Microsoft.Xna.Framework.Graphics.SpriteFont)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TextBillboard" /> class.
            </summary>
      <param name="text">The text. See <see cref="P:DigitalRune.Graphics.TextBillboard.Text" /> for more information.</param>
      <param name="font">The font.</param>
    </member>
    <member name="M:DigitalRune.Graphics.TextBillboard.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Sprite" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Sprite" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.TextBillboard.CloneCore(DigitalRune.Graphics.Billboard)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Billboard" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.TextBillboard.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Billboard" />
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.TextBillboard.Font">
      <summary>
            Gets or sets the font.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TextBillboard.Invalidate">
      <summary>
            Invalidates the text billboard. See remarks.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TextBillboard.Text">
      <summary>
            Gets or sets the text. See remarks.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.TextSprite">
      <summary>
            Represents a 2D text rendered in screen space.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TextSprite.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TextSprite" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TextSprite.#ctor(System.Object,Microsoft.Xna.Framework.Graphics.SpriteFont)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TextSprite" /> class.
            </summary>
      <param name="text">The text. See <see cref="P:DigitalRune.Graphics.TextSprite.Text" /> for more information.</param>
      <param name="font">The font.</param>
    </member>
    <member name="M:DigitalRune.Graphics.TextSprite.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Sprite" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Sprite" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.TextSprite.CloneCore(DigitalRune.Graphics.Sprite)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Sprite" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.TextSprite.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Sprite" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.TextSprite.Font">
      <summary>
            Gets or sets the font.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TextSprite.Text">
      <summary>
            Gets or sets the text. See remarks.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.TextureHelper">
      <summary>
            Provides helper methods for textures.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultNormalTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a 1x1 normal map. The normal vector is (0, 0, 1).
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>
            A 1x1 normal map. The normal stored in the map is (0, 0, 1).
            The returned normal map can be used for effects which expect an uncompressed normal map
            and for effects which expect a DXT5nm normal map.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture2DBlack(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a black 2D texture with 1x1 pixels.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>A black 2D texture with 1x1 pixels.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture2DWhite(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a white 2D texture with 1x1 pixels.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>A white 2D texture with 1x1 pixels.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture3DBlack(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a black 3D texture with 1x1 pixels.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>A black 3D texture with 1x1 pixels.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTexture3DWhite(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a white 3D texture with 1x1 pixels.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>A white 3D texture with 1x1 pixels.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTextureCubeBlack(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a cubemap texture where each face consists of 1 black pixel.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>A cubemap texture where each face consists of 1 black pixel.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetDefaultTextureCubeWhite(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a cubemap texture where each face consists of 1 white pixel.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>A cubemap texture where each face consists of 1 white pixel.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.GetNormalsFittingTexture(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets the normals fitting texture for calculating "best fit" normals.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The normals fitting texture.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.TextureHelper.IsFloatingPointFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>
            Determines whether the specified surface format is a floating-point format.
            </summary>
      <param name="format">The surface format.</param>
      <returns>
        <see langword="true" /> if the specified format is a floating-point format; otherwise, 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Invalid format specified.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.TransformedFigure">
      <summary>
            Represents a figure that is scaled, rotated, or translated in 3D space.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.TransformedFigure.#ctor(DigitalRune.Graphics.Figure)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.TransformedFigure" /> class.
            </summary>
      <param name="child">The figure that is transformed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.TransformedFigure.Child">
      <summary>
            Gets or sets the figure that is transformed.
            </summary>
      <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.TransformedFigure.Pose">
      <summary>
            Gets or sets the pose (position and orientation) that is applied to the figure.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.TransformedFigure.Scale">
      <summary>
            Gets or sets the scale factor that is applied to the figure.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.UserDefinedCloudMap">
      <summary>
            Provides a user-defined cloud texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.UserDefinedCloudMap.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.UserDefinedCloudMap" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.UserDefinedCloudMap.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.UserDefinedCloudMap" /> class.
            </summary>
      <param name="texture">The cloud texture.</param>
    </member>
    <member name="P:DigitalRune.Graphics.UserDefinedCloudMap.Texture">
      <summary>
            Gets or sets the cloud texture.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.UserDefinedWaves">
      <summary>
            Provides a user-defined displacement and normal texture that define the water surface.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.UserDefinedWaves.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.UserDefinedWaves</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.UserDefinedWaves.DisplacementMap">
      <summary>
            Gets or sets the displacement map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.UserDefinedWaves.IsTiling">
      <summary>
            Gets or sets a value indicating whether the displacement map can be tiled seamlessly
            across the water surface.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.UserDefinedWaves.NormalMap">
      <summary>
            Gets or sets the normal map (using standard encoding, see remarks).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.UserDefinedWaves.TileCenter">
      <summary>
            Gets or sets the center of the first tile in world space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.UserDefinedWaves.TileSize">
      <summary>
            Gets or sets the size of a single tile (one texture repetition) in world space.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The tile size must be positive and finite.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.VertexPosition">
      <summary>
            Describes a custom vertex format structure that contains only the vertex position (no normals,
            texture coordinates or other vertex data).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPosition.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexPosition" /> struct.
            </summary>
      <param name="position">The position of the vertex.</param>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPosition.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPosition.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPosition.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
      <summary>
            Gets the vertex declaration.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPosition.op_Equality(DigitalRune.Graphics.VertexPosition,DigitalRune.Graphics.VertexPosition)">
      <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>
        <see langword="true" /> if the objects are the same; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPosition.op_Inequality(DigitalRune.Graphics.VertexPosition,DigitalRune.Graphics.VertexPosition)">
      <summary>
            Compares two objects to determine whether they are different. 
            </summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>
        <see langword="true" /> if the objects are different; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPosition.Position">
      <summary>
            The vertex position.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPosition.SizeInBytes">
      <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.VertexPosition" /> structure in bytes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPosition.ToString">
      <summary>
            Retrieves a string representation of this object.
            </summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPosition.VertexDeclaration">
      <summary>
            The vertex declaration.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.VertexPositionNormal">
      <summary>
            Describes a custom vertex format structure that contains position and normal vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormal.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexPositionNormal" /> struct.
            </summary>
      <param name="position">The position of the vertex.</param>
      <param name="normal">The normal of the vertex.</param>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormal.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormal.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPositionNormal.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
      <summary>
            Gets the vertex declaration.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormal.Normal">
      <summary>
            The vertex normal vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormal.op_Equality(DigitalRune.Graphics.VertexPositionNormal,DigitalRune.Graphics.VertexPositionNormal)">
      <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>
        <see langword="true" /> if the objects are the same; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormal.op_Inequality(DigitalRune.Graphics.VertexPositionNormal,DigitalRune.Graphics.VertexPositionNormal)">
      <summary>
            Compares two objects to determine whether they are different. 
            </summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>
        <see langword="true" /> if the objects are different; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormal.Position">
      <summary>
            The vertex position.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPositionNormal.SizeInBytes">
      <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.VertexPositionNormal" /> structure in bytes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormal.ToString">
      <summary>
            Retrieves a string representation of this object.
            </summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormal.VertexDeclaration">
      <summary>
            The vertex declaration.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.VertexPositionNormalColor">
      <summary>
            Describes a custom vertex format structure that contains position, normal vector and color.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexPositionNormalColor" /> struct.
            </summary>
      <param name="position">The position of the vertex.</param>
      <param name="normal">The normal of the vertex.</param>
      <param name="color">The color of the vertex.</param>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormalColor.Color">
      <summary>
            The vertex color.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPositionNormalColor.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
      <summary>
            Gets the vertex declaration.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormalColor.Normal">
      <summary>
            The vertex normal vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.op_Equality(DigitalRune.Graphics.VertexPositionNormalColor,DigitalRune.Graphics.VertexPositionNormalColor)">
      <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>
        <see langword="true" /> if the objects are the same; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.op_Inequality(DigitalRune.Graphics.VertexPositionNormalColor,DigitalRune.Graphics.VertexPositionNormalColor)">
      <summary>
            Compares two objects to determine whether they are different. 
            </summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>
        <see langword="true" /> if the objects are different; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormalColor.Position">
      <summary>
            The vertex position.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPositionNormalColor.SizeInBytes">
      <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.VertexPositionNormalColor" /> structure in bytes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColor.ToString">
      <summary>
            Retrieves a string representation of this object.
            </summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormalColor.VertexDeclaration">
      <summary>
            The vertex declaration.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.VertexPositionNormalColorTexture">
      <summary>
            Describes a custom vertex format structure that contains position, normal vector, color and
            texture coordinates.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColorTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexPositionNormalColor" /> struct.
            </summary>
      <param name="position">The position of the vertex.</param>
      <param name="normal">The normal of the vertex.</param>
      <param name="color">The color of the vertex.</param>
      <param name="textureCoordinate">The UV texture coordinates.</param>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormalColorTexture.Color">
      <summary>
            The vertex color.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColorTexture.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColorTexture.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPositionNormalColorTexture.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
      <summary>
            Gets the vertex declaration.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormalColorTexture.Normal">
      <summary>
            The vertex normal vector.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColorTexture.op_Equality(DigitalRune.Graphics.VertexPositionNormalColorTexture,DigitalRune.Graphics.VertexPositionNormalColorTexture)">
      <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>
        <see langword="true" /> if the objects are the same; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColorTexture.op_Inequality(DigitalRune.Graphics.VertexPositionNormalColorTexture,DigitalRune.Graphics.VertexPositionNormalColorTexture)">
      <summary>
            Compares two objects to determine whether they are different. 
            </summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>
        <see langword="true" /> if the objects are different; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormalColorTexture.Position">
      <summary>
            The vertex position.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.VertexPositionNormalColorTexture.SizeInBytes">
      <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.VertexPositionNormalColor" /> structure in bytes.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormalColorTexture.TextureCoordinate">
      <summary>
            The UV texture coordinates.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexPositionNormalColorTexture.ToString">
      <summary>
            Retrieves a string representation of this object.
            </summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexPositionNormalColorTexture.VertexDeclaration">
      <summary>
            The vertex declaration.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.VertexTexture">
      <summary>
            Describes a custom vertex format structure that contains only the texture coordinates (no 
            position, normal or other vertex data).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexTexture.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexTexture" /> struct.
            </summary>
      <param name="textureCoordinate">The UV texture coordinate of the vertex.</param>
    </member>
    <member name="M:DigitalRune.Graphics.VertexTexture.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.VertexTexture" /> struct.
            </summary>
      <param name="u">The u texture coordinate.</param>
      <param name="v">The v texture coordinate.</param>
    </member>
    <member name="M:DigitalRune.Graphics.VertexTexture.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexTexture.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.VertexTexture.Microsoft#Xna#Framework#Graphics#IVertexType#VertexDeclaration">
      <summary>
            Gets the vertex declaration.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexTexture.op_Equality(DigitalRune.Graphics.VertexTexture,DigitalRune.Graphics.VertexTexture)">
      <summary>
            Compares two objects to determine whether they are the same. 
            </summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>
        <see langword="true" /> if the objects are the same; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.VertexTexture.op_Inequality(DigitalRune.Graphics.VertexTexture,DigitalRune.Graphics.VertexTexture)">
      <summary>
            Compares two objects to determine whether they are different. 
            </summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>
        <see langword="true" /> if the objects are different; <see langword="false" /> otherwise. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.VertexTexture.SizeInBytes">
      <summary>
            Gets the size of the <see cref="T:DigitalRune.Graphics.VertexTexture" /> structure in bytes.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.VertexTexture.TextureCoordinate">
      <summary>
            The UV texture coordinates.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.VertexTexture.ToString">
      <summary>
            Retrieves a string representation of this object.
            </summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="F:DigitalRune.Graphics.VertexTexture.VertexDeclaration">
      <summary>
            The vertex declaration.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Water">
      <summary>
            Defines the visual properties of a body of water, e.g. a river, a lake or an ocean.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Water.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Water" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.CausticsDistortion">
      <summary>
            Gets or sets the caustics distortion.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.CausticsIntensity">
      <summary>
            Gets or sets the maximal brightness of caustics.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.CausticsPower">
      <summary>
            Gets or sets the sharpness of caustics
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.CausticsSampleCount">
      <summary>
            Gets or sets the number of samples used to compute caustics.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.CausticsSampleOffset">
      <summary>
            Gets or sets the caustics sample offset.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Water.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Water" /> that is a clone (deep copy) of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Water" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Water.CloneCore(DigitalRune.Graphics.Water)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Water" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Water.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:DigitalRune.Graphics.Water" />
            derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Water.FoamColor">
      <summary>
            Gets or sets the color of the foam.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.FoamCrestMax">
      <summary>
            Gets or sets the wave crest height where foam is fully visible.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.FoamCrestMin">
      <summary>
            Gets or sets the wave crest height where foam starts.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.FoamDistortion">
      <summary>
            Gets or sets a factor indicating how much foam is distorted by waves.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.FoamMap">
      <summary>
            Gets or sets the foam map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.FoamMapScale">
      <summary>
            Gets or sets the scale of foam map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.FoamShoreIntersection">
      <summary>
            Gets or sets the amount of foam where the water intersects geometry (e.g. the shore).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.FresnelBias">
      <summary>
            Gets or sets the bias for the Fresnel effect approximation.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.FresnelPower">
      <summary>
            Gets or sets the exponent for the Fresnel effect.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.FresnelScale">
      <summary>
            Gets or sets the scale for the Fresnel effect approximation.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.IntersectionSoftness">
      <summary>
            Gets or sets the intersection softness.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.NormalMap0">
      <summary>
            Gets or sets the first normal map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.NormalMap0Scale">
      <summary>
            Gets or sets the scale of the first normal map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.NormalMap0Strength">
      <summary>
            Gets or sets the strength of the first normal map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.NormalMap0Velocity">
      <summary>
            Gets or sets the scroll velocity of the first normal map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.NormalMap1">
      <summary>
            Gets or sets the second normal map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.NormalMap1Scale">
      <summary>
            Gets or sets the scale of the second normal map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.NormalMap1Strength">
      <summary>
            Gets or sets the strength of the second normal map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.NormalMap1Velocity">
      <summary>
            Gets or sets the scroll velocity of the second normal map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.ReflectionColor">
      <summary>
            Gets or sets the tint color of the reflection.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.ReflectionDistortion">
      <summary>
            Gets or sets the intensity of distortion effects for any reflections.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.RefractionColor">
      <summary>
            Gets or sets the tint color of the refraction.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.RefractionDistortion">
      <summary>
            Gets or sets the intensity of distortion effects for any refractions.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.ScatterColor">
      <summary>
            Gets or sets the color/intensity of subsurface scattering effect.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.SpecularColor">
      <summary>
            Gets or sets the tint color of the specular highlight.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.SpecularPower">
      <summary>
            Gets or sets the specular exponent which defines the size of the specular highlight.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.UnderwaterFogDensity">
      <summary>
            Gets or sets the underwater fog density, which defines how far you can see underwater.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Water.WaterColor">
      <summary>
            Gets or sets the color of the water.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.WaterFlow">
      <summary>
            Defines the direction and speed of water flow.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.WaterFlow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.WaterFlow" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.WaterFlow.BaseVelocity">
      <summary>
            Gets or sets the uniform, constant velocity applied to the whole water surface.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.WaterFlow.CycleDuration">
      <summary>
            Gets or sets the cycle duration in seconds of a normal map layer.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.WaterFlow.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.WaterFlow" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.WaterFlow.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.WaterFlow" /> class 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.WaterFlow.FlowMap">
      <summary>
            Gets or sets the texture which defines the flow direction and speed.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.WaterFlow.FlowMapSpeed">
      <summary>
            Gets or sets the scale factor for flow-map-based flow.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.WaterFlow.MaxSpeed">
      <summary>
            Gets or sets the maximal speed limit.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.WaterFlow.MinStrength">
      <summary>
            Gets or sets the minimum strength of the normal maps.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.WaterFlow.NoiseMapScale">
      <summary>
            Gets or sets the world space scale of the noise map.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.WaterFlow.NoiseMapStrength">
      <summary>
            Gets or sets the noise strength.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.WaterFlow.SurfaceSlopeSpeed">
      <summary>
            Gets or sets the scale factor for surface-slope-based flow.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.WaterWaves">
      <summary>
            Defines a displacement of the water surface to create waves.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.WaterWaves.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.WaterWaves" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.WaterWaves.DisplacementMap">
      <summary>
            Gets (or sets) the displacement map.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.WaterWaves.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.WaterWaves" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.WaterWaves.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.WaterWaves" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.WaterWaves.IsTiling">
      <summary>
            Gets (or sets) a value indicating whether the displacement map can be tiled seamlessly
            across the water surface.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.WaterWaves.NormalMap">
      <summary>
            Gets (or sets) the normal map (using standard encoding, see remarks).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.WaterWaves.TileCenter">
      <summary>
            Gets (or sets) the center of the first tile in world space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.WaterWaves.TileSize">
      <summary>
            Gets (or sets) the size of a single tile (one texture repetition) in world space.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The tile size must be positive and finite.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Content.AssetLoadHelper">
      <summary>
            Helps to determine when an asset with shared resources is fully loaded.
            </summary>
    </member>
    <member name="E:DigitalRune.Graphics.Content.AssetLoadHelper.AssetLoaded">
      <summary>
            Event raised after all fix-up actions were executed and the asset is fully loaded.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Content.AssetLoadHelper.AssetName">
      <summary>
            Gets or sets the name of the asset.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.AssetLoadHelper.Dispose">
      <summary>
            Releases the <see cref="T:DigitalRune.Graphics.Content.AssetLoadHelper" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.AssetLoadHelper.Fixup``1(System.Action{``0})">
      <summary>
            Wraps and registers a fix-up action.
            </summary>
      <param name="fixup">The fix-up action.</param>
      <typeparam name="T">The type of the shared resource.</typeparam>
      <returns>A new action that will call the fix-up action.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Content.AssetLoadHelper.Get(System.String)">
      <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Content.AssetLoadHelper" /> for a specific asset.
            </summary>
      <param name="assetName">
            The name of the asset. (See <see cref="P:Microsoft.Xna.Framework.Content.ContentReader.AssetName" />.)
            </param>
      <returns>The <see cref="T:DigitalRune.Graphics.Content.AssetLoadHelper" /> for the given asset.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assetName" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assetName" /> is empty.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Content.EffectBindingReader">
      <summary>
            Reads an <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> from binary format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.EffectBindingReader.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Content.EffectBindingReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.EffectBindingReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>
            Reads a strongly typed object from the current stream.
            </summary>
      <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader" /> used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
      <returns>The type of object to read.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Content.LodGroupNodeReader">
      <summary>
            Reads a <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode" /> from binary format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.LodGroupNodeReader.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Content.LodGroupNodeReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Content.LodGroupNodeReader.CanDeserializeIntoExistingObject">
      <summary>
            Determines if deserialization into an existing object is possible.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.LodGroupNodeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.SceneGraph.LodGroupNode)">
      <summary>
            Reads a strongly typed object from the current stream.
            </summary>
      <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader" /> used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
      <returns>The type of object to read.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Content.MaterialReader">
      <summary>
            Reads a <see cref="T:DigitalRune.Graphics.Material" /> from binary format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.MaterialReader.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Content.MaterialReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Content.MaterialReader.CanDeserializeIntoExistingObject">
      <summary>
            Determines if deserialization into an existing object is possible.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.MaterialReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.Material)">
      <summary>
            Reads a strongly typed object from the current stream.
            </summary>
      <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader" /> used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
      <returns>The type of object to read.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Content.MeshNodeReader">
      <summary>
            Reads a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode" /> from binary format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.MeshNodeReader.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Content.MeshNodeReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Content.MeshNodeReader.CanDeserializeIntoExistingObject">
      <summary>
            Determines if deserialization into an existing object is possible.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.MeshNodeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.SceneGraph.MeshNode)">
      <summary>
            Reads a strongly typed object from the current stream.
            </summary>
      <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader" /> used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
      <returns>The type of object to read.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Content.MeshReader">
      <summary>
            Reads a <see cref="T:DigitalRune.Graphics.Mesh" /> from binary format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.MeshReader.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Content.MeshReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Content.MeshReader.CanDeserializeIntoExistingObject">
      <summary>
            Determines if deserialization into an existing object is possible.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.MeshReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.Mesh)">
      <summary>
            Reads a strongly typed object from the current stream.
            </summary>
      <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader" /> used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
      <returns>The type of object to read.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Content.ModelNodeReader">
      <summary>
            Reads a <see cref="T:DigitalRune.Graphics.SceneGraph.ModelNode" /> from binary format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.ModelNodeReader.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Content.ModelNodeReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Content.ModelNodeReader.CanDeserializeIntoExistingObject">
      <summary>
            Determines if deserialization into an existing object is possible.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.ModelNodeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.SceneGraph.ModelNode)">
      <summary>
            Reads a strongly typed object from the current stream.
            </summary>
      <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader" /> used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
      <returns>The type of object to read.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Content.MorphTargetReader">
      <summary>
            Reads a <see cref="T:DigitalRune.Graphics.MorphTarget" /> from binary format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.MorphTargetReader.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Content.MorphTargetReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Content.MorphTargetReader.CanDeserializeIntoExistingObject">
      <summary>
            Determines if deserialization into an existing object is possible.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.MorphTargetReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.MorphTarget)">
      <summary>
            Reads a strongly typed object from the current stream.
            </summary>
      <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader" /> used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
      <returns>The type of object to read.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Content.OccluderNodeReader">
      <summary>
            Reads an <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode" /> from binary format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.OccluderNodeReader.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Content.OccluderNodeReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Content.OccluderNodeReader.CanDeserializeIntoExistingObject">
      <summary>
            Determines if deserialization into an existing object is possible.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.OccluderNodeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.SceneGraph.OccluderNode)">
      <summary>
            Reads a strongly typed object from the current stream.
            </summary>
      <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader" /> used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
      <returns>The type of object to read.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Content.OccluderReader">
      <summary>
            Reads an <see cref="T:DigitalRune.Graphics.Occluder" /> from binary format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.OccluderReader.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Content.OccluderReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.OccluderReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.Occluder)">
      <summary>
            Reads a strongly typed object from the current stream.
            </summary>
      <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader" /> used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
      <returns>The type of object to read.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Content.SceneNodeReader">
      <summary>
            Reads a <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> from binary format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.SceneNodeReader.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Content.SceneNodeReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Content.SceneNodeReader.CanDeserializeIntoExistingObject">
      <summary>
            Determines if deserialization into an existing object is possible.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.SceneNodeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Reads a strongly typed object from the current stream.
            </summary>
      <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader" /> used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
      <returns>The type of object to read.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Content.SubmeshReader">
      <summary>
            Reads a <see cref="T:DigitalRune.Graphics.Submesh" /> from binary format.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.SubmeshReader.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Content.SubmeshReader</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Content.SubmeshReader.CanDeserializeIntoExistingObject">
      <summary>
            Determines if deserialization into an existing object is possible.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Content.SubmeshReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Graphics.Submesh)">
      <summary>
            Reads a strongly typed object from the current stream.
            </summary>
      <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader" /> used to read the object.</param>
      <param name="existingInstance">An existing object to read into.</param>
      <returns>The type of object to read.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.AlphaTestEffectBinding">
      <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.AlphaTestEffect" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.AlphaTestEffectBinding" /> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.AlphaTestEffectBinding" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.AlphaFunction">
      <summary>
            Gets or sets the alpha compare function.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Called when the effect technique and parameter bindings should be initialized.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.ReferenceAlpha">
      <summary>
            Gets or sets the reference alpha value.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.AlphaTestEffectBinding.VertexColorEnabled">
      <summary>
            Gets or sets a value indicating whether vertex color is enabled.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.BasicEffectBinding">
      <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.BasicEffect" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.BasicEffectBinding" /> class. (This constructor
            creates an uninitialized instance. Use this constructor only for cloning or other special
            cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.BasicEffectBinding" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.BasicEffectBinding.LightingEnabled">
      <summary>
            Gets or sets a value indicating whether lighting is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.BasicEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Called when the effect technique and parameter bindings should be initialized.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.BasicEffectBinding.PreferPerPixelLighting">
      <summary>
            Gets or sets a value indicating whether per-pixel lighting should be used.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.BasicEffectBinding.TextureEnabled">
      <summary>
            Gets or sets a value indicating whether texturing is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.BasicEffectBinding.VertexColorEnabled">
      <summary>
            Gets or sets a value indicating whether vertex color is enabled.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.ByNameTechniqueBinding">
      <summary>
            Selects the technique where the technique name matches the current technique string of the
            render context (see property <see cref="P:DigitalRune.Graphics.RenderContext.Technique" />).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ByNameTechniqueBinding.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ByNameTechniqueBinding" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1">
      <summary>
            Binds an effect parameter to an array of values.
            </summary>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or 
            other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0[])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="values">The array of values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" />, <paramref name="parameter" />, or <paramref name="values" /> is 
            <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of elements in <paramref name="values" /> does not match the number of elements of
            <paramref name="parameter" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="parameter" /> does not represent an array of values.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1.Values">
      <summary>
            Gets or sets the values of the effect parameter.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1">
      <summary>
            Binds an effect parameter to a value.
            </summary>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="value">The value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.ConstParameterBinding`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.ConstParameterBinding`1.Value">
      <summary>
            Gets or sets the value of the effect parameter.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DefaultEffectBinder">
      <summary>
            Provides the bindings for default effect parameters. 
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DefaultEffectBinder.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DefaultEffectBinder" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DefaultEffectBinder.Debug0">
      <summary>
            Gets or sets the value for effect parameters with the semantic
            <see cref="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Debug" /> and index 0.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DefaultEffectBinder.Debug1">
      <summary>
            Gets or sets the value for effect parameters with the semantic 
            <see cref="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Debug" /> and index 1.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DefaultEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the binding that selects the technique for rendering the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> that selects the technique when
            <paramref name="effect" /> needs to be rendered. The method returns <see langword="null" /> if
            the effect binder is unable to provide a binding.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DefaultEffectInterpreter">
      <summary>
            Provides the descriptions of the default effect parameters.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DefaultEffectInterpreter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DefaultEffectInterpreter" /> class.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics">
      <summary>
            Defines the standard semantics for default effect parameters.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Alpha">
      <summary>
            The opacity (alpha) as a single value (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.BlendMode">
      <summary>
            The blend mode (<see cref="T:System.Single" />): 0 = additive blending, 1 = normal alpha blending
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Bones">
      <summary>
            The skinning matrices for mesh skinning (array of <see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Debug">
      <summary>
            A 4-element vector with user-defined data for debugging (<see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.DiffuseColor">
      <summary>
            The diffuse material color as RGB (<see cref="T:Microsoft.Xna.Framework.Vector3" />) or RGBA (<see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.DiffuseTexture">
      <summary>
            The albedo texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.DitherMap">
      <summary>
            An 8-bit texture (alpha only) with 16x16 dither values (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> or 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.ElapsedTime">
      <summary>
            The time since the previous frame in seconds (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.EmissiveColor">
      <summary>
            The emissive material color as RGB (<see cref="T:Microsoft.Xna.Framework.Vector3" />) or RGBA (<see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.EmissiveTexture">
      <summary>
            The emissive texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.FresnelPower">
      <summary>
            The power of the Fresnel term (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.GBuffer">
      <summary>
            The G-buffer texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> or <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.InstanceAlpha">
      <summary>
            The instance opacity (alpha) as a single value (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.InstanceColor">
      <summary>
            The instance color as RGB (<see cref="T:Microsoft.Xna.Framework.Vector3" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.JitterMap">
      <summary>
            A quadratic RGBA texture (8 bit per channel) with random values (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> or 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.JitterMapSize">
      <summary>
            The width of the quadratic <see cref="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.JitterMap" /> in texels (<see cref="T:System.Single" /> or <see cref="T:Microsoft.Xna.Framework.Vector2" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.LastTime">
      <summary>
            The <see cref="P:DigitalRune.Graphics.RenderContext.Time">simulation time</see> of the previous frame in seconds
            (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.LightBuffer">
      <summary>
            The light buffer texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> or <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.MorphWeight">
      <summary>
            The weight of a morph target (<see cref="T:System.Single" /> or an array of <see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.NaN">
      <summary>
            A value containing <see cref="F:System.Single.NaN" /> (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.NoiseMap">
      <summary>
            A quadratic, tileable RGBA texture (8 bit per channel) with smooth noise values 
            (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> or <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.NormalsFittingTexture">
      <summary>
            The normals fitting texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> or <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />) for encoding
            "best fit" normals.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.NormalTexture">
      <summary>
            The surface normal texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Opacity">
      <summary>
            The opacity (alpha) as a single value (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.PassIndex">
      <summary>
            The zero-based index of the current effect pass (<see cref="T:System.Int32" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.ReferenceAlpha">
      <summary>
            The reference value (<see cref="T:System.Single" />) used for alpha testing.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.SourceTexture">
      <summary>
            The source texture which is usually the last backbuffer or the result of a previous
            post-processor (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.SpecularColor">
      <summary>
            The specular material color as RGB (<see cref="T:Microsoft.Xna.Framework.Vector3" />) or RGBA (<see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.SpecularPower">
      <summary>
            The material specular color exponent as a single value (<see cref="T:System.Single" />) or a
            per-component value (<see cref="T:Microsoft.Xna.Framework.Vector3" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.SpecularTexture">
      <summary>
            The gloss texture (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />) containing the specular intensity (not specular
            power).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.Time">
      <summary>
            The <see cref="P:DigitalRune.Graphics.RenderContext.Time">simulation time</see> in seconds (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.DefaultEffectParameterSemantics.ViewportSize">
      <summary>
            The viewport width and height in pixels (<see cref="T:Microsoft.Xna.Framework.Vector2" />).
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1">
      <summary>
            Binds an effect parameter to an array of values computed by a callback method.
            </summary>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Action{DigitalRune.Graphics.Effects.DelegateParameterArrayBinding{`0},DigitalRune.Graphics.RenderContext,`0[]})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="computeParameter">The callback method that computes the values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" />, <paramref name="parameter" />, or 
            <paramref name="computeParameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="parameter" /> does not represent an array of values.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.ComputeParameter">
      <summary>
            Gets or sets a method that computes the new values for the effect parameter.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1">
      <summary>
            Binds an effect parameter to a value computed by a callback method.
            </summary>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Func{DigitalRune.Graphics.Effects.DelegateParameterBinding{`0},DigitalRune.Graphics.RenderContext,`0})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="computeParameter">The callback method that computes the value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" />, <paramref name="parameter" />, or 
            <paramref name="computeParameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.ComputeParameter">
      <summary>
            Get or sets a method that computes the new value for the effect parameter.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DelegateParameterBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectBinder">
      <summary>
            Creates bindings for effect parameters using dictionaries with factory methods.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Effects.DictionaryEffectBinder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.BoolArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Boolean" />[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.BoolBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Boolean" /> parameters.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateConstParameterBinding``1(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
      <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> for an effect parameter with a
            default value defined in opaque data.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The parameter.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <param name="key">The key of an item in the opaque data.</param>
      <typeparam name="T">The type of the effect parameter.</typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateConstParameterBindingVector3(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
      <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> for an <see cref="T:Microsoft.Xna.Framework.Vector3" />
            effect parameter with a default value defined in opaque data. 
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The parameter.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <param name="key">The key of an item in the opaque data.</param>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateConstParameterBindingVector4(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Single)">
      <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> for an <see cref="T:Microsoft.Xna.Framework.Vector4" />
            effect parameter with a default value defined in opaque data.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The parameter.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <param name="key">The key of an item in the opaque data.</param>
      <param name="defaultW">
            The default value for the fourth vector component. (If the default value in the opaque data
            is of type <strong>Vector3</strong> then the w component of the <see cref="T:Microsoft.Xna.Framework.Vector4" />
            is set to this default value.)
            </param>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateDelegateParameterArrayBinding``1(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Action{DigitalRune.Graphics.Effects.DelegateParameterArrayBinding{``0},DigitalRune.Graphics.RenderContext,``0[]})">
      <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> for an effect parameter that 
            represents an array of values.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="computeParameter">The callback method that computes the values.</param>
      <typeparam name="T">The type of the effect parameter.</typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateDelegateParameterBinding``1(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Func{DigitalRune.Graphics.Effects.DelegateParameterBinding{``0},DigitalRune.Graphics.RenderContext,``0})">
      <summary>
            Creates the <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> for an effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="computeParameter">The callback method that computes the value.</param>
      <typeparam name="T">The type of the effect parameter.</typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the binding that selects the technique for rendering the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> that selects the technique when
            <paramref name="effect" /> needs to be rendered. The method returns <see langword="null" /> if
            the effect binder is unable to provide a binding.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Gets the binding that provides the value for the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> that should be applied to 
            <paramref name="parameter" />, or <see langword="null" /> if the effect binder is unable to 
            provide a binding.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Int32ArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Int32" />[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Int32Bindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Int32" /> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.MatrixArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Matrix" />[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.MatrixBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Matrix" /> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.SingleArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Single" />[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.SingleBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:System.Single" /> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.StructBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <c>struct</c> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Texture2DBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" /> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Texture3DBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture3D" /> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.TextureBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture" /> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.TextureCubeBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube" /> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector2ArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Vector2" />[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector2Bindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Vector2" /> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector3ArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Vector3" />[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector3Bindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Vector3" /> parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector4ArrayBindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />[] parameters.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectBinder.Vector4Bindings">
      <summary>
            Gets or sets the factory methods that create effect parameter bindings for 
            <see cref="T:Microsoft.Xna.Framework.Vector4" /> parameters.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectBinder.CreateEffectParameterBinding">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the given effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <returns>
            The new <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for <paramref name="parameter" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter">
      <summary>
            Provides description of effect techniques and parameters by comparing their names, semantics, 
            and annotations against a dictionary.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Interprets the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The description of the effect parameter, or <see langword="null" /> if the method was not
            able to interpret the effect parameter.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
      <summary>
            Interprets the specified effect technique.
            </summary>
      <param name="effect">The effect.</param>
      <param name="technique">The effect technique.</param>
      <returns>
            The description of the effect technique, or <see langword="null" /> if the method was not
            able to interpret the effect technique.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="technique" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.ParameterDescriptions">
      <summary>
            Gets or sets factory methods for effect parameter descriptions.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.TechniqueDescriptions">
      <summary>
            Gets or sets factory methods for effect technique descriptions.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.CreateEffectParameterDescription">
      <summary>
            Creates the description for the specified effect parameter.
            </summary>
      <param name="parameter">The effect parameter.</param>
      <param name="index">The index.</param>
      <returns>The description of <paramref name="parameter" />.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DictionaryEffectInterpreter.CreateEffectTechniqueDescription">
      <summary>
            Creates the description for the specified effect technique.
            </summary>
      <param name="technique">The effect technique.</param>
      <returns>The description of <paramref name="technique" />.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding">
      <summary>
            Binds an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> to the shadow parameters of a directional
            light shadow map.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding" /> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding.OnApply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be applied.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DirectionalLightShadowParameterBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.DualTextureEffectBinding">
      <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.DualTextureEffect" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DualTextureEffectBinding" /> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.DualTextureEffectBinding" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.DualTextureEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Called when the effect technique and parameter bindings should be initialized.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.DualTextureEffectBinding.VertexColorEnabled">
      <summary>
            Gets or sets a value indicating whether vertex color is enabled.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter">
      <summary>
            Provides the descriptions effects using the <i>DirectX Standard Annotations and Semantics 
            (DXSAS)</i> version 0.8.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Interprets the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The description of the effect parameter, or <see langword="null" /> if the method was not
            able to interpret the effect parameter.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.Dxsas08EffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
      <summary>
            Interprets the specified effect technique.
            </summary>
      <param name="effect">The effect.</param>
      <param name="technique">The effect technique.</param>
      <returns>
            The description of the effect technique, or <see langword="null" /> if the method was not
            able to interpret the effect technique.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="technique" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectBinderCollection">
      <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Effects.IEffectBinder" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinderCollection.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Effects.EffectBinderCollection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinderCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.Effects.EffectBinderCollection" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> for <see cref="T:DigitalRune.Graphics.Effects.EffectBinderCollection" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinderCollection.InsertItem(System.Int32,DigitalRune.Graphics.Effects.IEffectBinder)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. 
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. 
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinderCollection.SetItem(System.Int32,DigitalRune.Graphics.Effects.IEffectBinder)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. 
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. 
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectBinding">
      <summary>
            Provides the logic for rendering a specific 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> class. (This constructor
            creates an uninitialized instance. Use this constructor only for cloning or other special
            cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> class which can store
            all kinds of effect parameters.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="effect">The effect.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> or <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> class which can be used in a 
            <see cref="T:DigitalRune.Graphics.Material" /> (only storing bindings for 
            <see cref="F:DigitalRune.Graphics.Effects.EffectParameterHint.Material" /> parameters).
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="effect">The effect.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> or <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect,System.Collections.Generic.IDictionary{System.String,System.Object},DigitalRune.Graphics.Effects.EffectParameterHint)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> class with the given settings.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="effect">The effect.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <param name="hints">
            A bitwise combination of <see cref="T:DigitalRune.Graphics.Effects.EffectParameterHint" /> values. The value defines which
            parameter bindings can be added to the effect binding.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> or <paramref name="effect" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="effect" /> is an XNA stock effect. The effect binding cannot be used with XNA 
            stock effects.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> that is a clone of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> that is a clone of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.Effect">
      <summary>
            Gets the effect.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.Hints">
      <summary>
            Gets a value indicating which effect parameters are handled by this effect binding.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.KeepOpaqueData">
      <summary>
            Gets or sets a value indicating whether <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.OpaqueData" /> should be kept for 
            debugging.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Called when the effect technique and parameter bindings should be initialized.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.OpaqueData">
      <summary>
            Gets the opaque data (only used for debugging, only set if <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.KeepOpaqueData" /> is 
            <see langword="true" />).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.ParameterBindings">
      <summary>
            Gets the bindings that resolve effect parameters.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(Microsoft.Xna.Framework.Graphics.EffectParameter,System.Action{DigitalRune.Graphics.Effects.DelegateParameterArrayBinding{``0},DigitalRune.Graphics.RenderContext,``0[]})">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> for the specified effect parameter.
            </summary>
      <param name="parameter">The effect parameter to which the binding is applied.</param>
      <param name="computeParameter">
            The callback function that computes the parameter values.
            </param>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(Microsoft.Xna.Framework.Graphics.EffectParameter,System.Func{DigitalRune.Graphics.Effects.DelegateParameterBinding{``0},DigitalRune.Graphics.RenderContext,``0})">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> for the specified effect parameter.
            </summary>
      <param name="parameter">
            The effect parameter to which the binding is applied.
            </param>
      <param name="computeParameter">The callback function that computes the value.</param>
      <typeparam name="T">The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.</typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(Microsoft.Xna.Framework.Graphics.EffectParameter,``0)">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> for the specified effect parameter.
            </summary>
      <param name="parameter">
            The effect parameter to which the binding is applied.
            </param>
      <param name="value">The value.</param>
      <typeparam name="T">The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.</typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(Microsoft.Xna.Framework.Graphics.EffectParameter,``0[])">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> for the specified effect parameter.
            </summary>
      <param name="parameter">
            The effect parameter to which the binding is applied.
            </param>
      <param name="values">The array of values.</param>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(System.String,System.Action{DigitalRune.Graphics.Effects.DelegateParameterArrayBinding{``0},DigitalRune.Graphics.RenderContext,``0[]})">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> for the effect parameter with the 
            specified name.
            </summary>
      <param name="name">
            The name of the effect parameter to which the binding is applied.
            </param>
      <param name="computeParameter">
            The callback function that computes the parameter values.
            </param>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterArrayBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.Effect" /> does not contain an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> with the given name.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(System.String,System.Func{DigitalRune.Graphics.Effects.DelegateParameterBinding{``0},DigitalRune.Graphics.RenderContext,``0})">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> for the effect parameter with the specified
            name.
            </summary>
      <param name="name">
            The name of the effect parameter to which the binding is applied.
            </param>
      <param name="computeParameter">The callback function that computes the value.</param>
      <typeparam name="T">The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.</typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.DelegateParameterBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.Effect" /> does not contain an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> with the given name.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(System.String,``0)">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> for the effect parameter with the specified 
            name.
            </summary>
      <param name="name">
            The name of the effect parameter to which the binding is applied.
            </param>
      <param name="value">The value.</param>
      <typeparam name="T">The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.</typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.Effect" /> does not contain an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> with the given name.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBinding.Set``1(System.String,``0[])">
      <summary>
            Sets a <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> for the effect parameter with the 
            specified name.
            </summary>
      <param name="name">
            The name of the effect parameter to which the binding is applied.
            </param>
      <param name="values">The array of values.</param>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.Effects.ConstParameterArrayBinding`1" /> that has been set.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <see cref="P:DigitalRune.Graphics.Effects.EffectBinding.Effect" /> does not contain an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> with the given name.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.TechniqueBinding">
      <summary>
            Gets or sets the binding that resolves the effect technique.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBinding.UserData">
      <summary>
            Gets or sets user-defined data.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectBindingException">
      <summary>
            Occurs if an effect binding fails.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException" /> class with 
            serialized data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the 
            exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or 
            destination.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException" /> class with a
            specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor(System.String,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException" /> class with a
            specified error message and additional effect information.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="effect">The effect. Can be <see langword="null" />.</param>
      <param name="effectParameter">The effect parameter. Can be <see langword="null" />.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor(System.String,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException" /> class with a
            specified error message, additional effect information and a reference to the inner
            exception that is the cause of this exception.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="effect">The effect. Can be <see langword="null" />.</param>
      <param name="effectParameter">The effect parameter. Can be <see langword="null" />.</param>
      <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null" /> if no
            inner exception is specified.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectBindingException" /> class with a
            specified error message and a reference to the inner exception that is the cause of this
            exception.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null" /> if no
            inner exception is specified.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBindingException.EffectName">
      <summary>
            Gets the name of the effect.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectBindingException.EffectParameterName">
      <summary>
            Gets the name of the effect parameter.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectBindingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with
            information about the exception.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the
            exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or
            destination.
            </param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectHelper">
      <summary>
            Provides extension methods for the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> class and related types.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColor(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as <see cref="T:Microsoft.Xna.Framework.Color" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as <see cref="T:Microsoft.Xna.Framework.Color" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Color" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColorVector3(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a RGB color represented as
            <see cref="T:Microsoft.Xna.Framework.Vector3" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a RGB color represented as
            <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColorVector3F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a RGB color represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a RGB color represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColorVector4(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a RGBA color represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a RGBA color represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetColorVector4F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a RGBA color represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a RGBA color represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetDirectionVector3(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as direction vector represented as 
            <see cref="T:Microsoft.Xna.Framework.Vector3" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as direction vector represented as 
            <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetDirectionVector3F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a direction vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a direction vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetDirectionVector4(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a direction vector represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a direction vector represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetDirectionVector4F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a direction vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a direction vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetParameterBindings(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the default effect parameter bindings of the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>The default effect parameter bindings.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetParameterDescriptions(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the effect parameter descriptions of the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>The effect parameter descriptions.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetPositionVector3(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as position vector represented as 
            <see cref="T:Microsoft.Xna.Framework.Vector3" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as position vector represented as 
            <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetPositionVector3F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a position vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a position vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetPositionVector4(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a position vector represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a position vector represented as
            <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetPositionVector4F(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the value of the effect parameter as a position vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />. 
            </summary>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The value of the effect parameter as a position vector represented as
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </returns>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetTechniqueBinding(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the default effect technique binding of the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>The default effect technique binding.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.GetTechniqueDescriptions(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the technique descriptions of the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>The effect technique descriptions.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Sets the value of the effect parameter to a RGB color.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="color">The color given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Sets the value of the effect parameter to a RGBA color.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="color">The color given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Color)">
      <summary>
            Sets the value of the effect parameter.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="color">The color given as <see cref="T:Microsoft.Xna.Framework.Color" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Color" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets the value of the effect parameter to a RGB color.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="color">The color given as <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector3" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetColor(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector4)">
      <summary>
            Sets the value of the effect parameter to a RGBA color.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="color">The color given as <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetDirection(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Sets the value of the effect parameter to a direction vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="direction">The direction given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetDirection(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Sets the value of the effect parameter to a direction vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="direction">The direction given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetDirection(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets the value of the effect parameter as a direction vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="direction">The direction.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Color" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetDirection(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector4)">
      <summary>
            Sets the value of the effect parameter to a direction vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="direction">The direction given as <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetPosition(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Sets the value of the effect parameter to a position vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="position">The position given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetPosition(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Sets the value of the effect parameter to a position vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="position">The position given as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetPosition(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets the value of the effect parameter as a position vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="position">The position.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Color" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectHelper.SetPosition(Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Vector4)">
      <summary>
            Sets the value of the effect parameter to a position vector.
            </summary>
      <param name="parameter">The parameter.</param>
      <param name="position">The position given as <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
      <exception cref="T:System.InvalidCastException">
            Unable to cast this effect parameter to <see cref="T:Microsoft.Xna.Framework.Vector4" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectInterpreterCollection">
      <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Effects.IEffectInterpreter" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectInterpreterCollection.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Effects.EffectInterpreterCollection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectInterpreterCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectInterpreterCollection" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> for <see cref="T:DigitalRune.Graphics.Effects.EffectInterpreterCollection" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectInterpreterCollection.InsertItem(System.Int32,DigitalRune.Graphics.Effects.IEffectInterpreter)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. 
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. 
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectInterpreterCollection.SetItem(System.Int32,DigitalRune.Graphics.Effects.IEffectInterpreter)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. 
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. 
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1">
      <summary>
            Binds an effect parameter to an array of values of a given type.
            </summary>
      <typeparam name="T">
            The value type. Must be one of the following types: 
            <see cref="T:System.Boolean" />, 
            <see cref="T:System.Int32" />, 
            <see cref="T:Microsoft.Xna.Framework.Matrix" />, 
            <see cref="T:Microsoft.Xna.Framework.Quaternion" />, 
            <see cref="T:System.Single" />, 
            <see cref="T:Microsoft.Xna.Framework.Vector2" />, 
            <see cref="T:Microsoft.Xna.Framework.Vector3" />, 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />, 
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameter" /> has more elements than is supported by the effect parameter.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported or does not match the effect
            parameter.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" /> class with 
            the given value.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="value">The initial value for all elements of the value array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported or does not match the effect
            parameter.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0[])">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" /> class with 
            the given array of values.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="values">The initial values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" />, <paramref name="parameter" />, or <paramref name="values" /> is 
            <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported or does not match the effect
            parameter.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.OnApply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter needs to be applied.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1.Values">
      <summary>
            Gets (or sets) the values of the effect parameter.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterBinding">
      <summary>
            Binds a parameter of an effect to a certain value.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Apply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Applies the value to the effect parameter.
            </summary>
      <param name="context">The render context.</param>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            Unable to apply effect parameter.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> that is a clone of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> that is a clone of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Description">
      <summary>
            Gets the description of the effect parameter.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.OnApply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be applied.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterBinding.Parameter">
      <summary>
            Gets the effect parameter.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding.Update(DigitalRune.Graphics.RenderContext)">
      <summary>
            Updates the value of the binding.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1">
      <summary>
            Binds an effect parameter to a value of a given type.
            </summary>
      <typeparam name="T">
            The value type. Must be one of the following types: 
            <see cref="T:System.Boolean" />, 
            <see cref="T:System.Int32" />, 
            <see cref="T:Microsoft.Xna.Framework.Matrix" />, 
            <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F" />, 
            <see cref="T:Microsoft.Xna.Framework.Quaternion" />, 
            <see cref="T:System.Single" />, 
            <see cref="T:System.String" />, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture" />, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.Texture3D" />, 
            <see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube" />, 
            <see cref="T:Microsoft.Xna.Framework.Vector2" />, 
            <see cref="T:Microsoft.Xna.Framework.Vector3" />, 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />, 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F" />, 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F" />, 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for cloning 
            or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported or does not match the effect
            parameter.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> class with the given 
            value.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="value">The initial value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported or does not match the effect
            parameter.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.OnApply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be applied.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBinding`1.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterBinding`1.Value">
      <summary>
            Gets (or sets) the value of the effect parameter.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection">
      <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Contains(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection" /> contains an 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the specified effect parameter.
            </summary>
      <param name="parameter">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </param>
      <returns>
        <see langword="true" /> if the collection contains a binding for the specified effect 
            parameter; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Contains(System.String)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection" /> contains an 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the effect parameter with the specified name.
            </summary>
      <param name="name">
            The name of the <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> in the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </param>
      <returns>
        <see langword="true" /> if the collection contains a binding for the effect parameter with 
            the given name; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Hints">
      <summary>
            Gets a value indicating which effect parameters can be added to this collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.IndexOf(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Searches for the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> with the specified effect parameter 
            and returns the zero-based index. 
            </summary>
      <param name="parameter">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </param>
      <returns>
            The zero-based index of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> within the entire
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection" />, if found; otherwise, -1. 
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.IndexOf(System.String)">
      <summary>
            Searches for the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the effect parameter with the 
            specified name and returns the zero-based index. 
            </summary>
      <param name="name">
            The name of the <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> in the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </param>
      <returns>
            The zero-based index of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> within the entire
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBindingCollection" />, if found; otherwise, -1. 
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.InsertItem(System.Int32,DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Inserts the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> at the specified index.
            </summary>
      <param name="index">The index.</param>
      <param name="item">The new effect parameter binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> does not belong to the same <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            An <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the same <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> already
            exists.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Item(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the specified effect parameter.
            </summary>
      <param name="parameter"> The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the effect parameter with the specified 
            name.
            </summary>
      <param name="name">The name of the effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Remove(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Removes the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> with the specified effect parameter.
            </summary>
      <param name="parameter">
            The <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> to remove.
            </param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> was removed successfully; 
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.Remove(System.String)">
      <summary>
            Removes the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the effect parameter with the specified 
            name.
            </summary>
      <param name="name">
            The name of the <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> in the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> to
            remove.
            </param>
      <returns>
        <see langword="true" /> if the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> was removed successfully; 
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is empty.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterBindingCollection.SetItem(System.Int32,DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Sets the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> at the specified index.
            </summary>
      <param name="index">The index of the effect parameter binding.</param>
      <param name="item">The new effect parameter binding.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> does not belong to the same <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            An <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> for the same <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> already
            exists.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterDescription">
      <summary>
            Describes a parameter of an effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescription.#ctor(Microsoft.Xna.Framework.Graphics.EffectParameter,System.String,System.Int32,DigitalRune.Graphics.Effects.EffectParameterHint)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription" /> class.
            </summary>
      <param name="parameter">The effect parameter.</param>
      <param name="semantic">The semantic.</param>
      <param name="index">The index.</param>
      <param name="hint">
            A value indicating how the effect parameter should be treated during state sorting.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Invalid <paramref name="index" />. Allowed values are -1, 0, and positive numbers.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hint" /> is invalid.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Hint">
      <summary>
            Gets a value indicating how the effect parameter should be treated during state sorting.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Index">
      <summary>
            Gets the zero-based index.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is out of range. Allowed values are -1, 0, and positive numbers.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Parameter">
      <summary>
            Gets the effect parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectParameterDescription.Semantic">
      <summary>
            Gets the standard semantic (case-sensitive).
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection">
      <summary>
            Stores an <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescription" /> for all parameters of an effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectParameterDescriptionCollection.TryGet(Microsoft.Xna.Framework.Graphics.EffectParameter,DigitalRune.Graphics.Effects.EffectParameterDescription@)">
      <summary>
            Gets the description for the specified effect parameter.
            </summary>
      <param name="parameter">The effect parameter.</param>
      <param name="description">
            The description for the specified effect parameter, if the parameter is found; otherwise, 
            <see langword="null" />.
            </param>
      <returns>
        <see langword="true" /> if the collection contains a description for the effect parameter; 
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectParameterHint">
      <summary>
            Indicates how an effect parameter should be treated during state sorting.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.PerPass">
      <summary>
            The effect parameter needs to be updated and applied once per effect pass. Examples for 
            per-pass parameters are: pass index.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.PerInstance">
      <summary>
            The effect parameter is unique for each mesh instance. Examples for instance parameters are: 
            world matrix.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.Local">
      <summary>
            The effect parameter depends on the location of the mesh in the scene. Multiple meshes which
            are close to each other in the scene may share the same parameter values. Examples of local 
            parameters are: local environment maps, local lights, etc.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.Material">
      <summary>
            The effect parameter defines the material of a mesh. Multiple meshes can share the same 
            material. Material parameters are independent of the location of the object in the scene. 
            Examples of material parameters are: diffuse color, albedo texture, specular color, gloss 
            texture, normal map, etc.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.Global">
      <summary>
            The effect parameter is identical for all meshes that use the same effect/technique. They do
            not depend on the object that is being rendered or on the location of the object in the 
            scene. Examples of global parameters are: view matrix, projection matrix, camera position, 
            etc.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectParameterHint.Any">
      <summary>
            Any of the other values.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectPassBinding">
      <summary>
            Selects the effect passes and determines the order in which they need to be applied.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.Equals(DigitalRune.Graphics.Effects.EffectPassBinding)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> 
            parameter; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to this 
            instance; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through all effect passes of the current effect 
            technique.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate the effect passes of the 
            current effect technique.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Graphics.Effects.EffectPassBinding" /> is invalid.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures 
            like a hash table.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.op_Equality(DigitalRune.Graphics.Effects.EffectPassBinding,DigitalRune.Graphics.Effects.EffectPassBinding)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.Effects.EffectPassBinding" />s to determine whether they are the same.
            </summary>
      <param name="left">The first effect pass binding.</param>
      <param name="right">The second effect pass binding.</param>
      <returns>
        <see langword="true" /> if the effect pass bindings are equal; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.op_Inequality(DigitalRune.Graphics.Effects.EffectPassBinding,DigitalRune.Graphics.Effects.EffectPassBinding)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.Effects.EffectPassBinding" />s to determine whether they are different.
            </summary>
      <param name="left">The first effect pass binding.</param>
      <param name="right">The second effect pass binding.</param>
      <returns>
        <see langword="true" /> if the effect pass bindings are different; otherwise 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.System#Collections#Generic#IEnumerable{Microsoft#Xna#Framework#Graphics#EffectPass}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectPassBinding.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectPassEnumerator">
      <summary>
            Iterates the effect passes of the current technique in the order determined by the effect pass
            binding.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectPassEnumerator.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectPassEnumerator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectPassEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; 
            <see langword="false" /> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Graphics.Effects.EffectPassBinding" /> is invalid.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectPassEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            collection.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectPassEnumerator.System#Collections#IEnumerator#Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding">
      <summary>
            Selects a technique when rendering a certain effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Effects.EffectTechniqueBinding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> that is a clone of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> that is a clone of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CloneCore(DigitalRune.Graphics.Effects.EffectTechniqueBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Default">
      <summary>
            The default effect technique binding.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.GetPassBinding(Microsoft.Xna.Framework.Graphics.EffectTechnique,DigitalRune.Graphics.RenderContext)">
      <summary>
            Gets the effect pass binding for the specified effect technique.
            </summary>
      <param name="technique">The effect technique.</param>
      <param name="context">The render context.</param>
      <returns>The effect pass binding.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.GetTechnique(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)">
      <summary>
            Gets the effect technique that should be used for rendering.
            </summary>
      <param name="effect">The effect.</param>
      <param name="context">The render context.</param>
      <returns>The effect technique that should be used for rendering.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Id">
      <summary>
            Gets (or sets) an ID, which can be used for state-sorting.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.OnGetTechnique(Microsoft.Xna.Framework.Graphics.Effect,DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect technique that should be used for rendering should be returned.
            </summary>
      <param name="effect">The effect.</param>
      <param name="context">The render context.</param>
      <returns>The effect technique that should be used for rendering.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.OnNextPass(Microsoft.Xna.Framework.Graphics.EffectTechnique,DigitalRune.Graphics.RenderContext,System.Int32@,Microsoft.Xna.Framework.Graphics.EffectPass@)">
      <summary>
            Called when next effect pass needs to be selected.
            </summary>
      <param name="technique">The current effect technique.</param>
      <param name="context">The render context.</param>
      <param name="index">The index of the next effect pass to be applied.</param>
      <param name="pass">The effect pass.</param>
      <returns>
        <see langword="true" /> if the next effect pass has been selected and should be applied; 
            otherwise, <see langword="false" /> if the are no more passes.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect technique needs to be selected and <see cref="P:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Id" /> needs to be set.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueBinding.Update(DigitalRune.Graphics.RenderContext)">
      <summary>
            Selects a technique for rendering the specified effect and sets the ID.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription">
      <summary>
            Describes a technique of an effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescription.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="technique">The effect technique.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="technique" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueDescription.Index">
      <summary>
            Gets the index of the effect technique.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueDescription.InstancingTechnique">
      <summary>
            Gets the associated effect technique that supports hardware instancing.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueDescription.Technique">
      <summary>
            Gets the effect technique.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection">
      <summary>
            Stores an <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription" /> for all techniques of an effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.EffectTechniqueDescriptionCollection.Item(Microsoft.Xna.Framework.Graphics.EffectTechnique)">
      <summary>
            Gets the <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueDescription" /> for the specified technique.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding">
      <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding" /> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.EnvironmentMapEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Called when the effect technique and parameter bindings should be initialized.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.IEffectBinder">
      <summary>
            Creates bindings for effect techniques and parameters.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.IEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the binding that selects the technique for rendering the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> that selects the technique when
            <paramref name="effect" /> needs to be rendered. The method returns <see langword="null" /> if
            the effect binder is unable to provide a binding.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.IEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Gets the binding that provides the value for the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> that should be applied to 
            <paramref name="parameter" />, or <see langword="null" /> if the effect binder is unable to 
            provide a binding.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.IEffectInterpreter">
      <summary>
            Interprets effects and provides descriptions for effect techniques and parameters.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.IEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Interprets the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The description of the effect parameter, or <see langword="null" /> if the method was not
            able to interpret the effect parameter.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.IEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
      <summary>
            Interprets the specified effect technique.
            </summary>
      <param name="effect">The effect.</param>
      <param name="technique">The effect technique.</param>
      <returns>
            The description of the effect technique, or <see langword="null" /> if the method was not
            able to interpret the effect technique.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="technique" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1">
      <summary>
            Empty binding for effect parameter array. Does nothing.
            </summary>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterArrayBinding`1" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1" /> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterArrayBinding`1.OnApply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter needs to be applied.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.NullParameterBinding`1">
      <summary>
            Empty binding for effect parameter. Does nothing.
            </summary>
      <typeparam name="T">
            The value type. See <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding`1" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterBinding`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterBinding`1" /> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterBinding`1.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.NullParameterBinding`1" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.Effects.EffectBindingException">
            The value type <typeparamref name="T" /> is not supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterBinding`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.NullParameterBinding`1.OnApply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be applied.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.SceneEffectBinder">
      <summary>
            Provides effect bindings for rendering a <see cref="T:DigitalRune.Graphics.SceneGraph.IScene" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SceneEffectBinder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SceneEffectBinder" /> class.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.SceneEffectInterpreter">
      <summary>
            Provides the descriptions for effects used in a <see cref="T:DigitalRune.Graphics.SceneGraph.IScene" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SceneEffectInterpreter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SceneEffectInterpreter" /> class.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics">
      <summary>
            Defines the standard semantics for effect parameters used in a <see cref="T:DigitalRune.Graphics.SceneGraph.IScene" />.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.AmbientLight">
      <summary>
            The intensity of an ambient light (RGB as <see cref="T:Microsoft.Xna.Framework.Vector3" /> or RGBA as 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.AmbientLightAttenuation">
      <summary>
            The hemispheric attenuation factor of the ambient light (<see cref="T:System.Single" />).
            (0 = pure ambient, no hemispheric lighting; 1 = one-sided hemispheric lighting)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.AmbientLightUp">
      <summary>
            The up vector of the ambient light in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" />
            or <see cref="T:Microsoft.Xna.Framework.Vector4" />). (Used for hemispheric attenuation 
            <see cref="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.AmbientLightAttenuation" />.)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.Bones">
      <summary>
            The skinning matrices for mesh skinning (array of <see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.CameraDirection">
      <summary>
            The camera direction in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.CameraFar">
      <summary>
            The distance of the camera far plane (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.CameraNear">
      <summary>
            The distance of the camera near plane (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.CameraPosition">
      <summary>
            The camera position in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DecalAlpha">
      <summary>
            The opacity of the decal (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DecalNormalThreshold">
      <summary>
            The normal threshold of the decal given as cos(α) (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DecalOptions">
      <summary>
            The decal options.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DecalOrientation">
      <summary>
            The orientation of the decal (= z-axis in world space, <see cref="T:Microsoft.Xna.Framework.Vector3" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightDiffuse">
      <summary>
            The diffuse intensity of a directional light (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightDirection">
      <summary>
            The light direction in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowCascadeDistances">
      <summary>
            The cascade split distances of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowDepthBias">
      <summary>
            The depth bias of each cascade of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowDepthBiasOffset">
      <summary>
            The depth bias offset of each cascade of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowDepthBiasScale">
      <summary>
            The depth bias scale of each cascade of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowFadeOutDistance">
      <summary>
            The distance where a directional light shadow starts to fade out (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowFadeOutRange">
      <summary>
            The relative range over which directional light shadows are faded out
            (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowFilterRadius">
      <summary>
            The filter radius of a directional light shadow (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowFog">
      <summary>
            The shadow factor that is used beyond the maximum distance of a directional light shadow 
            (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowJitterResolution">
      <summary>
            The jitter resolution (for jitter sampling) of a directional light shadow 
            (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowMap">
      <summary>
            The shadow map of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowMapSize">
      <summary>
            The shadow map size of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Vector2" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowMaxDistance">
      <summary>
            The maximum distance up to which a directional light shadow is rendered 
            (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowNormalOffset">
      <summary>
            The normal offset of each cascade of a directional light shadow (<see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowNumberOfCascades">
      <summary>
            The number of cascades of a directional light shadow (<see cref="T:System.Int32" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowParameters">
      <summary>
            The shadow parameters of a directional light shadow.
            (The type is either struct <c>ShadowParameters</c> as defined in ShadowMap.fxh
            or struct <c>CascadedShadowParameters</c> as defined in CascadedShadowMap.fxh.)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightShadowViewProjections">
      <summary>
            The transform matrices of a directional light shadow (array of <see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightSpecular">
      <summary>
            The specular intensity of a directional light (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightTexture">
      <summary>
            The texture of a directional light (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightTextureMatrix">
      <summary>
            The texture matrix of a directional light which converts positions from world
            space to the texture space of the light (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightTextureOffset">
      <summary>
            The texture offset of a directional light (<see cref="T:Microsoft.Xna.Framework.Vector2" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.DirectionalLightTextureScale">
      <summary>
            The texture scale of a directional light (<see cref="T:Microsoft.Xna.Framework.Vector2" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.EnvironmentMap">
      <summary>
            The cube map texture containing the environment (<see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube" />).
            (Environment cube maps in a scene are defined using <see cref="T:DigitalRune.Graphics.ImageBasedLight" />s.)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.EnvironmentMapDiffuse">
      <summary>
            The intensity of diffuse environment map reflections (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.EnvironmentMapMatrix">
      <summary>
            The texture matrix of the environment map which converts positions from world
            space to the texture space of the cube map (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.EnvironmentMapRgbmMax">
      <summary>
            The max value (see also <see cref="P:DigitalRune.Graphics.RgbmEncoding.Max" />) of the RGBM encoding in gamma
            space (<see cref="T:System.Single" />). If the environment map is encoded using sRGB, this value
            is 1. 
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.EnvironmentMapSize">
      <summary>
            The side length of one cube map face of the environment map in texels (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.EnvironmentMapSpecular">
      <summary>
            The intensity of specular environment map reflections (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.FogColor">
      <summary>
            The fog color (RGBA as <see cref="T:Microsoft.Xna.Framework.Vector4" />). 
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.FogDensity">
      <summary>
            The density of the fog (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.FogEnd">
      <summary>
            The end distance of the fog (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.FogParameters">
      <summary>
            The combined parameters of the fog; a <see cref="T:Microsoft.Xna.Framework.Vector4" /> containing:
            (start distance, end distance or 1 / density, fog curve exponent, height falloff).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.FogStart">
      <summary>
            The start distance of the fog (<see cref="T:System.Single" />). 
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastCameraDirection">
      <summary>
            The camera direction of the last frame in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastCameraPosition">
      <summary>
            The camera position of the last frame in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastPosition">
      <summary>
            The position of the object in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />)
            of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastProjection">
      <summary>
            The projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastProjectionInverse">
      <summary>
            The inverse projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastProjectionInverseTranspose">
      <summary>
            The transpose of the inverse projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastProjectionTranspose">
      <summary>
            The transpose of the projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastView">
      <summary>
            The view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewInverse">
      <summary>
            The inverse view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewInverseTranspose">
      <summary>
            The transpose of the inverse view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewProjection">
      <summary>
            The view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewProjectionInverse">
      <summary>
            The inverse view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewProjectionInverseTranspose">
      <summary>
            The transpose of the inverse view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewProjectionTranspose">
      <summary>
            The transpose of the view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastViewTranspose">
      <summary>
            The transpose of the view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorld">
      <summary>
            The world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldInverse">
      <summary>
            The inverse world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldInverseTranspose">
      <summary>
            The transpose of the inverse world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldTranspose">
      <summary>
            The transpose of the world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldView">
      <summary>
            The world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewInverse">
      <summary>
            The inverse world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewInverseTranspose">
      <summary>
            The transpose of the inverse world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewProjection">
      <summary>
            The world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewProjectionInverse">
      <summary>
            The inverse world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewProjectionInverseTranspose">
      <summary>
            The transpose of the inverse world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewProjectionTranspose">
      <summary>
            The transpose of the world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LastWorldViewTranspose">
      <summary>
            The transpose of the world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />) of the last frame.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.LodCameraPosition">
      <summary>
            The position of the camera used as reference for LOD calculations (<see cref="T:Microsoft.Xna.Framework.Vector3" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightAttenuation">
      <summary>
            The attenuation exponent of a point light (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightDiffuse">
      <summary>
            The diffuse intensity of a point light (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightPosition">
      <summary>
            The position of a point light in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightRange">
      <summary>
            The range of a point light (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightSpecular">
      <summary>
            The specular intensity of a point light (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightTexture">
      <summary>
            The texture of a point light (<see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.PointLightTextureMatrix">
      <summary>
            The texture matrix of a point light which converts directions from world
            space to the texture space of the light (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.Position">
      <summary>
            The position of the object in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.Projection">
      <summary>
            The projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectionInverse">
      <summary>
            The inverse projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectionInverseTranspose">
      <summary>
            The transpose of the inverse projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectionTranspose">
      <summary>
            The transpose of the projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightAttenuation">
      <summary>
            The attenuation exponent of a projector light (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightDiffuse">
      <summary>
            The diffuse intensity of a projector light (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightDirection">
      <summary>
            The direction of a projector light in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightPosition">
      <summary>
            The position of a projector light in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightRange">
      <summary>
            The range of a projector light (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightSpecular">
      <summary>
            The specular intensity of a projector light (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightTexture">
      <summary>
            The texture that is projected by the projector light.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightTextureMatrix">
      <summary>
            The texture matrix of a projector light which converts positions from world
            space to the texture space of the light (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ProjectorLightViewProjection">
      <summary>
            The view-projection matrix of the projector light.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ShadowFar">
      <summary>
            The distance to the far plane of the shadow projection (<see cref="T:System.Single" />). (Only valid
            during shadow map creation.)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ShadowNear">
      <summary>
            The distance to the near plane of the shadow projection (<see cref="T:System.Single" />). (Only valid
            during shadow map creation.)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightAttenuation">
      <summary>
            The attenuation exponent of a spotlight (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightCutoffAngle">
      <summary>
            The cutoff (penumbra) angle of the spotlight in radians (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightDiffuse">
      <summary>
            The diffuse intensity of a spotlight (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightDirection">
      <summary>
            The direction of a spotlight in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightFalloffAngle">
      <summary>
            The falloff (umbra) angle of the spotlight in radians (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightPosition">
      <summary>
            The position of a spotlight in world space (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or 
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightRange">
      <summary>
            The range of a spotlight (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightSpecular">
      <summary>
            The specular intensity of a spotlight (<see cref="T:Microsoft.Xna.Framework.Vector3" /> or <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightTexture">
      <summary>
            The texture of a spotlight (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.SpotlightTextureMatrix">
      <summary>
            The texture matrix of a spotlight which converts positions from world
            space to the texture space of the light (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.UnscaledWorld">
      <summary>
            Same as <see cref="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.World" />, except that the matrix does not contain any scale factors.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.UnscaledWorldView">
      <summary>
            Same as <see cref="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldView" />, except that the matrix does not contain any scale factors.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.View">
      <summary>
            The view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewInverse">
      <summary>
            The inverse of the view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewInverseTranspose">
      <summary>
            The transpose of the inverse view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewProjection">
      <summary>
            The view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewProjectionInverse">
      <summary>
            The inverse view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewProjectionInverseTranspose">
      <summary>
            The transpose of the inverse view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewProjectionTranspose">
      <summary>
            The transpose of the view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.ViewTranspose">
      <summary>
            The transpose of the view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.World">
      <summary>
            The world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldInverse">
      <summary>
            The inverse world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldInverseTranspose">
      <summary>
            The transpose of the inverse world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldTranspose">
      <summary>
            The transpose of the world matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldView">
      <summary>
            The world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewInverse">
      <summary>
            The inverse world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewInverseTranspose">
      <summary>
            The transpose of the inverse world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewProjection">
      <summary>
            The world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewProjectionInverse">
      <summary>
            The inverse world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewProjectionInverseTranspose">
      <summary>
            The transpose of the inverse world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewProjectionTranspose">
      <summary>
            The transpose of the world-view-projection matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.SceneEffectParameterSemantics.WorldViewTranspose">
      <summary>
            The transpose of the world-view matrix (<see cref="T:Microsoft.Xna.Framework.Matrix" />).
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding">
      <summary>
            Binds an <see cref="T:Microsoft.Xna.Framework.Graphics.EffectParameter" /> to the skinning matrices of <see cref="T:DigitalRune.Animation.Character.SkeletonPose" />
            of the current <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding" /> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding" /> class.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.CloneCore(DigitalRune.Graphics.Effects.EffectParameterBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.OnApply(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be applied.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.OnUpdate(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the effect parameter value needs to be updated.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.SkeletonPoseParameterBinding.Value">
      <summary>
            Gets or sets the skeleton pose.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.SkinnedEffectBinding">
      <summary>
            Provides the logic for the <see cref="T:Microsoft.Xna.Framework.Graphics.SkinnedEffect" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkinnedEffectBinding" /> class. (This
            constructor creates an uninitialized instance. Use this constructor only for cloning or
            other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.#ctor(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.SkinnedEffectBinding" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.CloneCore(DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.Effects.EffectBinding" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.SkinnedEffectBinding.OnInitializeBindings(DigitalRune.Graphics.IGraphicsService,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Called when the effect technique and parameter bindings should be initialized.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.SkinnedEffectBinding.PreferPerPixelLighting">
      <summary>
            Gets or sets a value indicating whether per-pixel lighting should be used.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Effects.SkinnedEffectBinding.WeightsPerVertex">
      <summary>
            Gets or sets the max number of bone weights per vertex.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.StockEffectBinder">
      <summary>
            Provides bindings for the XNA stock effects.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.StockEffectBinder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Effects.StockEffectBinder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.StockEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Gets the binding that selects the technique for rendering the specified effect.
            </summary>
      <param name="effect">The effect.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectTechniqueBinding" /> that selects the technique when
            <paramref name="effect" /> needs to be rendered. The method returns <see langword="null" /> if
            the effect binder is unable to provide a binding.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.StockEffectBinder.GetBinding(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Gets the binding that provides the value for the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <param name="opaqueData">The opaque data. Can be <see langword="null" />.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Effects.EffectParameterBinding" /> that should be applied to 
            <paramref name="parameter" />, or <see langword="null" /> if the effect binder is unable to 
            provide a binding.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.StockEffectInterpreter">
      <summary>
            Provides the descriptions for XNA stock effects.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.StockEffectInterpreter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.StockEffectInterpreter" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.StockEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>
            Interprets the specified effect parameter.
            </summary>
      <param name="effect">The effect.</param>
      <param name="parameter">The effect parameter.</param>
      <returns>
            The description of the effect parameter, or <see langword="null" /> if the method was not
            able to interpret the effect parameter.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="parameter" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.StockEffectInterpreter.GetDescription(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.EffectTechnique)">
      <summary>
            Interprets the specified effect technique.
            </summary>
      <param name="effect">The effect.</param>
      <param name="technique">The effect technique.</param>
      <returns>
            The description of the effect technique, or <see langword="null" /> if the method was not
            able to interpret the effect technique.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="effect" /> or <paramref name="technique" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.TerrainEffectBinder">
      <summary>
            Provides effect bindings for rendering a <see cref="T:DigitalRune.Graphics.Terrain" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.TerrainEffectBinder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.TerrainEffectBinder" /> class.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.TerrainEffectInterpreter">
      <summary>
            Provides the descriptions for effects used by the <see cref="T:DigitalRune.Graphics.Terrain" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Effects.TerrainEffectInterpreter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Effects.TerrainEffectInterpreter" /> class.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics">
      <summary>
            Defines the semantics for effect parameters used by the <see cref="T:DigitalRune.Graphics.Terrain" />.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmap">
      <summary>
            The n-th texture in the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap" /> (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmapCellSize">
      <summary>
            The cell size of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap" /> (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmapCellsPerLevel">
      <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.CellsPerLevel" /> of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap" />
            (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmapLevelBias">
      <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.LevelBias" /> of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap" />
            (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmapNumberOfColumns">
      <summary>
            The number of texture atlas columns in the  <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap" /> 
            (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmapNumberOfLevels">
      <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.NumberOfLevels" /> in the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap" />
            (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainBaseClipmapOrigins">
      <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.Origins" /> of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap" />
            (array of <see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainClearValues">
      <summary>
            The clear values written into the <see cref="T:DigitalRune.Graphics.TerrainClipmap" /> (array of
            <see cref="T:Microsoft.Xna.Framework.Vector4" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmap">
      <summary>
            The n-th texture in the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap" /> (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapCellSizes">
      <summary>
            The cell sizes of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap" /> (array of <see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapCellsPerLevel">
      <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.CellsPerLevel" /> of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap" />
            (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapLevelBias">
      <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.LevelBias" /> of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap" />
            (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapNumberOfColumns">
      <summary>
            The number of texture atlas columns in the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap" /> 
            (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapNumberOfLevels">
      <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.NumberOfLevels" /> in the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap" />
            (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapOffsets">
      <summary>
            The offsets (for toroidal wrapping) of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap" /> 
            (array of <see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailClipmapOrigins">
      <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.Origins" /> of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap" />
            (array of <see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainDetailFadeRange">
      <summary>
            The <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailFadeRange" /> (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainEnableAnisotropicFiltering">
      <summary>
            The <see cref="P:DigitalRune.Graphics.TerrainClipmap.EnableAnisotropicFiltering" /> flag of the
            <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap" /> (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainHoleThreshold">
      <summary>
            The threshold used to check for holes in the terrain (<see cref="T:System.Single" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileHeightTexture">
      <summary>
            The height texture of the terrain tile which stores absolute height values in the Red
            channel (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileHeightTextureSize">
      <summary>
            The size of the <see cref="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileHeightTexture" /> in texels (<see cref="T:Microsoft.Xna.Framework.Vector2" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileHoleTexture">
      <summary>
            The hole texture of the terrain tile which stores hole information in the Alpha channel
            (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileHoleTextureSize">
      <summary>
            The size of the <see cref="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileHoleTexture" /> in texels (<see cref="T:Microsoft.Xna.Framework.Vector2" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileNormalTexture">
      <summary>
            The normal texture of the terrain tile which store normal vectors (<see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileNormalTextureSize">
      <summary>
            The size of the <see cref="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileNormalTexture" /> in texels (<see cref="T:Microsoft.Xna.Framework.Vector2" />).
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileOrigin">
      <summary>
            The world space origin (<see cref="P:DigitalRune.Graphics.TerrainTile.OriginX" />, <see cref="P:DigitalRune.Graphics.TerrainTile.OriginZ" />)
            of the terrain tile given as <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Effects.TerrainEffectParameterSemantics.TerrainTileSize">
      <summary>
            The world space size (<see cref="P:DigitalRune.Graphics.TerrainTile.WidthX" />, <see cref="P:DigitalRune.Graphics.TerrainTile.WidthZ" />)
            of the terrain tile given as <see cref="T:Microsoft.Xna.Framework.Vector2" />.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Interop.D3DImagePresentationTarget">
      <summary>
            A WPF control that implements <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget" /> to host a 3D view.
            (Only available in MonoGame-compatible builds.)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Interop.D3DImagePresentationTarget" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#BeginRender(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called by the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> before rendering into the presentation target.
            </summary>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if successful; otherwise, <see langword="false" /> if the presentation
            target is not available.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#EndRender(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called by the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> after rendering into the presentation target.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#GraphicsService">
      <summary>
            Gets or sets the graphics service.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Handle">
      <summary>
            Gets the window handle (HWND).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Height">
      <summary>
            Gets the height of the presentation target in pixels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#IsVisible">
      <summary>
            Gets or sets a value indicating whether the presentation target is displayed.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Width">
      <summary>
            Gets the width of the presentation target in pixels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.EnableAlpha">
      <summary>
            Gets or sets a value indicating whether a render target with an alpha channel is created.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.EnableAlphaProperty">
      <summary>
            Identifies the <see cref="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.EnableAlpha" /> dependency property.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.GraphicsService">
      <summary>
            Gets the graphics service.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.IsFrameReady">
      <summary>
            Gets a value indicating whether the Direct3D 11 device has finished rendering the current
            frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.IsFrontBufferAvailable">
      <summary>
            Gets a value that indicates whether a front buffer exists for the internal <see cref="T:System.Windows.Interop.D3DImage" />.
            This is a dependency property.
            </summary>
    </member>
    <member name="E:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.IsFrontBufferAvailableChanged">
      <summary>
            Event raised after the <see cref="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.IsFrontBufferAvailable" /> property value has changed.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.IsFrontBufferAvailableProperty">
      <summary>
            Identifies the <see cref="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.IsFrontBufferAvailable" /> dependency property.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.IsSynchronized">
      <summary>
            Gets or sets a value indicating whether the Direct3D 11 device is synchronized with WPF.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.IsSynchronizedProperty">
      <summary>
            Identifies the <see cref="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.IsSynchronized" /> dependency property.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.OnEnableAlphaChanged(System.Boolean,System.Boolean)">
      <summary>
            Called when the <see cref="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.EnableAlpha" /> property changed.
            </summary>
      <param name="oldValue">The old value.</param>
      <param name="newValue">The new value.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.OnIsSynchronizedChanged(System.Boolean,System.Boolean)">
      <summary>
            Called when the <see cref="P:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.IsSynchronized" /> property changed.
            </summary>
      <param name="oldValue">The old value.</param>
      <param name="newValue">The new value.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.D3DImagePresentationTarget.ToBitmap">
      <summary>
            Takes a snapshot of the presentation target and stores it as a bitmap.
            </summary>
      <returns>The snapshot of the presentation target.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.Interop.ElementPresentationTarget">
      <summary>
            A WPF control that implements <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget" /> to host a 3D view.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.ElementPresentationTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Interop.ElementPresentationTarget" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.ElementPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#BeginRender(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called by the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> before rendering into the presentation target.
            </summary>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if successful; otherwise, <see langword="false" /> if the presentation
            target is not available.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.ElementPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#EndRender(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called by the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> after rendering into the presentation target.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.ElementPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#GraphicsService">
      <summary>
            Gets or sets the graphics service.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.ElementPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Handle">
      <summary>
            Gets the window handle (HWND).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.ElementPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Height">
      <summary>
            Gets the height of the presentation target in pixels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.ElementPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Width">
      <summary>
            Gets the width of the presentation target in pixels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.ElementPresentationTarget.GraphicsService">
      <summary>
            Gets the graphics service.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Interop.FormsPresentationTarget">
      <summary>
            A Windows Forms control that implements <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget" /> to host a 3D view.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.FormsPresentationTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Interop.FormsPresentationTarget" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.FormsPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#BeginRender(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called by the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> before rendering into the presentation target.
            </summary>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if successful; otherwise, <see langword="false" /> if the presentation
            target is not available.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.FormsPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#EndRender(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called by the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> after rendering into the presentation target.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.FormsPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#GraphicsService">
      <summary>
            Gets or sets the graphics service.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.FormsPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Height">
      <summary>
            Gets the height of the presentation target in pixels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.FormsPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#IsVisible">
      <summary>
            Gets or sets a value indicating whether the presentation target is displayed.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.FormsPresentationTarget.DigitalRune#Graphics#Interop#IPresentationTarget#Width">
      <summary>
            Gets the width of the presentation target in pixels.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.FormsPresentationTarget.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control" /> and its child controls
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
            true to release both managed and unmanaged resources; false to release only unmanaged
            resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.FormsPresentationTarget.GraphicsService">
      <summary>
            Gets the graphics service.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.FormsPresentationTarget.OnClick(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.FormsPresentationTarget.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.
            </summary>
      <param name="e">
            The <see cref="T:System.Windows.Forms.PaintEventArgs" /> instance containing the event data.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.FormsPresentationTarget.WndProc(System.Windows.Forms.Message@)">
      <summary>
            Processes Windows messages.
            </summary>
      <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Interop.IPresentationTarget">
      <summary>
            Provides a window handle (HWND) which can be used to present a 3D scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.IPresentationTarget.BeginRender(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called by the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> before rendering into the presentation target.
            </summary>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if successful; otherwise, <see langword="false" /> if the presentation
            target is not available.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.IPresentationTarget.EndRender(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called by the <see cref="T:DigitalRune.Graphics.GraphicsManager" /> after rendering into the presentation target.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.GraphicsService">
      <summary>
            Gets or sets the graphics service.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.Handle">
      <summary>
            Gets the window handle (HWND).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.Height">
      <summary>
            Gets the height of the presentation target in pixels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.IsVisible">
      <summary>
            Gets or sets a value indicating whether the presentation target is displayed.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.IPresentationTarget.Width">
      <summary>
            Gets the width of the presentation target in pixels.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Interop.PresentationTargetCollection">
      <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Interop.IPresentationTarget" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.PresentationTargetCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Interop.PresentationTargetCollection" /> class.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Interop.WpfEnvironment">
      <summary>
            Provides an execution environment for a WPF application in a Windows Forms application.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.WpfEnvironment.Application">
      <summary>
            Gets or sets the WPF application.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.WpfEnvironment.Dispatcher">
      <summary>
            Gets the dispatcher of the WPF thread.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Interop.WpfEnvironment.Form">
      <summary>
            Gets or sets the Windows Forms main window (for example, the XNA game window).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.WpfEnvironment.Shutdown">
      <summary>
            Shuts down the WPF environment.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Interop.WpfEnvironment.Startup(System.IntPtr)">
      <summary>
            Initializes the WPF environment.
            </summary>
      <param name="winFormHandle">The handle of the Windows Forms main window.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.BloomFilter">
      <summary>
            Adds a bloom effect to an LDR (low dynamic range) image.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.BloomFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.BloomFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.BloomFilter.DownsampleFactor">
      <summary>
            Gets or sets the downsample factor.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is 0 or negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.BloomFilter.Intensity">
      <summary>
            Gets or sets the bloom intensity factor.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.BloomFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.BloomFilter.Saturation">
      <summary>
            Gets or sets the bloom saturation.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.BloomFilter.Threshold">
      <summary>
            Gets or sets the brightness threshold.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.Blur">
      <summary>
            Blurs the image using a convolution filter.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.Blur.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.Blur" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.DepthScaling">
      <summary>
            Gets or sets a value that controls how scene depth influences the filter scale.
            (Only used by anisotropic or bilateral blurs.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.EdgeSoftness">
      <summary>
            Gets or sets the edge softness for bilateral filtering.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.FilterInLogSpace">
      <summary>
            Gets or sets a value indicating whether log-space filtering is used.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.Blur.InitializeBoxBlur(System.Int32,System.Boolean)">
      <summary>
            Computes sample offsets and weights for box blur filter kernel.
            </summary>
      <param name="numberOfSamples">
            The number of samples. This value must be an odd number (e.g. 3, 5, 7, ...).
            </param>
      <param name="useHardwareFiltering">
            If set to <see langword="true" /> hardware filtering is used to increase the blur effect; 
            otherwise, hardware filtering is not used. Use <see langword="false" /> if you are filtering
            floating-point textures.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSamples" /> is zero or negative.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="numberOfSamples" /> is an even number. A box blur requires an odd number of
            samples.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.Blur.InitializeGaussianBlur(System.Int32,System.Single,System.Boolean)">
      <summary>
            Computes sample offsets and weights for Gaussian blur filter kernel.
            </summary>
      <param name="numberOfSamples">
            The number of samples. This value must be an odd number (e.g. 3, 5, 7, ...).
            </param>
      <param name="standardDeviation">The standard deviation.</param>
      <param name="useHardwareFiltering">
            If set to <see langword="true" /> hardware filtering is used to increase the blur effect;
            otherwise, hardware filtering is not used. Use <see langword="false" /> if you are filtering
            floating-point textures.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfSamples" /> is zero or negative.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="numberOfSamples" /> is an even number. A Gaussian blur requires an odd number of
            samples.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.Blur.InitializePoissonBlur">
      <summary>
            Computes sample offsets and weights for a 13-tap Poisson disk filter kernel.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.IsAnisotropic">
      <summary>
            Gets or sets a value indicating whether to use an anisotropic filter kernel.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.IsBilateral">
      <summary>
            Gets or sets a value indicating whether joint bilateral filtering (= edge-aware filtering)
            is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.IsSeparable">
      <summary>
            Gets or sets a value indicating whether the configured blur filter is separable.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.MaxNumberOfSamples">
      <summary>
            Gets the maximum number of samples that are supported.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.NumberOfPasses">
      <summary>
            Gets or sets the number of blur passes.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than 1.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.NumberOfSamples">
      <summary>
            Gets or sets the number of samples.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than 1 or more than <see cref="P:DigitalRune.Graphics.PostProcessing.Blur.MaxNumberOfSamples" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.Offsets">
      <summary>
            Gets the sample offsets.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.Blur.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.Scale">
      <summary>
            Gets or sets the scale that is applied to the offsets.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.Blur.Weights">
      <summary>
            Gets or sets the weights of the samples.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.CameraMotionBlur">
      <summary>
            Creates a motion blur that depends on the camera movement.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.CameraMotionBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.CameraMotionBlur" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.CameraMotionBlur.NumberOfSamples">
      <summary>
            Gets or sets the number of samples used to compute a blurred pixel.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.CameraMotionBlur.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.CameraMotionBlur.Strength">
      <summary>
            Gets or sets the strength.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.CieSkyFilter">
      <summary>
            Attenuates an image using the luminance distribution of the CIE Sky Model.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.CieSkyFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.CieSkyFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.CieSkyFilter.Exposure">
      <summary>
            Gets or sets the exposure factor used to scale the source texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.CieSkyFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="F:DigitalRune.Graphics.PostProcessing.CieSkyFilter.Parameters">
      <summary>
            The parameters of the CIE sky luminance distribution.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.CieSkyFilter.Strength">
      <summary>
            Gets or sets the strength of the attenuation.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.CieSkyFilter.SunDirection">
      <summary>
            Gets or sets the direction to the sun.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter">
      <summary>
            Modifies an image using a color lookup table (a.k.a. "color grading").
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.ConvertLookupTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
            Converts a 2D lookup texture to a 3D lookup texture.
            </summary>
      <param name="texture2D">The 2D lookup texture.</param>
      <returns>The 3D lookup texture.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="texture2D" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="texture2D" /> is not a color texture or does not have the expected format.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.CreateLookupTexture2D(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
            Creates the default 2D lookup texture (no color transformations) with 16 entries per color
            channel.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <returns>The default 2D lookup texture which contains no color transformations.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.CreateLookupTexture2D(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
      <summary>
            Creates the default 2D lookup texture (no color transformations) with the specified lookup
            table size.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="size">
            The size of the lookup table (= the number of entries per color channel). The recommended
            size is 16.
            </param>
      <returns>The default 2D lookup texture which contains no color transformations.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> is 0 or negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessor" /> class 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.InterpolationParameter">
      <summary>
            Gets or sets the interpolation parameter for interpolating between the result of
            <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA" /> and <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureB" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTexture">
      <summary>
            Gets or sets the primary color lookup texture (a 3D texture). Same as
            <see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA">
      <summary>
            Gets or sets the primary color lookup texture (a 3D texture).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureB">
      <summary>
            Gets or sets a secondary, optional color lookup texture (a 3D texture).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.SetLookupTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
            Sets the 3D lookup texture (<see cref="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.LookupTextureA" />).
            (Overwrites the existing 3D lookup texture.)
            </summary>
      <param name="lookupTexture2D">The lookup texture as a 2D texture.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lookupTexture2D" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lookupTexture2D" /> is not a color texture or does not have the expected 
            format.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ColorCorrectionFilter.Strength">
      <summary>
            Gets or sets the strength of the effect.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.ColorEncoder">
      <summary>
            Changes the <see cref="T:DigitalRune.Graphics.ColorEncoding" /> of a texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorEncoder.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.ColorEncoder" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ColorEncoder.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ColorEncoder.SourceEncoding">
      <summary>
            Gets or sets the <see cref="T:DigitalRune.Graphics.ColorEncoding" /> of the source texture.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ColorEncoder.TargetEncoding">
      <summary>
            Gets or sets the <see cref="T:DigitalRune.Graphics.ColorEncoding" /> of the render target.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.CopyFilter">
      <summary>
            Copies a texture into a render target.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.CopyFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.CopyFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.CopyFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter">
      <summary>
            Creates a depth-of-field effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.BlurStrength">
      <summary>
            Gets or sets the blur strength.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.DownsampleFactor">
      <summary>
            Gets or sets the downsample factor.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than 1.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.FarBlurDistance">
      <summary>
            Gets or sets the far distance after which objects are maximal blurred.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.FarFocusDistance">
      <summary>
            Gets or sets the far distance where objects start to get blurry.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.NearBlurDistance">
      <summary>
            Gets or sets the near distance where the blur starts to decrease.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.NearFocusDistance">
      <summary>
            Gets or sets the near distance where the objects start to be in focus.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.DepthOfFieldFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter">
      <summary>
            Reduces the resolution of an input texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.DownsampleFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.DownsampleFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.EdgeFilter">
      <summary>
            Renders silhouette outlines and creases edge using edge detection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.EdgeFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.EdgeFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.CreaseColor">
      <summary>
            Gets or sets the color of the crease edges.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.DepthSensitivity">
      <summary>
            Gets or sets the depth sensitivity of the edge detection.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.DepthThreshold">
      <summary>
            Gets or sets the depth threshold for edge detection.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.EdgeWidth">
      <summary>
            Gets or sets the width of the edge outline in pixel.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or 0.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.NormalSensitivity">
      <summary>
            Gets or sets the normal vector sensitivity of the edge detection.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.NormalThreshold">
      <summary>
            Gets or sets the normal vector threshold of the edge detection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.EdgeFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.EdgeFilter.SilhouetteColor">
      <summary>
            Gets or sets the color of the silhouette edges.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.EffectPostProcessor">
      <summary>
            Performs post-processing using a custom <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> and automatically bound effect 
            parameters.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.EffectPostProcessor.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.EffectPostProcessor" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="effect">The effect.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> or <paramref name="effect" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.EffectPostProcessor.EffectBinding">
      <summary>
            Gets the effect binding.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.EffectPostProcessor.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.FxaaFilter">
      <summary>
            Applies <i>Fast Approximate Anti-Aliasing</i> (FXAA).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.FxaaFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.FxaaFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.FxaaFilter.ComputeLuminance">
      <summary>
            Gets or sets a value indicating whether the luminance should be computed
            in a separate pass.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.FxaaFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.GodRayFilter">
      <summary>
            Adds crepuscular rays ("god rays") to a scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.GodRayFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.GodRayFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Decay">
      <summary>
            Gets or sets the decay factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.DownsampleFactor">
      <summary>
            Gets or sets the downsample factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Exposure">
      <summary>
            Gets or sets the exposure.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Intensity">
      <summary>
            Gets or sets the intensity.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.LightDirection">
      <summary>
            Gets or sets the light direction.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.LightRadius">
      <summary>
            Gets or sets the light radius.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.NumberOfPasses">
      <summary>
            Gets or sets the number of blur passes.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.NumberOfSamples">
      <summary>
            Gets or sets the number of samples.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.GodRayFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Scale">
      <summary>
            Gets or sets the scale of the light shafts.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Softness">
      <summary>
            Gets or sets the softness.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GodRayFilter.Weight">
      <summary>
            Gets or sets the weight of samples along the light ray.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.GrainFilter">
      <summary>
            Adds a film grain effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.GrainFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.GrainFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.GrainScale">
      <summary>
            Gets or sets the grain scale.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.IsAnimated">
      <summary>
            Gets or sets a value indicating whether the noise is animated.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.LuminanceThreshold">
      <summary>
            Gets or sets the luminance threshold. (Noise is only added to pixels with a luminance below 
            this threshold. This value is ignored if <see cref="P:DigitalRune.Graphics.PostProcessing.GrainFilter.ScaleWithLuminance" /> is 
            <see langword="false" />.)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.GrainFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.ScaleWithLuminance">
      <summary>
            Gets or sets a value indicating whether noise is blended equally to all pixels or whether 
            more noise is blended to dark pixels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.GrainFilter.Strength">
      <summary>
            Gets or sets the strength of the grain effect.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.HdrFilter">
      <summary>
            Performs HDR tone mapping supporting bloom/glare, dynamic eye adaption and scotopic vision.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.HdrFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.HdrFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.AdaptionSpeed">
      <summary>
            Gets or sets the adaption speed of the eye.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BloomIntensity">
      <summary>
            Gets or sets the bloom intensity factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BloomThreshold">
      <summary>
            Gets or sets the brightness threshold.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftCenter">
      <summary>
            Gets or sets scene luminance where 50% blue shift is applied
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftColor">
      <summary>
            Gets or sets the color of the blue shift.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.BlueShiftRange">
      <summary>
            Gets or sets the range of the blue shift.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.DownsampleFactor">
      <summary>
            Gets or sets the downsample factor.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is 0 or negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.EnableBlueShift">
      <summary>
            Gets or sets a value indicating whether a blue shift is applied to scenes with low average
            luminance.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MaxExposure">
      <summary>
            Gets or sets the max exposure factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MiddleGray">
      <summary>
            Gets or sets the average gray level.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.MinExposure">
      <summary>
            Gets or sets the min exposure factor.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.HdrFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.HdrFilter.Reset">
      <summary>
            Resets the dynamic internal states, especially dynamic luminance adaption.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.UseAdaption">
      <summary>
            Gets or sets a value indicating whether dynamic eye adaption should be used.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.HdrFilter.UseGeometricMean">
      <summary>
            Gets or sets a value indicating whether the average luminance is computed using the 
            geometric mean.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.KawaseBlur">
      <summary>
            Blurs the input texture using the Kawase bloom filter.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.KawaseBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.KawaseBlur" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.KawaseBlur.NumberOfPasses">
      <summary>
            Gets or sets the number of passes.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is 0 or negative.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.KawaseBlur.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.LuminanceFilter">
      <summary>
            Computes the minimum, average and maximum luminance of a texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.LuminanceFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.LuminanceFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.LuminanceFilter.AdaptionSpeed">
      <summary>
            Gets or sets the adaption speed of the eye.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.LuminanceFilter.OnDisable">
      <summary>
            Called when this post-processor is disabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.LuminanceFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.LuminanceFilter.Reset">
      <summary>
            Resets this luminance adaption.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.LuminanceFilter.UseAdaption">
      <summary>
            Gets or sets a value indicating whether dynamic eye adaption should be used.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.LuminanceFilter.UseGeometricMean">
      <summary>
            Gets or sets a value indicating whether the average luminance is computed using the 
            geometric mean.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.MadFilter">
      <summary>
            Scales the color of an image and adds an offset. (MAD = Multiply/Add).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.MadFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.MadFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.MadFilter.Offset">
      <summary>
            Gets or sets the offset.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.MadFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.MadFilter.Scale">
      <summary>
            Gets or sets the scale factor.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur">
      <summary>
            Creates a motion blur using velocity buffers.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.MaxBlurRadius">
      <summary>
            Gets or sets the max blur radius in pixels.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.NumberOfSamples">
      <summary>
            Gets or sets the number of samples.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.SoftenEdges">
      <summary>
            Gets or sets a value indicating whether the edges of motion blurred objects should be 
            softened.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.ObjectMotionBlur.UseLastVelocityBuffer">
      <summary>
            Gets or sets a value indicating whether last velocity buffer should be used in addition to
            the current velocity buffer to expand the blurred region.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.PostProcessHelper">
      <summary>
            Provides default instances of post-processors that are used frequently.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessHelper.GetCopyFilter(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a default <see cref="T:DigitalRune.Graphics.PostProcessing.CopyFilter" /> that can be used to copy a texture into a render
            target.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The default <see cref="T:DigitalRune.Graphics.PostProcessing.CopyFilter" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessHelper.GetDownsampleFilter(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Gets a default <see cref="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter" /> that can be used to downsample an image into
            a low-resolution render target.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The default <see cref="T:DigitalRune.Graphics.PostProcessing.DownsampleFilter" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.PostProcessor">
      <summary>
            Performs scene post-processing, like filtering, color manipulation, etc.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessor" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.DefaultTargetFormat">
      <summary>
            Gets or sets the default target format.
            (This property is used by the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain" />).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessor" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessor" /> class 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Enabled">
      <summary>
            Gets or sets a value indicating whether this post-processor is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.GraphicsService">
      <summary>
            Gets the graphics service.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.IsDisposed">
      <summary>
            Gets a value indicating whether this post-processor has been disposed of.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessor.Name">
      <summary>
            Gets or sets the name of the post-processor.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnDisable">
      <summary>
            Called when this post-processor is disabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnEnable">
      <summary>
            Called when this post-processor is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessor.Process(DigitalRune.Graphics.RenderContext)">
      <summary>
            Performs the post-processing using the <see cref="P:DigitalRune.Graphics.RenderContext.SourceTexture" />
            and the <see cref="P:DigitalRune.Graphics.RenderContext.RenderTarget" /> specified in the render context.
            </summary>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />. 
            </exception>
      <exception cref="T:DigitalRune.Graphics.GraphicsException">
        <see cref="P:DigitalRune.Graphics.RenderContext.SourceTexture" /> is <see langword="null" />. 
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain">
      <summary>
            Chains together a group of post-processors.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Add(DigitalRune.Graphics.PostProcessing.PostProcessor)">
      <summary>
            Appends a post-processor to the post-processor chain.
            </summary>
      <param name="postProcessor">
            The post-processor to add to the post-processor chain.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="postProcessor" /> is <see langword="null" />. The post-processor chain does 
            not allow <see langword="null" /> values.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Clear">
      <summary>
            Removes all post-processors from the post-processor chain.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Contains(DigitalRune.Graphics.PostProcessing.PostProcessor)">
      <summary>
            Determines whether the post-processor chain contains a specific post-processor.
            </summary>
      <param name="postProcessor">The post-processor to locate in the post-processor chain.</param>
      <returns>
        <see langword="true" /> if <paramref name="postProcessor" /> is found in the 
            post-processor chain; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Contains(System.String)">
      <summary>
            Determines whether the post-processor chain contains a post-processor with the specified
            name.
            </summary>
      <param name="name">
            The name of the post-processor to locate in the post-processor chain.
            </param>
      <returns>
        <see langword="true" /> if a post-processor with the given name is found in the 
            post-processor chain; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Count">
      <summary>
            Gets the number of post-processors contained in the post-processor chain.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the post-processor chain. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for post-processor chain.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.IndexOf(DigitalRune.Graphics.PostProcessing.PostProcessor)">
      <summary>
            Determines the index of a specific post-processor in the post-processor chain.
            </summary>
      <param name="postProcessor">The post-processor to locate in the post-processor chain.</param>
      <returns>
            The index of <paramref name="postProcessor" /> if found in the post-processor chain; 
            otherwise, -1.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.IndexOf(System.String)">
      <summary>
            Determines the index of the post-processor with the specified name in the post-processor 
            chain.
            </summary>
      <param name="name">
            The name of the post-processor to locate in the post-processor chain.
            </param>
      <returns>
            The index of the post-processor if found in the post-processor chain; otherwise, -1.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Insert(System.Int32,DigitalRune.Graphics.PostProcessing.PostProcessor)">
      <summary>
            Inserts a post-processor into the post-processor chain at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="postProcessor" /> should be inserted.
            </param>
      <param name="postProcessor">
            The post-processor to insert into the post-processor chain.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the post-processor chain.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="postProcessor" /> is <see langword="null" />. The post-processor chain does 
            not allow <see langword="null" /> values.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Item(System.Int32)">
      <summary>
            Gets or sets the post-processor at the specified index.
            </summary>
      <param name="index">The zero-based index of the post-processor to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />. The <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessorChain" /> 
            does not allow <see langword="null" /> values.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Item(System.String)">
      <summary>
            Gets the <see cref="T:DigitalRune.Graphics.PostProcessing.PostProcessor" /> with the specified name.
            </summary>
      <param name="name">The name of the post-processor.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.Remove(DigitalRune.Graphics.PostProcessing.PostProcessor)">
      <summary>
            Removes the first occurrence of a specific post-processor from the post-processor chain.
            </summary>
      <param name="postProcessor">
            The post-processor to remove from the post-processor chain.
            </param>
      <returns>
        <see langword="true" /> if <paramref name="postProcessor" /> was successfully removed from the 
            post-processor chain; otherwise, <see langword="false" />. This method also returns 
            <see langword="false" /> if <paramref name="postProcessor" /> is not found in the original 
            post-processor chain.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.RemoveAt(System.Int32)">
      <summary>
            Removes the post-processor at the specified index from the post-processor chain.
            </summary>
      <param name="index">The zero-based index of the post-processor to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the post-processor chain.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.System#Collections#Generic#ICollection{DigitalRune#Graphics#PostProcessing#PostProcessor}#CopyTo(DigitalRune.Graphics.PostProcessing.PostProcessor[],System.Int32)">
      <summary>
            Copies the elements of the post-processor chain to an <see cref="T:System.Array" />, starting 
            at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            post-processor chain. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to 
            or greater than the length of <paramref name="array" />. Or the number of elements in the 
            source post-processor chain is greater than the available space from 
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.PostProcessorChain.System#Collections#Generic#ICollection{DigitalRune#Graphics#PostProcessing#PostProcessor}#IsReadOnly">
      <summary>
            Gets a value indicating whether this collection is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.System#Collections#Generic#IEnumerable{DigitalRune#Graphics#PostProcessing#PostProcessor}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.PostProcessorChain.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.RadialBlur">
      <summary>
            Creates a radial blur effect.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.RadialBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.RadialBlur" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.RadialBlur.MaxBlurAmount">
      <summary>
            Gets or sets the range of texels that are blurred at <see cref="P:DigitalRune.Graphics.PostProcessing.RadialBlur.MaxBlurRadius" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.RadialBlur.MaxBlurRadius">
      <summary>
            Gets or sets the radius in the range [0, 1] where the maximum blur is reached.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.RadialBlur.NumberOfSamples">
      <summary>
            Gets or sets the number of samples that are used in the blur.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.RadialBlur.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.SaoFilter">
      <summary>
            Creates a <i>Screen-Space Ambient Occlusion</i> (SSAO) effect using the "Scalable Ambient
            Obscurance" method to approximate ambient occlusion in real-time. 
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SaoFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SsaoFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.Bias">
      <summary>
            Gets or sets the bias used to avoid sampling artifacts.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.BlurScale">
      <summary>
            Gets or sets the blur scale.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.CombineWithSource">
      <summary>
            Gets or sets a value indicating whether the ambient occlusion should be applied to the
            source image - or if a black-white AO image is produced, ignoring the source image.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.EdgeSharpness">
      <summary>
            Gets or sets the edge sharpness.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.EdgeSoftness">
      <summary>
            Gets or sets the edge softness.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.MaxOcclusion">
      <summary>
            Gets or sets the max ambient occlusion value.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.MinBias">
      <summary>
            Gets or sets the minimum bias used to avoid sampling artifacts.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.NumberOfSamples">
      <summary>
            Gets or sets the number of samples.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SaoFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.Radius">
      <summary>
            Gets or sets the sample radius in world space units.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.SampleDistribution">
      <summary>
            Gets or sets the sample distribution.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SaoFilter.Strength">
      <summary>
            Gets or sets the strength of the ambient occlusion.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.SaturationFilter">
      <summary>
            Changes the saturation of the input texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SaturationFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SaturationFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SaturationFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SaturationFilter.Saturation">
      <summary>
            Gets or sets the saturation.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.SepiaFilter">
      <summary>
            Converts a colored image to sepia colors.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SepiaFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SepiaFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SepiaFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SepiaFilter.Strength">
      <summary>
            Gets or sets the strength of the effect.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.SharpeningFilter">
      <summary>
            Applies a sharpening effect using edge detection with the Laplacian operator.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SharpeningFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SharpeningFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SharpeningFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SharpeningFilter.Sharpness">
      <summary>
            Gets or sets the sharpness factor in the range [0, ∞[.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur">
      <summary>
            Creates a very simple motion blur effect by mixing the old blurred scene with the new scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.OnDisable">
      <summary>
            Called when this post-processor is disabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.Reset">
      <summary>
            Resets the motion blur effect. (The next frame will not be blurred.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SimpleMotionBlur.Strength">
      <summary>
            Gets or sets the strength of the blur effect in the range [0, 1[.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.SmaaFilter">
      <summary>
            Applies <i>Enhanced Subpixel Morphological Anti-Aliasing</i> (SMAA).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SmaaFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SmaaFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SmaaFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.SsaoFilter">
      <summary>
            Creates a <i>Screen-Space Ambient Occlusion</i> (SSAO) effect to approximate ambient 
            occlusion in real-time.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SsaoFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.SsaoFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.CombineWithSource">
      <summary>
            Gets or sets a value indicating whether the ambient occlusion should be applied to the
            source image - or if a black-white AO image is produced, ignoring the source image.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.DownsampleFactor">
      <summary>
            Gets or sets the downsample factor.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.MaxDistances">
      <summary>
            Gets or sets the max distances for ambient occlusion.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.NumberOfBlurPasses">
      <summary>
            Gets or sets the number of blur passes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.SsaoFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Quality">
      <summary>
            Gets or sets the quality level.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than 0 or greater than 2.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Radii">
      <summary>
            Gets or sets the inner and outer ambient occlusion radius.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Scale">
      <summary>
            Gets or sets the scale factors.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.Strength">
      <summary>
            Gets or sets the strength of the ambient occlusion.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.SsaoFilter.UseEdgeAwareBlur">
      <summary>
            Gets or sets a value indicating whether the ambient occlusion should be blurred using
            an edge-aware blur.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter">
      <summary>
            Applies an unsharp masking filter.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.Blur">
      <summary>
            Gets the blur processor.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.UnsharpMaskingFilter.Sharpness">
      <summary>
            Gets or sets the sharpness factor in the range [0, ∞[.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.UpsampleFilter">
      <summary>
            Upscales an input texture.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.UpsampleFilter.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.PostProcessing.UpsampleFilter" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.DepthSensitivity">
      <summary>
            Bilateral Upsampling: Gets or sets the depth sensitivity.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.DepthThreshold">
      <summary>
            Nearest-Depth Upsampling: Gets or sets the depth threshold used for edge detection.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.Mode">
      <summary>
            Gets or sets the mode that is used for upsampling the low-resolution image.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.PostProcessing.UpsampleFilter.OnProcess(DigitalRune.Graphics.RenderContext)">
      <summary>
            Called when the post-processor should perform the post-processing.
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.PostProcessing.UpsampleFilter.RebuildZBuffer">
      <summary>
            Gets or sets a value indicating whether to rebuild the Z-buffer.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.PostProcessing.UpsamplingMode">
      <summary>
            Defines the texture filtering that is used when combining a low-resolution image with the
            full-resolution scene.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.Point">
      <summary>
            Nearest-neighbor interpolation. Fastest, low quality.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.Linear">
      <summary>
            Bilinear interpolation. Fast, good quality.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.Bilateral">
      <summary>
            Joint (cross) bilateral upsampling. Slow, best quality for surfaces.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.PostProcessing.UpsamplingMode.NearestDepth">
      <summary>
            Nearest-depth upsampling. Slow, best quality for particles and volumetric effects.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.BillboardRenderer">
      <summary>
            Renders billboards and particles.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.BillboardRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="bufferSize">
            The size of the internal buffer (= max number of billboards that can be rendered in a single 
            draw call). Max allowed value is 16384.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is 0, negative, or greater than <see cref="F:DigitalRune.Graphics.Rendering.BillboardRenderer.MaxBufferSize" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.BillboardRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteFont)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.BillboardRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="bufferSize">
            The size of the internal buffer (= max number of billboards that can be rendered in a single 
            draw call). Max allowed value is 16384.
            </param>
      <param name="spriteFont">
            The default font, which is used in case the font of a <see cref="T:DigitalRune.Graphics.TextSprite" /> is not set.
            Can be <see langword="null" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is 0, negative, or greater than <see cref="F:DigitalRune.Graphics.Rendering.BillboardRenderer.MaxBufferSize" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.BufferSize">
      <summary>
            Gets the size of the buffer (number of billboards).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.BillboardRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.DepthThreshold">
      <summary>
            Gets or sets the depth threshold used for edge detection when upsampling the off-screen 
            buffer.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.BillboardRenderer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> 
            class and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.EnableOffscreenRendering">
      <summary>
            Gets or sets a value indicating whether off-screen rendering is enabled. (Requires HiDef
            profile.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.EnableSoftParticles">
      <summary>
            Gets or sets a value indicating whether soft particles are enabled. (Requires HiDef 
            profile.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.FarBias">
      <summary>
            Gets or sets the bias factor used to bias the camera near plane when the z-buffer is
            reconstructed. (Only used when <see cref="P:DigitalRune.Graphics.Rendering.BillboardRenderer.EnableOffscreenRendering" /> is set.)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.BillboardRenderer.MaxBufferSize">
      <summary>
            The maximum buffer size (number of billboards).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.NearBias">
      <summary>
            Gets or sets the factor used to bias the camera near plane when the z-buffer is
            reconstructed. (Only used when <see cref="P:DigitalRune.Graphics.Rendering.BillboardRenderer.EnableOffscreenRendering" /> is set.)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.BillboardRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.UpsamplingFilter">
      <summary>
            Gets or sets the upsampling filter that is used for combining the off-screen buffer with 
            the scene.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.BillboardRenderer.UpsamplingMode">
      <summary>
            Gets or sets the upsampling filter that is used for combining the off-screen buffer with 
            the scene.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.ClearGBufferRenderer">
      <summary>
            Clears the G-buffer. 
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.ClearGBufferRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ClearGBufferRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.ClearGBufferRenderer.Render(DigitalRune.Graphics.RenderContext)">
      <summary>
            Clears the current render target (which must be the G-buffer).
            </summary>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.CloudMapRenderer">
      <summary>
            Generates the cloud textures for <see cref="T:DigitalRune.Graphics.LayeredCloudMap" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.CloudMapRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.CloudMapRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The current graphics profile is Reach.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.CloudMapRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.CloudMapRenderer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> 
            class and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.CloudMapRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.DebugRenderer">
      <summary>
            Provides methods for rendering debug information.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="spriteFont">The sprite font.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.SpriteFont)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="spriteFont">The sprite font.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.ArrowHeadSize">
      <summary>
            Gets or sets the size of the arrow head (relative to the arrow length).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.AutoRenderStates">
      <summary>
            Gets or sets a value indicating whether the debug renderer automatically sets the required
            render states (depth-stencil, blend and rasterizer states required to render solid or
            wireframe, in or over scene, opaque or transparent).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.Clear">
      <summary>
            Clears the debug renderer (removes all draw jobs).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.DefaultColor">
      <summary>
            Gets or sets the default color that is used if no color is explicitly specified.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.DefaultTextPosition">
      <summary>
            Gets or sets the default text position.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer" /> class 
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawAabb(DigitalRune.Geometry.Shapes.Aabb,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws an axis-aligned bounding-box (AABB). Wire-frame only.
            </summary>
      <param name="aabb">The axis-aligned bounding box.</param>
      <param name="pose">The pose of the AABB.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene 
            (depth-test disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawAabbs(System.Collections.Generic.IEnumerable{DigitalRune.Geometry.IGeometricObject},System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean)">
      <summary>
            Draws the axis-aligned bounding-boxes (AABBs) of a collection of geometries.
            </summary>
      <param name="geometricObjects">The geometric objects.</param>
      <param name="color">
            The color. If this parameter is <see langword="null" />, each AABB is drawn with a unique 
            color.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawArrow(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws an arrow pointing from <paramref name="start" /> to <paramref name="end" />.
            </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawAxes(DigitalRune.Geometry.Pose,System.Single,System.Boolean)">
      <summary>
            Draws 3 axes for a coordinate cross.
            </summary>
      <param name="pose">The pose (position and orientation).</param>
      <param name="size">The size in world space.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawBox(System.Single,System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a box.
            </summary>
      <param name="widthX">The x-size of the box.</param>
      <param name="widthY">The y-size of the box.</param>
      <param name="widthZ">The z-size of the box.</param>
      <param name="pose">The pose.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawCapsule(System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a capsule that is centered at the local origin and parallel to the local y axis.
            </summary>
      <param name="radius">The radius of the capsule.</param>
      <param name="height">The total height of the capsule.</param>
      <param name="pose">The pose of the sphere in world space.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawCone(System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a cone with the base on the local xz plane pointing up into the local +y direction.
            </summary>
      <param name="radius">The radius of the cone.</param>
      <param name="height">The total height of the cone.</param>
      <param name="pose">The pose of the sphere in world space.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawContact(DigitalRune.Geometry.Collisions.Contact,System.Single,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws a contact.
            </summary>
      <param name="contact">The contact.</param>
      <param name="normalLength">The length of the normal vector in world space.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawContacts(DigitalRune.Geometry.Collisions.ContactSet,System.Single,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean)">
      <summary>
            Draws contacts.
            </summary>
      <param name="contactSet">The contact set.</param>
      <param name="normalLength">The length of the normal vector in world space.</param>
      <param name="color">
            The color. If this parameter is <see langword="null" />, each contact is drawn with a unique 
            color.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawContacts(DigitalRune.Geometry.Collisions.ContactSetCollection,System.Single,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean)">
      <summary>
            Draws contacts.
            </summary>
      <param name="contactSets">The contact sets.</param>
      <param name="normalLength">The length of the normal vector in world space.</param>
      <param name="color">
            The color. If this parameter is <see langword="null" />, each contact is drawn with a unique 
            color.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawCylinder(System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a cylinder that is centered at the local origin and parallel to the local y axis.
            </summary>
      <param name="radius">The radius of the cylinder.</param>
      <param name="height">The total height of the cylinder.</param>
      <param name="pose">The pose of the sphere in world space.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawLine(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws a line.
            </summary>
      <param name="start">The start position in world space.</param>
      <param name="end">The end position in world space.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawMesh(DigitalRune.Graphics.Mesh,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a mesh.
            </summary>
      <param name="mesh">The mesh.</param>
      <param name="pose">The pose.</param>
      <param name="scale">The scale.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawMesh(DigitalRune.Graphics.Submesh,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a submesh.
            </summary>
      <param name="submesh">The submesh.</param>
      <param name="pose">The pose.</param>
      <param name="scale">The scale.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawModel(DigitalRune.Graphics.SceneGraph.SceneNode,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a model (meshes without textures).
            </summary>
      <param name="sceneNode">The scene node, usually a <see cref="T:DigitalRune.Graphics.SceneGraph.ModelNode" />.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawModel(Microsoft.Xna.Framework.Graphics.Model,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a model (without textures).
            </summary>
      <param name="model">The model.</param>
      <param name="pose">The pose.</param>
      <param name="scale">The scale.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawObject(DigitalRune.Geometry.IGeometricObject,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a geometric object.
            </summary>
      <param name="geometricObject">The geometric object.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawObjects(System.Collections.Generic.IEnumerable{DigitalRune.Geometry.IGeometricObject},System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)">
      <summary>
            Draws geometric objects.
            </summary>
      <param name="geometricObjects">The geometric objects.</param>
      <param name="color">
            The color. If this parameter is <see langword="null" />, each geometric object is drawn with 
            a unique color.
            </param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawPoint(DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws a point.
            </summary>
      <param name="position">The position in world space.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawShape(DigitalRune.Geometry.Shapes.Shape,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a geometric object.
            </summary>
      <param name="shape">The shape.</param>
      <param name="pose">The pose.</param>
      <param name="scale">The scale.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawSkeleton(DigitalRune.Animation.Character.SkeletonPose,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,System.Single,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws skeleton bones, bone space axes and bone names of a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode" /> for debugging.
            </summary>
      <param name="skeletonPose">The skeleton pose.</param>
      <param name="pose">The pose (position and orientation) of the skeleton.</param>
      <param name="scale">The scale of the skeleton.</param>
      <param name="axisLength">The visible length of the bone space axes.</param>
      <param name="color">The color for the bones and the bone names.</param>
      <param name="drawOverScene">If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test
            disabled).</param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawSkeleton(DigitalRune.Graphics.SceneGraph.MeshNode,System.Single,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws skeleton bones, bone space axes and bone names of a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode" /> for debugging.
            </summary>
      <param name="meshNode">The mesh node.</param>
      <param name="axisLength">The visible length of the bone space axes.</param>
      <param name="color">The color for the bones and the bone names.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawSphere(System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a sphere.
            </summary>
      <param name="radius">The radius of the sphere.</param>
      <param name="pose">The pose of the sphere in world space.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.String)">
      <summary>
            Draws the text to the screen.
            </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.String,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
      <summary>
            Draws a text on a 2D position in screen space.
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position in screen space (measured in pixels).</param>
      <param name="relativeOrigin">
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <paramref name="position" />; (1, 1) means that the lower-right corner of the text is at 
            <paramref name="position" />. Use (0.5, 0.5) to center the text.
            </param>
      <param name="color">The color.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.String,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
      <summary>
            Draws a text on a 2D position in screen space.
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position in screen space (measured in pixels).</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.String,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws a text on a 3D position in world space.
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position in world space.</param>
      <param name="relativeOrigin">
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <paramref name="position" />; (1, 1) means that the lower-right corner of the text is at 
            <paramref name="position" />. Use (0.5, 0.5) to center the text.
            </param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.String,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws a text on a 3D position in world space.
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position in world space.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.Text.StringBuilder)">
      <summary>
            Draws the text to the screen.
            </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.Text.StringBuilder,DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
      <summary>
            Draws a text on a 2D position in screen space.
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position in screen space (measured in pixels).</param>
      <param name="relativeOrigin">
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <paramref name="position" />; (1, 1) means that the lower-right corner of the text is at 
            <paramref name="position" />. Use (0.5, 0.5) to center the text.
            </param>
      <param name="color">The color.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.Text.StringBuilder,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color)">
      <summary>
            Draws a text on a 2D position in screen space.
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position in screen space (measured in pixels).</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.Text.StringBuilder,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector2F,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws a text on a 3D position in world space.
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position in world space.</param>
      <param name="relativeOrigin">
            The relative origin of the text. (0, 0) means that the upper-left corner of the text is at
            <paramref name="position" />; (1, 1) means that the lower-right corner of the text is at 
            <paramref name="position" />. Use (0.5, 0.5) to center the text.
            </param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawText(System.Text.StringBuilder,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Draws a text on a 3D position in world space.
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position in world space.</param>
      <param name="color">The color.</param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
      <summary>
            Draws a texture.
            </summary>
      <param name="texture">The texture.</param>
      <param name="rectangle">The destination rectangle in screen space.</param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawTriangle(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a triangle (with counter-clockwise winding for front faces).
            </summary>
      <param name="triangle">The triangle.</param>
      <param name="pose">The pose.</param>
      <param name="scale">The scale.</param>
      <param name="normal">
            The normal vector of the triangle (pointing away from the front side).
            </param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the object is drawn
            with solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawTriangle(DigitalRune.Geometry.Shapes.Triangle,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a triangle (with counter-clockwise winding for front faces).
            </summary>
      <param name="triangle">The triangle.</param>
      <param name="pose">The pose.</param>
      <param name="scale">The scale.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the object is drawn
            with solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawTriangle(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a triangle (with counter-clockwise winding for front faces).
            </summary>
      <param name="vertex0">The first vertex position in world space.</param>
      <param name="vertex1">The second vertex position in world space.</param>
      <param name="vertex2">The third vertex position in world space.</param>
      <param name="normal">
            The normal vector of the triangle (pointing away from the front side).
            </param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the object is drawn
            with solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawTriangle(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a triangle (with counter-clockwise winding for front faces).
            </summary>
      <param name="vertex0">The first vertex position in world space.</param>
      <param name="vertex1">The second vertex position in world space.</param>
      <param name="vertex2">The third vertex position in world space.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the object is drawn
            with solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawTriangles(DigitalRune.Geometry.Meshes.ITriangleMesh,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws the triangles of the given mesh (with counter-clockwise winding for front faces).
            </summary>
      <param name="mesh">The triangle mesh.</param>
      <param name="pose">The pose.</param>
      <param name="scale">The scale.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the object is drawn
            with solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawViewVolume(DigitalRune.Geometry.Shapes.ViewVolume,DigitalRune.Geometry.Pose,DigitalRune.Mathematics.Algebra.Vector3F,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a view volume (viewing frustum).
            </summary>
      <param name="viewVolume">The view volume.</param>
      <param name="pose">The pose.</param>
      <param name="scale">The scale.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewVolume" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawViewVolume(DigitalRune.Geometry.Shapes.ViewVolume,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a view volume (viewing frustum).
            </summary>
      <param name="viewVolume">The view volume.</param>
      <param name="pose">The pose.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewVolume" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.DrawViewVolume(System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,DigitalRune.Geometry.Pose,Microsoft.Xna.Framework.Color,System.Boolean,System.Boolean)">
      <summary>
            Draws a view volume (viewing frustum).
            </summary>
      <param name="isPerspective">
        <see langword="true" /> for perspective view volumes, <see langword="false" /> for 
            orthographic view volumes.
            </param>
      <param name="left">The minimum x-value of the view volume at the near clip plane.</param>
      <param name="right">The maximum x-value of the view volume at the near clip plane.</param>
      <param name="bottom">The minimum y-value of the view volume at the near clip plane.</param>
      <param name="top">The maximum y-value of the view volume at the near clip plane.</param>
      <param name="near">The distance to the near clip plane.</param>
      <param name="far">The distance to the far clip plane.</param>
      <param name="pose">The pose.</param>
      <param name="color">The color.</param>
      <param name="drawWireFrame">
            If set to <see langword="true" /> the wire-frame is drawn; otherwise the mesh is drawn with 
            solid faces.
            </param>
      <param name="drawOverScene">
            If set to <see langword="true" /> the object is drawn over the graphics scene (depth-test 
            disabled).
            </param>
      <exception cref="T:System.NotSupportedException">
            Drawing solid objects with disabled depth test is not yet supported.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.Effect">
      <summary>
            Gets the effect used for rendering.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer" /> is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.IsDisposed">
      <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.PointSize">
      <summary>
            Gets or sets the size of drawn points.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.Render(DigitalRune.Graphics.RenderContext)">
      <summary>
            Draws the debug information.
            </summary>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.DebugRenderer.SpriteFont">
      <summary>
            Gets or sets the sprite font.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DebugRenderer.Update(System.TimeSpan)">
      <summary>
            Updates the internal caches of the <see cref="T:DigitalRune.Graphics.Rendering.DebugRenderer" />. 
            (Usually you do not need to call this method, see remarks.)
            </summary>
      <param name="deltaTime">The elapsed time since the last frame.</param>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.DecalRenderer">
      <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.DecalNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DecalRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.DecalRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DecalRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.DecalRenderer.ClipAtNearPlane">
      <summary>
            Gets or sets a value indicating whether decals may be clipped which intersect the 
            camera near plane. (Performance optimization)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DecalRenderer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> 
            class and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.DecalRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.FigureRenderer">
      <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.FigureNode" />s. 
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.FigureRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.FigureRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="bufferSize">
            The size of the internal buffer (= max number of line segments or triangles that can be 
            rendered in a single draw call). Max allowed value is 16384.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is 0, negative, or greater than <see cref="F:DigitalRune.Graphics.Rendering.FigureRenderer.MaxBufferSize" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The current graphics profile is Reach.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.FigureRenderer.BufferSize">
      <summary>
            Gets the size of the buffer (= number of line segments/triangles).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.FigureRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.FigureRenderer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> 
            class and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.FigureRenderer.MaxBufferSize">
      <summary>
            The maximum buffer size (number of line segments).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.FigureRenderer.OnLoadEffect(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Called when the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> for rendering lines and shapes is loaded.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> that renders lines and shapes.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.FigureRenderer.Options">
      <summary>
            Gets or sets the options for rendering figures.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.FigureRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.FigureRenderOptions">
      <summary>
            Defines options for rendering figures.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.FigureRenderOptions.RenderNone">
      <summary>
            Disable rendering of figures.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.FigureRenderOptions.RenderFill">
      <summary>
            Render filled areas.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.FigureRenderOptions.RenderStroke">
      <summary>
            Render stroked lines.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.FigureRenderOptions.RenderFillAndStroke">
      <summary>
            Render filled areas and stroked lines. (Default)
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.FogRenderer">
      <summary>
            Applies fog to opaque geometry using the current G-buffer content.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.FogRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.FogRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.FogRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.FogRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.IShadowMapRenderer">
      <summary>
            Renders the shadow maps of <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode" />s.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.IShadowMapRenderer.RenderCallback">
      <summary>
            Gets or sets the method which renders the scene into the shadow map.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.LensFlareRenderer">
      <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.LensFlareNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.LensFlareRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.LensFlareRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="spriteBatch">
            The sprite batch used for rendering. Can be <see langword="null" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> 
            class and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.UpdateOcclusion(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Performs occlusion queries to determine the visibility of the lens flares effects.
            (Requires HiDef profile.)
            </summary>
      <param name="node">The scene node.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera.)
            </param>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.LensFlareRenderer.UpdateOcclusion(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
      <summary>
            Performs occlusion queries to determine the intensity of the lens flares effects.
            (Requires HiDef profile.)
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.LightRenderer">
      <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode" />s into the light buffer.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.LightRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.LightRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.LightRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.MeshRenderer">
      <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode" />s using state-sorting and hardware instancing.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.MeshRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.MeshRenderer" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.MeshRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.MeshRenderer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> 
            class and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.MeshRenderer.EnableInstancing">
      <summary>
            Gets or sets a value indicating whether hardware instancing is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.MeshRenderer.InstancingThreshold">
      <summary>
            Gets or sets the minimum batch size required to activate hardware instancing.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.MeshRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.OcclusionBuffer">
      <summary>
            Represents an occlusion buffer that supports frustum culling, distance culling, occlusion 
            culling, and shadow caster culling.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.OcclusionBuffer" /> with a default size of 
            512 x 256 and a triangle buffer size of 21845.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.#ctor(DigitalRune.Graphics.IGraphicsService,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.OcclusionBuffer" /> class with the specified
            buffer size.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="width">The width of the occlusion buffer.</param>
      <param name="height">The height of the occlusion buffer.</param>
      <param name="bufferSize">
            The size of the internal triangle buffer (= max number of occluder triangles that can be
            rendered in a single draw call). Needs to be large enough to store the most complex 
            occluder.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.OcclusionBuffer" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.OcclusionBuffer" />
            class and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.OcclusionBuffer.EnableMultithreading">
      <summary>
            Gets or sets a value indicating whether multithreading is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.OcclusionBuffer.IsDisposed">
      <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.IsOccluder(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Determines whether the specified scene node acts as an occluder during occlusion culling.
            </summary>
      <param name="node">The scene node.</param>
      <returns>
        <see langword="true" /> if <paramref name="node" /> acts as an occluder; otherwise,
            <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.OcclusionBuffer.ProgressiveShadowCasterCulling">
      <summary>
            Gets or sets a value indicating whether progressive shadow caster culling is enabled.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Query(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
      <summary>
            Tests the specified scene nodes against the occlusion buffer to check which scene nodes are
            visible. (Performs frustum culling, distance culling, occlusion culling, and shadow caster
            culling.)
            </summary>
      <param name="nodes">
            In: The scene nodes that should be tested for visibility.<br />
            Out: The list of visible scene nodes. Occluded scene nodes are replaced with null entries.
            </param>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
      <summary>
            Clears the occlusion buffer and renders the specified list of occluders.
            </summary>
      <param name="occluders">The occluders.</param>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.Rendering.SceneNodeRenderer,DigitalRune.Graphics.RenderContext)">
      <summary>
            Clears the occlusion buffer and renders the specified list of occluders.
            </summary>
      <param name="occluders">The occluders.</param>
      <param name="renderer">
            A <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> for rendering custom scene nodes into the
            occlusion buffer.
            </param>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.SceneGraph.LightNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Clears the occlusion buffer and renders the specified list of occluders.
            </summary>
      <param name="occluders">The occluders.</param>
      <param name="lightNode">
            The light node that casts directional shadows. Only required when using shadow caster
            culling.
            </param>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.SceneGraph.LightNode,DigitalRune.Graphics.Rendering.SceneNodeRenderer,DigitalRune.Graphics.RenderContext)">
      <summary>
            Clears the occlusion buffer and renders the specified list of occluders.
            </summary>
      <param name="occluders">The occluders.</param>
      <param name="lightNode">
            Optional: The light node that casts directional shadows. Only required when using shadow
            caster culling.
            </param>
      <param name="renderer">
            Optional: A <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> for rendering custom scene nodes into the
            occlusion buffer.
            </param>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.ResetShadowCasters(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode})">
      <summary>
            Resets state of the shadow casters.
            </summary>
      <param name="nodes">The shadow-casting scene nodes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.OcclusionBuffer.Statistics">
      <summary>
            Gets the occlusion culling statistics.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.VisualizeCameraBuffer(System.Int32,DigitalRune.Graphics.RenderContext)">
      <summary>
            Debugging: Visualizes a level of the camera's hierarchical Z buffer.
            </summary>
      <param name="level">
            The index of the level to visualize where 0 is the most detailed level.
            </param>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.VisualizeLightBuffer(System.Int32,DigitalRune.Graphics.RenderContext)">
      <summary>
            Debugging: Visualizes a level of the light's hierarchical Z buffer. (Only valid when shadow
            caster culling is used.)
            </summary>
      <param name="level">
            The index of the level to visualize where 0 is the most detailed level.
            </param>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.VisualizeObject(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Debugging: Visualizes the occlusion query for the specified scene node.
            </summary>
      <param name="node">The scene node.</param>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.VisualizeShadowCaster(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Debugging: Visualizes the occlusion query for the specified shadow caster.
            </summary>
      <param name="node">The shadow caster.</param>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionBuffer.VisualizeShadowVolume(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Debugging: Visualizes the occlusion query for the specified shadow volume.
            </summary>
      <param name="node">The shadow caster.</param>
      <param name="context">The render context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics">
      <summary>
            Provides statistics about the occlusion culling process.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Rendering.OcclusionCullingStatistics</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.ObjectsCulled">
      <summary>
            Gets the number of objects that were occluded in the last query.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.ObjectsTotal">
      <summary>
            Gets the total number of objects that were tested in the last query.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.ObjectsVisible">
      <summary>
            Gets the number of objects that were visible in the last query.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.Occluders">
      <summary>
            Gets the number of occluders.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.ShadowCastersCulled">
      <summary>
            Gets the number of shadow casters that were culled in the last query.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.ShadowCastersTotal">
      <summary>
            Gets the total number of shadow casters that were tested in the last query.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.OcclusionCullingStatistics.ShadowCastersVisible">
      <summary>
            Gets the total number of shadow casters that were visible in the last query.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer">
      <summary>
            Renders reflection images for the <see cref="T:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer.#ctor(System.Action{DigitalRune.Graphics.RenderContext})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer" /> class.
            </summary>
      <param name="renderCallback">
            The method which renders the scene. Must not be <see langword="null" />.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.PlanarReflectionRenderer.RenderCallback">
      <summary>
            Gets or sets the method which renders the scene.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.ProjectedGridParameters">
      <summary>
            Defines settings for a projected grid.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.DistanceAttenuationEnd">
      <summary>
            Gets or sets the end distance for distance-based attenuation.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.DistanceAttenuationStart">
      <summary>
            Gets or sets the start distance for distance-based attenuation.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.EdgeAttenuation">
      <summary>
            Gets or sets the edge attenuation.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.Height">
      <summary>
            Gets or sets the vertical resolution of the grid.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is 0 or negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.Offset">
      <summary>
            Gets or sets the camera offset.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.ProjectedGridParameters.Width">
      <summary>
            Gets or sets the horizontal resolution of the grid.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is 0 or negative.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer">
      <summary>
            Reconstructs the hardware Z-buffer from the G-buffer.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer.FarBias">
      <summary>
            Gets or sets the factor used to bias the camera far plane distance to avoid 
            z-fighting.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer.NearBias">
      <summary>
            Gets or sets the factor used to bias the camera near plane distance to avoid 
            z-fighting.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer.Render(DigitalRune.Graphics.RenderContext,DigitalRune.Mathematics.Algebra.Vector4F)">
      <summary>
            Rebuilds the current hardware Z-buffer from the G-Buffer and writes the specified color 
            value to the current render target.
            </summary>
      <param name="context">
            The render context. (<see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> and 
            <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0" /> need to be set.)
            </param>
      <param name="color">The color to be written to the render target.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer.Render(DigitalRune.Graphics.RenderContext,Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
            Rebuilds the current hardware Z-buffer from the G-Buffer and copies the specified texture
            to the render target.
            </summary>
      <param name="context">
            The render context. (<see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> and 
            <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0" /> need to be set.)
            </param>
      <param name="colorTexture">
            Optional: The color texture to be copied to the render target.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.RebuildZBufferRenderer.Render(DigitalRune.Graphics.RenderContext,System.Boolean)">
      <summary>
            Rebuilds the current hardware Z-buffer from the G-Buffer and clears or preserves the current
            render target.
            </summary>
      <param name="context">
            The render context. (<see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> and 
            <see cref="P:DigitalRune.Graphics.RenderContext.GBuffer0" /> need to be set.)
            </param>
      <param name="preserveColor">
            If set to <see langword="true" /> color writes are disabled to preserve the current content;
            otherwise, <see langword="false" /> to clear the color target.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.RenderOrder">
      <summary>
            Defines the order in which in objects are rendered.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.RenderOrder.Default">
      <summary>
            The default/optimal render order - depends on the renderer.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.RenderOrder.FrontToBack">
      <summary>
            Sort objects by distance and render nearest objects first.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.RenderOrder.BackToFront">
      <summary>
            Sort objects by distance and render furthest objects first.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.RenderOrder.UserDefined">
      <summary>
            Render objects in the exact same order as they are passed to the renderer.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.SceneCaptureRenderer">
      <summary>
            Renders scene images for the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneCaptureRenderer.#ctor(System.Action{DigitalRune.Graphics.RenderContext})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneCaptureRenderer" /> class.
            </summary>
      <param name="renderCallback">
            The method which renders the scene. Must not be <see langword="null" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="renderCallback" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneCaptureRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneCaptureRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.SceneCaptureRenderer.RenderCallback">
      <summary>
            Gets or sets the method which renders the scene.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer">
      <summary>
            Base class of all scene node renderers.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Rendering.SceneNodeRenderer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Dispose">
      <summary>
            Releases all resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> 
            class and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.SceneNodeRenderer.IsDisposed">
      <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Order">
      <summary>
            Gets the draw order of this scene node renderer.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Render(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders the specified scene node.
            </summary>
      <param name="node">The scene node.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.SceneNodeRendererCollection">
      <summary>
            Manages a collection of <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRendererCollection.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.Rendering.SceneNodeRendererCollection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRendererCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRendererCollection" />. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> for <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRendererCollection" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRendererCollection.InsertItem(System.Int32,DigitalRune.Graphics.Rendering.SceneNodeRenderer)">
      <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">The object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. 
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. 
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneNodeRendererCollection.SetItem(System.Int32,DigitalRune.Graphics.Rendering.SceneNodeRenderer)">
      <summary>
            Replaces the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />. 
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is already contained in the collection. 
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.SceneRenderer">
      <summary>
            A configurable renderer that combines multiple scene node renderers.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneRenderer.#ctor">
      <summary>
            Initializes a new empty instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneRenderer" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneRenderer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> 
            class and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SceneRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.SceneRenderer.Renderers">
      <summary>
            Gets the list of scene node renderers managed by this instance.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer">
      <summary>
            Renders the shadow maps of <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.ShadowMapRenderer.#ctor(DigitalRune.Graphics.Rendering.SceneNodeRenderer)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer" /> class using the specified
            scene node renderer.
            </summary>
      <param name="sceneNodeRenderer">
            The renderer for shadow-casting objects. A <see cref="P:DigitalRune.Graphics.Rendering.ShadowMapRenderer.RenderCallback" /> is created
            automatically which calls the specified renderer.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sceneNodeRenderer" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.ShadowMapRenderer.#ctor(System.Func{DigitalRune.Graphics.RenderContext,System.Boolean})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ShadowMapRenderer" /> class using the specified
            render callback.
            </summary>
      <param name="render">
            The method which renders the scene into the shadow map. Must not be <see langword="null" />.
            See <see cref="P:DigitalRune.Graphics.Rendering.ShadowMapRenderer.RenderCallback" /> for more information.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="render" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.ShadowMapRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.ShadowMapRenderer.RenderCallback">
      <summary>
            Gets or sets the method which renders the scene into the shadow map.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.ShadowMaskRenderer">
      <summary>
            Renders the shadow mask from the shadow map of a <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ShadowMaskRenderer" /> class with a single
            shadow mask.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.ShadowMaskRenderer" /> class with the specified
            number of shadow masks.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="maxNumberOfShadowMasks">The max number of shadow masks.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxNumberOfShadowMasks" /> is negative or greater than 255.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> 
            class and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.Filter">
      <summary>
            Gets or sets a filter that is applied to the shadow masks as a post-process.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.MaxNumberOfShadowsMasks">
      <summary>
            Gets or sets the max number of shadows masks.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or greater than 255.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.RecycleShadowMasks">
      <summary>
            Recycles the shadow masks.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.ShadowMasks">
      <summary>
            Gets the shadow masks. (For debugging only.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.UpsampleDepthSensitivity">
      <summary>
            Gets or sets a value controlling the bilateral upsampling. (Only used when
            <see cref="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.UseHalfResolution" /> is <see langword="true" />.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.ShadowMaskRenderer.UseHalfResolution">
      <summary>
            Gets or sets a value indicating whether the shadow mask is created using only the half scene
            resolution to improve performance.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.SkyboxRenderer">
      <summary>
            Renders a cube map ("skybox") into the background of the current render target.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SkyboxRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SkyboxRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SkyboxRenderer.Render(Microsoft.Xna.Framework.Graphics.TextureCube,DigitalRune.Mathematics.Algebra.Matrix33F,System.Single,DigitalRune.Graphics.RenderContext)">
      <summary>
            Renders a skybox.
            </summary>
      <param name="texture">The cube map with the sky texture.</param>
      <param name="orientation">The orientation of the skybox.</param>
      <param name="exposure">The exposure factor that is multiplied to the cube map values to change the brightness.
            (Usually 1 or higher).</param>
      <param name="context">
            The render context. (<see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> needs to be set.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="texture" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.SkyRenderer">
      <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.SkyNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SkyRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SkyRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SkyRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.SpriteRenderer">
      <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.SpriteNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SpriteRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SpriteRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SpriteRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SpriteRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="spriteBatch">
            The sprite batch used for rendering. Can be <see langword="null" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SpriteRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteFont)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SpriteRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="spriteBatch">
            The sprite batch used for rendering. Can be <see langword="null" />.
            </param>
      <param name="spriteFont">
            The default font, which is used in case the font of a <see cref="T:DigitalRune.Graphics.TextSprite" /> is not set.
            Can be <see langword="null" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SpriteRenderer.#ctor(DigitalRune.Graphics.IGraphicsService,Microsoft.Xna.Framework.Graphics.SpriteFont)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.SpriteRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <param name="spriteFont">
            The default font, which is used in case the font of a <see cref="T:DigitalRune.Graphics.TextSprite" /> is not set.
            Can be <see langword="null" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SpriteRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.SpriteRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer">
      <summary>
            Renders the clipmaps of a <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The current graphics profile is Reach.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.TerrainClipmapRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.TerrainRenderer">
      <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.TerrainRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The current graphics profile is Reach.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.TerrainRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.TerrainRenderer.ClearMeshes(System.Boolean)">
      <summary>
            Clears the internally stored <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh" />es.
            </summary>
      <param name="dispose">
            If set to <see langword="true" /> the internally stored meshes are disposed.
            If set to <see langword="false" /> the references to the meshes are removed but the meshes
            are not disposed.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.TerrainRenderer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> 
            class and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.TerrainRenderer.DrawWireFrame">
      <summary>
            Gets or sets a value indicating whether the wire frame of the terrain should be rendered for
            debugging.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.TerrainRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.TerrainRenderer.SetMesh(DigitalRune.Graphics.Rendering.TerrainRendererMesh)">
      <summary>
            Adds a new <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh" />.
            </summary>
      <param name="mesh">The terrain mesh.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh">
      <summary>
            Represents the mesh that is used by the <see cref="T:DigitalRune.Graphics.Rendering.TerrainRenderer" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.TerrainRendererMesh.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh" /> class.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="numberOfLevels">The number of levels.</param>
      <param name="cellsPerLevel">The number of cells per level.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numberOfLevels" /> or <paramref name="cellsPerLevel" /> is less than 1.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.TerrainRendererMesh.CellsPerLevel">
      <summary>
            Gets the number of cells (texels) per clipmap level.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.TerrainRendererMesh.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.TerrainRendererMesh.IsDisposed">
      <summary>
            Gets a value indicating whether this instance has been disposed of.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.TerrainRendererMesh.Load(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)">
      <summary>
            Loads a <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh" /> from the specified stream.
            </summary>
      <param name="graphicsDevice">The graphics device.</param>
      <param name="stream">The stream.</param>
      <returns>
            The <see cref="T:DigitalRune.Graphics.Rendering.TerrainRendererMesh" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsDevice" /> or <paramref name="stream" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.TerrainRendererMesh.NumberOfLevels">
      <summary>
            Gets the number of clipmap levels.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.TerrainRendererMesh.Save(System.IO.Stream)">
      <summary>
            Writes the mesh data to the specified stream.
            </summary>
      <param name="stream">The stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.UpsamplingFilter">
      <summary>
            Defines the upsampling filter that is used when combining the low-resolution, off-screen
            buffer with the scene.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.UpsamplingFilter.Point">
      <summary>
            Point upsampling. (Fastest, lowest quality)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.UpsamplingFilter.Linear">
      <summary>
            Bilinear upsampling. (Fast, low quality)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.UpsamplingFilter.Bilateral">
      <summary>
            Joint (cross) bilateral upsampling. (Slow, best quality for surfaces)
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.Rendering.UpsamplingFilter.NearestDepth">
      <summary>
            Nearest-depth upsampling. (Slow, best quality for particles and volumetric effects)
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.WaterRenderer">
      <summary>
            Renders <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.WaterRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.WaterRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The current graphics profile is Reach.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.WaterRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.WaterRenderer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> 
            class and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.Rendering.WaterRenderer.ProjectedGridParameters">
      <summary>
            Gets the projected grid parameters.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.WaterRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.Rendering.WaterWavesRenderer">
      <summary>
            Generates the <see cref="T:DigitalRune.Graphics.OceanWaves" /> for <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.WaterWavesRenderer.#ctor(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.Rendering.CloudMapRenderer" /> class.
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.WaterWavesRenderer.CanRender(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Determines whether this renderer can handle the specified scene node.
            </summary>
      <param name="node">The scene node to be rendered.</param>
      <param name="context">The render context.</param>
      <returns>
        <see langword="true" /> if this instance renders the specified node; otherwise, 
            <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.WaterWavesRenderer.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" /> 
            class and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.Rendering.WaterWavesRenderer.Render(System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext,DigitalRune.Graphics.Rendering.RenderOrder)">
      <summary>
            Renders the specified scene nodes.
            </summary>
      <param name="nodes">The scene nodes. The list may contain null entries.</param>
      <param name="context">
            The render context. (The property <see cref="P:DigitalRune.Graphics.RenderContext.CameraNode" /> selects the 
            currently active camera. Some renderers require additional information in the render 
            context. See remarks.)
            </param>
      <param name="order">The render order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nodes" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.AscendingNodeComparer">
      <summary>
            Sorts <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />s by their <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag" /> in ascending
            order.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.AscendingNodeComparer.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.SceneGraph.AscendingNodeComparer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.AscendingNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />s.
            </summary>
      <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> to compare.</param>
      <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term>Less than zero</term>
            <description>
              <paramref name="x" /> is less than <paramref name="y" />.</description>
          </item>
          <item>
            <term>Zero</term>
            <description>
              <paramref name="x" /> equals <paramref name="y" />.</description>
          </item>
          <item>
            <term>Greater than zero</term>
            <description>
              <paramref name="x" /> is greater than <paramref name="y" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.BillboardNode">
      <summary>
            Represents a billboard in a 3D scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.BillboardNode.#ctor(DigitalRune.Graphics.Billboard)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.BillboardNode" /> class.
            </summary>
      <param name="billboard">The billboard.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="billboard" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.BillboardNode.Alpha">
      <summary>
            Gets or sets the opacity of the billboard instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.BillboardNode.AnimationTime">
      <summary>
            Gets or sets the normalized animation time. (Overrides the animation time of an 
            <see cref="T:DigitalRune.Graphics.ImageBillboard" />.)
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or greater than 1.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.BillboardNode.Axis">
      <summary>
            Gets the axis vector of the billboard in world space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.BillboardNode.Billboard">
      <summary>
            Gets or sets the billboard.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.BillboardNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.BillboardNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.BillboardNode.Color">
      <summary>
            Gets or sets the tint color of the billboard instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.BillboardNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.BillboardNode.Normal">
      <summary>
            Gets the normal vector of the billboard in world space.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery">
      <summary>
            Returns the scene nodes that touch a specific reference scene node (usually the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode" />).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.ReferenceNode">
      <summary>
            Gets the reference node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.Reset">
      <summary>
            Resets this query.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.SceneNodes">
      <summary>
            Gets the scene nodes that touch the <see cref="P:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.ReferenceNode" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraFrustumQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
      <summary>
            Sets the query result. 
            </summary>
      <param name="referenceNode">The reference node; can be <see langword="null" />.</param>
      <param name="nodes">
            The scene nodes that touch the reference node. (Note to caller: <paramref name="nodes" />
            should not contain disabled scene nodes!)
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.CameraNode">
      <summary>
            Represents a camera in a scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.#ctor(DigitalRune.Graphics.Camera)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.CameraNode" /> class.
            </summary>
      <param name="camera">The camera.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="camera" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraNode.Camera">
      <summary>
            Gets or sets the camera.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.Dispose(System.Boolean,System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
      <param name="disposeData">
        <see langword="true" /> to dispose scene nodes including data objects; 
            <see langword="false" /> to dispose only scene nodes but preserve the data objects.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.GetInstances">
      <summary>
            Gets a read-only collection of all camera node instances.
            </summary>
      <returns>A read-only collection of all camera node instances.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CameraNode.InvalidateViewDependentData">
      <summary>
            Resets any view-dependent information in the <see cref="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewDependentData" /> dictionary.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraNode.LodBias">
      <summary>
            Gets or sets the LOD bias of the camera.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraNode.View">
      <summary>
            Gets or sets the view matrix.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewDependentData">
      <summary>
            Gets a dictionary that can be used to store view-dependent information.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CameraNode.ViewInverse">
      <summary>
            Gets or sets the inverse of the view matrix.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode">
      <summary>
            Renders a cloud layer into the distant sky.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CloudLayerNode.#ctor(DigitalRune.Graphics.CloudMap)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.CloudLayerNode" /> class.
            </summary>
      <param name="cloudMap">The cloud map.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cloudMap" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.Alpha">
      <summary>
            Gets or sets the opacity of the clouds.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.AmbientLight">
      <summary>
            Gets or sets the ambient light intensity used to shade the clouds.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CloudLayerNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CloudLayerNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.CloudMap">
      <summary>
            Gets or sets the cloud map that provides the cloud texture.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CloudLayerNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CloudLayerNode.Dispose(System.Boolean,System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
      <param name="disposeData">
        <see langword="true" /> to dispose scene nodes including data objects; 
            <see langword="false" /> to dispose only scene nodes but preserve the data objects.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterExponent">
      <summary>
            Gets or sets the forward scatter exponent used to define the range of the forward scatter 
            effect.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterOffset">
      <summary>
            Gets or sets the forward scatter offset used to define the brightness of dark cloud parts 
            when looking straight at the sun.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.ForwardScatterScale">
      <summary>
            Gets or sets the forward scatter exponent used to define the intensity of forward scattered 
            sun light.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.CloudLayerNode.GetTextureCoordinates(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets the texture coordinates of the cloud texture in the specified direction.
            </summary>
      <param name="direction">The normalized direction.</param>
      <returns>
            The texture coordinates of the cloud texture. (The result is undefined if 
            <paramref name="direction" /> does not point towards the sky.)
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.HorizonBias">
      <summary>
            Gets or sets the horizon bias which moves the horizon down.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.HorizonFade">
      <summary>
            Gets or sets a value which determines where the clouds start to fade out towards the 
            horizon.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.NumberOfSamples">
      <summary>
            Gets or sets the number of samples used to compute cloud lighting in the shader.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SampleDistance">
      <summary>
            Gets or sets the sample distance for cloud lighting.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SkyCurvature">
      <summary>
            Gets or sets the sky curvature.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunDirection">
      <summary>
            Gets or sets the direction to the sun.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunLight">
      <summary>
            Gets or sets the sun light intensity used to shade the clouds.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunOcclusion">
      <summary>
            Gets the sun occlusion.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunQuerySize">
      <summary>
            Gets or sets the size of the <see cref="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.SunOcclusion" /> query.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.CloudLayerNode.TextureMatrix">
      <summary>
            Gets or sets the matrix used to transform the cloud texture.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.DecalNode">
      <summary>
            Represents a material projected onto another surface.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.DecalNode.#ctor(DigitalRune.Graphics.Material)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.DecalNode" /> class.
            </summary>
      <param name="material">The decal material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="material" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.Alpha">
      <summary>
            Gets or sets the opacity of the decal.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.DecalNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.DecalNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.DecalNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.Depth">
      <summary>
            Gets or sets the depth of the decal.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.DrawOrder">
      <summary>
            Gets or sets the draw order.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.Height">
      <summary>
            Gets or sets the height of the decal.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.Material">
      <summary>
            Gets or sets the decal material.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.MaterialInstance">
      <summary>
            Gets the material instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.NormalThreshold">
      <summary>
            Gets or sets the normal threshold in radians.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or greater than π.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.Options">
      <summary>
            Gets or sets the options for rendering the decal.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.DecalNode.Width">
      <summary>
            Gets or sets the width of the decal.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.DescendingNodeComparer">
      <summary>
            Sorts <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />s by their <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag" /> in descending
            order.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.DescendingNodeComparer.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.SceneGraph.DescendingNodeComparer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.DescendingNodeComparer.Compare(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />s.
            </summary>
      <param name="x">The first <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> to compare.</param>
      <param name="y">The second <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term>Less than zero</term>
            <description>
              <paramref name="x" /> is less than <paramref name="y" />.</description>
          </item>
          <item>
            <term>Zero</term>
            <description>
              <paramref name="x" /> equals <paramref name="y" />.</description>
          </item>
          <item>
            <term>Greater than zero</term>
            <description>
              <paramref name="x" /> is greater than <paramref name="y" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.FigureNode">
      <summary>
            Represents a drawing composed of lines and shapes rendered with a certain stroke and fill.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.FigureNode.#ctor(DigitalRune.Graphics.Figure)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.FigureNode" /> class.
            </summary>
      <param name="figure">The figure.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="figure" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.FigureNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.FigureNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.FigureNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.DashInWorldSpace">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeDashPattern" /> is computed in
            world space or in screen space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.DrawOrder">
      <summary>
            Gets or sets the draw order.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.Figure">
      <summary>
            Gets or sets the drawing.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.FillAlpha">
      <summary>
            Gets or sets the fill opacity.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.FillColor">
      <summary>
            Gets or sets the fill color.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeAlpha">
      <summary>
            Gets or sets the opacity of the stroked line.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeColor">
      <summary>
            Gets or sets the stroke color.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeDashPattern">
      <summary>
            Gets or sets the stroke dash pattern.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FigureNode.StrokeThickness">
      <summary>
            Gets or sets the stroke thickness.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value is negative.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.FogNode">
      <summary>
            Represents (global) fog in a scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.FogNode.#ctor(DigitalRune.Graphics.Fog)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.FogNode" /> class.
            </summary>
      <param name="fog">The fog properties.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fog" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.FogNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.FogNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.FogNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FogNode.Fog">
      <summary>
            Gets or sets the fog properties.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FogNode.Priority">
      <summary>
            Gets or sets the priority.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FogNode.Shape">
      <summary>
            Gets or sets the bounding shape of this scene node.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.FogQuery">
      <summary>
            Returns the <see cref="P:DigitalRune.Graphics.SceneGraph.FogQuery.FogNodes" /> that affect a specific scene node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.FogQuery.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.FogQuery" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FogQuery.FogNodes">
      <summary>
            Gets the fog nodes.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.FogQuery.ReferenceNode">
      <summary>
            Gets the reference node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.FogQuery.Reset">
      <summary>
            Resets this query.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.FogQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
      <summary>
            Sets the query result. 
            </summary>
      <param name="referenceNode">The reference node; can be <see langword="null" />.</param>
      <param name="nodes">
            The scene nodes that touch the reference node. (Note to caller: <paramref name="nodes" />
            should not contain disabled scene nodes!)
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.GradientSkyNode">
      <summary>
            Renders the sky using simple color gradients.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.GradientSkyNode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.GradientSkyNode" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackColor">
      <summary>
            Gets or sets the color of the horizon opposite the sun.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackGroundShift">
      <summary>
            Gets or sets the relative height where the sky color is the average of the
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackColor" /> and the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.GroundColor" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackZenithShift">
      <summary>
            Gets or sets the relative height where the sky color is the average of the
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.BackColor" /> and the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.ZenithColor" />.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CieSkyParameters">
      <summary>
            The parameters of the CIE sky luminance distribution.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CieSkyStrength">
      <summary>
            Gets or sets the strength of the CIE sky luminance distribution (see 
            <see cref="F:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CieSkyParameters" />).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.GradientSkyNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.GradientSkyNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontColor">
      <summary>
            Gets or sets the color of the horizon below the sun.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontGroundShift">
      <summary>
            Gets or sets the relative height where the sky color is the average of the
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontColor" /> and the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.GroundColor" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontZenithShift">
      <summary>
            Gets or sets the relative height where the sky color is the average of the
            <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.FrontColor" /> and the <see cref="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.ZenithColor" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.GroundColor">
      <summary>
            Gets or sets the color at the ground.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.SunDirection">
      <summary>
            Gets or sets the direction to the sun.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientSkyNode.ZenithColor">
      <summary>
            Gets or sets the color at the zenith.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode">
      <summary>
            Renders the sky using lookup textures which contain color gradients.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.BackTexture">
      <summary>
            Gets or sets the gradient lookup texture for the side opposite to the sun.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CieSkyParameters">
      <summary>
            The parameters of the CIE sky luminance distribution.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CieSkyStrength">
      <summary>
            Gets or sets the strength of the CIE sky luminance distribution (see 
            <see cref="F:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CieSkyParameters" />).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.Color">
      <summary>
            Gets or sets the tint color of the sky.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.FrontTexture">
      <summary>
            Gets or sets the gradient lookup texture for the side facing to the sun.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.SunDirection">
      <summary>
            Gets or sets the direction to the sun.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.GradientTextureSkyNode.TimeOfDay">
      <summary>
            Gets or sets the time of day.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.IScene">
      <summary>
            Manages a collection of 3D objects represented by scene nodes (a.k.a the "scene graph"). 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.IScene.Children">
      <summary>
            Gets the scene nodes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.IScene.HaveContact(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Determines whether bounding shapes of two scene nodes overlap.
            </summary>
      <param name="nodeA">The first scene node.</param>
      <param name="nodeB">The second scene node.</param>
      <returns>
        <see langword="true" /> if the bounding shape of the scene nodes overlap; 
            <see langword="false" /> if the two nodes do not touch.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.IScene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Gets the scene nodes that touch the specified reference node.
            </summary>
      <param name="referenceNode">
            The reference node. Must not be <see langword="null" />.
            </param>
      <param name="context">The render context.</param>
      <typeparam name="T">
            The type of query (see <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery" />) that should be executed.
            </typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery" /> object containing the result of the query.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="referenceNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.ISceneQuery">
      <summary>
             Represents a query that can be executed against a scene.
             </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ISceneQuery.ReferenceNode">
      <summary>
            Gets the reference node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ISceneQuery.Reset">
      <summary>
            Resets this query.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ISceneQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
      <summary>
            Sets the query result. 
            </summary>
      <param name="referenceNode">The reference node; can be <see langword="null" />.</param>
      <param name="nodes">
            The scene nodes that touch the reference node. (Note to caller: <paramref name="nodes" />
            should not contain disabled scene nodes!)
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.LensFlareNode">
      <summary>
            Represents a lens flare effect in a scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LensFlareNode.#ctor(DigitalRune.Graphics.LensFlare)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LensFlareNode" /> class.
            </summary>
      <param name="lensFlare">The lens flare effect.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lensFlare" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LensFlareNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LensFlareNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LensFlareNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LensFlareNode.Intensity">
      <summary>
            Gets or sets the intensity of this lens flare node.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LensFlareNode.LensFlare">
      <summary>
            Gets or sets the lens flare effect.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.LightNode">
      <summary>
            Represents a light in a scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LightNode.#ctor(DigitalRune.Graphics.Light)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LightNode" /> class.
            </summary>
      <param name="light">The light.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="light" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightNode.Clip">
      <summary>
            Gets or sets the clip geometry.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LightNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LightNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LightNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightNode.InvertClip">
      <summary>
            Gets or sets a value indicating whether <see cref="P:DigitalRune.Graphics.SceneGraph.LightNode.Clip" /> geometry determines the volume
            that can be lit or the volume that should be ignored by the light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightNode.Light">
      <summary>
            Gets or sets the light.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightNode.Priority">
      <summary>
            Gets or sets the priority.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightNode.Shadow">
      <summary>
            Gets or sets the shadow data of this light node.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.LightQuery">
      <summary>
            Returns the lights that affect a specific scene node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LightQuery.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LightQuery" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.AmbientLights">
      <summary>
            Gets the ambient lights.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.DirectionalLights">
      <summary>
            Gets the directional lights.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.ImageBasedLights">
      <summary>
            Gets the image-based lights.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.OtherLights">
      <summary>
            Gets other lights that did not fit into any of the predefined categories
            (<see cref="P:DigitalRune.Graphics.SceneGraph.LightQuery.AmbientLights" />, <see cref="P:DigitalRune.Graphics.SceneGraph.LightQuery.DirectionalLights" />, etc.).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.PointLights">
      <summary>
            Gets the point lights.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.ProjectorLights">
      <summary>
            Gets the projector lights.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.ReferenceNode">
      <summary>
            Gets the reference node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LightQuery.Reset">
      <summary>
            Resets this query.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LightQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
      <summary>
            Sets the query result. 
            </summary>
      <param name="referenceNode">The reference node; can be <see langword="null" />.</param>
      <param name="nodes">
            The scene nodes that touch the reference node. (Note to caller: <paramref name="nodes" />
            should not contain disabled scene nodes!)
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LightQuery.Spotlights">
      <summary>
            Gets the spotlights.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.LodCollection">
      <summary>
            Stores the levels of detail (LODs) of an object.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Add(System.Single,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Adds a LOD to the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.
            </summary>
      <param name="distance">
            The distance at which the LOD will be visible. (Must be normalized - see 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.)
            </param>
      <param name="node">
            The LOD node (a single scene node or subtree that represents the LOD).
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="distance" /> is negative, infinite or NaN.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Clear">
      <summary>
            Removes all LODs from the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LodCollection.Count">
      <summary>
            Gets the number of LODs.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.IndexOf(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Determines the index of a specific LOD in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.
            </summary>
      <param name="node">
            The LOD node (a single scene node or subtree that represents the LOD).
            </param>
      <returns>
            The index of <paramref name="node" /> if found in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />; 
            otherwise, -1.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.IndexOf(System.Single)">
      <summary>
            Determines the index of the LOD at a specific distance in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.
            </summary>
      <param name="distance">
            The LOD distance. (Must be normalized - see <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.)
            </param>
      <returns>
            The index of the LOD at the specified <paramref name="distance" /> if found in the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />; otherwise, -1.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LodCollection.Item(System.Int32)">
      <summary>
            Gets the LOD at the specified index.
            </summary>
      <param name="index">The LOD index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Graphics.SceneGraph.LodCollection.Count" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Remove(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Removes the specified LOD node from the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.
            </summary>
      <param name="node">
            The LOD node (a single scene node or subtree that represents the LOD).
            </param>
      <returns>
        <see langword="true" /> if the LOD was found and removed; otherwise, <see langword="false" /> 
            if the LOD was not found in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Remove(System.Int32)">
      <summary>
            Removes the LOD at the specified index from the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.
            </summary>
      <param name="index">The index of the LOD to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Remove(System.Single)">
      <summary>
            Removes the LOD at a specific distance from the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.
            </summary>
      <param name="distance">
            The LOD distance. (Must be normalized - see <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.)
            </param>
      <returns>
        <see langword="true" /> if the LOD was found and removed; otherwise, <see langword="false" /> 
            if the LOD was not found in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#LodEntry}#Add(DigitalRune.Graphics.SceneGraph.LodEntry)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:DigitalRune.Graphics.SceneGraph.LodEntry.Distance" /> is negative, infinite or NaN.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:DigitalRune.Graphics.SceneGraph.LodEntry.Node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#LodEntry}#Contains(DigitalRune.Graphics.SceneGraph.LodEntry)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#LodEntry}#CopyTo(DigitalRune.Graphics.SceneGraph.LodEntry[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting 
            at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to 
            or greater than the length of <paramref name="array" />. Or the number of elements in the 
            source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from 
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#LodEntry}#IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#LodEntry}#Remove(DigitalRune.Graphics.SceneGraph.LodEntry)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns 
            <see langword="false" /> if <paramref name="item" /> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#Generic#IEnumerable{DigitalRune#Graphics#SceneGraph#LodEntry}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator">
      <summary>
            Enumerates the elements of a <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; 
            <see langword="false" /> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last 
            element.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" /> was modified after the enumerator was created.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.LodEntry">
      <summary>
            Represents an entry in the <see cref="T:DigitalRune.Graphics.SceneGraph.LodCollection" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LodEntry.Distance">
      <summary>
            Gets or sets the LOD distance. (Needs to be normalized - see remarks.)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodEntry.Equals(DigitalRune.Graphics.SceneGraph.LodEntry)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" />
            parameter; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodEntry.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodEntry.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LodEntry.Node">
      <summary>
            Gets or sets the LOD node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodEntry.op_Equality(DigitalRune.Graphics.SceneGraph.LodEntry,DigitalRune.Graphics.SceneGraph.LodEntry)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.LodEntry" /> instances to determine whether they are the same.
            </summary>
      <param name="left">The first <see cref="T:DigitalRune.Graphics.SceneGraph.LodEntry" />.</param>
      <param name="right">The second <see cref="T:DigitalRune.Graphics.SceneGraph.LodEntry" />.</param>
      <returns>
        <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> are the 
            same; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodEntry.op_Inequality(DigitalRune.Graphics.SceneGraph.LodEntry,DigitalRune.Graphics.SceneGraph.LodEntry)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.LodEntry" /> instances to determine whether they are different.
            </summary>
      <param name="left">The first <see cref="T:DigitalRune.Graphics.SceneGraph.LodEntry" />.</param>
      <param name="right">The second <see cref="T:DigitalRune.Graphics.SceneGraph.LodEntry" />.</param>
      <returns>
        <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> are 
            different; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.LodGroupNode">
      <summary>
            Represents a visual object with multiple levels of detail (LODs). 
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode" /> class with the default 
            capacity.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.LodGroupNode" /> class.
            </summary>
      <param name="capacity">The initial capacity of the LOD collection.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.LodGroupNode.Levels">
      <summary>
            Gets the collection that stores all levels of detail (LODs).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.OnPoseChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Geometry.IGeometricObject.PoseChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Graphics.SceneGraph.SceneNode.ShapeChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodGroupNode.SelectLod(DigitalRune.Graphics.RenderContext,System.Single)">
      <summary>
            Gets the LOD or LOD transitions for the specified distance.
            </summary>
      <param name="context">The render context.</param>
      <param name="distance"> The view-normalized distance (including any LOD bias). </param>
      <returns>
            An <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection" /> that describes the current LOD or LOD transition.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.LodSelection">
      <summary>
            Represents the current LOD or LOD transition.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.LodSelection.Current">
      <summary>
            The current LOD node.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.LodSelection.CurrentIndex">
      <summary>
            The index of the current LOD.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodSelection.Equals(DigitalRune.Graphics.SceneGraph.LodSelection)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" />
            parameter; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodSelection.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodSelection.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures
            like a hash table. 
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.LodSelection.Next">
      <summary>
            The next LOD node, if the object is transitioning between two LODs.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.LodSelection.NextIndex">
      <summary>
            The index of the next LOD, if the object is transitioning between two LODs.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodSelection.op_Equality(DigitalRune.Graphics.SceneGraph.LodSelection,DigitalRune.Graphics.SceneGraph.LodSelection)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection" />s to determine whether they are the same.
            </summary>
      <param name="left">The first <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection" />.</param>
      <param name="right">The second <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection" />.</param>
      <returns>
        <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> are the 
            same; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.LodSelection.op_Inequality(DigitalRune.Graphics.SceneGraph.LodSelection,DigitalRune.Graphics.SceneGraph.LodSelection)">
      <summary>
            Compares two <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection" />s to determine whether they are different.
            </summary>
      <param name="left">The first <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection" />.</param>
      <param name="right">The second <see cref="T:DigitalRune.Graphics.SceneGraph.LodSelection" />.</param>
      <returns>
        <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> are 
            different; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.LodSelection.Transition">
      <summary>
            The transition progress [0, 1[, if the object is transitioning between two LODs.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.MaterialInstance">
      <summary>
            Represents an instance of a specific material.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" /> class.
            (This constructor creates an uninitialized instance. Use this constructor only for 
            cloning or other special cases!)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.#ctor(DigitalRune.Graphics.Material)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" /> class.
            </summary>
      <param name="material">The material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="material" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" /> that is a clone of the current instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" /> that is a clone of the current instance.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.CloneCore(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
      <summary>
            Makes the instance a clone (deep copy) of the specified 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.Contains(System.String)">
      <summary>
            Determines whether the material instance contains effect parameter bindings for the 
            specified render pass.
            </summary>
      <param name="pass">The render pass.</param>
      <returns>
        <see langword="true" /> if the material instance contains effect parameter bindings for the 
            specified render pass; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Count">
      <summary>
            Gets the number of render passes supported by this material instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.EffectBindings">
      <summary>
            Gets a read-only collection of effect bindings used by this material instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Item(System.String)">
      <summary>
            Gets or sets the effect parameter bindings for the specified render pass.
            </summary>
      <param name="pass">The render pass.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="pass" /> is not found in the material.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Material">
      <summary>
            Gets the material.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.Passes">
      <summary>
            Gets a read-only collection of all the render passes supported by this material instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Add(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Contains(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding}[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#Remove(System.Collections.Generic.KeyValuePair{System.String,DigitalRune.Graphics.Effects.EffectBinding})">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#Add(System.String,DigitalRune.Graphics.Effects.EffectBinding)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#ContainsKey(System.String)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#Remove(System.String)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The key of the element to remove.</param>
      <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#TryGetValue(System.String,DigitalRune.Graphics.Effects.EffectBinding@)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IDictionary{System#String@DigitalRune#Graphics#Effects#EffectBinding}#Values">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@DigitalRune#Graphics#Effects#EffectBinding}}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstance.TryGet(System.String,DigitalRune.Graphics.Effects.EffectBinding@)">
      <summary>
            Gets the effect parameter bindings for the specified render pass.
            </summary>
      <param name="pass">The render pass.</param>
      <param name="bindings">
            When this method returns, the effect parameter bindings for the specified render pass, if 
            the render pass is supported by the material; otherwise, the <see langword="null" />. This 
            parameter is passed uninitialized.
            </param>
      <returns>
        <see langword="true" /> if the material supports the specified render pass; otherwise, 
            <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pass" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection">
      <summary>
            Manages a read-only collection of <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" /> objects.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Contains(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
      <summary>
            Determines whether the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" /> contains a specific value.
            </summary>
      <param name="materialInstance">
            The material instance to locate in the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />.
            </param>
      <returns>
        <see langword="true" /> if <paramref name="materialInstance" /> is found in the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.CopyTo(DigitalRune.Graphics.SceneGraph.MaterialInstance[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" /> to an 
            <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />. The <see cref="T:System.Array" /> must have zero-based 
            indexing.
            </param>
      <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. Or <paramref name="arrayIndex" /> is equal to 
            or greater than the length of <paramref name="array" />. Or the number of elements in the 
            source <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" /> is greater than the available space from 
            <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Count">
      <summary>
            Gets the number of material instances contained in the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.IndexOf(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
      <summary>
            Determines the index of a specific material instance in the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />.
            </summary>
      <param name="materialInstance">
            The material instance to locate in the <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />.
            </param>
      <returns>
            The index of <paramref name="materialInstance" /> if found in the collection; otherwise, -1.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Item(System.Int32)">
      <summary>
            Gets the material instance at the specified index.
            </summary>
      <param name="index">The zero-based index of the material instance to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or equal to or greater than <see cref="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Count" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#MaterialInstance}#Add(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
      <summary>
            Not supported.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" /> is read-only.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#MaterialInstance}#Clear">
      <summary>
            Not supported.
            </summary>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#MaterialInstance}#IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#ICollection{DigitalRune#Graphics#SceneGraph#MaterialInstance}#Remove(DigitalRune.Graphics.SceneGraph.MaterialInstance)">
      <summary>
            Not supported.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns 
            <see langword="false" /> if <paramref name="item" /> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#IEnumerable{DigitalRune#Graphics#SceneGraph#MaterialInstance}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#IList{DigitalRune#Graphics#SceneGraph#MaterialInstance}#Insert(System.Int32,DigitalRune.Graphics.SceneGraph.MaterialInstance)">
      <summary>
            Not supported.
            </summary>
      <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
      <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#Generic#IList{DigitalRune#Graphics#SceneGraph#MaterialInstance}#RemoveAt(System.Int32)">
      <summary>
            Not supported.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator">
      <summary>
            Enumerates the elements of a <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting 
            unmanaged resources.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; 
            <see langword="false" /> if the enumerator has passed the end of the collection.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MaterialInstanceCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last 
            element.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1">
      <summary>
            Represents a <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode" /> which uses hardware instancing to efficiently render many
            instances of a single <see cref="T:DigitalRune.Graphics.Mesh" />.
            </summary>
      <typeparam name="T">
            The vertex type which stores instance data, usually <see cref="T:DigitalRune.Graphics.InstanceData" />.
            </typeparam>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.#ctor(DigitalRune.Graphics.Mesh)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1" /> class.
            </summary>
      <param name="mesh">The <see cref="T:DigitalRune.Graphics.Mesh" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> is <see langword="null" />. 
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.#ctor(DigitalRune.Graphics.Mesh,System.Collections.Generic.ICollection{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1" /> class.
            </summary>
      <param name="mesh">The <see cref="T:DigitalRune.Graphics.Mesh" />.</param>
      <param name="instances">The instances.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Dispose(System.Boolean,System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
      <param name="disposeData">
        <see langword="true" /> to dispose scene nodes including data objects; 
            <see langword="false" /> to dispose only scene nodes but preserve the data objects.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Instances">
      <summary>
            Gets or sets the collection which stores data for each instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.InvalidateInstances">
      <summary>
            Notifies this <see cref="T:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1" /> that an element in <see cref="P:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Instances" />
            was modified.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MeshInstancingNode`1.Shape">
      <summary>
            Gets or sets the bounding shape of this scene node.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.MeshNode">
      <summary>
            Represents an instance of a mesh in a 3D scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.#ctor(DigitalRune.Graphics.Mesh)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.MeshNode" /> class.
            </summary>
      <param name="mesh">The <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.Mesh" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mesh" /> is <see langword="null" />. 
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.MeshNode.Dispose(System.Boolean,System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
      <param name="disposeData">
        <see langword="true" /> to dispose scene nodes including data objects; 
            <see langword="false" /> to dispose only scene nodes but preserve the data objects.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MeshNode.MaterialInstances">
      <summary>
            Gets a collection of <see cref="T:DigitalRune.Graphics.SceneGraph.MaterialInstance" />s associated with the mesh.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MeshNode.Mesh">
      <summary>
            Gets or sets the mesh.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MeshNode.MorphWeights">
      <summary>
            Gets or sets the weights of the morph targets.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.MeshNode.SkeletonPose">
      <summary>
            Gets or sets the skeleton pose for mesh skinning.
            </summary>
      <exception cref="T:System.ArgumentException">
            The <see cref="T:DigitalRune.Animation.Character.Skeleton" /> of the <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.SkeletonPose" /> is different from the 
            <see cref="T:DigitalRune.Animation.Character.Skeleton" /> of the <see cref="P:DigitalRune.Graphics.SceneGraph.MeshNode.Mesh" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.ModelNode">
      <summary>
            Represents a 3D model composed of multiple <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ModelNode.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>DigitalRune.Graphics.SceneGraph.ModelNode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ModelNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ModelNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ModelNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.OccluderNode">
      <summary>
            Represents an occluder in a 3D scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.OccluderNode.#ctor(DigitalRune.Graphics.Occluder)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.OccluderNode" /> class.
            </summary>
      <param name="occluder">The occluder.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="occluder" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.OccluderNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.OccluderNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.OccluderNode.Occluder">
      <summary>
            Gets or sets the occluder.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode">
      <summary>
            Represents an instance of a particle effect in a 3D scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.#ctor(DigitalRune.Particles.ParticleSystem)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.ParticleSystemNode" /> class.
            </summary>
      <param name="particleSystem">The particle system.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="particleSystem" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.Alpha">
      <summary>
            Gets or sets the opacity (alpha) of the particle system instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.AngleOffset">
      <summary>
            Gets or sets the rotation offset which is added to all particles.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.Color">
      <summary>
            Gets or sets the tint color of the particle system instance.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.ParticleSystem">
      <summary>
            Gets or sets the particle system.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ParticleSystemNode.Synchronize(DigitalRune.Graphics.IGraphicsService)">
      <summary>
            Synchronizes the graphics data with the particle system data. (Needs to be called once per
            frame!)
            </summary>
      <param name="graphicsService">The graphics service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphicsService" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode">
      <summary>
            Represents an image of a planar reflection (e.g. a flat mirror).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.#ctor(DigitalRune.Graphics.RenderToTexture)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode" /> class.
            </summary>
      <param name="renderToTexture">The render texture target.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="renderToTexture" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.Far">
      <summary>
            Gets or sets the far plane distance for the reflection camera.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.FieldOfViewScale">
      <summary>
            Gets or sets the field-of-view scale.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.LodBias">
      <summary>
            Gets or sets the LOD bias.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.NormalLocal">
      <summary>
            Gets or sets the normal of the reflection plane in local space.
            </summary>
      <exception cref="T:System.ArgumentException">
            The normal vector must be normalized.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.NormalWorld">
      <summary>
            Gets the normal of the reflection plane in world space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.PlanarReflectionNode.Shape">
      <summary>
            Gets or sets the bounding shape of this scene node.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.RenderToTextureNode">
      <summary>
            Represents a scene node which renders data to a texture (e.g. a scene capture, an environment
            map, or a reflection image for a mirror).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.RenderToTextureNode.#ctor(DigitalRune.Graphics.RenderToTexture)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.RenderToTextureNode" /> class.
            </summary>
      <param name="renderToTexture">The render texture target.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="renderToTexture" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.RenderToTextureNode.Dispose(System.Boolean,System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
      <param name="disposeData">
        <see langword="true" /> to dispose scene nodes including data objects; 
            <see langword="false" /> to dispose only scene nodes but preserve the data objects.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.RenderToTextureNode.RenderToTexture">
      <summary>
            Gets or sets the render-to-texture target.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode">
      <summary>
            Renders the sky using atmospheric scattering.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.AtmosphereHeight">
      <summary>
            Gets or sets the height of the atmosphere.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseColorShift">
      <summary>
            Gets or sets the relative height where the base sky color is the average of the
            <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseHorizonColor" /> and the <see cref="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseZenithColor" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseHorizonColor">
      <summary>
            Gets or sets the color at the horizon when there is no sunlight.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BaseZenithColor">
      <summary>
            Gets or sets the color at the zenith when there is no sunlight.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BetaMie">
      <summary>
            Gets or sets the scatter/extinction coefficients for Mie scattering.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.BetaRayleigh">
      <summary>
            Gets or sets the scatter/extinction coefficients for Rayleigh scattering.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.GetAmbientLight(System.Int32)">
      <summary>
            Approximates the ambient light by sampling the sky.
            </summary>
      <param name="numberOfSamples">The number of samples.</param>
      <returns>The ambient light created by the sky.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.GetFogColor(System.Int32)">
      <summary>
            Approximates the <see cref="T:DigitalRune.Graphics.Fog" /> color by sampling the sky horizon colors.
            </summary>
      <param name="numberOfSamples">The number of samples.</param>
      <returns>The fog color.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.GetFogColor(System.Int32,System.Single)">
      <summary>
            Approximates the <see cref="T:DigitalRune.Graphics.Fog" /> color by sampling the sky horizon colors.
            </summary>
      <param name="numberOfSamples">The number of samples.</param>
      <param name="elevation">
            The elevation angle at which to sample. The angle is specified in radians and is usually
            in the range [0, π/2]. Use 0 to sample exactly at the horizon. Use positive values to sample 
            above the horizon.
            </param>
      <returns>The fog color.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.GetSunlight">
      <summary>
            Gets the sunlight.
            </summary>
      <returns>The intensity of the direct sunlight.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.GetTransmittance(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Gets the transmittance for a specified view direction.
            </summary>
      <param name="viewDirection">The view direction.</param>
      <returns>The transmittance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.GMie">
      <summary>
            Gets or sets the scattering symmetry constant g for Mie scattering.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.NumberOfSamples">
      <summary>
            Gets or sets the number of samples used to compute the atmospheric scattering in the shader.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.ObserverAltitude">
      <summary>
            Gets or sets the altitude (height above the ground) of the observer.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.PlanetRadius">
      <summary>
            Gets or sets the radius of the planet ground level.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.ScaleHeight">
      <summary>
            Gets or sets the scale height which is the altitude (height above ground) where the average
            atmospheric density is found.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.SunColor">
      <summary>
            Gets or sets the color of the sun light (outside the atmosphere).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.SunDirection">
      <summary>
            Gets or sets the direction to the sun.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.SunIntensity">
      <summary>
            Gets or sets the intensity of the sun light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ScatteringSkyNode.Transmittance">
      <summary>
            Gets or sets the transmittance of the sky.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.Scene">
      <summary>
            Manages a scene of 3D objects represented by scene nodes (a.k.a the "scene graph"). 
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.Scene" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Not supported.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.CreateInstanceCore">
      <summary>
            Not supported.
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.Dispose(System.Boolean,System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
      <param name="disposeData">
        <see langword="true" /> to dispose scene nodes including data objects; 
            <see langword="false" /> to dispose only scene nodes but preserve the data objects.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.Scene.EnableMultithreading">
      <summary>
            Gets or sets a value indicating whether multithreading is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.Scene.Filter">
      <summary>
            Gets or sets a filter which is used in <see cref="M:DigitalRune.Graphics.SceneGraph.Scene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.GetDefaultGroup(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Called when the default group of a new scene node is set.
            </summary>
      <param name="sceneNode">The scene node.</param>
      <returns>The default group of a scene node.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.GetGroup(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the group ID of a scene node.
            </summary>
      <param name="sceneNode">The scene node.</param>
      <returns>The group ID.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sceneNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.HaveContact(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Determines whether bounding shapes of two scene nodes overlap.
            </summary>
      <param name="nodeA">The first scene node.</param>
      <param name="nodeB">The second scene node.</param>
      <returns>
        <see langword="true" /> if the bounding shape of the scene nodes overlap; 
            <see langword="false" /> if the two nodes do not touch.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.OnParentChanged(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Called when <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Parent" /> was changed.
            </summary>
      <param name="oldParent">The old parent.</param>
      <param name="newParent">The new parent.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.OnSceneChanged(DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Graphics.SceneGraph.SceneNode.SceneChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.Query``1(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.RenderContext)">
      <summary>
            Gets the scene nodes that touch the specified reference node.
            </summary>
      <param name="referenceNode">
            The reference node. Must not be <see langword="null" />.
            </param>
      <param name="context">The render context.</param>
      <typeparam name="T">
            The type of query (see <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery" />) that should be executed.
            </typeparam>
      <returns>The <see cref="T:DigitalRune.Graphics.SceneGraph.ISceneQuery" /> object containing the result of the query.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="referenceNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.SetGroup(DigitalRune.Graphics.SceneGraph.SceneNode,System.Int32)">
      <summary>
            Sets the group ID of a scene node.
            </summary>
      <param name="sceneNode">The scene node.</param>
      <param name="group">The group ID.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sceneNode" /> is <see langword="null" />.
            </exception>
      <exception cref="T:DigitalRune.Graphics.GraphicsException">
            The group of the scene node cannot be changed because the scene node has already been added
            to a scene.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.Scene.Update(System.TimeSpan)">
      <summary>
            Updates the scene.
            </summary>
      <param name="deltaTime">The time step size in seconds.</param>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode">
      <summary>
            Captures a snapshot of the scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.#ctor(DigitalRune.Graphics.RenderToTexture)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneCaptureNode" /> class.
            </summary>
      <param name="renderToTexture">The render texture target.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="renderToTexture" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.CameraNode">
      <summary>
            Gets or sets the camera node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneCaptureNode.Shape">
      <summary>
            Gets or sets the bounding shape of this scene node.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs">
      <summary>
            Provides arguments for an event concerning a <see cref="P:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.SceneNode" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.Changes">
      <summary>
            Gets or sets the changes.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.Create(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneChanges)">
      <summary>
            Creates an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs" /> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
      <param name="sceneNode">The scene node.</param>
      <param name="changes">The changes.</param>
      <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs" /> class.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sceneNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.Recycle">
      <summary>
            Recycles this instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs.SceneNode">
      <summary>
            Gets or sets the scene node.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SceneChanges">
      <summary>
            Specifies a change in the scene graph.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.None">
      <summary>
            No change.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.NodeAdded">
      <summary>
            A scene node was added to the local subtree.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.NodeRemoved">
      <summary>
            A scene node was removed from the local subtree.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.IsEnabledChanged">
      <summary>
            A scene node's <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsEnabled" /> flag has changed.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.ShapeChanged">
      <summary>
            The bounding shape of a scene node has changed.
            </summary>
    </member>
    <member name="F:DigitalRune.Graphics.SceneGraph.SceneChanges.PoseChanged">
      <summary>
            The pose of a scene node has changed.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SceneHelper">
      <summary>
            Provides helper methods for working with a scene graph and <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />s.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.ClearLastPose(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
      <summary>
            Clears the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastPoseWorld" /> property of the current scene node (and its 
            descendants).
            </summary>
      <param name="sceneNode">The scene node.</param>
      <param name="recursive">
            If set to <see langword="true" /> this method is executed recursively on the specified node 
            and all descendants nodes; otherwise, this method is executed only on the specified node.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sceneNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.ClearLastScale(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
      <summary>
            Clears the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastScaleWorld" /> property of the current scene node (and 
            its descendants).
            </summary>
      <param name="sceneNode">The scene node.</param>
      <param name="recursive">
            If set to <see langword="true" /> this method is executed recursively on the specified node 
            and all descendants nodes; otherwise, this method is executed only on the specified node.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sceneNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.Contains(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Determines whether whether a scene node contains another scene node in its subtree.
            </summary>
      <param name="containingNode">The containing node.</param>
      <param name="containedNode">The contained node.</param>
      <returns>
        <see langword="true" /> if the subtree where the root is <paramref name="containingNode" />
            contains <paramref name="containedNode" /> (in other words, <paramref name="containingNode" />
            is an ancestor of <paramref name="containedNode" /> or both nodes are equal); 
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containingNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetAncestors(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the ancestors of the given scene node.
            </summary>
      <param name="node">The scene node.</param>
      <returns>The ancestors of this scene node.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetChildren(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the children of the given scene node.
            </summary>
      <param name="node">The node.</param>
      <returns>
            The children of the given node or an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> if 
            <paramref name="node" /> or <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Children" /> is <see langword="null" />.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetDescendants(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the descendants of the given scene node using a depth-first search.
            </summary>
      <param name="node">The scene node.</param>
      <returns>The descendants of this scene node in depth-first order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetDescendants(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
      <summary>
            Gets the descendants of the given scene node using a depth-first or a breadth-first search.
            </summary>
      <param name="node">The scene node.</param>
      <param name="depthFirst">
            If set to <see langword="true" /> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
      <returns>The descendants of this scene node.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetLeaves(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the leaves of the scene node.
            </summary>
      <param name="node">The scene node where to start the search.</param>
      <returns>The leaves of the scene node.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetRoot(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the root node.
            </summary>
      <param name="node">The scene node.</param>
      <returns>The root node.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSceneNode(DigitalRune.Graphics.SceneGraph.SceneNode,System.String)">
      <summary>
            Gets a scene node by name from the subtree of the specified scene node.
            </summary>
      <param name="node">The scene node.</param>
      <param name="name">The name.</param>
      <returns>
            The first scene node with the given name; or <see langword="null" /> if no matching scene 
            node is found.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSelfAndAncestors(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the scene node and its ancestors scene.
            </summary>
      <param name="node">The scene node.</param>
      <returns>The <paramref name="node" /> and its ancestors of the scene.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSubtree(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the subtree (the given scene node and all of its descendants) using a depth-first 
            search.
            </summary>
      <param name="node">The scene node.</param>
      <returns>
            The subtree (the given scene node and all of its descendants) in depth-first order.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSubtree(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
      <summary>
            Gets the subtree (the given scene node and all of its descendants) using a depth-first or a 
            breadth-first search.
            </summary>
      <param name="node">The scene node.</param>
      <param name="depthFirst">
            If set to <see langword="true" /> then a depth-first search for descendants will be made; 
            otherwise a breadth-first search will be made.
            </param>
      <returns>The subtree (the given scene node and all of its descendants).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.GetSubtreeAabb(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the AABB of the current subtree.
            </summary>
      <param name="sceneNode">The scene node (= root of subtree).</param>
      <returns>
            The AABB of the subtree rooted at <paramref name="sceneNode" />, or <see langword="null" /> if
            the subtree is empty.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.LookAt(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Rotates the scene node so that it faces a certain direction (in world space).
            </summary>
      <param name="node">The scene node.</param>
      <param name="target">
            The target coordinates in world space at which the scene node is "looking".
            </param>
      <param name="upVector">
            The direction that is "up" from the scene node's point of view given in world space. (Does 
            not need to be normalized.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            Current <see cref="T:DigitalRune.Geometry.Pose" />.<see cref="F:DigitalRune.Geometry.Pose.Position" /> is the same as 
            <paramref name="target" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="upVector" /> is (0, 0, 0).
            </exception>
      <exception cref="T:System.DivideByZeroException">
            The direction (<paramref name="target" /> - <see cref="T:DigitalRune.Geometry.Pose" />.<see cref="F:DigitalRune.Geometry.Pose.Position" />) 
            is probably pointing in the same or opposite direction as <paramref name="upVector" />. (The 
            two vectors must not be parallel.)
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.LookAt(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Moves and rotates the scene node so that it faces a certain direction (in world space).
            </summary>
      <param name="node">The scene node.</param>
      <param name="position">The new position in world space.</param>
      <param name="target">
            The target coordinates in world space at which the scene node is "looking".
            </param>
      <param name="upVector">
            The direction that is "up" from the scene node's point of view given in world space. (Does 
            not need to be normalized.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> is the same as <paramref name="target" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="upVector" /> is (0, 0, 0).
            </exception>
      <exception cref="T:System.DivideByZeroException">
            The camera direction (<paramref name="target" /> - <paramref name="position" />) is probably 
            pointing in the same or opposite direction as <paramref name="upVector" />. (The two vectors 
            must not be parallel.)
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SetInstanceAlpha(DigitalRune.Graphics.SceneGraph.SceneNode,System.Single)">
      <summary>
            Sets the opacity (alpha) of a scene node - see remarks.
            </summary>
      <param name="node">The scene node.</param>
      <param name="alpha">The alpha value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SetLastPose(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
      <summary>
            Sets <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastPoseWorld" /> to the current 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld" />.
            </summary>
      <param name="sceneNode">The scene node.</param>
      <param name="recursive">
            If set to <see langword="true" /> this method is executed recursively on the specified node 
            and all descendants nodes; otherwise, this method is executed only on the specified node.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sceneNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SetLastScale(DigitalRune.Graphics.SceneGraph.SceneNode,System.Boolean)">
      <summary>
            Sets <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastScaleWorld" /> to the current 
            <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld" />.
            </summary>
      <param name="sceneNode">The scene node.</param>
      <param name="recursive">
            If set to <see langword="true" /> this method is executed recursively on the specified node 
            and all descendants nodes; otherwise, this method is executed only on the specified node.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sceneNode" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SupportsInstanceAlpha(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Determines whether the opacity of the scene node can be changed using 
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SetInstanceAlpha(DigitalRune.Graphics.SceneGraph.SceneNode,System.Single)" />.
            </summary>
      <param name="node">The scene node.</param>
      <returns>
        <see langword="true" /> if the scene node has an alpha parameter that can be changed using
            <see cref="M:DigitalRune.Graphics.SceneGraph.SceneHelper.SetInstanceAlpha(DigitalRune.Graphics.SceneGraph.SceneNode,System.Single)" />; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SceneNode">
      <summary>
            Represents an object in a 3D scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Aabb">
      <summary>
            Gets the axis-aligned bounding box (AABB) in world space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.ActualIsEnabled">
      <summary>
            Gets a value indicating whether this scene node is actually enabled. (The method checks the 
            current scene node and its ancestors.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.CastsShadows">
      <summary>
            Gets or sets a value indicating whether this scene node blocks the light and casts shadows.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Children">
      <summary>
            Gets or sets the children of this scene node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.DigitalRune#Geometry#IGeometricObject#Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Geometry.IGeometricObject" /> that is a clone (deep copy) of the current
            instance.
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Geometry.IGeometricObject" /> that is a clone (deep copy) of the current instance.
            </returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.DigitalRune#Geometry#IGeometricObject#Pose">
      <summary>
            Gets the pose (position and orientation) in world space.
            </summary>
    </member>
    <member name="E:DigitalRune.Graphics.SceneGraph.SceneNode.DigitalRune#Geometry#IGeometricObject#PoseChanged">
      <summary>
            Occurs when the pose was changed.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.DigitalRune#Geometry#IGeometricObject#Scale">
      <summary>
            Gets the total effective scale (which incorporates the scale factors of parent scene nodes).
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by the scene node and all descendant nodes.
            </summary>
      <param name="disposeData">
        <see langword="true" /> to dispose scene nodes including data objects; 
            <see langword="false" /> to dispose only scene nodes but preserve the data objects.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.Dispose(System.Boolean,System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
      <param name="disposeData">
        <see langword="true" /> to dispose scene nodes including data objects; 
            <see langword="false" /> to dispose only scene nodes but preserve the data objects.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.Invalidate">
      <summary>
            Invalidates this scene node and all children.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsDisposed">
      <summary>
            Gets a value indicating whether this scene node has been disposed of.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsEnabled">
      <summary>
            Gets or sets a value indicating whether this scene node is enabled. (May override children - 
            see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsRenderable">
      <summary>
            Gets or sets a value indicating whether this scene node can be rendered with a 
            <see cref="T:DigitalRune.Graphics.Rendering.SceneNodeRenderer" />.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsShadowCasterCulled">
      <summary>
            Gets or sets a value indicating whether the occlusion culling determined that this scene 
            node does not need to be rendered into the shadow map of the directional light.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.IsStatic">
      <summary>
            Gets or sets a value indicating whether this scene node is static (immobile).
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastFrame">
      <summary>
            Gets or sets the number of the last frame in which the scene node was rendered.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastPoseWorld">
      <summary>
            Gets or sets the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld" /> of the last frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.LastScaleWorld">
      <summary>
            Gets or sets the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld" /> of the last frame.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.MaxDistance">
      <summary>
            Gets or sets the maximum distance up to which the scene node is rendered. (Needs to be
            normalized - see remarks.)
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Name">
      <summary>
            Gets or sets the name of this scene node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnParentChanged(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Called when <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Parent" /> was changed.
            </summary>
      <param name="oldParent">The old parent.</param>
      <param name="newParent">The new parent.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnPoseChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Geometry.IGeometricObject.PoseChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnSceneChanged(DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Graphics.SceneGraph.SceneNode.SceneChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:DigitalRune.Graphics.SceneGraph.SceneChangedEventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.OnShapeChanged(DigitalRune.Geometry.Shapes.ShapeChangedEventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Graphics.SceneGraph.SceneNode.ShapeChanged" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Parent">
      <summary>
            Gets the parent scene node.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseLocal">
      <summary>
            Gets or sets the pose (position and orientation) relative to the parent scene node.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.PoseWorld">
      <summary>
            Gets or sets the pose (position and orientation) in world space.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Proxy">
      <summary>
            Gets or sets the proxy node.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.RenderData">
      <summary>
            Gets or sets the cached renderer data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleLocal">
      <summary>
            Gets or sets the scale relative to the parent scene node. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld">
      <summary>
            Gets the total effective scale (which incorporates the scale factors of parent scene nodes).
            </summary>
    </member>
    <member name="E:DigitalRune.Graphics.SceneGraph.SceneNode.SceneChanged">
      <summary>
            Event raised when a change occurred in the local subtree.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.SceneData">
      <summary>
            Gets or sets scene data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape">
      <summary>
            Gets (or sets) the bounding shape of this scene node.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="E:DigitalRune.Graphics.SceneGraph.SceneNode.ShapeChanged">
      <summary>
            Occurs when the <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.Shape" /> or <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNode.ScaleWorld" /> was changed.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.SortTag">
      <summary>
            Gets or sets the sort tag.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNode.System#IDisposable#Dispose">
      <summary>
            Releases all resources used by the scene node and all descendant nodes.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.UserData">
      <summary>
            Gets or sets user-defined data.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNode.UserFlags">
      <summary>
            Gets or sets a 16-bit value which can be used to store user-defined information or flags.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollection">
      <summary>
            Manages a collection of scene nodes as the children of another scene node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollection" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollection" /> class with the specified
            initial capacity
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.GetParent(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Gets the parent of an object.
            </summary>
      <param name="child">The child object.</param>
      <returns>The parent of <paramref name="child" />.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.Parent">
      <summary>
            Gets (or sets) the parent which owns this child collection.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollection.SetParent(DigitalRune.Graphics.SceneGraph.SceneNode,DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Sets the parent of the given object.
            </summary>
      <param name="parent">The parent to set.</param>
      <param name="child">The child object.</param>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter">
      <summary>
            Filters collisions between scene nodes using their group IDs.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.#ctor(DigitalRune.Graphics.SceneGraph.Scene)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter" /> class.
            </summary>
      <param name="scene">The scene.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.#ctor(DigitalRune.Graphics.SceneGraph.Scene,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter" /> class.
            </summary>
      <param name="scene">The scene.</param>
      <param name="maxNumberOfGroups">
            The maximum number of groups (see <see cref="P:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.MaxNumberOfGroups" />).
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scene" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxNumberOfGroups" /> is negative.
            </exception>
    </member>
    <member name="E:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Changed">
      <summary>
            Occurs when the filter rules were changed.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Filter(DigitalRune.Collections.Pair{DigitalRune.Graphics.SceneGraph.SceneNode})">
      <summary>
            Determines whether the given <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />s can collide.
            </summary>
      <param name="pair">The pair of collision objects.</param>
      <returns>
        <see langword="true" /> if the pair of collision objects can collide; otherwise, 
            <see langword="false" /> if the objects cannot collide.
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Get(System.Int32,System.Int32)">
      <summary>
            Returns <see langword="true" /> if collisions between two scene node groups are enabled.
            </summary>
      <param name="groupA">The first scene node group.</param>
      <param name="groupB">The second scene node group.</param>
      <returns>
        <see langword="true" /> if collisions with the between <paramref name="groupA" /> and 
            <paramref name="groupB" /> are enabled; otherwise <see langword="false" />.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="groupA" /> or <paramref name="groupB" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.MaxNumberOfGroups">
      <summary>
            The maximum number of supported scene node groups.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.OnChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Changed" /> event.
            </summary>
      <param name="eventArgs">
        <see cref="T:System.EventArgs" /> object that provides the arguments for the event.
            </param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Reset">
      <summary>
            Resets this filter. All collisions will be enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Scene">
      <summary>
            Gets or sets the scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SceneNodeCollisionFilter.Set(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Enables or disables collisions between a pair of scene node groups.
            </summary>
      <param name="groupA">The first group.</param>
      <param name="groupB">The second group.</param>
      <param name="collisionsEnabled">
            If set to <see langword="true" /> collisions between scene nodes in <paramref name="groupA" /> 
            and scene nodes in <paramref name="groupB" /> are enabled. 
            Use <see langword="false" /> to disable collisions.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="groupA" /> is out of range.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="groupB" /> is out of range.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery">
      <summary>
            Returns the shadow casting nodes that touch a specific reference scene node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery.ReferenceNode">
      <summary>
            Gets the reference node.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery.Reset">
      <summary>
            Resets this query.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery.Set(DigitalRune.Graphics.SceneGraph.SceneNode,System.Collections.Generic.IList{DigitalRune.Graphics.SceneGraph.SceneNode},DigitalRune.Graphics.RenderContext)">
      <summary>
            Sets the query result. 
            </summary>
      <param name="referenceNode">The reference node; can be <see langword="null" />.</param>
      <param name="nodes">
            The scene nodes that touch the reference node. (Note to caller: <paramref name="nodes" />
            should not contain disabled scene nodes!)
            </param>
      <param name="context">The render context.</param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.ShadowCasterQuery.ShadowCasters">
      <summary>
            Gets the scene nodes that cast shadows.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SkyboxNode">
      <summary>
            Represents a cube map ("skybox") that is into the background of the current render target.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SkyboxNode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SkyboxNode" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SkyboxNode.#ctor(Microsoft.Xna.Framework.Graphics.TextureCube)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SkyboxNode" /> class.
            </summary>
      <param name="texture">The cube map texture (using premultiplied alpha).</param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Alpha">
      <summary>
            Gets or sets the opacity of the skybox.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SkyboxNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SkyboxNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Color">
      <summary>
            Gets or sets the tint color.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SkyboxNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.EnableAlphaBlending">
      <summary>
            Gets or sets a value indicating whether alpha blending is enabled.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Encoding">
      <summary>
            Gets or sets the color encoding used by the cube map texture.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyboxNode.Texture">
      <summary>
            Gets or sets the cube map texture.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SkyNode">
      <summary>
            Renders graphics in the background, such as distant mountains, sky, stars, etc.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SkyNode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SkyNode" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SkyNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyNode.DrawOrder">
      <summary>
            Gets or sets the draw order.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is out of range.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyNode.Shape">
      <summary>
            Gets or sets the bounding shape of this scene node.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SkyObjectNode">
      <summary>
            Represents sky objects, like the sun and the moon.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SkyObjectNode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SkyObjectNode" /> class.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.Alpha">
      <summary>
            Gets or sets the opacity of the rendered texture.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.AmbientLight">
      <summary>
            Gets or sets the ambient light intensity used for the texture.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.AngularDiameter">
      <summary>
            Gets or sets the size of the object using its angular diameter.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SkyObjectNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SkyObjectNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SkyObjectNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowColor0">
      <summary>
            Gets or sets the color of the first glow.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowColor1">
      <summary>
            Gets or sets the color of the second glow.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowCutoffThreshold">
      <summary>
            Gets or sets the cutoff threshold for glows.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowExponent0">
      <summary>
            Gets or sets the exponent of the first glow.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.GlowExponent1">
      <summary>
            Gets or sets the exponent of the second glow.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.LightSmoothness">
      <summary>
            Gets or sets the smoothness of the light shading.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.LightWrap">
      <summary>
            Gets or sets the light wrap parameter.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.SunDirection">
      <summary>
            Gets or sets the direction to the sun, used to shade the object to create "moon phases".
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.SunLight">
      <summary>
            Gets or sets the sun light intensity used to shade the object to create "moon phases".
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SkyObjectNode.Texture">
      <summary>
            Gets or sets the texture.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.SpriteNode">
      <summary>
            Represents a 2D sprite in a scene.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SpriteNode.#ctor(DigitalRune.Graphics.Sprite)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SpriteNode" /> class.
            </summary>
      <param name="sprite">The sprite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sprite" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.Alpha">
      <summary>
            Gets or sets the opacity of the sprite.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.AnimationTime">
      <summary>
            Gets or sets the normalized animation time.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or greater than 1.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SpriteNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SpriteNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.Color">
      <summary>
            Gets or sets the tint color.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.SpriteNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastBounds">
      <summary>
            Gets the location and size in pixel at which the sprite was rendered.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.LastDepth">
      <summary>
            Gets the depth at which the sprite was rendered.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.Origin">
      <summary>
            Gets or sets the 2D origin of the sprite relative to the scene node.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.Rotation">
      <summary>
            Gets or sets the angle (in radians) to rotate the sprite clockwise.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.Scale">
      <summary>
            Gets or sets the 2D scale of the sprite. 
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.SpriteNode.Sprite">
      <summary>
            Gets or sets the sprite.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.StarfieldNode">
      <summary>
            Represents a set of stars.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.StarfieldNode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.StarfieldNode" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.StarfieldNode.#ctor(System.Collections.Generic.IList{DigitalRune.Graphics.Star})">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.StarfieldNode" /> class with the given set of
            stars.
            </summary>
      <param name="stars">The stars.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.StarfieldNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.StarfieldNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.StarfieldNode.Color">
      <summary>
            Gets the tint color.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.StarfieldNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.StarfieldNode.Stars">
      <summary>
            Gets or sets the stars.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.TerrainNode">
      <summary>
            Represents an instance of a height-field-based terrain.
            (Not available on these platforms: Xbox 360, mobile platforms)
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.TerrainNode.#ctor(DigitalRune.Graphics.Terrain,DigitalRune.Graphics.Material)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.TerrainNode" /> class.
            </summary>
      <param name="terrain">The terrain.</param>
      <param name="material">The material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="terrain" /> or <paramref name="material" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.BaseClipmap">
      <summary>
            Gets or sets the base clipmap which stores geometry information at the terrain mesh vertex
            level.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.TerrainNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.TerrainNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.TerrainNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap">
      <summary>
            Gets or sets the detail clipmap which stores material information used to shade the terrain.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailFadeRange">
      <summary>
            Gets or sets the detail fade range which defines the transition between two clipmap levels
            of the <see cref="P:DigitalRune.Graphics.SceneGraph.TerrainNode.DetailClipmap" />.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.TerrainNode.Dispose(System.Boolean,System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
      <param name="disposeData">
        <see langword="true" /> to dispose scene nodes including data objects; 
            <see langword="false" /> to dispose only scene nodes but preserve the data objects.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.HoleThreshold">
      <summary>
            Gets or sets the threshold used to check for holes.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.Material">
      <summary>
            Gets or sets the terrain material.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.MaterialInstance">
      <summary>
            Gets the material instance.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.TerrainNode.Terrain">
      <summary>
            Gets or sets the terrain definition.
            </summary>
    </member>
    <member name="T:DigitalRune.Graphics.SceneGraph.WaterNode">
      <summary>
            Represents a body of water, e.g. a lake, river or an infinite ocean.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.WaterNode.#ctor(DigitalRune.Graphics.Water,DigitalRune.Geometry.Shapes.Shape)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.WaterNode" /> class.
            </summary>
      <param name="water">The water.</param>
      <param name="volume">
            The water volume. Can be <see langword="null" />, see <see cref="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="water" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.WaterNode.Clone">
      <summary>
            Creates a new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all 
            children).
            </summary>
      <returns>
            A new <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> that is a clone of the current instance (incl. all children).
            </returns>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.WaterNode.CloneCore(DigitalRune.Graphics.SceneGraph.SceneNode)">
      <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" />.
            </summary>
      <param name="source">The object to clone.</param>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.WaterNode.CreateInstanceCore">
      <summary>
            When implemented in a derived class, creates a new instance of the 
            <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> derived class. 
            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.DepthBufferWriteEnable">
      <summary>
            Gets or sets a value indicating whether the water surface is rendered into the depth buffer.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.WaterNode.Dispose(System.Boolean,System.Boolean)">
      <summary>
            Releases the unmanaged resources used by an instance of the <see cref="T:DigitalRune.Graphics.SceneGraph.SceneNode" /> class
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
      <param name="disposeData">
        <see langword="true" /> to dispose scene nodes including data objects; 
            <see langword="false" /> to dispose only scene nodes but preserve the data objects.
            </param>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.EnableUnderwaterEffect">
      <summary>
            Gets or sets a value indicating whether an underwater effect should be displayed
            if the camera is underwater.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.ExtraHeight">
      <summary>
            Gets or sets the extra height added to the bounding shape.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.Flow">
      <summary>
            Gets or sets the water flow used to define water movement.
            </summary>
    </member>
    <member name="M:DigitalRune.Graphics.SceneGraph.WaterNode.IsUnderwater(DigitalRune.Mathematics.Algebra.Vector3F)">
      <summary>
            Determines whether the specified world space position is underwater.
            </summary>
      <param name="position">The position in world space.</param>
      <returns>
        <see langword="true" /> if the position is underwater; otherwise, <see langword="false" /></returns>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.PlanarReflection">
      <summary>
            Gets or sets the planar reflection.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.SkyboxReflection">
      <summary>
            Gets or sets the skybox that is reflected.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.Volume">
      <summary>
            Gets or sets the shape which defines the water volume.
            </summary>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.Water">
      <summary>
            Gets or sets the water properties.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:DigitalRune.Graphics.SceneGraph.WaterNode.Waves">
      <summary>
            Gets or sets the maps used to displace the water surface.
            </summary>
    </member>
    <member name="T:DigitalRune.Storages.StorageContentManager">
      <summary>
            Extends the XNA <see cref="T:Microsoft.Xna.Framework.Content.ContentManager" /> and loads assets from any <see cref="T:DigitalRune.Storages.IStorage" />
            location.
            </summary>
    </member>
    <member name="M:DigitalRune.Storages.StorageContentManager.#ctor(System.IServiceProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.StorageContentManager" /> class reading content
            from the <see cref="T:DigitalRune.Storages.IStorage" /> service.
            </summary>
      <param name="serviceProvider">
            The service provider the <seealso cref="T:Microsoft.Xna.Framework.Content.ContentManager" /> should use to locate services.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Storages.StorageContentManager.#ctor(System.IServiceProvider,DigitalRune.Storages.IStorage)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.StorageContentManager" /> class reading content
            from the specified storage.
            </summary>
      <param name="serviceProvider">
            The service provider the <seealso cref="T:Microsoft.Xna.Framework.Content.ContentManager" /> should use to locate services.
            </param>
      <param name="storage">
            The storage that provides the content. (If this parameter is <see langword="null" />, the 
            <see cref="T:DigitalRune.Storages.StorageContentManager" /> automatically looks for the <see cref="T:DigitalRune.Storages.IStorage" />
            service.)
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Storages.StorageContentManager.#ctor(System.IServiceProvider,DigitalRune.Storages.IStorage,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.StorageContentManager" /> class.
            </summary>
      <param name="serviceProvider">
            The service provider the <seealso cref="T:Microsoft.Xna.Framework.Content.ContentManager" /> should use to locate services.
            </param>
      <param name="storage">
            The storage that provides the content. (If this parameter is <see langword="null" />, the 
            <see cref="T:DigitalRune.Storages.StorageContentManager" /> automatically looks for the <see cref="T:DigitalRune.Storages.IStorage" />
            service.)
            </param>
      <param name="rootDirectory">
            The root directory to search for content. Can be <see langword="null" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:DigitalRune.Storages.StorageContentManager.OpenStream(System.String)">
      <summary>
            Opens a stream for reading the specified asset. Derived classes can replace this to
            implement pack files or asset compression.
            </summary>
      <param name="assetName">The name of the asset being read.</param>
      <returns>The opened stream.</returns>
    </member>
    <member name="P:DigitalRune.Storages.StorageContentManager.Storage">
      <summary>
            Gets the storage that provides the content.
            </summary>
    </member>
    <member name="T:DigitalRune.Storages.TitleStorage">
      <summary>
            Provides access to the title's default storage location. (Only available in the XNA-compatible
            build.)
            </summary>
    </member>
    <member name="M:DigitalRune.Storages.TitleStorage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.TitleStorage" /> class.
            </summary>
    </member>
    <member name="M:DigitalRune.Storages.TitleStorage.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Storages.TitleStorage" /> class using the specified
            directory as the root directory.
            </summary>
      <param name="rootDirectory">The root directory to search for content.</param>
    </member>
    <member name="P:DigitalRune.Storages.TitleStorage.DirectorySeparator">
      <summary>
            Gets the directory separator character used natively by this storage.
            </summary>
    </member>
    <member name="M:DigitalRune.Storages.TitleStorage.GetRealPath(System.String)">
      <summary>
            Gets the real path and name of the specified file.
            </summary>
      <param name="path">The file to check.</param>
      <returns>
            The path where the specified file is located. If the file is located inside an archive, the
            path and name of the archive is returned; otherwise, <see langword="null" /> if the file was
            not found.
            </returns>
    </member>
    <member name="M:DigitalRune.Storages.TitleStorage.OpenFile(System.String)">
      <summary>
            Opens the specified file for reading.
            </summary>
      <param name="path">The file to open.</param>
      <returns>A <see cref="T:System.IO.Stream" /> object for reading the file.</returns>
    </member>
    <member name="P:DigitalRune.Storages.TitleStorage.RootDirectory">
      <summary>
            Gets the root directory relative to the title container.
            </summary>
    </member>
  </members>
</doc>