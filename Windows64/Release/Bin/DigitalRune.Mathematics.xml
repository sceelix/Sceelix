<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DigitalRune.Mathematics</name>
    </assembly>
    <members>
        <member name="T:DigitalRune.Mathematics.Algebra.GaussSeidelMethodD">
            <summary>
            An iterative solver using the Gauss-Seidel method (double-precision).
            </summary>
            <remarks>
            <para>
            The method will always converge if the matrix A is strictly or irreducibly diagonally 
            dominant. Strict row diagonal dominance means that for each row, the absolute value of the
            diagonal term is greater than the sum of absolute values of other terms.
            </para>
            <para>
            See <see href="http://en.wikipedia.org/wiki/Gauss%E2%80%93Seidel_method"/> for an introduction
            to this method and for an explanation of the convergence criterion.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.GaussSeidelMethodD.Solve(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Solves the specified linear system of equations <i>Ax=b</i>.
            </summary>
            <param name="matrixA">The matrix A.</param>
            <param name="initialX">
            The initial guess for x. If this value is <see langword="null"/>, a zero vector will be used
            as initial guess.
            </param>
            <param name="vectorB">The vector b.</param>
            <returns>The solution vector x.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vectorB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="matrixA"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements of <paramref name="initialX"/> does not match.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.GaussSeidelMethodF">
            <summary>
            An iterative solver using the Gauss-Seidel method (single-precision).
            </summary>
            <remarks>
            <para>
            The method will always converge if the matrix A is strictly or irreducibly diagonally 
            dominant. Strict row diagonal dominance means that for each row, the absolute value of the
            diagonal term is greater than the sum of absolute values of other terms.
            </para>
            <para>
            See <see href="http://en.wikipedia.org/wiki/Gauss%E2%80%93Seidel_method"/> for an introduction
            to this method and for an explanation of the convergence criterion.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.GaussSeidelMethodF.Solve(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Solves the specified linear system of equations <i>Ax=b</i>.
            </summary>
            <param name="matrixA">The matrix A.</param>
            <param name="initialX">
            The initial guess for x. If this value is <see langword="null"/>, a zero vector will be used
            as initial guess.
            </param>
            <param name="vectorB">The vector b.</param>
            <returns>The solution vector x.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vectorB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="matrixA"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements of <paramref name="initialX"/> does not match.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD">
            <summary>
            An iterative method for solving a linear system of equations <i>A * x = b</i>
            (double-precision).
            </summary>
            <remarks>
            <para>
            Iterative methods search for a solution <i>x</i> of the linear system of equations 
            <i>A * x = b</i>. <i>A</i> and <i>b</i> must be given. <i>A</i> is a matrix and <i>b</i> is a 
            vector. Internally the method produces a solution in several iterations. The method stops when
            the maximum number of iterations is reached or when the new solutions is very similar to the 
            solution of the last iteration (this case happens when the difference is less than a tolerance
            given by the user).
            </para>
            <para>
            The result of an iterative method is only an approximation. The accuracy of the result depends
            on the number of iterations and the initial guess for <i>x</i>. <i>Warm-starting</i> can 
            improve the result. This is done by providing a better initial guess for <i>x</i>: If several 
            similar linear systems are solved, then the solution of one linear system is possible near the
            solution of the other linear systems. For many applications, like computer games, the same
            linear system of equations is computed each frame with only minor variations in <i>A</i> and
            <i>b</i>.
            </para>
            <para>
            The advantage of an iterative solver is that is can provide an approximate solution very 
            quickly. In tasks like animation, a quick estimate is often better than an exact solution
            which takes longer to compute.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.NumberOfIterations">
            <summary>
            Gets or sets the number of iterations of the last <see cref="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.Solve(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD)"/> 
            method call.
            </summary>
            <value>The number of iterations.</value>
            <remarks>
            This property is not thread-safe.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.MaxNumberOfIterations">
            <summary>
            Gets or sets the maximum number number of iterations.
            </summary>
            <value>The maximum number number of iterations. The default value is 1000.</value>
            <remarks>
            In one call of <see cref="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.Solve(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD)"/> no more than 
            <see cref="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.MaxNumberOfIterations"/> are performed.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.Epsilon">
            <summary>
            Gets or sets the tolerance value. 
            </summary>
            <value>
            The tolerance value. The default is <see cref="T:DigitalRune.Mathematics.Numeric"/>.<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>.
            </value>
            <remarks>
            If the absolute difference of x from the new iteration and the 
            x from the last iteration is less than this tolerance, the refinement of x is stopped.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.Solve(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD)">
            <overloads>
            <summary>
            Solves the specified linear system of equations <i>A * x = b</i>.
            </summary>
            </overloads>
            
            <summary>
            Solves the specified linear system of equations <i>A * x = b</i>.
            </summary>
            <param name="matrixA">The matrix A.</param>
            <param name="vectorB">The vector b.</param>
            <returns>The solution vector x.</returns>
            <remarks>
            A zero vector is used as initial guess for x.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverD.Solve(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Solves the specified linear system of equations <i>A * x = b</i> using an initial guess.
            </summary>
            <param name="matrixA">The matrix A.</param>
            <param name="initialX">
            The initial guess for x. If this value is <see langword="null"/>, a zero vector will be used
            as initial guess.
            </param>
            <param name="vectorB">The vector b.</param>
            <returns>The solution vector x.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF">
            <summary>
            An iterative method for solving a linear system of equations <i>A * x = b</i>
            (single-precision).
            </summary>
            <remarks>
            <para>
            Iterative methods search for a solution <i>x</i> of the linear system of equations 
            <i>A * x = b</i>. <i>A</i> and <i>b</i> must be given. <i>A</i> is a matrix and <i>b</i> is a 
            vector. Internally the method produces a solution in several iterations. The method stops when
            the maximum number of iterations is reached or when the new solutions is very similar to the 
            solution of the last iteration (this case happens when the difference is less than a tolerance
            given by the user).
            </para>
            <para>
            The result of an iterative method is only an approximation. The accuracy of the result depends
            on the number of iterations and the initial guess for <i>x</i>. <i>Warm-starting</i> can 
            improve the result. This is done by providing a better initial guess for <i>x</i>: If several 
            similar linear systems are solved, then the solution of one linear system is possible near the
            solution of the other linear systems. For many applications, like computer games, the same
            linear system of equations is computed each frame with only minor variations in <i>A</i> and
            <i>b</i>.
            </para>
            <para>
            The advantage of an iterative solver is that is can provide an approximate solution very 
            quickly. In tasks like animation, a quick estimate is often better than an exact solution
            which takes longer to compute.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.NumberOfIterations">
            <summary>
            Gets or sets the number of iterations of the last <see cref="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.Solve(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF)"/> 
            method call.
            </summary>
            <value>The number of iterations.</value>
            <remarks>
            This property is not thread-safe.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.MaxNumberOfIterations">
            <summary>
            Gets or sets the maximum number number of iterations.
            </summary>
            <value>The maximum number number of iterations. The default value is 1000.</value>
            <remarks>
            In one call of <see cref="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.Solve(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF)"/> no more than 
            <see cref="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.MaxNumberOfIterations"/> are performed.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.Epsilon">
            <summary>
            Gets or sets the tolerance value. 
            </summary>
            <value>
            The tolerance value. The default is <see cref="T:DigitalRune.Mathematics.Numeric"/>.<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>.
            </value>
            <remarks>
            If the absolute difference of x from the new iteration and the 
            x from the last iteration is less than this tolerance, the refinement of x is stopped.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.Solve(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF)">
            <overloads>
            <summary>
            Solves the specified linear system of equations <i>A * x = b</i>.
            </summary>
            </overloads>
            
            <summary>
            Solves the specified linear system of equations <i>A * x = b</i>.
            </summary>
            <param name="matrixA">The matrix A.</param>
            <param name="vectorB">The vector b.</param>
            <returns>The solution vector x.</returns>
            <remarks>
            A zero vector is used as initial guess for x.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.IterativeLinearSystemSolverF.Solve(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Solves the specified linear system of equations <i>A * x = b</i> using an initial guess.
            </summary>
            <param name="matrixA">The matrix A.</param>
            <param name="initialX">
            The initial guess for x. If this value is <see langword="null"/>, a zero vector will be used
            as initial guess.
            </param>
            <param name="vectorB">The vector b.</param>
            <returns>The solution vector x.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.JacobiMethodD">
            <summary>
            An iterative solver using the Jacobi method (double-precision).
            </summary>
            <remarks>
            <para>
            The method will always converge if the matrix A is strictly or irreducibly diagonally 
            dominant. Strict row diagonal dominance means that for each row, the absolute value of the
            diagonal term is greater than the sum of absolute values of other terms.
            </para>
            <para>
            See <see href="http://en.wikipedia.org/wiki/Jacobi_method"/> for an introduction to this 
            method and for an explanation of the convergence criterion.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.JacobiMethodD.Solve(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Solves the specified linear system of equations <i>Ax=b</i>.
            </summary>
            <param name="matrixA">The matrix A.</param>
            <param name="initialX">
            The initial guess for x. If this value is <see langword="null"/>, a zero vector will be used
            as initial guess.
            </param>
            <param name="vectorB">The vector b.</param>
            <returns>The solution vector x.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vectorB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="matrixA"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements of <paramref name="initialX"/> does not match.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.JacobiMethodF">
            <summary>
            An iterative solver using the Jacobi method (single-precision).
            </summary>
            <remarks>
            <para>
            The method will always converge if the matrix A is strictly or irreducibly diagonally 
            dominant. Strict row diagonal dominance means that for each row, the absolute value of the
            diagonal term is greater than the sum of absolute values of other terms.
            </para>
            <para>
            See <see href="http://en.wikipedia.org/wiki/Jacobi_method"/> for an introduction to this 
            method and for an explanation of the convergence criterion.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.JacobiMethodF.Solve(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Solves the specified linear system of equations <i>Ax=b</i>.
            </summary>
            <param name="matrixA">The matrix A.</param>
            <param name="initialX">
            The initial guess for x. If this value is <see langword="null"/>, a zero vector will be used
            as initial guess.
            </param>
            <param name="vectorB">The vector b.</param>
            <returns>The solution vector x.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vectorB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="matrixA"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements of <paramref name="initialX"/> does not match.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.Matrix22D">
            <summary>
            Defines a 2 x 2 matrix (double-precision).
            </summary>
            <remarks>
            <para>
            All indices are zero-based. The matrix looks like this:
            <code>
            M00 M01
            M10 M11
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.One">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.Identity">
            <summary>
            Returns the 2 x 2 identity matrix.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.M00">
            <summary>
            The element in first row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.M01">
            <summary>
            The element in first row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.M10">
            <summary>
            The element in second row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22D.M11">
            <summary>
            The element in second row, second column.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.Item(System.Int32)">
            <overloads>
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            </overloads>
            
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The element at <paramref name="index"/>.</value>
            <remarks>
            The matrix elements are in row-major order.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <value>The element at the specified row and column.</value>
            <remarks>
            The indices are zero-based: [0,0] is the first element, [1,1] is the last element.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index [<paramref name="row"/>, <paramref name="column"/>] is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.Determinant">
            <summary>
            Returns the determinant of this matrix.
            </summary>
            <value>The determinant of this matrix.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.IsNaN">
            <summary>
            Gets a value indicating whether an element of the matrix is <see cref="F:System.Double.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if an element of the matrix is <see cref="F:System.Double.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
            <value>
            <see langword="true"/> if this matrix is symmetric; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The matrix elements are compared for equality - no tolerance value to handle numerical
            errors is used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.Trace">
            <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
            <value>The matrix trace.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.Transposed">
            <summary>
            Returns the transposed of this matrix.
            </summary>
            <returns>The transposed of this matrix.</returns>
            <remarks>
            The property does not change this instance. To transpose this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix22D.Transpose"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22D.Inverse">
            <summary>
            Returns the inverse of this matrix.
            </summary>
            <value>The inverse of this matrix.</value>
            <remarks>
            The property does not change this instance. To invert this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix22D.Invert"/>.
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix22D.Invert"/>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix22D.TryInvert"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> struct.
            </summary>
            <param name="elementValue">The initial value for the matrix elements.</param>
            <remarks>
            All matrix elements are set to <paramref name="elementValue"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> class.
            </summary>
            <param name="m00">The element in the first row, first column.</param>
            <param name="m01">The element in the first row, second column.</param>
            <param name="m10">The element in the second row, first column.</param>
            <param name="m11">The element in the second row, second column.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.#ctor(System.Double[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.#ctor(System.Collections.Generic.IList{System.Double},DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> struct.
            </summary>
            <param name="elements">The list with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="elements"/> has less than 4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 2x2 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.#ctor(System.Double[][])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 2x2 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> or the arrays in elements[0] must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Equals(DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToString">
            <overloads>
            <summary>
            Returns the string representation of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this matrix.
            </summary>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this matrix using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Negate(DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Addition(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Add(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Subtraction(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Subtract(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix22D,System.Double)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix and a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="scalar">The scalar.</param>
            <param name="matrix">The matrix.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Multiply(System.Double,DigitalRune.Mathematics.Algebra.Matrix22D)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Multiply(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Multiply(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Division(DigitalRune.Mathematics.Algebra.Matrix22D,System.Double)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Divide(DigitalRune.Mathematics.Algebra.Matrix22D,System.Double)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Equality(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Tests if two matrices are equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Inequality(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Tests if two matrices are not equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix22D)~System.Double[0:,0:]">
            <overloads>
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> to another type.
            </summary>
            </overloads>
            
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> to a 2-dimensional 
            <see langword="double"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToArray2D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> to a 2-dimensional <see langword="double"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix22D)~System.Double[][]">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> 
            to a jagged <see langword="double"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToArrayJagged">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> to a jagged <see langword="double"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix22D)~DigitalRune.Mathematics.Algebra.MatrixD">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToMatrixD">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix22D)~DigitalRune.Mathematics.Algebra.Matrix22F">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToMatrix22F">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Absolute">
            <overloads>
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero,
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ClampToZero(System.Double)">
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.GetColumn(System.Int32)">
            <summary>
            Gets a column as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <param name="index">The index of the column.</param>
            <returns>The column vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Sets a column from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <param name="index">The index of the column.</param>
            <param name="columnVector">The column vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.GetRow(System.Int32)">
            <summary>
            Gets a row as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <param name="index">The index of the row.</param>
            <returns>The row vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Sets a row from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <param name="index">The index of the row (0, 1, or 2).</param>
            <param name="rowVector">The row vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Invert">
            <summary>
            Inverts the matrix.
            </summary>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
            <seealso cref="P:DigitalRune.Mathematics.Algebra.Matrix22D.Inverse"/>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix22D.TryInvert"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to an array of <see langword="double"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the array.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to a list of <see langword="double"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the list.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.TryInvert">
            <summary>
            Inverts the matrix if it is invertible.
            </summary>
            <returns>
            <see langword="true"/> if the matrix is invertible; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method is the equivalent to <see cref="M:DigitalRune.Mathematics.Algebra.Matrix22D.Invert"/>, except that no exceptions are thrown.
            The return value indicates whether the operation was successful.
            </para>
            <para>
            Due to numerical errors it can happen that some singular matrices are not recognized as 
            singular by this method. This method is optimized for fast matrix inversion and not for safe 
            detection of singular matrices. If you need to detect if a matrix is singular, you can, for 
            example, compute its <see cref="P:DigitalRune.Mathematics.Algebra.Matrix22D.Determinant"/> and see if it is near zero.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Transpose">
            <summary>
            Transposes this matrix.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.Absolute(DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D)">
            <overloads>
            <summary>
            Determines whether two matrices are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two matrices are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two matrices are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix22D,DigitalRune.Mathematics.Algebra.Matrix22D,System.Double)">
            <summary>
            Determines whether two matrices are equal (regarding a specific tolerance).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two matrices are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>
            The matrix with small elements clamped to zero.
            </returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix22D,System.Double)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The matrix with small elements clamped to zero.</returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.CreateScale(System.Double)">
            <overloads>
            <summary>
            Creates a scaling matrix.
            </summary>
            </overloads>
            
            <summary>
            Creates a uniform scaling matrix.
            </summary>
            <param name="scale">The uniform scale factor that is applied to the x- and y-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.CreateScale(System.Double,System.Double)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scaleX">The value to scale by on the x-axis.</param>
            <param name="scaleY">The value to scale by on the y-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.CreateScale(DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scale">Amounts to scale by the x, and y-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22D.CreateRotation(System.Double)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.Matrix22F">
            <summary>
            Defines a 2 x 2 matrix (single-precision).
            </summary>
            <remarks>
            <para>
            All indices are zero-based. The matrix looks like this:
            <code>
            M00 M01
            M10 M11
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.One">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.Identity">
            <summary>
            Returns the 2 x 2 identity matrix.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.M00">
            <summary>
            The element in first row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.M01">
            <summary>
            The element in first row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.M10">
            <summary>
            The element in second row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix22F.M11">
            <summary>
            The element in second row, second column.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.Item(System.Int32)">
            <overloads>
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            </overloads>
            
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The element at <paramref name="index"/>.</value>
            <remarks>
            The matrix elements are in row-major order.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <value>The element at the specified row and column.</value>
            <remarks>
            The indices are zero-based: [0,0] is the first element, [1,1] is the last element.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index [<paramref name="row"/>, <paramref name="column"/>] is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.Determinant">
            <summary>
            Returns the determinant of this matrix.
            </summary>
            <value>The determinant of this matrix.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.IsNaN">
            <summary>
            Gets a value indicating whether an element of the matrix is <see cref="F:System.Single.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if an element of the matrix is <see cref="F:System.Single.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
            <value>
            <see langword="true"/> if this matrix is symmetric; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The matrix elements are compared for equality - no tolerance value to handle numerical
            errors is used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.Trace">
            <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
            <value>The matrix trace.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.Transposed">
            <summary>
            Returns the transposed of this matrix.
            </summary>
            <returns>The transposed of this matrix.</returns>
            <remarks>
            The property does not change this instance. To transpose this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix22F.Transpose"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix22F.Inverse">
            <summary>
            Returns the inverse of this matrix.
            </summary>
            <value>The inverse of this matrix.</value>
            <remarks>
            The property does not change this instance. To invert this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix22F.Invert"/>.
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix22F.Invert"/>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix22F.TryInvert"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> struct.
            </summary>
            <param name="elementValue">The initial value for the matrix elements.</param>
            <remarks>
            All matrix elements are set to <paramref name="elementValue"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> class.
            </summary>
            <param name="m00">The element in the first row, first column.</param>
            <param name="m01">The element in the first row, second column.</param>
            <param name="m10">The element in the second row, first column.</param>
            <param name="m11">The element in the second row, second column.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.#ctor(System.Single[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.#ctor(System.Collections.Generic.IList{System.Single},DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> struct.
            </summary>
            <param name="elements">The list with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="elements"/> has less than 4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 2x2 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.#ctor(System.Single[][])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 2x2 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> or the arrays in elements[0] must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Equals(DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToString">
            <overloads>
            <summary>
            Returns the string representation of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this matrix.
            </summary>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this matrix using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Negate(DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Addition(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Add(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Subtraction(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Subtract(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix22F,System.Single)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix and a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="scalar">The scalar.</param>
            <param name="matrix">The matrix.</param>
            <returns>
            The matrix with each element multiplied by <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Multiply(System.Single,DigitalRune.Mathematics.Algebra.Matrix22F)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Multiply(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Multiply(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Division(DigitalRune.Mathematics.Algebra.Matrix22F,System.Single)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Divide(DigitalRune.Mathematics.Algebra.Matrix22F,System.Single)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Equality(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Tests if two matrices are equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Inequality(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Tests if two matrices are not equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix22F)~System.Single[0:,0:]">
            <overloads>
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> to another type.
            </summary>
            </overloads>
            
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> to a 2-dimensional 
            <see langword="float"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToArray2D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> to a 2-dimensional <see langword="float"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix22F)~System.Single[][]">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> 
            to a jagged <see langword="float"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToArrayJagged">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> to a jagged <see langword="float"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix22F)~DigitalRune.Mathematics.Algebra.MatrixF">
            <overloads>
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> to another data type.
            </summary>
            </overloads>
            
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToMatrixF">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix22F)~DigitalRune.Mathematics.Algebra.Matrix22D">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToMatrix22D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Absolute">
            <overloads>
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero,
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ClampToZero(System.Single)">
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.GetColumn(System.Int32)">
            <summary>
            Gets a column as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <param name="index">The index of the column.</param>
            <returns>The column vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Sets a column from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <param name="index">The index of the column.</param>
            <param name="columnVector">The column vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.GetRow(System.Int32)">
            <summary>
            Gets a row as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <param name="index">The index of the row.</param>
            <returns>The row vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Sets a row from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <param name="index">The index of the row (0, 1, or 2).</param>
            <param name="rowVector">The row vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Invert">
            <summary>
            Inverts the matrix.
            </summary>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
            <seealso cref="P:DigitalRune.Mathematics.Algebra.Matrix22F.Inverse"/>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix22F.TryInvert"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to an array of <see langword="float"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the array.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to a list of <see langword="float"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the list.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.TryInvert">
            <summary>
            Inverts the matrix if it is invertible.
            </summary>
            <returns>
            <see langword="true"/> if the matrix is invertible; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method is the equivalent to <see cref="M:DigitalRune.Mathematics.Algebra.Matrix22F.Invert"/>, except that no exceptions are thrown.
            The return value indicates whether the operation was successful.
            </para>
            <para>
            Due to numerical errors it can happen that some singular matrices are not recognized as 
            singular by this method. This method is optimized for fast matrix inversion and not for safe 
            detection of singular matrices. If you need to detect if a matrix is singular, you can, for 
            example, compute its <see cref="P:DigitalRune.Mathematics.Algebra.Matrix22F.Determinant"/> and see if it is near zero.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Transpose">
            <summary>
            Transposes this matrix.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.Absolute(DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F)">
            <overloads>
            <summary>
            Determines whether two matrices are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two matrices are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two matrices are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix22F,DigitalRune.Mathematics.Algebra.Matrix22F,System.Single)">
            <summary>
            Determines whether two matrices are equal (regarding a specific tolerance).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two matrices are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The matrix with small elements clamped to zero.</returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix22F,System.Single)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The matrix with small elements clamped to zero.</returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.CreateScale(System.Single)">
            <overloads>
            <summary>
            Creates a scaling matrix.
            </summary>
            </overloads>
            
            <summary>
            Creates a uniform scaling matrix.
            </summary>
            <param name="scale">The uniform scale factor that is applied to the x- and y-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.CreateScale(System.Single,System.Single)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scaleX">The value to scale by on the x-axis.</param>
            <param name="scaleY">The value to scale by on the y-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.CreateScale(DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scale">Amounts to scale by the x, and y-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix22F.CreateRotation(System.Single)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.Matrix33D">
            <summary>
            Defines a 3 x 3 matrix (double-precision).
            </summary>
            <remarks>
            All indices are zero-based. The matrix looks like this:
            <code>
            M00 M01 M02
            M10 M11 M12
            M20 M21 M22
            </code>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.One">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.Identity">
            <summary>
            Returns the 3 x 3 identity matrix.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M00">
            <summary>
            The element in first row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M01">
            <summary>
            The element in first row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M02">
            <summary>
            The element in first row, third column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M10">
            <summary>
            The element in second row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M11">
            <summary>
            The element in second row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M12">
            <summary>
            The element in second row, third column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M20">
            <summary>
            The element in third row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M21">
            <summary>
            The element in third row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33D.M22">
            <summary>
            The element in third row, third column.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.Item(System.Int32)">
            <overloads>
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            </overloads>
            
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The element at <paramref name="index"/>.</value>
            <remarks>
            The matrix elements are in row-major order.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <value>The element at the specified row and column.</value>
            <remarks>
            The indices are zero-based: [0,0] is the first element, [2,2] is the last element.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index [<paramref name="row"/>, <paramref name="column"/>] is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.Determinant">
            <summary>
            Returns the determinant of this matrix.
            </summary>
            <value>The determinant of this matrix.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.IsNaN">
            <summary>
            Gets a value indicating whether an element of the matrix is <see cref="F:System.Double.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if an element of the matrix is <see cref="F:System.Double.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.IsOrthogonal">
            <summary>
            Gets a value indicating whether this instance is orthogonal.
            </summary>
            <value>
            <see langword="true"/> if this instance is an orthogonal matrix; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.IsRotation">
            <summary>
            Gets a value indicating whether this instance is a rotation matrix.
            </summary>
            <value>
            <see langword="true"/> if this instance is a rotation matrix; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
            <value>
            <see langword="true"/> if this matrix is symmetric; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The matrix elements are compared for equality - no tolerance value to handle numerical
            errors is used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.Trace">
            <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
            <value>The matrix trace.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.Transposed">
            <summary>
            Returns the transposed of this matrix.
            </summary>
            <returns>The transposed of this matrix.</returns>
            <remarks>
            The property does not change this instance. To transpose this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix33D.Transpose"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33D.Inverse">
            <summary>
            Returns the inverse of this matrix.
            </summary>
            <value>The inverse of this matrix.</value>
            <remarks>
            The property does not change this instance. To invert this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix33D.Invert"/>.
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix33D.Invert"/>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix33D.TryInvert"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.#ctor(System.Double)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> struct.
            </summary>
            <param name="elementValue">The initial value for the matrix elements.</param>
            <remarks>
            All matrix elements are set to <paramref name="elementValue"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> class.
            </summary>
            <param name="m00">The element in the first row, first column.</param>
            <param name="m01">The element in the first row, second column.</param>
            <param name="m02">The element in the first row, third column.</param>
            <param name="m10">The element in the second row, first column.</param>
            <param name="m11">The element in the second row, second column.</param>
            <param name="m12">The element in the second row, third column.</param>
            <param name="m20">The element in the third row, first column.</param>
            <param name="m21">The element in the third row, second column.</param>
            <param name="m22">The element in the third row, third column.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.#ctor(System.Double[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 9 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.#ctor(System.Collections.Generic.IList{System.Double},DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> struct.
            </summary>
            <param name="elements">The list with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="elements"/> has less than 9 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 3x3 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> or the arrays in elements[0] must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.#ctor(System.Double[][])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 3x3 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> or the arrays in elements[0] must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Equals(DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToString">
            <overloads>
            <summary>
            Returns the string representation of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this matrix.
            </summary>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this matrix using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Negate(DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Addition(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Add(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Subtraction(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Subtract(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix33D,System.Double)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix and a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="scalar">The scalar.</param>
            <param name="matrix">The matrix.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Multiply(System.Double,DigitalRune.Mathematics.Algebra.Matrix33D)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Multiply(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Multiply(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.MultiplyTransposed(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Multiplies the transposed of the given matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
            <remarks>
            This method transposes the given matrix and multiplies the transposed matrix with the given
            vector.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Division(DigitalRune.Mathematics.Algebra.Matrix33D,System.Double)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Divide(DigitalRune.Mathematics.Algebra.Matrix33D,System.Double)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Equality(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Tests if two matrices are equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Inequality(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Tests if two matrices are not equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix33D)~System.Double[0:,0:]">
            <overloads>
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> to another type.
            </summary>
            </overloads>
            
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> to a 2-dimensional 
            <see langword="double"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToArray2D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> to a 2-dimensional <see langword="double"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix33D)~System.Double[][]">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> to a jagged 
            <see langword="double"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToArrayJagged">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> to a jagged <see langword="double"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix33D)~DigitalRune.Mathematics.Algebra.MatrixD">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToMatrixD">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix33D)~DigitalRune.Mathematics.Algebra.Matrix33F">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToMatrix33F">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Absolute">
            <overloads>
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ClampToZero(System.Double)">
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.GetColumn(System.Int32)">
            <summary>
            Gets a column as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <param name="index">The index of the column (0, 1, or 2).</param>
            <returns>The column vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Sets a column from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <param name="index">The index of the column (0, 1, or 2).</param>
            <param name="columnVector">The column vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.GetRow(System.Int32)">
            <summary>
            Gets a row as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <param name="index">The index of the row (0, 1, or 2).</param>
            <returns>The row vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Sets a row from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <param name="index">The index of the row (0, 1, or 2).</param>
            <param name="rowVector">The row vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Invert">
            <summary>
            Inverts the matrix.
            </summary>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
            <seealso cref="P:DigitalRune.Mathematics.Algebra.Matrix33D.Inverse"/>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix33D.TryInvert"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Orthogonalize">
            <summary>
            Re-orthogonalizes this instance.
            </summary>
            <remarks>
            Use this method to re-orthogonalize a former orthogonal matrix. Rotation matrices are 
            orthogonal matrices and because of numerical errors they start to get non-orthogonal after
            several computations. Calling this method regularly will keep the matrices orthogonal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to an array of <see langword="double"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the array.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to a list of <see langword="double"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the list.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.TryInvert">
            <summary>
            Inverts the matrix if it is invertible.
            </summary>
            <returns>
            <see langword="true"/> if the matrix is invertible; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method is the equivalent to <see cref="M:DigitalRune.Mathematics.Algebra.Matrix33D.Invert"/>, except that no exceptions are thrown.
            The return value indicates whether the operation was successful.
            </para>
            <para>
            Due to numerical errors it can happen that some singular matrices are not recognized as 
            singular by this method. This method is optimized for fast matrix inversion and not for safe
            detection of singular matrices. If you need to detect if a matrix is singular, you can, for 
            example, compute its <see cref="P:DigitalRune.Mathematics.Algebra.Matrix33D.Determinant"/> and see if it is near zero.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Transpose">
            <summary>
            Transposes this matrix.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.Absolute(DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D)">
            <overloads>
            <summary>
            Determines whether two matrices are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two matrices are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two matrices are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Matrix33D,System.Double)">
            <summary>
            Determines whether two matrices are equal (regarding a specific tolerance).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two matrices are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>
            The matrix with small elements clamped to zero.
            </returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix33D,System.Double)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            The matrix with small elements clamped to zero.
            </returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateScale(System.Double)">
            <overloads>
            <summary>
            Creates a scaling matrix.
            </summary>
            </overloads>
            
            <summary>
            Creates a uniform scaling matrix.
            </summary>
            <param name="scale">
            The uniform scale factor that is applied to the x-, y-, and z-axis.
            </param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateScale(System.Double,System.Double,System.Double)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scaleX">The value to scale by on the x-axis.</param>
            <param name="scaleY">The value to scale by on the y-axis.</param>
            <param name="scaleZ">The value to scale by on the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateScale(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scale">Amounts to scale by the x, y, and z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
            <overloads>
            <summary>
            Creates a rotation matrix.
            </summary>
            </overloads>
            
            <summary>
            Creates a rotation matrix from axis and angle.
            </summary>
            <param name="axis">The rotation axis. (Does not need to be normalized.)</param>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
            <exception cref="T:System.ArgumentException">
            The <paramref name="axis"/> vector has 0 length.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateRotation(DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Creates a rotation matrix from a unit quaternion.
            </summary>
            <param name="rotation">The rotation described by a unit quaternion.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateRotationX(System.Double)">
            <summary>
            Creates a matrix that specifies a rotation around the x-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateRotationY(System.Double)">
            <summary>
            Creates a matrix that specifies a rotation around the y-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33D.CreateRotationZ(System.Double)">
            <summary>
            Creates a matrix that specifies a rotation around the z-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.Matrix33F">
            <summary>
            Defines a 3 x 3 matrix (single-precision).
            </summary>
            <remarks>
            All indices are zero-based. The matrix looks like this:
            <code>
            M00 M01 M02
            M10 M11 M12
            M20 M21 M22
            </code>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.One">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.Identity">
            <summary>
            Returns the 3 x 3 identity matrix.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M00">
            <summary>
            The element in first row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M01">
            <summary>
            The element in first row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M02">
            <summary>
            The element in first row, third column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M10">
            <summary>
            The element in second row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M11">
            <summary>
            The element in second row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M12">
            <summary>
            The element in second row, third column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M20">
            <summary>
            The element in third row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M21">
            <summary>
            The element in third row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix33F.M22">
            <summary>
            The element in third row, third column.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.Item(System.Int32)">
            <overloads>
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            </overloads>
            
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The element at <paramref name="index"/>.</value>
            <remarks>
            The matrix elements are in row-major order.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <value>The element at the specified row and column.</value>
            <remarks>
            The indices are zero-based: [0,0] is the first element, [2,2] is the last element.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index [<paramref name="row"/>, <paramref name="column"/>] is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.Determinant">
            <summary>
            Returns the determinant of this matrix.
            </summary>
            <value>The determinant of this matrix.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.IsNaN">
            <summary>
            Gets a value indicating whether an element of the matrix is <see cref="F:System.Single.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if an element of the matrix is <see cref="F:System.Single.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.IsOrthogonal">
            <summary>
            Gets a value indicating whether this instance is orthogonal.
            </summary>
            <value>
            <see langword="true"/> if this instance is an orthogonal matrix; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.IsRotation">
            <summary>
            Gets a value indicating whether this instance is a rotation matrix.
            </summary>
            <value>
            <see langword="true"/> if this instance is a rotation matrix; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
            <value>
            <see langword="true"/> if this matrix is symmetric; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The matrix elements are compared for equality - no tolerance value to handle numerical
            errors is used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.Trace">
            <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
            <value>The matrix trace.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.Transposed">
            <summary>
            Returns the transposed of this matrix.
            </summary>
            <returns>The transposed of this matrix.</returns>
            <remarks>
            The property does not change this instance. To transpose this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix33F.Transpose"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix33F.Inverse">
            <summary>
            Returns the inverse of this matrix.
            </summary>
            <value>The inverse of this matrix.</value>
            <remarks>
            The property does not change this instance. To invert this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix33F.Invert"/>.
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix33F.Invert"/>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix33F.TryInvert"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.#ctor(System.Single)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> struct.
            </summary>
            <param name="elementValue">The initial value for the matrix elements.</param>
            <remarks>
            All matrix elements are set to <paramref name="elementValue"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> class.
            </summary>
            <param name="m00">The element in the first row, first column.</param>
            <param name="m01">The element in the first row, second column.</param>
            <param name="m02">The element in the first row, third column.</param>
            <param name="m10">The element in the second row, first column.</param>
            <param name="m11">The element in the second row, second column.</param>
            <param name="m12">The element in the second row, third column.</param>
            <param name="m20">The element in the third row, first column.</param>
            <param name="m21">The element in the third row, second column.</param>
            <param name="m22">The element in the third row, third column.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.#ctor(System.Single[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 9 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.#ctor(System.Collections.Generic.IList{System.Single},DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> struct.
            </summary>
            <param name="elements">The list with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="elements"/> has less than 9 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 3x3 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> or the arrays in elements[0] must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.#ctor(System.Single[][])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 3x3 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> or the arrays in elements[0] must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Equals(DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToString">
            <overloads>
            <summary>
            Returns the string representation of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this matrix.
            </summary>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this matrix using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Negate(DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Addition(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Add(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Subtraction(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Subtract(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix33F,System.Single)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix and a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="scalar">The scalar.</param>
            <param name="matrix">The matrix.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Multiply(System.Single,DigitalRune.Mathematics.Algebra.Matrix33F)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Multiply(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Multiply(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.MultiplyTransposed(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Multiplies the transposed of the given matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
            <remarks>
            This method transposes the given matrix and multiplies the transposed matrix with the given
            vector.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Division(DigitalRune.Mathematics.Algebra.Matrix33F,System.Single)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Divide(DigitalRune.Mathematics.Algebra.Matrix33F,System.Single)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Equality(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Tests if two matrices are equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Inequality(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Tests if two matrices are not equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix33F)~System.Single[0:,0:]">
            <overloads>
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> to another type.
            </summary>
            </overloads>
            
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> to a 2-dimensional 
            <see langword="float"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToArray2D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> to a 2-dimensional <see langword="float"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix33F)~System.Single[][]">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> to a jagged 
            <see langword="float"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToArrayJagged">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> to a jagged <see langword="float"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix33F)~DigitalRune.Mathematics.Algebra.MatrixF">
            <overloads>
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> to another data type.
            </summary>
            </overloads>
            
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToMatrixF">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix33F)~DigitalRune.Mathematics.Algebra.Matrix33D">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToMatrix33D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Absolute">
            <overloads>
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ClampToZero(System.Single)">
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.GetColumn(System.Int32)">
            <summary>
            Gets a column as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <param name="index">The index of the column (0, 1, or 2).</param>
            <returns>The column vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Sets a column from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <param name="index">The index of the column (0, 1, or 2).</param>
            <param name="columnVector">The column vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.GetRow(System.Int32)">
            <summary>
            Gets a row as <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <param name="index">The index of the row (0, 1, or 2).</param>
            <returns>The row vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Sets a row from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <param name="index">The index of the row (0, 1, or 2).</param>
            <param name="rowVector">The row vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Invert">
            <summary>
            Inverts the matrix.
            </summary>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
            <seealso cref="P:DigitalRune.Mathematics.Algebra.Matrix33F.Inverse"/>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix33F.TryInvert"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Orthogonalize">
            <summary>
            Re-orthogonalizes this instance.
            </summary>
            <remarks>
            Use this method to re-orthogonalize a former orthogonal matrix. Rotation matrices are 
            orthogonal matrices and because of numerical errors they start to get non-orthogonal after
            several computations. Calling this method regularly will keep the matrices orthogonal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to an array of <see langword="float"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the array.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to a list of <see langword="float"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the list.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.TryInvert">
            <summary>
            Inverts the matrix if it is invertible.
            </summary>
            <returns>
            <see langword="true"/> if the matrix is invertible; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method is the equivalent to <see cref="M:DigitalRune.Mathematics.Algebra.Matrix33F.Invert"/>, except that no exceptions are thrown.
            The return value indicates whether the operation was successful.
            </para>
            <para>
            Due to numerical errors it can happen that some singular matrices are not recognized as 
            singular by this method. This method is optimized for fast matrix inversion and not for safe
            detection of singular matrices. If you need to detect if a matrix is singular, you can, for 
            example, compute its <see cref="P:DigitalRune.Mathematics.Algebra.Matrix33F.Determinant"/> and see if it is near zero.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Transpose">
            <summary>
            Transposes this matrix.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.Absolute(DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F)">
            <overloads>
            <summary>
            Determines whether two matrices are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two matrices are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two matrices are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Matrix33F,System.Single)">
            <summary>
            Determines whether two matrices are equal (regarding a specific tolerance).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two matrices are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>
            The matrix with small elements clamped to zero.
            </returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix33F,System.Single)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            The matrix with small elements clamped to zero.
            </returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateScale(System.Single)">
            <overloads>
            <summary>
            Creates a scaling matrix.
            </summary>
            </overloads>
            
            <summary>
            Creates a uniform scaling matrix.
            </summary>
            <param name="scale">
            The uniform scale factor that is applied to the x-, y-, and z-axis.
            </param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateScale(System.Single,System.Single,System.Single)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scaleX">The value to scale by on the x-axis.</param>
            <param name="scaleY">The value to scale by on the y-axis.</param>
            <param name="scaleZ">The value to scale by on the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateScale(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scale">Amounts to scale by the x, y, and z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <overloads>
            <summary>
            Creates a rotation matrix.
            </summary>
            </overloads>
            
            <summary>
            Creates a rotation matrix from axis and angle.
            </summary>
            <param name="axis">The rotation axis. (Does not need to be normalized.)</param>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
            <exception cref="T:System.ArgumentException">
            The <paramref name="axis"/> vector has 0 length.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateRotation(DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Creates a rotation matrix from a unit quaternion.
            </summary>
            <param name="rotation">The rotation described by a unit quaternion.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateRotationX(System.Single)">
            <summary>
            Creates a matrix that specifies a rotation around the x-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateRotationY(System.Single)">
            <summary>
            Creates a matrix that specifies a rotation around the y-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix33F.CreateRotationZ(System.Single)">
            <summary>
            Creates a matrix that specifies a rotation around the z-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.Matrix44D">
            <summary>
            Defines a 4 x 4 matrix (double-precision).
            </summary>
            <remarks>
            <para>
            All indices are zero-based. The matrix looks like this:
            <code>
            M00 M01 M02 M03
            M10 M11 M12 M13
            M20 M21 M22 M23
            M30 M31 M32 M33
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.One">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.Identity">
            <summary>
            Returns the 4 x 4 identity matrix.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M00">
            <summary>
            The element in first row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M01">
            <summary>
            The element in first row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M02">
            <summary>
            The element in first row, third column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M03">
            <summary>
            The element in first row, fourth column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M10">
            <summary>
            The element in second row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M11">
            <summary>
            The element in second row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M12">
            <summary>
            The element in second row, third column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M13">
            <summary>
            The element in second row, fourth column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M20">
            <summary>
            The element in third row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M21">
            <summary>
            The element in third row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M22">
            <summary>
            The element in third row, third column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M23">
            <summary>
            The element in third row, fourth column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M30">
            <summary>
            The element in fourth row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M31">
            <summary>
            The element in fourth row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M32">
            <summary>
            The element in fourth row, third column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44D.M33">
            <summary>
            The element in fourth row, fourth column.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Item(System.Int32)">
            <overloads>
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            </overloads>
            
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The element at <paramref name="index"/>.</value>
            <remarks>
            The matrix elements are in row-major order.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <value>The element at the specified row and column.</value>
            <remarks>
            The indices are zero-based: [0,0] is the first element, [3,3] is the last element.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index [<paramref name="row"/>, <paramref name="column"/>] is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.IsNaN">
            <summary>
            Gets a value indicating whether an element of the matrix is <see cref="F:System.Double.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if an element of the matrix is <see cref="F:System.Double.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
            <value>
            <see langword="true"/> if this matrix is symmetric; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The matrix elements are compared for equality - no tolerance value to handle numerical
            errors is used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Minor">
            <summary>
            Gets or sets the upper left 3x3 sub-matrix.
            </summary>
            <value>
            The 3x3 matrix that is produced by removing the last row and column of this matrix.
            </value>
            <remarks>
            Setting the minor matrix does not affect the elements in the fourth row or column.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Trace">
            <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
            <value>The matrix trace.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Translation">
            <summary>
            Gets or sets the translation vector (<see cref="F:DigitalRune.Mathematics.Algebra.Matrix44D.M03"/>, <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44D.M13"/>, <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44D.M23"/>)
            of the matrix.
            </summary>
            <value>The translation vector of the matrix.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Determinant">
            <summary>
            Returns the determinant of this matrix.
            </summary>
            <value>The determinant of this matrix.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Transposed">
            <summary>
            Returns the transposed of this matrix.
            </summary>
            <returns>The transposed of this matrix.</returns>
            <remarks>
            The property does not change this instance. To transpose this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.Transpose"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44D.Inverse">
            <summary>
            Returns the inverse of this matrix.
            </summary>
            <value>The inverse of this matrix.</value>
            <remarks>
            The property does not change this instance. To invert this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.Invert"/>.
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.Invert"/>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TryInvert"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(System.Double)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> struct.
            </summary>
            <param name="elementValue">The initial value for the matrix elements.</param>
            <remarks>
            All matrix elements are set to <paramref name="elementValue"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> class.
            </summary>
            <param name="m00">The element in the first row, first column.</param>
            <param name="m01">The element in the first row, second column.</param>
            <param name="m02">The element in the first row, third column.</param>
            <param name="m03">The element in the first row, fourth column.</param>
            <param name="m10">The element in the second row, first column.</param>
            <param name="m11">The element in the second row, second column.</param>
            <param name="m12">The element in the second row, third column.</param>
            <param name="m13">The element in the second row, fourth column.</param>
            <param name="m20">The element in the third row, first column.</param>
            <param name="m21">The element in the third row, second column.</param>
            <param name="m22">The element in the third row, third column.</param>
            <param name="m23">The element in the third row, fourth column.</param>
            <param name="m30">The element in the fourth row, first column</param>
            <param name="m31">The element in the fourth row, second column</param>
            <param name="m32">The element in the fourth row, third column</param>
            <param name="m33">The element in the fourth row, fourth column</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(System.Double[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 16 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(System.Collections.Generic.IList{System.Double},DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> struct.
            </summary>
            <param name="elements">The list with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="elements"/> has less than 16 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 4x4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(System.Double[][])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 4x4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> or the arrays in elements[0] must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.#ctor(DigitalRune.Mathematics.Algebra.Matrix33D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> struct.
            </summary>
            <param name="minor">The upper left 3x3 submatrix.</param>
            <param name="translation">The translation vector.</param>
            <remarks>
            The upper left 3x3 submatrix is initialized with <paramref name="minor"/>. The elements 
            <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44D.M03"/>, <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44D.M13"/>, <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44D.M23"/> are initialized with the elements of 
            <paramref name="translation"/>. <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44D.M33"/> is set to 1 and all other matrix elements
            are set to 0.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Equals(DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToString">
            <overloads>
            <summary>
            Returns the string representation of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this matrix.
            </summary>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this matrix using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Negate(DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Addition(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Add(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Subtraction(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Subtract(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix44D,System.Double)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix and a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="scalar">The scalar.</param>
            <param name="matrix">The matrix.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Multiply(System.Double,DigitalRune.Mathematics.Algebra.Matrix44D)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Multiply(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Multiplies the matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The vector.</param>
            <returns>The resulting column vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Multiply(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Division(DigitalRune.Mathematics.Algebra.Matrix44D,System.Double)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Divide(DigitalRune.Mathematics.Algebra.Matrix44D,System.Double)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Equality(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Tests if two matrices are equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Inequality(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Tests if two matrices are not equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44D)~System.Double[0:,0:]">
            <overloads>
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> to another type.
            </summary>
            </overloads>
            
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> to a 2-dimensional 
            <see langword="double"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToArray2D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> to a 2-dimensional <see langword="double"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44D)~System.Double[][]">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> to a jagged 
            <see langword="double"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToArrayJagged">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> to a jagged <see langword="double"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix44D)~DigitalRune.Mathematics.Algebra.MatrixD">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToMatrixD">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/>
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44D)~DigitalRune.Mathematics.Algebra.Matrix44F">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToMatrix44F">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Explicit(Microsoft.Xna.Framework.Matrix)~DigitalRune.Mathematics.Algebra.Matrix44D">
            <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework) to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/>
            (DigitalRune Mathematics).
            </summary>
            <param name="matrix">The <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> (DigitalRune Mathematics).</returns>
            <remarks>
            <para>
            DigitalRune Mathematics uses column vectors whereas the XNA Framework uses row vectors. By
            converting a <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework) to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> (DigitalRune
            Mathematics) the matrix is automatically transposed.
            </para>
            <para>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.FromXna(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Converts a <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework) to a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> (DigitalRune 
            Mathematics).
            </summary>
            <param name="matrix">The <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> (DigitalRune Mathematics).</returns>
            <remarks>
            <para>
            DigitalRune Mathematics uses column vectors whereas the XNA Framework uses row vectors. By
            converting a <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework) to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> (DigitalRune
            Mathematics) the matrix is automatically transposed.
            </para>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44D)~Microsoft.Xna.Framework.Matrix">
            <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework).
            </summary>
            <param name="matrix">The <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> (DigitalRune Mathematics).</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework).</returns>
            <remarks>
            <para>
            DigitalRune Mathematics uses column vectors whereas the XNA Framework uses row vectors. By
            converting a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA 
            Framework) the matrix is automatically transposed.
            </para>
            <para>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToXna">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Matrix"/> 
            (XNA Framework).
            </summary>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework).</returns>
            <remarks>
            <para>
            DigitalRune Mathematics uses column vectors whereas the XNA Framework uses row vectors. By
            converting a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA 
            Framework) the matrix is automatically transposed.
            </para>
            <para>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Absolute">
            <overloads>
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ClampToZero(System.Double)">
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Decompose(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.Vector3D@)">
            <overloads>
            <summary>
            Decomposes the matrix into the scale, translation, and rotation components.
            </summary>
            </overloads>
            
            <summary>
            Decomposes the matrix into the scale, translation, and rotation components.
            </summary>
            <param name="scale">The scale component of the matrix.</param>
            <param name="rotation">The rotation component of the matrix.</param>
            <param name="translation">The translation component of the matrix.</param>
            <returns>
            <see langword="true"/> if the matrix was successfully decomposed; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method assumes that the matrix is a 3D scale/rotation/translation (SRT) matrix.
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.Decompose(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.Vector3D@)"/> returns 
            <see langword="false"/> when the matrix is not a valid SRT matrix. This is the case when two
            or more of the scale values are 0 or the last row of the matrix is something other than 
            (0, 0, 0, 1).
            </para>
            <para>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.DecomposeFast(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.Vector3D@)"/> is a faster version 
            of this method that can be used when it is certain that the matrix is a valid SRT matrix.
            </para>
            </remarks>
            <example>
            The following example shows how to compose the matrix scale, rotation, and translation
            components.
            <code>
            Matrix44D srt = Matrix44D.CreateTranslation(translation)
                            * Matrix44D.CreateRotation(rotation)
                            * Matrix44D.CreateScale(scale);
            </code>
            </example>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Decompose(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.Matrix33D@,DigitalRune.Mathematics.Algebra.Vector3D@)">
            <summary>
            Decomposes the matrix into the scale, translation, and rotation components.
            </summary>
            <param name="scale">The scale component of the matrix.</param>
            <param name="rotation">The rotation component of the matrix.</param>
            <param name="translation">The translation component of the matrix.</param>
            <returns>
            <see langword="true"/> if the matrix was successfully decomposed; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method assumes that the matrix is a 3D scale/rotation/translation (SRT) matrix.
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.Decompose(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.Matrix33D@,DigitalRune.Mathematics.Algebra.Vector3D@)"/> returns 
            <see langword="false"/> when the matrix is not a valid SRT matrix. This is the case when two
            or more of the scale values are 0 or the last row of the matrix is something other than 
            (0, 0, 0, 1).
            </para>
            <para>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.DecomposeFast(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.Matrix33D@,DigitalRune.Mathematics.Algebra.Vector3D@)"/> is a faster version of 
            this method that can be used when it is certain that the matrix is a valid SRT matrix.
            </para>
            </remarks>
            <example>
            The following example shows how to compose the matrix scale, rotation, and translation
            components.
            <code>
            Matrix33D sr = rotation * Matrix33D.CreateScale(scale);
            Matrix44D srt = new Matrix44D(sr, translation);
            </code>
            </example>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.DecomposeFast(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.Vector3D@)">
            <overloads>
            <summary>
            Decomposes the matrix into the scale, translation, and rotation components. (This method is
            faster than <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.Decompose(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.Matrix33D@,DigitalRune.Mathematics.Algebra.Vector3D@)"/>, but the matrix 
            must be a valid 3D scale/rotation/translation (SRT) matrix.)
            </summary>
            </overloads>
            
            <summary>
            Decomposes the matrix into the scale, translation, and rotation components. (This method is
            faster than <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.Decompose(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.Vector3D@)"/>, but the 
            matrix must be a valid 3D scale/rotation/translation (SRT) matrix.)
            </summary>
            <param name="scale">The scale component of the matrix.</param>
            <param name="rotation">The rotation component of the matrix.</param>
            <param name="translation">The translation component of the matrix.</param>
            <remarks>
            This method requires that the matrix is a 3D scale/rotation/translation (SRT) matrix. See
            also <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.Decompose(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.Vector3D@)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.DecomposeFast(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.Matrix33D@,DigitalRune.Mathematics.Algebra.Vector3D@)">
            <summary>
            Decomposes the matrix into the scale, translation, and rotation components. (This method is
            faster than <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.Decompose(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.Matrix33D@,DigitalRune.Mathematics.Algebra.Vector3D@)"/>, but the matrix
            must be a valid 3D scale/rotation/translation (SRT) matrix.)
            </summary>
            <param name="scale">The scale component of the matrix.</param>
            <param name="rotation">The rotation component of the matrix.</param>
            <param name="translation">The translation component of the matrix.</param>
            <remarks>
            This method requires that the matrix is a 3D scale/rotation/translation (SRT) matrix. See
            also <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.Decompose(DigitalRune.Mathematics.Algebra.Vector3D@,DigitalRune.Mathematics.Algebra.Matrix33D@,DigitalRune.Mathematics.Algebra.Vector3D@)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.GetColumn(System.Int32)">
            <summary>
            Gets a column as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <param name="index">The index of the column (0, 1, 2, or 3).</param>
            <returns>The column vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Sets a column from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <param name="index">The index of the column (0, 1, 2, or 3).</param>
            <param name="columnVector">The column vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.GetRow(System.Int32)">
            <summary>
            Gets a row as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <param name="index">The index of the row (0, 1, 2, or 3).</param>
            <returns>The row vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Sets a row from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <param name="index">The index of the row (0, 1, 2, or 3).</param>
            <param name="rowVector">The row vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Invert">
            <summary>
            Inverts the matrix.
            </summary>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
            <seealso cref="P:DigitalRune.Mathematics.Algebra.Matrix44D.Inverse"/>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TryInvert"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to an array of <see langword="double"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the array.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to a list of <see langword="double"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the list.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.TryInvert">
            <summary>
            Inverts the matrix if it is invertible.
            </summary>
            <returns>
            <see langword="true"/> if the matrix is invertible; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method is the equivalent to <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.Invert"/>, except that no exceptions are thrown.
            The return value indicates whether the operation was successful.
            </para>
            <para>
            Due to numerical errors it can happen that some singular matrices are not recognized as 
            singular by this method. This method is optimized for fast matrix inversion and not for safe
            detection of singular matrices. If you need to detect if a matrix is singular, you can, for 
            example, compute its <see cref="P:DigitalRune.Mathematics.Algebra.Matrix44D.Determinant"/> and see if it is near zero.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Transforms a position.
            </summary>
            <param name="position">The position.</param>
            <returns>The transformed position.</returns>
            <remarks>
            <para>
            By using homogeneous coordinates 4 x 4 matrices can be used to define affine transformations 
            or projective transformations in 3D space. When a 3D vector is given, the vector can have 
            multiple meanings.
            </para>
            <para>
            <strong>Position Vectors:</strong>
            A position vector identifies a point in 3D. Use <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3D)"/> to 
            transform position vectors. This method interprets the given <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> as a 
            vector (x, y, z, 1) in homogeneous coordinates. The position vector is transformed by
            multiplication with the 4 x 4 matrix.
            </para>
            <para>
            <strong>Direction Vectors:</strong>
            A direction vector (or displacement vector) defines a direction and length in 3D. Use 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3D)"/> to transform direction vectors. This method interprets the 
            given <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> as a vector (x, y, z, 0) in homogeneous coordinates. The 
            direction vector is transformed by multiplication with the upper, left 3 x 3 corner of the
            transformation matrix.
            </para>
            <para>
            <strong>Tangent Vectors:</strong>
            A tangent vector (surface tangent) defines a tangential direction at a point on a surface. 
            They can be treated similar to direction vectors. Use <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3D)"/> to 
            transform tangent vectors and binormals vectors.
            </para>
            <para>
            <strong>Normal vectors:</strong>
            A normal vector (surface normal) is a vector that is perpendicular to the tangent plane of
            a given point on a surface. In differential geometry normal vectors are "tangent covectors" 
            or "cotangent vectors". They need to be treated differently than direction vectors or 
            tangent vectors. Use <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformNormal(DigitalRune.Mathematics.Algebra.Vector3D)"/> to transform normal vectors. A normal 
            vector is transformed by multiplication with transpose of the inverse of the upper, left 
            3 x 3 corner of the transformation matrix.
            </para>
            <para>
            (Note: If the transformation matrix contains only rotations, translations and uniform 
            scalings then <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3D)"/> can be used to transform normal vectors,
            which is faster.)
            </para>
            </remarks>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3D)"/>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformNormal(DigitalRune.Mathematics.Algebra.Vector3D)"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Transforms a direction vector (or tangent vector).
            </summary>
            <param name="direction">The direction vector.</param>
            <returns>The transformed direction vector.</returns>
            <inheritdoc cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3D)"/>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformNormal(DigitalRune.Mathematics.Algebra.Vector3D)"/>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3D)"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformNormal(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Transforms a normal vector.
            </summary>
            <param name="normal">The normal vector.</param>
            <returns>
            The transformed normal. (Note: The resulting vector might need to be normalized!)
            </returns>
            <inheritdoc cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3D)"/>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3D)"/>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44D.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3D)"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Transpose">
            <summary>
            Transposes this matrix.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.Absolute(DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D)">
            <overloads>
            <summary>
            Determines whether two matrices are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two matrices are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two matrices are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix44D,DigitalRune.Mathematics.Algebra.Matrix44D,System.Double)">
            <summary>
            Determines whether two matrices are equal (regarding a specific tolerance).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two matrices are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The matrix with small elements clamped to zero.</returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix44D,System.Double)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The matrix with small elements clamped to zero.</returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateScale(System.Double)">
            <overloads>
            <summary>
            Creates a scaling matrix.
            </summary>
            </overloads>
            
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scale">
            The uniform scale factor that is applied to the x-, y-, and z-axis.
            </param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateScale(System.Double,System.Double,System.Double)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scaleX">The value to scale by on the x-axis.</param>
            <param name="scaleY">The value to scale by on the y-axis.</param>
            <param name="scaleZ">The value to scale by on the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateScale(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scale">Amounts to scale by the x, y, and z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
            <overloads>
            <summary>
            Creates a rotation matrix.
            </summary>
            </overloads>
            
            <summary>
            Creates a rotation matrix from axis and angle.
            </summary>
            <param name="axis">The rotation axis. (Does not need to be normalized.)</param>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
            <exception cref="T:System.ArgumentException">
            The <paramref name="axis"/> vector has 0 length.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateRotation(DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Creates a rotation matrix from a unit quaternion.
            </summary>
            <param name="rotation">The rotation described by a unit quaternion.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateTranslation(System.Double,System.Double,System.Double)">
            <overloads>
            <summary>
            Creates a translation matrix.
            </summary>
            </overloads>
            
            <summary>
            Creates a translation matrix from the given values.
            </summary>
            <param name="x">The translation along the x-axis.</param>
            <param name="y">The translation along the y-axis.</param>
            <param name="z">The translation along the z-axis.</param>
            <returns>A transformation matrix that translates vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateTranslation(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Creates a translation matrix from a vector.
            </summary>
            <param name="translation">The translation.</param>
            <returns>A transformation matrix that translates vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateRotationX(System.Double)">
            <summary>
            Creates a matrix that specifies a rotation around the x-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateRotationY(System.Double)">
            <summary>
            Creates a matrix that specifies a rotation around the y-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateRotationZ(System.Double)">
            <summary>
            Creates a matrix that specifies a rotation around the z-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateLookAt(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Creates a right-handed look-at matrix (view matrix). (Only available in the XNA-compatible 
            build.)
            </summary>
            <param name="position">The position of the viewer.</param>
            <param name="target">The target at which the viewer is looking.</param>
            <param name="upVector">
            The direction that is "up" from the viewer's point of view. (Does not need to be 
            normalized.)
            </param>
            <returns>The right-handed look-at matrix (view matrix).</returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            A look-at matrix is also known as view matrix. It transforms a position from world space to
            the view space. In view space x-axis points to the right, the y-axis points up, and the 
            z-axis points towards the viewer.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="position"/> is the same as <paramref name="target"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="upVector"/> is (0, 0, 0).
            </exception>
            <exception cref="T:System.DivideByZeroException">
            The camera direction (<paramref name="target"/> - <paramref name="position"/>) is probably
            pointing in the same or opposite direction as <paramref name="upVector"/>. (The two vectors
            must not be parallel.)
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateOrthographic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a right-handed, orthographic projection matrix. (Only available in the XNA 
            compatible build.)
            </summary>
            <param name="width">The width of the view volume.</param>
            <param name="height">The height of the view volume.</param>
            <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
            <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
            <returns>The right-handed orthographic projection matrix.</returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            In contrast to all preceding coordinate spaces (model space, world space, view space) the 
            projection space is left-handed! This is necessary because DirectX uses a left-handed 
            clip space.
            </para>
            <para>
            In the projection space the x and y-coordinates range from −1 to 1, and the z-coordinates
            range from 0 (near) to 1 (far).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="zNear"/> is greater than or equal to <paramref name="zFar"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a customized (off-center), right-handed, orthographic projection matrix. (Only 
            available in the XNA-compatible build.)
            </summary>
            <param name="left">The minimum x-value of the view volume.</param>
            <param name="right">The maximum x-value of the view volume.</param>
            <param name="bottom">The minimum y-value of the view volume.</param>
            <param name="top">The maximum y-value of the view volume.</param>
            <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
            <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
            <returns>The customized (off-center), right-handed orthographic projection matrix.</returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            In contrast to all preceding coordinate spaces (model space, world space, view space) the 
            projection space is left-handed! This is necessary because DirectX uses a left-handed 
            clip space.
            </para>
            <para>
            In the projection space the x and y-coordinates range from −1 to 1, and the z-coordinates
            range from 0 (near) to 1 (far).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> is equal to <paramref name="right"/>, 
            <paramref name="bottom"/> is equal to <paramref name="top"/>, or
            <paramref name="zNear"/> is greater than or equal to <paramref name="zFar"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreatePerspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a right-handed, perspective projection matrix. (Only available in the XNA-compatible 
            build.)
            </summary>
            <param name="width">The width of the view volume at the near view-plane.</param>
            <param name="height">The height of the view volume at the near view-plane.</param>
            <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
            <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
            <returns>The right-handed, perspective projection matrix.</returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            In contrast to all preceding coordinate spaces (model space, world space, view space) the 
            projection space is left-handed! This is necessary because DirectX uses a left-handed 
            clip space.
            </para>
            <para>
            In the projection space the x and y-coordinates range from −1 to 1, and the z-coordinates
            range from 0 (near) to 1 (far).
            </para>
            <para>
            <strong>Infinite Projections:</strong><br/>
            <paramref name="zFar"/> can be set to <see cref="F:System.Double.PositiveInfinity"/> to create an
            <i>infinite projection</i> where the far clip plane is at infinity.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A parameter is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="zNear"/> is greater than or equal to <paramref name="zFar"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreatePerspectiveFieldOfView(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view. (Only 
            available in the XNA-compatible build.)
            </summary>
            <param name="fieldOfViewY">The vertical field of view.</param>
            <param name="aspectRatio">The aspect ratio (width / height).</param>
            <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
            <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
            <returns>
            The right-handed, perspective projection matrix.
            </returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            In contrast to all preceding coordinate spaces (model space, world space, view space) the
            projection space is left-handed! This is necessary because DirectX uses a left-handed
            clip space.
            </para>
            <para>
            In the projection space the x and y-coordinates range from −1 to 1, and the z-coordinates
            range from 0 (near) to 1 (far).
            </para>
            <para>
            <strong>Infinite Projections:</strong><br/>
            <paramref name="zFar"/> can be set to <see cref="F:System.Double.PositiveInfinity"/> to create an
            <i>infinite projection</i> where the far clip plane is at infinity.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fieldOfViewY"/> is not between 0 and π radians (0° and 180°),
            <paramref name="aspectRatio"/> is negative or 0, <paramref name="zNear"/> is negative or 0,
            or <paramref name="zFar"/> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="zNear"/> is greater than or equal to <paramref name="zFar"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44D.CreatePerspectiveOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a customized, right-handed, perspective projection matrix. (Only available in the 
            XNA-compatible build.)
            </summary>
            <param name="left">The minimum x-value of the view volume at the near view plane.</param>
            <param name="right">The maximum x-value of the view volume at the near view plane.</param>
            <param name="bottom">The minimum y-value of the view volume at the near view plane.</param>
            <param name="top">The maximum y-value of the view volume at the near view plane.</param>
            <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
            <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
            <returns>
            The customized, right-handed, perspective projection matrix.
            </returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            In contrast to all preceding coordinate spaces (model space, world space, view space) the
            projection space is left-handed! This is necessary because DirectX uses a left-handed
            clip space.
            </para>
            <para>
            In the projection space the x and y-coordinates range from −1 to 1, and the z-coordinates
            range from 0 (near) to 1 (far).
            </para>
            <para>
            <strong>Infinite Projections:</strong><br/>
            <paramref name="zFar"/> can be set to <see cref="F:System.Double.PositiveInfinity"/> to create an
            <i>infinite projection</i> where the far clip plane is at infinity.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="zNear"/> or <paramref name="zFar"/> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> is equal to <paramref name="right"/>,
            <paramref name="bottom"/> is equal to <paramref name="top"/>, or 
            <paramref name="zNear"/> is greater than or equal to <paramref name="zFar"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.Matrix44F">
            <summary>
            Defines a 4 x 4 matrix (single-precision).
            </summary>
            <remarks>
            <para>
            All indices are zero-based. The matrix looks like this:
            <code>
            M00 M01 M02 M03
            M10 M11 M12 M13
            M20 M21 M22 M23
            M30 M31 M32 M33
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.One">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.Identity">
            <summary>
            Returns the 4 x 4 identity matrix.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M00">
            <summary>
            The element in first row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M01">
            <summary>
            The element in first row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M02">
            <summary>
            The element in first row, third column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M03">
            <summary>
            The element in first row, fourth column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M10">
            <summary>
            The element in second row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M11">
            <summary>
            The element in second row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M12">
            <summary>
            The element in second row, third column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M13">
            <summary>
            The element in second row, fourth column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M20">
            <summary>
            The element in third row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M21">
            <summary>
            The element in third row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M22">
            <summary>
            The element in third row, third column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M23">
            <summary>
            The element in third row, fourth column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M30">
            <summary>
            The element in fourth row, first column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M31">
            <summary>
            The element in fourth row, second column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M32">
            <summary>
            The element in fourth row, third column.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Matrix44F.M33">
            <summary>
            The element in fourth row, fourth column.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Item(System.Int32)">
            <overloads>
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            </overloads>
            
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The element at <paramref name="index"/>.</value>
            <remarks>
            The matrix elements are in row-major order.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <value>The element at the specified row and column.</value>
            <remarks>
            The indices are zero-based: [0,0] is the first element, [3,3] is the last element.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index [<paramref name="row"/>, <paramref name="column"/>] is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.IsNaN">
            <summary>
            Gets a value indicating whether an element of the matrix is <see cref="F:System.Single.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if an element of the matrix is <see cref="F:System.Single.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
            <value>
            <see langword="true"/> if this matrix is symmetric; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The matrix elements are compared for equality - no tolerance value to handle numerical
            errors is used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Minor">
            <summary>
            Gets or sets the upper left 3x3 sub-matrix.
            </summary>
            <value>
            The 3x3 matrix that is produced by removing the last row and column of this matrix.
            </value>
            <remarks>
            Setting the minor matrix does not affect the elements in the fourth row or column.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Trace">
            <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
            <value>The matrix trace.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Translation">
            <summary>
            Gets or sets the translation vector (<see cref="F:DigitalRune.Mathematics.Algebra.Matrix44F.M03"/>, <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44F.M13"/>, <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44F.M23"/>)
            of the matrix.
            </summary>
            <value>The translation vector of the matrix.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Determinant">
            <summary>
            Returns the determinant of this matrix.
            </summary>
            <value>The determinant of this matrix.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Transposed">
            <summary>
            Returns the transposed of this matrix.
            </summary>
            <returns>The transposed of this matrix.</returns>
            <remarks>
            The property does not change this instance. To transpose this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.Transpose"/>.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Matrix44F.Inverse">
            <summary>
            Returns the inverse of this matrix.
            </summary>
            <value>The inverse of this matrix.</value>
            <remarks>
            The property does not change this instance. To invert this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.Invert"/>.
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.Invert"/>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TryInvert"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(System.Single)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> struct.
            </summary>
            <param name="elementValue">The initial value for the matrix elements.</param>
            <remarks>
            All matrix elements are set to <paramref name="elementValue"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> class.
            </summary>
            <param name="m00">The element in the first row, first column.</param>
            <param name="m01">The element in the first row, second column.</param>
            <param name="m02">The element in the first row, third column.</param>
            <param name="m03">The element in the first row, fourth column.</param>
            <param name="m10">The element in the second row, first column.</param>
            <param name="m11">The element in the second row, second column.</param>
            <param name="m12">The element in the second row, third column.</param>
            <param name="m13">The element in the second row, fourth column.</param>
            <param name="m20">The element in the third row, first column.</param>
            <param name="m21">The element in the third row, second column.</param>
            <param name="m22">The element in the third row, third column.</param>
            <param name="m23">The element in the third row, fourth column.</param>
            <param name="m30">The element in the fourth row, first column</param>
            <param name="m31">The element in the fourth row, second column</param>
            <param name="m32">The element in the fourth row, third column</param>
            <param name="m33">The element in the fourth row, fourth column</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(System.Single[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 16 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(System.Collections.Generic.IList{System.Single},DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> struct.
            </summary>
            <param name="elements">The list with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="elements"/> has less than 16 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 4x4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(System.Single[][])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> struct.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than 4x4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> or the arrays in elements[0] must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.#ctor(DigitalRune.Mathematics.Algebra.Matrix33F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> struct.
            </summary>
            <param name="minor">The upper left 3x3 submatrix.</param>
            <param name="translation">The translation vector.</param>
            <remarks>
            The upper left 3x3 submatrix is initialized with <paramref name="minor"/>. The elements 
            <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44F.M03"/>, <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44F.M13"/>, <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44F.M23"/> are initialized with the elements of 
            <paramref name="translation"/>. <see cref="F:DigitalRune.Mathematics.Algebra.Matrix44F.M33"/> is set to 1 and all other matrix elements
            are set to 0.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Equals(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToString">
            <overloads>
            <summary>
            Returns the string representation of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this matrix.
            </summary>
            <returns>The string representation of this matrix.</returns> 
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this matrix using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Negate(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Addition(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Add(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Subtraction(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Subtract(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix44F,System.Single)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix and a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="scalar">The scalar.</param>
            <param name="matrix">The matrix.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Multiply(System.Single,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Multiply(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Multiply(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Multiplies the matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The vector.</param>
            <returns>The resulting column vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Multiply(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Division(DigitalRune.Mathematics.Algebra.Matrix44F,System.Single)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Divide(DigitalRune.Mathematics.Algebra.Matrix44F,System.Single)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Equality(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Tests if two matrices are equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Inequality(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Tests if two matrices are not equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44F)~System.Single[0:,0:]">
            <overloads>
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> to another type.
            </summary>
            </overloads>
            
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> to a 2-dimensional 
            <see langword="float"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToArray2D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> to a 2-dimensional <see langword="float"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44F)~System.Single[][]">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> to a jagged 
            <see langword="float"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToArrayJagged">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> to a jagged <see langword="float"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix44F)~DigitalRune.Mathematics.Algebra.MatrixF">
            <overloads>
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> to another data type.
            </summary>
            </overloads>
            
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToMatrixF">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/>
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Implicit(DigitalRune.Mathematics.Algebra.Matrix44F)~DigitalRune.Mathematics.Algebra.Matrix44D">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToMatrix44D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Explicit(Microsoft.Xna.Framework.Matrix)~DigitalRune.Mathematics.Algebra.Matrix44F">
            <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework) to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/>
            (DigitalRune Mathematics).
            </summary>
            <param name="matrix">The <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> (DigitalRune Mathematics).</returns>
            <remarks>
            <para>
            DigitalRune Mathematics uses column vectors whereas the XNA Framework uses row vectors. By
            converting a <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework) to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> (DigitalRune
            Mathematics) the matrix is automatically transposed.
            </para>
            <para>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.FromXna(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Converts a <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework) to a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> (DigitalRune 
            Mathematics).
            </summary>
            <param name="matrix">The <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> (DigitalRune Mathematics).</returns>
            <remarks>
            <para>
            DigitalRune Mathematics uses column vectors whereas the XNA Framework uses row vectors. By
            converting a <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework) to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> (DigitalRune
            Mathematics) the matrix is automatically transposed.
            </para>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.op_Explicit(DigitalRune.Mathematics.Algebra.Matrix44F)~Microsoft.Xna.Framework.Matrix">
            <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework).
            </summary>
            <param name="matrix">The <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> (DigitalRune Mathematics).</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework).</returns>
            <remarks>
            <para>
            DigitalRune Mathematics uses column vectors whereas the XNA Framework uses row vectors. By
            converting a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA 
            Framework) the matrix is automatically transposed.
            </para>
            <para>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToXna">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Matrix"/> 
            (XNA Framework).
            </summary>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA Framework).</returns>
            <remarks>
            <para>
            DigitalRune Mathematics uses column vectors whereas the XNA Framework uses row vectors. By
            converting a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Matrix"/> (XNA 
            Framework) the matrix is automatically transposed.
            </para>
            <para>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Absolute">
            <overloads>
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ClampToZero(System.Single)">
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Decompose(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <overloads>
            <summary>
            Decomposes the matrix into the scale, translation, and rotation components.
            </summary>
            </overloads>
            
            <summary>
            Decomposes the matrix into the scale, translation, and rotation components.
            </summary>
            <param name="scale">The scale component of the matrix.</param>
            <param name="rotation">The rotation component of the matrix.</param>
            <param name="translation">The translation component of the matrix.</param>
            <returns>
            <see langword="true"/> if the matrix was successfully decomposed; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method assumes that the matrix is a 3D scale/rotation/translation (SRT) matrix.
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.Decompose(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.Vector3F@)"/> returns 
            <see langword="false"/> when the matrix is not a valid SRT matrix. This is the case when two
            or more of the scale values are 0 or the last row of the matrix is something other than 
            (0, 0, 0, 1).
            </para>
            <para>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.DecomposeFast(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.Vector3F@)"/> is a faster version 
            of this method that can be used when it is certain that the matrix is a valid SRT matrix.
            </para>
            </remarks>
            <example>
            The following example shows how to compose the matrix scale, rotation, and translation
            components.
            <code>
            Matrix44F srt = Matrix44F.CreateTranslation(translation)
                            * Matrix44F.CreateRotation(rotation)
                            * Matrix44F.CreateScale(scale);
            </code>
            </example>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Decompose(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Matrix33F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Decomposes the matrix into the scale, translation, and rotation components.
            </summary>
            <param name="scale">The scale component of the matrix.</param>
            <param name="rotation">The rotation component of the matrix.</param>
            <param name="translation">The translation component of the matrix.</param>
            <returns>
            <see langword="true"/> if the matrix was successfully decomposed; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method assumes that the matrix is a 3D scale/rotation/translation (SRT) matrix.
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.Decompose(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Matrix33F@,DigitalRune.Mathematics.Algebra.Vector3F@)"/> returns 
            <see langword="false"/> when the matrix is not a valid SRT matrix. This is the case when two
            or more of the scale values are 0 or the last row of the matrix is something other than 
            (0, 0, 0, 1).
            </para>
            <para>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.DecomposeFast(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Matrix33F@,DigitalRune.Mathematics.Algebra.Vector3F@)"/> is a faster version of 
            this method that can be used when it is certain that the matrix is a valid SRT matrix.
            </para>
            </remarks>
            <example>
            The following example shows how to compose the matrix scale, rotation, and translation
            components.
            <code>
            Matrix33F sr = rotation * Matrix33F.CreateScale(scale);
            Matrix44F srt = new Matrix44F(sr, translation);
            </code>
            </example>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.DecomposeFast(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <overloads>
            <summary>
            Decomposes the matrix into the scale, translation, and rotation components. (This method is
            faster than <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.Decompose(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Matrix33F@,DigitalRune.Mathematics.Algebra.Vector3F@)"/>, but the matrix 
            must be a valid 3D scale/rotation/translation (SRT) matrix.)
            </summary>
            </overloads>
            
            <summary>
            Decomposes the matrix into the scale, translation, and rotation components. (This method is
            faster than <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.Decompose(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.Vector3F@)"/>, but the 
            matrix must be a valid 3D scale/rotation/translation (SRT) matrix.)
            </summary>
            <param name="scale">The scale component of the matrix.</param>
            <param name="rotation">The rotation component of the matrix.</param>
            <param name="translation">The translation component of the matrix.</param>
            <remarks>
            This method requires that the matrix is a 3D scale/rotation/translation (SRT) matrix. See
            also <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.Decompose(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.Vector3F@)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.DecomposeFast(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Matrix33F@,DigitalRune.Mathematics.Algebra.Vector3F@)">
            <summary>
            Decomposes the matrix into the scale, translation, and rotation components. (This method is
            faster than <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.Decompose(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Matrix33F@,DigitalRune.Mathematics.Algebra.Vector3F@)"/>, but the matrix
            must be a valid 3D scale/rotation/translation (SRT) matrix.)
            </summary>
            <param name="scale">The scale component of the matrix.</param>
            <param name="rotation">The rotation component of the matrix.</param>
            <param name="translation">The translation component of the matrix.</param>
            <remarks>
            This method requires that the matrix is a 3D scale/rotation/translation (SRT) matrix. See
            also <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.Decompose(DigitalRune.Mathematics.Algebra.Vector3F@,DigitalRune.Mathematics.Algebra.Matrix33F@,DigitalRune.Mathematics.Algebra.Vector3F@)"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.GetColumn(System.Int32)">
            <summary>
            Gets a column as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="index">The index of the column (0, 1, 2, or 3).</param>
            <returns>The column vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Sets a column from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="index">The index of the column (0, 1, 2, or 3).</param>
            <param name="columnVector">The column vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.GetRow(System.Int32)">
            <summary>
            Gets a row as <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="index">The index of the row (0, 1, 2, or 3).</param>
            <returns>The row vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Sets a row from a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="index">The index of the row (0, 1, 2, or 3).</param>
            <param name="rowVector">The row vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Invert">
            <summary>
            Inverts the matrix.
            </summary>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
            <seealso cref="P:DigitalRune.Mathematics.Algebra.Matrix44F.Inverse"/>
            <seealso cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TryInvert"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to an array of <see langword="float"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the array.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to a list of <see langword="float"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the list.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.TryInvert">
            <summary>
            Inverts the matrix if it is invertible.
            </summary>
            <returns>
            <see langword="true"/> if the matrix is invertible; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method is the equivalent to <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.Invert"/>, except that no exceptions are thrown.
            The return value indicates whether the operation was successful.
            </para>
            <para>
            Due to numerical errors it can happen that some singular matrices are not recognized as 
            singular by this method. This method is optimized for fast matrix inversion and not for safe
            detection of singular matrices. If you need to detect if a matrix is singular, you can, for 
            example, compute its <see cref="P:DigitalRune.Mathematics.Algebra.Matrix44F.Determinant"/> and see if it is near zero.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Transforms a position.
            </summary>
            <param name="position">The position.</param>
            <returns>The transformed position.</returns>
            <remarks>
            <para>
            By using homogeneous coordinates 4 x 4 matrices can be used to define affine transformations 
            or projective transformations in 3D space. When a 3D vector is given, the vector can have 
            multiple meanings.
            </para>
            <para>
            <strong>Position Vectors:</strong>
            A position vector identifies a point in 3D. Use <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3F)"/> to 
            transform position vectors. This method interprets the given <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> as a 
            vector (x, y, z, 1) in homogeneous coordinates. The position vector is transformed by
            multiplication with the 4 x 4 matrix.
            </para>
            <para>
            <strong>Direction Vectors:</strong>
            A direction vector (or displacement vector) defines a direction and length in 3D. Use 
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3F)"/> to transform direction vectors. This method interprets the 
            given <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> as a vector (x, y, z, 0) in homogeneous coordinates. The 
            direction vector is transformed by multiplication with the upper, left 3 x 3 corner of the
            transformation matrix.
            </para>
            <para>
            <strong>Tangent Vectors:</strong>
            A tangent vector (surface tangent) defines a tangential direction at a point on a surface. 
            They can be treated similar to direction vectors. Use <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3F)"/> to 
            transform tangent vectors and binormals vectors.
            </para>
            <para>
            <strong>Normal vectors:</strong>
            A normal vector (surface normal) is a vector that is perpendicular to the tangent plane of
            a given point on a surface. In differential geometry normal vectors are "tangent covectors" 
            or "cotangent vectors". They need to be treated differently than direction vectors or 
            tangent vectors. Use <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformNormal(DigitalRune.Mathematics.Algebra.Vector3F)"/> to transform normal vectors. A normal 
            vector is transformed by multiplication with transpose of the inverse of the upper, left 
            3 x 3 corner of the transformation matrix.
            </para>
            <para>
            (Note: If the transformation matrix contains only rotations, translations and uniform 
            scalings then <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3F)"/> can be used to transform normal vectors,
            which is faster.)
            </para>
            </remarks>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3F)"/>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformNormal(DigitalRune.Mathematics.Algebra.Vector3F)"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Transforms a direction vector (or tangent vector).
            </summary>
            <param name="direction">The direction vector.</param>
            <returns>The transformed direction vector.</returns>
            <inheritdoc cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3F)"/>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformNormal(DigitalRune.Mathematics.Algebra.Vector3F)"/>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3F)"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformNormal(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Transforms a normal vector.
            </summary>
            <param name="normal">The normal vector.</param>
            <returns>
            The transformed normal. (Note: The resulting vector might need to be normalized!)
            </returns>
            <inheritdoc cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3F)"/>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformDirection(DigitalRune.Mathematics.Algebra.Vector3F)"/>
            <see cref="M:DigitalRune.Mathematics.Algebra.Matrix44F.TransformPosition(DigitalRune.Mathematics.Algebra.Vector3F)"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Transpose">
            <summary>
            Transposes this matrix.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.Absolute(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <overloads>
            <summary>
            Determines whether two matrices are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two matrices are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two matrices are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Matrix44F,DigitalRune.Mathematics.Algebra.Matrix44F,System.Single)">
            <summary>
            Determines whether two matrices are equal (regarding a specific tolerance).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two matrices are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The matrix with small elements clamped to zero.</returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.ClampToZero(DigitalRune.Mathematics.Algebra.Matrix44F,System.Single)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The matrix with small elements clamped to zero.</returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateScale(System.Single)">
            <overloads>
            <summary>
            Creates a scaling matrix.
            </summary>
            </overloads>
            
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scale">
            The uniform scale factor that is applied to the x-, y-, and z-axis.
            </param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateScale(System.Single,System.Single,System.Single)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scaleX">The value to scale by on the x-axis.</param>
            <param name="scaleY">The value to scale by on the y-axis.</param>
            <param name="scaleZ">The value to scale by on the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateScale(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scale">Amounts to scale by the x, y, and z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <overloads>
            <summary>
            Creates a rotation matrix.
            </summary>
            </overloads>
            
            <summary>
            Creates a rotation matrix from axis and angle.
            </summary>
            <param name="axis">The rotation axis. (Does not need to be normalized.)</param>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
            <exception cref="T:System.ArgumentException">
            The <paramref name="axis"/> vector has 0 length.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateRotation(DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Creates a rotation matrix from a unit quaternion.
            </summary>
            <param name="rotation">The rotation described by a unit quaternion.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateTranslation(System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Creates a translation matrix.
            </summary>
            </overloads>
            
            <summary>
            Creates a translation matrix from the given values.
            </summary>
            <param name="x">The translation along the x-axis.</param>
            <param name="y">The translation along the y-axis.</param>
            <param name="z">The translation along the z-axis.</param>
            <returns>A transformation matrix that translates vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateTranslation(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Creates a translation matrix from a vector.
            </summary>
            <param name="translation">The translation.</param>
            <returns>A transformation matrix that translates vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateRotationX(System.Single)">
            <summary>
            Creates a matrix that specifies a rotation around the x-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateRotationY(System.Single)">
            <summary>
            Creates a matrix that specifies a rotation around the y-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateRotationZ(System.Single)">
            <summary>
            Creates a matrix that specifies a rotation around the z-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateLookAt(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Creates a right-handed look-at matrix (view matrix). (Only available in the XNA-compatible 
            build.)
            </summary>
            <param name="position">The position of the viewer.</param>
            <param name="target">The target at which the viewer is looking.</param>
            <param name="upVector">
            The direction that is "up" from the viewer's point of view. (Does not need to be 
            normalized.)
            </param>
            <returns>The right-handed look-at matrix (view matrix).</returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            A look-at matrix is also known as view matrix. It transforms a position from world space to
            the view space. In view space x-axis points to the right, the y-axis points up, and the 
            z-axis points towards the viewer.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="position"/> is the same as <paramref name="target"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="upVector"/> is (0, 0, 0).
            </exception>
            <exception cref="T:System.DivideByZeroException">
            The camera direction (<paramref name="target"/> - <paramref name="position"/>) is probably
            pointing in the same or opposite direction as <paramref name="upVector"/>. (The two vectors
            must not be parallel.)
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, orthographic projection matrix. (Only available in the XNA 
            compatible build.)
            </summary>
            <param name="width">The width of the view volume.</param>
            <param name="height">The height of the view volume.</param>
            <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
            <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
            <returns>The right-handed orthographic projection matrix.</returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            In contrast to all preceding coordinate spaces (model space, world space, view space) the 
            projection space is left-handed! This is necessary because DirectX uses a left-handed 
            clip space.
            </para>
            <para>
            In the projection space the x and y-coordinates range from −1 to 1, and the z-coordinates
            range from 0 (near) to 1 (far).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> or <paramref name="height"/> is 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="zNear"/> is greater than or equal to <paramref name="zFar"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a customized (off-center), right-handed, orthographic projection matrix. (Only 
            available in the XNA-compatible build.)
            </summary>
            <param name="left">The minimum x-value of the view volume.</param>
            <param name="right">The maximum x-value of the view volume.</param>
            <param name="bottom">The minimum y-value of the view volume.</param>
            <param name="top">The maximum y-value of the view volume.</param>
            <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
            <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
            <returns>The customized (off-center), right-handed orthographic projection matrix.</returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            In contrast to all preceding coordinate spaces (model space, world space, view space) the 
            projection space is left-handed! This is necessary because DirectX uses a left-handed 
            clip space.
            </para>
            <para>
            In the projection space the x and y-coordinates range from −1 to 1, and the z-coordinates
            range from 0 (near) to 1 (far).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> is equal to <paramref name="right"/>, 
            <paramref name="bottom"/> is equal to <paramref name="top"/>, or
            <paramref name="zNear"/> is greater than or equal to <paramref name="zFar"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix. (Only available in the XNA-compatible 
            build.)
            </summary>
            <param name="width">The width of the view volume at the near view-plane.</param>
            <param name="height">The height of the view volume at the near view-plane.</param>
            <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
            <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
            <returns>The right-handed, perspective projection matrix.</returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            In contrast to all preceding coordinate spaces (model space, world space, view space) the 
            projection space is left-handed! This is necessary because DirectX uses a left-handed 
            clip space.
            </para>
            <para>
            In the projection space the x and y-coordinates range from −1 to 1, and the z-coordinates
            range from 0 (near) to 1 (far).
            </para>
            <para>
            <strong>Infinite Projections:</strong><br/>
            <paramref name="zFar"/> can be set to <see cref="F:System.Single.PositiveInfinity"/> to create an
            <i>infinite projection</i> where the far clip plane is at infinity.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A parameter is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="zNear"/> is greater than or equal to <paramref name="zFar"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view. (Only 
            available in the XNA-compatible build.)
            </summary>
            <param name="fieldOfViewY">The vertical field of view.</param>
            <param name="aspectRatio">The aspect ratio (width / height).</param>
            <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
            <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
            <returns>
            The right-handed, perspective projection matrix.
            </returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            In contrast to all preceding coordinate spaces (model space, world space, view space) the
            projection space is left-handed! This is necessary because DirectX uses a left-handed
            clip space.
            </para>
            <para>
            In the projection space the x and y-coordinates range from −1 to 1, and the z-coordinates
            range from 0 (near) to 1 (far).
            </para>
            <para>
            <strong>Infinite Projections:</strong><br/>
            <paramref name="zFar"/> can be set to <see cref="F:System.Single.PositiveInfinity"/> to create an
            <i>infinite projection</i> where the far clip plane is at infinity.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fieldOfViewY"/> is not between 0 and π radians (0° and 180°),
            <paramref name="aspectRatio"/> is negative or 0, <paramref name="zNear"/> is negative or 0,
            or <paramref name="zFar"/> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="zNear"/> is greater than or equal to <paramref name="zFar"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Matrix44F.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a customized, right-handed, perspective projection matrix. (Only available in the 
            XNA-compatible build.)
            </summary>
            <param name="left">The minimum x-value of the view volume at the near view plane.</param>
            <param name="right">The maximum x-value of the view volume at the near view plane.</param>
            <param name="bottom">The minimum y-value of the view volume at the near view plane.</param>
            <param name="top">The maximum y-value of the view volume at the near view plane.</param>
            <param name="zNear">
            The minimum z-value of the view volume. (Distance of the near view plane.)
            </param>
            <param name="zFar">
            The maximum z-value of the view volume. (Distance of the far view plane.)
            </param>
            <returns>
            The customized, right-handed, perspective projection matrix.
            </returns>
            <remarks>
            <para>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            In contrast to all preceding coordinate spaces (model space, world space, view space) the
            projection space is left-handed! This is necessary because DirectX uses a left-handed
            clip space.
            </para>
            <para>
            In the projection space the x and y-coordinates range from −1 to 1, and the z-coordinates
            range from 0 (near) to 1 (far).
            </para>
            <para>
            <strong>Infinite Projections:</strong><br/>
            <paramref name="zFar"/> can be set to <see cref="F:System.Single.PositiveInfinity"/> to create an
            <i>infinite projection</i> where the far clip plane is at infinity.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="zNear"/> or <paramref name="zFar"/> is negative or 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="left"/> is equal to <paramref name="right"/>,
            <paramref name="bottom"/> is equal to <paramref name="top"/>, or 
            <paramref name="zNear"/> is greater than or equal to <paramref name="zFar"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.MatrixD">
            <summary>
            Defines an m x n matrix (double-precision).
            </summary>
            <remarks>
            <para>
            All indices are zero-based. The first index is the row, the second is the column:
            <code>
            [0,0] [0,1] [0,2] ...
            [1,0] [1,1] [1,2] ...
            [2,0] [2,1] [2,2] ...
            ...   ...   ...   ...
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Item(System.Int32)">
            <overloads>
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            </overloads>
            
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The element at <paramref name="index"/>.</value>
            <remarks>
            The matrix elements are in row-major order.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <value>The element at the specified row and column.</value>
            <remarks>
            The indices are zero-based: [0,0] is the first element, [2,2] is the last element.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The index [<paramref name="row"/>, <paramref name="column"/>] is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Determinant">
            <summary>
            Returns the determinant of this matrix.
            </summary>
            <value>The determinant of this matrix.</value>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            Matrix is not a square matrix.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Inverse">
            <summary>
            Returns the inverse or pseudo-inverse of this matrix.
            </summary>
            <value>The inverse or pseudo-inverse of this matrix.</value>
            <remarks>
            <para>
            The property does not change this instance. To invert this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.MatrixD.Invert"/>.
            </para>
            <para>
            If this matrix is square, the inverse is returned; otherwise the pseudo-inverse.
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.IsNaN">
            <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Double.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if a component of the vector is <see cref="F:System.Double.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.IsSquare">
            <summary>
            Gets a value indicating whether this matrix is a square matrix (number of rows is equal to 
            number of columns).
            </summary>
            <value>
            <see langword="true"/> if this matrix is a square matrix; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
            <value>
            <see langword="true"/> if this matrix is symmetric; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The matrix elements are compared for equality - no tolerance value to handle numerical
            errors is used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Norm1">
            <summary>
            Gets the one norm of this matrix.
            </summary>
            <value>The one norm of this matrix.</value>
            <remarks>
            The one norm is the maximum column sum.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.NormFrobenius">
            <summary>
            Gets the Frobenius norm of this matrix.
            </summary>
            <value>The Frobenius norm of this matrix.</value>
            <remarks>
            The Frobenius norm is the square root of the sum of squares of all elements.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.NormInfinity">
            <summary>
            Gets the infinity norm of this matrix.
            </summary>
            <value>The infinity norm of this matrix.</value>
            <remarks>
            The infinity norm is the maximum row sum.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfColumns">
            <summary>
            Gets the number of columns <i>n</i>.
            </summary>
            <value>The number of columns <i>n</i>.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfRows">
            <summary>
            Gets the number of rows <i>m</i>.
            </summary>
            <value>The number of rows <i>m</i>.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Trace">
            <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
            <value>The matrix trace.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixD.Transposed">
            <summary>
            Returns the transposed of this matrix.
            </summary>
            <returns>The transposed of this matrix.</returns>
            <remarks>
            The property does not change this instance. To transpose this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.MatrixD.Transpose"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> class with 4 x 4 matrix elements.
            </summary>
            <remarks>
            <strong>Note:</strong> This constructor is used for serialization. Normally, the other 
            constructors should be used.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor(System.Int32,System.Int32)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> class.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <remarks>
            All matrix elements are set to 0.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="numberOfRows"/> or <paramref name="numberOfColumns"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> class.
            Each element is set to <paramref name="value"/>.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="value">The initial value for the matrix elements.</param>
            <remarks>
            All matrix elements are set to <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor(System.Int32,System.Int32,System.Double[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> class.
            </summary>
            <param name="numberOfRows">The number of rows <i>m</i>.</param>
            <param name="numberOfColumns">The number of columns <i>n</i>.</param>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than <i>m</i> x <i>n</i> elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> class.
            </summary>
            <param name="numberOfRows">The number of rows <i>m</i>.</param>
            <param name="numberOfColumns">The number of columns <i>n</i>.</param>
            <param name="elements">The list with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="elements"/> has less than <i>m</i> x <i>n</i> elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> class.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <remarks>
            The matrix will have the same dimensions <i>m</i> x <i>n</i> as <paramref name="elements"/>.
            </remarks>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.#ctor(System.Double[][])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> class.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <remarks>
            <paramref name="elements"/>.Length determines the number of rows. 
            <paramref name="elements"/>[0].Length determines the number of columns
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            An array in <paramref name="elements"/> has less elements than the first array in 
            <paramref name="elements"/>.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> or the arrays in elements[0] must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Equals(DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToString">
            <overloads>
            <summary>
            Returns the string representation of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this matrix.
            </summary>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this matrix using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetSchema">
            <summary>
            This property is reserved, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class 
            instead.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is 
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by
            the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_UnaryNegation(DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Negate(DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Addition(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix1"/> or <paramref name="matrix2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Add(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix1"/> or <paramref name="matrix2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Subtraction(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="minuend"/> or <paramref name="subtrahend"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Subtract(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="minuend"/> or <paramref name="subtrahend"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Multiply(DigitalRune.Mathematics.Algebra.MatrixD,System.Double)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix and a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="scalar">The scalar.</param>
            <param name="matrix">The matrix.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Multiply(System.Double,DigitalRune.Mathematics.Algebra.MatrixD)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Multiply(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix1"/> or <paramref name="matrix2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The matrix dimensions are not suitable for a matrix multiplication.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Multiply(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Multiply(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> or <paramref name="vector"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The matrix and vector dimensions are not suitable for multiplication.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Multiply(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> or <paramref name="vector"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The matrix and vector dimensions are not suitable for multiplication.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Division(DigitalRune.Mathematics.Algebra.MatrixD,System.Double)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Divide(DigitalRune.Mathematics.Algebra.MatrixD,System.Double)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Equality(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Tests if two matrices are equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the matrix dimensions and the corresponding elements of the matrices are 
            compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Inequality(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Tests if two matrices are not equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixD)~System.Double[0:,0:]">
            <overloads>
            <summary>
            Converts a matrix to another data type.
            </summary>
            </overloads>
            
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> to a 2-dimensional 
            <see langword="double"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToArray2D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> to a 2-dimensional <see langword="double"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixD)~System.Double[][]">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> to jagged 
            <see langword="double"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToArrayJagged">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> to a jagged <see langword="double"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixD)~DigitalRune.Mathematics.Algebra.Matrix22D">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="matrix"/> is not 2x2 matrix.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToMatrix22D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">
            This matrix is not 2x2 matrix.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixD)~DigitalRune.Mathematics.Algebra.Matrix33D">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="matrix"/> is not 3x3 matrix.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToMatrix33D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">
            The matrix is not 3x3 matrix.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixD)~DigitalRune.Mathematics.Algebra.Matrix44D">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="matrix"/> is not 4x4 matrix.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToMatrix44D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">
            This matrix is not 4x4 matrix.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixD)~DigitalRune.Mathematics.Algebra.MatrixF">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToMatrixF">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Absolute">
            <overloads>
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ClampToZero(System.Double)">
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetColumn(System.Int32)">
            <summary>
            Gets the column with the given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The column with the given index.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Sets a column.
            </summary>
            <param name="index">The index of the column.</param>
            <param name="columnVector">The column vector.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index"/> is out of range or <paramref name="columnVector"/> has to few
            elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="columnVector"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetRow(System.Int32)">
            <summary>
            Gets the row with the given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The row with the given index.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Sets a row.
            </summary>
            <param name="index">The index of the row.</param>
            <param name="rowVector">The row vector.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index"/> is out of range or <paramref name="rowVector"/> has to few
            elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="rowVector"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetMinor(System.Int32,System.Int32)">
            <summary>
            Gets the minor matrix.
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <returns>The minor matrix.</returns>
            <remarks>
            The minor matrix is built by removing the given <paramref name="row"/> and the given
            <paramref name="column"/>.
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            Cannot get the minor matrix of a 1x1 matrix.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="row"/> or <paramref name="column"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetSubmatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <overloads>
            <summary>
            Gets a submatrix of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Gets a submatrix of this matrix.
            </summary>
            <param name="startRow">The index of the start row.</param>
            <param name="endRow">The index of the end row (included in the submatrix).</param>
            <param name="startColumn">The index of the start column.</param>
            <param name="endColumn">The index of the end column (included in the submatrix).</param>
            <returns>The extracted submatrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startRow"/> is greater than <paramref name="endRow"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startColumn"/> is greater than <paramref name="endColumn"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startRow"/>, <paramref name="endRow"/>, <paramref name="startColumn"/>, or 
            <paramref name="endColumn"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetSubmatrix(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Gets a submatrix of this matrix.
            </summary>
            <param name="startRow">The index of the start row.</param>
            <param name="endRow">The index of the end row (included in the submatrix).</param>
            <param name="columns">The indices of the columns.</param>
            <returns>The extracted submatrix.</returns>
            <remarks>
            The index array has to be interpreted like this: For example, <c>columns[0] = 5</c> means
            that column 5 of this matrix will be copied into column 0 of the submatrix.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startRow"/> is greater than <paramref name="endRow"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startRow"/> or <paramref name="endRow"/> is out of range.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            An index in <paramref name="columns"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetSubmatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Gets a submatrix of this matrix.
            </summary>
            <param name="rows">The indices of the rows.</param>
            <param name="startColumn">The index of the start column.</param>
            <param name="endColumn">The index of the end column (included in the submatrix).</param>
            <returns>The extracted submatrix.</returns>
            <remarks>
            The index array has to be interpreted like this: For example, <c>row[0] = 5</c> means that
            row 5 of this matrix will be copied into row 0 of the submatrix.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startColumn"/> is greater than <paramref name="endColumn"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startColumn"/> or <paramref name="endColumn"/> is out of range.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            An index in <paramref name="rows"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.GetSubmatrix(System.Int32[],System.Int32[])">
            <summary>
            Gets a submatrix of this matrix.
            </summary>
            <param name="rows">The indices of the rows.</param>
            <param name="columns">The indices of the columns.</param>
            <returns>The extracted submatrix.</returns>
            <remarks>
            The index array has to be interpreted like this: For example, <c>columns[0] = 5</c> means
            that column 5 of this matrix will be copied into column 0 of the submatrix.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            An index in <paramref name="rows"/> or <paramref name="columns"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Invert">
            <summary>
            Inverts the matrix.
            </summary>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.TryInvert">
            <summary>
            Inverts the matrix if it is invertible.
            </summary>
            <returns>
            <see langword="true"/> if the matrix is invertible; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            This method is the equivalent to <see cref="M:DigitalRune.Mathematics.Algebra.MatrixD.Invert"/>, except that no exceptions are thrown.
            The return value indicates whether the operation was successful.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Set(DigitalRune.Mathematics.Algebra.MatrixD)">
            <overloads>
            <summary>
            Sets the elements of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Sets the elements of this matrix.
            </summary>
            <param name="matrix">The matrix from which the elements are copied.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows or columns of the matrices do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Set(System.Double)">
            <summary>
            Sets the matrix elements to the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Set(System.Double[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Sets the matrix elements to the values of the array.
            </summary>
            <param name="elements">The elements array.</param>
            <param name="order">The order of the matrix elements in the array.</param>
            <remarks>
            <paramref name="elements"/> can have more elements than this instance. The exceeding
            elements are ignored.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> must have at least
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfRows"/> * <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfColumns"/> elements.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Set(System.Collections.Generic.IList{System.Double},DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Sets the matrix elements to the values of the list.
            </summary>
            <param name="elements">The elements list.</param>
            <param name="order">The order of the matrix elements in the list.</param>
            <remarks>
            <paramref name="elements"/> can have more elements than this instance. The exceeding 
            elements are ignored.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="elements"/> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfRows"/>*<see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfColumns"/> elements.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Set(System.Double[][])">
            <summary>
            Sets the matrix elements to the values of the array.
            </summary>
            <param name="elements">The elements array.</param>
            <remarks>
            <paramref name="elements"/> can have more elements than this instance. The exceeding 
            elements are ignored.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfRows"/> * <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfColumns"/> elements.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Set(System.Double[0:,0:])">
            <summary>
            Sets the matrix elements to the values of the array.
            </summary>
            <param name="elements">The elements array.</param>
            <remarks>
            <paramref name="elements"/> can have more elements than this instance. The exceeding 
            elements are ignored.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfRows"/> x <see cref="P:DigitalRune.Mathematics.Algebra.MatrixD.NumberOfColumns"/> elements.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.SetIdentity">
            <summary>
            Sets this matrix to an identity matrix.
            </summary>
            <remarks>
            The elements in the main diagonal are set to <c>1</c>. All other elements are set to 
            <c>0</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.SetSubmatrix(System.Int32,System.Int32,DigitalRune.Mathematics.Algebra.MatrixD)">
            <overloads>
            <summary>
            Sets a submatrix of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Sets a submatrix of this matrix.
            </summary>
            <param name="submatrix">The submatrix.</param>
            <param name="startRow">The index of the start row in this matrix.</param>
            <param name="startColumn">The index of the start column in this matrix.</param>
            <remarks>
            The elements of the submatrix are copied into this matrix, beginning at the position 
            [startRow, startColumn].
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="startRow"/>, <paramref name="startColumn"/> or the dimensions of the 
            submatrix are to high, so that the submatrix does not fit into this matrix.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startRow"/> or <paramref name="startColumn"/> out of range.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="submatrix"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to an array of <see langword="double"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the array.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to a list of <see langword="double"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the list.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Transpose">
            <summary>
            Transposes this matrix.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.Absolute(DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
            <overloads>
            <summary>
            Determines whether two matrices are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two matrices are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>); otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix1"/> or <paramref name="matrix2"/> is <see langword="null"/>.
            </exception>
            <remarks>
            The dimensions of the two matrices are compared and the matrices are compared 
            component-wise. If the differences of the components are less than 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD,System.Double)">
            <summary>
            Determines whether two matrices are equal (regarding a specific tolerance).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix1"/> or <paramref name="matrix2"/> is <see langword="null"/>.
            </exception>
            <remarks>
            The dimensions of the two matrices are compared and the matrices are compared 
            component-wise. If the differences of the components are less than 
            <paramref name="epsilon"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.CheckMatrixDimensions(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Throws exceptions if the matrix dimensions do not match.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ClampToZero(DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The matrix with small elements clamped to zero.</returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.ClampToZero(DigitalRune.Mathematics.Algebra.MatrixD,System.Double)">
            <overloads>
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            </overloads>
            
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The matrix with small elements clamped to zero.</returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.CreateIdentity(System.Int32,System.Int32)">
            <summary>
            Creates an identity matrix.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <returns>An identity matrix.</returns>
            <remarks>
            Elements in the main diagonal are set to <c>1</c>. Other elements are set to <c>0</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Solves the linear set of equations A * X = B.
            </summary>
            <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
            <param name="matrixB">
            The matrix B with the same number of rows as A and any number of columns.
            </param>
            <returns>The matrix X.</returns>
            <remarks>
            If A is a square matrix, the X contains the solutions. If A is not a square matrix, the 
            least squares solutions is returned.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> or <paramref name="matrixB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows in <paramref name="matrixA"/> must be greater than or equal to the number 
            of columns.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A does not have full rank.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixD.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Solves the linear set of equations A * x = b.
            </summary>
            <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
            <param name="vectorB">The column vector b with as many rows as A.</param>
            <returns>The vector x.</returns>
            <remarks>
            If A is a square matrix, the x contains the solutions. If A is not a square matrix, the 
            least squares solutions is returned.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vectorB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows in matrix A must be greater than or equal to the number of columns.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A does not have full rank.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.CholeskyDecompositionD">
            <summary>
            Computes the Cholesky Decomposition of a matrix (double-precision).
            </summary>
            <remarks>
            <para>
            The Cholesky Decomposition can be used on a square matrix A that is symmetric and positive 
            definite (SPD).
            </para>
            <para>
            Positive definite means that: v<sup>T</sup> * A * v > 0 for all vectors v. (The equivalent 
            interpretation is that A has all positive eigenvalues.)
            </para>
            <para>
            The matrix is decomposed into a lower triangular matrix L so that A = L * L<sup>T</sup>
            </para>
            <para>
            If the matrix is not symmetric and positive definite, L will be a partial decomposition and
            the flag <see cref="P:DigitalRune.Mathematics.Algebra.CholeskyDecompositionD.IsSymmetricPositiveDefinite"/> is set to <see langword="false"/>.
            </para>
            <para>
            Applications:
            <list type="bullet">
            <item>
            Cholesky Decomposition can be used to solve linear equations for matrices that are SPD. This 
            method is about a factor of 2 faster than other methods.
            </item>
            <item>It can be used to determine efficiently if a matrix is SPD.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.CholeskyDecompositionD.IsSymmetricPositiveDefinite">
            <summary>
            Gets a value indicating whether the original matrix is symmetric and positive definite.
            </summary>
            <value>
            <see langword="true"/> if the original matrix is symmetric and positive definite; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.CholeskyDecompositionD.L">
            <summary>
            Gets the lower triangular matrix L. (This property returns the internal matrix, not a copy.)
            </summary>
            <value>The lower triangular matrix L.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.CholeskyDecompositionD.#ctor(DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Creates the Cholesky decomposition of the given matrix.
            </summary>
            <param name="matrixA">The square matrix A.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.CholeskyDecompositionD.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Solves the equation <c>A * X = B</c>.
            </summary>
            <param name="matrixB">The matrix B with as many rows as A and any number of columns.</param>
            <returns>X, so that <c>A * X = B</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A is not symmetric and positive definite.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.CholeskyDecompositionF">
            <summary>
            Computes the Cholesky Decomposition of a matrix (single-precision).
            </summary>
            <remarks>
            <para>
            The Cholesky Decomposition can be used on a square matrix A that is symmetric and positive 
            definite (SPD).
            </para>
            <para>
            Positive definite means that: v<sup>T</sup> * A * v > 0 for all vectors v. (The equivalent 
            interpretation is that A has all positive eigenvalues.)
            </para>
            <para>
            The matrix is decomposed into a lower triangular matrix L so that A = L * L<sup>T</sup>
            </para>
            <para>
            If the matrix is not symmetric and positive definite, L will be a partial decomposition and
            the flag <see cref="P:DigitalRune.Mathematics.Algebra.CholeskyDecompositionF.IsSymmetricPositiveDefinite"/> is set to <see langword="false"/>.
            </para>
            <para>
            Applications:
            <list type="bullet">
            <item>
            Cholesky Decomposition can be used to solve linear equations for matrices that are SPD. This 
            method is about a factor of 2 faster than other methods.
            </item>
            <item>It can be used to determine efficiently if a matrix is SPD.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.CholeskyDecompositionF.IsSymmetricPositiveDefinite">
            <summary>
            Gets a value indicating whether the original matrix is symmetric and positive definite.
            </summary>
            <value>
            <see langword="true"/> if the original matrix is symmetric and positive definite; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.CholeskyDecompositionF.L">
            <summary>
            Gets the lower triangular matrix L. (This property returns the internal matrix, not a copy.)
            </summary>
            <value>The lower triangular matrix L.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.CholeskyDecompositionF.#ctor(DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Creates the Cholesky decomposition of the given matrix.
            </summary>
            <param name="matrixA">The square matrix A.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.CholeskyDecompositionF.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Solves the equation <c>A * X = B</c>.
            </summary>
            <param name="matrixB">The matrix B with as many rows as A and any number of columns.</param>
            <returns>X, so that <c>A * X = B</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A is not symmetric and positive definite.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionD">
            <summary>
            Computes the eigenvalues and eigenvectors of a real square matrix A (double-precision).
            </summary>
            <remarks>
            <para>
            If the matrix A is symmetric, then A = V * D * V<sup>T</sup> where the eigenvalue matrix D is 
            a diagonal matrix and the eigenvector matrix V is orthogonal.
            </para>
            <para>
            If A is not symmetric, then the eigenvalue matrix D is block diagonal with the real
            eigenvalues in 1 x 1 blocks and any complex eigenvalues (λ + i*μ) in 2 x 2 blocks
            ((λ, μ),(-μ, λ)). The columns of V represent the eigenvectors in the sense that
            A * V = V * D. The matrix V may be badly conditioned or even singular; so if the inverse of V
            can be computed depends on the condition number of V. (The condition number can be checked
            with <see cref="T:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD"/>.)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionD.ImaginaryEigenvalues">
            <summary>
            Gets the vector of the imaginary parts of the eigenvalues. 
            </summary>
            <value>The vector of the imaginary parts of the eigenvalues.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionD.D">
            <summary>
            Gets the block diagonal eigenvalue matrix D. (This property returns the internal matrix, 
            not a copy.)
            </summary>
            <value>The block diagonal eigenvalue matrix D.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionD.V">
            <summary>
            Gets the eigenvector matrix V. (This property returns the internal matrix, 
            not a copy.)
            </summary>
            <value>The eigenvector matrix V.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionD.RealEigenvalues">
            <summary>
            Gets the vector of the real parts of the eigenvalues (the diagonal of D). 
            </summary>
            <value>The vector of the real parts of the eigenvalues.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionD.#ctor(DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Creates the eigenvalue decomposition of the given matrix.
            </summary>
            <param name="matrixA">The square matrix A.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="matrixA"/> is non-square (rectangular).
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionF">
            <summary>
            Computes the eigenvalues and eigenvectors of a real square matrix A (single-precision).
            </summary>
            <remarks>
            <para>
            If the matrix A is symmetric, then A = V * D * V<sup>T</sup> where the eigenvalue matrix D is 
            a diagonal matrix and the eigenvector matrix V is orthogonal.
            </para>
            <para>
            If A is not symmetric, then the eigenvalue matrix D is block diagonal with the real
            eigenvalues in 1 x 1 blocks and any complex eigenvalues (λ + i*μ) in 2 x 2 blocks
            ((λ, μ),(-μ, λ)). The columns of V represent the eigenvectors in the sense that
            A * V = V * D. The matrix V may be badly conditioned or even singular; so if the inverse of V
            can be computed depends on the condition number of V. (The condition number can be checked
            with <see cref="T:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF"/>.)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionF.ImaginaryEigenvalues">
            <summary>
            Gets the vector of the imaginary parts of the eigenvalues. 
            </summary>
            <value>The vector of the imaginary parts of the eigenvalues.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionF.D">
            <summary>
            Gets the block diagonal eigenvalue matrix D. (This property returns the internal matrix, 
            not a copy.)
            </summary>
            <value>The block diagonal eigenvalue matrix D.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionF.V">
            <summary>
            Gets the eigenvector matrix V. (This property returns the internal matrix, 
            not a copy.)
            </summary>
            <value>The eigenvector matrix V.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionF.RealEigenvalues">
            <summary>
            Gets the vector of the real parts of the eigenvalues (the diagonal of D). 
            </summary>
            <value>The vector of the real parts of the eigenvalues.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionF.#ctor(DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Creates the eigenvalue decomposition of the given matrix.
            </summary>
            <param name="matrixA">The square matrix A.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="matrixA"/> is non-square (rectangular).
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.LUDecompositionD">
            <summary>
            Computes the LU Decomposition of a matrix (double-precision).
            </summary>
            <remarks>
            <para>The LU Decomposition computes a unit lower triangular matrix L and an upper triangular
            matrix U for a matrix A so that <c>A' = L * U</c> where A' is a row-permutation of A.
            </para>
            <para> 
            The LU Decomposition with pivoting always exists, even if the matrix is singular. 
            </para>
            <para>
            Application: LU Decomposition is the preferred way to solve a linear set of equations. 
            This will fail if the matrix A is singular. 
            </para>
            <para>
            Use QR Decomposition for rectangular matrices A with m ≥ n.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionD.Determinant">
            <summary>
            Gets the determinant of matrix A.
            </summary>
            <value>The determinant of matrix A.</value>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            Matrix A is not square.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionD.IsNumericallySingular">
            <summary>
            Gets a value indicating whether the matrix U is numerically singular.
            </summary>
            <value>
            <see langword="true"/> if this the matrix U is numerically singular; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <para>If U is singular A is singular too.</para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionD.L">
            <summary>
            Gets the lower triangular matrix L. (This property returns the internal matrix, 
            not a copy.)
            </summary>
            <value>The lower triangular matrix L.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionD.U">
            <summary>
            Gets the upper triangular matrix U. (This property returns the internal matrix, 
            not a copy.)
            </summary>
            <value>The upper triangular matrix U.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionD.PivotPermutationVector">
            <summary>
            Gets the pivot permutation vector. (This property returns the internal array, 
            not a copy.)
            </summary>
            <value>The pivot permutation vector.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.LUDecompositionD.#ctor(DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Creates the LU decomposition of the given matrix.
            </summary>
            <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows must be greater than or equal to the number of columns.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.LUDecompositionD.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Solves the equation <c>A * X = B</c>.
            </summary>
            <param name="matrixB">The matrix B with as many rows as A and any number of columns.</param>
            <returns>X, so that <c>A * X = B</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A is numerically singular.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.LUDecompositionF">
            <summary>
            Computes the LU Decomposition of a matrix (single-precision).
            </summary>
            <remarks>
            <para>The LU Decomposition computes a unit lower triangular matrix L and an upper triangular
            matrix U for a matrix A so that <c>A' = L * U</c> where A' is a row-permutation of A.
            </para>
            <para> 
            The LU Decomposition with pivoting always exists, even if the matrix is singular. 
            </para>
            <para>
            Application: LU Decomposition is the preferred way to solve a linear set of equations. 
            This will fail if the matrix A is singular. 
            </para>
            <para>
            Use QR Decomposition for rectangular matrices A with m ≥ n.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionF.Determinant">
            <summary>
            Gets the determinant of matrix A.
            </summary>
            <value>The determinant of matrix A.</value>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            Matrix A is not square.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionF.IsNumericallySingular">
            <summary>
            Gets a value indicating whether the matrix U is numerically singular.
            </summary>
            <value>
            <see langword="true"/> if this the matrix U is numerically singular; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <para>If U is singular A is singular too.</para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionF.L">
            <summary>
            Gets the lower triangular matrix L. (This property returns the internal matrix, 
            not a copy.)
            </summary>
            <value>The lower triangular matrix L.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionF.U">
            <summary>
            Gets the upper triangular matrix U. (This property returns the internal matrix, 
            not a copy.)
            </summary>
            <value>The upper triangular matrix U.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.LUDecompositionF.PivotPermutationVector">
            <summary>
            Gets the pivot permutation vector. (This property returns the internal array, 
            not a copy.)
            </summary>
            <value>The pivot permutation vector.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.LUDecompositionF.#ctor(DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Creates the LU decomposition of the given matrix.
            </summary>
            <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows must be greater than or equal to the number of columns.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.LUDecompositionF.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Solves the equation <c>A * X = B</c>.
            </summary>
            <param name="matrixB">The matrix B with as many rows as A and any number of columns.</param>
            <returns>X, so that <c>A * X = B</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A is numerically singular.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.QRDecompositionD">
            <summary>
            Computes the QR Decomposition of a matrix (double-precision).
            </summary>
            <remarks>
            <para>
            For an m x n matrix A with m ≥ n the QR Decomposition computes an orthogonal matrix Q and a 
            upper triangular matrix R so that A = Q * R. 
            </para>
            <para> 
            The QR Decomposition always exists, even if the matrix does not have full rank. 
            </para>
            <para>
            Application: The primary use of QR Decomposition is in computing the least squares solution
            for non-square sets of linear equations. This will fail if the matrix does not have full rank.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionD.HasNumericallyFullRank">
            <summary>
            Gets a value indicating whether the matrix R has full rank (numerically).
            </summary>
            <value>
            <see langword="true"/> if the matrix R has full rank (numerically); otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            If R has full rank, A has full column rank, i. e. all column vectors are linearly 
            independent.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionD.H">
            <summary>
            Gets the matrix H with the Householder vectors. (This property returns the internal matrix, 
            not a copy.)
            </summary>
            <value>The lower trapezoidal matrix whose columns define the reflections.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionD.Q">
            <summary>
            Gets the orthogonal matrix Q. (This property returns the internal matrix, not a copy.)
            </summary>
            <value>The orthogonal matrix Q.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionD.R">
            <summary>
            Gets the upper triangular matrix R. (This property returns the internal matrix, not a copy.)
            </summary>
            <value>The upper triangular matrix R.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QRDecompositionD.#ctor(DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Creates the QR decomposition of the given matrix.
            </summary>
            <param name="matrixA">
            The matrix A. (Can be rectangular. NumberOfRows must be ≥ NumberOfColumns.)
            </param>
            <remarks>
            The QR decomposition is computed by Householder reflections.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows must be greater than or equal to the number of columns.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QRDecompositionD.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Returns the least squares solution for the equation <c>A * X = B</c>.
            </summary>
            <param name="matrixB">The matrix B with as many rows as A and any number of columns.</param>
            <returns>X with the least squares solution.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A does not have full rank.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.QRDecompositionF">
            <summary>
            Computes the QR Decomposition of a matrix (single-precision).
            </summary>
            <remarks>
            <para>
            For an m x n matrix A with m ≥ n the QR Decomposition computes an orthogonal matrix Q and a 
            upper triangular matrix R so that A = Q * R. 
            </para>
            <para> 
            The QR Decomposition always exists, even if the matrix does not have full rank. 
            </para>
            <para>
            Application: The primary use of QR Decomposition is in computing the least squares solution
            for non-square sets of linear equations. This will fail if the matrix does not have full rank.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionF.HasNumericallyFullRank">
            <summary>
            Gets a value indicating whether the matrix R has full rank (numerically).
            </summary>
            <value>
            <see langword="true"/> if the matrix R has full rank (numerically); otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            If R has full rank, A has full column rank, i. e. all column vectors are linearly 
            independent.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionF.H">
            <summary>
            Gets the matrix H with the Householder vectors. (This property returns the internal matrix, 
            not a copy.)
            </summary>
            <value>The lower trapezoidal matrix whose columns define the reflections.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionF.Q">
            <summary>
            Gets the orthogonal matrix Q. (This property returns the internal matrix, not a copy.)
            </summary>
            <value>The orthogonal matrix Q.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QRDecompositionF.R">
            <summary>
            Gets the upper triangular matrix R. (This property returns the internal matrix, not a copy.)
            </summary>
            <value>The upper triangular matrix R.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QRDecompositionF.#ctor(DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Creates the QR decomposition of the given matrix.
            </summary>
            <param name="matrixA">
            The matrix A. (Can be rectangular. NumberOfRows must be ≥ NumberOfColumns.)
            </param>
            <remarks>
            The QR decomposition is computed by Householder reflections.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows must be greater than or equal to the number of columns.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QRDecompositionF.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Returns the least squares solution for the equation <c>A * X = B</c>.
            </summary>
            <param name="matrixB">The matrix B with as many rows as A and any number of columns.</param>
            <returns>X with the least squares solution.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A does not have full rank.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD">
            <summary>
            Computes the Singular Value Decomposition (SVD) of a matrix (double-precision).
            </summary>
            <remarks>
            <para>
            For an m x n matrix A with m ≥ n, the SVD computes the matrices U, S and V so that 
            <c>A = U * S * V<sup>T</sup></c>.
            </para>
            <para>
            U is an m x n orthogonal matrix. S is an n x n diagonal matrix. V is is a n x n orthogonal
            matrix.
            </para>
            <para>
            The diagonal elements of S are the <i>singular values</i>. The singular values are positive 
            or zero and ordered so that S[0, 0] ≥ S[1, 1] ≥ ...
            </para>
            <para>
            The singular value decomposition always exists.
            </para>
            <para>
            Applications: The matrix condition number and the effective numerical rank can be computed
            from this decomposition.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.ConditionNumber">
            <summary>
            Gets the condition number of A.
            </summary>
            <value>The condition number of A.</value>
            <remarks>
            The condition number is the ratio of the largest (in magnitude) of the singular values to
            the smallest singular value. The matrix is singular if the condition number is infinite and 
            the matrix is ill-conditioned if its condition number is too large, i.e. if the reciprocal
            approaches the machine's floating-point precision (less than 10^-6 for 
            <see langword="double"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.S">
            <summary>
            Gets the diagonal matrix S with the singular values. (This property returns the internal 
            matrix, not a copy.)
            </summary>
            <value>The diagonal matrix S with the singular values.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.U">
            <summary>
            Gets the matrix U with the left singular vectors. (This property returns the internal
            matrix, not a copy.)
            </summary>
            <value>The matrix U with the left singular vectors.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.V">
            <summary>
            Gets the matrix V with the right singular vectors. (This property returns the internal 
            matrix, not a copy.)
            </summary>
            <value>The matrix V with the right singular vectors.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.Norm2">
            <summary>
            Gets the two norm of A.
            </summary>
            <value>The two norm of A.</value>
            <remarks>
            The two norm is equal to the first (largest) singular value.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.NumericalRank">
            <summary>
            Gets the effective numerical rank of A.
            </summary>
            <value>The effective numerical rank of A.</value>
            <remarks>
            Near-zero singular values are considered as zero. The rank is the number of singular values 
            greater than 0.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.SingularValues">
            <summary>
            Gets the vector of singular values (the diagonal of S). 
            </summary>
            <value>The vector of singular values.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.SingularValueDecompositionD.#ctor(DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Creates the singular value decomposition of the given matrix.
            </summary>
            <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows must be greater than or equal to the number of columns.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF">
            <summary>
            Computes the Singular Value Decomposition (SVD) of a matrix (single-precision).
            </summary>
            <remarks>
            <para>
            For an m x n matrix A with m ≥ n, the SVD computes the matrices U, S and V so that 
            <c>A = U * S * V<sup>T</sup></c>.
            </para>
            <para>
            U is an m x n orthogonal matrix. S is an n x n diagonal matrix. V is is a n x n orthogonal
            matrix.
            </para>
            <para>
            The diagonal elements of S are the <i>singular values</i>. The singular values are positive 
            or zero and ordered so that S[0, 0] ≥ S[1, 1] ≥ ...
            </para>
            <para>
            The singular value decomposition always exists.
            </para>
            <para>
            Applications: The matrix condition number and the effective numerical rank can be computed
            from this decomposition.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.ConditionNumber">
            <summary>
            Gets the condition number of A.
            </summary>
            <value>The condition number of A.</value>
            <remarks>
            The condition number is the ratio of the largest (in magnitude) of the singular values to
            the smallest singular value. The matrix is singular if the condition number is infinite and 
            the matrix is ill-conditioned if its condition number is too large, i.e. if the reciprocal
            approaches the machine's floating-point precision (less than 10^-6 for 
            <see langword="float"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.S">
            <summary>
            Gets the diagonal matrix S with the singular values. (This property returns the internal 
            matrix, not a copy.)
            </summary>
            <value>The diagonal matrix S with the singular values.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.U">
            <summary>
            Gets the matrix U with the left singular vectors. (This property returns the internal 
            matrix, not a copy.)
            </summary>
            <value>The matrix U with the left singular vectors.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.V">
            <summary>
            Gets the matrix V with the right singular vectors. (This property returns the internal 
            matrix, not a copy.)
            </summary>
            <value>The matrix V with the right singular vectors.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.Norm2">
            <summary>
            Gets the two norm of A.
            </summary>
            <value>The two norm of A.</value>
            <remarks>
            The two norm is equal to the first (largest) singular value.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.NumericalRank">
            <summary>
            Gets the effective numerical rank of A.
            </summary>
            <value>The effective numerical rank of A.</value>
            <remarks>
            Near-zero singular values are considered as zero. The rank is the number of singular values 
            greater than 0.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.SingularValues">
            <summary>
            Gets the vector of singular values (the diagonal of S). 
            </summary>
            <value>The vector of singular values.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.SingularValueDecompositionF.#ctor(DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Creates the singular value decomposition of the given matrix.
            </summary>
            <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows must be greater than or equal to the number of columns.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.MatrixF">
            <summary>
            Defines an m x n matrix (single-precision).
            </summary>
            <remarks>
            <para>
            All indices are zero-based. The first index is the row, the second is the column:
            <code>
            [0,0] [0,1] [0,2] ...
            [1,0] [1,1] [1,2] ...
            [2,0] [2,1] [2,2] ...
            ...   ...   ...   ...
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Item(System.Int32)">
            <overloads>
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            </overloads>
            
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The element at <paramref name="index"/>.</value>
            <remarks>
            The matrix elements are in row-major order.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <value>The element at the specified row and column.</value>
            <remarks>
            The indices are zero-based: [0,0] is the first element, [2,2] is the last element.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The index [<paramref name="row"/>, <paramref name="column"/>] is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Determinant">
            <summary>
            Returns the determinant of this matrix.
            </summary>
            <value>The determinant of this matrix.</value>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            Matrix is not a square matrix.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Inverse">
            <summary>
            Returns the inverse or pseudo-inverse of this matrix.
            </summary>
            <value>The inverse or pseudo-inverse of this matrix.</value>
            <remarks>
            <para>
            The property does not change this instance. To invert this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.MatrixF.Invert"/>.
            </para>
            <para>
            If this matrix is square, the inverse is returned; otherwise the pseudo-inverse.
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.IsNaN">
            <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Single.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if a component of the vector is <see cref="F:System.Single.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.IsSquare">
            <summary>
            Gets a value indicating whether this matrix is a square matrix (number of rows is equal to 
            number of columns).
            </summary>
            <value>
            <see langword="true"/> if this matrix is a square matrix; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.IsSymmetric">
            <summary>
            Gets a value indicating whether this matrix is symmetric.
            </summary>
            <value>
            <see langword="true"/> if this matrix is symmetric; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The matrix elements are compared for equality - no tolerance value to handle numerical
            errors is used.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Norm1">
            <summary>
            Gets the one norm of this matrix.
            </summary>
            <value>The one norm of this matrix.</value>
            <remarks>
            The one norm is the maximum column sum.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.NormFrobenius">
            <summary>
            Gets the Frobenius norm of this matrix.
            </summary>
            <value>The Frobenius norm of this matrix.</value>
            <remarks>
            The Frobenius norm is the square root of the sum of squares of all elements.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.NormInfinity">
            <summary>
            Gets the infinity norm of this matrix.
            </summary>
            <value>The infinity norm of this matrix.</value>
            <remarks>
            The infinity norm is the maximum row sum.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfColumns">
            <summary>
            Gets the number of columns <i>n</i>.
            </summary>
            <value>The number of columns <i>n</i>.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfRows">
            <summary>
            Gets the number of rows <i>m</i>.
            </summary>
            <value>The number of rows <i>m</i>.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Trace">
            <summary>
            Gets the matrix trace (the sum of the diagonal elements).
            </summary>
            <value>The matrix trace.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.MatrixF.Transposed">
            <summary>
            Returns the transposed of this matrix.
            </summary>
            <returns>The transposed of this matrix.</returns>
            <remarks>
            The property does not change this instance. To transpose this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.MatrixF.Transpose"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> class with 4 x 4 matrix elements.
            </summary>
            <remarks>
            <strong>Note:</strong> This constructor is used for serialization. Normally, the other 
            constructors should be used.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor(System.Int32,System.Int32)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> class.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <remarks>
            All matrix elements are set to 0.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="numberOfRows"/> or <paramref name="numberOfColumns"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> class.
            Each element is set to <paramref name="value"/>.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="value">The initial value for the matrix elements.</param>
            <remarks>
            All matrix elements are set to <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor(System.Int32,System.Int32,System.Single[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> class.
            </summary>
            <param name="numberOfRows">The number of rows <i>m</i>.</param>
            <param name="numberOfColumns">The number of columns <i>n</i>.</param>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> has less than <i>m</i> x <i>n</i> elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Single},DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> class.
            </summary>
            <param name="numberOfRows">The number of rows <i>m</i>.</param>
            <param name="numberOfColumns">The number of columns <i>n</i>.</param>
            <param name="elements">The list with the initial values for the matrix elements.</param>
            <param name="order">The order of the matrix elements in <paramref name="elements"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="elements"/> has less than <i>m</i> x <i>n</i> elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> class.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <remarks>
            The matrix will have the same dimensions <i>m</i> x <i>n</i> as <paramref name="elements"/>.
            </remarks>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.#ctor(System.Single[][])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> class.
            </summary>
            <param name="elements">The array with the initial values for the matrix elements.</param>
            <remarks>
            <paramref name="elements"/>.Length determines the number of rows. 
            <paramref name="elements"/>[0].Length determines the number of columns
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            An array in <paramref name="elements"/> has less elements than the first array in 
            <paramref name="elements"/>.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> or the arrays in elements[0] must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Equals(DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToString">
            <overloads>
            <summary>
            Returns the string representation of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this matrix.
            </summary>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this matrix using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetSchema">
            <summary>
            This property is reserved, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class 
            instead.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is 
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by
            the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_UnaryNegation(DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Negate(DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The negated matrix.</returns>
            <remarks>
            Each element of the matrix is negated.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Addition(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix1"/> or <paramref name="matrix2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Add(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second Matrix.</param>
            <returns>The sum of the two matrices.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix1"/> or <paramref name="matrix2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Subtraction(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="minuend"/> or <paramref name="subtrahend"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Subtract(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="minuend">The first matrix (minuend).</param>
            <param name="subtrahend">The second matrix (subtrahend).</param>
            <returns>The difference of the two matrices.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="minuend"/> or <paramref name="subtrahend"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Multiply(DigitalRune.Mathematics.Algebra.MatrixF,System.Single)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix and a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="scalar">The scalar.</param>
            <param name="matrix">The matrix.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Multiply(System.Single,DigitalRune.Mathematics.Algebra.MatrixF)">
            <overloads>
            <summary>
            Multiplies a matrix by a scalar, matrix or vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element multiplied by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Multiply(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix1"/> or <paramref name="matrix2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The matrix dimensions are not suitable for a matrix multiplication.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Multiply(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The matrix with the product the two matrices.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Multiply(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> or <paramref name="vector"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The matrix and vector dimensions are not suitable for multiplication.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Multiply(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Multiplies a matrix with a column vector.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="vector">The column vector.</param>
            <returns>The resulting column vector.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> or <paramref name="vector"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The matrix and vector dimensions are not suitable for multiplication.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Division(DigitalRune.Mathematics.Algebra.MatrixF,System.Single)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Divide(DigitalRune.Mathematics.Algebra.MatrixF,System.Single)">
            <summary>
            Divides a matrix by a scalar.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar.</param>
            <returns>The matrix with each element divided by scalar.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Equality(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Tests if two matrices are equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the matrix dimensions and the corresponding elements of the matrices are 
            compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Inequality(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Tests if two matrices are not equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the matrices are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixF)~System.Single[0:,0:]">
            <overloads>
            <summary>
            Converts a matrix to another data type.
            </summary>
            </overloads>
            
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> to a 2-dimensional 
            <see langword="float"/> array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToArray2D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> to a 2-dimensional <see langword="float"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixF)~System.Single[][]">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> to jagged <see langword="float"/>
            array.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToArrayJagged">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> to a jagged <see langword="float"/> array.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixF)~DigitalRune.Mathematics.Algebra.Matrix22F">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="matrix"/> is not 2x2 matrix.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToMatrix22F">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">
            This matrix is not 2x2 matrix.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixF)~DigitalRune.Mathematics.Algebra.Matrix33F">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="matrix"/> is not 3x3 matrix.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToMatrix33F">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">
            The matrix is not 3x3 matrix.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Explicit(DigitalRune.Mathematics.Algebra.MatrixF)~DigitalRune.Mathematics.Algebra.Matrix44F">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="matrix"/> is not 4x4 matrix.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToMatrix44F">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">
            This matrix is not 4x4 matrix.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.op_Implicit(DigitalRune.Mathematics.Algebra.MatrixF)~DigitalRune.Mathematics.Algebra.MatrixD">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/>.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToMatrixD">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Absolute">
            <overloads>
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each matrix element to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ClampToZero(System.Single)">
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each matrix element is compared to zero. If the element is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetColumn(System.Int32)">
            <summary>
            Gets the column with the given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The column with the given index.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.SetColumn(System.Int32,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Sets a column.
            </summary>
            <param name="index">The index of the column.</param>
            <param name="columnVector">The column vector.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index"/> is out of range or <paramref name="columnVector"/> has to few
            elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="columnVector"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetRow(System.Int32)">
            <summary>
            Gets the row with the given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The row with the given index.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.SetRow(System.Int32,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Sets a row.
            </summary>
            <param name="index">The index of the row.</param>
            <param name="rowVector">The row vector.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index"/> is out of range or <paramref name="rowVector"/> has to few
            elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="rowVector"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetMinor(System.Int32,System.Int32)">
            <summary>
            Gets the minor matrix.
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <returns>The minor matrix.</returns>
            <remarks>
            The minor matrix is built by removing the given <paramref name="row"/> and the given
            <paramref name="column"/>.
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            Cannot get the minor matrix of a 1x1 matrix.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="row"/> or <paramref name="column"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetSubmatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <overloads>
            <summary>
            Gets a submatrix of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Gets a submatrix of this matrix.
            </summary>
            <param name="startRow">The index of the start row.</param>
            <param name="endRow">The index of the end row (included in the submatrix).</param>
            <param name="startColumn">The index of the start column.</param>
            <param name="endColumn">The index of the end column (included in the submatrix).</param>
            <returns>The extracted submatrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startRow"/> is greater than <paramref name="endRow"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startColumn"/> is greater than <paramref name="endColumn"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startRow"/>, <paramref name="endRow"/>, <paramref name="startColumn"/>, or 
            <paramref name="endColumn"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetSubmatrix(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Gets a submatrix of this matrix.
            </summary>
            <param name="startRow">The index of the start row.</param>
            <param name="endRow">The index of the end row (included in the submatrix).</param>
            <param name="columns">The indices of the columns.</param>
            <returns>The extracted submatrix.</returns>
            <remarks>
            The index array has to be interpreted like this: For example, <c>columns[0] = 5</c> means
            that column 5 of this matrix will be copied into column 0 of the submatrix.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startRow"/> is greater than <paramref name="endRow"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startRow"/> or <paramref name="endRow"/> is out of range.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            An index in <paramref name="columns"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetSubmatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Gets a submatrix of this matrix.
            </summary>
            <param name="rows">The indices of the rows.</param>
            <param name="startColumn">The index of the start column.</param>
            <param name="endColumn">The index of the end column (included in the submatrix).</param>
            <returns>The extracted submatrix.</returns>
            <remarks>
            The index array has to be interpreted like this: For example, <c>row[0] = 5</c> means that
            row 5 of this matrix will be copied into row 0 of the submatrix.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startColumn"/> is greater than <paramref name="endColumn"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startColumn"/> or <paramref name="endColumn"/> is out of range.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            An index in <paramref name="rows"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.GetSubmatrix(System.Int32[],System.Int32[])">
            <summary>
            Gets a submatrix of this matrix.
            </summary>
            <param name="rows">The indices of the rows.</param>
            <param name="columns">The indices of the columns.</param>
            <returns>The extracted submatrix.</returns>
            <remarks>
            The index array has to be interpreted like this: For example, <c>columns[0] = 5</c> means
            that column 5 of this matrix will be copied into column 0 of the submatrix.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            An index in <paramref name="rows"/> or <paramref name="columns"/> is invalid.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Invert">
            <summary>
            Inverts the matrix.
            </summary>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix is singular (i.e. it is not invertible).
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.TryInvert">
            <summary>
            Inverts the matrix if it is invertible.
            </summary>
            <returns>
            <see langword="true"/> if the matrix is invertible; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            This method is the equivalent to <see cref="M:DigitalRune.Mathematics.Algebra.MatrixF.Invert"/>, except that no exceptions are thrown.
            The return value indicates whether the operation was successful.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Set(DigitalRune.Mathematics.Algebra.MatrixF)">
            <overloads>
            <summary>
            Sets the elements of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Sets the elements of this matrix.
            </summary>
            <param name="matrix">The matrix from which the elements are copied.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows or columns of the matrices do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Set(System.Single)">
            <summary>
            Sets the matrix elements to the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Set(System.Single[],DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Sets the matrix elements to the values of the array.
            </summary>
            <param name="elements">The elements array.</param>
            <param name="order">The order of the matrix elements in the array.</param>
            <remarks>
            <paramref name="elements"/> can have more elements than this instance. The exceeding
            elements are ignored.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> must have at least
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfRows"/> * <see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfColumns"/> elements.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Set(System.Collections.Generic.IList{System.Single},DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Sets the matrix elements to the values of the list.
            </summary>
            <param name="elements">The elements list.</param>
            <param name="order">The order of the matrix elements in the list.</param>
            <remarks>
            <paramref name="elements"/> can have more elements than this instance. The exceeding 
            elements are ignored.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="elements"/> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfRows"/>*<see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfColumns"/> elements.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Set(System.Single[][])">
            <summary>
            Sets the matrix elements to the values of the array.
            </summary>
            <param name="elements">The elements array.</param>
            <remarks>
            <paramref name="elements"/> can have more elements than this instance. The exceeding 
            elements are ignored.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfRows"/> * <see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfColumns"/> elements.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Set(System.Single[0:,0:])">
            <summary>
            Sets the matrix elements to the values of the array.
            </summary>
            <param name="elements">The elements array.</param>
            <remarks>
            <paramref name="elements"/> can have more elements than this instance. The exceeding 
            elements are ignored.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> must have at least 
            <see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfRows"/> x <see cref="P:DigitalRune.Mathematics.Algebra.MatrixF.NumberOfColumns"/> elements.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.SetIdentity">
            <summary>
            Sets this matrix to an identity matrix.
            </summary>
            <remarks>
            The elements in the main diagonal are set to <c>1</c>. All other elements are set to 
            <c>0</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.SetSubmatrix(System.Int32,System.Int32,DigitalRune.Mathematics.Algebra.MatrixF)">
            <overloads>
            <summary>
            Sets a submatrix of this matrix.
            </summary>
            </overloads>
            
            <summary>
            Sets a submatrix of this matrix.
            </summary>
            <param name="submatrix">The submatrix.</param>
            <param name="startRow">The index of the start row in this matrix.</param>
            <param name="startColumn">The index of the start column in this matrix.</param>
            <remarks>
            The elements of the submatrix are copied into this matrix, beginning at the position 
            [startRow, startColumn].
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="startRow"/>, <paramref name="startColumn"/> or the dimensions of the 
            submatrix are to high, so that the submatrix does not fit into this matrix.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startRow"/> or <paramref name="startColumn"/> out of range.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="submatrix"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToArray1D(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to an array of <see langword="float"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the array.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ToList(DigitalRune.Mathematics.Algebra.MatrixOrder)">
            <summary>
            Converts this matrix to a list of <see langword="float"/> values.
            </summary>
            <param name="order">The order of the matrix elements in the list.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Transpose">
            <summary>
            Transposes this matrix.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.Absolute(DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Returns a matrix with the absolute values of the elements of the given matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>A matrix with the absolute values of the elements of the given matrix.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
            <overloads>
            <summary>
            Determines whether two matrices are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two matrices are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>); otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix1"/> or <paramref name="matrix2"/> is <see langword="null"/>.
            </exception>
            <remarks>
            The dimensions of the two matrices are compared and the matrices are compared 
            component-wise. If the differences of the components are less than 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF,System.Single)">
            <summary>
            Determines whether two matrices are equal (regarding a specific tolerance).
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the matrices are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix1"/> or <paramref name="matrix2"/> is <see langword="null"/>.
            </exception>
            <remarks>
            The dimensions of the two matrices are compared and the matrices are compared 
            component-wise. If the differences of the components are less than 
            <paramref name="epsilon"/> the matrices are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.CheckMatrixDimensions(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Throws exceptions if the matrix dimensions do not match.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <exception cref="T:System.ArgumentException">
            The numbers of rows or columns of the matrices do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ClampToZero(DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The matrix with small elements clamped to zero.</returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.ClampToZero(DigitalRune.Mathematics.Algebra.MatrixF,System.Single)">
            <overloads>
            <summary>
            Clamps near-zero matrix elements to zero.
            </summary>
            </overloads>
            
            <summary>
            Returns a matrix with the matrix elements clamped to the range [min, max].
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The matrix with small elements clamped to zero.</returns>
            <remarks>
            Each matrix element is compared to zero. If it is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.CreateIdentity(System.Int32,System.Int32)">
            <summary>
            Creates an identity matrix.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <returns>An identity matrix.</returns>
            <remarks>
            Elements in the main diagonal are set to <c>1</c>. Other elements are set to <c>0</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Solves the linear set of equations A * X = B.
            </summary>
            <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
            <param name="matrixB">
            The matrix B with the same number of rows as A and any number of columns.
            </param>
            <returns>The matrix X.</returns>
            <remarks>
            If A is a square matrix, the X contains the solutions. If A is not a square matrix, the 
            least squares solutions is returned.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> or <paramref name="matrixB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows in <paramref name="matrixA"/> must be greater than or equal to the number 
            of columns.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A does not have full rank.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.MatrixF.SolveLinearEquations(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Solves the linear set of equations A * x = b.
            </summary>
            <param name="matrixA">
            The matrix A. (Can be rectangular. Number of rows ≥ number of columns.)
            </param>
            <param name="vectorB">The column vector b with as many rows as A.</param>
            <returns>The vector x.</returns>
            <remarks>
            If A is a square matrix, the x contains the solutions. If A is not a square matrix, the 
            least squares solutions is returned.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vectorB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows does not match.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows in matrix A must be greater than or equal to the number of columns.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The matrix A does not have full rank.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.MatrixOrder">
            <summary>
            The matrix order defines in which order the matrix elements would be stored in a 1D array.
            </summary>
            <remarks>
            The enumeration values are explained using following example matrix: 
            <code>
            M00 M01 M02
            M10 M11 M12
            </code>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.MatrixOrder.ColumnMajor">
            <summary>
            The matrix is stored in column-major order. (Example: <c>M00, M10, M01, M11, M02, M12</c>)
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.MatrixOrder.RowMajor">
            <summary>
            The matrix is stored in row-major order. (Example: <c>M00, M01, M02, M10, M11, M12</c>)
            </summary>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Mathematics.Algebra"/> namespace provides types for (linear)
            algebra.
            </summary>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.QuaternionD">
            <summary>
            Defines a quaternion (double-precision).
            </summary>
            <remarks>
            <para>
            A quaternion consists of a scalar component <i>w</i> and a vector component 
            <i><b>v</b> = (x, y, z)</i>. Alternatively it can be represented as a complex number with 
            three imaginary parts <i>w + <b>i</b>x + <b>j</b>y + <b>k</b>z</i>, or as a 4-dimensional 
            vector <i>(w, x, y, z)</i>
            </para>
            <para>
            Due to common notation, the quaternion components are stored in the order:
            <i>(w, x, y, z)</i>.
            </para>
            <para>
            <b>Unit Quaternions:</b> 
            <para>
            A <i>unit quaternion</i> is a quaternion <i>q</i> where N(<i>q</i>) = 1. (See 
            <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionD.Norm"/>.) A unit quaternion can be represented by 
            </para>
            <para>
            <i>q</i> = cos<i>θ</i> + <i><b>u</b></i>sin<i>θ</i>,
            </para>
            <para>
            where <i><b>u</b></i> as a 3D vector has a length of 1. By applying Euler's identity for 
            complex numbers the quaternion can be written in exponential notation: 
            </para>
            <para>
            <i>q</i> = e<sup><i><b>u</b></i><i>θ</i></sup> = cos<i>θ</i> + <i><b>u</b></i>sin<i>θ</i>
            </para>
            </para>
            <para>
            Several methods, such as <see cref="M:DigitalRune.Mathematics.Algebra.QuaternionD.Ln(DigitalRune.Mathematics.Algebra.QuaternionD)"/>, require that the quaternion is a unit 
            quaternion.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.QuaternionD.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.QuaternionD.Identity">
            <summary>
            Returns the identity <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> (1, 0, 0, 0).
            </summary>
            <remarks>
            The identity quaternion is a unit quaternion that specifies no rotation.
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.QuaternionD.W">
            <summary>
            The w component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.QuaternionD.X">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.QuaternionD.Y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.QuaternionD.Z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Angle">
            <summary>
            Gets or sets the angle of the rotation around <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionD.Axis"/>.
            </summary>
            <value>The angle in radians.</value>
            <remarks>
            <para>
            Setting the angle influences all components of the quaternion. The result is a unit
            quaternion that specifies a rotation of <i>angle</i> radians around the axis given by 
            <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionD.Axis"/>.
            </para>
            <para>
            This property assumes that the quaternion is a unit quaternion. It returns
            <see cref="F:System.Double.NaN"/> if the w component is numerically greater than 1.0 or less than
            -1.0.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.V">
            <summary>
            Gets or sets the vector part (x, y, z).
            </summary>
            <value>The vector part (x, y, z).</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Axis">
            <summary>
            Gets or sets the normalized unit vector with the direction of the rotation axis.
            </summary>
            <value>
            The normalized unit vector with the direction of the rotation axis.
            </value>
            <remarks>
            <para>
            Setting the axis influences all components of the quaternion. The result is a unit
            quaternion that specifies a rotation of <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionD.Angle"/> radians around the specified
            axis.
            </para>
            <para>
            If the quaternion represents "no rotation" (rotation angle is 0), the axis vector is 
            (0, 0, 0).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Conjugated">
            <summary>
            Returns the conjugate of the quaternion.
            </summary>
            <value>The conjugate of this quaternion.</value>
            <remarks>
            <para>
            The conjugate of a quaternion is calculated by negating the vector component.
            </para>
            <para>
            <i>q<sup>*</sup> = w - <b>i</b>x - <b>j</b>y - <b>k</b>z</i>
            </para>
            <para>
            The property does not change this quaternion. To conjugate this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.QuaternionD.Conjugate"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Inverse">
            <summary>
            Returns the inverse of this quaternion.
            </summary>
            <value>The inverse of this quaternion.</value>
            <remarks>
            <para>
            The (multiplicative) inverse of a quaternion is calculated by using the following formula:
            </para>
            <para>
            <i>q<sup>-1</sup> = q<sup>*</sup> / (q q<sup>*</sup>) = q<sup>*</sup> / </i>N(<i>q</i>)
            </para>
            <para>
            The property does not change this quaternion. To invert this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.QuaternionD.Invert"/>.
            </para>
            <para>
            The inverse of a unit quaternion is the same as its conjugate. You might consider using the
            property <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionD.Conjugated"/> because it is faster than <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionD.Inverse"/>.
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The length of the quaternion is zero. The quaternion cannot be inverted.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Normalized">
            <summary>
            Returns the normalized quaternion.
            </summary>
            <value>The normalized quaternion.</value>
            <remarks>
            The property does not change this instance. To normalize this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.QuaternionD.Normalize"/>.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of the quaternion is zero. The quaternion cannot be normalized.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Modulus">
            <summary>
            Returns the modulus (length).
            </summary>
            <value>The modulus (length).</value>
            <remarks>
            <para>
            The <i>modulus</i> is also known as the <i>magnitude</i> or simply the <i>length</i> of a
            quaternion. It is calculated with the following formula:
            </para>
            <para>
            || <i>q</i> || = Sqrt(<i>w<sup>2</sup> + x<sup>2</sup> + y<sup>2</sup> + z<sup>2</sup></i>)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Norm">
            <summary>
            Returns the norm (<i>length<sup>2</sup></i>).
            </summary>
            <value>The norm.</value>
            <remarks>
            <para>
            The norm of a quaternion is calculated with the following formula: 
            </para>
            <para>
            N(<i>q</i>) = <i>w<sup>2</sup> + x<sup>2</sup> + y<sup>2</sup> + z<sup>2</sup></i>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.IsNaN">
            <summary>
            Gets a value indicating whether a component of the quaternion is <see cref="F:System.Double.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if a component of the quaternion is <see cref="F:System.Double.NaN"/>; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.IsNumericallyNormalized">
            <summary>
            Returns a value indicating whether this quaternion is normalized (the <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionD.Modulus"/> 
            is numerically equal to 1).
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> is normalized; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionD.IsNumericallyNormalized"/> compares the <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionD.Modulus"/> (length) of this 
            quaternion against 1.0 using the default tolerance value (see 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionD.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The component at <paramref name="index"/>.</value>
            <remarks>
            The index is zero based: w = quaternion[0], x = quaternion[1], ... z = quaternion[3]. 
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> class.
            </summary>
            <param name="w">The initial value for the w component.</param>
            <param name="x">The initial value for the x component.</param>
            <param name="y">The initial value for the y component.</param>
            <param name="z">The initial value for the z component.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> class.
            </summary>
            <param name="components">
            Array with the initial values for the components w, x, y and z.
            </param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="components"/> has less than 4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> class.
            </summary>
            <param name="components">
            List with the initial values for the components w, x, y and z.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="components"/> has less than 4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.#ctor(System.Double,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> class.
            </summary>
            <param name="w">The initial value for scalar component w.</param>
            <param name="v">The initial values for the vector component (x, y, z).</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Equals(DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToString">
            <overloads>
            <summary>
            Returns the string representation of this quaternion.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this quaternion.
            </summary>
            <returns>The string representation of this quaternion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this vector using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this quaternion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_UnaryNegation(DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Negates a quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The negated quaternion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Negate(DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Negates a quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The negated quaternion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Addition(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Add(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Subtraction(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Subtracts a quaternion from a quaternion.
            </summary>
            <param name="minuend">The first quaternion (minuend).</param>
            <param name="subtrahend">The second quaternion (subtrahend).</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Subtract(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Subtracts a quaternion from a quaternion.
            </summary>
            <param name="minuend">The first quaternion (minuend).</param>
            <param name="subtrahend">The second quaternion (subtrahend).</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Multiply(DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
            <overloads>
            <summary>
            Multiplies a quaternion by a scalar or a quaternion.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a quaternion by a scalar.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="scalar">The scalar.</param>
            <returns>
            The quaternion with each component multiplied by <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Multiplies a quaternion by a scalar.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="scalar">The scalar.</param>
            <returns>
            The quaternion with each component multiplied by <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Multiply(System.Double,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <overloads>
            <summary>
            Multiplies a quaternion by a scalar or a quaternion.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a quaternion by a scalar.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="scalar">The scalar.</param>
            <returns>
            The quaternion with each component multiplied by <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Multiply(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Multiplies two quaternions.
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>The product of the two quaternions.</returns>
            <remarks>
            <para>
            If the quaternions are unit quaternions, then each quaternion represents a rotation in
            3-dimensional space. The product of two unit quaternions is the concatenation of the two
            rotations.
            </para>
            <para>
            <i>q<sub>2</sub> q<sub>1</sub></i> is the same as <i>M<sub>2</sub> . M<sub>1</sub></i>,
            where <i>M<sub>2</sub></i> and <i>M<sub>1</sub></i> are the equivalent matrices 
            (<i>M<sub>1</sub></i> specifies the same rotation as <i>q<sub>1</sub></i> and 
            <i>M<sub>2</sub></i> specifies the same rotation as <i>q<sub>2</sub></i>).
            </para>
            <para>
            The multiplication is non-commutative. The operation is also known as the <i>Grassman
            product</i> of quaternions.
            </para>
            <para>
            The multiplication is defined as:
            </para>
            <para>
            <i>q<sub>1</sub></i> <i>q<sub>2</sub></i> = (<i>w<sub>1</sub></i> <i>w<sub>2</sub></i> - 
            <i><b>v</b><sub>1</sub></i> ∙ <i><b>v</b><sub>2</sub></i>, 
            <i><b>v</b><sub>1</sub></i> x <i><b>v</b><sub>2</sub></i> + <i>w<sub>1</sub></i> 
            <i><b>v</b><sub>2</sub></i> + <i>w<sub>2</sub></i> <i><b>v</b><sub>1</sub></i>)
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Multiply(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Multiplies two quaternions.
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>The product of the two quaternions.</returns>
            <remarks>
            <para>
            If the quaternions are unit quaternions, then each quaternion represents a rotation in
            3-dimensional space. The product of two unit quaternions is the concatenation of the two
            rotations.
            </para>
            <para>
            <i>q<sub>1</sub> . q<sub>2</sub></i> is the same as <i>M<sub>1</sub> . M<sub>2</sub></i>,
            where <i>M<sub>1</sub></i> and <i>M<sub>2</sub></i> are the equivalent matrices 
            (<i>M<sub>1</sub></i> specifies the same rotation as <i>q<sub>1</sub></i> and 
            <i>M<sub>2</sub></i> specifies the same rotation as <i>q<sub>2</sub></i>).
            </para>
            <para>
            The multiplication is non-commutative. The operation is also known as the <i>Grassman
            product</i> of quaternions.
            </para>
            <para>
            The multiplication is defined as:
            </para>
            <para>
            <i>q<sub>1</sub></i> <i>q<sub>2</sub></i> = (<i>w<sub>1</sub></i> <i>w<sub>2</sub></i> - 
            <i><b>v</b><sub>1</sub></i> ∙ <i><b>v</b><sub>2</sub></i>, 
            <i><b>v</b><sub>1</sub></i> x <i><b>v</b><sub>2</sub></i> + <i>w<sub>1</sub></i> 
            <i><b>v</b><sub>2</sub></i> + <i>w<sub>2</sub></i> <i><b>v</b><sub>1</sub></i>)
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Division(DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
            <overloads>
            <summary>
            Divides a quaternion by a scalar or a quaternion.
            </summary>
            </overloads>
            
            <summary>
            Divides a quaternion by a scalar.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="scalar">The scalar.</param>
            <returns>The quaternion with each component divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Divide(DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
            <overloads>
            <summary>
            Divides a quaternion by a scalar or a quaternion.
            </summary>
            </overloads>
            
            <summary>
            Divides a quaternion by a scalar.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="scalar">The scalar.</param>
            <returns>The quaternion with each component divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Division(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Divides a quaternions by another quaternion.
            </summary>
            <param name="dividend">The first quaternion (dividend).</param>
            <param name="divisor">The second quaternion (divisor).</param>
            <returns>The result of the division.</returns>
            <remarks>
            <para>
            A quaternion is divided by another quaternion by multiplying it with the inverse. For
            example, two quaternions <i>q<sub>1</sub></i> and <i>q<sub>2</sub></i>:
            </para>
            <para>
            <i><i>q<sub>1</sub></i> / q<sub>2</sub> = <i>q<sub>1</sub></i>q<sub>2</sub><sup>-1</sup></i>
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The quaternion <paramref name="divisor"/> cannot be inverted.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Divide(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Divides a quaternions by another quaternion.
            </summary>
            <param name="dividend">The first quaternion (dividend).</param>
            <param name="divisor">The second quaternion (divisor).</param>
            <returns>The result of the division.</returns>
            <remarks>
            <para>
            A quaternion is divided by another quaternion by multiplying it with the inverse. For
            example, two quaternions <i>q<sub>1</sub></i> and <i>q<sub>2</sub></i>:
            </para>
            <para>
            <i><i>q<sub>1</sub></i> / q<sub>2</sub> = <i>q<sub>1</sub></i>q<sub>2</sub><sup>-1</sup></i>
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The quaternion <paramref name="divisor"/> cannot be inverted.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Equality(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Tests if two quaternions are equal.
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>
            <see langword="true"/> if the quaternions are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the components of the quaternions are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Inequality(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Tests if two quaternions are not equal.
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>
            <see langword="true"/> if the quaternions are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the components of the quaternions are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionD)~System.Double[]">
            <overloads>
            <summary>
            Converts the quaternion to another data type.
            </summary>
            </overloads>
            
            <summary>
            Converts the quaternion to an array of 4 <see langword="double"/> values: (w, x, y, z).
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The array with 4 <see langword="double"/> values (w, x, y, z).</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToArray">
            <summary>
            Converts the quaternion to an array of 4 <see langword="double"/> values: (w, x, y, z).
            </summary>
            <returns>The array with 4 <see langword="double"/> values (w, x, y, z).</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionD)~System.Collections.Generic.List{System.Double}">
            <summary>
            Converts the vector to a list of 4 <see langword="double"/> values: (w, x, y, z).
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The list with 4 <see langword="double"/> values (w, x, y, z).</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToList">
            <summary>
            Converts the vector to a list of 4 <see langword="double"/> values: (w, x, y, z).
            </summary>
            <returns>The list with 4 <see langword="double"/> values (w, x, y, z).</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionD)~DigitalRune.Mathematics.Algebra.QuaternionF">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/>.
            </summary>
            <param name="quaternion">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToQuaternionF">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Explicit(Microsoft.Xna.Framework.Quaternion)~DigitalRune.Mathematics.Algebra.QuaternionD">
            <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework) to 
            <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> (DigitalRune Mathematics).
            </summary>
            <param name="quaternion">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.FromXna(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).
            </summary>
            <param name="quaternion">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionD)~Microsoft.Xna.Framework.Quaternion">
            <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).
            </summary>
            <param name="quaternion">The <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> (DigitalRune Mathematics).</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToXna">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).
            </summary>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Conjugate">
            <summary>
            Sets this quaternion to its conjugate.
            </summary>
            <remarks>
            <para>
            The conjugate of a quaternion is calculated by negating the vector component.
            </para>
            <para>
            <i>q<sup>*</sup> = w - <b>i</b>x - <b>j</b>y - <b>k</b>z</i>
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Invert">
            <summary>
            Inverts the quaternion.
            </summary>
            <remarks>
            <para>
            The (multiplicative) inverse of a quaternion is calculated by using the following formula:
            </para>
            <para>
            <i>q<sup>-1</sup> = q<sup>*</sup> / (q q<sup>*</sup>) = q<sup>*</sup> / </i>N(<i>q</i>)
            </para>
            <para>
            The inverse of a unit quaternion is the same as its conjugate. You might consider using the
            method <see cref="M:DigitalRune.Mathematics.Algebra.QuaternionD.Conjugate"/> because it is faster than <see cref="M:DigitalRune.Mathematics.Algebra.QuaternionD.Invert"/>.
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The length of the quaternion is zero. The quaternion cannot be inverted.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Normalize">
            <summary>
            Normalizes the quaternion.
            </summary>
            <remarks>
            A quaternion is normalized by dividing its components by the length of the quaternion.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of the quaternion is zero. The quaternion cannot be normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.TryNormalize">
            <summary>
            Tries to normalize the quaternion.
            </summary>
            <returns>
            <see langword="true"/> if the quaternion was normalized; otherwise, <see langword="false"/> 
            if the quaternion could not be normalized. (The norm is numerically zero.)
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Exp">
            <overloads>
            <summary>
            Calculates the exponential.
            </summary>
            </overloads>
            
            <summary>
            Sets this quaternion to its exponential.
            </summary>
            <remarks>
            <para>
            <strong>Important:</strong> This method requires that the quaternion is a pure quaternion. A
            pure quaternion is defined by <i>q</i> = (0, <i><b>u</b>θ</i>) where <i><b>u</b></i> is a
            unit vector.
            </para>
            <para>
            The exponential of a quaternion <i>q</i> is defines as:
            </para>
            <para>
            e<sup><i>q</i></sup> = (cos(<i>θ</i>) + <i><b>u</b></i>sin(<i>θ</i>))
            </para>
            <para>
            The result is returned as a quaternion with the form:
            (cos(<i>θ</i>), <i><b>u</b></i>sin(<i>θ</i>))
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Ln">
            <overloads>
            <summary>
            Calculates the natural logarithm.
            </summary>
            </overloads>
            
            <summary>
            Sets this quaternion to its natural logarithm.
            </summary>
            <remarks>
            <para>
            <strong>Important:</strong> This method requires that the quaternion is a unit quaternion.
            </para>
            <para>
            The natural logarithm of a quaternion <i>q</i> is defines as:
            </para>
            <para>
            ln(<i>q</i>) = ln(cos(<i>θ</i>) + <i><b>u</b></i>sin(<i>θ</i>)) 
                         = ln(e<sup><i><b>u</b>θ</i></sup>) = <i><b>u</b>θ</i>
            </para>
            <para>
            The result is returned as a quaternion with the form: (0, <i><b>u</b>θ</i>)
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The quaternion is not a unit quaternion.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Power(System.Double)">
            <overloads>
            <summary>
            Calculates the power of a unit quaternion.
            </summary>
            </overloads>
            
            <summary>
            Sets this unit quaternion to a power of itself.
            </summary>
            <param name="t">The exponent.</param>
            <returns>The power of the unit quaternion.</returns>
            <remarks>
            <para>
            <strong>Important:</strong> This method requires that the quaternion is a unit quaternion.
            </para>
            <para>
            The power of quaternion is defined as:
            </para>
            <para>
            <i>q<sup>t</sup></i> = e<sup><i><b>u</b>tθ</i></sup> 
                                 = cos(<i>tθ</i>) + <i><b>u</b></i>sin(<i>tθ</i>)
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Rotate(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Rotates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The rotated vector.</returns>
            <remarks>
            <para>
            The rotation of a vector <i>v</i> by quaternion <i>q</i> is defined as:
            </para>
            <para>
            <i>(0, <i>v'</i>)</i> = <i>q</i> * (0, <i>v</i>) * <i>q</i><sup>-1</sup>
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToRotationMatrix33">
            <summary>
            Returns the 3 x 3 rotation matrix of this quaternion.
            </summary>
            <returns>The rotation matrix.</returns>
            <remarks>
            The method assumes that this quaternion is a unit quaternion (i.e. that it is normalized).
            The unit quaternion specifies a rotation that can be converted into a corresponding 3 x 3
            rotation matrix.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.ToRotationMatrix44">
            <summary>
            Returns the 4 x 4 rotation matrix of this quaternion.
            </summary>
            <returns>The rotation matrix.</returns>
            <remarks>
            <para>
            The method assumes that this quaternion is a unit quaternion (i.e. that it is normalized).
            The unit quaternion specifies a rotation that can be converted into a corresponding rotation
            matrix.
            </para>
            <para>
            The resulting 4 x 4 matrix specifies a 3-dimensional rotation in the homogeneous coordinate
            space. The translation part of the matrix is set to (0, 0, 0).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <overloads>
            <summary>
            Determines whether two quaternions are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Tests if two quaternions are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>
            <see langword="true"/> if the quaternions are equal within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the components of the quaternions are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
            <summary>
            Tests if two quaternions are equal (with a specific tolerance).
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the quaternions are equal within the tolerance 
            <paramref name="epsilon"/>; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the components of the quaternions are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Dot(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Returns the dot product of two quaternions.
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
            <summary>
            Creates a unit quaternion that specifies a rotation given by axis and angle.
            </summary>
            <param name="axis">The axis. (Vector does not need to be normalized.)</param>
            <param name="angle">The angle.</param>
            <returns>
            <para>
            The created unit quaternion that describes a rotation by the 
            <paramref name="angle"/> radians around the <paramref name="axis"/>.
            (<paramref name="axis"/> will be normalized automatically.)
            </para>
            <para>
            The resulting quaternion is: <i>q</i> = (cos(<i>θ</i>/2), <i><b>v</b></i>sin(<i>θ</i>/2))
            </para>
            <para>
            <i>q</i> = (cos(<i>θ</i>/2), <i><b>v</b></i>sin(<i>θ</i>/2))
            </para>
            where <i>θ</i> is the angle and <i><b>v</b></i> is the normalized axis.
            </returns>
            <exception cref="T:System.ArgumentException">
            The <paramref name="axis"/> vector has 0 length.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotationX(System.Double)">
            <summary>
            Creates a unit quaternion that specifies a rotation by a given angle around the x-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>
            The created unit quaternion that describes a rotation by the <paramref name="angle"/>
            radians around the x-axis.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotationY(System.Double)">
            <summary>
            Creates a unit quaternion that specifies a rotation by a given angle around the y-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>
            The created unit quaternion that describes a rotation by the <paramref name="angle"/>
            radians around the y-axis.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotationZ(System.Double)">
            <summary>
            Creates a unit quaternion that specifies a rotation by a given angle around the z-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>
            The created unit quaternion that describes a rotation by the <paramref name="angle"/>
            radians around the z-axis.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotation(DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Creates a unit quaternion that specifies the same rotation as the given rotation matrix.
            </summary>
            <param name="rotationMatrix">A orientation matrix that specifies a rotation.</param>
            <returns>
            The creates unit quaternion that describes the same rotation as the rotation matrix.
            </returns>
            <remarks>
            The given matrix is converted into a unit quaternion that specifies the same rotation.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Creates a unit quaternion that specifies a rotation given by two vectors.
            </summary>
            <param name="startVector">
            The initial vector. (Vector does not need to be normalized.)
            </param>
            <param name="rotatedVector">
            The rotated vector. (Vector does not need to be normalized.)
            </param>
            <returns>
            The created unit quaternion that would rotate <paramref name="startVector"/> to 
            <paramref name="rotatedVector"/>.
            </returns>
            <remarks>
            The quaternion is set to a rotation that would rotate vector <c>startVector</c> to the
            orientation of vector <c>rotatedVector</c>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The length of the <paramref name="startVector"/> and <paramref name="rotatedVector"/> must
            not be <c>0</c>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Exp(DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Calculates the exponential.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The exponential e<sup><i>q</i></sup>.</returns>
            <remarks>
            <para>
            <strong>Important:</strong> This method requires that the quaternion is a pure quaternion. A
            pure quaternion is defined by <i>q</i> = (0, <i><b>u</b>θ</i>) where <i><b>u</b></i> is a
            unit vector.
            </para>
            <para>
            The exponential of a quaternion <i>q</i> is defines as:
            </para>
            <para>
            e<sup><i>q</i></sup> = (cos<i>θ</i> + <i><b>u</b></i>sin<i>θ</i>)
            </para>
            <para>
            The result is returned as a quaternion with the form: 
            (cos(<i>θ</i>), <i><b>u</b></i>sin(<i>θ</i>))
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.CreateRotation(System.Double,DigitalRune.Mathematics.Algebra.Vector3D,System.Double,DigitalRune.Mathematics.Algebra.Vector3D,System.Double,DigitalRune.Mathematics.Algebra.Vector3D,System.Boolean)">
            <overloads>
            <summary>
            Creates a quaternion for a given rotation.
            </summary>
            </overloads>
            
            <summary>
            Gets an orientation quaternion from Euler angles (3 rotations around 3 axes).
            </summary>
            <param name="angle1">The first angle.</param>
            <param name="axis1">The first axis.</param>
            <param name="angle2">The second angle.</param>
            <param name="axis2">The second axis.</param>
            <param name="angle3">The third angle.</param>
            <param name="axis3">The third axis.</param>
            <param name="useGlobalAxes">
            If set to <see langword="true"/> then the rotation axes are fixed in world space. Otherwise 
            the rotation axes are fixed on the object and rotated with each rotation.
            </param>
            <remarks>
            A rotation is created from 3 sequential rotations. Each rotation is defined by an angle and 
            the rotation axis. This method can be used to create a quaternion from Euler angle 
            representations, often named Azimuth/Elevation/Roll, or Heading/Pitch/Roll.
            </remarks>
            <returns>
            The orientation quaternion that describes the same orientation as the given Euler angles.
            </returns>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The length of the axis vectors must not be <c>0</c>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Ln(DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Calculates the natural logarithm.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The natural logarithm ln(<i>q</i>).</returns>
            <remarks>
            <para>
            <strong>Important:</strong> This method requires that the quaternion is a unit quaternion.
            </para>
            <para>
            The natural logarithm of a quaternion <i>q</i> is defines as:
            </para>
            <para>
            ln(<i>q</i>) = ln(cos(<i>θ</i>) + <i><b>u</b></i>sin(<i>θ</i>)) 
                         = ln(e<sup><i><b>u</b>θ</i></sup>) = <i><b>u</b>θ</i>
            </para>
            <para>
            The result is returned as a quaternion with the form: (0, <i><b>u</b>θ</i>)
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The given quaternion is not a unit quaternion.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Power(DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
            <summary>
            Calculates the power of a unit quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="t">The exponent.</param>
            <returns>The power of the unit quaternion.</returns>
            <remarks>
            <para>
            <strong>Important:</strong> This method requires that the quaternion is a unit quaternion.
            </para>
            <para>
            The power of quaternion is defined as:
            </para>
            <para>
            <i>q<sup>t</sup></i> = e<sup><i><b>u</b>tθ</i></sup> 
                                 = cos(<i>tθ</i>) + <i><b>u</b></i>sin(<i>tθ</i>)
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.GetAngle(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Calculates the angle between two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>The angle between the given vectors, such that 0 ≤ angle ≤ π.</returns>
            <remarks>
            <para>
            The quaternions are interpreted as orientations. The result is the angle of the quaternion
            which would rotate an object in the first orientation to the second orientation.
            </para>
            <para>
            The result is only valid for unit quaternions.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Parse(System.String)">
            <overloads>
            <summary>
            Converts the string representation of a quaternion to its <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> 
            equivalent.
            </summary>
            </overloads>
            
            <summary>
            Converts the string representation of a quaternion to its <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> 
            equivalent.
            </summary>
            <param name="s">A string representation of a 4-dimensional vector.</param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionD.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a quaternion in a specified culture-specific format to
            its <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> equivalent.
            </summary>
            <param name="s">A string representation of a 4-dimensional vector.</param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>. 
            </param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.QuaternionF">
            <summary>
            Defines a quaternion (single-precision).
            </summary>
            <remarks>
            <para>
            A quaternion consists of a scalar component <i>w</i> and a vector component 
            <i><b>v</b> = (x, y, z)</i>. Alternatively it can be represented as a complex number with 
            three imaginary parts <i>w + <b>i</b>x + <b>j</b>y + <b>k</b>z</i>, or as a 4-dimensional 
            vector <i>(w, x, y, z)</i>
            </para>
            <para>
            Due to common notation, the quaternion components are stored in the order:
            <i>(w, x, y, z)</i>.
            </para>
            <para>
            <b>Unit Quaternions:</b> 
            <para>
            A <i>unit quaternion</i> is a quaternion <i>q</i> where N(<i>q</i>) = 1. (See 
            <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionF.Norm"/>.) A unit quaternion can be represented by 
            </para>
            <para>
            <i>q</i> = cos<i>θ</i> + <i><b>u</b></i>sin<i>θ</i>,
            </para>
            <para>
            where <i><b>u</b></i> as a 3D vector has a length of 1. By applying Euler's identity for 
            complex numbers the quaternion can be written in exponential notation: 
            </para>
            <para>
            <i>q</i> = e<sup><i><b>u</b></i><i>θ</i></sup> = cos<i>θ</i> + <i><b>u</b></i>sin<i>θ</i>
            </para>
            </para>
            <para>
            Several methods, such as <see cref="M:DigitalRune.Mathematics.Algebra.QuaternionF.Ln(DigitalRune.Mathematics.Algebra.QuaternionF)"/>, require that the quaternion is a unit 
            quaternion.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.QuaternionF.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.QuaternionF.Identity">
            <summary>
            Returns the identity <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> (1, 0, 0, 0).
            </summary>
            <remarks>
            The identity quaternion is a unit quaternion that specifies no rotation.
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.QuaternionF.W">
            <summary>
            The w component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.QuaternionF.X">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.QuaternionF.Y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.QuaternionF.Z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Angle">
            <summary>
            Gets or sets the angle of the rotation around <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionF.Axis"/>.
            </summary>
            <value>The angle in radians.</value>
            <remarks>
            <para>
            Setting the angle influences all components of the quaternion. The result is a unit
            quaternion that specifies a rotation of <i>angle</i> radians around the axis given by 
            <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionF.Axis"/>.
            </para>
            <para>
            This property assumes that the quaternion is a unit quaternion. It returns
            <see cref="F:System.Double.NaN"/> if the w component is numerically greater than 1.0 or less than
            -1.0.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.V">
            <summary>
            Gets or sets the vector part (x, y, z).
            </summary>
            <value>The vector part (x, y, z).</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Axis">
            <summary>
            Gets or sets the normalized unit vector with the direction of the rotation axis.
            </summary>
            <value>
            The normalized unit vector with the direction of the rotation axis.
            </value>
            <remarks>
            <para>
            Setting the axis influences all components of the quaternion. The result is a unit
            quaternion that specifies a rotation of <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionF.Angle"/> radians around the specified
            axis.
            </para>
            <para>
            If the quaternion represents "no rotation" (rotation angle is 0), the axis vector is 
            (0, 0, 0).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Conjugated">
            <summary>
            Returns the conjugate of the quaternion.
            </summary>
            <value>The conjugate of this quaternion.</value>
            <remarks>
            <para>
            The conjugate of a quaternion is calculated by negating the vector component.
            </para>
            <para>
            <i>q<sup>*</sup> = w - <b>i</b>x - <b>j</b>y - <b>k</b>z</i>
            </para>
            <para>
            The property does not change this quaternion. To conjugate this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.QuaternionF.Conjugate"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Inverse">
            <summary>
            Returns the inverse of this quaternion.
            </summary>
            <value>The inverse of this quaternion.</value>
            <remarks>
            <para>
            The (multiplicative) inverse of a quaternion is calculated by using the following formula:
            </para>
            <para>
            <i>q<sup>-1</sup> = q<sup>*</sup> / (q q<sup>*</sup>) = q<sup>*</sup> / </i>N(<i>q</i>)
            </para>
            <para>
            The property does not change this quaternion. To invert this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.QuaternionF.Invert"/>.
            </para>
            <para>
            The inverse of a unit quaternion is the same as its conjugate. You might consider using the
            property <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionF.Conjugated"/> because it is faster than <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionF.Inverse"/>.
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The length of the quaternion is zero. The quaternion cannot be inverted.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Normalized">
            <summary>
            Returns the normalized quaternion.
            </summary>
            <value>The normalized quaternion.</value>
            <remarks>
            The property does not change this instance. To normalize this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.QuaternionF.Normalize"/>.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of the quaternion is zero. The quaternion cannot be normalized.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Modulus">
            <summary>
            Returns the modulus (length).
            </summary>
            <value>The modulus (length).</value>
            <remarks>
            <para>
            The <i>modulus</i> is also known as the <i>magnitude</i> or simply the <i>length</i> of a
            quaternion. It is calculated with the following formula:
            </para>
            <para>
            || <i>q</i> || = Sqrt(<i>w<sup>2</sup> + x<sup>2</sup> + y<sup>2</sup> + z<sup>2</sup></i>)
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Norm">
            <summary>
            Returns the norm (<i>length<sup>2</sup></i>).
            </summary>
            <value>The norm.</value>
            <remarks>
            <para>
            The norm of a quaternion is calculated with the following formula: 
            </para>
            <para>
            N(<i>q</i>) = <i>w<sup>2</sup> + x<sup>2</sup> + y<sup>2</sup> + z<sup>2</sup></i>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.IsNaN">
            <summary>
            Gets a value indicating whether a component of the quaternion is <see cref="F:System.Single.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if a component of the quaternion is <see cref="F:System.Single.NaN"/>; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.IsNumericallyNormalized">
            <summary>
            Returns a value indicating whether this quaternion is normalized (the <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionF.Modulus"/> 
            is numerically equal to 1).
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> is normalized; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionF.IsNumericallyNormalized"/> compares the <see cref="P:DigitalRune.Mathematics.Algebra.QuaternionF.Modulus"/> (length) of this 
            quaternion against 1.0 using the default tolerance value (see 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.QuaternionF.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The component at <paramref name="index"/>.</value>
            <remarks>
            The index is zero based: w = quaternion[0], x = quaternion[1], ... z = quaternion[3]. 
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> class.
            </summary>
            <param name="w">The initial value for the w component.</param>
            <param name="x">The initial value for the x component.</param>
            <param name="y">The initial value for the y component.</param>
            <param name="z">The initial value for the z component.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> class.
            </summary>
            <param name="components">
            Array with the initial values for the components w, x, y and z.
            </param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="components"/> has less than 4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> class.
            </summary>
            <param name="components">
            List with the initial values for the components w, x, y and z.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="components"/> has less than 4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.#ctor(System.Single,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> class.
            </summary>
            <param name="w">The initial value for scalar component w.</param>
            <param name="v">The initial values for the vector component (x, y, z).</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and 
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Equals(DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToString">
            <overloads>
            <summary>
            Returns the string representation of this quaternion.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this quaternion.
            </summary>
            <returns>The string representation of this quaternion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this vector using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this quaternion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_UnaryNegation(DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Negates a quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The negated quaternion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Negate(DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Negates a quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The negated quaternion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Addition(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Add(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Subtraction(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Subtracts a quaternion from a quaternion.
            </summary>
            <param name="minuend">The first quaternion (minuend).</param>
            <param name="subtrahend">The second quaternion (subtrahend).</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Subtract(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Subtracts a quaternion from a quaternion.
            </summary>
            <param name="minuend">The first quaternion (minuend).</param>
            <param name="subtrahend">The second quaternion (subtrahend).</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Multiply(DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
            <overloads>
            <summary>
            Multiplies a quaternion by a scalar or a quaternion.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a quaternion by a scalar.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="scalar">The scalar.</param>
            <returns>
            The quaternion with each component multiplied by <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Multiplies a quaternion by a scalar.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="scalar">The scalar.</param>
            <returns>
            The quaternion with each component multiplied by <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Multiply(System.Single,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <overloads>
            <summary>
            Multiplies a quaternion by a scalar or a quaternion.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a quaternion by a scalar.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="scalar">The scalar.</param>
            <returns>
            The quaternion with each component multiplied by <paramref name="scalar"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Multiply(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Multiplies two quaternions.
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>The product of the two quaternions.</returns>
            <remarks>
            <para>
            If the quaternions are unit quaternions, then each quaternion represents a rotation in
            3-dimensional space. The product of two unit quaternions is the concatenation of the two
            rotations.
            </para>
            <para>
            <i>q<sub>2</sub> q<sub>1</sub></i> is the same as <i>M<sub>2</sub> . M<sub>1</sub></i>,
            where <i>M<sub>2</sub></i> and <i>M<sub>1</sub></i> are the equivalent matrices 
            (<i>M<sub>1</sub></i> specifies the same rotation as <i>q<sub>1</sub></i> and 
            <i>M<sub>2</sub></i> specifies the same rotation as <i>q<sub>2</sub></i>).
            </para>
            <para>
            The multiplication is non-commutative. The operation is also known as the <i>Grassman
            product</i> of quaternions.
            </para>
            <para>
            The multiplication is defined as:
            </para>
            <para>
            <i>q<sub>1</sub></i> <i>q<sub>2</sub></i> = (<i>w<sub>1</sub></i> <i>w<sub>2</sub></i> - 
            <i><b>v</b><sub>1</sub></i> ∙ <i><b>v</b><sub>2</sub></i>, 
            <i><b>v</b><sub>1</sub></i> x <i><b>v</b><sub>2</sub></i> + <i>w<sub>1</sub></i> 
            <i><b>v</b><sub>2</sub></i> + <i>w<sub>2</sub></i> <i><b>v</b><sub>1</sub></i>)
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Multiply(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Multiplies two quaternions.
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>The product of the two quaternions.</returns>
            <remarks>
            <para>
            If the quaternions are unit quaternions, then each quaternion represents a rotation in
            3-dimensional space. The product of two unit quaternions is the concatenation of the two
            rotations.
            </para>
            <para>
            <i>q<sub>1</sub> . q<sub>2</sub></i> is the same as <i>M<sub>1</sub> . M<sub>2</sub></i>,
            where <i>M<sub>1</sub></i> and <i>M<sub>2</sub></i> are the equivalent matrices 
            (<i>M<sub>1</sub></i> specifies the same rotation as <i>q<sub>1</sub></i> and 
            <i>M<sub>2</sub></i> specifies the same rotation as <i>q<sub>2</sub></i>).
            </para>
            <para>
            The multiplication is non-commutative. The operation is also known as the <i>Grassman
            product</i> of quaternions.
            </para>
            <para>
            The multiplication is defined as:
            </para>
            <para>
            <i>q<sub>1</sub></i> <i>q<sub>2</sub></i> = (<i>w<sub>1</sub></i> <i>w<sub>2</sub></i> - 
            <i><b>v</b><sub>1</sub></i> ∙ <i><b>v</b><sub>2</sub></i>, 
            <i><b>v</b><sub>1</sub></i> x <i><b>v</b><sub>2</sub></i> + <i>w<sub>1</sub></i> 
            <i><b>v</b><sub>2</sub></i> + <i>w<sub>2</sub></i> <i><b>v</b><sub>1</sub></i>)
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Division(DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
            <overloads>
            <summary>
            Divides a quaternion by a scalar or a quaternion.
            </summary>
            </overloads>
            
            <summary>
            Divides a quaternion by a scalar.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="scalar">The scalar.</param>
            <returns>The quaternion with each component divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Divide(DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
            <overloads>
            <summary>
            Divides a quaternion by a scalar or a quaternion.
            </summary>
            </overloads>
            
            <summary>
            Divides a quaternion by a scalar.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="scalar">The scalar.</param>
            <returns>The quaternion with each component divided by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Division(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Divides a quaternions by another quaternion.
            </summary>
            <param name="dividend">The first quaternion (dividend).</param>
            <param name="divisor">The second quaternion (divisor).</param>
            <returns>The result of the division.</returns>
            <remarks>
            <para>
            A quaternion is divided by another quaternion by multiplying it with the inverse. For
            example, two quaternions <i>q<sub>1</sub></i> and <i>q<sub>2</sub></i>:
            </para>
            <para>
            <i><i>q<sub>1</sub></i> / q<sub>2</sub> = <i>q<sub>1</sub></i>q<sub>2</sub><sup>-1</sup></i>
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The quaternion <paramref name="divisor"/> cannot be inverted.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Divide(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Divides a quaternions by another quaternion.
            </summary>
            <param name="dividend">The first quaternion (dividend).</param>
            <param name="divisor">The second quaternion (divisor).</param>
            <returns>The result of the division.</returns>
            <remarks>
            <para>
            A quaternion is divided by another quaternion by multiplying it with the inverse. For
            example, two quaternions <i>q<sub>1</sub></i> and <i>q<sub>2</sub></i>:
            </para>
            <para>
            <i><i>q<sub>1</sub></i> / q<sub>2</sub> = <i>q<sub>1</sub></i>q<sub>2</sub><sup>-1</sup></i>
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The quaternion <paramref name="divisor"/> cannot be inverted.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Equality(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Tests if two quaternions are equal.
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>
            <see langword="true"/> if the quaternions are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the components of the quaternions are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Inequality(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Tests if two quaternions are not equal.
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>
            <see langword="true"/> if the quaternions are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the components of the quaternions are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionF)~System.Single[]">
            <overloads>
            <summary>
            Converts the quaternion to another data type.
            </summary>
            </overloads>
            
            <summary>
            Converts the quaternion to an array of 4 <see langword="float"/> values: (w, x, y, z).
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The array with 4 <see langword="float"/> values (w, x, y, z).</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToArray">
            <summary>
            Converts the quaternion to an array of 4 <see langword="float"/> values: (w, x, y, z).
            </summary>
            <returns>The array with 4 <see langword="float"/> values (w, x, y, z).</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionF)~System.Collections.Generic.List{System.Single}">
            <summary>
            Converts the vector to a list of 4 <see langword="float"/> values: (w, x, y, z).
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The list with 4 <see langword="float"/> values (w, x, y, z).</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToList">
            <summary>
            Converts the vector to a list of 4 <see langword="float"/> values: (w, x, y, z).
            </summary>
            <returns>The list with 4 <see langword="float"/> values (w, x, y, z).</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Implicit(DigitalRune.Mathematics.Algebra.QuaternionF)~DigitalRune.Mathematics.Algebra.QuaternionD">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/>.
            </summary>
            <param name="quaternion">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToQuaternionD">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Explicit(Microsoft.Xna.Framework.Quaternion)~DigitalRune.Mathematics.Algebra.QuaternionF">
            <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework) to 
            <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> (DigitalRune Mathematics).
            </summary>
            <param name="quaternion">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.FromXna(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).
            </summary>
            <param name="quaternion">The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.op_Explicit(DigitalRune.Mathematics.Algebra.QuaternionF)~Microsoft.Xna.Framework.Quaternion">
            <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).
            </summary>
            <param name="quaternion">The <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> (DigitalRune Mathematics).</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToXna">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).
            </summary>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Quaternion"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Conjugate">
            <summary>
            Sets this quaternion to its conjugate.
            </summary>
            <remarks>
            <para>
            The conjugate of a quaternion is calculated by negating the vector component.
            </para>
            <para>
            <i>q<sup>*</sup> = w - <b>i</b>x - <b>j</b>y - <b>k</b>z</i>
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Invert">
            <summary>
            Inverts the quaternion.
            </summary>
            <remarks>
            <para>
            The (multiplicative) inverse of a quaternion is calculated by using the following formula:
            </para>
            <para>
            <i>q<sup>-1</sup> = q<sup>*</sup> / (q q<sup>*</sup>) = q<sup>*</sup> / </i>N(<i>q</i>)
            </para>
            <para>
            The inverse of a unit quaternion is the same as its conjugate. You might consider using the
            method <see cref="M:DigitalRune.Mathematics.Algebra.QuaternionF.Conjugate"/> because it is faster than <see cref="M:DigitalRune.Mathematics.Algebra.QuaternionF.Invert"/>.
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The length of the quaternion is zero. The quaternion cannot be inverted.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Normalize">
            <summary>
            Normalizes the quaternion.
            </summary>
            <remarks>
            A quaternion is normalized by dividing its components by the length of the quaternion.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of the quaternion is zero. The quaternion cannot be normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.TryNormalize">
            <summary>
            Tries to normalize the quaternion.
            </summary>
            <returns>
            <see langword="true"/> if the quaternion was normalized; otherwise, <see langword="false"/> 
            if the quaternion could not be normalized. (The norm is numerically zero.)
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Exp">
            <overloads>
            <summary>
            Calculates the exponential.
            </summary>
            </overloads>
            
            <summary>
            Sets this quaternion to its exponential.
            </summary>
            <remarks>
            <para>
            <strong>Important:</strong> This method requires that the quaternion is a pure quaternion. A
            pure quaternion is defined by <i>q</i> = (0, <i><b>u</b>θ</i>) where <i><b>u</b></i> is a
            unit vector.
            </para>
            <para>
            The exponential of a quaternion <i>q</i> is defines as:
            </para>
            <para>
            e<sup><i>q</i></sup> = (cos(<i>θ</i>) + <i><b>u</b></i>sin(<i>θ</i>))
            </para>
            <para>
            The result is returned as a quaternion with the form:
            (cos(<i>θ</i>), <i><b>u</b></i>sin(<i>θ</i>))
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Ln">
            <overloads>
            <summary>
            Calculates the natural logarithm.
            </summary>
            </overloads>
            
            <summary>
            Sets this quaternion to its natural logarithm.
            </summary>
            <remarks>
            <para>
            <strong>Important:</strong> This method requires that the quaternion is a unit quaternion.
            </para>
            <para>
            The natural logarithm of a quaternion <i>q</i> is defines as:
            </para>
            <para>
            ln(<i>q</i>) = ln(cos(<i>θ</i>) + <i><b>u</b></i>sin(<i>θ</i>)) 
                         = ln(e<sup><i><b>u</b>θ</i></sup>) = <i><b>u</b>θ</i>
            </para>
            <para>
            The result is returned as a quaternion with the form: (0, <i><b>u</b>θ</i>)
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The quaternion is not a unit quaternion.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Power(System.Single)">
            <overloads>
            <summary>
            Calculates the power of a unit quaternion.
            </summary>
            </overloads>
            
            <summary>
            Sets this unit quaternion to a power of itself.
            </summary>
            <param name="t">The exponent.</param>
            <returns>The power of the unit quaternion.</returns>
            <remarks>
            <para>
            <strong>Important:</strong> This method requires that the quaternion is a unit quaternion.
            </para>
            <para>
            The power of quaternion is defined as:
            </para>
            <para>
            <i>q<sup>t</sup></i> = e<sup><i><b>u</b>tθ</i></sup> 
                                 = cos(<i>tθ</i>) + <i><b>u</b></i>sin(<i>tθ</i>)
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Rotate(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Rotates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The rotated vector.</returns>
            <remarks>
            <para>
            The rotation of a vector <i>v</i> by quaternion <i>q</i> is defined as:
            </para>
            <para>
            <i>(0, <i>v'</i>)</i> = <i>q</i> * (0, <i>v</i>) * <i>q</i><sup>-1</sup>
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToRotationMatrix33">
            <summary>
            Returns the 3 x 3 rotation matrix of this quaternion.
            </summary>
            <returns>The rotation matrix.</returns>
            <remarks>
            The method assumes that this quaternion is a unit quaternion (i.e. that it is normalized).
            The unit quaternion specifies a rotation that can be converted into a corresponding 3 x 3
            rotation matrix.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.ToRotationMatrix44">
            <summary>
            Returns the 4 x 4 rotation matrix of this quaternion.
            </summary>
            <returns>The rotation matrix.</returns>
            <remarks>
            <para>
            The method assumes that this quaternion is a unit quaternion (i.e. that it is normalized).
            The unit quaternion specifies a rotation that can be converted into a corresponding rotation
            matrix.
            </para>
            <para>
            The resulting 4 x 4 matrix specifies a 3-dimensional rotation in the homogeneous coordinate
            space. The translation part of the matrix is set to (0, 0, 0).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <overloads>
            <summary>
            Determines whether two quaternions are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Tests if two quaternions are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>
            <see langword="true"/> if the quaternions are equal within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the components of the quaternions are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
            <summary>
            Tests if two quaternions are equal (with a specific tolerance).
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the quaternions are equal within the tolerance 
            <paramref name="epsilon"/>; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the components of the quaternions are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Dot(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Returns the dot product of two quaternions.
            </summary>
            <param name="q1">The first quaternion.</param>
            <param name="q2">The second quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Creates a unit quaternion that specifies a rotation given by axis and angle.
            </summary>
            <param name="axis">The axis. (Vector does not need to be normalized.)</param>
            <param name="angle">The angle.</param>
            <returns>
            <para>
            The created unit quaternion that describes a rotation by the 
            <paramref name="angle"/> radians around the <paramref name="axis"/>.
            (<paramref name="axis"/> will be normalized automatically.)
            </para>
            <para>
            The resulting quaternion is: <i>q</i> = (cos(<i>θ</i>/2), <i><b>v</b></i>sin(<i>θ</i>/2))
            </para>
            <para>
            <i>q</i> = (cos(<i>θ</i>/2), <i><b>v</b></i>sin(<i>θ</i>/2))
            </para>
            where <i>θ</i> is the angle and <i><b>v</b></i> is the normalized axis.
            </returns>
            <exception cref="T:System.ArgumentException">
            The <paramref name="axis"/> vector has 0 length.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotationX(System.Single)">
            <summary>
            Creates a unit quaternion that specifies a rotation by a given angle around the x-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>
            The created unit quaternion that describes a rotation by the <paramref name="angle"/>
            radians around the x-axis.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotationY(System.Single)">
            <summary>
            Creates a unit quaternion that specifies a rotation by a given angle around the y-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>
            The created unit quaternion that describes a rotation by the <paramref name="angle"/>
            radians around the y-axis.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotationZ(System.Single)">
            <summary>
            Creates a unit quaternion that specifies a rotation by a given angle around the z-axis.
            </summary>
            <param name="angle">The rotation angle in radians.</param>
            <returns>
            The created unit quaternion that describes a rotation by the <paramref name="angle"/>
            radians around the z-axis.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotation(DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Creates a unit quaternion that specifies the same rotation as the given rotation matrix.
            </summary>
            <param name="rotationMatrix">A orientation matrix that specifies a rotation.</param>
            <returns>
            The creates unit quaternion that describes the same rotation as the rotation matrix.
            </returns>
            <remarks>
            The given matrix is converted into a unit quaternion that specifies the same rotation.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotation(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Creates a unit quaternion that specifies a rotation given by two vectors.
            </summary>
            <param name="startVector">
            The initial vector. (Vector does not need to be normalized.)
            </param>
            <param name="rotatedVector">
            The rotated vector. (Vector does not need to be normalized.)
            </param>
            <returns>
            The created unit quaternion that would rotate <paramref name="startVector"/> to 
            <paramref name="rotatedVector"/>.
            </returns>
            <remarks>
            The quaternion is set to a rotation that would rotate vector <c>startVector</c> to the
            orientation of vector <c>rotatedVector</c>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The length of the <paramref name="startVector"/> and <paramref name="rotatedVector"/> must
            not be <c>0</c>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Exp(DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Calculates the exponential.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The exponential e<sup><i>q</i></sup>.</returns>
            <remarks>
            <para>
            <strong>Important:</strong> This method requires that the quaternion is a pure quaternion. A
            pure quaternion is defined by <i>q</i> = (0, <i><b>u</b>θ</i>) where <i><b>u</b></i> is a
            unit vector.
            </para>
            <para>
            The exponential of a quaternion <i>q</i> is defines as:
            </para>
            <para>
            e<sup><i>q</i></sup> = (cos<i>θ</i> + <i><b>u</b></i>sin<i>θ</i>)
            </para>
            <para>
            The result is returned as a quaternion with the form: 
            (cos(<i>θ</i>), <i><b>u</b></i>sin(<i>θ</i>))
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.CreateRotation(System.Single,DigitalRune.Mathematics.Algebra.Vector3F,System.Single,DigitalRune.Mathematics.Algebra.Vector3F,System.Single,DigitalRune.Mathematics.Algebra.Vector3F,System.Boolean)">
            <overloads>
            <summary>
            Creates a quaternion for a given rotation.
            </summary>
            </overloads>
            
            <summary>
            Gets an orientation quaternion from Euler angles (3 rotations around 3 axes).
            </summary>
            <param name="angle1">The first angle.</param>
            <param name="axis1">The first axis.</param>
            <param name="angle2">The second angle.</param>
            <param name="axis2">The second axis.</param>
            <param name="angle3">The third angle.</param>
            <param name="axis3">The third axis.</param>
            <param name="useGlobalAxes">
            If set to <see langword="true"/> then the rotation axes are fixed in world space. Otherwise 
            the rotation axes are fixed on the object and rotated with each rotation.
            </param>
            <remarks>
            A rotation is created from 3 sequential rotations. Each rotation is defined by an angle and 
            the rotation axis. This method can be used to create a quaternion from Euler angle 
            representations, often named Azimuth/Elevation/Roll, or Heading/Pitch/Roll.
            </remarks>
            <returns>
            The orientation quaternion that describes the same orientation as the given Euler angles.
            </returns>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The length of the axis vectors must not be <c>0</c>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Ln(DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Calculates the natural logarithm.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The natural logarithm ln(<i>q</i>).</returns>
            <remarks>
            <para>
            <strong>Important:</strong> This method requires that the quaternion is a unit quaternion.
            </para>
            <para>
            The natural logarithm of a quaternion <i>q</i> is defines as:
            </para>
            <para>
            ln(<i>q</i>) = ln(cos(<i>θ</i>) + <i><b>u</b></i>sin(<i>θ</i>)) 
                         = ln(e<sup><i><b>u</b>θ</i></sup>) = <i><b>u</b>θ</i>
            </para>
            <para>
            The result is returned as a quaternion with the form: (0, <i><b>u</b>θ</i>)
            </para>
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The given quaternion is not a unit quaternion.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Power(DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
            <summary>
            Calculates the power of a unit quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="t">The exponent.</param>
            <returns>The power of the unit quaternion.</returns>
            <remarks>
            <para>
            <strong>Important:</strong> This method requires that the quaternion is a unit quaternion.
            </para>
            <para>
            The power of quaternion is defined as:
            </para>
            <para>
            <i>q<sup>t</sup></i> = e<sup><i><b>u</b>tθ</i></sup> 
                                 = cos(<i>tθ</i>) + <i><b>u</b></i>sin(<i>tθ</i>)
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.GetAngle(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Calculates the angle between two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>The angle between the given vectors, such that 0 ≤ angle ≤ π.</returns>
            <remarks>
            <para>
            The quaternions are interpreted as orientations. The result is the angle of the quaternion
            which would rotate an object in the first orientation to the second orientation.
            </para>
            <para>
            The result is only valid for unit quaternions.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Parse(System.String)">
            <overloads>
            <summary>
            Converts the string representation of a quaternion to its <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> 
            equivalent.
            </summary>
            </overloads>
            
            <summary>
            Converts the string representation of a quaternion to its <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> 
            equivalent.
            </summary>
            <param name="s">A string representation of a 4-dimensional vector.</param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.QuaternionF.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a quaternion in a specified culture-specific format to
            its <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> equivalent.
            </summary>
            <param name="s">A string representation of a 4-dimensional vector.</param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>. 
            </param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.SorMethodD">
            <summary>
            An iterative solver using the Successive Over Relaxation (SOR) method (double-precision).
            </summary>
            <remarks>
            <para>
            See <see href="http://en.wikipedia.org/wiki/Successive_over-relaxation"/> for an introduction 
            to this method and for an explanation of the convergence criterion.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SorMethodD.RelaxationFactor">
            <summary>
            Gets or sets the relaxation factor.
            </summary>
            <value>The relaxation factor. The default value is <c>1</c>.</value>
            <remarks>
            When this value is between 0 and 1 the method is termed under-relaxation, and when this
            value is greater than 1 the method is termed over relaxation. If this value is 1, the SOR
            method is simply the Gauss-Seidel method.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.SorMethodD.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.SorMethodD"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.SorMethodD.Solve(DigitalRune.Mathematics.Algebra.MatrixD,DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Solves the specified linear system of equations <i>Ax=b</i>.
            </summary>
            <param name="matrixA">The matrix A.</param>
            <param name="initialX">
            The initial guess for x. If this value is <see langword="null"/>, a zero vector will be used
            as initial guess.
            </param>
            <param name="vectorB">The vector b.</param>
            <returns>The solution vector x.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vectorB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="matrixA"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements of <paramref name="initialX"/> does not match.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.SorMethodF">
            <summary>
            An iterative solver using the Successive Over Relaxation (SOR) method (single-precision).
            </summary>
            <remarks>
            <para>
            See <see href="http://en.wikipedia.org/wiki/Successive_over-relaxation"/> for an introduction 
            to this method and for an explanation of the convergence criterion.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.SorMethodF.RelaxationFactor">
            <summary>
            Gets or sets the relaxation factor.
            </summary>
            <value>The relaxation factor. The default value is <c>1</c>.</value>
            <remarks>
            When this value is between 0 and 1 the method is termed under-relaxation, and when this
            value is greater than 1 the method is termed over relaxation. If this value is 1, the SOR
            method is simply the Gauss-Seidel method.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.SorMethodF.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.SorMethodF"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.SorMethodF.Solve(DigitalRune.Mathematics.Algebra.MatrixF,DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Solves the specified linear system of equations <i>Ax=b</i>.
            </summary>
            <param name="matrixA">The matrix A.</param>
            <param name="initialX">
            The initial guess for x. If this value is <see langword="null"/>, a zero vector will be used
            as initial guess.
            </param>
            <param name="vectorB">The vector b.</param>
            <returns>The solution vector x.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrixA"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vectorB"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="matrixA"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements of <paramref name="initialX"/> does not match.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.Vector2D">
            <summary>
            Defines a 2-dimensional vector (double-precision).
            </summary>
            <remarks>
            The two components (x, y) are stored with double-precision.
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector2D.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector2D.One">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector2D.UnitX">
            <summary>
            Returns the x unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> (1, 0).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector2D.UnitY">
            <summary>
            Returns the value2 unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> (0, 1).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector2D.X">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector2D.Y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The component at <paramref name="index"/>.</value>
            <remarks>
            The index is zero based: x = vector[0], y = vector[1].
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.IsNaN">
            <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Double.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if a component of the vector is <see cref="F:System.Double.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.IsNumericallyNormalized">
            <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> is normalized; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Mathematics.Algebra.Vector2D.IsNumericallyNormalized"/> compares the length of this vector against 1.0 using
            the default tolerance value (see <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.IsNumericallyZero">
            <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
            <value>
            <see langword="true"/> if this vector is numerically zero; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            The length of this vector is compared to 0
            using the default tolerance value (see <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.Length">
            <summary>
            Gets or sets the length of this vector.
            </summary>
            <returns>The length of the this vector.</returns>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.LengthSquared">
            <summary>
            Returns the squared length of this vector.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.Normalized">
            <summary>
            Returns the normalized vector.
            </summary>
            <value>The normalized vector.</value>
            <remarks>
            The property does not change this instance. To normalize this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Vector2D.Normalize"/>.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.Orthonormal">
            <summary>
            Returns an arbitrary normalized <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> that is orthogonal to this vector.
            </summary>
            <value>An arbitrary normalized orthogonal <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.LargestComponent">
            <summary>
            Gets the value of the largest component.
            </summary>
            <value>The value of the largest component.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.IndexOfLargestComponent">
            <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
            <value>The index (zero-based) of the largest component.</value>
            <remarks>
            <para>
            This method returns the index of the component (X or Y) which has the largest value. The 
            index is zero-based, i.e. the index of X is 0. 
            </para>
            <para>
            If both components are equal, 0 is returned.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.SmallestComponent">
            <summary>
            Gets the value of the smallest component.
            </summary>
            <value>The value of the smallest component.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2D.IndexOfSmallestComponent">
            <summary>
            Gets the index (zero-based) of the smallest component.
            </summary>
            <value>The index (zero-based) of the smallest component.</value>
            <remarks>
            <para>
            This method returns the index of the component (X or Y) which has the smallest value. The 
            index is zero-based, i.e. the index of X is 0. 
            </para>
            <para>
            If both components are equal, 0 is returned.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.#ctor(System.Double,System.Double)">
            <overloads>
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <param name="x">Initial value for the x component.</param>
            <param name="y">Initial value for the y component.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.#ctor(System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <param name="componentValue">The initial value for 2 the vector components.</param>
            <remarks>
            All components are set to <paramref name="componentValue"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <param name="components">Array with the initial values for the components x, and y.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="components"/> has less than 2 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> class.
            </summary>
            <param name="components">List with the initial values for the components x, and y.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="components"/> has less than 2 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether a vector and a another object are equal.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Equals(DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToString">
            <overloads>
            <summary>
            Returns the string representation of a vector.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this vector.
            </summary>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this vector using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Negate(DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Addition(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Add(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Subtraction(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Subtract(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Multiply(DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Multiply(System.Double,DigitalRune.Mathematics.Algebra.Vector2D)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Multiply(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Multiply(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Division(DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component divided by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Divide(DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component divided by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Division(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Divide(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The component-wise division of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Equality(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Tests if two vectors are equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding components of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Inequality(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Tests if two vectors are not equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding components of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_GreaterThan(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Tests if each component of a vector is greater than the corresponding component of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater than its
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Tests if each component of a vector is greater or equal than the corresponding component of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater or equal
            than its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_LessThan(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Tests if each component of a vector is less than the corresponding component of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less than its
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Tests if each component of a vector is less or equal than the corresponding component of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less or equal than
            its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2D)~System.Double[]">
            <overloads>
            <summary>
            Converts a vector to another data type.
            </summary>
            </overloads>
            
            <summary>
            Converts a vector to an array of 2 <see langword="double"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
            The array with 2 <see langword="double"/> values. The order of the elements is: x, y
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToArray">
            <summary>
            Converts this vector to an array of 2 <see langword="double"/> values.
            </summary>
            <returns>
            The array with 2 <see langword="double"/> values. The order of the elements is: x, y
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2D)~System.Collections.Generic.List{System.Double}">
            <summary>
            Converts a vector to a list of 2 <see langword="double"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
            The list with 2 <see langword="double"/> values. The order of the elements is: x, y
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToList">
            <summary>
            Converts this vector to a list of 2 <see langword="double"/> values.
            </summary>
            <returns>
            The list with 2 <see langword="double"/> values. The order of the elements is: x, y
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2D)~DigitalRune.Mathematics.Algebra.Vector2F">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToVector2F">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Implicit(DigitalRune.Mathematics.Algebra.Vector2D)~DigitalRune.Mathematics.Algebra.VectorD">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/>.
            </summary>
            <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToVectorD">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Explicit(Microsoft.Xna.Framework.Vector2)~DigitalRune.Mathematics.Algebra.Vector2D">
            <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Vector2"/> (XNA Framework) to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> 
            (DigitalRune Mathematics).
            </summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.FromXna(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector2"/> 
            (XNA Framework).
            </summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2D)~Microsoft.Xna.Framework.Vector2">
            <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Vector2"/> (XNA Framework).
            </summary>
            <param name="vector">The <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> (DigitalRune Mathematics).</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ToXna">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector2"/> 
            (XNA Framework).
            </summary>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Absolute">
            <overloads>
            <summary>
            Sets each vector component to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each vector component to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Clamp(System.Double,System.Double)">
            <overloads>
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            </overloads>
            
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <remarks>
            This operation is carried out per component. Component values less than 
            <paramref name="min"/> are set to <paramref name="min"/>. Component values greater than 
            <paramref name="max"/> are set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            <remarks>
            Each vector component (X and Y) is compared to zero. If the component is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ClampToZero(System.Double)">
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each vector component (X and Y) is compared to zero. If the component is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
            <remarks>
            A vectors is normalized by dividing its components by the length of the vector.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.TryNormalize">
            <summary>
            Tries to normalize the vector.
            </summary>
            <returns>
            <see langword="true"/> if the vector was normalized; otherwise, <see langword="false"/> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ProjectTo(DigitalRune.Mathematics.Algebra.Vector2D)">
            <overloads>
            <summary>
            Projects a vector onto another vector.
            </summary>
            </overloads>
            
            <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
            <param name="target">The target vector.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Absolute(DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>A vector with the absolute values of the elements of the given vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <overloads>
            <summary>
            Determines whether two vectors are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two vectors are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
            <summary>
            Determines whether two vectors are equal (regarding a specific tolerance).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Clamp(DigitalRune.Mathematics.Algebra.Vector2D,System.Double,System.Double)">
            <summary>
            Returns a vector with the vector components clamped to the range [min, max].
            </summary>
            <param name="vector">The vector.</param>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <returns>A vector with clamped components.</returns>
            <remarks>
            This operation is carried out per component. Component values less than 
            <paramref name="min"/> are set to <paramref name="min"/>. Component values greater than 
            <paramref name="max"/> are set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ClampToZero(DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The vector with small components clamped to zero.</returns>
            <remarks>
            Each vector component (X and Y) is compared to zero. If the component is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ClampToZero(DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
            <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The vector with small components clamped to zero.</returns>
            <remarks>
            Each vector component (X and Y) is compared to zero. If the component is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Dot(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
            <remarks>
            The method calculates the dot product (also known as scalar product or inner product).
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.GetAngle(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Calculates the angle between two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The angle between the given vectors, such that 0 ≤ angle ≤ π.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="vector1"/> or <paramref name="vector2"/> has a length of 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Min(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Max(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The maximized vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.ProjectTo(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="target">The target vector.</param>
            <returns>
            The projection of <paramref name="vector"/> onto <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Parse(System.String)">
            <overloads>
            <summary>
            Converts the string representation of a 2-dimensional vector to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>
            equivalent.
            </summary>
            </overloads>
            
            <summary>
            Converts the string representation of a 2-dimensional vector to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>
            equivalent.
            </summary>
            <param name="s">A string representation of a 2-dimensional vector.</param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <remarks>
            This version of <see cref="M:DigitalRune.Mathematics.Algebra.Vector2D.Parse(System.String)"/> uses the <see cref="T:System.Globalization.CultureInfo"/> associated
            with the current thread.
            </remarks>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2D.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a 2-dimensional vector in a specified culture-specific
            format to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> equivalent.
            </summary>
            <param name="s">A string representation of a 2-dimensional vector.</param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>. 
            </param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.Vector2F">
            <summary>
            Defines a 2-dimensional vector (single-precision).
            </summary>
            <remarks>
            The two components (x, y) are stored with single-precision.
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector2F.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector2F.One">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector2F.UnitX">
            <summary>
            Returns the x unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> (1, 0).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector2F.UnitY">
            <summary>
            Returns the value2 unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> (0, 1).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector2F.X">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector2F.Y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The component at <paramref name="index"/>.</value>
            <remarks>
            The index is zero based: x = vector[0], y = vector[1].
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.IsNaN">
            <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Single.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if a component of the vector is <see cref="F:System.Single.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.IsNumericallyNormalized">
            <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> is normalized; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Mathematics.Algebra.Vector2F.IsNumericallyNormalized"/> compares the length of this vector against 1.0 using
            the default tolerance value (see <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.IsNumericallyZero">
            <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
            <value>
            <see langword="true"/> if this vector is numerically zero; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            The length of this vector is compared to 0 using the default tolerance value (see 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.Length">
            <summary>
            Gets or sets the length of this vector.
            </summary>
            <returns>The length of the this vector.</returns>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.LengthSquared">
            <summary>
            Returns the squared length of this vector.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.Normalized">
            <summary>
            Returns the normalized vector.
            </summary>
            <value>The normalized vector.</value>
            <remarks>
            The property does not change this instance. To normalize this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Vector2F.Normalize"/>.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.Orthonormal">
            <summary>
            Returns an arbitrary normalized <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> that is orthogonal to this vector.
            </summary>
            <value>An arbitrary normalized orthogonal <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.LargestComponent">
            <summary>
            Gets the value of the largest component.
            </summary>
            <value>The value of the largest component.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.IndexOfLargestComponent">
            <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
            <value>The index (zero-based) of the largest component.</value>
            <remarks>
            <para>
            This method returns the index of the component (X or Y) which has the largest value. The 
            index is zero-based, i.e. the index of X is 0. 
            </para>
            <para>
            If both components are equal, 0 is returned.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.SmallestComponent">
            <summary>
            Gets the value of the smallest component.
            </summary>
            <value>The value of the smallest component.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector2F.IndexOfSmallestComponent">
            <summary>
            Gets the index (zero-based) of the smallest component.
            </summary>
            <value>The index (zero-based) of the smallest component.</value>
            <remarks>
            <para>
            This method returns the index of the component (X or Y) which has the smallest value. The 
            index is zero-based, i.e. the index of X is 0. 
            </para>
            <para>
            If both components are equal, 0 is returned.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.#ctor(System.Single,System.Single)">
            <overloads>
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <param name="x">Initial value for the x component.</param>
            <param name="y">Initial value for the y component.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.#ctor(System.Single)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <param name="componentValue">The initial value for 2 the vector components.</param>
            <remarks>
            All components are set to <paramref name="componentValue"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <param name="components">Array with the initial values for the components x, and y.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="components"/> has less than 2 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> class.
            </summary>
            <param name="components">List with the initial values for the components x, and y.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="components"/> has less than 2 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether a vector and a another object are equal.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Equals(DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToString">
            <overloads>
            <summary>
            Returns the string representation of a vector.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this vector.
            </summary>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this vector using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Negate(DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Addition(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Add(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Subtraction(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Subtract(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Multiply(DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Multiply(System.Single,DigitalRune.Mathematics.Algebra.Vector2F)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Multiply(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Multiply(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Division(DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component divided by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Divide(DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component divided by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Division(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Divide(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The component-wise division of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Equality(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Tests if two vectors are equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding components of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Inequality(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Tests if two vectors are not equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding components of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_GreaterThan(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Tests if each component of a vector is greater than the corresponding component of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater than its
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Tests if each component of a vector is greater or equal than the corresponding component of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater or equal
            than its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_LessThan(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Tests if each component of a vector is less than the corresponding component of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less than its
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Tests if each component of a vector is less or equal than the corresponding component of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less or equal than
            its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2F)~System.Single[]">
            <overloads>
            <summary>
            Converts a vector to another data type.
            </summary>
            </overloads>
            
            <summary>
            Converts a vector to an array of 2 <see langword="float"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
            The array with 2 <see langword="float"/> values. The order of the elements is: x, y
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToArray">
            <summary>
            Converts this vector to an array of 2 <see langword="float"/> values.
            </summary>
            <returns>
            The array with 2 <see langword="float"/> values. The order of the elements is: x, y
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2F)~System.Collections.Generic.List{System.Single}">
            <summary>
            Converts a vector to a list of 2 <see langword="float"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
            The list with 2 <see langword="float"/> values. The order of the elements is: x, y
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToList">
            <summary>
            Converts this vector to a list of 2 <see langword="float"/> values.
            </summary>
            <returns>
            The list with 2 <see langword="float"/> values. The order of the elements is: x, y
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Implicit(DigitalRune.Mathematics.Algebra.Vector2F)~DigitalRune.Mathematics.Algebra.Vector2D">
            <overloads>
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> to another data type.
            </summary>
            </overloads>
            
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToVector2D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Implicit(DigitalRune.Mathematics.Algebra.Vector2F)~DigitalRune.Mathematics.Algebra.VectorF">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/>.
            </summary>
            <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToVectorF">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Explicit(Microsoft.Xna.Framework.Vector2)~DigitalRune.Mathematics.Algebra.Vector2F">
            <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Vector2"/> (XNA Framework) to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> 
            (DigitalRune Mathematics).
            </summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.FromXna(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector2"/> 
            (XNA Framework).
            </summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector2F)~Microsoft.Xna.Framework.Vector2">
            <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Vector2"/> (XNA Framework).
            </summary>
            <param name="vector">The <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> (DigitalRune Mathematics).</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ToXna">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector2"/> 
            (XNA Framework).
            </summary>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Absolute">
            <overloads>
            <summary>
            Sets each vector component to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each vector component to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Clamp(System.Single,System.Single)">
            <overloads>
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            </overloads>
            
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <remarks>
            This operation is carried out per component. Component values less than 
            <paramref name="min"/> are set to <paramref name="min"/>. Component values greater than 
            <paramref name="max"/> are set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            <remarks>
            Each vector component (X and Y) is compared to zero. If the component is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ClampToZero(System.Single)">
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each vector component (X and Y) is compared to zero. If the component is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
            <remarks>
            A vectors is normalized by dividing its components by the length of the vector.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.TryNormalize">
            <summary>
            Tries to normalize the vector.
            </summary>
            <returns>
            <see langword="true"/> if the vector was normalized; otherwise, <see langword="false"/> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ProjectTo(DigitalRune.Mathematics.Algebra.Vector2F)">
            <overloads>
            <summary>
            Projects a vector onto another vector.
            </summary>
            </overloads>
            
            <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
            <param name="target">The target vector.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Absolute(DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>A vector with the absolute values of the elements of the given vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <overloads>
            <summary>
            Determines whether two vectors are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two vectors are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
            <summary>
            Determines whether two vectors are equal (regarding a specific tolerance).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Clamp(DigitalRune.Mathematics.Algebra.Vector2F,System.Single,System.Single)">
            <summary>
            Returns a vector with the vector components clamped to the range [min, max].
            </summary>
            <param name="vector">The vector.</param>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <returns>A vector with clamped components.</returns>
            <remarks>
            This operation is carried out per component. Component values less than 
            <paramref name="min"/> are set to <paramref name="min"/>. Component values greater than 
            <paramref name="max"/> are set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ClampToZero(DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The vector with small components clamped to zero.</returns>
            <remarks>
            Each vector component (X and Y) is compared to zero. If the component is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ClampToZero(DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
            <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The vector with small components clamped to zero.</returns>
            <remarks>
            Each vector component (X and Y) is compared to zero. If the component is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Dot(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
            <remarks>
            The method calculates the dot product (also known as scalar product or inner product).
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.GetAngle(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Calculates the angle between two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The angle between the given vectors, such that 0 ≤ angle ≤ π.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="vector1"/> or <paramref name="vector2"/> has a length of 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Min(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Max(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The maximized vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.ProjectTo(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="target">The target vector.</param>
            <returns>
            The projection of <paramref name="vector"/> onto <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Parse(System.String)">
            <overloads>
            <summary>
            Converts the string representation of a 2-dimensional vector to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>
            equivalent.
            </summary>
            </overloads>
            
            <summary>
            Converts the string representation of a 2-dimensional vector to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>
            equivalent.
            </summary>
            <param name="s">A string representation of a 2-dimensional vector.</param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <remarks>
            This version of <see cref="M:DigitalRune.Mathematics.Algebra.Vector2F.Parse(System.String)"/> uses the <see cref="T:System.Globalization.CultureInfo"/> associated
            with the current thread.
            </remarks>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector2F.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a 2-dimensional vector in a specified culture-specific
            format to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> equivalent.
            </summary>
            <param name="s">A string representation of a 2-dimensional vector.</param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>. 
            </param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.Vector3D">
            <summary>
            Defines a 3-dimensional vector (double-precision).
            </summary>
            <remarks>
            The three components (x, y, z) are stored with double-precision.
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.One">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.UnitX">
            <summary>
            Returns the x unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> (1, 0, 0).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.UnitY">
            <summary>
            Returns the value2 unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> (0, 1, 0).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.UnitZ">
            <summary>
            Returns the z unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> (0, 0, 1).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Forward">
            <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> pointing forward (0, 0, −1).
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            <para>
            This property is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            <strong>DigitalRune</strong> uses the same coordinate systems as the
            <strong>XNA Framework:</strong> model space (object space, local space), world space 
            and view space are right-handed coordinate systems where, by default, the positive 
            x-axis points to the right, the positive y-axis points up, and the positive z-axis 
            points towards the viewer.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Backward">
            <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> pointing backward (0, 0, 1).
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            <para>
            This property is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            <strong>DigitalRune</strong> uses the same coordinate systems as the
            <strong>XNA Framework:</strong> model space (object space, local space), world space 
            and view space are right-handed coordinate systems where, by default, the positive 
            x-axis points to the right, the positive y-axis points up, and the positive z-axis 
            points towards the viewer.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Left">
            <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> pointing left (-1, 0, 0).
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            <para>
            This property is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            <strong>DigitalRune</strong> uses the same coordinate systems as the
            <strong>XNA Framework:</strong> model space (object space, local space), world space 
            and view space are right-handed coordinate systems where, by default, the positive 
            x-axis points to the right, the positive y-axis points up, and the positive z-axis 
            points towards the viewer.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Right">
            <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> pointing right (1, 0, 0).
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            <para>
            This property is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            <strong>DigitalRune</strong> uses the same coordinate systems as the
            <strong>XNA Framework:</strong> model space (object space, local space), world space 
            and view space are right-handed coordinate systems where, by default, the positive 
            x-axis points to the right, the positive y-axis points up, and the positive z-axis 
            points towards the viewer.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Up">
            <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> pointing up (0, 1, 0).
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            <para>
            This property is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            <strong>DigitalRune</strong> uses the same coordinate systems as the
            <strong>XNA Framework:</strong> model space (object space, local space), world space 
            and view space are right-handed coordinate systems where, by default, the positive 
            x-axis points to the right, the positive y-axis points up, and the positive z-axis 
            points towards the viewer.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Down">
            <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> pointing down (0, −1, 0).
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            <para>
            This property is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            <strong>DigitalRune</strong> uses the same coordinate systems as the
            <strong>XNA Framework:</strong> model space (object space, local space), world space 
            and view space are right-handed coordinate systems where, by default, the positive 
            x-axis points to the right, the positive y-axis points up, and the positive z-axis 
            points towards the viewer.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.X">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3D.Z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The component at <paramref name="index"/>.</value>
            <remarks>
            The index is zero based: x = vector[0], y = vector[1], z = vector[2].
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.IsNaN">
            <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Double.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if a component of the vector is <see cref="F:System.Double.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.IsNumericallyNormalized">
            <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> is normalized; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Mathematics.Algebra.Vector3D.IsNumericallyNormalized"/> compares the length of this vector against 1.0 using
            the default tolerance value (see <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.IsNumericallyZero">
            <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
            <value>
            <see langword="true"/> if this vector is numerically zero; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            The length of this vector is compared to 0 using the default tolerance value (see 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.Length">
            <summary>
            Gets or sets the length of this vector.
            </summary>
            <returns>The length of the this vector.</returns>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.LengthSquared">
            <summary>
            Returns the squared length of this vector.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.Normalized">
            <summary>
            Returns the normalized vector.
            </summary>
            <value>The normalized vector.</value>
            <remarks>
            The property does not change this instance. To normalize this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Vector3D.Normalize"/>.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.Orthonormal1">
            <summary>
            Returns an arbitrary normalized <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> that is orthogonal to this vector.
            </summary>
            <value>An arbitrary normalized orthogonal <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.Orthonormal2">
            <summary>
            Gets a normalized orthogonal <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> that is orthogonal to this 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> and to <see cref="P:DigitalRune.Mathematics.Algebra.Vector3D.Orthonormal1"/>.
            </summary>
            <value>
            A normalized orthogonal <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> which is orthogonal to this 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> and to <see cref="P:DigitalRune.Mathematics.Algebra.Vector3D.Orthonormal1"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.LargestComponent">
            <summary>
            Gets the value of the largest component.
            </summary>
            <value>The value of the largest component.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.IndexOfLargestComponent">
            <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
            <value>The index (zero-based) of the largest component.</value>
            <remarks>
            <para>
            This method returns the index of the component (X, Y or Z) which has the largest value. The 
            index is zero-based, i.e. the index of X is 0. 
            </para>
            <para>
            If there are several components with equally large values, the smallest index of these is 
            returned.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.SmallestComponent">
            <summary>
            Gets the value of the smallest component.
            </summary>
            <value>The value of the smallest component.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3D.IndexOfSmallestComponent">
            <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
            <value>The index (zero-based) of the largest component.</value>
            <remarks>
            <para>
            This method returns the index of the component (X, Y or Z) which has the smallest value. The 
            index is zero-based, i.e. the index of X is 0. 
            </para>
            <para>
            If there are several components with equally small values, the smallest index of these is 
            returned.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <overloads>
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <param name="x">Initial value for the x component.</param>
            <param name="y">Initial value for the y component.</param>
            <param name="z">Initial value for the z component.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.#ctor(System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <param name="componentValue">The initial value for 3 the vector components.</param>
            <remarks>
            All components are set to <paramref name="componentValue"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <param name="components">
            Array with the initial values for the components x, y and z.
            </param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="components"/> has less than 3 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> class.
            </summary>
            <param name="components">
            List with the initial values for the components x, y and z.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="components"/> has less than 3 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether a vector and a another object are equal.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Equals(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToString">
            <overloads>
            <summary>
            Returns the string representation of a vector.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this vector.
            </summary>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this vector using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Negate(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Addition(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Add(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Subtraction(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Subtract(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Multiply(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Multiply(System.Double,DigitalRune.Mathematics.Algebra.Vector3D)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Multiply(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Multiply(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Division(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component divided by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Divide(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component divided by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Division(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Divide(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The component-wise division of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Equality(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Tests if two vectors are equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding components of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Inequality(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Tests if two vectors are not equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding components of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_GreaterThan(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Tests if each component of a vector is greater than the corresponding component of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater than its
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Tests if each component of a vector is greater or equal than the corresponding component of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater or equal
            than its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_LessThan(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Tests if each component of a vector is less than the corresponding component of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less than its 
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Tests if each component of a vector is less or equal than the corresponding component of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less or equal than
            its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3D)~System.Double[]">
            <overloads>
            <summary>
            Converts a vector to another data type.
            </summary>
            </overloads>
            
            <summary>
            Converts a vector to an array of 3 <see langword="double"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
            The array with 3 <see langword="double"/> values. The order of the elements is: x, y, z
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToArray">
            <summary>
            Converts this vector to an array of 3 <see langword="double"/> values.
            </summary>
            <returns>
            The array with 3 <see langword="double"/> values. The order of the elements is: x, y, z
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3D)~System.Collections.Generic.List{System.Double}">
            <summary>
            Converts a vector to a list of 3 <see langword="double"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion. The order of the elements is: x, y, z</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToList">
            <summary>
            Converts this vector to a list of 3 <see langword="double"/> values.
            </summary>
            <returns>The result of the conversion. The order of the elements is: x, y, z</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3D)~DigitalRune.Mathematics.Algebra.Vector3F">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToVector3F">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Implicit(DigitalRune.Mathematics.Algebra.Vector3D)~DigitalRune.Mathematics.Algebra.VectorD">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToVectorD">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Explicit(Microsoft.Xna.Framework.Vector3)~DigitalRune.Mathematics.Algebra.Vector3D">
            <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Vector3"/> (XNA Framework) to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>
            (DigitalRune Mathematics).
            </summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.FromXna(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector3"/> 
            (XNA Framework).
            </summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3D)~Microsoft.Xna.Framework.Vector3">
            <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Vector3"/> (XNA Framework).
            </summary>
            <param name="vector">The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> (DigitalRune Mathematics).</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToXna">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector3"/> 
            (XNA Framework).
            </summary>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Absolute">
            <overloads>
            <summary>
            Sets each vector component to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each vector component to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Clamp(System.Double,System.Double)">
            <overloads>
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            </overloads>
            
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <remarks>
            This operation is carried out per component. Component values less than 
            <paramref name="min"/> are set to <paramref name="min"/>. Component values greater than 
            <paramref name="max"/> are set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            <remarks>
            Each vector component is compared to zero. If the component is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ClampToZero(System.Double)">
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each vector component is compared to zero. If the component is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
            <remarks>
            A vectors is normalized by dividing its components by the length of the vector.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.TryNormalize">
            <summary>
            Tries to normalize the vector.
            </summary>
            <returns>
            <see langword="true"/> if the vector was normalized; otherwise, <see langword="false"/> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ProjectTo(DigitalRune.Mathematics.Algebra.Vector3D)">
            <overloads>
            <summary>
            Projects a vector onto another vector.
            </summary>
            </overloads>
            
            <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
            <param name="target">The target vector.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ToCrossProductMatrix">
            <summary>
            Returns the cross product matrix (skew matrix) of this vector.
            </summary>
            <returns>The cross product matrix of this vector.</returns>
            <remarks>
            <c>Vector3D.Cross(v, w)</c> is the same as <c>v.ToCrossProductMatrix() * w</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Absolute(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>A vector with the absolute values of the elements of the given vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <overloads>
            <summary>
            Determines whether two vectors are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two vectors are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
            <summary>
            Determines whether two vectors are equal (regarding a specific tolerance).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Clamp(DigitalRune.Mathematics.Algebra.Vector3D,System.Double,System.Double)">
            <summary>
            Returns a vector with the vector components clamped to the range [min, max].
            </summary>
            <param name="vector">The vector.</param>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <returns>A vector with clamped components.</returns>
            <remarks>
            This operation is carried out per component. Component values less than 
            <paramref name="min"/> are set to <paramref name="min"/>. Component values greater than 
            <paramref name="max"/> are set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ClampToZero(DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The vector with small components clamped to zero.</returns>
            <remarks>
            Each vector component (X, Y and Z) is compared to zero. If the component is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ClampToZero(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
            <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The vector with small components clamped to zero.</returns>
            <remarks>
            Each vector component (X, Y and Z) is compared to zero. If the component is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Dot(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
            <remarks>
            The method calculates the dot product (also known as scalar product or inner product).
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Cross(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The cross product.</returns>
            <remarks>
            The method calculates the cross product (also known as vector product or outer product).
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.GetAngle(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Calculates the angle between two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The angle between the given vectors, such that 0 ≤ angle ≤ π.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="vector1"/> or <paramref name="vector2"/> has a length of 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Min(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Max(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The maximized vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.ProjectTo(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="target">The target vector.</param>
            <returns>
            The projection of <paramref name="vector"/> onto <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Parse(System.String)">
            <overloads>
            <summary>
            Converts the string representation of a 3-dimensional vector to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>
            equivalent.
            </summary>
            </overloads>
            
            <summary>
            Converts the string representation of a 3-dimensional vector to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>
            equivalent.
            </summary>
            <param name="s">A string representation of a 3-dimensional vector.</param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <remarks>
            This version of <see cref="M:DigitalRune.Mathematics.Algebra.Vector3D.Parse(System.String)"/> uses the <see cref="T:System.Globalization.CultureInfo"/> associated
            with the current thread.
            </remarks>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3D.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a 3-dimensional vector in a specified culture-specific
            format to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> equivalent.
            </summary>
            <param name="s">A string representation of a 3-dimensional vector.</param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>. 
            </param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.Vector3F">
            <summary>
            Defines a 3-dimensional vector (single-precision).
            </summary>
            <remarks>
            The three components (x, y, z) are stored with single-precision.
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.One">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.UnitX">
            <summary>
            Returns the x unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> (1, 0, 0).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.UnitY">
            <summary>
            Returns the value2 unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> (0, 1, 0).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.UnitZ">
            <summary>
            Returns the z unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> (0, 0, 1).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Forward">
            <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> pointing forward (0, 0, −1).
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            <para>
            This property is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            <strong>DigitalRune</strong> uses the same coordinate systems as the
            <strong>XNA Framework:</strong> model space (object space, local space), world space 
            and view space are right-handed coordinate systems where, by default, the positive 
            x-axis points to the right, the positive y-axis points up, and the positive z-axis 
            points towards the viewer.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Backward">
            <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> pointing backward (0, 0, 1).
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            <para>
            This property is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            <strong>DigitalRune</strong> uses the same coordinate systems as the
            <strong>XNA Framework:</strong> model space (object space, local space), world space 
            and view space are right-handed coordinate systems where, by default, the positive 
            x-axis points to the right, the positive y-axis points up, and the positive z-axis 
            points towards the viewer.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Left">
            <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> pointing left (-1, 0, 0).
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            <para>
            This property is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            <strong>DigitalRune</strong> uses the same coordinate systems as the
            <strong>XNA Framework:</strong> model space (object space, local space), world space 
            and view space are right-handed coordinate systems where, by default, the positive 
            x-axis points to the right, the positive y-axis points up, and the positive z-axis 
            points towards the viewer.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Right">
            <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> pointing right (1, 0, 0).
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            <para>
            This property is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            <strong>DigitalRune</strong> uses the same coordinate systems as the
            <strong>XNA Framework:</strong> model space (object space, local space), world space 
            and view space are right-handed coordinate systems where, by default, the positive 
            x-axis points to the right, the positive y-axis points up, and the positive z-axis 
            points towards the viewer.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Up">
            <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> pointing up (0, 1, 0).
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            <para>
            This property is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            <strong>DigitalRune</strong> uses the same coordinate systems as the
            <strong>XNA Framework:</strong> model space (object space, local space), world space 
            and view space are right-handed coordinate systems where, by default, the positive 
            x-axis points to the right, the positive y-axis points up, and the positive z-axis 
            points towards the viewer.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Down">
            <summary>
            Returns a unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> pointing down (0, −1, 0).
            (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            <para>
            This property is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </para>
            <para>
            <strong>DigitalRune</strong> uses the same coordinate systems as the
            <strong>XNA Framework:</strong> model space (object space, local space), world space 
            and view space are right-handed coordinate systems where, by default, the positive 
            x-axis points to the right, the positive y-axis points up, and the positive z-axis 
            points towards the viewer.
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.X">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector3F.Z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The component at <paramref name="index"/>.</value>
            <remarks>
            The index is zero based: x = vector[0], y = vector[1], z = vector[2].
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.IsNaN">
            <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Single.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if a component of the vector is <see cref="F:System.Single.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.IsNumericallyNormalized">
            <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
            <value>
            <see langword="true"/> if this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> is normalized; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Mathematics.Algebra.Vector3F.IsNumericallyNormalized"/> compares the length of this vector against 1.0 using
            the default tolerance value (see <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.IsNumericallyZero">
            <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
            <value>
            <see langword="true"/> if this vector is numerically zero; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            The length of this vector is compared to 0 using the default tolerance value (see 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.Length">
            <summary>
            Gets or sets the length of this vector.
            </summary>
            <returns>The length of the this vector.</returns>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.LengthSquared">
            <summary>
            Returns the squared length of this vector.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.Normalized">
            <summary>
            Returns the normalized vector.
            </summary>
            <value>The normalized vector.</value>
            <remarks>
            The property does not change this instance. To normalize this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Vector3F.Normalize"/>.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.Orthonormal1">
            <summary>
            Returns an arbitrary normalized <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> that is orthogonal to this vector.
            </summary>
            <value>An arbitrary normalized orthogonal <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.Orthonormal2">
            <summary>
            Gets a normalized orthogonal <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> that is orthogonal to this 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> and to <see cref="P:DigitalRune.Mathematics.Algebra.Vector3F.Orthonormal1"/>.
            </summary>
            <value>
            A normalized orthogonal <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> which is orthogonal to this 
            <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> and to <see cref="P:DigitalRune.Mathematics.Algebra.Vector3F.Orthonormal1"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.LargestComponent">
            <summary>
            Gets the value of the largest component.
            </summary>
            <value>The value of the largest component.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.IndexOfLargestComponent">
            <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
            <value>The index (zero-based) of the largest component.</value>
            <remarks>
            <para>
            This method returns the index of the component (X, Y or Z) which has the largest value. The 
            index is zero-based, i.e. the index of X is 0. 
            </para>
            <para>
            If there are several components with equally large values, the smallest index of these is 
            returned.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.SmallestComponent">
            <summary>
            Gets the value of the smallest component.
            </summary>
            <value>The value of the smallest component.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector3F.IndexOfSmallestComponent">
            <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
            <value>The index (zero-based) of the largest component.</value>
            <remarks>
            <para>
            This method returns the index of the component (X, Y or Z) which has the smallest value. The 
            index is zero-based, i.e. the index of X is 0. 
            </para>
            <para>
            If there are several components with equally small values, the smallest index of these is 
            returned.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.#ctor(System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <param name="x">Initial value for the x component.</param>
            <param name="y">Initial value for the y component.</param>
            <param name="z">Initial value for the z component.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.#ctor(System.Single)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <param name="componentValue">The initial value for 3 the vector components.</param>
            <remarks>
            All components are set to <paramref name="componentValue"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <param name="components">
            Array with the initial values for the components x, y and z.
            </param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="components"/> has less than 3 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> class.
            </summary>
            <param name="components">
            List with the initial values for the components x, y and z.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="components"/> has less than 3 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether a vector and a another object are equal.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Equals(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToString">
            <overloads>
            <summary>
            Returns the string representation of a vector.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this vector.
            </summary>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this vector using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Negate(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Addition(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Add(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Subtraction(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Subtract(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Multiply(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Multiply(System.Single,DigitalRune.Mathematics.Algebra.Vector3F)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Multiply(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Multiply(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Division(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component divided by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Divide(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component divided by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Division(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Divide(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The component-wise division of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Equality(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Tests if two vectors are equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding components of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Inequality(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Tests if two vectors are not equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding components of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_GreaterThan(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Tests if each component of a vector is greater than the corresponding component of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater than its
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Tests if each component of a vector is greater or equal than the corresponding component of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater or equal
            than its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_LessThan(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Tests if each component of a vector is less than the corresponding component of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less than its 
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Tests if each component of a vector is less or equal than the corresponding component of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less or equal than
            its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3F)~System.Single[]">
            <overloads>
            <summary>
            Converts a vector to another data type.
            </summary>
            </overloads>
            
            <summary>
            Converts a vector to an array of 3 <see langword="float"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
            The array with 3 <see langword="float"/> values. The order of the elements is: x, y, z
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToArray">
            <summary>
            Converts this vector to an array of 3 <see langword="float"/> values.
            </summary>
            <returns>
            The array with 3 <see langword="float"/> values. The order of the elements is: x, y, z
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3F)~System.Collections.Generic.List{System.Single}">
            <summary>
            Converts a vector to a list of 3 <see langword="float"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion. The order of the elements is: x, y, z</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToList">
            <summary>
            Converts this vector to a list of 3 <see langword="float"/> values.
            </summary>
            <returns>The result of the conversion. The order of the elements is: x, y, z</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Implicit(DigitalRune.Mathematics.Algebra.Vector3F)~DigitalRune.Mathematics.Algebra.Vector3D">
            <overloads>
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> to another data type.
            </summary>
            </overloads>
            
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToVector3D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Implicit(DigitalRune.Mathematics.Algebra.Vector3F)~DigitalRune.Mathematics.Algebra.VectorF">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToVectorF">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Explicit(Microsoft.Xna.Framework.Vector3)~DigitalRune.Mathematics.Algebra.Vector3F">
            <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Vector3"/> (XNA Framework) to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>
            (DigitalRune Mathematics).
            </summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.FromXna(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector3"/> 
            (XNA Framework).
            </summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector3F)~Microsoft.Xna.Framework.Vector3">
            <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Vector3"/> (XNA Framework).
            </summary>
            <param name="vector">The <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> (DigitalRune Mathematics).</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToXna">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector3"/> 
            (XNA Framework).
            </summary>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Absolute">
            <overloads>
            <summary>
            Sets each vector component to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each vector component to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Clamp(System.Single,System.Single)">
            <overloads>
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            </overloads>
            
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <remarks>
            This operation is carried out per component. Component values less than 
            <paramref name="min"/> are set to <paramref name="min"/>. Component values greater than 
            <paramref name="max"/> are set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            <remarks>
            Each vector component is compared to zero. If the component is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ClampToZero(System.Single)">
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each vector component is compared to zero. If the component is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
            <remarks>
            A vectors is normalized by dividing its components by the length of the vector.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.TryNormalize">
            <summary>
            Tries to normalize the vector.
            </summary>
            <returns>
            <see langword="true"/> if the vector was normalized; otherwise, <see langword="false"/> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ProjectTo(DigitalRune.Mathematics.Algebra.Vector3F)">
            <overloads>
            <summary>
            Projects a vector onto another vector.
            </summary>
            </overloads>
            
            <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
            <param name="target">The target vector.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ToCrossProductMatrix">
            <summary>
            Returns the cross product matrix (skew matrix) of this vector.
            </summary>
            <returns>The cross product matrix of this vector.</returns>
            <remarks>
            <c>Vector3F.Cross(v, w)</c> is the same as <c>v.ToCrossProductMatrix() * w</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Absolute(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>A vector with the absolute values of the elements of the given vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <overloads>
            <summary>
            Determines whether two vectors are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two vectors are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Determines whether two vectors are equal (regarding a specific tolerance).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Clamp(DigitalRune.Mathematics.Algebra.Vector3F,System.Single,System.Single)">
            <summary>
            Returns a vector with the vector components clamped to the range [min, max].
            </summary>
            <param name="vector">The vector.</param>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <returns>A vector with clamped components.</returns>
            <remarks>
            This operation is carried out per component. Component values less than 
            <paramref name="min"/> are set to <paramref name="min"/>. Component values greater than 
            <paramref name="max"/> are set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ClampToZero(DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The vector with small components clamped to zero.</returns>
            <remarks>
            Each vector component (X, Y and Z) is compared to zero. If the component is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ClampToZero(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The vector with small components clamped to zero.</returns>
            <remarks>
            Each vector component (X, Y and Z) is compared to zero. If the component is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Dot(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
            <remarks>
            The method calculates the dot product (also known as scalar product or inner product).
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Cross(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The cross product.</returns>
            <remarks>
            The method calculates the cross product (also known as vector product or outer product).
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.GetAngle(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Calculates the angle between two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The angle between the given vectors, such that 0 ≤ angle ≤ π.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="vector1"/> or <paramref name="vector2"/> has a length of 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Min(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Max(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The maximized vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.ProjectTo(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="target">The target vector.</param>
            <returns>
            The projection of <paramref name="vector"/> onto <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Parse(System.String)">
            <overloads>
            <summary>
            Converts the string representation of a 3-dimensional vector to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>
            equivalent.
            </summary>
            </overloads>
            
            <summary>
            Converts the string representation of a 3-dimensional vector to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>
            equivalent.
            </summary>
            <param name="s">A string representation of a 3-dimensional vector.</param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <remarks>
            This version of <see cref="M:DigitalRune.Mathematics.Algebra.Vector3F.Parse(System.String)"/> uses the <see cref="T:System.Globalization.CultureInfo"/> associated
            with the current thread.
            </remarks>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector3F.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a 3-dimensional vector in a specified culture-specific
            format to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> equivalent.
            </summary>
            <param name="s">A string representation of a 3-dimensional vector.</param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>. 
            </param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.Vector4D">
            <summary>
            Defines a 4-dimensional vector (double-precision).
            </summary>
            <remarks>
            The four components (x, y, z, w) are stored with double-precision.
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.One">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.UnitX">
            <summary>
            Returns the x unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.UnitY">
            <summary>
            Returns the y unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.UnitZ">
            <summary>
            Returns the z unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.UnitW">
            <summary>
            Returns the w unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.X">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.Y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.Z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4D.W">
            <summary>
            The w component.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The component at <paramref name="index"/>.</value>
            <remarks>
            The index is zero based: x = vector[0], y = vector[1] ... w = vector[3].
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.IsNaN">
            <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Double.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if a component of the vector is <see cref="F:System.Double.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.IsNumericallyNormalized">
            <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
            <value>
            <see langword="true"/> if this vector is numerically normalized; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Mathematics.Algebra.Vector4D.IsNumericallyNormalized"/> compares the length of this vector against 1.0 using
            the default tolerance value (see <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.IsNumericallyZero">
            <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
            <value>
            <see langword="true"/> if this vector is numerically zero; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            The length of this vector is compared to 0 using the default tolerance value (see 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.Length">
            <summary>
            Gets or sets the length of this vector.
            </summary>
            <returns>The length of the this vector.</returns>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.LengthSquared">
            <summary>
            Returns the squared length of this vector.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.Normalized">
            <summary>
            Returns the normalized vector.
            </summary>
            <value>The normalized vector.</value>
            <remarks>
            The property does not change this instance. To normalize this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Vector4D.Normalize"/>.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.XYZ">
            <summary>
            Gets or sets the components x, y and z as a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <value>The 3-dimensional vector (x, y, z).</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.LargestComponent">
            <summary>
            Gets the value of the largest component.
            </summary>
            <value>The value of the largest component.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.IndexOfLargestComponent">
            <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
            <value>The index (zero-based) of the largest component.</value>
            <remarks>
            <para>
            This method returns the index of the component (X, Y, Z or W) which has the largest value. 
            The index is zero-based, i.e. the index of X is 0. 
            </para>
            <para>
            If there are several components with equally large values, the smallest index of these is 
            returned.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.SmallestComponent">
            <summary>
            Gets the value of the largest component.
            </summary>
            <value>The value of the largest component.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4D.IndexOfSmallestComponent">
            <summary>
            Gets the index (zero-based) of the smallest component.
            </summary>
            <value>The index (zero-based) of the smallest component.</value>
            <remarks>
            <para>
            This method returns the index of the component (X, Y, Z or W) which has the smallest value. 
            The index is zero-based, i.e. the index of X is 0. 
            </para>
            <para>
            If there are several components with equally small values, the smallest index of these is 
            returned.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <overloads>
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <param name="x">Initial value for the x component.</param>
            <param name="y">Initial value for the y component.</param>
            <param name="z">Initial value for the z component.</param>
            <param name="w">Initial value for the z component.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.#ctor(System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <param name="componentValue">The initial value for 4 the vector components.</param>
            <remarks>
            All components are set to <paramref name="componentValue"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <param name="components">
            Array with the initial values for the components x, y, z and w.
            </param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="components"/> has less than 4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <param name="components">
            List with the initial values for the components x, y, z and w.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="components"/> has less than 4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.#ctor(DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> class.
            </summary>
            <param name="vector">The vector (x, y, z).</param>
            <param name="w">The w component.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether a vector and a another object are equal.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Equals(DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToString">
            <overloads>
            <summary>
            Returns the string representation of a vector.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this vector.
            </summary>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this vector using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Negate(DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Addition(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Add(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Subtraction(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Subtract(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Multiply(DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Multiply(System.Double,DigitalRune.Mathematics.Algebra.Vector4D)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Multiply(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Multiply(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Division(DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component divided by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Divide(DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component divided by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Division(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Divide(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The component-wise division of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Equality(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Tests if two vectors are equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding components of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Inequality(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Tests if two vectors are not equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding components of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_GreaterThan(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Tests if each component of a vector is greater than the corresponding component of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater than its
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Tests if each component of a vector is greater or equal than the corresponding component of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater or equal
            than its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_LessThan(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Tests if each component of a vector is less than the corresponding component of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less than its 
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Tests if each component of a vector is less or equal than the corresponding component of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less or equal than
            its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4D)~System.Double[]">
            <overloads>
            <summary>
            Converts a vector to another data type.
            </summary>
            </overloads>
            
            <summary>
            Converts a vector to an array of 4 <see langword="double"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
            The array with 4 <see langword="double"/> values. The order of the elements is: x, y, z, w
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToArray">
            <summary>
            Converts this vector to an array of 4 <see langword="double"/> values.
            </summary>
            <returns>
            The array with 4 <see langword="double"/> values. The order of the elements is: x, y, z, w
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4D)~System.Collections.Generic.List{System.Double}">
            <summary>
            Converts a vector to a list of 4 <see langword="double"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
            The list with 4 <see langword="double"/> values. The order of the elements is: x, y, z, w
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToList">
            <summary>
            Converts this vector to a list of 4 <see langword="double"/> values.
            </summary>
            <returns>
            The list with 4 <see langword="double"/> values. The order of the elements is: x, y, z, w
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4D)~DigitalRune.Mathematics.Algebra.Vector4F">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToVector4F">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Implicit(DigitalRune.Mathematics.Algebra.Vector4D)~DigitalRune.Mathematics.Algebra.VectorD">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToVectorD">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Explicit(Microsoft.Xna.Framework.Vector4)~DigitalRune.Mathematics.Algebra.Vector4D">
            <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Vector4"/> (XNA Framework) to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>
            (DigitalRune Mathematics).
            </summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector4"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.FromXna(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector4"/> 
            (XNA Framework).
            </summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector4"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4D)~Microsoft.Xna.Framework.Vector4">
            <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/> (XNA Framework).
            </summary>
            <param name="vector">The <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> (DigitalRune Mathematics).</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ToXna">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector4"/> 
            (XNA Framework).
            </summary>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Absolute">
            <overloads>
            <summary>
            Sets each vector component to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each vector component to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Clamp(System.Double,System.Double)">
            <overloads>
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            </overloads>
            
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <remarks>
            This operation is carried out per component. Component values less than 
            <paramref name="min"/> are set to <paramref name="min"/>. Component values greater than 
            <paramref name="max"/> are set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            <remarks>
            Each vector component is compared to zero. If the component is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ClampToZero(System.Double)">
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each vector component is compared to zero. If the component is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
            <remarks>
            A vectors is normalized by dividing its components by the length of the vector.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.TryNormalize">
            <summary>
            Tries to normalize the vector.
            </summary>
            <returns>
            <see langword="true"/> if the vector was normalized; otherwise, <see langword="false"/> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ProjectTo(DigitalRune.Mathematics.Algebra.Vector4D)">
            <overloads>
            <summary>
            Projects a vector onto another vector.
            </summary>
            </overloads>
            
            <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
            <param name="target">The target vector.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Absolute(DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>A vector with the absolute values of the elements of the given vector.</returns>
            <remarks>
            The original vector is copied and then each vector element is set to its absolute value (see
            <see cref="M:System.Math.Abs(System.Single)"/>).
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <overloads>
            <summary>
            Determines whether two vectors are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two vectors are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
            <summary>
            Determines whether two vectors are equal (regarding a specific tolerance).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Clamp(DigitalRune.Mathematics.Algebra.Vector4D,System.Double,System.Double)">
            <summary>
            Returns a vector with the vector components clamped to the range [min, max].
            </summary>
            <param name="vector">The vector.</param>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <returns>A vector with clamped components.</returns>
            <remarks>
            This operation is carried out per component. Component values less than 
            <paramref name="min"/> are set to <paramref name="min"/>. Component values greater than 
            <paramref name="max"/> are set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ClampToZero(DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The vector with small components clamped to zero.</returns>
            <remarks>
            Each vector component (X, Y, Z and W) is compared to zero. If the component is in the
            interval [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to 
            zero, otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ClampToZero(DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
            <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The vector with small components clamped to zero.</returns>
            <remarks>
            Each vector component (X, Y, Z and W) is compared to zero. If the component is in the
            interval [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Dot(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
            <remarks>
            The method calculates the dot product (also known as scalar product or inner product).
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.HomogeneousDivide(DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Performs the homogeneous divide or perspective divide: X, Y and Z are divided by W.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The vector (X/W, Y/W, Z/W).</returns>
            <exception cref="T:System.DivideByZeroException">
            Component W is 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Min(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Max(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The maximized vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.ProjectTo(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="target">The target vector.</param>
            <returns>
            The projection of <paramref name="vector"/> onto <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Parse(System.String)">
            <overloads>
            <summary>
            Converts the string representation of a 4-dimensional vector to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>
            equivalent.
            </summary>
            </overloads>
            
            <summary>
            Converts the string representation of a 4-dimensional vector to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>
            equivalent.
            </summary>
            <param name="s">A string representation of a 4-dimensional vector.</param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4D.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a 4-dimensional vector in a specified culture-specific
            format to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> equivalent.
            </summary>
            <param name="s">A string representation of a 4-dimensional vector.</param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>. 
            </param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> that represents the vector specified by the <paramref name="s"/>
            parameter.</returns>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.Vector4F">
            <summary>
            Defines a 4-dimensional vector (single-precision).
            </summary>
            <remarks>
            The four components (x, y, z, w) are stored with single-precision.
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.Zero">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.One">
            <summary>
            Returns a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.UnitX">
            <summary>
            Returns the x unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.UnitY">
            <summary>
            Returns the y unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.UnitZ">
            <summary>
            Returns the z unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.UnitW">
            <summary>
            Returns the w unit <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.X">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.Y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.Z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Algebra.Vector4F.W">
            <summary>
            The w component.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The component at <paramref name="index"/>.</value>
            <remarks>
            The index is zero based: x = vector[0], y = vector[1] ... w = vector[3].
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.IsNaN">
            <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Single.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if a component of the vector is <see cref="F:System.Single.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.IsNumericallyNormalized">
            <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
            <value>
            <see langword="true"/> if this vector is numerically normalized; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Mathematics.Algebra.Vector4F.IsNumericallyNormalized"/> compares the length of this vector against 1.0 using
            the default tolerance value (see <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.IsNumericallyZero">
            <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
            <value>
            <see langword="true"/> if this vector is numerically zero; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            The length of this vector is compared to 0 using the default tolerance value (see 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.Length">
            <summary>
            Gets or sets the length of this vector.
            </summary>
            <returns>The length of the this vector.</returns>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.LengthSquared">
            <summary>
            Returns the squared length of this vector.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.Normalized">
            <summary>
            Returns the normalized vector.
            </summary>
            <value>The normalized vector.</value>
            <remarks>
            The property does not change this instance. To normalize this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.Vector4F.Normalize"/>.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.XYZ">
            <summary>
            Gets or sets the components x, y and z as a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <value>The 3-dimensional vector (x, y, z).</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.LargestComponent">
            <summary>
            Gets the value of the largest component.
            </summary>
            <value>The value of the largest component.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.IndexOfLargestComponent">
            <summary>
            Gets the index (zero-based) of the largest component.
            </summary>
            <value>The index (zero-based) of the largest component.</value>
            <remarks>
            <para>
            This method returns the index of the component (X, Y, Z or W) which has the largest value. 
            The index is zero-based, i.e. the index of X is 0. 
            </para>
            <para>
            If there are several components with equally large values, the smallest index of these is 
            returned.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.SmallestComponent">
            <summary>
            Gets the value of the largest component.
            </summary>
            <value>The value of the largest component.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.Vector4F.IndexOfSmallestComponent">
            <summary>
            Gets the index (zero-based) of the smallest component.
            </summary>
            <value>The index (zero-based) of the smallest component.</value>
            <remarks>
            <para>
            This method returns the index of the component (X, Y, Z or W) which has the smallest value. 
            The index is zero-based, i.e. the index of X is 0. 
            </para>
            <para>
            If there are several components with equally small values, the smallest index of these is 
            returned.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="x">Initial value for the x component.</param>
            <param name="y">Initial value for the y component.</param>
            <param name="z">Initial value for the z component.</param>
            <param name="w">Initial value for the z component.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.#ctor(System.Single)">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="componentValue">The initial value for 4 the vector components.</param>
            <remarks>
            All components are set to <paramref name="componentValue"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="components">
            Array with the initial values for the components x, y, z and w.
            </param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="components"/> has less than 4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="components">
            List with the initial values for the components x, y, z and w.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="components"/> has less than 4 elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="components"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.#ctor(DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> class.
            </summary>
            <param name="vector">The vector (x, y, z).</param>
            <param name="w">The w component.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether a vector and a another object are equal.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Equals(DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToString">
            <overloads>
            <summary>
            Returns the string representation of a vector.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this vector.
            </summary>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this vector using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_UnaryNegation(DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Negate(DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Addition(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Add(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Subtraction(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Subtract(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Multiply(DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by scalar.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Multiply(System.Single,DigitalRune.Mathematics.Algebra.Vector4F)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component multiplied by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Multiply(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Multiply(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Division(DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component divided by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Divide(DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each component divided by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Division(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The component-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Divide(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Divides the components of a vector by the components of another 
            vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The component-wise division of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Equality(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Tests if two vectors are equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding components of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Inequality(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Tests if two vectors are not equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding components of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_GreaterThan(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Tests if each component of a vector is greater than the corresponding component of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater than its
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Tests if each component of a vector is greater or equal than the corresponding component of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater or equal
            than its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_LessThan(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Tests if each component of a vector is less than the corresponding component of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less than its 
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Tests if each component of a vector is less or equal than the corresponding component of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less or equal than
            its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4F)~System.Single[]">
            <overloads>
            <summary>
            Converts a vector to another data type.
            </summary>
            </overloads>
            
            <summary>
            Converts a vector to an array of 4 <see langword="float"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
            The array with 4 <see langword="float"/> values. The order of the elements is: x, y, z, w
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToArray">
            <summary>
            Converts this vector to an array of 4 <see langword="float"/> values.
            </summary>
            <returns>
            The array with 4 <see langword="float"/> values. The order of the elements is: x, y, z, w
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4F)~System.Collections.Generic.List{System.Single}">
            <summary>
            Converts a vector to a list of 4 <see langword="float"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
            The list with 4 <see langword="float"/> values. The order of the elements is: x, y, z, w
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToList">
            <summary>
            Converts this vector to a list of 4 <see langword="float"/> values.
            </summary>
            <returns>
            The list with 4 <see langword="float"/> values. The order of the elements is: x, y, z, w
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Implicit(DigitalRune.Mathematics.Algebra.Vector4F)~DigitalRune.Mathematics.Algebra.Vector4D">
            <overloads>
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> to another data type.
            </summary>
            </overloads>
            
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <param name="vector">The DigitalRune <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToVector4D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Implicit(DigitalRune.Mathematics.Algebra.Vector4F)~DigitalRune.Mathematics.Algebra.VectorF">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToVectorF">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Explicit(Microsoft.Xna.Framework.Vector4)~DigitalRune.Mathematics.Algebra.Vector4F">
            <summary>
            Performs an conversion from <see cref="T:Microsoft.Xna.Framework.Vector4"/> (XNA Framework) to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>
            (DigitalRune Mathematics).
            </summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector4"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.FromXna(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector4"/> 
            (XNA Framework).
            </summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector4"/> (XNA Framework).</param>
            <returns>The <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> (DigitalRune Mathematics).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.op_Explicit(DigitalRune.Mathematics.Algebra.Vector4F)~Microsoft.Xna.Framework.Vector4">
            <summary>
            Performs an conversion from <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> (DigitalRune Mathematics) to 
            <see cref="T:Microsoft.Xna.Framework.Vector4"/> (XNA Framework).
            </summary>
            <param name="vector">The <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> (DigitalRune Mathematics).</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ToXna">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> (DigitalRune Mathematics) to <see cref="T:Microsoft.Xna.Framework.Vector4"/> 
            (XNA Framework).
            </summary>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4"/> (XNA Framework).</returns>
            <remarks>
            This method is available only in the XNA-compatible build of the 
            DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Absolute">
            <overloads>
            <summary>
            Sets each vector component to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each vector component to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Clamp(System.Single,System.Single)">
            <overloads>
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            </overloads>
            
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <remarks>
            This operation is carried out per component. Component values less than 
            <paramref name="min"/> are set to <paramref name="min"/>. Component values greater than 
            <paramref name="max"/> are set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            <remarks>
            Each vector component is compared to zero. If the component is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ClampToZero(System.Single)">
            <summary>
            Clamps near-zero vector components to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each vector component is compared to zero. If the component is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
            <remarks>
            A vectors is normalized by dividing its components by the length of the vector.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.TryNormalize">
            <summary>
            Tries to normalize the vector.
            </summary>
            <returns>
            <see langword="true"/> if the vector was normalized; otherwise, <see langword="false"/> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ProjectTo(DigitalRune.Mathematics.Algebra.Vector4F)">
            <overloads>
            <summary>
            Projects a vector onto another vector.
            </summary>
            </overloads>
            
            <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
            <param name="target">The target vector.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Absolute(DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>A vector with the absolute values of the elements of the given vector.</returns>
            <remarks>
            The original vector is copied and then each vector element is set to its absolute value (see
            <see cref="M:System.Math.Abs(System.Single)"/>).
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <overloads>
            <summary>
            Determines whether two vectors are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two vectors are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
            <summary>
            Determines whether two vectors are equal (regarding a specific tolerance).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the vectors are considered as being equal.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Clamp(DigitalRune.Mathematics.Algebra.Vector4F,System.Single,System.Single)">
            <summary>
            Returns a vector with the vector components clamped to the range [min, max].
            </summary>
            <param name="vector">The vector.</param>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <returns>A vector with clamped components.</returns>
            <remarks>
            This operation is carried out per component. Component values less than 
            <paramref name="min"/> are set to <paramref name="min"/>. Component values greater than 
            <paramref name="max"/> are set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ClampToZero(DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The vector with small components clamped to zero.</returns>
            <remarks>
            Each vector component (X, Y, Z and W) is compared to zero. If the component is in the
            interval [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to 
            zero, otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ClampToZero(DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
            <summary>
            Returns a vector with near-zero vector components clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The vector with small components clamped to zero.</returns>
            <remarks>
            Each vector component (X, Y, Z and W) is compared to zero. If the component is in the
            interval [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Dot(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
            <remarks>
            The method calculates the dot product (also known as scalar product or inner product).
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.HomogeneousDivide(DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Performs the homogeneous divide or perspective divide: X, Y and Z are divided by W.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The vector (X/W, Y/W, Z/W).</returns>
            <exception cref="T:System.DivideByZeroException">
            Component W is 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Min(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Max(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The maximized vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.ProjectTo(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="target">The target vector.</param>
            <returns>
            The projection of <paramref name="vector"/> onto <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Parse(System.String)">
            <overloads>
            <summary>
            Converts the string representation of a 4-dimensional vector to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>
            equivalent.
            </summary>
            </overloads>
            
            <summary>
            Converts the string representation of a 4-dimensional vector to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>
            equivalent.
            </summary>
            <param name="s">A string representation of a 4-dimensional vector.</param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> that represents the vector specified by the <paramref name="s"/>
            parameter.
            </returns>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.Vector4F.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a 4-dimensional vector in a specified culture-specific
            format to its <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> equivalent.
            </summary>
            <param name="s">A string representation of a 4-dimensional vector.</param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>. 
            </param>
            <returns>
            A <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> that represents the vector specified by the <paramref name="s"/>
            parameter.</returns>
            <exception cref="T:System.FormatException">
            <paramref name="s"/> is not a valid <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.VectorD">
            <summary>
            Defines an n-dimensional vector (double-precision).
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorD.InternalArray">
            <summary>
            Gets or sets the internal array that is used to store the vector values.
            </summary>
            <value>
            The internal array that is used to store the vector values; must not be 
            <see langword="null"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorD.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The component at <paramref name="index"/>.</value>
            <remarks>
            The index is zero based. 
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorD.IsNaN">
            <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Double.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if a component of the vector is <see cref="F:System.Double.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorD.IsNumericallyNormalized">
            <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
            <value>
            <see langword="true"/> if this vector is numerically normalized; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Mathematics.Algebra.VectorD.IsNumericallyNormalized"/> compares the length of this vector against 1.0 using
            the default tolerance value (see <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorD.IsNumericallyZero">
            <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
            <value>
            <see langword="true"/> if this vector is numerically zero; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            The length of this vector is compared to 0 using the default tolerance value (see 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorD.Length">
            <summary>
            Gets or sets the length of this vector.
            </summary>
            <returns>The length of the this vector.</returns>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorD.LengthSquared">
            <summary>
            Returns the squared length of this vector.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorD.Normalized">
            <summary>
            Returns the normalized vector.
            </summary>
            <value>The normalized vector.</value>
            <remarks>
            The property does not change this instance. To normalize this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.VectorD.Normalize"/>.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements">
            <summary>
            Gets the number of elements <i>n</i>.
            </summary>
            <value>The number of elements <i>n</i>.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorD.LargestElement">
            <summary>
            Gets the value of the largest element.
            </summary>
            <value>The value of the largest element.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorD.IndexOfLargestElement">
            <summary>
            Gets the index (zero-based) of the largest element.
            </summary>
            <value>The index (zero-based) of the largest element.</value>
            <remarks>
            <para>
            This method returns the index of the element which has the largest value. 
            </para>
            <para>
            If there are several largest elements with equally large values, the smallest index of these 
            is returned.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorD.SmallestElement">
            <summary>
            Gets the value of the smallest element.
            </summary>
            <value>The value of the smallest element.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorD.IndexOfSmallestElement">
            <summary>
            Gets the index (zero-based) of the smallest element.
            </summary>
            <value>The index (zero-based) of the smallest element.</value>
            <remarks>
            <para>
            This method returns the index of the element which has the smallest value.
            </para>
            <para>
            If there are several smallest element with equally large values, the smallest index of these
            is returned.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> class with 4 vector elements.
            </summary>
            <remarks>
            <strong>Note:</strong> This constructor is used for serialization. Normally, the other 
            constructors should be used.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.#ctor(System.Int32)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> class.
            </summary>
            <param name="numberOfElements">The number of elements.</param>
            <remarks>
            The vector elements are set to <c>0</c>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="numberOfElements"/> must be greater than 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> class.
            </summary>
            <param name="numberOfElements">The number of elements.</param>
            <param name="value">The initial value for the vector elements.</param>
            <remarks>
            All elements are set to <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> class.
            </summary>
            <param name="elements">The array with the initial values for the vector elements.</param>
            <remarks>
            The created <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> will have the same number of elements as the array 
            <paramref name="elements"/>.
            </remarks>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> class.
            </summary>
            <param name="elements">The list with the initial values for the vector elements.</param>
            <remarks>
            The created <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> will have the same number of elements as the list 
            <paramref name="elements"/>.
            </remarks>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Equals(DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToString">
            <overloads>
            <summary>
            Returns the string representation of this vector.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this vector.
            </summary>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this vector using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.GetSchema">
            <summary>
            This property is reserved, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class 
            instead.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is 
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by
            the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_UnaryNegation(DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Negate(DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Addition(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Add(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Subtraction(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="minuend"/> or <paramref name="subtrahend"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Subtract(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="minuend"/> or <paramref name="subtrahend"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Multiply(DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each element multiplied by scalar.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Multiply(System.Double,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each element multiplied by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Multiply(System.Double,DigitalRune.Mathematics.Algebra.VectorD)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each element multiplied by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Multiply(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The element-wise product of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Multiply(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The element-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Division(DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each element divided by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Divide(DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each element divided by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Division(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Divides the elements of a vector by the elements of another 
            vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The element-wise product of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dividend"/> or <paramref name="divisor"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Divide(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Divides the elements of a vector by the elements of another 
            vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The element-wise division of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dividend"/> or <paramref name="divisor"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Equality(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Tests if two vectors are equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Inequality(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Tests if two vectors are not equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_GreaterThan(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Tests if each element of a vector is greater than the corresponding element of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater than its
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Tests if each element of a vector is greater or equal than the corresponding element of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater or equal
            than its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_LessThan(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Tests if each element of a vector is less than the corresponding element of another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less than its 
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Tests if each element of a vector is less or equal than the corresponding element of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less or equal than
            its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~System.Double[]">
            <overloads>
            <summary>
            Converts a vector to another data type.
            </summary>
            </overloads>
            
            <summary>
            Converts a vector to an array of <see langword="double"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToArray">
            <summary>
            Converts this vector to an array of <see langword="double"/> values.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~System.Collections.Generic.List{System.Double}">
            <summary>
            Converts a vector to a list of <see langword="double"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The list with of <see langword="double"/> values.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToList">
            <summary>
            Converts this vector to a list of <see langword="double"/> values.
            </summary>
            <returns>The list of <see langword="double"/> values.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~DigitalRune.Mathematics.Algebra.Vector2D">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            This vector has more than 2 elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToVector2D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">
            This vector has more than 2 elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~DigitalRune.Mathematics.Algebra.Vector3D">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            This vector has more than 3 elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToVector3D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">
            This vector has more than 3 elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~DigitalRune.Mathematics.Algebra.Vector4D">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            This vector has more than 4 elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToVector4D">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">
            This vector has more than 4 elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~DigitalRune.Mathematics.Algebra.VectorF">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToVectorF">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.op_Explicit(DigitalRune.Mathematics.Algebra.VectorD)~DigitalRune.Mathematics.Algebra.MatrixD">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
            <remarks>
            The created matrix will represent the vector as a column vector: <i>n</i> rows, 1 column.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ToMatrixD">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <remarks>
            The created matrix will represent the vector as a column vector: <i>n</i> rows, 1 column.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Absolute">
            <overloads>
            <summary>
            Sets each vector component to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each vector element to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Clamp(System.Double,System.Double)">
            <overloads>
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            </overloads>
            
            <summary>
            Clamps the vector elements to the range [min, max].
            </summary>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <remarks>
            This operation is carried out per element. Element values less than <paramref name="min"/> 
            are set to <paramref name="min"/>. Element values greater than <paramref name="max"/> are 
            set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero vector elements to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero vector elements to zero.
            </summary>
            <remarks>
            Each vector element is compared to zero. If the element is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ClampToZero(System.Double)">
            <summary>
            Clamps near-zero vector elements to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each vector element is compared to zero. If the element is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.GetSubvector(System.Int32,System.Int32)">
            <summary>
            Gets a subvector of this vector.
            </summary>
            <param name="startIndex">The index of the first element of the subvector.</param>
            <param name="subvectorLength">The length of the subvector.</param>
            <returns>The subvector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="startIndex"/> is negative or equal to or greater than the 
            <see cref="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="subvectorLength"/> is less than 1. Or <paramref name="startIndex"/> + 
            <paramref name="subvectorLength"/> exceeds the <see cref="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
            <remarks>
            A vectors is normalized by dividing its components by the length of the vector.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.TryNormalize">
            <summary>
            Tries to normalize the vector.
            </summary>
            <returns>
            <see langword="true"/> if the vector was normalized; otherwise, <see langword="false"/> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ProjectTo(DigitalRune.Mathematics.Algebra.VectorD)">
            <overloads>
            <summary>
            Projects a vector onto another vector.
            </summary>
            </overloads>
            
            <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
            <param name="target">The target vector.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="target"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Set(DigitalRune.Mathematics.Algebra.VectorD)">
            <overloads>
            <summary>
            Sets the elements of vector.
            </summary>
            </overloads>
            
            <summary>
            Sets this instance to a copy of the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <remarks>
            <paramref name="vector"/> can have more elements than this instance. The exceeding elements
            are ignored.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="vector"/> must have at least <see cref="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements"/> elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="vector"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Set(System.Double)">
            <summary>
            Sets all vector elements to the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Set(System.Double[])">
            <summary>
            Sets the vector elements to the values of the array.
            </summary>
            <param name="elements">The elements array.</param>
            <remarks>
            <paramref name="elements"/> can have more elements than this instance. The exceeding
            elements are ignored.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> must have at least <see cref="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements"/> elements.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Set(System.Collections.Generic.IList{System.Double})">
            <summary>
            Sets the vector elements to the values of the list.
            </summary>
            <param name="elements">The elements list.</param>
            <remarks>
            <paramref name="elements"/> can have more elements than this instance. The exceeding 
            elements are ignored.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="elements"/> must have at least <see cref="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements"/> elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.SetSubvector(System.Int32,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Sets a subvector of this instance.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="subvector">The subvector.</param>
            <remarks>
            The elements of the subvector are copied into this vector, beginning at the 
            <paramref name="startIndex"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="subvector"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="startIndex"/> or the number of elements of the subvector is to high, so 
            that the subvector does not fit into this vector.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Absolute(DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>A vector with the absolute values of the elements of the given vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <overloads>
            <summary>
            Determines whether two vectors are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two vectors are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/> the vectors are considered as being equal.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
            <summary>
            Determines whether two vectors are equal (regarding a specific tolerance).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the vectors are considered as being equal.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Clamp(DigitalRune.Mathematics.Algebra.VectorD,System.Double,System.Double)">
            <summary>
            Returns a vector with the vector elements clamped to the range [min, max].
            </summary>
            <param name="vector">The vector.</param>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <returns>A vector with clamped elements.</returns>
            <remarks>
            This operation is carried out per element. Element values less than <paramref name="min"/> 
            are set to <paramref name="min"/>. Element values greater than <paramref name="max"/> are 
            set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ClampToZero(DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Returns a vector with near-zero vector elements clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The vector with small elements clamped to zero.</returns>
            <remarks>
            Each vector element is compared to zero. If the element is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ClampToZero(DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
            <summary>
            Returns a vector with near-zero vector elements clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The vector with small elements clamped to zero.</returns>
            <remarks>
            Each vector element is compared to zero. If the element is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Dot(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
            <remarks>
            The method calculates the dot product (also known as scalar product or inner product).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Min(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of elements.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The minimized vector.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.Max(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The maximized vector.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorD.ProjectTo(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="target">The target vector.</param>
            <returns>
            The projection of <paramref name="vector"/> onto <paramref name="target"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> or <paramref name="target"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Algebra.VectorF">
            <summary>
            Defines an n-dimensional vector (single-precision).
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorF.InternalArray">
            <summary>
            Gets or sets the internal array that is used to store the vector values.
            </summary>
            <value>
            The internal array that is used to store the vector values; must not be 
            <see langword="null"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorF.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The component at <paramref name="index"/>.</value>
            <remarks>
            The index is zero based. 
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorF.IsNaN">
            <summary>
            Gets a value indicating whether a component of the vector is <see cref="F:System.Single.NaN"/>.
            </summary>
            <value>
            <see langword="true"/> if a component of the vector is <see cref="F:System.Single.NaN"/>; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorF.IsNumericallyNormalized">
            <summary>
            Returns a value indicating whether this vector is normalized (the length is numerically
            equal to 1).
            </summary>
            <value>
            <see langword="true"/> if this vector is numerically normalized; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.IsNumericallyNormalized"/> compares the length of this vector against 1.0 using
            the default tolerance value (see <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorF.IsNumericallyZero">
            <summary>
            Returns a value indicating whether this vector has zero size (the length is numerically
            equal to 0).
            </summary>
            <value>
            <see langword="true"/> if this vector is numerically zero; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks>
            The length of this vector is compared to 0 using the default tolerance value (see 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorF.Length">
            <summary>
            Gets or sets the length of this vector.
            </summary>
            <returns>The length of the this vector.</returns>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector has a length of 0. The length cannot be changed.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorF.LengthSquared">
            <summary>
            Returns the squared length of this vector.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorF.Normalized">
            <summary>
            Returns the normalized vector.
            </summary>
            <value>The normalized vector.</value>
            <remarks>
            The property does not change this instance. To normalize this instance you need to call 
            <see cref="M:DigitalRune.Mathematics.Algebra.VectorF.Normalize"/>.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of the vector is zero. The quaternion cannot be normalized.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements">
            <summary>
            Gets the number of elements <i>n</i>.
            </summary>
            <value>The number of elements <i>n</i>.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorF.LargestElement">
            <summary>
            Gets the value of the largest element.
            </summary>
            <value>The value of the largest element.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorF.IndexOfLargestElement">
            <summary>
            Gets the index (zero-based) of the largest element.
            </summary>
            <value>The index (zero-based) of the largest element.</value>
            <remarks>
            <para>
            This method returns the index of the element which has the largest value. 
            </para>
            <para>
            If there are several largest elements with equally large values, the smallest index of these 
            is returned.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorF.SmallestElement">
            <summary>
            Gets the value of the smallest element.
            </summary>
            <value>The value of the smallest element.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Algebra.VectorF.IndexOfSmallestElement">
            <summary>
            Gets the index (zero-based) of the smallest element.
            </summary>
            <value>The index (zero-based) of the smallest element.</value>
            <remarks>
            <para>
            This method returns the index of the element which has the smallest value.
            </para>
            <para>
            If there are several smallest element with equally large values, the smallest index of these
            is returned.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> class with 4 vector elements.
            </summary>
            <remarks>
            <strong>Note:</strong> This constructor is used for serialization. Normally, the other 
            constructors should be used.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.#ctor(System.Int32)">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> class.
            </summary>
            <param name="numberOfElements">The number of elements.</param>
            <remarks>
            The vector elements are set to <c>0</c>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="numberOfElements"/> must be greater than 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> class.
            </summary>
            <param name="numberOfElements">The number of elements.</param>
            <param name="value">The initial value for the vector elements.</param>
            <remarks>
            All elements are set to <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> class.
            </summary>
            <param name="elements">The array with the initial values for the vector elements.</param>
            <remarks>
            The created <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> will have the same number of elements as the array 
            <paramref name="elements"/>.
            </remarks>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> class.
            </summary>
            <param name="elements">The list with the initial values for the vector elements.</param>
            <remarks>
            The created <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> will have the same number of elements as the list 
            <paramref name="elements"/>.
            </remarks>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Equals(System.Object)">
            <overloads>
            <summary>
            Indicates whether the current object is equal to another object.
            </summary>
            </overloads>
            
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> and this instance are the same type and
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Equals(DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current object is equal to the other parameter; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToString">
            <overloads>
            <summary>
            Returns the string representation of this vector.
            </summary>
            </overloads>
            
            <summary>
            Returns the string representation of this vector.
            </summary>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of this vector using the specified culture-specific format
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.GetSchema">
            <summary>
            This property is reserved, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class 
            instead.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is 
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by
            the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_UnaryNegation(DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Negate(DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Negates a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Addition(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Add(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Subtraction(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="minuend"/> or <paramref name="subtrahend"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Subtract(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Subtracts a vector from a vector.
            </summary>
            <param name="minuend">The first vector (minuend).</param>
            <param name="subtrahend">The second vector (subtrahend).</param>
            <returns>The difference of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="minuend"/> or <paramref name="subtrahend"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Multiply(DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each element multiplied by scalar.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Multiply(System.Single,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each element multiplied by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Multiply(System.Single,DigitalRune.Mathematics.Algebra.VectorF)">
            <overloads>
            <summary>
            Multiplies a vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each element multiplied by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Multiply(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The element-wise product of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Multiply(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The element-wise product of the two vectors.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Division(DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each element divided by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Divide(DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
            <overloads>
            <summary>
            Divides the vector by a scalar or a vector.
            </summary>
            </overloads>
            
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns>The vector with each element divided by <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Division(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Divides the elements of a vector by the elements of another 
            vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The element-wise product of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dividend"/> or <paramref name="divisor"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Divide(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Divides the elements of a vector by the elements of another 
            vector.
            </summary>
            <param name="dividend">The first vector (dividend).</param>
            <param name="divisor">The second vector (divisor).</param>
            <returns>The element-wise division of the two vectors.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dividend"/> or <paramref name="divisor"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Equality(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Tests if two vectors are equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Inequality(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Tests if two vectors are not equal.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are different; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            For the test the corresponding elements of the vectors are compared.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_GreaterThan(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Tests if each element of a vector is greater than the corresponding element of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater than its
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_GreaterThanOrEqual(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Tests if each element of a vector is greater or equal than the corresponding element of
            another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is greater or equal
            than its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_LessThan(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Tests if each element of a vector is less than the corresponding element of another vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less than its 
            counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_LessThanOrEqual(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Tests if each element of a vector is less or equal than the corresponding element of another
            vector.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if each component of <paramref name="vector1"/> is less or equal than
            its counterpart in <paramref name="vector2"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Explicit(DigitalRune.Mathematics.Algebra.VectorF)~System.Single[]">
            <overloads>
            <summary>
            Converts a vector to another data type.
            </summary>
            </overloads>
            
            <summary>
            Converts a vector to an array of <see langword="float"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToArray">
            <summary>
            Converts this vector to an array of <see langword="float"/> values.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Explicit(DigitalRune.Mathematics.Algebra.VectorF)~System.Collections.Generic.List{System.Single}">
            <summary>
            Converts a vector to a list of <see langword="float"/> values.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The list with of <see langword="float"/> values.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToList">
            <summary>
            Converts this vector to a list of <see langword="float"/> values.
            </summary>
            <returns>The list of <see langword="float"/> values.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Explicit(DigitalRune.Mathematics.Algebra.VectorF)~DigitalRune.Mathematics.Algebra.Vector2F">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            This vector has more than 2 elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToVector2F">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">
            This vector has more than 2 elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Explicit(DigitalRune.Mathematics.Algebra.VectorF)~DigitalRune.Mathematics.Algebra.Vector3F">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            This vector has more than 3 elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToVector3F">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">
            This vector has more than 3 elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Explicit(DigitalRune.Mathematics.Algebra.VectorF)~DigitalRune.Mathematics.Algebra.Vector4F">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            This vector has more than 4 elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToVector4F">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <exception cref="T:System.InvalidCastException">
            This vector has more than 4 elements.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Implicit(DigitalRune.Mathematics.Algebra.VectorF)~DigitalRune.Mathematics.Algebra.VectorD">
            <summary>
            Performs an implicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToVectorD">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.op_Explicit(DigitalRune.Mathematics.Algebra.VectorF)~DigitalRune.Mathematics.Algebra.MatrixF">
            <summary>
            Performs an explicit conversion from <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result of the conversion.</returns>
            <remarks>
            The created matrix will represent the vector as a column vector: <i>n</i> rows, 1 column.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ToMatrixF">
            <summary>
            Converts this <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> to <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/>.
            </summary>
            <returns>The result of the conversion.</returns>
            <remarks>
            The created matrix will represent the vector as a column vector: <i>n</i> rows, 1 column.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Absolute">
            <overloads>
            <summary>
            Sets each vector component to its absolute value.
            </summary>
            </overloads>
            
            <summary>
            Sets each vector element to its absolute value.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Clamp(System.Single,System.Single)">
            <overloads>
            <summary>
            Clamps the vector components to the range [min, max].
            </summary>
            </overloads>
            
            <summary>
            Clamps the vector elements to the range [min, max].
            </summary>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <remarks>
            This operation is carried out per element. Element values less than <paramref name="min"/> 
            are set to <paramref name="min"/>. Element values greater than <paramref name="max"/> are 
            set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ClampToZero">
            <overloads>
            <summary>
            Clamps near-zero vector elements to zero.
            </summary>
            </overloads>
            
            <summary>
            Clamps near-zero vector elements to zero.
            </summary>
            <remarks>
            Each vector element is compared to zero. If the element is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ClampToZero(System.Single)">
            <summary>
            Clamps near-zero vector elements to zero.
            </summary>
            <param name="epsilon">The tolerance value.</param>
            <remarks>
            Each vector element is compared to zero. If the element is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.GetSubvector(System.Int32,System.Int32)">
            <summary>
            Gets a subvector of this vector.
            </summary>
            <param name="startIndex">The index of the first element of the subvector.</param>
            <param name="subvectorLength">The length of the subvector.</param>
            <returns>The subvector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="startIndex"/> is negative or equal to or greater than the 
            <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="subvectorLength"/> is less than 1. Or <paramref name="startIndex"/> + 
            <paramref name="subvectorLength"/> exceeds the <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
            <remarks>
            A vectors is normalized by dividing its components by the length of the vector.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            The length of this vector is zero. The vector cannot be normalized.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.TryNormalize">
            <summary>
            Tries to normalize the vector.
            </summary>
            <returns>
            <see langword="true"/> if the vector was normalized; otherwise, <see langword="false"/> if 
            the vector could not be normalized. (The length is numerically zero.)
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ProjectTo(DigitalRune.Mathematics.Algebra.VectorF)">
            <overloads>
            <summary>
            Projects a vector onto another vector.
            </summary>
            </overloads>
            
            <summary>
            Sets this vector to its projection onto the axis given by the target vector.
            </summary>
            <param name="target">The target vector.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="target"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Set(DigitalRune.Mathematics.Algebra.VectorF)">
            <overloads>
            <summary>
            Sets the elements of vector.
            </summary>
            </overloads>
            
            <summary>
            Sets this instance to a copy of the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <remarks>
            <paramref name="vector"/> can have more elements than this instance. The exceeding elements
            are ignored.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="vector"/> must have at least <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements"/> elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="vector"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Set(System.Single)">
            <summary>
            Sets all vector elements to the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Set(System.Single[])">
            <summary>
            Sets the vector elements to the values of the array.
            </summary>
            <param name="elements">The elements array.</param>
            <remarks>
            <paramref name="elements"/> can have more elements than this instance. The exceeding
            elements are ignored.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="elements"/> must have at least <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements"/> elements.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Set(System.Collections.Generic.IList{System.Single})">
            <summary>
            Sets the vector elements to the values of the list.
            </summary>
            <param name="elements">The elements list.</param>
            <remarks>
            <paramref name="elements"/> can have more elements than this instance. The exceeding 
            elements are ignored.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="elements"/> must have at least <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements"/> elements.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="elements"/> must not be <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.SetSubvector(System.Int32,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Sets a subvector of this instance.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="subvector">The subvector.</param>
            <remarks>
            The elements of the subvector are copied into this vector, beginning at the 
            <paramref name="startIndex"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="subvector"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="startIndex"/> or the number of elements of the subvector is to high, so 
            that the subvector does not fit into this vector.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Absolute(DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Returns a vector with the absolute values of the elements of the given vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>A vector with the absolute values of the elements of the given vector.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <overloads>
            <summary>
            Determines whether two vectors are equal (regarding a given tolerance).
            </summary>
            </overloads>
            
            <summary>
            Determines whether two vectors are equal (regarding the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/> the vectors are considered as being equal.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.AreNumericallyEqual(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
            <summary>
            Determines whether two vectors are equal (regarding a specific tolerance).
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>
            <see langword="true"/> if the vectors are equal (within the tolerance 
            <paramref name="epsilon"/>); otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The two vectors are compared component-wise. If the differences of the components are less
            than <paramref name="epsilon"/> the vectors are considered as being equal.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Clamp(DigitalRune.Mathematics.Algebra.VectorF,System.Single,System.Single)">
            <summary>
            Returns a vector with the vector elements clamped to the range [min, max].
            </summary>
            <param name="vector">The vector.</param>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <returns>A vector with clamped elements.</returns>
            <remarks>
            This operation is carried out per element. Element values less than <paramref name="min"/> 
            are set to <paramref name="min"/>. Element values greater than <paramref name="max"/> are 
            set to <paramref name="max"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ClampToZero(DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Returns a vector with near-zero vector elements clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The vector with small elements clamped to zero.</returns>
            <remarks>
            Each vector element is compared to zero. If the element is in the interval 
            [-<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>, +<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>] it is set to zero, 
            otherwise it remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ClampToZero(DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
            <summary>
            Returns a vector with near-zero vector elements clamped to 0.
            </summary>
            <param name="vector">The vector.</param>
            <param name="epsilon">The tolerance value.</param>
            <returns>The vector with small elements clamped to zero.</returns>
            <remarks>
            Each vector element is compared to zero. If the element is in the interval 
            [-<paramref name="epsilon"/>, +<paramref name="epsilon"/>] it is set to zero, otherwise it 
            remains unchanged.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Dot(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
            <remarks>
            The method calculates the dot product (also known as scalar product or inner product).
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Min(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Returns a vector that contains the lowest value from each matching pair of elements.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The minimized vector.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.Max(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Returns a vector that contains the highest value from each matching pair of components.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The maximized vector.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector1"/> or <paramref name="vector2"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Algebra.VectorF.ProjectTo(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Projects a vector onto an axis given by the target vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="target">The target vector.</param>
            <returns>
            The projection of <paramref name="vector"/> onto <paramref name="target"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vector"/> or <paramref name="target"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.BisectionMethodD">
            <summary>
            Finds roots using the bisection method (double-precision).
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.BisectionMethodD.#ctor(System.Func{System.Double,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.BisectionMethodD"/> class.
            </summary>
            <param name="function">The function f(x), which root we want to find.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.BisectionMethodD.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Finds the root of the given function.
            </summary>
            <param name="function">The function f.</param>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <returns>
            The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.
            </returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.BisectionMethodF">
            <summary>
            Finds roots using the bisection method (single-precision).
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.BisectionMethodF.#ctor(System.Func{System.Single,System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.BisectionMethodF"/> class.
            </summary>
            <param name="function">The function f(x), which root we want to find.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.BisectionMethodF.FindRoot(System.Func{System.Single,System.Single},System.Single,System.Single)">
            <summary>
            Finds the root of the given function.
            </summary>
            <param name="function">The function f.</param>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <returns>
            The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.
            </returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorD">
            <summary>
            Performs numerical integration using <i>Explicit Euler</i> (double-precision).
            </summary>
            <remarks>
            See <see cref="T:DigitalRune.Mathematics.Analysis.OdeIntegratorD"/> for a description of numerical integration of ODE. Using the
            Explicit Euler method the new state x1 at time t1 will be computes as:
            x1 = x0 + (t1 - t0) * f(x0, t0).
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorD.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorD,System.Double,DigitalRune.Mathematics.Algebra.VectorD})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorD"/> class.
            </summary>
            <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x (see 
            <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorD.FirstOrderDerivative"/>).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="firstOrderDerivative"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorD.Integrate(DigitalRune.Mathematics.Algebra.VectorD,System.Double,System.Double)">
            <summary>
            Computes the new state x1 at time t1.
            </summary>
            <param name="x0">The state x0 at time t0.</param>
            <param name="t0">The time t0.</param>
            <param name="t1">The target time t1 for which the new state x1 is computed.</param>
            <returns>The new state x1 at time t1.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorF">
            <summary>
            Performs numerical integration using <i>Explicit Euler</i> (single-precision).
            </summary>
            <remarks>
            See <see cref="T:DigitalRune.Mathematics.Analysis.OdeIntegratorF"/> for a description of numerical integration of ODE. Using the
            Explicit Euler method the new state x1 at time t1 will be computes as: 
            x1 = x0 + (t1 - t0) * f(x0, t0).
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorF.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorF,System.Single,DigitalRune.Mathematics.Algebra.VectorF})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorF"/> class.
            </summary>
            <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x (see 
            <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorF.FirstOrderDerivative"/>).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="firstOrderDerivative"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.ExplicitEulerIntegratorF.Integrate(DigitalRune.Mathematics.Algebra.VectorF,System.Single,System.Single)">
            <summary>
            Computes the new state x1 at time t1.
            </summary>
            <param name="x0">The state x0 at time t0.</param>
            <param name="t0">The time t0.</param>
            <param name="t1">The target time t1 for which the new state x1 is computed.</param>
            <returns>The new state x1 at time t1.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.FastFourierTransformD">
            <summary>
            Performs <i>Fast Fourier Transform</i> (FFT) (double-precision).
            </summary>
            <remarks>
            <para>
            This class performs a Discrete Fourier transform (DFT) for 1D and 2D samples using Fast
            Fourier Transform (FFT) algorithms. Have a look at 
            <see href="http://paulbourke.net/miscellaneous/dft/">DFT and FFT by Paul Bourke</see> for
            introduction to DFT and FFT. This class uses the same notation. (Please note that the 1 / N 
            factor and the sign of the exponent are switched between forward and inverse FFT in some 
            notations.)
            </para>
            <para>
            1D FFT can be performed using <see cref="M:DigitalRune.Mathematics.Analysis.FastFourierTransformD.Transform1D(DigitalRune.Mathematics.Algebra.Vector2D[],System.Boolean)"/>. This method is
            static and you do not need to create an instance of this class. 
            </para>
            <para>
            2D FFT can be performed using <see cref="M:DigitalRune.Mathematics.Analysis.FastFourierTransformD.Transform2D(DigitalRune.Mathematics.Algebra.Vector2D[0:,0:],System.Boolean)"/>. This method is not
            static because it requires an internal buffer, which is allocated only once for each
            <see cref="T:DigitalRune.Mathematics.Analysis.FastFourierTransformD"/> instance. The size of the buffer is determine by
            <see cref="P:DigitalRune.Mathematics.Analysis.FastFourierTransformD.Capacity"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.FastFourierTransformD.Capacity">
            <summary>
            Gets or sets the maximal capacity to reserve for internal buffers.
            </summary>
            <value>
            The maximal capacity to reserve for internal buffers.
            </value>
            <remarks>
            For 2D FFT, the capacity must be the size of largest dimension of the 2D array. 
            For example: To transform an array with 256x512 values, use a capacity of 512.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.FastFourierTransformD.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.FastFourierTransformF"/> class.
            </summary>
            <param name="capacity">
            The max. capacity to reserve for internal buffers. For 2D FFT, this must be the size of
            largest dimension of the 2D array. For example: To transform an array with 256x512 values,
            use a capacity of 512.
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.FastFourierTransformD.Transform1D(DigitalRune.Mathematics.Algebra.Vector2D[],System.Boolean)">
            <overloads>
            <summary>
            Performs a Fast Fourier Transform in 1 dimension.
            </summary>
            </overloads>
            
            <summary>
            Performs a Fast Fourier Transform in 1 dimension using the Radix-2 Cooley-Tukey algorithm.
            </summary>
            <param name="values">
            The values which are replaced in-place by the FFT result. Each element represents a complex
            number with the real part in x and the imaginary part in y. The number of values must be a
            power of two (e.g. 2, 4, 8, 16, ...).
            </param>
            <param name="forward">
            <see langword="true"/> to perform forward FFT, <see langword="false"/> to perform inverse
            FFT.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The length of <paramref name="values"/> is not a power of two.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.FastFourierTransformD.Transform1D(DigitalRune.Mathematics.Algebra.Vector2D[],System.Int32,System.Boolean)">
            <summary>
            Performs a Fast Fourier Transform using the Radix-2 Cooley-Tukey algorithm.
            </summary>
            <param name="values">
            The values which are replaced in-place by the FFT result. Each element represents a complex
            number with the real part in x and the imaginary part in y. The number of values must be a
            power of two (e.g. 2, 4, 8, 16, ...).
            </param>
            <param name="numberOfValues">
            The number of values. The array <paramref name="values"/> can be longer. Only the elements
            from 0 to <paramref name="numberOfValues"/> - 1 are transformed.
            </param>
            <param name="forward">
            <see langword="true"/> to perform forward FFT, <see langword="false"/> to perform inverse
            FFT.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="numberOfValues"/> is not a power of two.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.FastFourierTransformD.Transform2D(DigitalRune.Mathematics.Algebra.Vector2D[0:,0:],System.Boolean)">
            <summary>
            Performs a Fast Fourier Transform in 2 dimensions.
            </summary>
            <param name="values">
            The values which are replaced in-place by the FFT result. Each element represents a complex
            number with the real part in x and the imaginary part in y. The number of values in each
            dimension must be a power of two (e.g. 2, 4, 8, 16, ...).
            </param>
            <param name="forward">
            <see langword="true"/> to perform forward FFT, <see langword="false"/> to perform inverse
            FFT.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The width or height of the array exceeds the internal buffer or is not a power of two.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.FastFourierTransformF">
            <summary>
            Performs <i>Fast Fourier Transform</i> (FFT) (single-precision).
            </summary>
            <remarks>
            <para>
            This class performs a Discrete Fourier transform (DFT) for 1D and 2D samples using Fast
            Fourier Transform (FFT) algorithms. Have a look at 
            <see href="http://paulbourke.net/miscellaneous/dft/">DFT and FFT by Paul Bourke</see> for
            introduction to DFT and FFT. This class uses the same notation. (Please note that the 1 / N 
            factor and the sign of the exponent are switched between forward and inverse FFT in some 
            notations.)
            </para>
            <para>
            1D FFT can be performed using <see cref="M:DigitalRune.Mathematics.Analysis.FastFourierTransformF.Transform1D(DigitalRune.Mathematics.Algebra.Vector2F[],System.Boolean)"/>. This method is
            static and you do not need to create an instance of this class. 
            </para>
            <para>
            2D FFT can be performed using <see cref="M:DigitalRune.Mathematics.Analysis.FastFourierTransformF.Transform2D(DigitalRune.Mathematics.Algebra.Vector2F[0:,0:],System.Boolean)"/>. This method is not
            static because it requires an internal buffer, which is allocated only once for each
            <see cref="T:DigitalRune.Mathematics.Analysis.FastFourierTransformF"/> instance. The size of the buffer is determine by
            <see cref="P:DigitalRune.Mathematics.Analysis.FastFourierTransformF.Capacity"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.FastFourierTransformF.Capacity">
            <summary>
            Gets or sets the maximal capacity to reserve for internal buffers.
            </summary>
            <value>The maximal capacity to reserve for internal buffers.</value>
            <remarks>
            For 2D FFT, the capacity must be the size of largest dimension of the 2D array. 
            For example: To transform an array with 256x512 values, use a capacity of 512.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.FastFourierTransformF.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.FastFourierTransformF"/> class.
            </summary>
            <param name="capacity">
            The max. capacity to reserve for internal buffers. For 2D FFT, this must be the size of
            largest dimension of the 2D array. For example: To transform an array with 256x512 values,
            use a capacity of 512.
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.FastFourierTransformF.Transform1D(DigitalRune.Mathematics.Algebra.Vector2F[],System.Boolean)">
            <overloads>
            <summary>
            Performs a Fast Fourier Transform in 1 dimension.
            </summary>
            </overloads>
            
            <summary>
            Performs a Fast Fourier Transform in 1 dimension using the Radix-2 Cooley-Tukey algorithm.
            </summary>
            <param name="values">
            The values which are replaced in-place by the FFT result. Each element represents a complex
            number with the real part in x and the imaginary part in y. The number of values must be a
            power of two (e.g. 2, 4, 8, 16, ...).
            </param>
            <param name="forward">
            <see langword="true"/> to perform forward FFT, <see langword="false"/> to perform inverse
            FFT.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The length of <paramref name="values"/> is not a power of two.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.FastFourierTransformF.Transform1D(DigitalRune.Mathematics.Algebra.Vector2F[],System.Int32,System.Boolean)">
            <summary>
            Performs a Fast Fourier Transform using the Radix-2 Cooley-Tukey algorithm.
            </summary>
            <param name="values">
            The values which are replaced in-place by the FFT result. Each element represents a complex
            number with the real part in x and the imaginary part in y. The number of values must be a
            power of two (e.g. 2, 4, 8, 16, ...).
            </param>
            <param name="numberOfValues">
            The number of values. The array <paramref name="values"/> can be longer. Only the elements
            from 0 to <paramref name="numberOfValues"/> - 1 are transformed.
            </param>
            <param name="forward">
            <see langword="true"/> to perform forward FFT, <see langword="false"/> to perform inverse
            FFT.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="numberOfValues"/> is not a power of two.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.FastFourierTransformF.Transform2D(DigitalRune.Mathematics.Algebra.Vector2F[0:,0:],System.Boolean)">
            <summary>
            Performs a Fast Fourier Transform in 2 dimensions.
            </summary>
            <param name="values">
            The values which are replaced in-place by the FFT result. Each element represents a complex
            number with the real part in x and the imaginary part in y. The number of values in each
            dimension must be a power of two (e.g. 2, 4, 8, 16, ...).
            </param>
            <param name="forward">
            <see langword="true"/> to perform forward FFT, <see langword="false"/> to perform inverse
            FFT.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The width or height of the array exceeds the internal buffer or is not a power of two.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodD">
            <summary>
            Finds roots using an improved Newton-Raphson method (double-precision).
            </summary>
            <remarks>
            <para>
            This root finding algorithm uses a combination of the <i>bisection method</i> and the
            <i>Newton-Raphson</i> to provide global convergence. 
            </para>
            <para>
            This algorithm needs a function <i>f'(x)</i> which can compute the derivative of the function
            <i>f(x)</i> as additional inputs.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodD.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodD"/> class.
            </summary>
            <param name="function">The function f(x), which root we want to find.</param>
            <param name="derivative">The function f'(x), which computes the derivative.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="derivative"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodD.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Finds the root of the given function.
            </summary>
            <param name="function">The function f.</param>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <returns>
            The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.
            </returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodF">
            <summary>
            Finds roots using an improved Newton-Raphson method (single-precision).
            </summary>
            <remarks>
            <para>
            This root finding algorithm uses a combination of the <i>bisection method</i> and the
            <i>Newton-Raphson</i> to provide global convergence. 
            </para>
            <para>
            This algorithm needs a function <i>f'(x)</i> which can compute the derivative of the function 
            <i>f(x)</i> as additional inputs.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodF.#ctor(System.Func{System.Single,System.Single},System.Func{System.Single,System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodF"/> class.
            </summary>
            <param name="function">The function f(x), which root we want to find.</param>
            <param name="derivative">The function f'(x), which computes the derivative.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="derivative"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.ImprovedNewtonRaphsonMethodF.FindRoot(System.Func{System.Single,System.Single},System.Single,System.Single)">
            <summary>
            Finds the root of the given function.
            </summary>
            <param name="function">The function f.</param>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <returns>
            The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.
            </returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.IntegratorD">
            <summary>
            A base class for numerical integration of a function over an interval (double-precision).
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.IntegratorD.NumberOfIterations">
            <summary>
            Gets (or sets) the number of iterations of the last <see cref="M:DigitalRune.Mathematics.Analysis.IntegratorD.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)"/> method call.
            </summary>
            <value>The number of iterations.</value>
            <remarks>
            This property is not thread-safe.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.IntegratorD.MinNumberOfIterations">
            <summary>
            Gets or sets the minimum number number of iterations.
            </summary>
            <value>The minimum number number of iterations. The default value is 5.</value>
            <remarks>
            It is best to perform a minimum of iterations because for some periodic functions the
            computed integral value seems to converge at first and it needs a few iterations until a
            correct value is computed.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.IntegratorD.MaxNumberOfIterations">
            <summary>
            Gets or sets the maximum number number of iterations.
            </summary>
            <value>The maximum number number of iterations. The default value is 20.</value>
            <remarks>
            In one call of <see cref="M:DigitalRune.Mathematics.Analysis.IntegratorD.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)"/> no more than <see cref="P:DigitalRune.Mathematics.Analysis.IntegratorD.MaxNumberOfIterations"/>
            are performed.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.IntegratorD.Epsilon">
            <summary>
            Gets or sets the tolerance value. 
            </summary>
            <value>
            The tolerance value. The default is <see cref="T:DigitalRune.Mathematics.Numeric"/>.<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>.
            </value>
            <remarks>
            If the absolute difference between the integral from the new iteration and the last 
            iteration is less than this tolerance, the integration is stopped.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.IntegratorD.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Integrates the specified function within the given interval.
            </summary>
            <param name="function">The function.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound"/>, <paramref name="upperBound"/>].
            </returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.IntegratorF">
            <summary>
            A base class for numerical integration of a function over an interval (single-precision).
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.IntegratorF.NumberOfIterations">
            <summary>
            Gets (or sets) the number of iterations of the last <see cref="M:DigitalRune.Mathematics.Analysis.IntegratorF.Integrate(System.Func{System.Single,System.Single},System.Single,System.Single)"/> method call.
            </summary>
            <value>The number of iterations.</value>
            <remarks>
            This property is not thread-safe.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.IntegratorF.MinNumberOfIterations">
            <summary>
            Gets or sets the minimum number number of iterations.
            </summary>
            <value>The minimum number number of iterations. The default value is 5.</value>
            <remarks>
            It is best to perform a minimum of iterations because for some periodic functions the
            computed integral value seems to converge at first and it needs a few iterations until a
            correct value is computed.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.IntegratorF.MaxNumberOfIterations">
            <summary>
            Gets or sets the maximum number number of iterations.
            </summary>
            <value>The maximum number number of iterations. The default value is 20.</value>
            <remarks>
            In one call of <see cref="M:DigitalRune.Mathematics.Analysis.IntegratorF.Integrate(System.Func{System.Single,System.Single},System.Single,System.Single)"/> no more than <see cref="P:DigitalRune.Mathematics.Analysis.IntegratorF.MaxNumberOfIterations"/>
            are performed.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.IntegratorF.Epsilon">
            <summary>
            Gets or sets the tolerance value. 
            </summary>
            <value>
            The tolerance value. The default is <see cref="T:DigitalRune.Mathematics.Numeric"/>.<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>.
            </value>
            <remarks>
            If the absolute difference between the integral from the new iteration and the last 
            iteration is less than this tolerance, the integration is stopped.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.IntegratorF.Integrate(System.Func{System.Single,System.Single},System.Single,System.Single)">
            <summary>
            Integrates the specified function within the given interval.
            </summary>
            <param name="function">The function.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound"/>, <paramref name="upperBound"/>].
            </returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.MidpointIntegratorD">
            <summary>
            Performs numerical integration using <i>Midpoint method</i> (double-precision).
            </summary>
            <remarks>
            See <see cref="T:DigitalRune.Mathematics.Analysis.OdeIntegratorD"/> for a description of numerical integration of ODE.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.MidpointIntegratorD.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorD,System.Double,DigitalRune.Mathematics.Algebra.VectorD})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.MidpointIntegratorD"/> class.
            </summary>
            <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x (see 
            <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorD.FirstOrderDerivative"/>).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="firstOrderDerivative"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.MidpointIntegratorD.Integrate(DigitalRune.Mathematics.Algebra.VectorD,System.Double,System.Double)">
            <summary>
            Computes the new state x1 at time t1.
            </summary>
            <param name="x0">The state x0 at time t0.</param>
            <param name="t0">The time t0.</param>
            <param name="t1">The target time t1 for which the new state x1 is computed.</param>
            <returns>The new state x1 at time t1.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.MidpointIntegratorF">
            <summary>
            Performs numerical integration using <i>Midpoint method</i> (single-precision).
            </summary>
            <remarks>
            See <see cref="T:DigitalRune.Mathematics.Analysis.OdeIntegratorF"/> for a description of numerical integration of ODE.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.MidpointIntegratorF.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorF,System.Single,DigitalRune.Mathematics.Algebra.VectorF})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.MidpointIntegratorF"/> class.
            </summary>
            <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x (see 
            <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorF.FirstOrderDerivative"/>).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="firstOrderDerivative"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.MidpointIntegratorF.Integrate(DigitalRune.Mathematics.Algebra.VectorF,System.Single,System.Single)">
            <summary>
            Computes the new state x1 at time t1.
            </summary>
            <param name="x0">The state x0 at time t0.</param>
            <param name="t0">The time t0.</param>
            <param name="t1">The target time t1 for which the new state x1 is computed.</param>
            <returns>The new state x1 at time t1.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Mathematics.Analysis"/> namespace provides types for analysis,
            such as numerical integration, root finding, etc.
            </summary>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodD">
            <summary>
            Finds roots using the Newton-Raphson method (double-precision).
            </summary>
            <remarks>
            <para>
            This algorithm needs a function <i>f'(x)</i> which can compute the derivative of the function 
            <i>f(x)</i> as additional inputs.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodD.Derivative">
            <summary>
            Gets a function that computes the derivative <i>f'(x)</i>.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodD.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodD"/> class.
            </summary>
            <param name="function">The function f(x), which root we want to find.</param>
            <param name="derivative">The function f'(x), which computes the derivative.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="derivative"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodD.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Finds the root of the given function.
            </summary>
            <param name="function">The function f.</param>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <returns>The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodF">
            <summary>
            Finds roots using the Newton-Raphson method (single-precision).
            </summary>
            <remarks>
            <para>
            This algorithm needs a function <i>f'(x)</i> which can compute the derivative of the function 
            <i>f(x)</i> as additional inputs.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodF.Derivative">
            <summary>
            Gets a function that computes the derivative <i>f'(x)</i>.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodF.#ctor(System.Func{System.Single,System.Single},System.Func{System.Single,System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodF"/> class.
            </summary>
            <param name="function">The function f(x), which root we want to find.</param>
            <param name="derivative">The function f'(x), which computes the derivative.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="derivative"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.NewtonRaphsonMethodF.FindRoot(System.Func{System.Single,System.Single},System.Single,System.Single)">
            <summary>
            Finds the root of the given function.
            </summary>
            <param name="function">The function f.</param>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <returns>The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.OdeIntegratorD">
            <summary>
            A base class for numerical integration strategies for ordinary differential equations (ODE).
            (Double-precision)
            </summary>
            <remarks>
            <para> Numerical integration is explained using following example: </para>
            <para>
            Consider the following ODE: <c>dx/dt = f(x, t)</c>. The goal of the numerical integration is 
            to compute the state x1 at time t1 when following information is given:
            <list type="bullet">
            <item>The state at time t0. In general, this state is an n-dimensional vector.</item>
            <item>The function f(x, t) that computes the first order derivative of x. </item>
            </list>
            </para>
            <para>
            <strong>Note:</strong> In this documentation we assume that the integration variable is 
            <i>time</i> since this is very common for simulation tasks. Of course the integration variable
            can be any other quantity.
            </para>
            <para>
            The function f that computes the first order derivative depends on the state x and the time 
            t: For example, the state in rigid body simulation consist of the positions and velocities of
            the rigid bodies. When computing the new state of the simulation, the first order derivatives
            (velocities and accelerations) depend on the whole state and on time. This is because
            accelerations are computed through forces which depend on time (for example explosions),
            depend on velocities (damping forces) or depend on positions (spring forces).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.OdeIntegratorD.FirstOrderDerivative">
            <summary>
            Gets the function f(x, t) that computes the first order derivative.
            </summary>
            <value>The function f(x, t) that computes the first order derivative.</value>
            <remarks>
            The function has the form <c>VectorD Function(VectorD x, double time)</c>, where x is the
            state vector for the given time. The function returns the first order derivative of state x
            for the given time.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.OdeIntegratorD.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorD,System.Double,DigitalRune.Mathematics.Algebra.VectorD})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.OdeIntegratorD"/> class.
            </summary>
            <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x 
            (see <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorD.FirstOrderDerivative"/>).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="firstOrderDerivative"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.OdeIntegratorD.Integrate(DigitalRune.Mathematics.Algebra.VectorD,System.Double,System.Double)">
            <summary>
            Computes the new state x1 at time t1.
            </summary>
            <param name="x0">The state x0 at time t0.</param>
            <param name="t0">The time t0.</param>
            <param name="t1">The target time t1 for which the new state x1 is computed.</param>
            <returns>The new state x1 at time t1.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.OdeIntegratorF">
            <summary>
            A base class for numerical integration strategies for ordinary differential equations (ODE).
            (Single-precision)
            </summary>
            <remarks>
            <para> Numerical integration is explained using following example: </para>
            <para>
            Consider the following ODE: <c>dx/dt = f(x, t)</c>. The goal of the numerical integration is 
            to compute the state x1 at time t1 when following information is given:
            <list type="bullet">
            <item>The state at time t0. In general, this state is an n-dimensional vector.</item>
            <item>The function f(x, t) that computes the first order derivative of x. </item>
            </list>
            </para>
            <para>
            <strong>Note:</strong> In this documentation we assume that the integration variable is
            <i>time</i> since this is very common for simulation tasks. Of course the integration variable
            can be any other quantity.
            </para>
            <para>
            The function f that computes the first order derivative depends on the state x and the time 
            t: For example, the state in rigid body simulation consist of the positions and velocities of
            the rigid bodies. When computing the new state of the simulation, the first order derivatives
            (velocities and accelerations) depend on the whole state and on time. This is because
            accelerations are computed through forces which depend on time (for example explosions),
            depend on velocities (damping forces) or depend on positions (spring forces).
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.OdeIntegratorF.FirstOrderDerivative">
            <summary>
            Gets the function f(x, t) that computes the first order derivative.
            </summary>
            <value>The function f(x, t) that computes the first order derivative.</value>
            <remarks>
            The function has the form <c>VectorF Function(VectorF x, float time)</c>, 
            where x is the state vector for the given time. The function returns the first order
            derivative of state x for the given time.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.OdeIntegratorF.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorF,System.Single,DigitalRune.Mathematics.Algebra.VectorF})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.OdeIntegratorF"/> class.
            </summary>
            <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x 
            (see <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorF.FirstOrderDerivative"/>).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="firstOrderDerivative"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.OdeIntegratorF.Integrate(DigitalRune.Mathematics.Algebra.VectorF,System.Single,System.Single)">
            <summary>
            Computes the new state x1 at time t1.
            </summary>
            <param name="x0">The state x0 at time t0.</param>
            <param name="t0">The time t0.</param>
            <param name="t1">The target time t1 for which the new state x1 is computed.</param>
            <returns>The new state x1 at time t1.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodD">
            <summary>
            Finds roots using the regula falsi (false position) method (double-precision).
            </summary>
            <remarks>
            The false position method is a standard textbook method. If a faster method is required take a
            look at <i>Ridder's method</i> or <i>Brent's method</i>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodD.#ctor(System.Func{System.Double,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodD"/> class.
            </summary>
            <param name="function">The function f(x), which root we want to find.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodD.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Finds the root of the given function.
            </summary>
            <param name="function">The function f.</param>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <returns>The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodF">
            <summary>
            Finds roots using the regula falsi (false position) method (single-precision).
            </summary>
            <remarks>
            The false position method is a standard textbook method. If a faster method is required take a
            look at <i>Ridder's method</i> or <i>Brent's method</i>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodF.#ctor(System.Func{System.Single,System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodF"/> class.
            </summary>
            <param name="function">The function f(x), which root we want to find.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RegulaFalsiMethodF.FindRoot(System.Func{System.Single,System.Single},System.Single,System.Single)">
            <summary>
            Finds the root of the given function.
            </summary>
            <param name="function">The function f.</param>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <returns>The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.RombergIntegratorD">
            <summary>
            Performs numerical integration using the <i>Romberg's method</i> (double-precision).
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RombergIntegratorD.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Integrates the specified function within the given interval.
            </summary>
            <param name="function">The function.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound"/>, <paramref name="upperBound"/>].
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.RombergIntegratorF">
            <summary>
            Performs numerical integration using the <i>Romberg's method</i> (single-precision).
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RombergIntegratorF.Integrate(System.Func{System.Single,System.Single},System.Single,System.Single)">
            <summary>
            Integrates the specified function within the given interval.
            </summary>
            <param name="function">The function.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound"/>, <paramref name="upperBound"/>].
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.RootFinderD">
            <summary>
            A base class for methods which solve a single equation (double-precision). 
            </summary>
            <remarks>
            An <i>x</i> is searched such that <i>f(x) = 0</i> or <i>f(x) = y</i> (the function <i>f</i>
            and the <i>y</i> must be given).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.RootFinderD.Function">
            <summary>
            Gets the function f(x), which root we want to find.
            </summary>
            <value>The function f(x), which root we want to find.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.RootFinderD.NumberOfIterations">
            <summary>
            Gets or sets the number of iterations of the last 
            <see cref="M:DigitalRune.Mathematics.Analysis.RootFinderD.FindRoot(System.Double,System.Double)"/> method call.
            </summary>
            <value>The number of iterations.</value>
            <remarks>
            This property is not thread-safe.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.RootFinderD.MaxNumberOfIterations">
            <summary>
            Gets or sets the maximum number of iterations.
            </summary>
            <value>The maximum number number of iterations. The default value is 100.</value>
            <remarks>
            In one call of <strong>FindRoot</strong> no more than <see cref="P:DigitalRune.Mathematics.Analysis.RootFinderD.MaxNumberOfIterations"/>
            are performed.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.RootFinderD.Epsilon">
            <summary>
            Gets or sets the tolerance value used for comparing x values (same as <see cref="P:DigitalRune.Mathematics.Analysis.RootFinderD.EpsilonX"/>). 
            </summary>
            <value>
            The tolerance value used for comparing x values. 
            The default is <see cref="T:DigitalRune.Mathematics.Numeric"/>.<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>.
            </value>
            <remarks>
            If the absolute difference of x from the new iteration and the x from the last iteration is
            less than this tolerance, the refinement of x is stopped.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.RootFinderD.EpsilonX">
            <summary>
            Gets or sets the tolerance value used for comparing x values. 
            </summary>
            <value>
            The tolerance value used for comparing x values. 
            The default is <see cref="T:DigitalRune.Mathematics.Numeric"/>.<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>.
            </value>
            <remarks>
            If the absolute difference of x from the new iteration and the x from the last iteration is
            less than this tolerance, the refinement of x is stopped.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.RootFinderD.EpsilonY">
            <summary>
            Gets or sets the tolerance value used for comparing function values. 
            </summary>
            <value>
            The tolerance value used for comparing function values.
            The default is <see cref="T:DigitalRune.Mathematics.Numeric"/>.<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonD"/>.
            </value>
            <remarks>
            If the absolute difference of f(x) and the searched y value is less than this tolerance, 
            the refinement of x is stopped.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderD.#ctor(System.Func{System.Double,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RootFinderD"/> class.
            </summary>
            <param name="function">The function f(x), which root we want to find.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderD.ExpandBracket(System.Double@,System.Double@)">
            <overloads>
            <summary>
            Takes the initial guessed range [<paramref name="x0"/>, <paramref name="x1"/>] and expands
            this interval such that the root is in the interval.
            </summary>
            </overloads>
            
            <summary>
            Takes the initial guessed range [<paramref name="x0"/>, <paramref name="x1"/>] and expands
            this interval such that the root <i>x<sub>root</sub></i> where 
            <i>f(x<sub>root</sub>) = 0</i> is in the interval.
            </summary>
            <param name="x0">The left bound of the interval.</param>
            <param name="x1">The right bound of the interval.</param>
            <returns>
            <see langword="true"/> if a valid bracket was found; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderD.ExpandBracket(System.Double@,System.Double@,System.Double)">
            <summary>
            Takes the initial guessed range [<paramref name="x0"/>, <paramref name="x1"/>] and expands
            this interval such that <i>x</i> with <i>f(x) = y</i>
            is in the interval.
            </summary>
            <param name="x0">The left bound of the interval.</param>
            <param name="x1">The right bound of the interval.</param>
            <param name="y">The y for which an x is searched for such that <i>f(x) = y</i>.</param>
            <returns>
            <see langword="true"/> if a valid bracket was found; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderD.ExpandBracket(System.Func{System.Double,System.Double},System.Double@,System.Double@)">
            <summary>
            Takes the initial guessed range [<paramref name="x0"/>, <paramref name="x1"/>] and expands
            this interval such that the root <i>x<sub>root</sub></i> where 
            <i>f(x<sub>root</sub>) = 0</i> is in the interval.
            </summary>
            <param name="function">The function f(x).</param>
            <param name="x0">The left bound of the interval.</param>
            <param name="x1">The right bound of the interval.</param>
            <returns>
            <see langword="true"/> if a valid bracket was found; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderD.FindRoot(System.Double,System.Double)">
            <overloads>
            <summary>
            Finds the root of the given function.
            </summary>
            </overloads>
            
            <summary>
            Finds the root of the given function.
            </summary>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <returns>The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderD.FindRoot(System.Double,System.Double,System.Double)">
            <summary>
            Finds the x for the given function, such that <i>f(x) = y</i>.
            </summary>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="y">
            The y for which an x is searched for such that <i>f(x) = y</i>.
            </param>
            <returns>
            The x value such that <i>f(x) = y</i>; or <i>NaN</i> if no suitable x is found.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderD.FindRoot(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Finds the root of the given function.
            </summary>
            <param name="function">The function f(x).</param>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <returns>The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.RootFinderF">
            <summary>
            A base class for methods which solve a single equation (single-precision). 
            </summary>
            <remarks>
            An <i>x</i> is searched such that <i>f(x) = 0</i> or <i>f(x) = y</i> (the function <i>f</i>
            and the <i>y</i> must be given).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.RootFinderF.Function">
            <summary>
            Gets the function f(x), which root we want to find.
            </summary>
            <value>The function f(x), which root we want to find.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.RootFinderF.NumberOfIterations">
            <summary>
            Gets or sets the number of iterations of the last 
            <see cref="M:DigitalRune.Mathematics.Analysis.RootFinderF.FindRoot(System.Single,System.Single)"/> method call.
            </summary>
            <value>The number of iterations.</value>
            <remarks>
            This property is not thread-safe.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.RootFinderF.MaxNumberOfIterations">
            <summary>
            Gets or sets the maximum number of iterations.
            </summary>
            <value>The maximum number number of iterations. The default value is 50.</value>
            <remarks>
            In one call of <strong>FindRoot</strong> no more than <see cref="P:DigitalRune.Mathematics.Analysis.RootFinderF.MaxNumberOfIterations"/>
            are performed.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.RootFinderF.Epsilon">
            <summary>
            Gets or sets the tolerance value used for comparing x values (same as <see cref="P:DigitalRune.Mathematics.Analysis.RootFinderF.EpsilonX"/>). 
            </summary>
            <value>
            The tolerance value used for comparing x values. 
            The default is <see cref="T:DigitalRune.Mathematics.Numeric"/>.<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>.
            </value>
            <remarks>
            If the absolute difference of x from the new iteration and the x from the last iteration is
            less than this tolerance, the refinement of x is stopped.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.RootFinderF.EpsilonX">
            <summary>
            Gets or sets the tolerance value used for comparing x values. 
            </summary>
            <value>
            The tolerance value used for comparing x values. 
            The default is <see cref="T:DigitalRune.Mathematics.Numeric"/>.<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>.
            </value>
            <remarks>
            If the absolute difference of x from the new iteration and the x from the last iteration is
            less than this tolerance, the refinement of x is stopped.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Analysis.RootFinderF.EpsilonY">
            <summary>
            Gets or sets the tolerance value used for comparing function values. 
            </summary>
            <value>
            The tolerance value used for comparing function values.
            The default is <see cref="T:DigitalRune.Mathematics.Numeric"/>.<see cref="P:DigitalRune.Mathematics.Numeric.EpsilonF"/>.
            </value>
            <remarks>
            If the absolute difference of f(x) and the searched y value is less than this tolerance, 
            the refinement of x is stopped.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative or 0.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderF.#ctor(System.Func{System.Single,System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RootFinderF"/> class.
            </summary>
            <param name="function">The function f(x), which root we want to find.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderF.ExpandBracket(System.Single@,System.Single@)">
            <overloads>
            <summary>
            Takes the initial guessed range [<paramref name="x0"/>, <paramref name="x1"/>] and expands
            this interval such that the root is in the interval.
            </summary>
            </overloads>
            
            <summary>
            Takes the initial guessed range [<paramref name="x0"/>, <paramref name="x1"/>] and expands
            this interval such that the root <i>x<sub>root</sub></i> where 
            <i>f(x<sub>root</sub>) = 0</i> is in the interval.
            </summary>
            <param name="x0">The left bound of the interval.</param>
            <param name="x1">The right bound of the interval.</param>
            <returns>
            <see langword="true"/> if a valid bracket was found; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderF.ExpandBracket(System.Single@,System.Single@,System.Single)">
            <summary>
            Takes the initial guessed range [<paramref name="x0"/>, <paramref name="x1"/>] and expands
            this interval such that <i>x</i> with <i>f(x) = y</i>
            is in the interval.
            </summary>
            <param name="x0">The left bound of the interval.</param>
            <param name="x1">The right bound of the interval.</param>
            <param name="y">The y for which an x is searched for such that <i>f(x) = y</i>.</param>
            <returns>
            <see langword="true"/> if a valid bracket was found; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderF.ExpandBracket(System.Func{System.Single,System.Single},System.Single@,System.Single@)">
            <summary>
            Takes the initial guessed range [<paramref name="x0"/>, <paramref name="x1"/>] and expands
            this interval such that the root <i>x<sub>root</sub></i> where 
            <i>f(x<sub>root</sub>) = 0</i> is in the interval.
            </summary>
            <param name="function">The function f(x).</param>
            <param name="x0">The left bound of the interval.</param>
            <param name="x1">The right bound of the interval.</param>
            <returns>
            <see langword="true"/> if a valid bracket was found; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderF.FindRoot(System.Single,System.Single)">
            <overloads>
            <summary>
            Finds the root of the given function.
            </summary>
            </overloads>
            
            <summary>
            Finds the root of the given function.
            </summary>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <returns>The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderF.FindRoot(System.Single,System.Single,System.Single)">
            <summary>
            Finds the x for the given function, such that <i>f(x) = y</i>.
            </summary>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="y">
            The y for which an x is searched for such that <i>f(x) = y</i>.
            </param>
            <returns>
            The x value such that <i>f(x) = y</i>; or <i>NaN</i> if no suitable x is found.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RootFinderF.FindRoot(System.Func{System.Single,System.Single},System.Single,System.Single)">
            <summary>
            Finds the root of the given function.
            </summary>
            <param name="function">The function f(x).</param>
            <param name="x0">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <param name="x1">
            An x value such that the root lies between <paramref name="x0"/> and <paramref name="x1"/>.
            </param>
            <returns>The x value such that <i>f(x) = 0</i>; or <i>NaN</i> if no root is found.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorD">
            <summary>
            Performs numerical integration using <i>4th-order Runge-Kutta method</i> (double-precision).
            </summary>
            <remarks>
            See <see cref="T:DigitalRune.Mathematics.Analysis.OdeIntegratorD"/> for a description of numerical integration of ODE.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorD.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorD,System.Double,DigitalRune.Mathematics.Algebra.VectorD})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorD"/> class.
            </summary>
            <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x (see 
            <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorD.FirstOrderDerivative"/>).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="firstOrderDerivative"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorD.Integrate(DigitalRune.Mathematics.Algebra.VectorD,System.Double,System.Double)">
            <summary>
            Computes the new state x1 at time t1.
            </summary>
            <param name="x0">The state x0 at time t0.</param>
            <param name="t0">The time t0.</param>
            <param name="t1">The target time t1 for which the new state x1 is computed.</param>
            <returns>The new state x1 at time t1.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorF">
            <summary>
            Performs numerical integration using <i>4th-order Runge-Kutta method</i> (single-precision).
            </summary>
            <remarks>
            See <see cref="T:DigitalRune.Mathematics.Analysis.OdeIntegratorF"/> for a description of numerical integration of ODE.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorF.#ctor(System.Func{DigitalRune.Mathematics.Algebra.VectorF,System.Single,DigitalRune.Mathematics.Algebra.VectorF})">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorF"/> class.
            </summary>
            <param name="firstOrderDerivative">
            The function f(x, t) that computes the first order derivative of the vector x (see 
            <see cref="P:DigitalRune.Mathematics.Analysis.OdeIntegratorF.FirstOrderDerivative"/>).
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="firstOrderDerivative"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.RungeKutta4IntegratorF.Integrate(DigitalRune.Mathematics.Algebra.VectorF,System.Single,System.Single)">
            <summary>
            Computes the new state x1 at time t1.
            </summary>
            <param name="x0">The state x0 at time t0.</param>
            <param name="t0">The time t0.</param>
            <param name="t1">The target time t1 for which the new state x1 is computed.</param>
            <returns>The new state x1 at time t1.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.SimpsonIntegratorD">
            <summary>
            Performs numerical integration using the <i>Simpson's rule</i> (double-precision).
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.SimpsonIntegratorD.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Integrates the specified function within the given interval.
            </summary>
            <param name="function">The function.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound"/>, <paramref name="upperBound"/>].
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.SimpsonIntegratorF">
            <summary>
            Performs numerical integration using the <i>Simpson's rule</i> (single-precision).
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.SimpsonIntegratorF.Integrate(System.Func{System.Single,System.Single},System.Single,System.Single)">
            <summary>
            Integrates the specified function within the given interval.
            </summary>
            <param name="function">The function.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound"/>, <paramref name="upperBound"/>].
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorD">
            <summary>
            Performs numerical integration using the <i>extended trapezoidal rule</i> (double-precision).
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorD.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Refines the given integral by adding 2<sup>n-2</sup> additional interior points.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorD.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Integrates the specified function within the given interval.
            </summary>
            <param name="function">The function.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound"/>, <paramref name="upperBound"/>].
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorF">
            <summary>
            Performs numerical integration using the <i>extended trapezoidal rule</i> (single-precision).
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorF.Integrate(System.Func{System.Single,System.Single},System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Refines the given integral by adding 2<sup>n-2</sup> additional interior points.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Analysis.TrapezoidalIntegratorF.Integrate(System.Func{System.Single,System.Single},System.Single,System.Single)">
            <summary>
            Integrates the specified function within the given interval.
            </summary>
            <param name="function">The function.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <returns>
            The integral of the given function over the interval 
            [<paramref name="lowerBound"/>, <paramref name="upperBound"/>].
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="function"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.ConstantsD">
            <summary>
            Provides useful constants (double-precision).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsD.E">
            <summary>Represents the mathematical constant e.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsD.Log10OfE">
            <summary>Represents the logarithm base 10 of e.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsD.Log2OfE">
            <summary>Represents the logarithm base 2 of e.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsD.Ln2">
            <summary>Represents the natural logarithm of 2.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsD.Ln10">
            <summary>Represents the natural logarithm of 10.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsD.OneOverPi">
            <summary>Represents one divided by the mathematical constant π.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsD.Pi">
            <summary>Represents the mathematical constant π.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsD.PiOver2">
            <summary>Represents the mathematical constant π divided by two.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsD.PiOver4">
            <summary>Represents the mathematical constant π divided by four.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsD.TwoPi">
            <summary>Represents the mathematical constant π times two.</summary>
        </member>
        <member name="T:DigitalRune.Mathematics.ConstantsF">
            <summary>
            Provides useful constants (single-precision).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsF.E">
            <summary>Represents the mathematical constant e.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsF.Log10OfE">
            <summary>Represents the logarithm base 10 of e.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsF.Log2OfE">
            <summary>Represents the logarithm base 2 of e.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsF.Ln2">
            <summary>Represents the natural logarithm of 2.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsF.Ln10">
            <summary>Represents the natural logarithm of 10.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsF.OneOverPi">
            <summary>Represents one divided by the mathematical constant π.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsF.Pi">
            <summary>Represents the mathematical constant π.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsF.PiOver2">
            <summary>Represents the mathematical constant π divided by two.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsF.PiOver4">
            <summary>Represents the mathematical constant π divided by four.</summary>
        </member>
        <member name="F:DigitalRune.Mathematics.ConstantsF.TwoPi">
            <summary>Represents the mathematical constant π times two.</summary>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Curve2FReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Interpolation.Curve2F"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Curve2FReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Interpolation.Curve2F)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.CurveKey2FReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey2F"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.CurveKey2FReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Interpolation.CurveKey2F)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Matrix22DReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Matrix22DReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.Matrix22D)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Matrix22FReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Matrix22FReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.Matrix22F)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Matrix33DReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Matrix33DReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.Matrix33D)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Matrix33FReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Matrix33FReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.Matrix33F)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Matrix44DReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Matrix44DReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.Matrix44D)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Matrix44FReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Matrix44FReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.Matrix44F)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.MatrixDReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.MatrixDReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.MatrixD)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.MatrixFReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.MatrixFReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.MatrixF)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Mathematics.Content"/> namespace contains the run-time components
            of the content pipeline. (Only available in XNA/MonoGame compatible builds.)
            </summary>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Path2FReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Interpolation.Path2F"/> from binary format. (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Path2FReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Interpolation.Path2F)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Path3FReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Interpolation.Path3F"/> from binary format. (Only available in the XNA-compatible build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Path3FReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Interpolation.Path3F)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.PathKey2FReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Interpolation.PathKey2F"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.PathKey2FReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Interpolation.PathKey2F)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.PathKey3FReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Interpolation.PathKey3F"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.PathKey3FReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Interpolation.PathKey3F)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.QuaternionDReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.QuaternionDReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.QuaternionD)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.QuaternionFReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.QuaternionFReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.QuaternionF)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Vector2DReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Vector2DReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.Vector2D)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Vector2FReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Vector2FReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.Vector2F)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Vector3DReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Vector3DReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.Vector3D)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Vector3FReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Vector3FReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.Vector3F)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Vector4DReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Vector4DReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.Vector4D)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.Vector4FReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.Vector4FReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.Vector4F)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.VectorDReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.VectorDReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.VectorD)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Content.VectorFReader">
            <summary>
            Reads a <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> from binary format. (Only available in the XNA-compatible
            build.)
            </summary>
            <remarks>
            This type is available only in the XNA-compatible build of the DigitalRune.Mathematics.dll.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Content.VectorFReader.Read(Microsoft.Xna.Framework.Content.ContentReader,DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Reads a strongly typed object from the current stream.
            </summary>
            <param name="input">The <see cref="T:Microsoft.Xna.Framework.Content.ContentReader"/> used to read the object.</param>
            <param name="existingInstance">An existing object to read into.</param>
            <returns>The type of object to read.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.ArcSegment2F">
            <summary>
            Defines a 2-dimensional elliptic arc segment (single-precision).
            </summary>
            <remarks>
            <para>
            The <see cref="T:DigitalRune.Mathematics.Interpolation.ArcSegment2F"/> draws an elliptic arc between the start point 
            <see cref="P:DigitalRune.Mathematics.Interpolation.ArcSegment2F.Point1"/> and the end point <see cref="P:DigitalRune.Mathematics.Interpolation.ArcSegment2F.Point2"/>.
            </para>
            <para>
            To draw a full ellipse, set <see cref="P:DigitalRune.Mathematics.Interpolation.ArcSegment2F.Point1"/> equal to <see cref="P:DigitalRune.Mathematics.Interpolation.ArcSegment2F.Point2"/> and 
            <see cref="P:DigitalRune.Mathematics.Interpolation.ArcSegment2F.IsLargeArc"/> to <see langword="true"/>. An ellipse will be drawn so that
            <see cref="P:DigitalRune.Mathematics.Interpolation.ArcSegment2F.Point1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.ArcSegment2F.Point2"/> lie on the positive x-axis of the ellipse.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.ArcSegment2F.Point1">
            <summary>
            Gets or sets the start point.
            </summary>
            <value>The start point. The default value is (1, 0).</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.ArcSegment2F.Point2">
            <summary>
            Gets or sets the end point.
            </summary>
            <value>The end point. The default value is (0, 1).</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.ArcSegment2F.IsLargeArc">
            <summary>
            Gets or sets a value that indicates whether the arc should be greater than 180 degrees.
            </summary>
            <value>
            <see langword="true"/> if the arc should be greater than 180 degrees; otherwise, 
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.ArcSegment2F.Radius">
            <summary>
            Gets or sets the radii (semi-major and semi-minor axis) of the ellipse.
            </summary>
            <value>The radii of the ellipse. The default value is (1, 1).</value>
            <exception cref="T:System.ArgumentException">
            A radius is 0 or negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.ArcSegment2F.RotationAngle">
            <summary>
            Gets or sets the angle from the current x-axis to the x-axis of the ellipse.
            </summary>
            <value>
            The angle (in radians) from the current x-axis to the x-axis of the ellipse. The default
            value is 0.
            </value>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.ArcSegment2F.SweepClockwise">
            <summary>
            Gets or sets a value indicating whether the arc is drawn in clockwise or counter-clockwise
            direction.
            </summary>
            <value>
            <see langword="true"/> if the arc is drawn in clockwise direction; otherwise, 
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ArcSegment2F.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.ArcSegment2F"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ArcSegment2F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ArcSegment2F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ArcSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ArcSegment2F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector2F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ArcSegment2F.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ArcSegment2F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.ArcSegment2F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.ArcSegment2F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.ArcSegment2F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ArcSegment2F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.BSplineSegment1F">
            <summary>
            Defines a single segment of a 1-dimensional cubic B-spline (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment1F"/> can be used to smoothly interpolate between two points. 
            </para>
            <para>
            Given a series of points (<see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point1"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point2"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point3"/>, 
            <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point4"/>) this method performs a smooth approximation between the points 
            <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point2"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point3"/>. The approximation curve is known as 
            <i>B-spline</i>. It is not guaranteed that the curve runs through the given points 
            <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point2"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point3"/>!
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point1">
            <summary>
            Gets or sets the previous point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point2">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point3">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Point4">
            <summary>
            Gets or sets the subsequent point.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Flatten(System.Collections.Generic.ICollection{System.Single},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment1F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment1F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment1F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.BSplineSegment2F">
            <summary>
            Defines a single segment of a 2-dimensional cubic B-spline (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment2F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            Given a series of points (<see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point1"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point2"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point3"/>, 
            <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point4"/>) this method performs a smooth approximation between the points 
            <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point2"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point3"/>. The approximation curve is known as 
            <i>B-spline</i>. It is not guaranteed that the curve runs through the given points 
            <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point2"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point3"/>!
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point1">
            <summary>
            Gets or sets the previous point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point2">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point3">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Point4">
            <summary>
            Gets or sets the subsequent point.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector2F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment2F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment2F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment2F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.BSplineSegment3F">
            <summary>
            Defines a single segment of a 3-dimensional cubic B-spline (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment3F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            Given a series of points (<see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point1"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point2"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point3"/>, 
            <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point4"/>) this method performs a smooth approximation between the points 
            <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point2"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point3"/>. The approximation curve is known as 
            <i>B-spline</i>. It is not guaranteed that the curve runs through the given points 
            <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point2"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point3"/>!
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point1">
            <summary>
            Gets or sets the previous point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point2">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point3">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Point4">
            <summary>
            Gets or sets the subsequent point.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment3F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BSplineSegment3F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BSplineSegment3F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.BezierSegment1F">
            <summary>
            Defines a single segment of a 1-dimensional cubic Bézier spline (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment1F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            It is a curve that connects two points: <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Point1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Point2"/>. Two 
            more points are required to define the curvature of the spline: <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.ControlPoint1"/> 
            and <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.ControlPoint2"/>. The curve smoothly interpolates between <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Point1"/> 
            and <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Point2"/>.
            </para>
            <para>
            The curve is a function <i>point = C(parameter)</i> that takes a scalar parameter and returns 
            a point on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.GetPoint(System.Single)"/>). The curve parameter lies in the interval 
            [0,1]; it is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or 
            <i>weight of the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Point1"/>; 
            <i>C(1)</i> returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Point2"/>.
            </para>
            <para>
            The curve is defined as:
            </para>
            <para>
            C(<i>u</i>) = (1 - <i>u</i>)<sup>3</sup> <i>p<sub>1</sub></i>
                          + 3u (1 - <i>u</i>)<sup>2</sup> <i>cp<sub>1</sub></i>
                          + 3u<sup>2</sup> (1 - <i>u</i>) <i>cp<sub>2</sub></i>
                          + u<sup>3</sup> <i>p<sub>2</sub></i>
            </para>
            <para>
            where <i>u</i> is the curve parameter, <i>p</i> are the start/end points and 
            <i>cp</i> are the control points.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Point1">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Point2">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.ControlPoint1">
            <summary>
            Gets or sets the first control point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment1F.ControlPoint2">
            <summary>
            Gets or sets the second control point.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Flatten(System.Collections.Generic.ICollection{System.Single},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment1F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment1F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment1F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.BezierSegment2F">
            <summary>
            Defines a single segment of a 2-dimensional cubic Bézier splines (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment2F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            It is a curve that connects two points: <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Point1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Point2"/>. Two 
            more points are required to define the curvature of the spline: <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.ControlPoint1"/> 
            and <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.ControlPoint2"/>. The curve smoothly interpolates between <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Point1"/> 
            and <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Point2"/>.
            </para>
            <para>
            The curve is a function <i>point = C(parameter)</i> that takes a scalar parameter and returns 
            a point on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.GetPoint(System.Single)"/>). The curve parameter lies in the interval 
            [0,1]; it is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or 
            <i>weight of the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Point1"/>; 
            <i>C(1)</i> returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Point2"/>.
            </para>
            <para>
            The curve is defined as:
            </para>
            <para>
            C(<i>u</i>) = (1 - <i>u</i>)<sup>3</sup> <i>p<sub>1</sub></i>
                          + 3u (1 - <i>u</i>)<sup>2</sup> <i>cp<sub>1</sub></i>
                          + 3u<sup>2</sup> (1 - <i>u</i>) <i>cp<sub>2</sub></i>
                          + u<sup>3</sup> <i>p<sub>2</sub></i>
            </para>
            <para>
            where <i>u</i> is the curve parameter, <i>p</i> are the start/end points and 
            <i>cp</i> are the control points.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Point1">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Point2">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.ControlPoint1">
            <summary>
            Gets or sets the first control point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment2F.ControlPoint2">
            <summary>
            Gets or sets the second control point.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector2F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment2F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment2F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment2F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.BezierSegment3F">
            <summary>
            Defines a single segment of a 3-dimensional cubic Bézier splines (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment3F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            It is a curve that connects two points: <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Point1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Point2"/>. Two 
            more points are required to define the curvature of the spline: <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.ControlPoint1"/> 
            and <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.ControlPoint2"/>. The curve smoothly interpolates between <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Point1"/> 
            and <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Point2"/>.
            </para>
            <para>
            The curve is a function <i>point = C(parameter)</i> that takes a scalar parameter and returns 
            a point on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.GetPoint(System.Single)"/>). The curve parameter lies in the interval 
            [0,1]; it is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or 
            <i>weight of the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Point1"/>; 
            <i>C(1)</i> returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Point2"/>.
            </para>
            <para>
            The curve is defined as:
            </para>
            <para>
            C(<i>u</i>) = (1 - <i>u</i>)<sup>3</sup> <i>p<sub>1</sub></i>
                          + 3u (1 - <i>u</i>)<sup>2</sup> <i>cp<sub>1</sub></i>
                          + 3u<sup>2</sup> (1 - <i>u</i>) <i>cp<sub>2</sub></i>
                          + u<sup>3</sup> <i>p<sub>2</sub></i>
            </para>
            <para>
            where <i>u</i> is the curve parameter, <i>p</i> are the start/end points and 
            <i>cp</i> are the control points.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Point1">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Point2">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.ControlPoint1">
            <summary>
            Gets or sets the first control point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.BezierSegment3F.ControlPoint2">
            <summary>
            Gets or sets the second control point.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment3F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.BezierSegment3F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.BezierSegment3F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.CardinalSegment1F">
            <summary>
            Defines a single segment of a 1-dimensional cubic Cardinal spline (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment1F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            Given a series of points (<see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point1"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point2"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point3"/>, 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point4"/>) this method performs a smooth interpolation between the points 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point2"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point3"/>. The interpolation curve is known as as 
            <i>Cardinal spline</i>. The curve (<i>spline</i>) is a specialization of the <i>cubic Hermit 
            spline</i>. The curve runs through the control points <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point2"/> and 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point3"/>. The tangent at each point is computed from the previous point and the 
            following point. The tangent <i>t<sub>i</sub></i> for point <i>p<sub>i</sub></i> is computed 
            as:
            </para>
            <para>
            <i>t<sub>i</sub></i> = 1/2 (1 - <i>tension</i>) (<i>p<sub>i+1</sub></i> - <i>p<sub>i-1</sub></i>),
            </para>
            <para>
            where <i>tension</i> is a parameter, which is a constant that modifies the length of the
            tangent. <i>tension</i> = 1 will yield zero tangents and <i>tension</i> = 0 yields a 
            Catmull-Rom spline.
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point2"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point3"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point1">
            <summary>
            Gets or sets the previous point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point2">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point3">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Point4">
            <summary>
            Gets or sets the subsequent point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Tension">
            <summary>
            Gets or sets the tension constant.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Flatten(System.Collections.Generic.ICollection{System.Single},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment1F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment1F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment1F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.CardinalSegment2F">
            <summary>
            Defines a single segment of a 2-dimensional cubic Cardinal spline (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment2F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            Given a series of points (<see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point1"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point2"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point3"/>, 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point4"/>) this method performs a smooth interpolation between the points 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point2"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point3"/>. The interpolation curve is known as as 
            <i>Cardinal spline</i>. The curve (<i>spline</i>) is a specialization of the <i>cubic Hermit 
            spline</i>. The curve runs through the control points <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point2"/> and 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point3"/>. The tangent at each point is computed from the previous point and the 
            following point. The tangent <i>t<sub>i</sub></i> for point <i>p<sub>i</sub></i> is computed 
            as:
            </para>
            <para>
            <i>t<sub>i</sub></i> = 1/2 (1 - <i>tension</i>) (<i>p<sub>i+1</sub></i> - <i>p<sub>i-1</sub></i>),
            </para>
            <para>
            where <i>tension</i> is a parameter, which is a constant that modifies the length of the
            tangent. <i>tension</i> = 1 will yield zero tangents and <i>tension</i> = 0 yields a 
            Catmull-Rom spline.
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point2"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point3"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point1">
            <summary>
            Gets or sets the previous point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point2">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point3">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Point4">
            <summary>
            Gets or sets the subsequent point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Tension">
            <summary>
            Gets or sets the tension constant.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector2F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment2F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment2F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment2F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.CardinalSegment3F">
            <summary>
            Defines a single segment of a 3-dimensional cubic Cardinal spline (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment3F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            Given a series of points (<see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point1"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point2"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point3"/>, 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point4"/>) this method performs a smooth interpolation between the points 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point2"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point3"/>. The interpolation curve is known as as 
            <i>Cardinal spline</i>. The curve (<i>spline</i>) is a specialization of the <i>cubic Hermit 
            spline</i>. The curve runs through the control points <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point2"/> and 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point3"/>. The tangent at each point is computed from the previous point and the 
            following point. The tangent <i>t<sub>i</sub></i> for point <i>p<sub>i</sub></i> is computed 
            as:
            </para>
            <para>
            <i>t<sub>i</sub></i> = 1/2 (1 - <i>tension</i>) (<i>p<sub>i+1</sub></i> - <i>p<sub>i-1</sub></i>),
            </para>
            <para>
            where <i>tension</i> is a parameter, which is a constant that modifies the length of the
            tangent. <i>tension</i> = 1 will yield zero tangents and <i>tension</i> = 0 yields a 
            Catmull-Rom spline.
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point2"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point3"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point1">
            <summary>
            Gets or sets the previous point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point2">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point3">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Point4">
            <summary>
            Gets or sets the subsequent point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Tension">
            <summary>
            Gets or sets the tension constant.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment3F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CardinalSegment3F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CardinalSegment3F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F">
            <summary>
            Defines a single segment of a 1-dimensional cubic Catmull-Rom spline (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            Given a series of points (<see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point1"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point2"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point3"/>, 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point4"/>) this method performs a smooth interpolation between the points 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point2"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point3"/>. The interpolation curve is known as 
            <i>Catmull-Rom spline</i>. The curve (<i>spline</i>) is a specialization of the <i>cubic 
            Hermit spline</i>. The curve runs through the control points <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point2"/> and 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point3"/>. The tangent at each point is the average of the slope from the previous 
            point and the slope to the next point.
            </para>
            <para>
            The Catmull-Rom spline is defined as:
            </para>
            <para>
            C(<i>u</i>) = ((-<i>u</i><sup>3</sup> + 2 <i>u</i><sup>2</sup> - <i>u</i>) <i>p<sub>1</sub></i>
                           + (3 <i>u</i><sup>3</sup> - 5 <i>u</i><sup>2</sup> + 2) <i>p<sub>2</sub></i>
                           + (-3 <i>u</i><sup>3</sup> + 4 <i>u</i><sup>2</sup> + <i>u</i>) <i>p<sub>3</sub></i>
                           + (<i>u</i><sup>3</sup> - <i>u</i><sup>2</sup>) <i>p<sub>4</sub></i>
                          )/ 2
            </para>
            <para>
            where <i>u</i> is the interpolation parameter.
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point2"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point3"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point1">
            <summary>
            Gets or sets the previous point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point2">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point3">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Point4">
            <summary>
            Gets or sets the subsequent point.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Flatten(System.Collections.Generic.ICollection{System.Single},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment1F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F">
            <summary>
            Defines a single segment of a 2-dimensional cubic Catmull-Rom spline (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            Given a series of points (<see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point1"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point2"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point3"/>, 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point4"/>) this method performs a smooth interpolation between the points 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point2"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point3"/>. The interpolation curve is known as 
            <i>Catmull-Rom spline</i>. The curve (<i>spline</i>) is a specialization of the <i>cubic 
            Hermit spline</i>. The curve runs through the control points <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point2"/> and 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point3"/>. The tangent at each point is the average of the slope from the previous 
            point and the slope to the next point.
            </para>
            <para>
            The Catmull-Rom spline is defined as:
            </para>
            <para>
            C(<i>u</i>) = ((-<i>u</i><sup>3</sup> + 2 <i>u</i><sup>2</sup> - <i>u</i>) <i>p<sub>1</sub></i>
                           + (3 <i>u</i><sup>3</sup> - 5 <i>u</i><sup>2</sup> + 2) <i>p<sub>2</sub></i>
                           + (-3 <i>u</i><sup>3</sup> + 4 <i>u</i><sup>2</sup> + <i>u</i>) <i>p<sub>3</sub></i>
                           + (<i>u</i><sup>3</sup> - <i>u</i><sup>2</sup>) <i>p<sub>4</sub></i>
                          )/ 2
            </para>
            <para>
            where <i>u</i> is the interpolation parameter.
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point2"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point3"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point1">
            <summary>
            Gets or sets the previous point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point2">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point3">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Point4">
            <summary>
            Gets or sets the subsequent point.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector2F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F"/> class. (This method reuses a 
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment2F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F">
            <summary>
            Defines a single segment of a 3-dimensional cubic Catmull-Rom spline (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            Given a series of points (<see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point1"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point2"/>, <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point3"/>, 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point4"/>) this method performs a smooth interpolation between the points 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point2"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point3"/>. The interpolation curve is known as 
            <i>Catmull-Rom spline</i>. The curve (<i>spline</i>) is a specialization of the <i>cubic 
            Hermit spline</i>. The curve runs through the control points <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point2"/> and 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point3"/>. The tangent at each point is the average of the slope from the previous 
            point and the slope to the next point.
            </para>
            <para>
            The Catmull-Rom spline is defined as:
            </para>
            <para>
            C(<i>u</i>) = ((-<i>u</i><sup>3</sup> + 2 <i>u</i><sup>2</sup> - <i>u</i>) <i>p<sub>1</sub></i>
                           + (3 <i>u</i><sup>3</sup> - 5 <i>u</i><sup>2</sup> + 2) <i>p<sub>2</sub></i>
                           + (-3 <i>u</i><sup>3</sup> + 4 <i>u</i><sup>2</sup> + <i>u</i>) <i>p<sub>3</sub></i>
                           + (<i>u</i><sup>3</sup> - <i>u</i><sup>2</sup>) <i>p<sub>4</sub></i>
                          )/ 2
            </para>
            <para>
            where <i>u</i> is the interpolation parameter.
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point2"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point3"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point1">
            <summary>
            Gets or sets the previous point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point2">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point3">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Point4">
            <summary>
            Gets or sets the subsequent point.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F"/> class. (This method reuses a 
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CatmullRomSegment3F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.Curve2F">
            <summary>
            Represents a 2-dimensional curve that is used to define a function <i>y = f(x)</i> 
            (single-precision).
            </summary>
            <remarks>
            <para>
            In contrast to general curves, the <see cref="T:DigitalRune.Mathematics.Interpolation.Curve2F"/> is a specialized type of curve that 
            is used to define a function <i>y = f(x)</i>.
            </para>
            <para>
            A general curve is function of the form <i><strong>p</strong> = C(u)</i>. The curve parameter 
            <i>u</i> is a scalar. The result of <i>C(u)</i> is a point <i><strong>p</strong></i> on the 
            curve. In the 2-dimensional case (see <see cref="T:DigitalRune.Mathematics.Interpolation.Path2F"/>) the function can be written as 
            <i>(x, y) = C(u)</i>.
            </para>
            <para>
            The <see cref="T:DigitalRune.Mathematics.Interpolation.Curve2F"/> is a special type of curve where the curve parameter and 
            the x-component of the resulting points are identical: <i>(x, y) = C(x)</i>.
            </para>
            <para>
            <strong>Application:</strong> A <see cref="T:DigitalRune.Mathematics.Interpolation.Curve2F"/> can be used to define an animation 
            curve. An animation curve describes how a quantity y (size, offset, etc.) evolves over time. 
            the curve parameter is typically <i>time</i>. These curves must be monotonic in the parameter 
            axis (x-axis). There can only be one valid y value for each curve parameter x.
            </para>
            <para>
            <strong>Curve Keys:</strong> 
            The curve keys (<see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey2F"/>) define the control points of the curve. The 
            parameter of the curve keys (see <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Parameter"/>) are always 
            identical to the x-component of the points (see <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Point"/>). 
            Therefore, it is not necessary to set the curve parameter manually.
            </para>
            <para>
            The curve keys are interpolated using spline interpolation. Each curve key defines the type
            of spline interpolation that is used from this curve key to the next (see 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Interpolation"/>). Some types of interpolation require 
            additional information: <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Bezier"/> requires additional 
            control points and <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Hermite"/> requires tangents. These values
            are stored in the properties <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentIn"/> and 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentOut"/> of the curve keys.
            </para>
            <para>
            It is possible to specify invalid control points or tangents. Neither <see cref="T:DigitalRune.Mathematics.Interpolation.Curve2F"/> 
            nor <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey2F"/> checks whether the values in 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentIn"/> or <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentOut"/>
            are a valid. In general, the results are undefined if a curve contains invalid tangents.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.GetPoint(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.GetCycleOffset(System.Single)">
            <summary>
            Gets the cycle offset for a given parameter.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The cycle offset.</returns>
            <remarks>
            The cycle offset is 0 if the <see cref="T:DigitalRune.Mathematics.Interpolation.CurveLoopType"/> is unequal
            to <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.CycleOffset"/> or if the <paramref name="parameter"/>
            is on the curve. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.GetTangent(System.Single)">
            <summary>
            Computes the tangent for a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>
            The curve tangent. If the function is not differentiable at the given parameter, either the 
            incoming or outgoing tangent is returned.
            </returns>
            <remarks>
            <para>
            The curve tangent can be used to compute the slope <i>k</i> of the function at the given 
            parameter.
            <code lang="csharp">
            <![CDATA[
            Vector2F tangent = curve.GetTangent(0.5f); // Get the tangent at x = 0.5.
            float k = tangent.Y / tangent.X;           // Compute the slope at x = 0.5.
            ]]>
            </code>
            </para>
            <para>
            If the curve keys contain invalid tangents, the results are undefined.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Not supported.
            </summary>
            <param name="start">The parameter value of the start position.</param>
            <param name="end">The parameter value of the end position.</param>
            <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
            <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
            <returns>The approximated length of the curve in the given interval.</returns>
            <exception cref="T:System.NotSupportedException">
            This method is not supported.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector2F},System.Int32,System.Single)">
            <summary>
            Not supported.
            </summary>
            <param name="points">The points.</param>
            <param name="maxNumberOfIterations">The max number of iterations.</param>
            <param name="tolerance">The tolerance.</param>
            <exception cref="T:System.NotSupportedException">
            This operation is not supported. A <see cref="T:DigitalRune.Mathematics.Interpolation.Curve2F"/> cannot be flattened.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.GetSplines(System.Int32,DigitalRune.Mathematics.Interpolation.ICurve{System.Single,System.Single}@,DigitalRune.Mathematics.Interpolation.ICurve{System.Single,System.Single}@)">
            <summary>
            Gets the splines for the given segment index.
            </summary>
            <param name="index">The index.</param>
            <param name="xSpline">The x spline.</param>
            <param name="ySpline">The y spline.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the 
            <see cref="T:System.Xml.Serialization.IXmlSerializable"/> interface, you should return <see langword="null"/> from this
            method, and instead, if specifying a custom schema is required, apply the 
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by
            the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. 
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Curve2F.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. 
            </param>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.CurveHelper">
            <summary>
            Provides helper methods for curves.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CurveHelper.GetLength(DigitalRune.Mathematics.Interpolation.ICurve{System.Single,DigitalRune.Mathematics.Algebra.Vector2F},System.Single,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start"/>, <paramref name="end"/>].
            </summary>
            <param name="curve">The curve.</param>
            <param name="start">The parameter value of the start position.</param>
            <param name="end">The parameter value of the end position.</param>
            <param name="minNumberOfIterations">
            The minimum number of iterations which are taken to compute the length.
            </param>
            <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
            <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
            <returns>
            The approximated length of the curve in the given interval.
            </returns>
            <remarks>
            The length is computed with an iterative algorithm. The iterations end when 
            the <paramref name="maxNumberOfIterations"/> were performed, or when the 
            <paramref name="tolerance"/> criterion is met - whichever comes first.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CurveHelper.GetLength(DigitalRune.Mathematics.Interpolation.ICurve{System.Single,DigitalRune.Mathematics.Algebra.Vector3F},System.Single,System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
            Computes the approximated length of the curve for the parameter interval
            [<paramref name="start"/>, <paramref name="end"/>].
            </summary>
            <param name="curve">The curve.</param>
            <param name="start">The parameter value of the start position.</param>
            <param name="end">The parameter value of the end position.</param>
            <param name="minNumberOfIterations">
            The minimum number of iterations which are taken to compute the length.
            </param>
            <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
            <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length.
            The absolute error will be less than this tolerance.
            </param>
            <returns>
            The approximated length of the curve in the given interval.
            </returns>
            <remarks>
            The length is computed with an iterative algorithm. The iterations end when 
            the <paramref name="maxNumberOfIterations"/> were performed, or when the 
            <paramref name="tolerance"/> criterion is met - whichever comes first.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CurveHelper.Flatten(DigitalRune.Mathematics.Interpolation.ICurve{System.Single,DigitalRune.Mathematics.Algebra.Vector2F},System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector2F},System.Int32,System.Single)">
            <summary>
            Flattens the specified curve. See <see cref="M:DigitalRune.Mathematics.Interpolation.ICurve`2.Flatten(System.Collections.Generic.ICollection{`1},System.Int32,`0)"/>.
            </summary>
            <remarks>
            This method cannot be used for curves that contain gaps!
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CurveHelper.Flatten(DigitalRune.Mathematics.Interpolation.ICurve{System.Single,DigitalRune.Mathematics.Algebra.Vector3F},System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Single)">
            <summary>
            Flattens the specified curve. See <see cref="M:DigitalRune.Mathematics.Interpolation.ICurve`2.Flatten(System.Collections.Generic.ICollection{`1},System.Int32,`0)"/>.
            </summary>
            <remarks>
            This method cannot be used for curves that contain gaps!
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CurveHelper.GetLength(System.Collections.Generic.List{DigitalRune.Mathematics.Algebra.Vector2F})">
            <summary>
            Computes the length of a list of 2D line segments.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CurveHelper.GetLength(System.Collections.Generic.List{DigitalRune.Mathematics.Algebra.Vector3F})">
            <summary>
            Computes the length of a list of 3D line segments.
            </summary>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.CurveKey`2">
            <summary>
            Defines a curve key (control point) of a piecewise curve.
            </summary>
            <typeparam name="TParam">
            The type of the curve parameter (usually <see cref="T:System.Single"/> or <see cref="T:System.Double"/>).
            </typeparam>
            <typeparam name="TPoint">
            The type of the curve points (such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>, etc.).
            </typeparam>
            <inheritdoc cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3"/>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Parameter">
            <summary>
            Gets or sets a value that defines where this curve key is positioned on the curve.
            </summary>
            <value>The parameter value.</value>
            <remarks>
            <para>
            The parameter is normally zero at the first curve key and increases as we move along the 
            curve.
            </para>
            <para>
            Depending on where or how the curve is used the curve parameter could be interpreted as 
            <i>time</i> (to describe when a certain point is reached) or <i>distance</i> (to describe 
            the distance from the start of the curve). Other interpretations can be used as well.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Point">
            <summary>
            Gets or sets the curve point for this curve key.
            </summary>
            <value>The curve point (control point).</value>
            <remarks>
            Depending on the type of interpolation that is used for the current segment of the curve,
            the key may be point on the curve (see <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Bezier"/>, 
            <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.CatmullRom"/>, <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Hermite"/>,
            <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Linear"/>, <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.StepLeft"/>, 
            <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.StepCentered"/>, <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.StepRight"/>)
            or may only be a control point that does not directly on the curve (see 
            <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.BSpline"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentIn">
            <summary>
            Gets or sets the incoming tangent or the control point before this curve key.
            </summary>
            <value>The incoming tangent or the control point before this curve key.</value>
            <remarks>
            <para>
            This property is used to compute previous curve segment (the spline that ends at this curve 
            key).
            </para>
            <para>
            The meaning of this property depends on the type of interpolation that is for the previous
            curve segment:
            <list type="table">
            <listheader>
            <term>SplineInterpolation</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term>
            <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Hermite"/>
            </term>
            <description>
            Hermite splines require tangent information. Therefore, this property defines the incoming 
            tangent of the spline that ends at this curve key.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Bezier"/>
            </term>
            <description>
            Bézier splines require additional control points. Therefore, this property defines the 
            control point before this curve key.
            </description>
            </item>
            <item>
            <term>
            Other
            </term>
            <description>
            All other types of interpolation do not need any additional information. The property 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentIn"/> is unused.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentOut">
            <summary>
            Gets or sets the outgoing tangent or the control point after this curve key.
            </summary>
            <value>The outgoing tangent or the control point after this curve key.</value>
            <remarks>
            <para>
            This property is used to compute the current curve segment (the spline that starts at this 
            curve key).
            </para>
            <para>
            The meaning of this property depends on the type of interpolation that is for the current
            curve segment:
            <list type="table">
            <listheader>
            <term>SplineInterpolation</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term>
            <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Hermite"/>
            </term>
            <description>
            Hermite splines require tangent information. Therefore, this property defines the outgoing 
            tangent of the spline between this curve key and the next.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Bezier"/>
            </term>
            <description>
            Bézier splines require additional control points. Therefore, this property defines the 
            control point after this curve key.
            </description>
            </item>
            <item>
            <term>
            Other
            </term>
            <description>
            All other types of interpolation do not need any additional information. The property 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentOut"/> is unused.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Interpolation">
            <summary>
            Gets or sets the type of interpolation (the spline type) used for the current curve segment
            between this key and the next key.
            </summary>
            <value>
            The type of interpolation used for the current curve segment (the spline between this curve
            key and the next curve key).
            </value>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CurveKey`2.GetParameter">
            <summary>
            Gets the parameter.
            </summary>
            <returns>The parameter.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CurveKey`2.SetParameter(`0)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="value">The parameter</param>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.CurveKey2F">
            <summary>
            Defines a control point on a <see cref="T:DigitalRune.Mathematics.Interpolation.Curve2F"/> (single-precision).
            </summary>
            <inheritdoc cref="T:DigitalRune.Mathematics.Interpolation.Curve2F"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CurveKey2F.GetParameter">
            <summary>
            Gets the parameter.
            </summary>
            <returns>The parameter.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.CurveKey2F.SetParameter(System.Single)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="value">The parameter</param>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.CurveLoopType">
            <summary>
            Defines how a curve is continued before the first curve key or after the last curve key.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Constant">
            <summary>
            The curve value is constant and equal to the nearest key.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Linear">
            <summary>
            The curve value is a linear extrapolation of the nearest key value in the direction of the
            tangent. 
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Cycle">
            <summary>
            Parameters specified past the ends of the curve will wrap around to the opposite side of the
            curve. If the values of the first and last key are different, the value will "jump" 
            instantly from one value to the other at the curve ends.
            </summary> 
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.CycleOffset">
            <summary>
            Same as <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Cycle"/> but the curve values are offset by the difference of the first
            and last key value. Unlike <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Cycle"/> the curve is continued without "jumps" at
            the curve ends. 
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Oscillate">
            <summary>
            Parameters specified past the ends of the curve act as an offset from the same side of the 
            curve toward the opposite side. This is similar to <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Cycle"/> where the curve is
            mirrored beyond the curve ends.
            </summary>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.HermiteSegment1F">
            <summary>
            Defines a single segment of a 1-dimensional cubic Hermite spline (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment1F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            The curve runs through the points <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point2"/>. The tangents 
            at these points can be controlled with <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Tangent1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Tangent2"/>. 
            The curve smoothly interpolates between <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point2"/>.
            </para>
            <para>
            Multiple splines can be patched together by matching the tangents at the control points.
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point1"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point2"/>.
            </para>
            <para>
            The curve is defined as:
            </para>
            <para>
            C(<i>u</i>) = (2<i>u</i><sup>3</sup> - 3<i>u</i><sup>2</sup> + 1) <i>p<sub>1</sub></i>
                          + (<i>u</i><sup>3</sup> - 2<i>u</i><sup>2</sup> + <i>u</i>) <i>t<sub>1</sub></i>
                          + (-2<i>u</i><sup>3</sup> + 3<i>u</i><sup>2</sup>) <i>p<sub>2</sub></i>
                          + (<i>u</i><sup>3</sup> - <i>u</i><sup>2</sup>) <i>t<sub>2</sub></i>,
            </para>
            <para>
            where <i>u</i> is the interpolation parameter, <i>p</i> are the start/end points and <i>t</i>
            are the start/end tangents.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point1">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point2">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Tangent1">
            <summary>
            Gets or sets the tangent at <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point1"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Tangent2">
            <summary>
            Gets or sets the tangent at <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Point2"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Flatten(System.Collections.Generic.ICollection{System.Single},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment1F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment1F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment1F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.HermiteSegment2F">
            <summary>
            Defines a single segment of a 2-dimensional cubic Hermite spline (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment2F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            The curve runs through the points <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point2"/>. The tangents 
            at these points can be controlled with <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Tangent1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Tangent2"/>. 
            The curve smoothly interpolates between <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point2"/>.
            </para>
            <para>
            Multiple splines can be patched together by matching the tangents at the control points.
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point1"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point2"/>.
            </para>
            <para>
            The curve is defined as:
            </para>
            <para>
            C(<i>u</i>) = (2<i>u</i><sup>3</sup> - 3<i>u</i><sup>2</sup> + 1) <i>p<sub>1</sub></i>
                          + (<i>u</i><sup>3</sup> - 2<i>u</i><sup>2</sup> + <i>u</i>) <i>t<sub>1</sub></i>
                          + (-2<i>u</i><sup>3</sup> + 3<i>u</i><sup>2</sup>) <i>p<sub>2</sub></i>
                          + (<i>u</i><sup>3</sup> - <i>u</i><sup>2</sup>) <i>t<sub>2</sub></i>,
            </para>
            <para>
            where <i>u</i> is the interpolation parameter, <i>p</i> are the start/end points and <i>t</i>
            are the start/end tangents.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point1">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point2">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Tangent1">
            <summary>
            Gets or sets the tangent at <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point1"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Tangent2">
            <summary>
            Gets or sets the tangent at <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Point2"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector2F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment2F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment2F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment2F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.HermiteSegment3F">
            <summary>
            Defines a single segment of a 3-dimensional cubic Hermite spline (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment3F"/> can be used to smoothly interpolate between two points.
            </para>
            <para>
            The curve runs through the points <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point2"/>. The tangents 
            at these points can be controlled with <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Tangent1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Tangent2"/>. 
            The curve smoothly interpolates between <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point2"/>.
            </para>
            <para>
            Multiple splines can be patched together by matching the tangents at the control points.
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point1"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point2"/>.
            </para>
            <para>
            The curve is defined as:
            </para>
            <para>
            C(<i>u</i>) = (2<i>u</i><sup>3</sup> - 3<i>u</i><sup>2</sup> + 1) <i>p<sub>1</sub></i>
                          + (<i>u</i><sup>3</sup> - 2<i>u</i><sup>2</sup> + <i>u</i>) <i>t<sub>1</sub></i>
                          + (-2<i>u</i><sup>3</sup> + 3<i>u</i><sup>2</sup>) <i>p<sub>2</sub></i>
                          + (<i>u</i><sup>3</sup> - <i>u</i><sup>2</sup>) <i>t<sub>2</sub></i>,
            </para>
            <para>
            where <i>u</i> is the interpolation parameter, <i>p</i> are the start/end points and <i>t</i>
            are the start/end tangents.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point1">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point2">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Tangent1">
            <summary>
            Gets or sets the tangent at <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point1"/>.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Tangent2">
            <summary>
            Gets or sets the tangent at <see cref="P:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Point2"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment3F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.HermiteSegment3F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.HermiteSegment3F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.ICurve`2">
            <summary>
            Represents a curve.
            </summary>
            <typeparam name="TParam">
            The type of the curve parameter (usually <see cref="T:System.Single"/> or <see cref="T:System.Double"/>).
            </typeparam>
            <typeparam name="TPoint">
            The type of the curve points (such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>, etc.).
            </typeparam>
            <remarks>
            <para>
            Curves can be used to describe animation curves, 2D paths, 3D paths, and more.
            </para>
            <para>
            Mathematically, a curve is a function of the form <i>point = C(parameter)</i>. The <i>curve 
            parameter</i> is a scalar. The result of <i>C(parameter)</i> is a <i>point</i> on the curve.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ICurve`2.GetPoint(`0)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>
            The curve point. (If the curve does not contain any points a vector with NaN values is
            returned.)
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ICurve`2.GetTangent(`0)">
            <summary>
            Computes the tangent for a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve tangent.</returns>
            <remarks>
            This method computes the curve tangent (also known as <i>slope</i> or <i>velocity</i>) at
            the curve position determined by <paramref name="parameter"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ICurve`2.GetLength(`0,`0,System.Int32,`0)">
            <summary>
            Computes the approximated length of the curve for the parameter interval 
            [<paramref name="start"/>, <paramref name="end"/>].
            </summary>
            <param name="start">The parameter value of the start position.</param>
            <param name="end">The parameter value of the end position.</param>
            <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
            <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length. 
            The absolute error will be less than this tolerance. 
            </param>
            <returns>
            The approximated length of the curve for the given parameter interval. 
            </returns>
            <remarks>
            For some curves the length is computed with an iterative algorithm. The iterations end when 
            the <paramref name="maxNumberOfIterations"/> were performed, or when the 
            <paramref name="tolerance"/> criterion is met - whichever comes first.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ICurve`2.Flatten(System.Collections.Generic.ICollection{`1},System.Int32,`0)">
            <overloads>
            <summary>
            Computes the points of a sequence of line segments which approximate the curve.
            </summary>
            </overloads>
            
            <summary>
            Computes the points of a sequence of line segments which approximate the curve.
            </summary>
            <param name="points">
            A collection to which all points of the line segments are added. See remarks.
            </param>
            <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the approximation.
            </param>
            <param name="tolerance">
            The tolerance value. The absolute error of the approximated polygon will be less than this 
            tolerance. 
            </param>
            <remarks>
            <para>
            This method computes a sequence of line segments which approximates the curve. For each line
            segment, the start and end point are added to <paramref name="points"/>. For example, if a 
            curve is approximated with two line segments (A, B) and (B, C) where A, B, C are three key 
            points, then following points will be added to collection: A, B, B, C. This means, that 
            duplicate points are added to the collection. The advantage of this is that the 
            approximation can represent "gaps" in the curve. And it is easy to flatten several curves 
            into the same <paramref name="points"/> collection.
            </para>
            <para>
            For some curves the approximation is computed with an iterative algorithm. The iterations 
            end when the <paramref name="maxNumberOfIterations"/> were performed, or when the 
            <paramref name="tolerance"/> criterion is met - whichever comes first.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="tolerance"/> is 0 or less than 0.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.InterpolationHelper">
            <summary>
            Provides methods for interpolation and approximation of values.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Performs a linear interpolation between two values.
            </summary>
            </overloads>
            
            <summary>
            Performs a linear interpolation between two values (single-precision).
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The linear interpolation of two values.</returns>
            <remarks>
            <para>
            <c>Lerp(a, b, 0)</c> returns <c>a</c>. <c>Lerp(a, b, 1)</c> returns <c>b</c>.
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the interval [0, 1]. 
            Outside of this interval the method actually performs an extrapolation instead of an 
            interpolation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Performs a linear interpolation between two values (double-precision).
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The linear interpolation of two values.</returns>
            <remarks>
            <para>
            <c>Lerp(a, b, 0)</c> returns <c>a</c>. <c>Lerp(a, b, 1)</c> returns <c>b</c>.
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the interval [0, 1]. 
            Outside of this interval the method actually performs an extrapolation instead of an 
            interpolation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
            <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <param name="source">The source vector.</param>
            <param name="target">The target vector.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The linear interpolation of two vectors.</returns>
            <remarks>
            <para>
            <c>Lerp(a, b, 0)</c> returns <c>a</c>. <c>Lerp(a, b, 1)</c> returns <c>b</c>.
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the interval [0, 1]. 
            Outside of this interval the method actually performs an extrapolation instead of an 
            interpolation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
            <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <param name="source">The source vector.</param>
            <param name="target">The target vector.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The linear interpolation of two vectors.</returns>
            <remarks>
            <para>
            <c>Lerp(a, b, 0)</c> returns <c>a</c>. <c>Lerp(a, b, 1)</c> returns <c>b</c>.
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the interval [0, 1]. 
            Outside of this interval the method actually performs an extrapolation instead of an 
            interpolation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <param name="source">The source vector.</param>
            <param name="target">The target vector.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The linear interpolation of two vectors.</returns>
            <remarks>
            <para>
            <c>Lerp(a, b, 0)</c> returns <c>a</c>. <c>Lerp(a, b, 1)</c> returns <c>b</c>.
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the interval [0, 1]. 
            Outside of this interval the method actually performs an extrapolation instead of an 
            interpolation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
            <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <param name="source">The source vector.</param>
            <param name="target">The target vector.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The linear interpolation of two vectors.</returns>
            <remarks>
            <para>
            <c>Lerp(a, b, 0)</c> returns <c>a</c>. <c>Lerp(a, b, 1)</c> returns <c>b</c>.
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the interval [0, 1]. 
            Outside of this interval the method actually performs an extrapolation instead of an 
            interpolation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
            <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="source">The source vector.</param>
            <param name="target">The target vector.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The linear interpolation of two vectors.</returns>
            <remarks>
            <para>
            <c>Lerp(a, b, 0)</c> returns <c>a</c>. <c>Lerp(a, b, 1)</c> returns <c>b</c>.
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the interval [0, 1]. 
            Outside of this interval the method actually performs an extrapolation instead of an 
            interpolation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
            <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <param name="source">The source vector.</param>
            <param name="target">The target vector.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The linear interpolation of two vectors.</returns>
            <remarks>
            <para>
            <c>Lerp(a, b, 0)</c> returns <c>a</c>. <c>Lerp(a, b, 1)</c> returns <c>b</c>.
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the interval [0, 1]. 
            Outside of this interval the method actually performs an extrapolation instead of an 
            interpolation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
            <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/>.
            </summary>
            <param name="source">The source vector.</param>
            <param name="target">The target vector.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The linear interpolation of two vectors.</returns>
            <remarks>
            <para>
            <c>Lerp(a, b, 0)</c> returns <c>a</c>. <c>Lerp(a, b, 1)</c> returns <c>b</c>.
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the interval [0, 1]. 
            Outside of this interval the method actually performs an extrapolation instead of an 
            interpolation. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
            <summary>
            Performs a linear interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/>.
            </summary>
            <param name="source">The source vector.</param>
            <param name="target">The target vector.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The linear interpolation of two vectors.</returns>
            <remarks>
            <para>
            <c>Lerp(a, b, 0)</c> returns <c>a</c>. <c>Lerp(a, b, 1)</c> returns <c>b</c>.
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the interval [0, 1]. 
            Outside of this interval the method actually performs an extrapolation instead of an 
            interpolation. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="target"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The numbers of elements of the two vectors do not match.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
            <summary>
            Performs a linear interpolation of two <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/>.
            </summary>
            <param name="source">The start quaternion.</param>
            <param name="target">The end quaternion.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
            <para>
            <c>Lerp(a, b, 0)</c> returns <c>a</c>. <c>Lerp(a, b, 1)</c> returns <c>b</c>.
            </para>
            <para>
            Linear interpolation usually creates non-normalized quaternions. This method automatically 
            renormalizes the result.
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the interval [0, 1]. 
            Outside of this interval the method actually performs an extrapolation instead of an 
            interpolation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Lerp(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
            <summary>
            Performs a linear interpolation of two <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/>.
            </summary>
            <param name="source">The start quaternion.</param>
            <param name="target">The end quaternion.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
            <para>
            <c>Lerp(a, b, 0)</c> returns <c>a</c>. <c>Lerp(a, b, 1)</c> returns <c>b</c>.
            </para>
            <para>
            Linear interpolation usually creates non-normalized quaternions. This method automatically 
            renormalizes the result.
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the interval [0, 1]. 
            Outside of this interval the method actually performs an extrapolation instead of an 
            interpolation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Step``1(``0,``0,System.Single,DigitalRune.Mathematics.Interpolation.StepInterpolation)">
            <overloads>
            <summary>
            Performs a step interpolation between two values.
            </summary>
            </overloads>
            
            <summary>
            Performs a step interpolation between two values.
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <param name="interpolation">The step interpolation type.</param>
            <typeparam name="T">The type of the value.</typeparam>
            <returns>The step interpolation of two values.</returns>
            <remarks>
            <para>
            This interpolation returns either <paramref name="source"/> or <paramref name="target"/>
            depending on the <paramref name="parameter"/> and the step type 
            (<paramref name="interpolation"/>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Step``1(``0,``0,System.Double,DigitalRune.Mathematics.Interpolation.StepInterpolation)">
            <summary>
            Performs a step interpolation between two values.
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <param name="interpolation">The step interpolation type.</param>
            <typeparam name="T">The type of the value.</typeparam>
            <returns>The step interpolation of two values.</returns>
            <remarks>
            <para>
            This interpolation returns either <paramref name="source"/> or <paramref name="target"/>
            depending on the <paramref name="parameter"/> and the step type 
            (<paramref name="interpolation"/>).
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Performs a cosine interpolation between two values.
            </summary>
            </overloads>
            
            <summary>
            Performs a cosine interpolation between two values (single-precision).
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The cosine interpolation of two values.</returns>
            <remarks>
            <c>CosineInterpolation(a, b, 0)</c> returns <c>a</c>. <c>CosineInterpolation(a, b, 1)</c> 
            returns <c>b</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(System.Double,System.Double,System.Double)">
            <summary>
            Performs a cosine interpolation between two values (double-precision).
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The cosine interpolation of two values.</returns>
            <remarks>
            <c>CosineInterpolation(a, b, 0)</c> returns <c>a</c>. <c>CosineInterpolation(a, b, 1)</c> 
            returns <c>b</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.Vector2F,DigitalRune.Mathematics.Algebra.Vector2F,System.Single)">
            <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The cosine interpolation of two values.</returns>
            <remarks>
            <c>CosineInterpolation(a, b, 0)</c> returns <c>a</c>. <c>CosineInterpolation(a, b, 1)</c> 
            returns <c>b</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.Vector2D,DigitalRune.Mathematics.Algebra.Vector2D,System.Double)">
            <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The cosine interpolation of two values.</returns>
            <remarks>
            <c>CosineInterpolation(a, b, 0)</c> returns <c>a</c>. <c>CosineInterpolation(a, b, 1)</c> 
            returns <c>b</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.Vector3F,DigitalRune.Mathematics.Algebra.Vector3F,System.Single)">
            <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The cosine interpolation of two values.</returns>
            <remarks>
            <c>CosineInterpolation(a, b, 0)</c> returns <c>a</c>. <c>CosineInterpolation(a, b, 1)</c> 
            returns <c>b</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.Vector3D,DigitalRune.Mathematics.Algebra.Vector3D,System.Double)">
            <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The cosine interpolation of two values.</returns>
            <remarks>
            <c>CosineInterpolation(a, b, 0)</c> returns <c>a</c>. <c>CosineInterpolation(a, b, 1)</c> 
            returns <c>b</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.Vector4F,DigitalRune.Mathematics.Algebra.Vector4F,System.Single)">
            <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The cosine interpolation of two values.</returns>
            <remarks>
            <c>CosineInterpolation(a, b, 0)</c> returns <c>a</c>. <c>CosineInterpolation(a, b, 1)</c> 
            returns <c>b</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.Vector4D,DigitalRune.Mathematics.Algebra.Vector4D,System.Double)">
            <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The cosine interpolation of two values.</returns>
            <remarks>
            <c>CosineInterpolation(a, b, 0)</c> returns <c>a</c>. <c>CosineInterpolation(a, b, 1)</c> 
            returns <c>b</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF,System.Single)">
            <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/>.
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The cosine interpolation of two values.</returns>
            <remarks>
            <c>CosineInterpolation(a, b, 0)</c> returns <c>a</c>. <c>CosineInterpolation(a, b, 1)</c> 
            returns <c>b</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CosineInterpolation(DigitalRune.Mathematics.Algebra.VectorD,DigitalRune.Mathematics.Algebra.VectorD,System.Double)">
            <summary>
            Performs a cosine interpolation between two <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/>.
            </summary>
            <param name="source">The source value.</param>
            <param name="target">The target value.</param>
            <param name="parameter">
            The interpolation parameter that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The cosine interpolation of two values.</returns>
            <remarks>
            <c>CosineInterpolation(a, b, 0)</c> returns <c>a</c>. <c>CosineInterpolation(a, b, 1)</c> 
            returns <c>b</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.PolynomialInterpolation(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector2F},System.Single)">
            <overloads>
            <summary>
            Computes the function value for <paramref name="x"/> using polynomial interpolation.
            </summary>
            </overloads>
            
            <summary>
            Computes the function value for <paramref name="x"/> using polynomial interpolation (single-precision).
            </summary>
            <param name="points">The points.</param>
            <param name="x">The <i>x</i> value.</param>
            <returns>The interpolated value <i>y = P(x)</i>.</returns>
            <remarks>
            Through any <i>N</i> points there is a unique polynomial <i>P(x)</i> of order <i>N-1</i>.
            This method constructs the interpolating polynomial through the given points using 
            <i>Neville's algorithm</i>. And computes the function value for the given function 
            argument <i>x</i>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.PolynomialInterpolation(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector2D},System.Double)">
            <summary>
            Computes the function value for <paramref name="x"/> using polynomial interpolation (double-precision).
            </summary>
            <param name="points">The points.</param>
            <param name="x">The <i>x</i> value.</param>
            <returns>The interpolated value <i>y = P(x)</i>.</returns>
            <remarks>
            Through any <i>N</i> points there is a unique polynomial <i>P(x)</i> of order <i>N-1</i>.
            This method constructs the interpolating polynomial through the given points using 
            <i>Neville's algorithm</i>. And computes the function value for the given function 
            argument <i>x</i>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.PolynomialInterpolation(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector2F},System.Single,System.Single@)">
            <summary>
            Computes the function value for <paramref name="x"/> using polynomial interpolation 
            (single-precision).
            </summary>
            <param name="points">The points.</param>
            <param name="x">The <i>x</i> value.</param>
            <param name="error">The error estimate.</param>
            <returns>The interpolated value <i>y = P(x)</i>.</returns>
            <remarks>
            Through any <i>N</i> points there is a unique polynomial <i>P(x)</i> of order <i>N-1</i>.
            This method constructs the interpolating polynomial through the given points using
            <i>Neville's algorithm</i>. And computes the function value for the given function
            argument <i>x</i>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of points should be greater than 1.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            2 points have identical x-values (within roundoff tolerance).
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.PolynomialInterpolation(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector2D},System.Double,System.Double@)">
            <summary>
            Computes the function value for <paramref name="x"/> using polynomial interpolation 
            (double-precision).
            </summary>
            <param name="points">The points.</param>
            <param name="x">The <i>x</i> value.</param>
            <param name="error">The error estimate.</param>
            <returns>The interpolated value <i>y = P(x)</i>.</returns>
            <remarks>
            Through any <i>N</i> points there is a unique polynomial <i>P(x)</i> of order <i>N-1</i>.
            This method constructs the interpolating polynomial through the given points using
            <i>Neville's algorithm</i>. And computes the function value for the given function
            argument <i>x</i>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of points should be greater than 1.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            2 points have identical x-values (within roundoff tolerance).
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Slerp(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
            <overloads>
            <summary>
            Performs a spherical linear interpolation of the two quaternions.
            </summary>
            </overloads>
            
            <summary>
            Performs a spherical linear interpolation of the two <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/>.
            </summary>
            <param name="source">The start quaternion.</param>
            <param name="target">The end quaternion.</param>
            <param name="parameter">
            The interpolation factor that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
            <remarks>
            <para>
            <strong>Important:</strong> The method assumes the quaternions <paramref name="source"/> and 
            <paramref name="target"/> are unit quaternions (i.e. they are normalized).
            </para>
            <para>
            Rotations specified by unit quaternions can be interpolated with an operation
            known as <i>spherical linear interpolation (SLERP)</i>. The operation is defined
            as:
            </para>
            <para>
            slerp(<i>q<sub>0</sub></i>, <i>q<sub>1</sub></i>, <i>t</i>) = (<i>q<sub>0</sub></i> sin(<i>θ</i>(1-<i>t</i>)) + <i>q<sub>1</sub></i> sin(<i>θt</i>)) / sin<i>θ</i>
            where
            <list type="bullet">
            <item>
            <description>
            <i>q<sub>0</sub></i>, <i>q<sub>1</sub></i> are unit quaternions representing start and 
            destination rotation,
            </description>
            </item>
            <item>
            <description>
            <i>t</i> is the interpolation factor which lies in the interval [0, 1], and
            </description>
            </item>
            <item>
            <description>
            <i>θ</i> is the angle between <i>q<sub>0</sub></i> and <i>q<sub>1</sub></i>, which can be 
            determined by the dot product of <i>q<sub>0</sub></i> and <i>q<sub>1</sub></i>.
            </description>
            </item>
            </list>
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the 
            interval [0, 1]. Outside of this interval the method actually performs an
            extrapolation instead of an interpolation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Slerp(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
            <summary>
            Performs a spherical linear interpolation of the two <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/>.
            </summary>
            <param name="source">The start quaternion.</param>
            <param name="target">The end quaternion.</param>
            <param name="parameter">
            The interpolation factor that lies in the interval [0,1]; also known as <i>interpolation
            factor</i> or <i>weight of the target value</i>.
            </param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
            <remarks>
            <para>
            <strong>Important:</strong> The method assumes the quaternions <paramref name="source"/> and 
            <paramref name="target"/> are unit quaternions (i.e. they are normalized).
            </para>
            <para>
            Rotations specified by unit quaternions can be interpolated with an operation
            known as <i>spherical linear interpolation (SLERP)</i>. The operation is defined
            as:
            </para>
            <para>
            slerp(<i>q<sub>0</sub></i>, <i>q<sub>1</sub></i>, <i>t</i>) = (<i>q<sub>0</sub></i> sin(<i>θ</i>(1-<i>t</i>)) + <i>q<sub>1</sub></i> sin(<i>θt</i>)) / sin<i>θ</i>
            where
            <list type="bullet">
            <item>
            <description>
            <i>q<sub>0</sub></i>, <i>q<sub>1</sub></i> are unit quaternions representing start and 
            destination rotation,
            </description>
            </item>
            <item>
            <description>
            <i>t</i> is the interpolation factor which lies in the interval [0, 1], and
            </description>
            </item>
            <item>
            <description>
            <i>θ</i> is the angle between <i>q<sub>0</sub></i> and <i>q<sub>1</sub></i>, which can be 
            determined by the dot product of <i>q<sub>0</sub></i> and <i>q<sub>1</sub></i>.
            </description>
            </item>
            </list>
            </para>
            <para>
            The interpolation <paramref name="parameter"/> can lie outside of the 
            interval [0, 1]. Outside of this interval the method actually performs an
            extrapolation instead of an interpolation. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Squad(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)">
            <overloads>
            <summary>
            Interpolates between quaternions using spherical quadrangle interpolation.
            </summary>
            </overloads>
            
            <summary>
            Interpolates between quaternions using spherical quadrangle interpolation (single-precision).
            </summary>
            <param name="q">The source quaternion (<i>q<sub>n</sub></i>).</param>
            <param name="a">The first intermediate quaternion (<i>a<sub>n</sub></i>).</param>
            <param name="b">The second intermediate quaternion (<i>a<sub>n+1</sub></i>).</param>
            <param name="p">The target quaternion (<i>q<sub>n+1</sub></i>).</param>
            <param name="t">The interpolation parameter t.</param>
            <returns>The interpolated quaternion.</returns>
            <remarks>
            <para>
            The <i>spherical quadrangle interpolation (SQUAD) </i> is a spline-based interpolation 
            of rotations (unit quaternion). This operation is also known as 
            <i>spherical cubic interpolation</i>.
            </para>
            <para>
            If <i>q<sub>n</sub></i> is a sequence of <i>N</i> quaternions (<i>n</i> = 0 to <i>N</i>-1),
            then the smooth interpolation is given by:
            </para>
            <para>
            squad(<i>q<sub>n</sub></i>, <i>a<sub>n</sub></i>, <i>a<sub>n+1</sub></i>, <i>q<sub>n+1</sub></i>, <i>t</i>) 
              = slerp(slerp(<i>q<sub>n</sub></i>, <i>q<sub>n+1</sub></i>, <i>t</i>), 
                      slerp(<i>a<sub>n</sub></i>, <i>a<sub>n+1</sub></i>, <i>t</i>), 
                      2<i>t</i>(1-<i>t</i>))
            where
            <list type="bullet">
            <item>
            <description>
            <i>q<sub>n</sub></i>, <i>q<sub>n+1</sub></i> represent start and destination rotation,
            </description>
            </item>
            <item>
            <description>
            <i>t</i> is the interpolation parameter which lies in the interval [0, 1], and
            </description>
            </item>
            <item>
            <description>
            <para>
            <i>a<sub>n</sub></i>, <i>a<sub>n+1</sub></i> are intermediate quaternions which can be 
            determined with:
            </para>
            <para>
              <i>a<sub>n</sub></i> = 
                <i>q<sub>n</sub></i> e<sup>-(ln(<i>q<sub>n</sub><sup>-1</sup></i><i>q<sub>n-1</sub></i>) + ln(<i>q<sub>n</sub><sup>-1</sup></i><i>q<sub>n+1</sub></i>))/4</sup>
            </para>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <example>
            The following example demonstrates how to interpolate quaternions using 
            <see cref="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Squad(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)"/>:
            <code>
              // Given:
              QuaternionF q0, q1, q2, q3;  // A sequence of quaternions
              float t;                     // A interpolation parameter
            
              // We want to interpolate between q1 and q2 by an interpolation factor t
              QuaternionF q, a, b, p;
              QuaternionF.SquadSetup(q0, q1, q2, q3, out q, out a, out b, out p);
              QuaternionF result = QuaternionF.Squad(q, a, b, p, t);
            </code>
            </example>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Squad(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)">
            <summary>
            Interpolates between quaternions using spherical quadrangle interpolation (double-precision).
            </summary>
            <param name="q">The source quaternion (<i>q<sub>n</sub></i>).</param>
            <param name="a">The first intermediate quaternion (<i>a<sub>n</sub></i>).</param>
            <param name="b">The second intermediate quaternion (<i>a<sub>n+1</sub></i>).</param>
            <param name="p">The target quaternion (<i>q<sub>n+1</sub></i>).</param>
            <param name="t">The interpolation parameter t.</param>
            <returns>The interpolated quaternion.</returns>
            <remarks>
            <para>
            The <i>spherical quadrangle interpolation (SQUAD) </i> is a spline-based interpolation 
            of rotations (unit quaternion). This operation is also known as 
            <i>spherical cubic interpolation</i>.
            </para>
            <para>
            If <i>q<sub>n</sub></i> is a sequence of <i>N</i> quaternions (<i>n</i> = 0 to <i>N</i>-1),
            then the smooth interpolation is given by:
            </para>
            <para>
            squad(<i>q<sub>n</sub></i>, <i>a<sub>n</sub></i>, <i>a<sub>n+1</sub></i>, <i>q<sub>n+1</sub></i>, <i>t</i>) 
              = slerp(slerp(<i>q<sub>n</sub></i>, <i>q<sub>n+1</sub></i>, <i>t</i>), 
                      slerp(<i>a<sub>n</sub></i>, <i>a<sub>n+1</sub></i>, <i>t</i>), 
                      2<i>t</i>(1-<i>t</i>))
            where
            <list type="bullet">
            <item>
            <description>
            <i>q<sub>n</sub></i>, <i>q<sub>n+1</sub></i> represent start and destination rotation,
            </description>
            </item>
            <item>
            <description>
            <i>t</i> is the interpolation parameter which lies in the interval [0, 1], and
            </description>
            </item>
            <item>
            <description>
            <para>
            <i>a<sub>n</sub></i>, <i>a<sub>n+1</sub></i> are intermediate quaternions which can be 
            determined with:
            </para>
            <para>
              <i>a<sub>n</sub></i> = 
                <i>q<sub>n</sub></i> e<sup>-(ln(<i>q<sub>n</sub><sup>-1</sup></i><i>q<sub>n-1</sub></i>) + ln(<i>q<sub>n</sub><sup>-1</sup></i><i>q<sub>n+1</sub></i>))/4</sup>
            </para>
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <example>
            The following example demonstrates how to interpolate quaternions using 
            <see cref="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Squad(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)"/>:
            <code>
              // Given:
              QuaternionD q0, q1, q2, q3;  // A sequence of quaternions
              double t;                    // A interpolation parameter
            
              // We want to interpolate between q1 and q2 by an interpolation factor t
              QuaternionD q, a, b, p;
              QuaternionD.SquadSetup(q0, q1, q2, q3, out q, out a, out b, out p);
              QuaternionD result = QuaternionF.Squad(q, a, b, p, t);
            </code>
            </example>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.SquadSetup(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@,DigitalRune.Mathematics.Algebra.QuaternionF@)">
            <overloads>
            <summary>
            Calculates the parameters for a spline-based quaternion interpolation.
            </summary>
            </overloads>
            
            <summary>
            Calculates the parameters for a spline-based quaternion interpolation (single-precision).
            </summary>
            <param name="q0">The previous quaternion (<i>q<sub>n-1</sub></i>).</param>
            <param name="q1">The source quaternion (<i>q<sub>n</sub></i>).</param>
            <param name="q2">The target quaternion (<i>q<sub>n+1</sub></i>).</param>
            <param name="q3">The subsequent quaternion (<i>q<sub>n+2</sub></i>).</param>
            <param name="q">The source quaternion (<i>q<sub>n</sub></i>).</param>
            <param name="a">The first intermediate quaternion (<i>a<sub>n</sub></i>).</param>
            <param name="b">The second intermediate quaternion (<i>a<sub>n+1</sub></i>).</param>
            <param name="p">The target quaternion (<i>q<sub>n+1</sub></i>).</param>
            <remarks>
            Given a sequence of quaternions, this method calculates the intermediate quaternions
            that are required by the method 
            <see cref="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Squad(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)"/> to perform a 
            smooth spline-based interpolation. See 
            <see cref="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Squad(DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,DigitalRune.Mathematics.Algebra.QuaternionF,System.Single)"/> to find out more.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.SquadSetup(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.QuaternionD@,DigitalRune.Mathematics.Algebra.QuaternionD@)">
            <summary>
            Calculates the parameters for a spline-based quaternion interpolation (double-precision).
            </summary>
            <param name="q0">The previous quaternion (<i>q<sub>n-1</sub></i>).</param>
            <param name="q1">The source quaternion (<i>q<sub>n</sub></i>).</param>
            <param name="q2">The target quaternion (<i>q<sub>n+1</sub></i>).</param>
            <param name="q3">The subsequent quaternion (<i>q<sub>n+2</sub></i>).</param>
            <param name="q">The source quaternion (<i>q<sub>n</sub></i>).</param>
            <param name="a">The first intermediate quaternion (<i>a<sub>n</sub></i>).</param>
            <param name="b">The second intermediate quaternion (<i>a<sub>n+1</sub></i>).</param>
            <param name="p">The target quaternion (<i>q<sub>n+1</sub></i>).</param>
            <remarks>
            Given a sequence of quaternions, this method calculates the intermediate quaternions
            that are required by the method 
            <see cref="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Squad(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)"/> to perform a 
            smooth spline-based interpolation. See 
            <see cref="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.Squad(DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,DigitalRune.Mathematics.Algebra.QuaternionD,System.Double)"/> to find out 
            more.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CriticallyDampedSmoothing(System.Single@,System.Single@,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Updates position and velocity according to a critically damped spring.
            </summary>
            </overloads>
            
            <summary>
            Updates position and velocity according to a critically damped spring (single-precision).
            </summary>
            <param name="position">The position.</param>
            <param name="velocity">The velocity.</param>
            <param name="targetPosition">The target position.</param>
            <param name="deltaTime">The size of the timestep.</param>
            <param name="smoothTime">
            <paramref name="smoothTime"/> is parameter that determines how fast the 
            <paramref name="targetPosition"/> is reached. <paramref name="smoothTime"/> is equal to the 
            time that is required to reach the target when at maximum speed.
            </param>
            <remarks>
            <para>
            At the beginning of the method <paramref name="position"/> and <paramref name="velocity"/>
            are the current position and velocity of an object. The object should move to the 
            <paramref name="targetPosition"/>. At the end of the method <paramref name="position"/>
            and <paramref name="velocity"/> are updated to the new position after 
            <paramref name="deltaTime"/> has elapsed.
            </para>
            <para>
            The position and velocity are changed according to the movement of a critically damped 
            spring. This generates a smooth movement that can be used to interpolate values.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.CriticallyDampedSmoothing(System.Double@,System.Double@,System.Double,System.Double,System.Double)">
            <summary>
            Updates position and velocity according to a critically damped spring (double-precision).
            </summary>
            <param name="position">The position.</param>
            <param name="velocity">The velocity.</param>
            <param name="targetPosition">The target position.</param>
            <param name="deltaTime">The size of the timestep.</param>
            <param name="smoothTime">
            <paramref name="smoothTime"/> is parameter that determines how fast the 
            <paramref name="targetPosition"/> is reached. <paramref name="smoothTime"/> is equal to the 
            time that is required to reach the target when at maximum speed.
            </param>
            <remarks>
            <para>
            At the beginning of the method <paramref name="position"/> and <paramref name="velocity"/>
            are the current position and velocity of an object. The object should move to the 
            <paramref name="targetPosition"/>. At the end of the method <paramref name="position"/>
            and <paramref name="velocity"/> are updated to the new position after 
            <paramref name="deltaTime"/> has elapsed.
            </para>
            <para>
            The position and velocity are changed according to the movement of a critically damped 
            spring. This generates a smooth movement that can be used to interpolate values.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.HermiteSmoothStep(System.Single)">
            <overloads>
            <summary>
            Computes the Hermite smooth step function.
            </summary>
            </overloads>
            
            <summary>
            Computes the Hermite smooth step function (single-precision).
            </summary>
            <param name="x">The argument x.</param>
            <returns>The function value y.</returns>
            <remarks>
            <para>
            This functions can be visualized as an S-shaped curve based on a Hermite base function: 
            y = x<sup>2</sup> ( 3 - 2x ). (This polynomial is one of the base functions of the cubic 
            Hermite spline.)
            </para>
            <para>
            The function value y goes from 0 to 1 as x goes from 0 to 1. y = 0 for x &lt; 0 and y = 1 
            for x &gt; 1.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.HermiteSmoothStep(System.Double)">
            <summary>
            Computes the Hermite smooth step function (double-precision).
            </summary>
            <param name="x">The argument x.</param>
            <returns>The function value y.</returns>
            <remarks>
            <para>
            This functions can be visualized as an S-shaped curve based on a Hermite base function: 
            y = x<sup>2</sup> ( 3 - 2x ). (This polynomial is one of the base functions of the cubic 
            Hermite spline.)
            </para>
            <para>
            The function value y goes from 0 to 1 as x goes from 0 to 1. y = 0 for x &lt; 0 and y = 1 
            for x &gt; 1.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.EaseInOutSmoothStep(System.Single)">
            <overloads>
            <summary>
            Computes a constant acceleration ease-in/ease-out smooth step function.
            </summary>
            </overloads>
            
            <summary>
            Computes a constant acceleration ease-in/ease-out smooth step function (single-precision).
            </summary>
            <param name="x">The argument x.</param>
            <returns>The function value y.</returns>
            <remarks>
            <para>
            This functions can be visualized as an S-shaped curve based on a constant-acceleration
            ease-in/ease-out behavior.
            </para>
            <para>
            The function value y goes from 0 to 1 as x goes from 0 to 1. y = 0 for x &lt; 0 and y = 1 
            for x &gt; 1.
            </para>
            <para>
            To understand how the function works, let's assume that x is time and y is the distance.
            The function starts at x = 0 with 0 velocity and constant acceleration. The velocity increases
            until x = 0.5. Then the velocity decreases with constant acceleration and at x = 1 the 
            velocity is 0.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.InterpolationHelper.EaseInOutSmoothStep(System.Double)">
            <summary>
            Computes a constant acceleration ease-in/ease-out smooth step function (double-precision).
            </summary>
            <param name="x">The argument x.</param>
            <returns>The function value y.</returns>
            <remarks>
            <para>
            This functions can be visualized as an S-shaped curve based on a constant-acceleration
            ease-in/ease-out behavior.
            </para>
            <para>
            The function value y goes from 0 to 1 as x goes from 0 to 1. y = 0 for x &lt; 0 and y = 1 
            for x &gt; 1.
            </para>
            <para>
            To understand how the function works, let's assume that x is time and y is the distance.
            The function starts at x = 0 with 0 velocity and constant acceleration. The velocity increases
            until x = 0.5. Then the velocity decreases with constant acceleration and at x = 1 the 
            velocity is 0.
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.LineSegment1F">
            <summary>
            Defines a 1-dimensional line segment (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment1F"/> performs linear interpolation (LERP) between two values.
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.LineSegment1F.Point1"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.LineSegment1F.Point2"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.LineSegment1F.Point1">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.LineSegment1F.Point2">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.Flatten(System.Collections.Generic.ICollection{System.Single},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment1F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment1F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment1F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.LineSegment2F">
            <summary>
            Defines a 2-dimensional line segment (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment2F"/> performs linear interpolation (LERP) between two points.
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.LineSegment2F.Point1"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.LineSegment2F.Point2"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.LineSegment2F.Point1">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.LineSegment2F.Point2">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector2F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment2F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment2F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment2F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.LineSegment3F">
            <summary>
            Defines a 3-dimensional line segment (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment3F"/> performs linear interpolation (LERP) between two points.
            </para>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.LineSegment3F.Point1"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.LineSegment3F.Point2"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.LineSegment3F.Point1">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.LineSegment3F.Point2">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment3F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.LineSegment3F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.LineSegment3F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Mathematics.Interpolation"/> namespace types for interpolation
            and approximation.
            </summary>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.Path2F">
            <summary>
            Represents a 2-dimensional path that is defined by piecewise interpolation of key points 
            (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.Path2F"/> is a "piecewise curve". That means, the path is defined by key points
            (<see cref="T:DigitalRune.Mathematics.Interpolation.PathKey2F"/>) that are interpolated using spline interpolation. See 
            <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2"/> for more information on piecewise curves.
            </para>
            <para>
            <strong>Path Keys:</strong> 
            The path keys (<see cref="T:DigitalRune.Mathematics.Interpolation.PathKey2F"/>) define the control points of the path. Each path
            key defines a point on the curve <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Point"/>. These points are 
            interpolated using spline interpolation. Each path key defines the type of spline 
            interpolation that is used from this path key to the next (see 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Interpolation"/>). The path keys also contain additional 
            information that might me required for interpolation such as: 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentIn"/>, 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentOut"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.GetPoint(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.GetCycleOffset(System.Single)">
            <summary>
            Gets the cycle offset for a given parameter.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The cycle offset.</returns>
            <remarks>
            The cycle offset is a zero vector if the <see cref="T:DigitalRune.Mathematics.Interpolation.CurveLoopType"/> is unequal to 
            <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.CycleOffset"/> or if the <paramref name="parameter"/> is on the
            curve. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector2F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.ParameterizeByLength(System.Int32,System.Single)">
            <summary>
            Parameterizes the path by its length.
            </summary>
            <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
            <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length. The 
            absolute error will be less than this tolerance.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="tolerance"/> is negative or 0.
            </exception>
            <remarks>
            Normally, the <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Parameter"/> is not equal to the length of 
            the curve from the first key up to the current key. This method will compute length of the
            segments and set the key <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Parameter"/>s to the distance 
            from the first key. The parameter of the first key will be set to 0. The parameter of the 
            second key will be set to the length of the first segment. The parameter of the third key
            will be set to the added length of the first two segments. And so on.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.GetSpline(System.Int32)">
            <summary>
            Gets the spline after the key with the given index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The spline or <see langword="null"/> if the interpolation is none of the implemented spline 
            classes.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.GetParameterFromLength(System.Single,System.Int32,System.Single)">
            <summary>
            Gets the curve parameter for the given curve length (for length-parameterized splines).
            </summary>
            <param name="length">The length.</param>
            <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
            <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise parameter. The
            absolute error will be less than this tolerance.
            </param>
            <returns>The parameter at which the curve has the given length.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="tolerance"/> is negative or 0.
            </exception>
            <remarks>
            <para>
            This method assumes that the spline is length-parameterized; This means: The parameter of a
            key is equal to the length of the spline at this key. If this is not the case, 
            <see cref="M:DigitalRune.Mathematics.Interpolation.Path2F.ParameterizeByLength(System.Int32,System.Single)"/> can be called to correct the key parameters
            automatically.
            </para>
            <para>
            Normally, the spline curve parameter is not linearly proportional to the length. Therefore, 
            if the point at a given curve length is required, this method can be used to compute the
            curve parameter which will return the point for the given distance. The result of this
            method can be used in <see cref="M:DigitalRune.Mathematics.Interpolation.Path2F.GetPoint(System.Single)"/>.
            </para>
            <para>
            This method uses an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations"/> were performed, or when the 
            <paramref name="tolerance"/> criterion is met - whichever comes first.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the 
            <see cref="T:System.Xml.Serialization.IXmlSerializable"/> interface, you should return <see langword="null"/> from this
            method, and instead, if specifying a custom schema is required, apply the 
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by
            the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. 
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path2F.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. 
            </param>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.Path3F">
            <summary>
            Represents a 3-dimensional path that is defined by piecewise interpolation of key points 
            (single-precision).
            </summary>
            <remarks>
            <para>
            A <see cref="T:DigitalRune.Mathematics.Interpolation.Path3F"/> is a "piecewise curve". That means, the path is defined by key points
            (<see cref="T:DigitalRune.Mathematics.Interpolation.PathKey3F"/>) that are interpolated using spline interpolation. See 
            <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2"/> for more information on piecewise curves.
            </para>
            <para>
            <strong>Path Keys:</strong> 
            The path keys (<see cref="T:DigitalRune.Mathematics.Interpolation.PathKey3F"/>) define the control points of the path. Each path
            key defines a point on the curve <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Point"/>. These points are 
            interpolated using spline interpolation. Each path key defines the type of spline 
            interpolation that is used from this path key to the next (see 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Interpolation"/>). The path keys also contain additional 
            information that might me required for interpolation such as: 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentIn"/>, 
            <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.TangentOut"/>.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.GetPoint(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.GetCycleOffset(System.Single)">
            <summary>
            Gets the cycle offset for a given parameter.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The cycle offset.</returns>
            <remarks>
            The cycle offset is a zero vector if the <see cref="T:DigitalRune.Mathematics.Interpolation.CurveLoopType"/> is unequal to 
            <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.CycleOffset"/> or if the <paramref name="parameter"/> is on the
            curve. 
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.ParameterizeByLength(System.Int32,System.Single)">
            <summary>
            Parameterizes the path by its length.
            </summary>
            <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
            <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise length. The 
            absolute error will be less than this tolerance.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="tolerance"/> is negative or 0.
            </exception>
            <remarks>
            Normally, the <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Parameter"/> is not equal to the length of 
            the curve from the first key up to the current key. This method will compute length of the
            segments and set the key <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Parameter"/>s to the distance 
            from the first key. The parameter of the first key will be set to 0. The parameter of the 
            second key will be set to the length of the first segment. The parameter of the third key
            will be set to the added length of the first two segments. And so on.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.GetSpline(System.Int32)">
            <summary>
            Gets the spline after the key with the given index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            The spline or <see langword="null"/> if the interpolation is none of the implemented spline 
            classes.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.GetParameterFromLength(System.Single,System.Int32,System.Single)">
            <summary>
            Gets the curve parameter for the given curve length (for length-parameterized splines).
            </summary>
            <param name="length">The length.</param>
            <param name="maxNumberOfIterations">
            The maximum number of iterations which are taken to compute the length.
            </param>
            <param name="tolerance">
            The tolerance value. This method will return an approximation of the precise parameter. The
            absolute error will be less than this tolerance.
            </param>
            <returns>The parameter at which the curve has the given length.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="tolerance"/> is negative or 0.
            </exception>
            <remarks>
            <para>
            This method assumes that the spline is length-parameterized; This means: The parameter of a
            key is equal to the length of the spline at this key. If this is not the case, 
            <see cref="M:DigitalRune.Mathematics.Interpolation.Path3F.ParameterizeByLength(System.Int32,System.Single)"/> can be called to correct the key parameters
            automatically.
            </para>
            <para>
            Normally, the spline curve parameter is not linearly proportional to the length. Therefore, 
            if the point at a given curve length is required, this method can be used to compute the
            curve parameter which will return the point for the given distance. The result of this
            method can be used in <see cref="M:DigitalRune.Mathematics.Interpolation.Path3F.GetPoint(System.Single)"/>.
            </para>
            <para>
            This method uses an iterative algorithm. The iterations end when the 
            <paramref name="maxNumberOfIterations"/> were performed, or when the 
            <paramref name="tolerance"/> criterion is met - whichever comes first.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the 
            <see cref="T:System.Xml.Serialization.IXmlSerializable"/> interface, you should return <see langword="null"/> from this
            method, and instead, if specifying a custom schema is required, apply the 
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by
            the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. 
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.Path3F.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. 
            </param>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.PathKey2F">
            <summary>
            Defines a waypoint of a 2-dimensional path (singe-precision).
            </summary>
            <inheritdoc cref="T:DigitalRune.Mathematics.Interpolation.Path2F"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PathKey2F.GetParameter">
            <summary>
            Gets the parameter.
            </summary>
            <returns>The parameter.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PathKey2F.SetParameter(System.Single)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="value">The parameter</param>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.PathKey3F">
            <summary>
            Defines a waypoint of a 3-dimensional path (singe-precision).
            </summary>
            <inheritdoc cref="T:DigitalRune.Mathematics.Interpolation.Path3F"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PathKey3F.GetParameter">
            <summary>
            Gets the parameter.
            </summary>
            <returns>The parameter.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PathKey3F.SetParameter(System.Single)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="value">The parameter</param>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3">
            <summary>
            Represents a curve that is defined by piecewise interpolation of curve keys (control points).
            </summary>
            <typeparam name="TParam">
            The type of the curve parameter (usually <see cref="T:System.Single"/> or <see cref="T:System.Double"/>).
            </typeparam>
            <typeparam name="TPoint">
            The type of the curve points (such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>, etc.).
            </typeparam>
            <typeparam name="TCurveKey">
            The type of the curve key. (A type derived from <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2"/>.)
            </typeparam>
            <remarks>
            <para>
            A "piecewise curve", also known as "spline", is a curve with arbitrary length that is defined 
            by concatenating multiple curve segments.
            </para>
            <para>
            The <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3"/> is a collection of curve keys 
            (<see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2"/>). Each curve key is a control point that defines a 
            point on the curve. The points between curve keys are created by spline interpolation of the 
            curve keys.
            </para>
            <para>
            The curve keys are also called "key frames" if the path represents an animation curve, or
            "waypoints" if the path represents a 2-dimensional or 3-dimensional path.
            </para>
            <para>
            Curve keys in a <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3"/> must not be 
            <see langword="null"/>.
            </para>
            <para>
            The methods in this interface assume that the curve keys are sorted ascending by the curve
            parameter (see <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Parameter"/>). If this is not the case, you 
            can call <see cref="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.Sort"/> to sort keys.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PostLoop">
            <summary>
            Gets or sets a value that defines how the curve looks after the last curve key.
            </summary>
            <value>
            The post-loop behavior. The default value is <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Constant"/>.
            </value>
            <remarks>
            The parameter of the last curve key defines the end of the curve. If the user specifies a 
            parameter in a curve method that is greater, this property defines which curve keys and 
            values are used for computations.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PreLoop">
            <summary>
            Gets or sets a value that defines how the curve looks before the first path key.
            </summary>
            <value>
            The pre-loop behavior. The default value is <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Constant"/>.
            </value>
            <remarks>
            The parameter of the first curve key defines the start of the curve. If the user specifies a 
            parameter in a curve method that is less, this property defines which curve keys and values 
            are used for computations.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.SmoothEnds">
            <summary>
            Gets or sets a value indicating whether the curve ends are smoothed.
            </summary>
            <value>
            <see langword="true"/> if the curve ends are smoothed; otherwise, <see langword="false"/>. 
            The default value is <see langword="false"/>
            </value>
            <remarks>
            This property is only relevant if the path ends are B-splines or Catmull Rom splines. Theses
            spline types need additional neighbor points. At the path ends these neighbor points are
            missing. Per default, neighbor points are generated internally by mirroring the neighbor
            point on the other side of an end point through the end point. If this flag is set to 
            <see langword="true"/>, other virtual neighbor points are generated which result in a
            smoother curve.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.GetPoint(`0)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.GetTangent(`0)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.GetLength(`0,`0,System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.Flatten(System.Collections.Generic.ICollection{`1},System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.GetKeyIndex(`0)">
            <summary>
            Gets the index of the curve key <i>before</i> or at the given parameter value.
            </summary>
            <param name="parameter">The parameter value.</param>
            <returns>The index of the curve key or <c>-1</c> if no suitable curve key exists.</returns>
            <remarks>
            This method assumes that the curve keys are sorted and returns index of the key with the 
            largest <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Parameter"/> value that is less than or equal to 
            the given parameter value. The parameter will lie between the key at the returned index and 
            the key at index + 1. If <paramref name="parameter"/> is beyond the start or end of the 
            path, a key index according to <see cref="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PreLoop"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PostLoop"/> is returned.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.InsertItem(System.Int32,`2)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">
            The object to insert. The value can be null for reference types.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero. Or <paramref name="index"/> is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.IsInMirroredOscillation(`0)">
            <summary>
            Determines whether the given parameter corresponds to a mirrored oscillation loop.
            </summary>
            <param name="parameter">The parameter value.</param>
            <returns>
            <see langword="true"/> if the parameter is in a mirrored oscillation loop; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            When the parameter is less than the parameter of the first key or greater than the parameter
            of the last key, then the parameter is outside the regular curve. The outside behavior is 
            determined by <see cref="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PreLoop"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PostLoop"/>. If the loop type is 
            <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Oscillate"/> the curve is mirrored after each loop cycle. This 
            method returns <see langword="true"/> if the parameter is outside and belongs to a curve 
            loop which is mirrored to the regular curve.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.LoopParameter(`0)">
            <summary>
            Handles pre- and post-looping by changing the given parameter so that it lies on the curve.
            </summary>
            <param name="parameter">The parameter value.</param>
            <returns>The modified parameter value.</returns>
            <remarks>
            <para>
            If the parameter lies outside the curve the parameter is changed so that it lies on the 
            curve. The new parameter can be used to compute the curve result. 
            </para>
            <para>
            Following <see cref="T:DigitalRune.Mathematics.Interpolation.CurveLoopType"/>s need special handling:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Linear"/>: The parameter is not changed to lie on the curve; the
            linear extrapolation of the curve has to be computed.
            </description>
            </item>
            <item>
            <description>
            <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.CycleOffset"/>: The parameter is corrected to be on the curve;
            the curve function at this parameter can be evaluated and the offset must be added. The 
            curve point offset is not handled in this method.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.SetItem(System.Int32,`2)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero. Or <paramref name="index"/> is greater than 
            <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.Sort">
            <summary>
            Sorts the curve keys in the collection by their parameter (see
            <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Parameter"/>).
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. 
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. 
            </param>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the curve keys of the 
            <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for <see cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2"/>.
            </returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2">
            <summary>
            Represents a curve that is defined by piecewise interpolation of curve keys (control points).
            (Single-precision)
            </summary>
            <typeparam name="TPoint">
            The type of the curve points (such as <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>, <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>, etc.).
            </typeparam>
            <typeparam name="TCurveKey">
            The type of the curve key. (A type derived from <see cref="T:DigitalRune.Mathematics.Interpolation.CurveKey`2"/>.)
            </typeparam>
            <inheritdoc cref="T:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3"/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2.GetKeyIndex(System.Single)">
            <summary>
            Gets the index of the curve key <i>before</i> or at the given parameter value.
            </summary>
            <param name="parameter">The parameter value.</param>
            <returns>
            The index of the curve key or <c>-1</c> if no suitable curve key exists.
            </returns>
            <remarks>
            This method assumes that the curve keys are sorted and returns index of the key with the
            largest <see cref="P:DigitalRune.Mathematics.Interpolation.CurveKey`2.Parameter"/> value that is less than or equal to
            the given parameter value. The parameter will lie between the key at the returned index and
            the key at index + 1. If <paramref name="parameter"/> is beyond the start or end of the
            path, a key index according to <see cref="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PreLoop"/> 
            and <see cref="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PostLoop"/> is returned.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2.IsInMirroredOscillation(System.Single)">
            <summary>
            Determines whether the given parameter corresponds to a mirrored oscillation loop.
            </summary>
            <param name="parameter">The parameter value.</param>
            <returns>
            <see langword="true"/> if the parameter is in a mirrored oscillation loop; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            When the parameter is less than the parameter of the first key or greater than the parameter
            of the last key, then the parameter is outside the regular curve. The outside behavior is 
            determined by <see cref="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PreLoop"/> and 
            <see cref="P:DigitalRune.Mathematics.Interpolation.PiecewiseCurve`3.PostLoop"/>. If the loop type is 
            <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Oscillate"/> the curve is mirrored after each loop cycle. This 
            method returns <see langword="true"/> if the parameter is outside and belongs to a curve 
            loop which is mirrored to the regular curve.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.PiecewiseCurveF`2.LoopParameter(System.Single)">
            <summary>
            Handles pre- and post-looping by changing the given parameter so that it lies on the curve.
            </summary>
            <param name="parameter">The parameter value.</param>
            <returns>The modified parameter value.</returns>
            <remarks>
            <para>
            If the parameter lies outside the curve the parameter is changed so that it lies on the 
            curve. The new parameter can be used to compute the curve result. 
            </para>
            <para>
            Following <see cref="T:DigitalRune.Mathematics.Interpolation.CurveLoopType"/>s need special handling:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.Linear"/>: The parameter is not changed to lie on the curve; the
            linear extrapolation of the curve has to be computed.
            </description>
            </item>
            <item>
            <description>
            <see cref="F:DigitalRune.Mathematics.Interpolation.CurveLoopType.CycleOffset"/>: The parameter is corrected to be on the curve; the
            curve function at this parameter can be evaluated and the offset must be added. The curve
            point offset is not handled in this method.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.RadialBasisRegressionF">
            <summary>
            Scattered Interpolation using multiple regression analysis with radial basis functions
            (single-precision).
            </summary>
            <remarks>
            <para>
            Radial basis functions are described in the paper "Pose Space Deformation: A Unified Approach 
            to Shape Interpolation and Skeleton-Driven Deformation".
            </para>
            <para>
            The regression can numerically fail for bad reference data pairs or an inappropriate basis 
            function. In this case <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup"/> will throw a 
            <see cref="T:DigitalRune.Mathematics.MathematicsException"/>.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.RadialBasisRegressionF.BasisFunction">
            <summary>
            Gets or sets the basis function.
            </summary>
            <value>
            <para>
            The basis function. The first parameter is the distance of the new data point <i>x</i> to 
            the reference data point <i>x<sub>i</sub></i>, which has been computed by the distance 
            function. The second parameter is the index <i>i</i> of the reference data point 
            <i>x<sub>i</sub></i>. (The second parameter is ignored by default. The same basis function 
            is applied for all reference data points. However, the index could be used to select a 
            unique basis function for each reference data point.)
            </para>
            <para>
            The default function is the Gaussian function (see 
            <see cref="M:DigitalRune.Mathematics.MathHelper.Gaussian(System.Single,System.Single,System.Single,System.Single)"/>) with the parameters k = 1, 
            μ = 0, σ = 1.
            </para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.RadialBasisRegressionF.DistanceFunction">
            <summary>
            Gets or sets the distance function.
            </summary>
            <value>
            <para>
            The distance function that computes the distance between a new data point <i>x</i> and the 
            reference data point <i>x<sub>i</sub></i>. The first parameter is the new data point 
            <i>x</i>. The second parameter is the reference data point <i>x<sub>i</sub></i>. The third 
            parameter is the index <i>i</i> of the reference data point <i>x<sub>i</sub></i>. (The third 
            parameter can be ignored in most cases.)
            </para>
            <para>
            The default distance function computes the Euclidean distance between <i>x</i> and 
            <i>x<sub>i</sub></i>.
            </para>
            <para>
            (The distance function could be generalized to the Mahalanobis distance.)
            </para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.RadialBasisRegressionF.OnSetup">
            <summary>
            Called when <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup"/> is called.
            </summary>
            <remarks>
            Here internal values can be computed from the registered reference pairs if required. It is
            assured that the reference data pairs have valid dimensions: All x values have the same
            number of elements and all y values have the same number of elements. All reference data
            values are not <see langword="null"/>.
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            Cannot compute regression - try to choose different reference data pairs or another basis 
            function.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.RadialBasisRegressionF.OnCompute(DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Called when <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Compute(DigitalRune.Mathematics.Algebra.VectorF)"/> is called.
            </summary>
            <param name="x">The x value.</param>
            <returns>The y value.</returns>
            <remarks>
            When this method is called, <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup"/> has already been
            executed. And the parameter <paramref name="x"/> is not <see langword="null"/>.
            </remarks>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF">
            <summary>
            Base class for scattered interpolation methods (single-precision).
            </summary>
            <remarks>
            <para>
            Scattered interpolation solves the following problem: Several data pairs have been observed: 
            (x1, y1), (x2, y2), (x3, y3), ... These are the reference data values. Now a new x is measured
            and the y value for the given x is wanted.
            </para>
            <para>
            The x values are m-dimensional vectors. The y values are n-dimensional vectors. All x vectors
            must have equal dimensions and all y vectors must have equal dimensions. But the dimension of 
            the x vectors are usually different than the dimension of the y vectors.
            </para>
            <para>
            <strong>How to use this class:</strong>
            <list type="number">
            <item>
            <description>
            First the reference data pairs have to be created using the class 
            <see cref="T:DigitalRune.Collections.Pair`2"/> and registered by calling <see cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)"/>.
            The first item of each data pair is the x vector, the second item is the y vector. For
            example: 
            <code lang="csharp">
            <![CDATA[
            scatteredInterpolation.Add(new Pair<VectorF, VectorF>(x, y));
            ]]>
            </code>
            </description>
            </item>
            <item>
            <description>
            After all reference data pairs are added, <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup"/> has to be called.
            </description>
            </item>
            <item>
            <description>
            Then <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Compute(DigitalRune.Mathematics.Algebra.VectorF)"/> can be called to compute y values for any given x values. If the 
            reference data pairs are changed, it is necessary to call <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup"/> before the next 
            call of <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Compute(DigitalRune.Mathematics.Algebra.VectorF)"/>.
            </description>
            </item>
            </list>
            </para>
            <para>
            <strong>Notes to Inheritors:</strong> Derived types need to implement the methods 
            <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.OnSetup"/> and <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.OnCompute(DigitalRune.Mathematics.Algebra.VectorF)"/>. 
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.InsertItem(System.Int32,DigitalRune.Collections.Pair{DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF})">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be inserted.
            </param>
            <param name="item">
            The object to insert. The value can be null for reference types.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector dimension of a newly added vector is different from the dimensions of the already
            registered vectors.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The x or y vector in <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.SetItem(System.Int32,DigitalRune.Collections.Pair{DigitalRune.Mathematics.Algebra.VectorF,DigitalRune.Mathematics.Algebra.VectorF})">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">
            The new value for the element at the specified index. The value can be 
            <see langword="null"/> for reference types.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            The vector dimension of a newly added vector is different from the dimensions of the already
            registered vectors.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The x or y vector in <paramref name="item"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup">
            <summary>
            Prepares the scattered interpolation.
            </summary>
            <remarks>
            This method has to be called prior to <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Compute(DigitalRune.Mathematics.Algebra.VectorF)"/> every time the reference data
            pairs are changed.
            </remarks>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            No reference data pairs were added.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Compute(DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Computes a y value for the specified x value using scattered interpolation.
            </summary>
            <param name="x">The x value.</param>
            <returns>The y value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="x"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:DigitalRune.Mathematics.MathematicsException">
            No reference data pairs were added.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.OnSetup">
            <summary>
            Called when <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup"/> is called.
            </summary>
            <remarks>
            Here internal values can be computed from the registered reference pairs if required. It is
            assured that the reference data pairs have valid dimensions: All x values have the same
            number of elements and all y values have the same number of elements. All reference data
            values are not <see langword="null"/>. And there is at least 1 reference data pair.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.OnCompute(DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Called when <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Compute(DigitalRune.Mathematics.Algebra.VectorF)"/> is called.
            </summary>
            <param name="x">The x value.</param>
            <returns>The y value.</returns>
            <remarks>
            When this method is called, <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup"/> has already been
            executed. The parameter <paramref name="x"/> is not <see langword="null"/> and there is at 
            least 1 reference data pair.
            </remarks>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.ShepardInterpolationF">
            <summary>
            Scattered Interpolation using Shepard's method (single-precision).
            </summary>
            <remarks>
            Implemented as described in the paper "Pose Space Deformation: A Unified Approach to Shape 
            Interpolation and Skeleton-Driven Deformation".
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.ShepardInterpolationF.Power">
            <summary>
            Gets or sets the exponent for the power of the distance.
            </summary>
            <value>The exponent. The default value is <c>2.0f</c></value>
            <remarks>
            The reference data values are weighted by the inverse power of the distance: 
            weight<sub>1</sub> = | x - x<sub>1</sub> | <sup>-Power</sup>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ShepardInterpolationF.OnSetup">
            <summary>
            Called when <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup"/> is called.
            </summary>
            <remarks>
            Here internal values can be computed from the registered reference pairs if required. It is
            assured that the reference data pairs have valid dimensions: All x values have the same
            number of elements and all y values have the same number of elements. All reference data
            values are not <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.ShepardInterpolationF.OnCompute(DigitalRune.Mathematics.Algebra.VectorF)">
            <summary>
            Called when <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Compute(DigitalRune.Mathematics.Algebra.VectorF)"/> is called.
            </summary>
            <param name="x">The x value.</param>
            <returns>The y value.</returns>
            <remarks>
            When this method is called, <see cref="M:DigitalRune.Mathematics.Interpolation.ScatteredInterpolationF.Setup"/> has already been
            executed. And the parameter <paramref name="x"/> is not <see langword="null"/>.
            </remarks>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.SplineInterpolation">
            <summary>
            The type of spline interpolation used to interpolate between two curve keys.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Linear">
            <summary>
            Linear interpolation (LERP).
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.StepLeft">
            <summary>
            Step interpolation using "left steps". See <see cref="T:DigitalRune.Mathematics.Interpolation.StepInterpolation"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.StepCentered">
            <summary>
            Step interpolation using "centered steps". See <see cref="T:DigitalRune.Mathematics.Interpolation.StepInterpolation"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.StepRight">
            <summary>
            Step interpolation using "right steps". See <see cref="T:DigitalRune.Mathematics.Interpolation.StepInterpolation"/>.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Bezier">
            <summary>
            Interpolation using a cubic Bézier spline.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.BSpline">
            <summary>
            Interpolation using a cubic B-spline.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.Hermite">
            <summary>
            Interpolation using a cubic Hermite spline.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.SplineInterpolation.CatmullRom">
            <summary>
            Interpolation using a Catmull-Rom spline.
            </summary>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.StepInterpolation">
            <summary>
            The type of step interpolation.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.StepInterpolation.Left">
            <summary>
            A step interpolation between two values <i>a</i> and <i>b</i> with an interpolation 
            parameter <i>u</i> that returns <i>a</i> for <i> u = 0</i> and 
            <i>b</i> for <i>u &gt; 0</i>.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.StepInterpolation.Centered">
            <summary>
            A step interpolation between two values <i>a</i> and <i>b</i> with an interpolation
            parameter <i>u</i> that returns <i>a</i> for all <i>u &lt; 0.5</i> and <i>b</i> for
            <i>u ≥ 0.5</i>.
            </summary>
        </member>
        <member name="F:DigitalRune.Mathematics.Interpolation.StepInterpolation.Right">
            <summary>
            A step interpolation between two values <i>a</i> and <i>b</i> with an interpolation 
            parameter <i>u</i> that returns <i>a</i> for all <i>u &lt; 1</i> and <i>b</i> for
            <i>u = 1</i>.
            </summary>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.StepSegment1F">
            <summary>
            Defines a step interpolation between two values (single-precision).
            </summary>
            <remarks>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.StepSegment1F.Point1"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.StepSegment1F.Point2"/>. The curve is not continuous; it consist only of 
            the two points, <see cref="P:DigitalRune.Mathematics.Interpolation.StepSegment1F.Point1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.StepSegment1F.Point2"/>.
            </para>
            <para>
            The tangents and the length of this special kind of curve are zero.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment1F.Point1">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment1F.Point2">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment1F.StepType">
            <summary>
            Gets or sets the type of step interpolation.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.Flatten(System.Collections.Generic.ICollection{System.Single},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment1F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment1F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment1F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.StepSegment2F">
            <summary>
            Defines a step interpolation between two 2-dimensional points (single-precision).
            </summary>
            <remarks>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.StepSegment2F.Point1"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.StepSegment2F.Point2"/>. The curve is not continuous; it consist only of 
            the two points, <see cref="P:DigitalRune.Mathematics.Interpolation.StepSegment2F.Point1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.StepSegment2F.Point2"/>.
            </para>
            <para>
            The tangents and the length of this special kind of curve are zero.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment2F.Point1">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment2F.Point2">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment2F.StepType">
            <summary>
            Gets or sets the type of step interpolation.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector2F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment2F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment2F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment2F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Interpolation.StepSegment3F">
            <summary>
            Defines a step interpolation between two 3-dimensional points (single-precision).
            </summary>
            <remarks>
            <para>
            The curve function <i>point = C(parameter)</i> takes a scalar parameter and returns a point
            on the curve (see <see cref="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.GetPoint(System.Single)"/>). The curve parameter lies in the interval [0,1]; it 
            is also known as <i>interpolation parameter</i>, <i>interpolation factor</i> or <i>weight of 
            the target point</i>. <i>C(0)</i> returns the start point <see cref="P:DigitalRune.Mathematics.Interpolation.StepSegment3F.Point1"/>; <i>C(1)</i> 
            returns the end point <see cref="P:DigitalRune.Mathematics.Interpolation.StepSegment3F.Point2"/>. The curve is not continuous; it consist only of 
            the two points, <see cref="P:DigitalRune.Mathematics.Interpolation.StepSegment3F.Point1"/> and <see cref="P:DigitalRune.Mathematics.Interpolation.StepSegment3F.Point2"/>.
            </para>
            <para>
            The tangents and the length of this special kind of curve are zero.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment3F.Point1">
            <summary>
            Gets or sets the start point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment3F.Point2">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Interpolation.StepSegment3F.StepType">
            <summary>
            Gets or sets the type of step interpolation.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.GetPoint(System.Single)">
            <summary>
            Computes a point on the curve.
            </summary>
            <param name="parameter">The curve parameter.</param>
            <returns>The curve point.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.GetTangent(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.GetLength(System.Single,System.Single,System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.Flatten(System.Collections.Generic.ICollection{DigitalRune.Mathematics.Algebra.Vector3F},System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.Create">
            <summary>
            Creates an instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment3F"/> class. (This method reuses a
            previously recycled instance or allocates a new instance if necessary.)
            </summary>
            <returns>
            A new or reusable instance of the <see cref="T:DigitalRune.Mathematics.Interpolation.StepSegment3F"/> class.
            </returns>
            <remarks>
            <para>
            This method tries to obtain a previously recycled instance from a resource pool if resource
            pooling is enabled (see <see cref="P:DigitalRune.ResourcePool.Enabled">ResourcePool.Enabled</see>). If no
            object is available, a new instance is automatically allocated on the heap. 
            </para>
            <para>
            The owner of the object should call <see cref="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.Recycle"/> when the instance is no longer 
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Interpolation.StepSegment3F.Recycle">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.MathHelper">
            <summary>
            Provides useful mathematical algorithms and functions.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps the specified value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value which should be clamped.</param>
            <param name="min">The min limit.</param>
            <param name="max">The max limit.</param>
            <returns>
            <paramref name="value"/> clamped to the interval
            [<paramref name="min"/>, <paramref name="max"/>].
            </returns>
            <remarks>
            Values within the limits are not changed. Values exceeding the limits are cut off.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.Hypotenuse(System.Single,System.Single)">
            <overloads>
            <summary>
            Computes Sqrt(a*a + b*b) without underflow/overflow.
            </summary>
            </overloads>
            
            <summary>
            Computes Sqrt(a*a + b*b) without underflow/overflow (single-precision).
            </summary>
            <param name="cathetusA">Cathetus a.</param>
            <param name="cathetusB">Cathetus b.</param>
            <returns>The hypotenuse c, which is Sqrt(a*a + b*b).</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.Hypotenuse(System.Double,System.Double)">
            <summary>
            Computes Sqrt(a*a + b*b) without underflow/overflow (double-precision).
            </summary>
            <param name="cathetusA">Cathetus a.</param>
            <param name="cathetusB">Cathetus b.</param>
            <returns>The hypotenuse c, which is Sqrt(a*a + b*b).</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.Swap``1(``0@,``0@)">
            <summary>
            Swaps the content of two variables.
            </summary>
            <typeparam name="T">The type of the objects.</typeparam>
            <param name="obj1">First variable.</param>
            <param name="obj2">Second variable.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.ToRadians(System.Single)">
            <overloads>
            <summary>
            Converts an angle value from degrees to radians.
            </summary>
            </overloads>
            
            <summary>
            Converts an angle value from degrees to radians (single-precision).
            </summary>
            <param name="degree">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.ToRadians(System.Double)">
            <summary>
            Converts an angle value from degrees to radians (double-precision).
            </summary>
            <param name="degree">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.ToDegrees(System.Single)">
            <overloads>
            <summary>
            Converts an angle value from radians to degrees.
            </summary>
            </overloads>
            
            <summary>
            Converts an angle value from radians to degrees (single-precision).
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.ToDegrees(System.Double)">
            <summary>
            Converts an angle value from radians to degrees (double-precision).
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.Log2LessOrEqual(System.UInt32)">
            <summary>
            Returns the largest non-negative integer x such that 2<sup>x</sup> ≤ <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The largest non-negative integer x such that 2<sup>x</sup> ≤ <paramref name="value"/>.
            Exception: If <paramref name="value"/> is 0 then 0 is returned.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.Log2GreaterOrEqual(System.UInt32)">
            <summary>
            Returns the smallest non-negative integer x such that 2<sup>x</sup> ≥ <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The smallest non-negative integer x such that 2<sup>x</sup> ≥ <paramref name="value"/>.
            Exception: If <paramref name="value"/> is 0, 0 is returned.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.Bitmask(System.UInt32)">
            <summary>
            Creates the smallest bitmask that is greater than or equal to the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            A bitmask where the left bits are 0 and the right bits are 1. The value of the bitmask
            is ≥ <paramref name="value"/>.
            </returns>
            <remarks>
            <para>
            This result can also be interpreted as finding the smallest x such that 2<sup>x</sup> &gt; 
            <paramref name="value"/> and returning 2<sup>x</sup> - 1.
            </para>
            <para>
            Another useful application: Bitmask(x) + 1 returns the next power of 2 that is greater than 
            x.
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.IsPowerOf2(System.Int32)">
            <summary>
            Determines whether the specified value is a power of two.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is a power of two; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.NextPowerOf2(System.UInt32)">
            <summary>
            Returns the smallest power of two that is greater than the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The smallest power of two (2<sup>x</sup>) that is greater than <paramref name="value"/>.
            </returns>
            <remarks>
            For example, <c>NextPowerOf2(7)</c> is <c>8</c> and <c>NextPowerOf2(8)</c> is <c>16</c>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.Gaussian(System.Single,System.Single,System.Single,System.Single)">
            <overloads>
            <summary>
            Computes the Gaussian function y = k * e^( -(x-μ)<sup>2</sup>/(2σ<sup>2</sup>).
            </summary>
            </overloads>
            
            <summary>
            Computes the Gaussian function y = k * e^( -(x-μ)<sup>2</sup>/(2σ<sup>2</sup>) 
            (single precision).
            </summary>
            <param name="x">The argument x.</param>
            <param name="coefficient">The coefficient k.</param>
            <param name="expectedValue">The expected value μ.</param>
            <param name="standardDeviation">The standard deviation σ.</param>
            <returns>The height of the Gaussian bell curve at x.</returns>
            <remarks>
            This method computes the Gaussian bell curve.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.Gaussian(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <summary>
            Computes the Gaussian function y = k * e^( -(x-μ)<sup>2</sup>/(2σ<sup>2</sup>) 
            (double-precision).
            </summary>
            </summary>
            <param name="x">The argument x.</param>
            <param name="coefficient">The coefficient k.</param>
            <param name="expectedValue">The expected value μ.</param>
            <param name="standardDeviation">The standard deviation σ.</param>
            <returns>The height of the Gaussian bell curve at x.</returns>
            <remarks>
            This method computes the Gaussian bell curve.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Computes the binomial coefficient of (n, k), also read as "n choose k".
            </summary>
            <param name="n">n, must be a value equal to or greater than 0.</param>
            <param name="k">k, a value in the range [0, <paramref name="n"/>].</param>
            <returns>
            The binomial coefficient.
            </returns>
            <remarks>
            This method returns a binomial coefficient. The result is the k'th element in the n'th row
            of Pascal's triangle (using zero-based indices for k and n). This method returns 0 for
            negative <paramref name="n"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.Frac(System.Single)">
            <overloads>
            <summary>
            Calculates the fractional part of a specified floating-point number.
            </summary>
            </overloads>
            
            <summary>
            Calculates the fractional part of a specified single-precision floating-point number.
            </summary>
            <param name="f">The number.</param>
            <returns>The fractional part of <paramref name="f"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.MathHelper.Frac(System.Double)">
            <summary>
            Calculates the fractional part of a specified double-precision floating-point number.
            </summary>
            <param name="d">The number.</param>
            <returns>The fractional part of <paramref name="d"/>.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.MathematicsException">
            <summary>
            The exception that is thrown when a general error in the mathematics library occurs.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.MathematicsException.#ctor">
            <overloads>
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.MathematicsException"/> class.
            </summary>
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.MathematicsException"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.MathematicsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.MathematicsException"/> class with a specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.MathematicsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.MathematicsException"/> class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or <see langword="null"/> if no
            inner exception is specified.
            </param>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.BoxDistribution">
            <summary>
            A distribution that returns random positions from inside a box.
            </summary>
            <remarks>
            <para>
            The box is axis-aligned with the local coordinate axes. The position and size of the box is 
            defined by the its <see cref="P:DigitalRune.Mathematics.Statistics.BoxDistribution.MinValue"/> corner and its <see cref="P:DigitalRune.Mathematics.Statistics.BoxDistribution.MaxValue"/> corner.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.BoxDistribution.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>The minium value. The default is (-1, -1, -1).</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.BoxDistribution.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>The maximum value. The default is (1, 1, 1).</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.BoxDistribution.Next(System.Random)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.CircleDistribution">
            <summary>
            A distribution that returns random positions from a circular area.
            </summary>
            <remarks>
            <para>
            The circle lies in the xy-plane. Two radii can be specified:
            <see cref="P:DigitalRune.Mathematics.Statistics.CircleDistribution.InnerRadius"/> and <see cref="P:DigitalRune.Mathematics.Statistics.CircleDistribution.OuterRadius"/>. These radii define a ring. Random
            values from the area of this ring are created.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.CircleDistribution.Center">
            <summary>
            Gets or sets the center of the circle.
            </summary>
            <value>The center position. The default is (0, 0, 0).</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.CircleDistribution.InnerRadius">
            <summary>
            Gets or sets the inner radius of the ring.
            </summary>
            <value>The radius. The default is 0.</value>
            <remarks>
            The <see cref="P:DigitalRune.Mathematics.Statistics.CircleDistribution.InnerRadius"/> and the <see cref="P:DigitalRune.Mathematics.Statistics.CircleDistribution.OuterRadius"/> define a ring. Random values
            that are created are from the area of this ring. If <see cref="P:DigitalRune.Mathematics.Statistics.CircleDistribution.InnerRadius"/> is 0 (default),
            random values from the whole circle area are created. If <see cref="P:DigitalRune.Mathematics.Statistics.CircleDistribution.InnerRadius"/> is equal 
            to <see cref="P:DigitalRune.Mathematics.Statistics.CircleDistribution.OuterRadius"/>, all random values lie on the circumference of the circle.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.CircleDistribution.OuterRadius">
            <summary>
            Gets or sets the outer radius of the ring.
            </summary>
            <value>The outer radius. The default is 1.</value>
            <remarks>
            The <see cref="P:DigitalRune.Mathematics.Statistics.CircleDistribution.InnerRadius"/> and the <see cref="P:DigitalRune.Mathematics.Statistics.CircleDistribution.OuterRadius"/> define a ring. Random values
            that are created are from the area of this ring. If <see cref="P:DigitalRune.Mathematics.Statistics.CircleDistribution.InnerRadius"/> is 0 (default),
            random values from the whole circle area are created. If <see cref="P:DigitalRune.Mathematics.Statistics.CircleDistribution.InnerRadius"/> is equal 
            to <see cref="P:DigitalRune.Mathematics.Statistics.CircleDistribution.OuterRadius"/>, all random values lie on the circumference of the circle.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.CircleDistribution.Scale">
            <summary>
            Gets or sets the scale factors that are multiplied to the random position.
            </summary>
            <value>The scale factors in x and y direction. The default value is (1, 1).</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.CircleDistribution.Next(System.Random)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1">
            <summary>
            Represents a probability distribution that contains only 1 value with 100% probability. Hence 
            this distribution always returns a single constant value - no uncertainty.
            </summary>
            <typeparam name="T">The type of the constant.</typeparam>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1.Value">
            <summary>
            Gets or sets the single constant value.
            </summary>
            <value>The single constant value. The default is 0.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1"/> class.
            </summary>
            <param name="value">The single constant value.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.ConstValueDistribution`1.Next(System.Random)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.DirectionDistribution">
            <summary>
            A distribution that returns a random direction vector.
            </summary>
            <remarks>
            <para>
            <see cref="P:DigitalRune.Mathematics.Statistics.DirectionDistribution.Direction"/> defines the main direction. <see cref="M:DigitalRune.Mathematics.Statistics.DirectionDistribution.Next(System.Random)"/> returns a random
            direction vector that randomly deviates from <see cref="P:DigitalRune.Mathematics.Statistics.DirectionDistribution.Direction"/>. The deviation can be
            uniformly distributed or follow an approximated Gaussian distribution (similar to
            <see cref="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF"/>); see <see cref="P:DigitalRune.Mathematics.Statistics.DirectionDistribution.IsUniform"/>. If the distribution is
            uniform (<see cref="P:DigitalRune.Mathematics.Statistics.DirectionDistribution.IsUniform"/> is <see langword="true"/>, default), <see cref="P:DigitalRune.Mathematics.Statistics.DirectionDistribution.Deviation"/>
            defines the maximal deviation angle in radians. If the distribution is Gaussian 
            (<see cref="P:DigitalRune.Mathematics.Statistics.DirectionDistribution.IsUniform"/> is <see langword="false"/>), <see cref="P:DigitalRune.Mathematics.Statistics.DirectionDistribution.Deviation"/> defines the
            standard deviation angle in radians.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.DirectionDistribution.Direction">
            <summary>
            Gets or sets the direction of the cone (the central vector in the cone).
            </summary>
            <value>The direction of the cone. The default is (0, 1, 0).</value>
            <exception cref="T:System.ArgumentException">
            The vector is not a valid direction. The length is 0.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.DirectionDistribution.Deviation">
            <summary>
            Gets or sets the angle of the cone measured from the central vector to a border vector.
            </summary>
            <value>The angle of the cone in radians. The default is π/4 radians (= 45°).</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.DirectionDistribution.IsUniform">
            <summary>
            Gets or sets a value indicating whether the random direction vectors are distributed
            uniformly or follow a Gaussian distribution
            </summary>
            <value>
            <see langword="true"/> if this distribution is uniform; otherwise, <see langword="false"/>
            if the distribution is Gaussian. The default value is <see langword="true"/>.
            </value>
            <remarks>
            For the Gaussian distribution an approximated Gaussian distribution is used similar to 
            <see cref="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF"/>.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.DirectionDistribution.Next(System.Random)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.Distribution`1">
            <summary>
            Base class of probability distributions.
            </summary>
            <typeparam name="T">The type of the random value.</typeparam>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.Distribution`1.Random">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator.</value>
            <remarks>
            Per default, the global random number generator of the <see cref="T:DigitalRune.Mathematics.Statistics.RandomHelper"/> is used. A
            different random number generator can be set. Set this value to <see langword="null"/> to 
            use the default random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>).
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.Distribution`1.NextValue">
            <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
            <value>A random value.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.Distribution`1.Next(System.Random)">
            <summary>
            Gets a new random value for the underlying probability distribution.
            </summary>
            <param name="random">
            The random number generator. (Must not be <see langword="null"/>.)
            </param>
            <returns>A random value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD">
            <summary>
            Creates random values using an approximate Gaussian distribution (double-precision).
            </summary>
            <remarks>
            <para>
            Gaussian distribution is also known as Normal distribution. 
            </para>
            <para>
            The random values generated by this class follow only an approximate Gaussian distribution. 
            The distribution curve can be imagined as a typical Gaussian bell curve within +/- 3 standard 
            deviations. All random values lie in the interval 
            [<see cref="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.ExpectedValue"/> - 3 * <see cref="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.StandardDeviation"/>, 
             <see cref="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.ExpectedValue"/> + 3 * <see cref="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.StandardDeviation"/>]. No random values outside 
            the +/- 3 standard deviation interval are returned. 
            </para>
            <para>
            This approximation is faster and makes the random values more controllable for game 
            applications. For example, if in a game tree heights are determined using a real Gaussian
            distribution with an expected value of 10m and a standard deviation of 1m, then most trees 
            will have a height near 10m. But it would also be possible - unlikely but possible - that a 
            tree with height 30m is generated. This would look very odd. Therefore, it is desirable that 
            the created random values do not exceed 3 standard deviations.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.ExpectedValue">
            <summary>
            Gets or sets the expected value.
            </summary>
            <value>The expected value. The default is 0.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.StandardDeviation">
            <summary>
            Gets or sets the standard deviation.
            </summary>
            <value>The standard deviation. The default is 1.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF"/> class.
            </summary>
            <param name="expectedValue">The expected value.</param>
            <param name="standardDeviation">The standard deviation.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.FastGaussianDistributionD.Next(System.Random)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF">
            <summary>
            Creates random values using an approximate Gaussian distribution (single-precision).
            </summary>
            <remarks>
            <para>
            Gaussian distribution is also known as Normal distribution. 
            </para>
            <para>
            The random values generated by this class follow only an approximate Gaussian distribution. 
            The distribution curve can be imagined as a typical Gaussian bell curve within +/- 3 standard 
            deviations. All random values lie in the interval 
            [<see cref="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.ExpectedValue"/> - 3 * <see cref="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.StandardDeviation"/>, 
             <see cref="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.ExpectedValue"/> + 3 * <see cref="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.StandardDeviation"/>]. No random values outside 
            the +/- 3 standard deviation interval are returned. 
            </para>
            <para>
            This approximation is faster and makes the random values more controllable for game 
            applications. For example, if in a game tree heights are determined using a real Gaussian
            distribution with an expected value of 10m and a standard deviation of 1m, then most trees 
            will have a height near 10m. But it would also be possible - unlikely but possible - that a 
            tree with height 30m is generated. This would look very odd. Therefore, it is desirable that 
            the created random values do not exceed 3 standard deviations.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.ExpectedValue">
            <summary>
            Gets or sets the expected value.
            </summary>
            <value>The expected value. The default is 0.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.StandardDeviation">
            <summary>
            Gets or sets the standard deviation.
            </summary>
            <value>The standard deviation. The default is 1.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF"/> class.
            </summary>
            <param name="expectedValue">The expected value.</param>
            <param name="standardDeviation">The standard deviation.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.FastGaussianDistributionF.Next(System.Random)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.Int32UniformDistribution">
            <summary>
            Represents a uniform distribution that returns random <see cref="T:System.Int32"/> values for a given 
            interval [<see cref="P:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.MinValue"/>, <see cref="P:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.MaxValue"/>].
            </summary>
            <remarks>
            Every time <see cref="M:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.Next(System.Random)"/> is called, a new random value from the interval 
            [<see cref="P:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.MinValue"/>, <see cref="P:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.MaxValue"/>] is returned. All values in this interval have
            the same chance to be chosen.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>The maximum value. The default is 100.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>The minimum value. The default is 0.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.Int32UniformDistribution"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.Int32UniformDistribution"/> class.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.Int32UniformDistribution.Next(System.Random)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.LineSegmentDistribution">
            <summary>
            A distribution that returns random positions on a line segment.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.LineSegmentDistribution.Start">
            <summary>
            Gets or sets the start position of the line segment.
            </summary>
            <value>The start position. The default is (-1, -1, -1).</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.LineSegmentDistribution.End">
            <summary>
            Gets or sets the end position of the line segment.
            </summary>
            <value>The end position. The default is (1, 1, 1).</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.LineSegmentDistribution.Next(System.Random)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.NamespaceDoc">
            <summary>
            The <see cref="N:DigitalRune.Mathematics.Statistics"/> namespace types for statistics.
            </summary>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.PerlinNoise">
            <summary>
            Computes <i>Improved Perlin Noise</i>.
            </summary>
            <remarks>
            <para>
            This class implements "improved noise" by Ken Perlin for 1D, 2D, 3D and 4D. 
            </para>
            <para>
            General noise is simply a collection of random values, like the random dot pattern on old TVs
            when there is no input signal. General noise is not smooth. Band-limited noise is a noise
            which is smooth. This can be generated by zooming into the noise pattern and applying a
            Gaussian blur. A more efficient version of band-limited noise is Perlin Noise.
            </para>
            <para>
            Perlin Noise is a Gradient Noise: It use a grid of gradients. The noise is 0 at the grid
            points, i.e. for 3D <c>Compute((int)x, (int)y, (int)z) == 0</c>.
            </para>
            <para>
            Between grid points the gradients are interpolated to created smooth noise. There is at most
            one oscillation between two grid points.
            </para>
            <para>
            Perlin noise is consistent: For a constant position this method always returns the same noise
            value.
            </para>
            <para>
            The resulting noise is scaled to keep values the range [-1, 1]. (This is only approximated
            using scaling factors determined by experimentation. Some returned noise values might still be 
            outside [-1, 1].)
            </para>
            <para>
            Random values are generated using a lookup table. Since the table is limited, the noise
            function repeats itself in each dimension after 256 values, for example:<br/>
            <c>Compute(x, y, z) == Compute(x + 256, y + 256, z + 256)</c>.
            </para>
            <para>
            This class can also compute periodic/tileable noise for any integer period, such that:<br/>
            <c>Compute(x, y, z, periodX, periodY, periodZ) == Compute(x + periodX, y + periodY, z + periodZ, periodX, periodY, periodZ)</c>
            </para>
            </remarks>
        </member>
        <member name="F:DigitalRune.Mathematics.Statistics.PerlinNoise.Permutation">
            <summary>
            Permutation table for <i>improved noise</i> by Ken Perlin.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.PerlinNoise.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DigitalRune.Mathematics.Statistics.PerlinNoise"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Compute(System.Double)">
            <overloads>
            <summary>
            Computes a noise value using <i>Improved Perlin Noise</i>.
            </summary>
            </overloads>
            
            <summary>
            Computes a noise value for a 1D position given by (x).
            </summary>
            <param name="x">The x position.</param>
            <returns>The noise value for the given position (x).</returns>
            <remarks>
            See class description of <see cref="T:DigitalRune.Mathematics.Statistics.PerlinNoise" /> for more details.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Compute(System.Double,System.Int32)">
            <summary>
            Computes a noise value for a 1D position given by (x).
            The noise is tileable with the given periods.
            </summary>
            <param name="x">The x position.</param>
            <param name="periodX">The period in x. Must be greater than 0.</param>
            <returns>The noise value for the given position (x).</returns>
            <remarks>
            See class description of <see cref="T:DigitalRune.Mathematics.Statistics.PerlinNoise" /> for more details.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Compute(System.Double,System.Double)">
            <summary>
            Computes a noise value for a 2D position given by (x, y).
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <returns>The noise value for the given position (x, y).</returns>
            <remarks>
            See class description of <see cref="T:DigitalRune.Mathematics.Statistics.PerlinNoise" /> for more details.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Compute(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Computes a noise value for a 2D position given by (x, y).
            The noise is tileable with the given periods.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="periodX">The period in x. Must be greater than 0.</param>
            <param name="periodY">The period in y. Must be greater than 0.</param>
            <returns>The noise value for the given position (x, y).</returns>
            <remarks>
            See class description of <see cref="T:DigitalRune.Mathematics.Statistics.PerlinNoise" /> for more details.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Compute(System.Double,System.Double,System.Double)">
            <summary>
            Computes a noise value for a 3D position given by (x, y, z).
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="z">The z position.</param>
            <returns>The noise value for the given position (x, y, z).</returns>
            <remarks>
            See <see cref="T:DigitalRune.Mathematics.Statistics.PerlinNoise"/> for details about Perlin Noise.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Compute(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a noise value for a 3D position given by (x, y, z).
            The noise is tileable with the given periods.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="z">The z position.</param>
            <param name="periodX">The period in x. Must be greater than 0.</param>
            <param name="periodY">The period in y. Must be greater than 0.</param>
            <param name="periodZ">The period in z. Must be greater than 0.</param>
            <returns>The noise value for the given position (x, y, z).</returns>
            <remarks>
            See class description of <see cref="T:DigitalRune.Mathematics.Statistics.PerlinNoise" /> for more details.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Compute(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes a noise value for a 4D position given by (x, y, z, w).
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="z">The z position.</param>
            <param name="w">The w position.</param>
            <returns>The noise value for the given position (x, y, z, w).</returns>
            <remarks>
            See class description of <see cref="T:DigitalRune.Mathematics.Statistics.PerlinNoise" /> for more details.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Compute(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a noise value for a 4D position given by (x, y, z, w).
            The noise is tileable with the given periods.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="z">The z position.</param>
            <param name="w">The w position.</param>
            <param name="periodX">The period in x. Must be greater than 0.</param>
            <param name="periodY">The period in y. Must be greater than 0.</param>
            <param name="periodZ">The period in z. Must be greater than 0.</param>
            <param name="periodW">The period in w. Must be greater than 0.</param>
            <returns>The noise value for the given position (x, y, z, w).</returns>
            <remarks>
            See class description of <see cref="T:DigitalRune.Mathematics.Statistics.PerlinNoise" /> for more details.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Noise(System.Double,System.Double,System.Double)">
            <overloads>
            <summary>
            Computes a noise value. <i>Obsolete</i>
            </summary>
            </overloads>
            <summary>
            Computes a 3d noise value for a 3d position given by (x, y, z).
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="z">The z position.</param>
            <returns>The 3d noise value for the given position (x, y, z).</returns>
            <remarks>
            <para>
            <i>This method is obsolete. Use <see cref="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Compute(System.Double,System.Double,System.Double)"/> instead.</i>
            </para>
            <para>
            Perlin noise is consistent: For a constant position this method always returns the same
            noise value.
            </para>
            <para>
            The noise should be in the range [-1, 1]. The noise value at integer positions is 0, for
            example Noise(11, 12, 13) = 0.
            </para>
            <para>
            There is at max one oscillation (1 whole sine period) between two consecutive integer value.
            </para>
            <para>
            Random values are generated per table lookup. Since the table is limited, the noise function
            repeats itself after 256 values: <c>Noise(i, 0, 0) == Noise(i + 256, 0, 0)</c>
            </para>
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Noise(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Computes a 3d noise value for a 3d position given by (x, y, z).
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="z">The z position.</param>
            <param name="numberOfOctaves">The number of octaves.</param>
            <returns>
            The 3d noise value for the given position (x, y, z).
            </returns>
            <remarks>
            <para>
            <i>This method is obsolete. It is recommended to manually combine noise generated by the
            <strong>PerlinNoise.Compute</strong> methods as required. For example:
            </i>.
            </para>
            <code lang="csharp">
            <![CDATA[
            double noise = 0;
            for (int i = 0; i < numberOfOctaves; i++)
            {
              double k = 1 << i;
              noise += 1.0 / k * PerlinNoise.Compute(k * x, k * y, k * z);
            }
            ]]>
            </code>
            <para>
            A noise value is computed as in <see cref="M:DigitalRune.Mathematics.Statistics.PerlinNoise.Noise(System.Double,System.Double,System.Double)"/> except that 
            several noise functions with different frequencies (octaves) are added, for example for 
            3 octaves: <c>noiseValue = Noise(x,y,z) + 1/2*Noise(2x, 2y, 2z) + 1/4*Noise(4x,4y,4z)</c>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="numberOfOctaves"/> is negative or 0.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisD">
            <summary>
            Performs a Principal Component Analysis (PCA) using the covariance method (double-precision).
            </summary>
            <remarks>
            <para>
            This class takes a list of data points, computes the covariance matrix C and performs
            <see cref="T:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionD"/> on the covariance matrix. The resulting eigenvectors
            represent the uncorrelated principal components of the data. The principal components
            ("natural axes") are the basis of a new coordinate system where the covariance matrix is a
            diagonal matrix. The first principal component is the direction where the variance of the
            data projected onto the principal component is greatest. The second greatest variance is on
            the second principal component, and so forth.
            </para>
            <para>
            The matrix of the principal components (<see cref="P:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisD.V"/>) is an orthogonal matrix, with
            <c>C = V * D * V<sup>T</sup></c>, where C is the covariance matrix and D is the diagonal 
            covariance matrix in the space formed by the principal components.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisD.V">
            <summary>
            Gets the matrix of the principal components.
            </summary>
            <value>The matrix of the principal components.</value>
            <remarks>
            Each column in this matrix represents a principal component. Columns are ordered by
            decreasing variance. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisD.Variances">
            <summary>
            Gets the variances.
            </summary>
            <value>The variances.</value>
            <remarks>
            Each element in the vector represents the variance of the data points along a principle
            component. The variances are sorted by decreasing value, so that the largest variance is the
            first element.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisD.#ctor(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.VectorD})">
            <summary>
            Creates the principal component analysis for the given list of points.
            </summary>
            <param name="points">
            The list of data points. All points must have the same 
            <see cref="P:DigitalRune.Mathematics.Algebra.VectorD.NumberOfElements"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="points"/> is empty.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisF">
            <summary>
            Performs a Principal Component Analysis (PCA) using the covariance method (single-precision).
            </summary>
            <remarks>
            <para>
            This class takes a list of data points, computes the covariance matrix C and performs
            <see cref="T:DigitalRune.Mathematics.Algebra.EigenvalueDecompositionF"/> on the covariance matrix. The resulting eigenvectors
            represent the uncorrelated principal components of the data. The principal components
            ("natural axes") are the basis of a new coordinate system where the covariance matrix is a
            diagonal matrix. The first principal component is the direction where the variance of the
            data projected onto the principal component is greatest. The second greatest variance is on
            the second principal component, and so forth.
            </para>
            <para>
            The matrix of the principal components (<see cref="P:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisF.V"/>) is an orthogonal matrix, with
            <c>C = V * D * V<sup>T</sup></c>, where C is the covariance matrix and D is the diagonal 
            covariance matrix in the space formed by the principal components.
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisF.V">
            <summary>
            Gets the matrix of the principal components.
            </summary>
            <value>The matrix of the principal components.</value>
            <remarks>
            Each column in this matrix represents a principal component. Columns are ordered by
            decreasing variance. 
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisF.Variances">
            <summary>
            Gets the variances.
            </summary>
            <value>The variances.</value>
            <remarks>
            Each element in the vector represents the variance of the data points along a principle
            component. The variances are sorted by decreasing value, so that the largest variance is the
            first element.
            </remarks>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.PrincipalComponentAnalysisF.#ctor(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.VectorF})">
            <summary>
            Creates the principal component analysis for the given list of points.
            </summary>
            <param name="points">
            The list of data points. All points must have the same 
            <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="points"/> is empty.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.RandomHelper">
            <summary>
            A class to generate random values.
            </summary>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random">
            <summary>
            Gets or sets the default random number generator.
            </summary>
            <value>
            The default random number generator. 
            </value>
            <remarks>
            This is a global random number generator. Per default, this property is initialized with a 
            new instance of <see cref="T:System.Random"/> with a time-dependent default seed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The property is set <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextBool(System.Random)">
            <summary>
            Gets a random boolean value.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <returns>A random boolean value.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextByte(System.Random)">
            <summary>
            Gets a random byte value.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <returns>A random byte value.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextQuaternionF(System.Random)">
            <summary>
            Gets a random unit <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <returns>A random unit <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionF"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextQuaternionD(System.Random)">
            <summary>
            Gets a random unit <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <returns>A random unit <see cref="T:DigitalRune.Mathematics.Algebra.QuaternionD"/>;.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            Gets a random <see langword="float"/> value that lies in the interval 
            [<paramref name="min"/>, <paramref name="max"/>].
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value.</param>
            <param name="max">The maximal allowed value.</param>
            <returns>A random <see langword="float"/> value within the bounds [min, max].</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Gets a random <see langword="double"/> value that lies in the interval 
            [<paramref name="min"/>, <paramref name="max"/>].
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global
            random number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value.</param>
            <param name="max">The maximal allowed value.</param>
            <returns>A random <see langword="double"/> value within the bounds [min, max].</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextInteger(System.Random,System.Int32,System.Int32)">
            <summary>
            Gets a random integer value that lies in the interval [<paramref name="min"/>, 
            <paramref name="max"/>].
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value.</param>
            <param name="max">
            The maximal allowed value. (Must be less than <see cref="F:System.Int32.MaxValue"/>.)
            </param>
            <returns>A random integer value within the bounds [min, max].</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVector2F(System.Random,System.Single,System.Single)">
            <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value for a vector element.</param>
            <param name="max">The maximal allowed value for a vector element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Vector2F"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVector2D(System.Random,System.Double,System.Double)">
            <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value for a vector element.</param>
            <param name="max">The maximal allowed value for a vector element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Vector2D"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVector3F(System.Random,System.Single,System.Single)">
            <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value for a vector element.</param>
            <param name="max">The maximal allowed value for a vector element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Vector3F"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVector3D(System.Random,System.Double,System.Double)">
            <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value for a vector element.</param>
            <param name="max">The maximal allowed value for a vector element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Vector3D"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVector4F(System.Random,System.Single,System.Single)">
            <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value for a vector element.</param>
            <param name="max">The maximal allowed value for a vector element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Vector4F"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVector4D(System.Random,System.Double,System.Double)">
            <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value for a vector element.</param>
            <param name="max">The maximal allowed value for a vector element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Vector4D"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVectorF(System.Random,DigitalRune.Mathematics.Algebra.VectorF,System.Single,System.Single)">
            <summary>
            Fills a <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/> with random values.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="vector">The vector that should be filled with random values.</param>
            <param name="min">The minimal allowed value for a vector element.</param>
            <param name="max">The maximal allowed value for a vector element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.VectorF"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextVectorD(System.Random,DigitalRune.Mathematics.Algebra.VectorD,System.Double,System.Double)">
            <summary>
            Fills a <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/> with random values.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="vector">The vector that should be filled with random values.</param>
            <param name="min">The minimal allowed value for a vector element.</param>
            <param name="max">The maximal allowed value for a vector element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.VectorD"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrix22F(System.Random,System.Single,System.Single)">
            <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value for a matrix element.</param>
            <param name="max">The maximal allowed value for a matrix element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22F"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrix22D(System.Random,System.Double,System.Double)">
            <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value for a matrix element.</param>
            <param name="max">The maximal allowed value for a matrix element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix22D"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrix33F(System.Random,System.Single,System.Single)">
            <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value for a matrix element.</param>
            <param name="max">The maximal allowed value for a matrix element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33F"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrix33D(System.Random,System.Double,System.Double)">
            <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value for a matrix element.</param>
            <param name="max">The maximal allowed value for a matrix element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix33D"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrix44F(System.Random,System.Single,System.Single)">
            <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value for a matrix element.</param>
            <param name="max">The maximal allowed value for a matrix element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44F"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrix44D(System.Random,System.Double,System.Double)">
            <summary>
            Gets a random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/>.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="min">The minimal allowed value for a matrix element.</param>
            <param name="max">The maximal allowed value for a matrix element.</param>
            <returns>A random <see cref="T:DigitalRune.Mathematics.Algebra.Matrix44D"/>.</returns>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrixF(System.Random,DigitalRune.Mathematics.Algebra.MatrixF,System.Single,System.Single)">
            <summary>
            Fills a <see cref="T:DigitalRune.Mathematics.Algebra.MatrixF"/> with random values.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="matrix">The matrix that is filled with random values.</param>
            <param name="min">The minimal allowed value for a matrix element.</param>
            <param name="max">The maximal allowed value for a matrix element.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.NextMatrixD(System.Random,DigitalRune.Mathematics.Algebra.MatrixD,System.Double,System.Double)">
            <summary>
            Fills a <see cref="T:DigitalRune.Mathematics.Algebra.MatrixD"/> with random values.
            </summary>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="matrix">The matrix that is filled with random values.</param>
            <param name="min">The minimal allowed value for a matrix element.</param>
            <param name="max">The maximal allowed value for a matrix element.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.RandomHelper.Next``1(System.Random,DigitalRune.Mathematics.Statistics.Distribution{``0})">
            <summary>
            Gets a new random value for the specified probability distribution.
            </summary>
            <typeparam name="T">The type of the random value.</typeparam>
            <param name="random">
            The random number generator. If this parameter is <see langword="null"/>, the global random
            number generator (see <see cref="P:DigitalRune.Mathematics.Statistics.RandomHelper.Random"/>) is used.
            </param>
            <param name="distribution">The probability distribution.</param>
            <returns>A random value.</returns>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.SphereDistribution">
            <summary>
            A distribution that returns random positions from a spherical volume.
            </summary>
            <remarks>
            <para>
            Two radii can be specified: <see cref="P:DigitalRune.Mathematics.Statistics.SphereDistribution.InnerRadius"/> and <see cref="P:DigitalRune.Mathematics.Statistics.SphereDistribution.OuterRadius"/>. These
            radii define a spherical shell. The method <see cref="M:DigitalRune.Mathematics.Statistics.SphereDistribution.Next(System.Random)"/> returns random positions from
            within this shell. 
            </para>
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.SphereDistribution.Center">
            <summary>
            Gets or sets the center of the sphere.
            </summary>
            <value>The center position. The default is (0, 0, 0).</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.SphereDistribution.InnerRadius">
            <summary>
            Gets or sets the inner radius of the sphere.
            </summary>
            <value>The radius. The default is 0.</value>
            <remarks>
            The <see cref="P:DigitalRune.Mathematics.Statistics.SphereDistribution.InnerRadius"/> and the <see cref="P:DigitalRune.Mathematics.Statistics.SphereDistribution.OuterRadius"/> define a spherical shell. 
            Random values that are created are from the volume of this shell. If 
            <see cref="P:DigitalRune.Mathematics.Statistics.SphereDistribution.InnerRadius"/> is 0 (default), random values from the whole sphere volume are 
            created. If <see cref="P:DigitalRune.Mathematics.Statistics.SphereDistribution.InnerRadius"/> is equal to <see cref="P:DigitalRune.Mathematics.Statistics.SphereDistribution.OuterRadius"/>, all random 
            positions lie on the surface of the sphere.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.SphereDistribution.OuterRadius">
            <summary>
            Gets or sets the outer radius of the circle.
            </summary>
            <value>The outer radius. The default is 1.</value>
            <remarks>
            The <see cref="P:DigitalRune.Mathematics.Statistics.SphereDistribution.InnerRadius"/> and the <see cref="P:DigitalRune.Mathematics.Statistics.SphereDistribution.OuterRadius"/> define a spherical shell. 
            Random values that are created are from the volume of this shell. If 
            <see cref="P:DigitalRune.Mathematics.Statistics.SphereDistribution.InnerRadius"/> is 0 (default), random values from the whole sphere volume are 
            created. If <see cref="P:DigitalRune.Mathematics.Statistics.SphereDistribution.InnerRadius"/> is equal to <see cref="P:DigitalRune.Mathematics.Statistics.SphereDistribution.OuterRadius"/>, all random 
            positions lie on the surface of the sphere.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is negative.
            </exception>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.SphereDistribution.Scale">
            <summary>
            Gets or sets the scale factors that are multiplied to the random position.
            </summary>
            <value>The scale factors in x, y and z direction. The default value is (1, 1, 1).</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.SphereDistribution.Next(System.Random)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.StatisticsHelper">
            <summary>
            Provides helper methods for statistical tasks.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.StatisticsHelper.ComputeCovarianceMatrix(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3F})">
            <overloads>
            <summary>
            Computes the covariance matrix for a list of points.
            </summary>
            </overloads>
            
            <summary>
            Computes the covariance matrix for a list of 3-dimensional points (single-precision).
            </summary>
            <param name="points">The points.</param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.StatisticsHelper.ComputeCovarianceMatrix(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.Vector3D})">
            <summary>
            Computes the covariance matrix for a list of 3-dimensional points (double-precision).
            </summary>
            <param name="points">The points.</param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.StatisticsHelper.ComputeCovarianceMatrix(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.VectorF})">
            <summary>
            Computes the covariance matrix for a list of n-dimensional points (single-precision).
            </summary>
            <param name="points">
            The points. All points must have the same <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements"/>.
            </param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="points"/> is empty.
            </exception>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.StatisticsHelper.ComputeCovarianceMatrix(System.Collections.Generic.IList{DigitalRune.Mathematics.Algebra.VectorD})">
            <summary>
            Computes the covariance matrix for a list of n-dimensional points (double-precision).
            </summary>
            <param name="points">
            The points. All points must have the same <see cref="P:DigitalRune.Mathematics.Algebra.VectorF.NumberOfElements"/>.
            </param>
            <returns>The covariance matrix.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="points"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="points"/> is empty.
            </exception>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.UniformDistributionD">
            <summary>
            Represents a uniform distribution that returns random values for a given interval 
            [<see cref="P:DigitalRune.Mathematics.Statistics.UniformDistributionD.MinValue"/>, <see cref="P:DigitalRune.Mathematics.Statistics.UniformDistributionD.MaxValue"/>] (double-precision).
            </summary>
            <remarks>
            Every time <see cref="M:DigitalRune.Mathematics.Statistics.UniformDistributionD.Next(System.Random)"/> is called, a new random value from the interval 
            [<see cref="P:DigitalRune.Mathematics.Statistics.UniformDistributionD.MinValue"/>, <see cref="P:DigitalRune.Mathematics.Statistics.UniformDistributionD.MaxValue"/>] is returned. All values in this interval have
            the same chance to be chosen.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.UniformDistributionD.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>The maximum value. The default is 1.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.UniformDistributionD.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>The minimum value. The default is -1.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.UniformDistributionD.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.UniformDistributionD"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.UniformDistributionD.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.UniformDistributionD"/> class.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.UniformDistributionD.Next(System.Random)">
            <inheritdoc/>
        </member>
        <member name="T:DigitalRune.Mathematics.Statistics.UniformDistributionF">
            <summary>
            Represents a uniform distribution that returns random values for a given interval 
            [<see cref="P:DigitalRune.Mathematics.Statistics.UniformDistributionF.MinValue"/>, <see cref="P:DigitalRune.Mathematics.Statistics.UniformDistributionF.MaxValue"/>] (single-precision).
            </summary>
            <remarks>
            Every time <see cref="M:DigitalRune.Mathematics.Statistics.UniformDistributionF.Next(System.Random)"/> is called, a new random value from the interval 
            [<see cref="P:DigitalRune.Mathematics.Statistics.UniformDistributionF.MinValue"/>, <see cref="P:DigitalRune.Mathematics.Statistics.UniformDistributionF.MaxValue"/>] is returned. All values in this interval have
            the same chance to be chosen.
            </remarks>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.UniformDistributionF.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>The maximum value. The default is 1.</value>
        </member>
        <member name="P:DigitalRune.Mathematics.Statistics.UniformDistributionF.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>The minimum value. The default is -1.</value>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.UniformDistributionF.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.UniformDistributionF"/> class.
            </summary>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.UniformDistributionF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:DigitalRune.Mathematics.Statistics.UniformDistributionF"/> class.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
        </member>
        <member name="M:DigitalRune.Mathematics.Statistics.UniformDistributionF.Next(System.Random)">
            <inheritdoc/>
        </member>
    </members>
</doc>
