<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sceelix.Designer.Graphs</name>
    </assembly>
    <members>
        <member name="T:Sceelix.Designer.Graphs.Extensions.MipEditableTexture2D">
            <summary>
            A texture2D that can be edited.
            
            This could inherit from Texture2D, but then every change on the [x,y] would have to set data.
            </summary>
        </member>
        <member name="P:Sceelix.Designer.Graphs.GUI.Execution.ExecutionOptions.Limit">
            <summary>
            The element (node, edge or port) that defines the limit of execution of the graph.
            Nodes coming after this element shall not be processed and executed.
            </summary>
        </member>
        <member name="P:Sceelix.Designer.Graphs.GUI.Execution.ExecutionOptions.StrictLimit">
            <summary>
            If enabled, only the output of the selected limit should be shown.
            Otherwise, all the outputs until the selected limit should be shown.
            </summary>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.Execution.GameThreadWorker._name">
            <summary>
            Name, to be associate with the Thread.
            </summary>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.Execution.GameThreadWorker._thread">
            <summary>
            Thread where the function will be executed.
            </summary>
        </member>
        <member name="P:Sceelix.Designer.Graphs.GUI.Execution.GameThreadWorker.Name">
            <summary>
            Name of the inside thread. 
            Should be set before calling Run().
            </summary>
        </member>
        <member name="E:Sceelix.Designer.Graphs.GUI.Execution.GameThreadWorker.ProgressChanged">
            <summary>
            Event called when the function calls "ReportProgress".
            </summary>
        </member>
        <member name="E:Sceelix.Designer.Graphs.GUI.Execution.GameThreadWorker.Completed">
            <summary>
            Event called when the function finishes or is cancelled.
            It is not called if the function is aborted.
            </summary>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Execution.GameThreadWorker.Run(System.Object[])">
            <summary>
            Executes the function in a background thread.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Execution.GameThreadWorker.ReportProgress(System.Object)">
            <summary>
            This is called in the subthread, when the functions calls the ReportProgress from the GameThreadWorkerData.
            We need to invoke the event in the main thread.
            </summary>
            <param name="progressData"></param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Execution.GameThreadWorker.DeliverResult(Sceelix.Designer.Graphs.GUI.Execution.WorkerResultData)">
            <summary>
            Invokes the proper finish event on the main thread.
            </summary>
            <param name="workerResultData"></param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Execution.GameThreadWorker.Update(System.TimeSpan)">
            <summary>
            Updates the worker, essencial for synchronous response.
            </summary>
            <param name="span"></param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Execution.GameThreadWorker.Cancel">
            <summary>
            Sends a signal to the function to cancel the process gracefully.
            </summary>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Execution.GameThreadWorker.Abort">
            <summary>
            Aborts the thread.
            </summary>
        </member>
        <member name="P:Sceelix.Designer.Graphs.GUI.Model.Drawing.NodeLabel.Text">
            <summary>
            Actual rendered node text
            </summary>
        </member>
        <member name="P:Sceelix.Designer.Graphs.GUI.Model.Drawing.NodeLabel.TextColor">
            <summary>
            Color of the label text
            </summary>
        </member>
        <member name="P:Sceelix.Designer.Graphs.GUI.Model.Drawing.NodeLabel.MinimumSize">
            <summary>
            Minimum size the node should have to contain this label.
            </summary>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Model.Drawing.NodeLabel.UpdateColors(System.TimeSpan)">
            <summary>
            Updates text color transtions.
            </summary>
            <param name="gameTime"></param>
            <param name="deltaTime"></param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Model.Drawing.NodeLabel.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Sceelix.Designer.Graphs.GUI.Basic.RectangleF,System.Single)">
            <summary>
            Draws the text centered in the rectangle.
            </summary>
            <param name="spriteBatch"></param>
            <param name="nodeRectangle"></param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Model.VisualGraph.GetPortMappings(System.Collections.Generic.IEnumerable{Sceelix.Designer.Graphs.GUI.Model.VisualNode})">
            <summary>
            Processes a mapping between ports and visualPorts
            </summary>
            <param name="visualNodes"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Model.VisualGraph.ContainsConnection(Sceelix.Designer.Graphs.GUI.Model.VisualPort,Sceelix.Designer.Graphs.GUI.Model.VisualPort)">
            <summary>
            Checks if there is any edge between the two indicated ports.
            </summary>
            <param name="startPort"></param>
            <param name="targetPort"></param>
            <returns></returns>
        </member>
        <member name="P:Sceelix.Designer.Graphs.GUI.Model.VisualGraph.HasHoveredItems">
            <summary>
            This includes nodes, edges and ports
            </summary>
        </member>
        <member name="P:Sceelix.Designer.Graphs.GUI.Model.VisualNode.IsIntegrable">
            <summary>
            Indicates if a visual node has enough ports to be integrated in an edge connection.
            </summary>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Model.VisualNode.IsParentOf(Sceelix.Designer.Graphs.GUI.Model.VisualNode)">
            <summary>
            Checks if the current node is parent of the indicated node.
            This functions checks only for parenthood - if the nodes are the same, it returns false.
            </summary>
            <param name="possibleChildNode"></param>
            <returns>True if it is a parent, false otherwise.</returns>
        </member>
        <member name="P:Sceelix.Designer.Graphs.GUI.Model.VisualNode.IsIsolated">
            <summary>
            A node is isolated if it has no incoming or outcoming edges
            </summary>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.Model.VisualPort._portShape">
            private int _index;
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Model.VisualPort.DrawBorderFill(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws the port.
            </summary>
            <param name="spriteBatch"></param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Model.VisualPort.RecalculatePosition(Sceelix.Designer.Graphs.GUI.Basic.RectangleF,System.Int32,System.Int32)">
            <summary>
            Recalculates the position of the port based on the rectangle boundary of the containing node
            </summary>
            <param name="nodeRectangle"></param>
            <param name="index"></param>
            <param name="portNumber"></param>
            <returns></returns>
        </member>
        <member name="P:Sceelix.Designer.Graphs.GUI.Navigation.Camera2D.MatrixTransform">
            <summary>
            Transformation matrix of this camera
            </summary>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Navigation.Camera2D.Update(System.TimeSpan)">
            <summary>
            Updates the camera animations
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Navigation.Camera2D.ZoomCanvas(System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Zooms the camera by a specific amount, onto a specific position
            </summary>
            <param name="delta"></param>
            <param name="modelPosition"></param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Navigation.Camera2D.GetScaleValue(Microsoft.Xna.Framework.Matrix,System.Single)">
            <summary>
            Returns an indicator of the scale of the given matrix (useful to set limits on the zoom).
            </summary>
            <param name="matrix"></param>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Navigation.Camera2D.Move(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Moves the camera by the indicated offset
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Navigation.Camera2D.AnimateCameraTo(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Starts a camera animation to a certain matrix tranformation
            </summary>
            <param name="targetTransform"></param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Navigation.Camera2D.ToModelPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts a location in screen space to model space
            </summary>
            <param name="screenPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Navigation.Camera2D.ToScreenPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts a location in model space to screen space
            </summary>
            <param name="modelPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Navigation.Camera2D.FrameSelectionOrDefault(System.Boolean)">
            <summary>
            Frames the selected nodes, zooms to the whole of there are no selected nodes or zooms to the
            default viewport size if there are no nodes at all.
            </summary>
            <param name="animate">True, If the framing should be animated, false otherwise.</param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Navigation.Camera2D.FrameNodes(System.Collections.Generic.List{Sceelix.Designer.Graphs.GUI.Model.VisualNode},System.Boolean)">
            <summary>
            Frames the specified nodes. Does nothing if the list is empty.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="animate">if set to <c>true</c> [animate].</param>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.Toolbox.NodeToolboxWindow._categoryItems">
            <summary>
            Storage of items and their categories
            </summary>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.Toolbox.NodeToolboxWindow._creationFunction">
            <summary>
            delegate of the function that creates an instance of the given procedure item.
            </summary>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.Toolbox.NodeToolboxWindow._synchronizer">
            <summary>
            Allows functions to be called in the update cycle, not directlty in the input functions
            which sometimes cause issues.
            </summary>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.Toolbox.NodeToolboxWindow._textbox">
            <summary>
            textbox where one can search for items
            </summary>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.Toolbox.NodeToolboxWindow._treeView">
            <summary>
            Control where the items are listed
            </summary>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Basic.Animations.PortAnimation.#ctor(System.Single,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="speed">A value between 0 (stopped) and 1 (fast)</param>
            <param name="minSize"></param>
            <param name="maxSize"></param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Basic.RectangleF.ContainsPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Checks whether a point is inside the box
            </summary>
            <param name="point">The point to check</param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Basic.TransitionColor.Update(System.TimeSpan)">
            <summary>
            Updates the transition from one color to another.
            </summary>
            <param name="deltaTime"></param>
            <returns>Boolean indicating if an update took place</returns>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.GraphControl.EdgeColorPropertyId">
            <summary> 
            The ID of the <see cref="P:Sceelix.Designer.Graphs.GUI.GraphControl.EdgeColor"/> game object property.
            </summary>
        </member>
        <member name="M:Sceelix.Designer.Graphs.GUI.Interactions.ContextMenuHandler.ShowContextMenu(DigitalRune.Game.UI.Controls.InputContext)">
            <summary>
            Creates dynamically the context menu, depending if nodes/edges are selected.
            Adds the previously created list of menu items.
            </summary>
        </member>
        <member name="T:Sceelix.Designer.Graphs.GUI.Interactions.EdgeDrawer">
            <summary>
            The temporary class that is used when an edge is being drawn between 2 ports
            </summary>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.GraphEditorSettings.LiveExecution">
            <summary>
            Determines if graphs should be immediately executed if a result-critical is performed 
            (parameter change, new nodes or edge connections, etc.). This is very useful to obtain
            instant feedback on performed changes, but could become inconvenient for larger and 
            more time-consuming graphs. 
            </summary>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.GraphEditorSettings.SaveOnExecution">
            <summary>
            Indicates if the graph changes should be saved to file when the graph is executed.
            </summary>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.GraphEditorSettings.ClearLogsOnExecution">
            <summary>
            Indicates if the log window entries should be cleared when the graph is executed.
            </summary>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.GraphEditorSettings.TrackEntityPaths">
            <summary>
            Tracks information about the nodes, edges and ports that an entity has gone through.
            This is very useful to understand the nodes that contributed to the creation of an
            entity, when it is selected, but can carry a significant performance overhead for more 
            complex graphs.
            </summary>
        </member>
        <member name="F:Sceelix.Designer.Graphs.GUI.GraphEditorSettings.ViewEntityCount">
            <summary>
            Shows, at each port, how many entities have come in (for input ports) or come out (for
            output ports) in the last graph execution.
            </summary>
        </member>
        <member name="M:Sceelix.Designer.Graphs.Inspector.Graphs.GraphParameterEditorWindow.EditorTreeViewItemOnClick(System.Object,System.EventArgs)">
            <summary>
            When a user clicks on a treeitem, show the corresponding configuration controls on the inspector panel.
            </summary>
            <param name="sender"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Sceelix.Designer.Graphs.ParameterEditors.Windows.ExpressionPopupWindow.MoveSelection(System.Int32)">
            <summary>
            
            </summary>
            <param name="increment">For this current case, this value is always +1 or -1.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sceelix.Designer.Graphs.ParameterEditors.EditorTreeViewItem.SetDropHighlights(System.String)" -->
        <member name="M:Sceelix.Designer.Graphs.ParameterEditors.OptionalListParameterEditor.CreateCheckBoxListItem(Sceelix.Core.Parameters.Infos.ListParameterInfo,Sceelix.Designer.Graphs.GUI.Model.VisualNode,Sceelix.Designer.ProjectExplorer.Management.FileItem,System.String)">
            <summary>
            Handles the creation of a checkbox that, when checked, will force the subitems to appear.
            </summary>
            <param name="listParameterInfo"></param>
            <param name="visualNode"></param>
            <param name="fileItem"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Designer.Graphs.ParameterEditors.ListParameterEditor.CreateInspectorContent(Sceelix.Designer.Graphs.ParameterEditors.ParameterEditorTreeViewItem)">
            <summary>
            Add controls to configure the parameter when added to the graph parameter list.
            </summary>
            <param name="parameterEditorTreeViewItem"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Designer.Graphs.ParameterEditors.ListParameterEditor.TextButtonMultipleModelsOnClick(System.Object,System.EventArgs)">
            <summary>
            For the third case, max bigger than 1, multiple models
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Sceelix.Designer.Graphs.ParameterEditors.ParameterEditor.CanExistAtRoot">
            <summary>
            Indicates whether ParameterInfos associated to this editor can exist at the element root. The recursive parameter, for instance, is one that can not.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sceelix.Designer.Graphs.ParameterEditors.ArgumentTreeViewItem.SetDropHighlights(System.String)" -->
        <member name="F:Sceelix.Designer.Graphs.Tools.ProcedureItemLoader._systemProcedureItems">
            <summary>
            Data for system procedure instantiation
            </summary>
        </member>
        <member name="M:Sceelix.Designer.Graphs.Tools.ProcedureItemLoader.Initialize">
            <summary>
            Guids of the procedure types, to allow easy procedure reference correction
            </summary>
        </member>
        <member name="M:Sceelix.Designer.Graphs.Tools.ComponentProcedureItem.GenerateNode(Sceelix.Core.Graphs.Point,Sceelix.Core.Environments.IProcedureEnvironment)">
            <summary>
            Generates a node from the signature (including ports and definitions) and adds it to the graph
            </summary>
            <param name="position"></param>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="M:Sceelix.Designer.Graphs.Tools.SystemProcedureItem.GenerateNode(Sceelix.Core.Graphs.Point,Sceelix.Core.Environments.IProcedureEnvironment)">
            <summary>
            Generates a node from the signature (including ports and definitions) and adds it to the graph
            </summary>
            <param name="position"></param>
            <param name="environment"></param>
            <returns></returns>
        </member>
    </members>
</doc>
